#include "cico16.h"

void fixReloc(uint16_t seg);
void sub_3018();

void init()
{
    headerSize = 0x2a00;
    loadAddress = 0x01ed;
    endAddress = 0x32ad;
    cs = 0x01ed;
    ds = 0x01dd;
    es = 0x01dd;
    ss = 0x3715;
    sp = 0x4000;
    load("sam1.zip", "SAM1.EXE", 199488);
    fixReloc(loadAddress);
}

void start()
{
    sub_3018();
}


void sub_2772();
void sub_2d37();
void sub_2d92();
void sub_2dc2();
void sub_2e45();
void sub_3018();
void sub_7021();
void sub_703d();
void sub_70af();
void sub_70c3();
void sub_70d0();
void sub_715d();
void sub_71ea();
void sub_71fd();
void sub_7294();
void sub_734c();
void sub_74c0();
void sub_7654();
void sub_7907();
void sub_a03b();
void sub_d6a9();
void sub_d783();
void sub_d9c5();
void sub_dade();
void sub_ddde();
void sub_f7af();
void sub_f7f4();
void sub_f800();
void sub_10985();
void sub_11d30();
void sub_1246e();
void sub_12688();
void sub_13291();
void sub_160a9();
void sub_199ae();
void sub_19e58();
void sub_19e60();
void sub_19edc();
void sub_19f03();
void sub_19f3b();
void sub_1a092();
void sub_1a0c1();
void sub_1a5fe();
void sub_1a6f2();
void sub_1b461();
void sub_1bc8a();
void sub_1c52f();
void sub_1d2ac();
void sub_1d365();
void sub_1d572();
void sub_1d70e();
void sub_1daf3();
void sub_1db18();
void sub_1dbcb();
void sub_1dc89();
void sub_1ddec();
void sub_1ecc4();
void sub_20d09();
void sub_21a77();
void sub_222ee();
void sub_223e7();
void sub_2265d();
void sub_2278b();
void sub_22d03();
void sub_22e16();
void sub_22fc3();
void sub_231a0();
void sub_2361b();
void sub_238d1();
void sub_2399e();
void sub_23a3f();
void sub_23b09();
void sub_23c40();
void sub_23e87();
void sub_24038();
void sub_24216();
void sub_24556();
void sub_24b3d();
void sub_24db6();
void sub_25336();
void sub_256f8();
void sub_25f6d();
void sub_26da0();
void sub_27183();
void sub_274a5();
void sub_27680();
void sub_27a22();
void sub_27c32();
void sub_27d0f();
void sub_27d20();
void sub_27d65();
void sub_27db7();
void sub_27e21();
void sub_28029();
void sub_28069();
void sub_280b9();
void sub_2817e();
void sub_281ac();
void sub_281c3();
void sub_281df();
void sub_2826f();
void sub_28277();
void sub_282e3();
void sub_282f0();
void sub_282ff();
void sub_28337();
void sub_283db();
void sub_2849c();
void sub_2855b();
void sub_28f60();
void sub_2901d();
void sub_290b7();
void sub_29c05();
void sub_29cd3();
void sub_2a392();
void sub_2a5b0();
void sub_2a5e8();
void sub_2a608();
void sub_2a628();
void sub_2a67c();
void sub_2a6b0();
void sub_2a7c6();
void sub_2a906();
void sub_2afa5();
void sub_2b259();
void sub_2b3dd();
void sub_2b3e4();
void sub_2b4d0();
void sub_2b500();
void sub_2b569();
void sub_2b5b7();
void sub_2b615();
void sub_2b63d();
void sub_2b692();
void sub_2b6e5();
void sub_2b729();
void sub_2b743();
void sub_2b76e();
void sub_2b78e();
void sub_2b7c3();
void sub_2b7ca();
void sub_2b7dc();
void sub_2b7fe();
void sub_2b829();
void sub_2b90e();
void sub_2b93f();
void sub_2b944();
void sub_2b94b();
void sub_2b9a4();
void sub_2b9c5();
void sub_2b9cc();
void sub_2b9d3();
void sub_2ba70();
void sub_2bad8();
void sub_2bb60();
void sub_2bc93();
void sub_2bcb5();
void sub_2bcc3();
void sub_2bce9();
void sub_2bd3c();
void sub_2bd8f();
void sub_2bdcb();
void sub_2bdea();
void sub_2be27();
void sub_2be42();
void sub_2bf65();
void sub_2c00f();
void sub_2c115();
void sub_2c2de();
void sub_2d285();
void sub_2d321();
void sub_2d4e9();
void sub_2d617();
void sub_2df53();
void sub_2e2d2();
void sub_2e471();
void sub_2e58f();
void sub_2e628();
void sub_2e95d();
void sub_2e9bf();
void sub_2ea22();
void sub_2eb3b();
void sub_2eb75();
void sub_2eb9c();
void sub_2ebb4();
void sub_2ebd0();
void sub_2eca8();
void sub_2ed64();
void sub_2ed72();
void sub_2ed7e();
void sub_2ed8c();
void sub_2ed93();
void sub_2ed9e();
void sub_2eda6();
void sub_2edd7();
void sub_2ee2d();
void sub_2ee49();
void sub_2eef9();
void sub_2ef34();
void sub_2ef85();
void sub_2f016();
void sub_2f0b2();
void sub_2f165();
void sub_2f189();
void sub_2f19e();
void sub_2f1e7();
void sub_2f1f5();
void sub_2f204();
void sub_2f21e();
void sub_2f250();
void sub_2f291();
void sub_2f2bd();
void sub_2f2f4();
void sub_2f31f();
void sub_2f3a0();
void sub_2f4a4();
void sub_2f550();
void sub_2f59f();
void sub_2f5e4();
void sub_2f65e();
void sub_2f6f6();
void sub_2f741();
void sub_2f772();
void sub_2f7e2();
void sub_2f7e7();
void sub_2f83b();
void sub_2f876();
void sub_2f887();
void sub_2f909();
void sub_2fa31();
void sub_2fa55();
void sub_2fabe();
void sub_2fb3b();
void sub_2fb79();
void sub_2fba7();
void sub_2fbb0();
void sub_2fc28();
void sub_2fc4d();
void sub_2fc5c();
void sub_2fc63();
void sub_2fd4d();

#include <stdio.h>

void indirectCall(int s, int o, int orgs, int orgo)
{
    switch (orgs*0x10000+orgo)
    {
    }
    printf("\nMISSING INDIRECT CALL %04x:%04x @ %04x:%04x\n", s, o, orgs, orgo);
    exit(3);
}

void indirectJump(int s, int o, int orgs, int orgo, int pars, int paro)
{
    switch (orgs*0x10000+orgo)
    {
    }
    printf("\nMISSING INDIRECT JUMP %04x:%04x @ %04x:%04x/%04x:%04x\n", s, o, orgs, orgo, pars, paro);
    exit(3);
}

void sub_2772() // 01ed:08a2 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2a5b; sub_2a67c(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6d6c, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2a5b; sub_2a67c(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6d6e, ax);
    if (memoryAGet(ds, 0x6ebf) == 0x00)
        goto loc_27b7;
    memoryASet(ds, 0x6ebf, 0x00);
    if (memoryAGet16(ds, 0x3500) != 0x000b)
        goto loc_27aa;
    memoryASet16(ds, 0x3500, 0x0009);
    goto loc_27b7;
loc_27aa: // 01ed:08da
    if (memoryAGet16(ds, 0x3500) != 0x000c)
        goto loc_27b7;
    memoryASet16(ds, 0x3500, 0x000a);
loc_27b7: // 01ed:08e7
    ax = memoryAGet16(ds, 0x6d68);
    ax -= 0x0032;
    if ((short)ax <= (short)memoryAGet16(ds, 0x6d6c))
        goto loc_27f5;
    memoryASet(ds, 0x6eca, 0x01);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec2, 0x00);
    memoryASet(ds, 0x6d70, 0x01);
    if (memoryAGet(ds, 0x6ec1) != 0x00)
        goto loc_27ed;
    if (memoryAGet(ds, 0x6ec0) != 0x00)
        goto loc_27ed;
    memoryASet16(ds, 0x3500, 0x0005);
    goto loc_27f3;
loc_27ed: // 01ed:091d
    memoryASet16(ds, 0x3500, 0x000e);
loc_27f3: // 01ed:0923
    goto loc_2865;
loc_27f5: // 01ed:0925
    ax = memoryAGet16(ds, 0x6d68);
    ax += 0x0032;
    if ((short)ax >= (short)memoryAGet16(ds, 0x6d6c))
        goto loc_2833;
    memoryASet(ds, 0x6ecb, 0x01);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ec2, 0x00);
    memoryASet(ds, 0x6d70, 0x01);
    if (memoryAGet(ds, 0x6ec1) != 0x00)
        goto loc_282b;
    if (memoryAGet(ds, 0x6ec0) != 0x00)
        goto loc_282b;
    memoryASet16(ds, 0x3500, 0x0001);
    goto loc_2831;
loc_282b: // 01ed:095b
    memoryASet16(ds, 0x3500, 0x000d);
loc_2831: // 01ed:0961
    goto loc_2865;
loc_2833: // 01ed:0963
    if (memoryAGet(ds, 0x6d70) == 0x00)
        goto loc_2865;
    if (memoryAGet(ds, 0x6ecb) == 0x01)
        goto loc_2848;
    if (memoryAGet16(ds, 0x3500) != 0x0001)
        goto loc_2850;
loc_2848: // 01ed:0978
    memoryASet16(ds, 0x3500, 0x0009);
    goto loc_2856;
loc_2850: // 01ed:0980
    memoryASet16(ds, 0x3500, 0x000a);
loc_2856: // 01ed:0986
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6d70, 0x00);
loc_2865: // 01ed:0995
    if (memoryAGet16(ds, 0x681c) == 0x0001)
        goto loc_286f;
    goto loc_291e;
loc_286f: // 01ed:099f
    ax = memoryAGet16(ds, 0x6d6a);
    ax -= 0x0032;
    if ((short)ax <= (short)memoryAGet16(ds, 0x6d6e))
        goto loc_28aa;
    memoryASet(ds, 0x6ec3, 0x01);
    memoryASet(ds, 0x6d71, 0x01);
    if (memoryAGet16(ds, 0x3500) == 0x0001)
        goto loc_289a;
    if (memoryAGet16(ds, 0x3500) == 0x0009)
        goto loc_289a;
    if (memoryAGet16(ds, 0x3500) != 0x000b)
        goto loc_28a2;
loc_289a: // 01ed:09ca
    memoryASet16(ds, 0x3500, 0x0001);
    goto loc_28a8;
loc_28a2: // 01ed:09d2
    memoryASet16(ds, 0x3500, 0x0005);
loc_28a8: // 01ed:09d8
    goto loc_291e;
loc_28aa: // 01ed:09da
    ax = memoryAGet16(ds, 0x6d6a);
    ax += 0x0032;
    if ((short)ax >= (short)memoryAGet16(ds, 0x6d6e))
        goto loc_28e5;
    memoryASet(ds, 0x6ec4, 0x01);
    memoryASet(ds, 0x6d71, 0x01);
    if (memoryAGet16(ds, 0x3500) == 0x0001)
        goto loc_28d5;
    if (memoryAGet16(ds, 0x3500) == 0x0009)
        goto loc_28d5;
    if (memoryAGet16(ds, 0x3500) != 0x000b)
        goto loc_28dd;
loc_28d5: // 01ed:0a05
    memoryASet16(ds, 0x3500, 0x0001);
    goto loc_28e3;
loc_28dd: // 01ed:0a0d
    memoryASet16(ds, 0x3500, 0x0005);
loc_28e3: // 01ed:0a13
    goto loc_291e;
loc_28e5: // 01ed:0a15
    if (memoryAGet(ds, 0x6d71) == 0x00)
        goto loc_291e;
    memoryASet(ds, 0x6d71, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    if (memoryAGet16(ds, 0x3500) == 0x0001)
        goto loc_2910;
    if (memoryAGet16(ds, 0x3500) == 0x0009)
        goto loc_2910;
    if (memoryAGet16(ds, 0x3500) != 0x000b)
        goto loc_2918;
loc_2910: // 01ed:0a40
    memoryASet16(ds, 0x3500, 0x0009);
    goto loc_291e;
loc_2918: // 01ed:0a48
    memoryASet16(ds, 0x3500, 0x000a);
loc_291e: // 01ed:0a4e
    push(cs); cs = 0x2a5b; sub_2a608(); assert(cs == 0x01ed);
    if (al)
        goto loc_292a;
    goto loc_2ab1;
loc_292a: // 01ed:0a5a
    if ((short)memoryAGet16(ds, 0x6858) > (short)0x0000)
        goto loc_2934;
    goto loc_2ab1;
loc_2934: // 01ed:0a64
    if ((short)memoryAGet16(ds, 0x681c) > (short)0x0001)
        goto loc_293e;
    goto loc_2ab1;
loc_293e: // 01ed:0a6e
    if (memoryAGet(ds, 0x69f5) == 0x00)
        goto loc_2948;
    goto loc_2ab1;
loc_2948: // 01ed:0a78
    memoryASet(ss, bp - 3, 0x00);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
loc_2951: // 01ed:0a81
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 26712) == 0x01)
        goto loc_2965;
    goto loc_2a9f;
loc_2965: // 01ed:0a95
    ax = memoryAGet16(ds, 0x34ee);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26684, ax);
    ax = memoryAGet16(ds, 0x34f0);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26686, ax);
    ax = memoryAGet16(ds, 0x34f2);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26688, ax);
    ax = memoryAGet16(ds, 0x34f4);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26690, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26702, 0x0027);
    if (memoryAGet16(ds, 0x3500) == 0x0001)
        goto loc_29c6;
    if (memoryAGet16(ds, 0x3500) == 0x000d)
        goto loc_29c6;
    if (memoryAGet16(ds, 0x3500) == 0x0009)
        goto loc_29c6;
    if (memoryAGet16(ds, 0x3500) != 0x000b)
        goto loc_29e0;
loc_29c6: // 01ed:0af6
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26704, 0x0001);
    memoryASet(ds, 0x6ebf, 0x01);
    memoryASet16(ds, 0x3500, 0x000b);
    goto loc_29f8;
loc_29e0: // 01ed:0b10
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26704, 0xffff);
    memoryASet(ds, 0x6ebf, 0x01);
    memoryASet16(ds, 0x3500, 0x000c);
loc_29f8: // 01ed:0b28
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 26706, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26692, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26708, 0x0008);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 26694, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 26696, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26710, 0x0007);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 26712, 0x00);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 26713, 0x00);
    memoryASet(ss, bp - 3, 0x01);
    memoryASet16(ds, 0x6858, memoryAGet16(ds, 0x6858) - 1);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x01ed);
    if (memoryAGet16(ds, 0x3500) == 0x0001)
        goto loc_2a91;
    if (memoryAGet16(ds, 0x3500) == 0x0009)
        goto loc_2a91;
    if (memoryAGet16(ds, 0x3500) == 0x000d)
        goto loc_2a91;
    if (memoryAGet16(ds, 0x3500) != 0x000b)
        goto loc_2a99;
loc_2a91: // 01ed:0bc1
    memoryASet16(ds, 0x3500, 0x000b);
    goto loc_2a9f;
loc_2a99: // 01ed:0bc9
    memoryASet16(ds, 0x3500, 0x000c);
loc_2a9f: // 01ed:0bcf
    ax = memoryAGet16(ss, bp - 2);
    if (ax == memoryAGet16(ds, 0x69a2))
        goto loc_2ab1;
    if (memoryAGet(ss, bp - 3) != 0x00)
        goto loc_2ab1;
    goto loc_2951;
loc_2ab1: // 01ed:0be1
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2d37() // 01ed:0e67
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0x027e); es = memoryAGet16(ds, 0x027e + 2);
    dx = es;
    memoryASet16(ds, 0x70ca, ax);
    memoryASet16(ds, 0x70cc, dx);
    ax = 0x0e33;
    dx = 0x01ed;
    memoryASet16(ds, 0x027e, ax);
    memoryASet16(ds, 0x0280, dx);
    al = 0x1c;
    push(ax);
    di = 0x70ce;
    push(ds);
    push(di);
    push(cs); cs = 0x2eb3; sub_2eb9c(); assert(cs == 0x01ed);
    al = 0x1c;
    push(ax);
    ax = 0x0be5;
    dx = 0x01ed;
    push(dx);
    push(ax);
    push(cs); cs = 0x2eb3; sub_2ebb4(); assert(cs == 0x01ed);
    al = 0x09;
    push(ax);
    di = 0x70d2;
    push(ds);
    push(di);
    push(cs); cs = 0x2eb3; sub_2eb9c(); assert(cs == 0x01ed);
    al = 0x09;
    push(ax);
    ax = 0x0000;
    dx = 0x01ed;
    push(dx);
    push(ax);
    push(cs); cs = 0x2eb3; sub_2ebb4(); assert(cs == 0x01ed);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_2d92() // 01ed:0ec2
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = 0x1c;
    push(ax);
    push(memoryAGet16(ds, 0x70d0));
    push(memoryAGet16(ds, 0x70ce));
    push(cs); cs = 0x2eb3; sub_2ebb4(); assert(cs == 0x01ed);
    al = 0x09;
    push(ax);
    push(memoryAGet16(ds, 0x70d4));
    push(memoryAGet16(ds, 0x70d2));
    push(cs); cs = 0x2eb3; sub_2ebb4(); assert(cs == 0x01ed);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_2dc2() // 01ed:0ef2 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0080;
    al = memoryAGet(ds, 0x34af);
    memoryASet(ds, 0x6d06, al);
    ax = memoryAGet16(ds, 0x70ba);
    memoryASet16(ds, 0x6d07, ax);
    ax = memoryAGet16(ds, 0x70bc);
    memoryASet16(ds, 0x6d09, ax);
    ax = memoryAGet16(ds, 0x70be);
    memoryASet16(ds, 0x6d0b, ax);
    ax = memoryAGet16(ds, 0x70c0);
    memoryASet16(ds, 0x6d0d, ax);
    ax = memoryAGet16(ds, 0x70c4);
    memoryASet16(ds, 0x6d0f, ax);
    ax = memoryAGet16(ds, 0x70c2);
    memoryASet16(ds, 0x6d11, ax);
    ax = memoryAGet16(ds, 0x70c6);
    memoryASet16(ds, 0x6d13, ax);
    ax = memoryAGet16(ds, 0x70c8);
    memoryASet16(ds, 0x6d15, ax);
    di = bp - 128;
    push(ss);
    push(di);
    di = 0x0ee9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x01ed);
    di = bp - 128;
    push(ss);
    push(di);
    ax = 0x01d3;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fbb0(); assert(cs == 0x01ed);
    di = bp - 128;
    push(ss);
    push(di);
    di = 0x6b44;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc63(); assert(cs == 0x01ed);
    sp += 0x0004;
    di = bp - 128;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x01ed);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2e45() // 01ed:0f75 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0082;
    di = bp - 128;
    push(ss);
    push(di);
    di = 0x0f6c;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x01ed);
    di = bp - 128;
    push(ss);
    push(di);
    ax = 0x01d3;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x01ed);
    push(cs); cs = 0x2ebd; sub_2edd7(); assert(cs == 0x01ed);
    if (!ax)
        goto loc_2e76;
    al = 0x00;
    goto loc_2e78;
loc_2e76: // 01ed:0fa6
    al = 0x01;
loc_2e78: // 01ed:0fa8
    memoryASet(ss, bp - 129, al);
    di = bp - 128;
    push(ss);
    push(di);
    ax = 0x01d3;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x01ed);
    push(cs); cs = 0x2ebd; sub_2edd7(); assert(cs == 0x01ed);
    if (!ax)
        goto loc_2e97;
    al = 0x00;
    goto loc_2e99;
loc_2e97: // 01ed:0fc7
    al = 0x01;
loc_2e99: // 01ed:0fc9
    memoryASet(ss, bp - 129, al);
    if (memoryAGet(ss, bp - 129) == 0x00)
        goto loc_2f0e;
    di = bp - 128;
    push(ss);
    push(di);
    di = 0x6b44;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x01ed);
    sp += 0x0004;
    di = bp - 128;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x01ed);
    al = memoryAGet(ds, 0x6d06);
    memoryASet(ds, 0x34af, al);
    ax = memoryAGet16(ds, 0x6d07);
    memoryASet16(ds, 0x70ba, ax);
    ax = memoryAGet16(ds, 0x6d09);
    memoryASet16(ds, 0x70bc, ax);
    ax = memoryAGet16(ds, 0x6d0b);
    memoryASet16(ds, 0x70be, ax);
    ax = memoryAGet16(ds, 0x6d0d);
    memoryASet16(ds, 0x70c0, ax);
    ax = memoryAGet16(ds, 0x6d0f);
    memoryASet16(ds, 0x70c4, ax);
    ax = memoryAGet16(ds, 0x6d11);
    memoryASet16(ds, 0x70c2, ax);
    ax = memoryAGet16(ds, 0x6d13);
    memoryASet16(ds, 0x70c6, ax);
    ax = memoryAGet16(ds, 0x6d15);
    memoryASet16(ds, 0x70c8, ax);
    if (memoryAGet16(ds, 0x70c8) != 0x0001)
        goto loc_2f07;
    push(cs); cs = 0x2a5b; sub_2a5b0(); assert(cs == 0x01ed);
    memoryASet(ds, 0x341c, al);
    goto loc_2f0c;
loc_2f07: // 01ed:1037
    memoryASet(ds, 0x341c, 0x00);
loc_2f0c: // 01ed:103c
    goto loc_2f46;
loc_2f0e: // 01ed:103e
    memoryASet(ds, 0x34af, 0x01);
    memoryASet16(ds, 0x70ba, 0x0048);
    memoryASet16(ds, 0x70bc, 0x0050);
    memoryASet16(ds, 0x70be, 0x004b);
    memoryASet16(ds, 0x70c0, 0x004d);
    memoryASet16(ds, 0x70c4, 0x001d);
    memoryASet16(ds, 0x70c2, 0x0038);
    ax = 0;
    memoryASet16(ds, 0x70c6, ax);
    ax = 0;
    memoryASet16(ds, 0x70c8, ax);
    memoryASet(ds, 0x341c, 0x00);
loc_2f46: // 01ed:1076
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3018() // 01ed:1148 +entry
{
    push(cs); cs = 0x2ebd; sub_2ebd0(); assert(cs == 0x01ed);
    push(cs); cs = 0x2baf; sub_2bb60(); assert(cs == 0x01ed);
    push(cs); cs = 0x2b4d; sub_2b4d0(); assert(cs == 0x01ed);
    push(cs); cs = 0x2a7d; sub_2b3dd(); assert(cs == 0x01ed);
    push(cs); cs = 0x2a6b; sub_2a7c6(); assert(cs == 0x01ed);
    push(cs); cs = 0x2a5b; sub_2a628(); assert(cs == 0x01ed);
    push(cs); cs = 0x282f; sub_282f0(); assert(cs == 0x01ed);
    push(cs); cs = 0x27d2; sub_281ac(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_27d0f(); assert(cs == 0x01ed);
    push(cs); cs = 0x0f80; sub_19e58(); assert(cs == 0x01ed);
    push(cs); cs = 0x070d; sub_f7f4(); assert(cs == 0x01ed);
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs); cs = 0x2ebd; sub_2ef85(); assert(cs == 0x01ed);
    if ((short)dx < (short)0x0003)
        goto loc_3066;
    if ((short)dx > (short)0x0003)
        goto loc_3084;
    if (ax >= 0x0d40)
        goto loc_3084;
loc_3066: // 01ed:1196
    di = 0x7292;
    push(ds);
    push(di);
    di = 0x107a;
    push(cs);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fb3b(); assert(cs == 0x01ed);
    push(cs); cs = 0x2ebd; sub_2fabe(); assert(cs == 0x01ed);
    ax = 0;
    push(cs); cs = 0x2ebd; sub_2eca8(); assert(cs == 0x01ed);
loc_3084: // 01ed:11b4
    push(cs); cs = 0x19e6; sub_19e60(); assert(cs == 0x01ed);
    if (al != 0x55)
        goto loc_3090;
    goto loc_6feb;
loc_3090: // 01ed:11c0
    sub_2d37();
    push(cs);
    sub_70af();
    memoryASet(ds, 0x34ae, 0x00);
    di = 0x341e;
    push(ds);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    di = 0x10a9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x341e); es = memoryAGet16(ds, 0x341e + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x01ed);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x341e); es = memoryAGet16(ds, 0x341e + 2);
    push(es);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x01ed);
    di = 0x3422;
    push(ds);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    di = 0x10b5;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x3422); es = memoryAGet16(ds, 0x3422 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x01ed);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x3422); es = memoryAGet16(ds, 0x3422 + 2);
    push(es);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x01ed);
    di = 0x3426;
    push(ds);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    di = 0x10c1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x3426); es = memoryAGet16(ds, 0x3426 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x01ed);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x3426); es = memoryAGet16(ds, 0x3426 + 2);
    push(es);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x01ed);
    di = 0x342a;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x01ed);
    memoryASet(ds, 0x34af, 0x01);
    push(cs); cs = 0x2a7d; sub_2a906(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_1db18(); assert(cs == 0x01ed);
    ax = 0;
    memoryASet16(ds, 0x380c, ax);
    ax = 0;
    memoryASet16(ds, 0x380e, ax);
    ax = 0;
    memoryASet16(ds, 0x3810, ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x19e6; sub_19f3b(); assert(cs == 0x01ed);
    push(cs); cs = 0x2a5b; sub_2a5b0(); assert(cs == 0x01ed);
    memoryASet(ds, 0x341c, al);
    memoryASet(ds, 0x6d70, 0x00);
    if (memoryAGet(ds, 0x341c) == 0x00)
        goto loc_31f2;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2a5b; sub_2a67c(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6d68, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2a5b; sub_2a67c(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6d6a, ax);
loc_31f2: // 01ed:1322
    push(cs);
    sub_2e45();
    di = 0x7292;
    push(ds);
    push(di);
    di = 0x10cd;
    push(cs);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fb3b(); assert(cs == 0x01ed);
    push(cs); cs = 0x2ebd; sub_2fabe(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_1d70e(); assert(cs == 0x01ed);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bc93(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_1d2ac(); assert(cs == 0x01ed);
loc_321f: // 01ed:134f
    if (memoryAGet(ds, 0x6ec6) == 0x00)
        goto loc_3229;
    goto loc_6fae;
loc_3229: // 01ed:1359
    ax = 0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bc93(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_1d365(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0x6ec6) != 0x00)
        goto loc_3242;
    push(cs); cs = 0x2a7d; sub_2afa5(); assert(cs == 0x01ed);
loc_3242: // 01ed:1372
    if (memoryAGet(ds, 0x6ec6) == 0x00)
        goto loc_324c;
    goto loc_6f9f;
loc_324c: // 01ed:137c
    if (memoryAGet(ds, 0x6ec7) == 0x00)
        goto loc_3256;
    goto loc_6f9f;
loc_3256: // 01ed:1386
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bcc3(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6822, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be27(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_1daf3(); assert(cs == 0x01ed);
    if (memoryAGet16(ds, 0x70c6) != 0x0000)
        goto loc_3285;
    ax = 0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bce9(); assert(cs == 0x01ed);
    goto loc_3291;
loc_3285: // 01ed:13b5
    ax = 0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bd3c(); assert(cs == 0x01ed);
loc_3291: // 01ed:13c1
    push(cs); cs = 0x2a7d; sub_2b259(); assert(cs == 0x01ed);
    if (memoryAGet16(ds, 0x6d60) == 0x0000)
        goto loc_32d0;
    ax = memoryAGet16(ds, 0x6d60);
    if ((short)ax < (short)0x0002)
        goto loc_32ba;
    if ((short)ax > (short)0x000a)
        goto loc_32ba;
    ax = memoryAGet16(ds, 0x6d60);
    ax--;
    push(ax);
    push(cs); cs = 0x19e6; sub_1ddec(); assert(cs == 0x01ed);
    if (!al)
        goto loc_32b8;
loc_32b8: // 01ed:13e8
    goto loc_32cb;
loc_32ba: // 01ed:13ea
    if (ax != 0x000b)
        goto loc_32cb;
    ax = 0;
    push(ax);
    push(cs); cs = 0x19e6; sub_1ddec(); assert(cs == 0x01ed);
    if (!al)
        goto loc_32cb;
loc_32cb: // 01ed:13fb
    ax = 0;
    memoryASet16(ds, 0x6d60, ax);
loc_32d0: // 01ed:1400
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x0f80; sub_199ae(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_19e60(); assert(cs == 0x01ed);
    if (al != 0x56)
        goto loc_32ed;
    ax = 0x0180;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bdea(); assert(cs == 0x01ed);
    goto loc_32f6;
loc_32ed: // 01ed:141d
    ax = 0x00be;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bd8f(); assert(cs == 0x01ed);
loc_32f6: // 01ed:1426
    sync();
    if (memoryAGet(ds, 0x6ec6) == 0x00)
        goto loc_3300;
    goto loc_6f9f;
loc_3300: // 01ed:1430
    if (memoryAGet(ds, 0x6ec7) == 0x00)
        goto loc_330a;
    goto loc_6f9f;
loc_330a: // 01ed:143a
    ax = memoryAGet16(ds, 0x6832);
    if (ax == memoryAGet16(ds, 0x6838))
        goto loc_3318;
    push(cs); cs = 0x19e6; sub_1a0c1(); assert(cs == 0x01ed);
loc_3318: // 01ed:1448
    if ((short)memoryAGet16(ds, 0x682c) > (short)0x0007)
        goto loc_3322;
    goto loc_6f9c;
loc_3322: // 01ed:1452
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
    if (memoryAGet(ds, 0x341c) == 0x00)
        goto loc_3332;
    push(cs);
    sub_2772();
loc_3332: // 01ed:1462
    if (memoryAGet16(ds, 0x3500) != 0x0009)
        goto loc_3348;
    if (memoryAGet(ds, 0x6ecb) == 0x00)
        goto loc_3348;
    memoryASet16(ds, 0x3500, 0x0001);
    goto loc_3380;
loc_3348: // 01ed:1478
    if (memoryAGet16(ds, 0x3500) != 0x000a)
        goto loc_335e;
    if (memoryAGet(ds, 0x6eca) == 0x00)
        goto loc_335e;
    memoryASet16(ds, 0x3500, 0x0005);
    goto loc_3380;
loc_335e: // 01ed:148e
    if (memoryAGet16(ds, 0x3500) == 0x000a)
        goto loc_336c;
    if (memoryAGet16(ds, 0x3500) != 0x0009)
        goto loc_3380;
loc_336c: // 01ed:149c
    if (memoryAGet(ds, 0x6ec4) != 0x00)
        goto loc_337a;
    if (memoryAGet(ds, 0x6ec3) == 0x00)
        goto loc_3380;
loc_337a: // 01ed:14aa
    memoryASet16(ds, 0x3500, 0x0001);
loc_3380: // 01ed:14b0
    push(cs); cs = 0x19e6; sub_19edc(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ds, 0x34f4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ds, 0x34f4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ds, 0x34f4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x34f2));
    ax = memoryAGet16(ds, 0x34f4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x34f2));
    push(memoryAGet16(ds, 0x34f4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x34f2));
    ax = memoryAGet16(ds, 0x34f4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ds, 0x34f4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ds, 0x34f4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ds, 0x34f4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6826, 0x0002);
    goto loc_342a;
loc_3426: // 01ed:1556
    memoryASet16(ds, 0x6826, memoryAGet16(ds, 0x6826) + 1);
loc_342a: // 01ed:155a
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13546) == 0x00)
        goto loc_343c;
    goto loc_383e;
loc_343c: // 01ed:156c
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13547) != 0x00)
        goto loc_344e;
    goto loc_35b4;
loc_344e: // 01ed:157e
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x01);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0020;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    goto loc_383e;
loc_35b4: // 01ed:16e4
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x6826));
    push(cs); cs = 0x070d; sub_70d0(); assert(cs == 0x01ed);
    if (al)
        goto loc_3604;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x001c)
        goto loc_3604;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x0015)
        goto loc_3604;
    di = memoryAGet16(ds, 0x6828);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x000e)
        goto loc_3604;
    di = memoryAGet16(ds, 0x6828);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13547) != 0x00)
        goto loc_3604;
    goto loc_383e;
loc_3604: // 01ed:1734
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_3655;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
loc_3655: // 01ed:1785
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    if (ax != 0x0353)
        goto loc_36cc;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0030;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0020;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    goto loc_383e;
loc_36cc: // 01ed:17fc
    if ((short)ax < (short)0x0321)
        goto loc_36d6;
    if ((short)ax <= (short)0x0383)
        goto loc_36db;
loc_36d6: // 01ed:1806
    if (ax != 0x1389)
        goto loc_3737;
loc_36db: // 01ed:180b
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_3734;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
loc_3734: // 01ed:1864
    goto loc_383e;
loc_3737: // 01ed:1867
    if (ax == 0x0072)
        goto loc_373f;
    goto loc_37e0;
loc_373f: // 01ed:186f
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_37de;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
loc_37de: // 01ed:190e
    goto loc_383e;
loc_37e0: // 01ed:1910
    if (ax != 0x0065)
        goto loc_383e;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_383e;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
loc_383e: // 01ed:196e
    if (memoryAGet16(ds, 0x6826) == 0x0019)
        goto loc_3848;
    goto loc_3426;
loc_3848: // 01ed:1978
    ax = memoryAGet16(ds, 0x69a2);
    memoryASet16(ss, bp - 2, ax);
    ax = 0x0001;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 2))
        goto loc_3859;
    goto loc_38f1;
loc_3859: // 01ed:1989
    memoryASet16(ds, 0x6826, ax);
    goto loc_3862;
loc_385e: // 01ed:198e
    memoryASet16(ds, 0x6826, memoryAGet16(ds, 0x6826) + 1);
loc_3862: // 01ed:1992
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26688));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26690));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26688);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26690));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26688));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26690);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26688);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26690);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x6826);
    if (ax == memoryAGet16(ss, bp - 2))
        goto loc_38f1;
    goto loc_385e;
loc_38f1: // 01ed:1a21
    if (memoryAGet(ds, 0x69f5) != 0x00)
        goto loc_3931;
    if (memoryAGet(ds, 0x6a3e) != 0x00)
        goto loc_3931;
    push(cs); cs = 0x070d; sub_d9c5(); assert(cs == 0x01ed);
    if ((short)memoryAGet16(ds, 0x681c) <= (short)0x0001)
        goto loc_3910;
    push(cs); cs = 0x070d; sub_dade(); assert(cs == 0x01ed);
loc_3910: // 01ed:1a40
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    push(cs); cs = 0x070d; sub_f7af(); assert(cs == 0x01ed);
    memoryASet(ds, 0x6ec2, 0x00);
    goto loc_3a2d;
loc_3931: // 01ed:1a61
    if (memoryAGet(ds, 0x69f5) != 0x00)
        goto loc_393b;
    goto loc_39ba;
loc_393b: // 01ed:1a6b
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x34f2, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x34f4, ax);
    if (memoryAGet16(ds, 0x3500) == 0x000f)
        goto loc_3956;
    memoryASet16(ds, 0x3500, 0x000f);
    goto loc_395c;
loc_3956: // 01ed:1a86
    memoryASet16(ds, 0x3500, 0x0010);
loc_395c: // 01ed:1a8c
    if (memoryAGet(ds, 0x69f6) != 0x23)
        goto loc_396c;
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x01ed);
loc_396c: // 01ed:1a9c
    memoryASet(ds, 0x69f6, memoryAGet(ds, 0x69f6) - 1);
    if (memoryAGet(ds, 0x69f6) != 0x00)
        goto loc_397c;
    push(cs); cs = 0x070d; sub_71ea(); assert(cs == 0x01ed);
loc_397c: // 01ed:1aac
    if (memoryAGet(ds, 0x69f6) <= 0x00)
        goto loc_39b8;
    al = memoryAGet(ds, 0x69f6);
    ah = 0;
    di = ax;
    di <<= 1;
    ax = memoryAGet16(ds, di + 27126);
    memoryASet16(ds, 0x34f0, memoryAGet16(ds, 0x34f0) - ax);
    if ((short)memoryAGet16(ds, 0x34f0) >= (short)0x0010)
        goto loc_39a3;
    memoryASet16(ds, 0x34f0, 0x0010);
    goto loc_39b8;
loc_39a3: // 01ed:1ad3
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x00b8;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_39b8;
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x00b8;
    memoryASet16(ds, 0x34f0, ax);
loc_39b8: // 01ed:1ae8
    goto loc_3a2d;
loc_39ba: // 01ed:1aea
    if (memoryAGet(ds, 0x6a3e) == 0x00)
        goto loc_3a2d;
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x34f2, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x34f4, ax);
    if (memoryAGet(ds, 0x6a3f) != 0x08)
        goto loc_39dd;
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x01ed);
loc_39dd: // 01ed:1b0d
    memoryASet(ds, 0x6a3f, memoryAGet(ds, 0x6a3f) - 1);
    if (memoryAGet(ds, 0x6a3f) != 0x00)
        goto loc_3a13;
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x19e6; sub_1a092(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x681c, 0x0001);
    push(cs); cs = 0x2a7d; sub_2b259(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x681c));
    push(cs); cs = 0x0f80; sub_199ae(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0x6842) == 0x00)
        goto loc_3a11;
    push(cs); cs = 0x19e6; sub_274a5(); assert(cs == 0x01ed);
loc_3a11: // 01ed:1b41
    goto loc_3a2d;
loc_3a13: // 01ed:1b43
    if (memoryAGet(ds, 0x6a3f) <= 0x00)
        goto loc_3a2d;
    if (memoryAGet16(ds, 0x3502) != 0xffff)
        goto loc_3a28;
    memoryASet16(ds, 0x34ee, memoryAGet16(ds, 0x34ee) - 0x0002);
    goto loc_3a2d;
loc_3a28: // 01ed:1b58
    memoryASet16(ds, 0x34ee, memoryAGet16(ds, 0x34ee) + 0x0002);
loc_3a2d: // 01ed:1b5d
    push(cs); cs = 0x070d; sub_a03b(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x69a2);
    memoryASet16(ss, bp - 2, ax);
    ax = 0x0001;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 2))
        goto loc_3a43;
    goto loc_3ee4;
loc_3a43: // 01ed:1b73
    memoryASet16(ds, 0x6826, ax);
    goto loc_3a4c;
loc_3a48: // 01ed:1b78
    memoryASet16(ds, 0x6826, memoryAGet16(ds, 0x6826) + 1);
loc_3a4c: // 01ed:1b7c
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 26712) == 0x00)
        goto loc_3a5e;
    goto loc_3ed9;
loc_3a5e: // 01ed:1b8e
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 26713) != 0x00)
        goto loc_3a70;
    goto loc_3b88;
loc_3a70: // 01ed:1ba0
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 26712, 0x01);
    goto loc_3ed9;
loc_3b88: // 01ed:1cb8
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 26702) == 0x0272)
        goto loc_3b9b;
    goto loc_3cd7;
loc_3b9b: // 01ed:1ccb
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26696);
    ax >>= 1;
    ax += 0x0019;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26696, memoryAGet16(ds, di + 26696) - 1);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 26696) <= (short)0x0000)
        goto loc_3bfd;
    goto loc_3cd4;
loc_3bfd: // 01ed:1d2d
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 26713, 0x01);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
loc_3cd4: // 01ed:1e04
    goto loc_3e55;
loc_3cd7: // 01ed:1e07
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x6826));
    push(cs); cs = 0x070d; sub_715d(); assert(cs == 0x01ed);
    if (!al)
        goto loc_3ceb;
    goto loc_3d7f;
loc_3ceb: // 01ed:1e1b
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 26713, 0x01);
    goto loc_3e55;
loc_3d7f: // 01ed:1eaf
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26702);
    ax--;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax += memoryAGet16(ds, di + 26692);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
loc_3e55: // 01ed:1f85
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
loc_3ed9: // 01ed:2009
    ax = memoryAGet16(ds, 0x6826);
    if (ax == memoryAGet16(ss, bp - 2))
        goto loc_3ee4;
    goto loc_3a48;
loc_3ee4: // 01ed:2014
    if (memoryAGet(ds, 0x69e0) == 0x00)
        goto loc_3f0e;
    memoryASet16(ds, 0x69e2, memoryAGet16(ds, 0x69e2) - 1);
    if (memoryAGet16(ds, 0x69e2) != 0x0000)
        goto loc_3efd;
    memoryASet(ds, 0x69d8, 0x01);
    goto loc_3f0e;
loc_3efd: // 01ed:202d
    if (memoryAGet16(ds, 0x69e2) != 0xffed)
        goto loc_3f0e;
    memoryASet(ds, 0x69b4, 0x00);
    memoryASet(ds, 0x69e0, 0x00);
loc_3f0e: // 01ed:203e
    if (memoryAGet(ds, 0x69d8) != 0x00)
        goto loc_3f18;
    goto loc_3f98;
loc_3f18: // 01ed:2048
    memoryASet(ds, 0x69d8, 0x00);
    ax = memoryAGet16(ds, 0x69e4);
    memoryASet16(ds, 0x34ee, ax);
    ax = memoryAGet16(ds, 0x69e6);
    memoryASet16(ds, 0x34f0, ax);
    ax = memoryAGet16(ds, 0x34ee);
    ax -= 0x00a0;
    memoryASet16(ds, 0x6838, ax);
    if ((short)memoryAGet16(ds, 0x6838) >= (short)0x0000)
        goto loc_3f3e;
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
loc_3f3e: // 01ed:206e
    if ((short)memoryAGet16(ds, 0x6838) <= (short)0x0140)
        goto loc_3f4c;
    memoryASet16(ds, 0x6838, 0x0140);
loc_3f4c: // 01ed:207c
    ax = memoryAGet16(ds, 0x34f0);
    ax -= 0x0064;
    memoryASet16(ds, 0x683a, ax);
    if ((short)memoryAGet16(ds, 0x683a) >= (short)0x0000)
        goto loc_3f61;
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
loc_3f61: // 01ed:2091
    if ((short)memoryAGet16(ds, 0x683a) <= (short)0x00b8)
        goto loc_3f6f;
    memoryASet16(ds, 0x683a, 0x00b8);
loc_3f6f: // 01ed:209f
    if (memoryAGet16(ds, 0x70c6) != 0x0000)
        goto loc_3f88;
    push(memoryAGet16(ds, 0x6838));
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bce9(); assert(cs == 0x01ed);
    goto loc_3f98;
loc_3f88: // 01ed:20b8
    push(memoryAGet16(ds, 0x6838));
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bd3c(); assert(cs == 0x01ed);
loc_3f98: // 01ed:20c8
    memoryASet16(ds, 0x6826, 0x0001);
    if (memoryAGet16(ds, 0x3500) == 0x0001)
        goto loc_3fac;
    if (memoryAGet16(ds, 0x3500) != 0x0005)
        goto loc_3fc2;
loc_3fac: // 01ed:20dc
    ax = memoryAGet16(ds, 0x3506);
    memoryASet16(ds, 0x34f6, memoryAGet16(ds, 0x34f6) + ax);
    if ((short)memoryAGet16(ds, 0x34f6) <= (short)0x0013)
        goto loc_3fc0;
    memoryASet16(ds, 0x34f6, 0x0001);
loc_3fc0: // 01ed:20f0
    goto loc_3fc8;
loc_3fc2: // 01ed:20f2
    memoryASet16(ds, 0x34f6, 0x0001);
loc_3fc8: // 01ed:20f8
    if (memoryAGet(ds, 0x6a41) == 0x00)
        goto loc_4009;
    memoryASet(ds, 0x6a42, memoryAGet(ds, 0x6a42) - 1);
    al = memoryAGet(ds, 0x6a42);
    ah = 0;
    if (ax != 0x0000)
        goto loc_3fe4;
    memoryASet(ds, 0x6a41, 0x00);
    goto loc_4009;
loc_3fe4: // 01ed:2114
    if (ax != 0x000a)
        goto loc_3ff1;
    memoryASet16(ds, 0x34ec, 0x0005);
    goto loc_4009;
loc_3ff1: // 01ed:2121
    if (ax != 0x0014)
        goto loc_3ffe;
    memoryASet16(ds, 0x34ec, 0x0005);
    goto loc_4009;
loc_3ffe: // 01ed:212e
    if (ax != 0x001e)
        goto loc_4009;
    memoryASet16(ds, 0x34ec, 0x0005);
loc_4009: // 01ed:2139
    if ((short)memoryAGet16(ds, 0x34ec) <= (short)0x0000)
        goto loc_4045;
    ax = memoryAGet16(ds, 0x34f6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x3500);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x34ee));
    ax = memoryAGet16(ds, 0x34f0);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x34ec, memoryAGet16(ds, 0x34ec) - 1);
    goto loc_40b4;
loc_4045: // 01ed:2175
    ax = memoryAGet16(ds, 0x34ee);
    ax &= 0x0007;
    if (ax)
        goto loc_4085;
    ax = memoryAGet16(ds, 0x34f6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x3500);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0x34ee);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    ax = memoryAGet16(ds, 0x34f0);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_40b4;
loc_4085: // 01ed:21b5
    ax = memoryAGet16(ds, 0x34f6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x3500);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x34ee));
    ax = memoryAGet16(ds, 0x34f0);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_40b4: // 01ed:21e4
    if (memoryAGet(ds, 0x69e0) == 0x00)
        goto loc_4124;
    if ((short)memoryAGet16(ds, 0x69e2) >= (short)0x0000)
        goto loc_40f2;
    ax = memoryAGet16(ds, 0x69e2);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    ax += 0x0028;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x34ee));
    ax = memoryAGet16(ds, 0x34f0);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_4124;
loc_40f2: // 01ed:2222
    ax = memoryAGet16(ds, 0x69e2);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    ax = 0x0028;
    ax -= dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x34ee));
    ax = memoryAGet16(ds, 0x34f0);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_4124: // 01ed:2254
    if (memoryAGet(ds, 0x6eca) == 0x00)
        goto loc_413a;
    if (memoryAGet16(ds, 0x3500) != 0x000c)
        goto loc_413a;
    memoryASet16(ds, 0x3500, 0x0005);
    goto loc_414e;
loc_413a: // 01ed:226a
    if (memoryAGet(ds, 0x6ecb) == 0x00)
        goto loc_414e;
    if (memoryAGet16(ds, 0x3500) != 0x000b)
        goto loc_414e;
    memoryASet16(ds, 0x3500, 0x0001);
loc_414e: // 01ed:227e
    memoryASet16(ds, 0x6826, 0x0002);
    goto loc_415a;
loc_4156: // 01ed:2286
    memoryASet16(ds, 0x6826, memoryAGet16(ds, 0x6826) + 1);
loc_415a: // 01ed:228a
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13546) == 0x00)
        goto loc_416c;
    goto loc_6897;
loc_416c: // 01ed:229c
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13547) == 0x00)
        goto loc_417e;
    goto loc_6897;
loc_417e: // 01ed:22ae
    ax = 0x0020;
    push(ax);
    push(memoryAGet16(ds, 0x6826));
    push(cs); cs = 0x070d; sub_70d0(); assert(cs == 0x01ed);
    if (al)
        goto loc_41bf;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x001c)
        goto loc_41bf;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x0015)
        goto loc_41bf;
    di = memoryAGet16(ds, 0x6828);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x000e)
        goto loc_41bf;
    goto loc_6897;
loc_41bf: // 01ed:22ef
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13516) > (short)0x0000)
        goto loc_41d1;
    goto loc_4e34;
loc_41d1: // 01ed:2301
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    if ((short)ax < (short)0x0001)
        goto loc_423f;
    if ((short)ax > (short)0x0032)
        goto loc_423f;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_423f: // 01ed:236f
    if (ax == 0x0065)
        goto loc_4247;
    goto loc_43ea;
loc_4247: // 01ed:2377
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) == 0x0000)
        goto loc_4259;
    goto loc_4320;
loc_4259: // 01ed:2389
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0064;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_42f1;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0283;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_431d;
loc_42f1: // 01ed:2421
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x1b83;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
loc_431d: // 01ed:244d
    goto loc_43e7;
loc_4320: // 01ed:2450
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_4360;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0003;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_438f;
loc_4360: // 01ed:2490
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x1903;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
loc_438f: // 01ed:24bf
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0060;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
loc_43e7: // 01ed:2517
    goto loc_4e25;
loc_43ea: // 01ed:251a
    if ((short)ax < (short)0x0066)
        goto loc_444f;
    if ((short)ax > (short)0x0096)
        goto loc_444f;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0064;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_444f: // 01ed:257f
    if ((short)ax < (short)0x0097)
        goto loc_44b4;
    if ((short)ax > (short)0x00c8)
        goto loc_44b4;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0096;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_44b4: // 01ed:25e4
    if ((short)ax < (short)0x00fb)
        goto loc_4519;
    if ((short)ax > (short)0x012c)
        goto loc_4519;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x00fa;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4519: // 01ed:2649
    if ((short)ax < (short)0x012d)
        goto loc_457e;
    if ((short)ax > (short)0x015e)
        goto loc_457e;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x012c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_457e: // 01ed:26ae
    if ((short)ax < (short)0x015f)
        goto loc_45e3;
    if ((short)ax > (short)0x0190)
        goto loc_45e3;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x015e;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_45e3: // 01ed:2713
    if ((short)ax < (short)0x0191)
        goto loc_4648;
    if ((short)ax > (short)0x01c2)
        goto loc_4648;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0190;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4648: // 01ed:2778
    if ((short)ax < (short)0x01c3)
        goto loc_46ad;
    if ((short)ax > (short)0x01e7)
        goto loc_46ad;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_46ad: // 01ed:27dd
    if ((short)ax < (short)0x01e8)
        goto loc_4711;
    if ((short)ax > (short)0x01ea)
        goto loc_4711;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    cx = 0x0003;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4711: // 01ed:2841
    if (ax != 0x01eb)
        goto loc_4771;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4771: // 01ed:28a1
    if ((short)ax < (short)0x01ec)
        goto loc_47d8;
    if ((short)ax > (short)0x01ee)
        goto loc_47d8;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    ax -= 0x0015;
    cx = 0x0003;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_47d8: // 01ed:2908
    if ((short)ax < (short)0x01ef)
        goto loc_483d;
    if ((short)ax > (short)0x01f4)
        goto loc_483d;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_483d: // 01ed:296d
    if ((short)ax < (short)0x01f5)
        goto loc_48a2;
    if ((short)ax > (short)0x0226)
        goto loc_48a2;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01f4;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_48a2: // 01ed:29d2
    if ((short)ax < (short)0x0259)
        goto loc_4907;
    if ((short)ax > (short)0x028a)
        goto loc_4907;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0258;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4907: // 01ed:2a37
    if ((short)ax < (short)0x028b)
        goto loc_496c;
    if ((short)ax > (short)0x02bc)
        goto loc_496c;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x028a;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_496c: // 01ed:2a9c
    if ((short)ax < (short)0x02bd)
        goto loc_49d1;
    if ((short)ax > (short)0x02ee)
        goto loc_49d1;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x02bc;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_49d1: // 01ed:2b01
    if ((short)ax < (short)0x02ef)
        goto loc_4a36;
    if ((short)ax > (short)0x0320)
        goto loc_4a36;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x02ee;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4a36: // 01ed:2b66
    if (ax == 0x0321)
        goto loc_4a3e;
    goto loc_4af4;
loc_4a3e: // 01ed:2b6e
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x031c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4af4: // 01ed:2c24
    if (ax == 0x0331)
        goto loc_4afc;
    goto loc_4c9f;
loc_4afc: // 01ed:2c2c
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) == 0x0000)
        goto loc_4b0e;
    goto loc_4bd5;
loc_4b0e: // 01ed:2c3e
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_4ba6;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0c83;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4bd2;
loc_4ba6: // 01ed:2cd6
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1403;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
loc_4bd2: // 01ed:2d02
    goto loc_4c9c;
loc_4bd5: // 01ed:2d05
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_4c15;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0a03;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4c44;
loc_4c15: // 01ed:2d45
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1183;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
loc_4c44: // 01ed:2d74
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x031c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
loc_4c9c: // 01ed:2dcc
    goto loc_4e25;
loc_4c9f: // 01ed:2dcf
    if ((short)ax < (short)0x0339)
        goto loc_4d04;
    if ((short)ax > (short)0x033c)
        goto loc_4d04;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4d04: // 01ed:2e34
    if ((short)ax < (short)0x0345)
        goto loc_4d69;
    if ((short)ax > (short)0x0352)
        goto loc_4d69;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    goto loc_4e25;
loc_4d69: // 01ed:2e99
    if (ax == 0x0353)
        goto loc_4d71;
    goto loc_4e25;
loc_4d71: // 01ed:2ea1
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0352;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x034e;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2df53(); assert(cs == 0x01ed);
loc_4e25: // 01ed:2f55
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, memoryAGet16(ds, di + 13516) - 1);
    goto loc_6897;
loc_4e34: // 01ed:2f64
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax &= 0x0007;
    if (!ax)
        goto loc_4e4a;
    goto loc_5c43;
loc_4e4a: // 01ed:2f7a
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    if ((short)ax < (short)0x0001)
        goto loc_4ebe;
    if ((short)ax > (short)0x0032)
        goto loc_4ebe;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_4ebe: // 01ed:2fee
    if (ax == 0x0065)
        goto loc_4ec6;
    goto loc_508d;
loc_4ec6: // 01ed:2ff6
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) == 0x0000)
        goto loc_4ed8;
    goto loc_4fb1;
loc_4ed8: // 01ed:3008
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0064;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_4f7c;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0283;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_4fae;
loc_4f7c: // 01ed:30ac
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x1b83;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
loc_4fae: // 01ed:30de
    goto loc_508a;
loc_4fb1: // 01ed:30e1
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_4ff7;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0003;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_502c;
loc_4ff7: // 01ed:3127
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x1903;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
loc_502c: // 01ed:315c
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0060;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
loc_508a: // 01ed:31ba
    goto loc_5c40;
loc_508d: // 01ed:31bd
    if ((short)ax < (short)0x0066)
        goto loc_50f8;
    if ((short)ax > (short)0x0096)
        goto loc_50f8;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0064;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_50f8: // 01ed:3228
    if ((short)ax < (short)0x0097)
        goto loc_5163;
    if ((short)ax > (short)0x00c8)
        goto loc_5163;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0096;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_5163: // 01ed:3293
    if ((short)ax < (short)0x00fb)
        goto loc_51ce;
    if ((short)ax > (short)0x012c)
        goto loc_51ce;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x00fa;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_51ce: // 01ed:32fe
    if ((short)ax < (short)0x012d)
        goto loc_5239;
    if ((short)ax > (short)0x015e)
        goto loc_5239;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x012c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_5239: // 01ed:3369
    if ((short)ax < (short)0x015f)
        goto loc_52a4;
    if ((short)ax > (short)0x0190)
        goto loc_52a4;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x015e;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_52a4: // 01ed:33d4
    if ((short)ax < (short)0x0191)
        goto loc_530f;
    if ((short)ax > (short)0x01c2)
        goto loc_530f;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0190;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_530f: // 01ed:343f
    if ((short)ax < (short)0x01c3)
        goto loc_537a;
    if ((short)ax > (short)0x01e7)
        goto loc_537a;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_537a: // 01ed:34aa
    if ((short)ax < (short)0x01e8)
        goto loc_53e4;
    if ((short)ax > (short)0x01ea)
        goto loc_53e4;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    cx = 0x0003;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_53e4: // 01ed:3514
    if (ax != 0x01eb)
        goto loc_544a;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_544a: // 01ed:357a
    if ((short)ax < (short)0x01ec)
        goto loc_54b7;
    if ((short)ax > (short)0x01ee)
        goto loc_54b7;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    ax -= 0x0015;
    cx = 0x0003;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_54b7: // 01ed:35e7
    if ((short)ax < (short)0x01ef)
        goto loc_5522;
    if ((short)ax > (short)0x01f4)
        goto loc_5522;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_5522: // 01ed:3652
    if ((short)ax < (short)0x01f5)
        goto loc_558d;
    if ((short)ax > (short)0x0226)
        goto loc_558d;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01f4;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_558d: // 01ed:36bd
    if ((short)ax < (short)0x0259)
        goto loc_55f8;
    if ((short)ax > (short)0x0270)
        goto loc_55f8;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0258;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_55f8: // 01ed:3728
    if (ax != 0x0271)
        goto loc_565e;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0258;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_565e: // 01ed:378e
    if ((short)ax < (short)0x0272)
        goto loc_56c9;
    if ((short)ax > (short)0x028a)
        goto loc_56c9;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0258;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_56c9: // 01ed:37f9
    if ((short)ax < (short)0x028b)
        goto loc_5734;
    if ((short)ax > (short)0x02bc)
        goto loc_5734;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x028a;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_5734: // 01ed:3864
    if ((short)ax < (short)0x02bd)
        goto loc_579f;
    if ((short)ax > (short)0x02ee)
        goto loc_579f;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x02bc;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_579f: // 01ed:38cf
    if ((short)ax < (short)0x02ef)
        goto loc_580a;
    if ((short)ax > (short)0x0320)
        goto loc_580a;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x02ee;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_580a: // 01ed:393a
    if (ax == 0x0321)
        goto loc_5812;
    goto loc_58d4;
loc_5812: // 01ed:3942
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x031c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_58d4: // 01ed:3a04
    if (ax == 0x0331)
        goto loc_58dc;
    goto loc_5aa3;
loc_58dc: // 01ed:3a0c
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) == 0x0000)
        goto loc_58ee;
    goto loc_59c7;
loc_58ee: // 01ed:3a1e
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_5992;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0c83;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_59c4;
loc_5992: // 01ed:3ac2
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1403;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
loc_59c4: // 01ed:3af4
    goto loc_5aa0;
loc_59c7: // 01ed:3af7
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_5a0d;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0a03;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5a42;
loc_5a0d: // 01ed:3b3d
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1183;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
loc_5a42: // 01ed:3b72
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x031c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
loc_5aa0: // 01ed:3bd0
    goto loc_5c40;
loc_5aa3: // 01ed:3bd3
    if ((short)ax < (short)0x0339)
        goto loc_5b0e;
    if ((short)ax > (short)0x033c)
        goto loc_5b0e;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_5b0e: // 01ed:3c3e
    if ((short)ax < (short)0x0345)
        goto loc_5b79;
    if ((short)ax > (short)0x0352)
        goto loc_5b79;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    goto loc_5c40;
loc_5b79: // 01ed:3ca9
    if (ax == 0x0353)
        goto loc_5b81;
    goto loc_5c40;
loc_5b81: // 01ed:3cb1
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0352;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x034e;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0003;
    ax >>= cl;
    ax += 0x0002;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x01ed);
loc_5c40: // 01ed:3d70
    goto loc_6897;
loc_5c43: // 01ed:3d73
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    if ((short)ax < (short)0x0001)
        goto loc_5cb1;
    if ((short)ax > (short)0x0032)
        goto loc_5cb1;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_5cb1: // 01ed:3de1
    if (ax == 0x0065)
        goto loc_5cb9;
    goto loc_5e5c;
loc_5cb9: // 01ed:3de9
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) == 0x0000)
        goto loc_5ccb;
    goto loc_5d92;
loc_5ccb: // 01ed:3dfb
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0064;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_5d63;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0283;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_5d8f;
loc_5d63: // 01ed:3e93
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x1b83;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_5d8f: // 01ed:3ebf
    goto loc_5e59;
loc_5d92: // 01ed:3ec2
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_5dd2;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0003;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_5e01;
loc_5dd2: // 01ed:3f02
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x1903;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_5e01: // 01ed:3f31
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0060;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_5e59: // 01ed:3f89
    goto loc_6897;
loc_5e5c: // 01ed:3f8c
    if ((short)ax < (short)0x0066)
        goto loc_5ec1;
    if ((short)ax > (short)0x0096)
        goto loc_5ec1;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0064;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_5ec1: // 01ed:3ff1
    if ((short)ax < (short)0x0097)
        goto loc_5f26;
    if ((short)ax > (short)0x00c8)
        goto loc_5f26;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0096;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_5f26: // 01ed:4056
    if ((short)ax < (short)0x00fb)
        goto loc_5f8b;
    if ((short)ax > (short)0x012c)
        goto loc_5f8b;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x00fa;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_5f8b: // 01ed:40bb
    if ((short)ax < (short)0x012d)
        goto loc_5ff0;
    if ((short)ax > (short)0x015e)
        goto loc_5ff0;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x012c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_5ff0: // 01ed:4120
    if ((short)ax < (short)0x015f)
        goto loc_6055;
    if ((short)ax > (short)0x0190)
        goto loc_6055;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x015e;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_6055: // 01ed:4185
    if ((short)ax < (short)0x0191)
        goto loc_60ba;
    if ((short)ax > (short)0x01c2)
        goto loc_60ba;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0190;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_60ba: // 01ed:41ea
    if ((short)ax < (short)0x01c3)
        goto loc_611f;
    if ((short)ax > (short)0x01e7)
        goto loc_611f;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_611f: // 01ed:424f
    if ((short)ax < (short)0x01e8)
        goto loc_6183;
    if ((short)ax > (short)0x01ea)
        goto loc_6183;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    cx = 0x0003;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_6183: // 01ed:42b3
    if (ax != 0x01eb)
        goto loc_61e3;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_61e3: // 01ed:4313
    if ((short)ax < (short)0x01ec)
        goto loc_624a;
    if ((short)ax > (short)0x01ee)
        goto loc_624a;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    ax -= 0x0015;
    cx = 0x0003;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_624a: // 01ed:437a
    if ((short)ax < (short)0x01ef)
        goto loc_62af;
    if ((short)ax > (short)0x01f4)
        goto loc_62af;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01c2;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_62af: // 01ed:43df
    if ((short)ax < (short)0x01f5)
        goto loc_6314;
    if ((short)ax > (short)0x0226)
        goto loc_6314;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x01f4;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_6314: // 01ed:4444
    if ((short)ax < (short)0x0259)
        goto loc_6379;
    if ((short)ax > (short)0x028a)
        goto loc_6379;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0258;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_6379: // 01ed:44a9
    if ((short)ax < (short)0x028b)
        goto loc_63de;
    if ((short)ax > (short)0x02bc)
        goto loc_63de;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x028a;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_63de: // 01ed:450e
    if ((short)ax < (short)0x02bd)
        goto loc_6443;
    if ((short)ax > (short)0x02ee)
        goto loc_6443;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x02bc;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_6443: // 01ed:4573
    if ((short)ax < (short)0x02ef)
        goto loc_64a8;
    if ((short)ax > (short)0x0320)
        goto loc_64a8;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x02ee;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_64a8: // 01ed:45d8
    if (ax == 0x0321)
        goto loc_64b0;
    goto loc_6566;
loc_64b0: // 01ed:45e0
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x031c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_6566: // 01ed:4696
    if (ax == 0x0331)
        goto loc_656e;
    goto loc_6711;
loc_656e: // 01ed:469e
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) == 0x0000)
        goto loc_6580;
    goto loc_6647;
loc_6580: // 01ed:46b0
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_6618;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0c83;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6644;
loc_6618: // 01ed:4748
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1403;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_6644: // 01ed:4774
    goto loc_670e;
loc_6647: // 01ed:4777
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13538) >= (short)0x0000)
        goto loc_6687;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0a03;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_66b6;
loc_6687: // 01ed:47b7
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1183;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_66b6: // 01ed:47e6
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x031c;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_670e: // 01ed:483e
    goto loc_6897;
loc_6711: // 01ed:4841
    if ((short)ax < (short)0x0339)
        goto loc_6776;
    if ((short)ax > (short)0x033c)
        goto loc_6776;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_6776: // 01ed:48a6
    if ((short)ax < (short)0x0345)
        goto loc_67db;
    if ((short)ax > (short)0x0352)
        goto loc_67db;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0320;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    goto loc_6897;
loc_67db: // 01ed:490b
    if (ax == 0x0353)
        goto loc_67e3;
    goto loc_6897;
loc_67e3: // 01ed:4913
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x0352;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13526);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    dx = ax;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    ax -= 0x034e;
    ax += dx;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_6897: // 01ed:49c7
    if (memoryAGet16(ds, 0x6826) == 0x0019)
        goto loc_68a1;
    goto loc_4156;
loc_68a1: // 01ed:49d1
    ax = memoryAGet16(ds, 0x34f2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ds, 0x34f4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ds, 0x34f4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ds, 0x34f4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x34f2));
    ax = memoryAGet16(ds, 0x34f4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x34f2));
    push(memoryAGet16(ds, 0x34f4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x34f2));
    ax = memoryAGet16(ds, 0x34f4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ds, 0x34f4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ds, 0x34f4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x34f2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ds, 0x34f4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6826, 0x0002);
    goto loc_6946;
loc_6942: // 01ed:4a72
    memoryASet16(ds, 0x6826, memoryAGet16(ds, 0x6826) + 1);
loc_6946: // 01ed:4a76
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13546) == 0x00)
        goto loc_6958;
    goto loc_6e64;
loc_6958: // 01ed:4a88
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13547) != 0x00)
        goto loc_696a;
    goto loc_6aa2;
loc_696a: // 01ed:4a9a
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13524));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13522);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13522));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13524);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    goto loc_6e64;
loc_6aa2: // 01ed:4bd2
    ax = 0x0020;
    push(ax);
    push(memoryAGet16(ds, 0x6826));
    push(cs); cs = 0x070d; sub_70d0(); assert(cs == 0x01ed);
    if (al)
        goto loc_6af2;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x001c)
        goto loc_6af2;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x001b)
        goto loc_6af2;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x0015)
        goto loc_6af2;
    di = memoryAGet16(ds, 0x6828);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x000e)
        goto loc_6af2;
    goto loc_6da5;
loc_6af2: // 01ed:4c22
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_6b43;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
loc_6b43: // 01ed:4c73
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) != 0x001b)
        goto loc_6b9b;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    goto loc_6da2;
loc_6b9b: // 01ed:4ccb
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13536);
    if (ax != 0x0353)
        goto loc_6c12;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0030;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0020;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    goto loc_6da2;
loc_6c12: // 01ed:4d42
    if ((short)ax < (short)0x0321)
        goto loc_6c1c;
    if ((short)ax <= (short)0x0383)
        goto loc_6c21;
loc_6c1c: // 01ed:4d4c
    if (ax != 0x1389)
        goto loc_6c7d;
loc_6c21: // 01ed:4d51
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_6c7a;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
loc_6c7a: // 01ed:4daa
    goto loc_6da2;
loc_6c7d: // 01ed:4dad
    if (ax == 0x0072)
        goto loc_6c85;
    goto loc_6d44;
loc_6c85: // 01ed:4db5
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13520) <= (short)0x000f)
        goto loc_6cb5;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
loc_6cb5: // 01ed:4de5
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_6d42;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13520) <= (short)0x000f)
        goto loc_6d42;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
loc_6d42: // 01ed:4e72
    goto loc_6da2;
loc_6d44: // 01ed:4e74
    if (ax != 0x0065)
        goto loc_6da2;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_6da2;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
loc_6da2: // 01ed:4ed2
    goto loc_6e64;
loc_6da5: // 01ed:4ed5
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x0007)
        goto loc_6de5;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x000e)
        goto loc_6de5;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x0013)
        goto loc_6de5;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x1388)
        goto loc_6de5;
    goto loc_6e64;
loc_6de5: // 01ed:4f15
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_6e64;
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x000f;
    push(ax);
    di = memoryAGet16(ds, 0x6826);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x01ed);
loc_6e64: // 01ed:4f94
    if (memoryAGet16(ds, 0x6826) == 0x0019)
        goto loc_6e6e;
    goto loc_6942;
loc_6e6e: // 01ed:4f9e
    if (memoryAGet(ds, 0x69f5) == 0x00)
        goto loc_6ea4;
    ax = memoryAGet16(ds, 0x34f6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0005;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x3500);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x34ee));
    ax = memoryAGet16(ds, 0x34f0);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x01ed);
loc_6ea4: // 01ed:4fd4
    push(cs); cs = 0x19e6; sub_19f03(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0x69ac) == 0x00)
        goto loc_6ebf;
    memoryASet(ds, 0x69ac, 0x00);
    di = 0x10ed;
    push(cs);
    push(di);
    push(cs); cs = 0x19e6; sub_2399e(); assert(cs == 0x01ed);
loc_6ebf: // 01ed:4fef
    if (memoryAGet(ds, 0x6816) == 0x00)
        goto loc_6ed3;
    push(cs); cs = 0x19e6; sub_2361b(); assert(cs == 0x01ed);
    memoryASet(ds, 0x6ebe, al);
    memoryASet(ds, 0x6816, 0x00);
loc_6ed3: // 01ed:5003
    if (memoryAGet(ds, 0x6ec8) == 0x00)
        goto loc_6f1f;
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x19e6; sub_1a092(); assert(cs == 0x01ed);
    if ((short)memoryAGet16(ds, 0x6858) >= (short)0x000f)
        goto loc_6ef0;
    memoryASet16(ds, 0x6858, 0x000f);
loc_6ef0: // 01ed:5020
    di = memoryAGet16(ds, 0x69b8);
    memoryASet(ds, di + 27065, 0x00);
    if (memoryAGet(ds, 0x69f5) != 0x00)
        goto loc_6f06;
    memoryASet16(ds, 0x681c, 0x0001);
loc_6f06: // 01ed:5036
    push(cs); cs = 0x2a7d; sub_2b259(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_1dbcb(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x681c));
    push(cs); cs = 0x0f80; sub_199ae(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6832, 0xffff);
loc_6f1f: // 01ed:504f
    if (memoryAGet(ds, 0x69d3) == 0x00)
        goto loc_6f73;
    memoryASet(ds, 0x69d3, 0x00);
    push(cs); cs = 0x19e6; sub_22d03(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6826, ax);
    if ((short)memoryAGet16(ds, 0x6826) < (short)0x0001)
        goto loc_6f73;
    if ((short)memoryAGet16(ds, 0x6826) > (short)0x0010)
        goto loc_6f73;
    ax = memoryAGet16(ds, 0x6826);
    ax++;
    memoryASet16(ds, 0x681c, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x19e6; sub_1a092(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x69b8);
    memoryASet(ds, di + 27065, 0x00);
    push(cs); cs = 0x19e6; sub_1dbcb(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x681c));
    push(cs); cs = 0x0f80; sub_199ae(); assert(cs == 0x01ed);
    push(cs); cs = 0x2a7d; sub_2b259(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x6832, 0xffff);
loc_6f73: // 01ed:50a3
    if (memoryAGet(ds, 0x69d7) == 0x00)
        goto loc_6f9c;
    memoryASet(ds, 0x69d7, 0x00);
    if (memoryAGet(ds, 0x69f3) == 0x00)
        goto loc_6f92;
    di = 0x1104;
    push(cs);
    push(di);
    push(cs); cs = 0x19e6; sub_2399e(); assert(cs == 0x01ed);
    goto loc_6f9c;
loc_6f92: // 01ed:50c2
    di = 0x1110;
    push(cs);
    push(di);
    push(cs); cs = 0x19e6; sub_2399e(); assert(cs == 0x01ed);
loc_6f9c: // 01ed:50cc
    goto loc_32f6;
loc_6f9f: // 01ed:50cf
    if (memoryAGet(ds, 0x6d66) == 0x00)
        goto loc_6fab;
    push(cs); cs = 0x19e6; sub_27c32(); assert(cs == 0x01ed);
loc_6fab: // 01ed:50db
    goto loc_321f;
loc_6fae: // 01ed:50de
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x19e6; sub_1a092(); assert(cs == 0x01ed);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bcb5(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0x34af) == 0x00)
        goto loc_6fd0;
loc_6fc7: // 01ed:50f7
    if (memoryAGet(ds, 0x34ae) == 0x00)
        goto loc_6fd0;
    goto loc_6fc7;
loc_6fd0: // 01ed:5100
    push(cs); cs = 0x2b4d; sub_2b7c3(); assert(cs == 0x01ed);
    push(cs); cs = 0x19e6; sub_27a22(); assert(cs == 0x01ed);
    push(cs);
    sub_70c3();
    sub_2d92();
    push(cs);
    sub_703d();
    push(cs);
    sub_2dc2();
    goto loc_7010;
loc_6feb: // 01ed:511b
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bcb5(); assert(cs == 0x01ed);
    di = 0x7292;
    push(ds);
    push(di);
    di = 0x111d;
    push(cs);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fb3b(); assert(cs == 0x01ed);
    push(cs); cs = 0x2ebd; sub_2fabe(); assert(cs == 0x01ed);
    push(cs); cs = 0x2b4d; sub_2b7c3(); assert(cs == 0x01ed);
loc_7010: // 01ed:5140
    sp = bp;
    bp = pop();
    ax = 0;
    push(cs); cs = 0x2ebd; sub_2eca8(); assert(cs == 0x01ed);
    stop("terminating");
}
void sub_7021() // 01ed:5151 +far +stackDrop2
{
    sp -= 2;
    out8(0x70, al);
    goto loc_7025;
loc_7025: // 01ed:5155
    goto loc_7027;
loc_7027: // 01ed:5157
    al = in8(0x71);
    goto loc_702b;
loc_702b: // 01ed:515b
    goto loc_702d;
loc_702d: // 01ed:515d
    ah = al;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ax &= 0x0f0f;
    stop("aad");
    sp += 2;
    cs = pop();
}
void sub_703d() // 01ed:516d +stackDrop2
{
    sp -= 2;
    ax = 0;
    push(cs); cs = 0x01ed; sub_7021(); assert(cs == 0x01ed);
    memoryASet(cs, 0x514c, al);
    al = 0x02;
    push(cs); cs = 0x01ed; sub_7021(); assert(cs == 0x01ed);
    memoryASet(cs, 0x514b, al);
    al = 0x04;
    push(cs); cs = 0x01ed; sub_7021(); assert(cs == 0x01ed);
    memoryASet(cs, 0x514a, al);
    al = 0x07;
    push(cs); cs = 0x01ed; sub_7021(); assert(cs == 0x01ed);
    memoryASet(cs, 0x514e, al);
    al = 0x08;
    push(cs); cs = 0x01ed; sub_7021(); assert(cs == 0x01ed);
    memoryASet(cs, 0x514d, al);
    al = 0x09;
    push(cs); cs = 0x01ed; sub_7021(); assert(cs == 0x01ed);
    memoryASet16(cs, 0x514f, ax);
    ax = 0;
    ah = 0x2d;
    ch = memoryAGet(cs, 0x514a);
    cl = memoryAGet(cs, 0x514b);
    dh = memoryAGet(cs, 0x514c);
    dl = 0x32;
    interrupt(0x21);
    ax = 0;
    ah = 0x2b;
    cx = 0x076c;
    cx += memoryAGet16(cs, 0x514f);
    dh = memoryAGet(cs, 0x514d);
    dl = memoryAGet(cs, 0x514e);
    interrupt(0x21);
    sp += 2;
    cs = pop();
}
void sub_70af() // 01ed:51df +stackDrop2
{
    sp -= 2;
    bx = 0x2147;
    flags.interrupts = 0;
    al = 0x36;
    out8(0x43, al);
    al = 0x00;
    al = bl;
    out8(0x40, al);
    al = bh;
    out8(0x40, al);
    flags.interrupts = 1;
    sp += 2;
    cs = pop();
}
void sub_70c3() // 01ed:51f3 +stackDrop2
{
    sp -= 2;
    flags.interrupts = 0;
    al = 0x36;
    out8(0x43, al);
    al = 0x00;
    out8(0x40, al);
    out8(0x40, al);
    flags.interrupts = 1;
    sp += 2;
    cs = pop();
}
void sub_70d0() // 070d:0000 +nearfar +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0x6838);
    ax -= memoryAGet16(ss, bp + 8);
    dx = ax;
    di = memoryAGet16(ss, bp + 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)dx)
        goto loc_70f3;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_7154;
loc_70f3: // 070d:0023
    ax = memoryAGet16(ds, 0x6838);
    ax += 0x0140;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax;
    di = memoryAGet16(ss, bp + 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax <= (short)dx)
        goto loc_7113;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_7154;
loc_7113: // 070d:0043
    ax = memoryAGet16(ds, 0x683a);
    ax -= memoryAGet16(ss, bp + 8);
    dx = ax;
    di = memoryAGet16(ss, bp + 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax >= (short)dx)
        goto loc_7130;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_7154;
loc_7130: // 070d:0060
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x00b8;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax;
    di = memoryAGet16(ss, bp + 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax <= (short)dx)
        goto loc_7150;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_7154;
loc_7150: // 070d:0080
    memoryASet(ss, bp - 1, 0x01);
loc_7154: // 070d:0084
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_715d() // 070d:008d +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0x6838);
    ax -= memoryAGet16(ss, bp + 8);
    dx = ax;
    di = memoryAGet16(ss, bp + 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    if ((short)ax >= (short)dx)
        goto loc_7180;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_71e1;
loc_7180: // 070d:00b0
    ax = memoryAGet16(ds, 0x6838);
    ax += 0x0140;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax;
    di = memoryAGet16(ss, bp + 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    if ((short)ax <= (short)dx)
        goto loc_71a0;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_71e1;
loc_71a0: // 070d:00d0
    ax = memoryAGet16(ds, 0x683a);
    ax -= memoryAGet16(ss, bp + 8);
    dx = ax;
    di = memoryAGet16(ss, bp + 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    if ((short)ax >= (short)dx)
        goto loc_71bd;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_71e1;
loc_71bd: // 070d:00ed
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x00b8;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax;
    di = memoryAGet16(ss, bp + 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    if ((short)ax <= (short)dx)
        goto loc_71dd;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_71e1;
loc_71dd: // 070d:010d
    memoryASet(ss, bp - 1, 0x01);
loc_71e1: // 070d:0111
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_71ea() // 070d:011a +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x69f3) != 0x00)
        goto loc_71f9;
    memoryASet(ds, 0x6ec8, 0x01);
loc_71f9: // 070d:0129
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_71fd() // 070d:012d +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0x681e, memoryAGet16(ds, 0x681e) + 1);
    if (memoryAGet(ds, 0x69b0) != 0x00)
        goto loc_7254;
    ax = memoryAGet16(ds, 0x681e);
    if ((short)ax < (short)0x0001)
        goto loc_7220;
    if ((short)ax > (short)0x0002)
        goto loc_7220;
    memoryASet16(ds, 0x6820, 0x0001);
    goto loc_7252;
loc_7220: // 070d:0150
    if (ax != 0x0003)
        goto loc_722d;
    memoryASet16(ds, 0x6820, 0x0002);
    goto loc_7252;
loc_722d: // 070d:015d
    if ((short)ax < (short)0x0004)
        goto loc_723f;
    if ((short)ax > (short)0x0006)
        goto loc_723f;
    memoryASet16(ds, 0x6820, 0x0004);
    goto loc_7252;
loc_723f: // 070d:016f
    if ((short)ax < (short)0x0007)
        goto loc_7252;
    if ((short)ax > (short)0x03e8)
        goto loc_7252;
    ax = memoryAGet16(ds, 0x69a4);
    ax += 0x0004;
    memoryASet16(ds, 0x6820, ax);
loc_7252: // 070d:0182
    goto loc_7290;
loc_7254: // 070d:0184
    ax = memoryAGet16(ds, 0x681e);
    if ((short)ax < (short)0x0001)
        goto loc_7269;
    if ((short)ax > (short)0x0004)
        goto loc_7269;
    memoryASet16(ds, 0x6820, 0x0001);
    goto loc_7290;
loc_7269: // 070d:0199
    if ((short)ax < (short)0x0005)
        goto loc_727b;
    if ((short)ax > (short)0x0006)
        goto loc_727b;
    memoryASet16(ds, 0x6820, 0x0002);
    goto loc_7290;
loc_727b: // 070d:01ab
    if ((short)ax < (short)0x0007)
        goto loc_7290;
    if ((short)ax > (short)0x03e8)
        goto loc_7290;
    ax = memoryAGet16(ds, 0x69a4);
    ax += 0x0004;
    ax >>= 1;
    memoryASet16(ds, 0x6820, ax);
loc_7290: // 070d:01c0
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7294() // 070d:01c4 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0x34ee);
    if ((short)ax < (short)memoryAGet16(ss, bp + 8))
        goto loc_72ab;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0009;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_72c4;
loc_72ab: // 070d:01db
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0009;
    if ((short)ax >= (short)memoryAGet16(ss, bp + 8))
        goto loc_72b9;
    goto loc_7346;
loc_72b9: // 070d:01e9
    ax = memoryAGet16(ds, 0x34ee);
    if ((short)ax <= (short)memoryAGet16(ss, bp + 8))
        goto loc_72c4;
    goto loc_7346;
loc_72c4: // 070d:01f4
    ax = memoryAGet16(ds, 0x34f0);
    if ((short)ax < (short)memoryAGet16(ss, bp + 6))
        goto loc_72d8;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_72eb;
loc_72d8: // 070d:0208
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x000f;
    if ((short)ax < (short)memoryAGet16(ss, bp + 6))
        goto loc_7346;
    ax = memoryAGet16(ds, 0x34f0);
    if ((short)ax > (short)memoryAGet16(ss, bp + 6))
        goto loc_7346;
loc_72eb: // 070d:021b
    if (memoryAGet(ds, 0x69f5) != 0x00)
        goto loc_7346;
    if (memoryAGet(ds, 0x69f3) != 0x00)
        goto loc_7346;
    if (memoryAGet(ds, 0x6a40) <= 0x01)
        goto loc_732c;
    if (memoryAGet(ds, 0x6a41) != 0x00)
        goto loc_732a;
    memoryASet(ds, 0x6a41, 0x01);
    memoryASet(ds, 0x6a42, 0x1e);
    memoryASet(ds, 0x6a40, memoryAGet(ds, 0x6a40) - 1);
    memoryASet16(ds, 0x6832, 0xffff);
    memoryASet16(ds, 0x34ec, 0x0005);
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_732a: // 070d:025a
    goto loc_7346;
loc_732c: // 070d:025c
    if (memoryAGet(ds, 0x6a41) != 0x00)
        goto loc_7346;
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet(ds, 0x69f5, 0x01);
    memoryASet(ds, 0x69f6, 0x23);
loc_7346: // 070d:0276
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_734c() // 070d:027c +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    memoryASet(ss, bp - 1, 0x00);
    ax = memoryAGet16(ds, 0x69a2);
    memoryASet16(ss, bp - 6, ax);
    ax = 0x0001;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 6))
        goto loc_7367;
    goto loc_74b7;
loc_7367: // 070d:0297
    memoryASet16(ss, bp - 4, ax);
    goto loc_736f;
loc_736c: // 070d:029c
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_736f: // 070d:029f
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 26712) == 0x00)
        goto loc_7380;
    goto loc_74ac;
loc_7380: // 070d:02b0
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0007;
    if ((short)ax >= (short)memoryAGet16(ss, bp + 8))
        goto loc_7396;
    goto loc_74ac;
loc_7396: // 070d:02c6
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0006;
    dx = ax;
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    if ((short)ax <= (short)dx)
        goto loc_73b0;
    goto loc_74ac;
loc_73b0: // 070d:02e0
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0008;
    if ((short)ax >= (short)memoryAGet16(ss, bp + 6))
        goto loc_73c6;
    goto loc_74ac;
loc_73c6: // 070d:02f6
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax;
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    if ((short)ax <= (short)dx)
        goto loc_73e0;
    goto loc_74ac;
loc_73e0: // 070d:0310
    memoryASet(ss, bp - 1, 0x01);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 26713, 0x01);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26684));
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x000f;
    if ((short)ax <= 0)
        goto loc_74ac;
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 26686));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
loc_74ac: // 070d:03dc
    ax = memoryAGet16(ss, bp - 4);
    if (ax == memoryAGet16(ss, bp - 6))
        goto loc_74b7;
    goto loc_736c;
loc_74b7: // 070d:03e7
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_74c0() // 070d:03f0 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ss, bp - 7, 0x00);
loc_74cf: // 070d:03ff
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13546) == 0x01)
        goto loc_74e3;
    goto loc_763f;
loc_74e3: // 070d:0413
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    ax = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0096;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = (ax + 0x0010) >= 0x10000;
    ax += 0x0010;
    dx += 0x0000 + flags.carry;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = (ax + 0x01a0) >= 0x10000;
    ax += 0x01a0;
    dx += 0x0000 + flags.carry;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    memoryASet(ss, bp - 7, 0x01);
loc_763f: // 070d:056f
    if (memoryAGet(ss, bp - 7) != 0x00)
        goto loc_764e;
    if (memoryAGet16(ss, bp - 2) == 0x0019)
        goto loc_764e;
    goto loc_74cf;
loc_764e: // 070d:057e
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_7654() // 070d:0584 +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ss, bp - 7, 0x00);
loc_7663: // 070d:0593
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13546) == 0x01)
        goto loc_7677;
    goto loc_78f2;
loc_7677: // 070d:05a7
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_76ab;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
    goto loc_76b8;
loc_76ab: // 070d:05db
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_76b8: // 070d:05e8
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    if (memoryAGet16(ss, bp + 6) == 0x0089)
        goto loc_76f1;
    ax = memoryAGet16(ss, bp + 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff8;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    goto loc_76ff;
loc_76f1: // 070d:0621
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
loc_76ff: // 070d:062f
    ax = memoryAGet16(ss, bp + 12);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
    if (memoryAGet16(ss, bp + 6) != 0x0000)
        goto loc_7799;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0027);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0007);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_78ee;
loc_7799: // 070d:06c9
    ax = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) == 0x01d6)
        goto loc_77d2;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) == 0x007d)
        goto loc_77d2;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) != 0x007e)
        goto loc_77ef;
loc_77d2: // 070d:0702
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0007);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_78ee;
loc_77ef: // 070d:071f
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) == 0x0339)
        goto loc_780d;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) != 0x033b)
        goto loc_782a;
loc_780d: // 070d:073d
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0013);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_78ee;
loc_782a: // 070d:075a
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) != 0x0072)
        goto loc_7863;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0025);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13540, ax);
    goto loc_78ee;
loc_7863: // 070d:0793
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) != 0x00c7)
        goto loc_78a9;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0072);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0089);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13540, ax);
    goto loc_78ee;
loc_78a9: // 070d:07d9
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) != 0x0089)
        goto loc_78e1;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0028);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x001e);
    goto loc_78ee;
loc_78e1: // 070d:0811
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x000e);
loc_78ee: // 070d:081e
    memoryASet(ss, bp - 7, 0x01);
loc_78f2: // 070d:0822
    if (memoryAGet(ss, bp - 7) != 0x00)
        goto loc_7901;
    if (memoryAGet16(ss, bp - 2) == 0x0019)
        goto loc_7901;
    goto loc_7663;
loc_7901: // 070d:0831
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_7907() // 070d:0837 +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13544);
    if (ax == 0x0001)
        goto loc_7920;
    goto loc_7bab;
loc_7920: // 070d:0850
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_7987;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_7a66;
loc_7987: // 070d:08b7
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_79c0;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
    goto loc_7a66;
loc_79c0: // 070d:08f0
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_7a14;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_7a14;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_7a66;
loc_7a14: // 070d:0944
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_7a66;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_7a66;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_7a66: // 070d:0996
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_7a9c;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_7a9a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_7a9a: // 070d:09ca
    goto loc_7ab7;
loc_7a9c: // 070d:09cc
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0027)
        goto loc_7ab7;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_7ab7: // 070d:09e7
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_7b00;
    goto loc_7ba8;
loc_7b00: // 070d:0a30
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1388);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0187);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x1903;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x1903;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
loc_7ba8: // 070d:0ad8
    goto loc_a035;
loc_7bab: // 070d:0adb
    if (ax == 0x0002)
        goto loc_7bb3;
    goto loc_7e4c;
loc_7bb3: // 070d:0ae3
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_7c1a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_7cf9;
loc_7c1a: // 070d:0b4a
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_7c53;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
    goto loc_7cf9;
loc_7c53: // 070d:0b83
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_7ca7;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_7ca7;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_7cf9;
loc_7ca7: // 070d:0bd7
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_7cf9;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_7cf9;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_7cf9: // 070d:0c29
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_7d2f;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_7d2d;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_7d2d: // 070d:0c5d
    goto loc_7d4a;
loc_7d2f: // 070d:0c5f
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0027)
        goto loc_7d4a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_7d4a: // 070d:0c7a
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_7d93;
    goto loc_7e49;
loc_7d93: // 070d:0cc3
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, memoryAGet16(ds, di + 13544) - 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x015f);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0001);
    ax = 0x0032;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x070d);
    ax += 0x0032;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_7e12;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_7e1f;
loc_7e12: // 070d:0d42
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_7e1f: // 070d:0d4f
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_7e3c;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_7e49;
loc_7e3c: // 070d:0d6c
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_7e49: // 070d:0d79
    goto loc_a035;
loc_7e4c: // 070d:0d7c
    if (ax == 0x0003)
        goto loc_7e54;
    goto loc_80cb;
loc_7e54: // 070d:0d84
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_7ebb;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_7f9a;
loc_7ebb: // 070d:0deb
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_7ef4;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
    goto loc_7f9a;
loc_7ef4: // 070d:0e24
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_7f48;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_7f48;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_7f9a;
loc_7f48: // 070d:0e78
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_7f9a;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_7f9a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_7f9a: // 070d:0eca
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_7fd0;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_7fce;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_7fce: // 070d:0efe
    goto loc_7feb;
loc_7fd0: // 070d:0f00
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0027)
        goto loc_7feb;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_7feb: // 070d:0f1b
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_801a;
    goto loc_80ae;
loc_801a: // 070d:0f4a
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, memoryAGet16(ds, di + 13544) - 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0167);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_8075;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_8082;
loc_8075: // 070d:0fa5
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_8082: // 070d:0fb2
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_809f;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_80ac;
loc_809f: // 070d:0fcf
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_80ac: // 070d:0fdc
    goto loc_80c8;
loc_80ae: // 070d:0fde
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_80c8: // 070d:0ff8
    goto loc_a035;
loc_80cb: // 070d:0ffb
    if (ax == 0x0004)
        goto loc_80d3;
    goto loc_8406;
loc_80d3: // 070d:1003
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_813a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_8219;
loc_813a: // 070d:106a
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_8173;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
    goto loc_8219;
loc_8173: // 070d:10a3
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_81c7;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_81c7;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_8219;
loc_81c7: // 070d:10f7
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_8219;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_8219;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_8219: // 070d:1149
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_824f;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_824d;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_824d: // 070d:117d
    goto loc_826a;
loc_824f: // 070d:117f
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0027)
        goto loc_826a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_826a: // 070d:119a
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13528))
        goto loc_8290;
    goto loc_8328;
loc_8290: // 070d:11c0
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    if (ax != dx)
        goto loc_8328;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_82d0;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) == 0x0001)
        goto loc_82ef;
loc_82d0: // 070d:1200
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_8328;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_8328;
loc_82ef: // 070d:121f
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13538));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_7654();
loc_8328: // 070d:1258
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_8371;
    goto loc_8403;
loc_8371: // 070d:12a1
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, memoryAGet16(ds, di + 13544) - 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x016f);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0003);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_83cc;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_83d9;
loc_83cc: // 070d:12fc
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_83d9: // 070d:1309
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_83f6;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_8403;
loc_83f6: // 070d:1326
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_8403: // 070d:1333
    goto loc_a035;
loc_8406: // 070d:1336
    if (ax == 0x0005)
        goto loc_840e;
    goto loc_8734;
loc_840e: // 070d:133e
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_8475;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_8554;
loc_8475: // 070d:13a5
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_84ae;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
    goto loc_8554;
loc_84ae: // 070d:13de
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_8502;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_8502;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_8554;
loc_8502: // 070d:1432
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_8554;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_8554;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_8554: // 070d:1484
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_858a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_8588;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_8588: // 070d:14b8
    goto loc_85a5;
loc_858a: // 070d:14ba
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0027)
        goto loc_85a5;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_85a5: // 070d:14d5
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13528))
        goto loc_85cb;
    goto loc_8663;
loc_85cb: // 070d:14fb
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    if (ax != dx)
        goto loc_8663;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_860b;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) == 0x0001)
        goto loc_862a;
loc_860b: // 070d:153b
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_8663;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_8663;
loc_862a: // 070d:155a
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13538));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_7654();
loc_8663: // 070d:1593
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_86ac;
    goto loc_8731;
loc_86ac: // 070d:15dc
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, memoryAGet16(ds, di + 13544) - 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0177);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_86fa;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_8707;
loc_86fa: // 070d:162a
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_8707: // 070d:1637
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_8724;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_8731;
loc_8724: // 070d:1654
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_8731: // 070d:1661
    goto loc_a035;
loc_8734: // 070d:1664
    if (ax == 0x0006)
        goto loc_873c;
    goto loc_88f4;
loc_873c: // 070d:166c
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_878f;
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_87a7;
loc_878f: // 070d:16bf
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
loc_87a7: // 070d:16d7
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_87cd;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_87cd: // 070d:16fd
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) != 0x0271)
        goto loc_887d;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) - 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13530) > (short)0x0000)
        goto loc_887b;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
loc_887b: // 070d:17ab
    goto loc_88f1;
loc_887d: // 070d:17ad
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (!al)
        goto loc_88f1;
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, memoryAGet16(ds, di + 13528) - 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13528) > (short)0x0000)
        goto loc_88f1;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0271);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0001);
loc_88f1: // 070d:1821
    goto loc_a035;
loc_88f4: // 070d:1824
    if (ax == 0x0007)
        goto loc_88fc;
    goto loc_8a44;
loc_88fc: // 070d:182c
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_894f;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_89b0;
loc_894f: // 070d:187f
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    goto loc_8a41;
loc_89b0: // 070d:18e0
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ds, 0x34ee);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13518);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, 0x34f0);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13520);
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 2) >= (short)0x0008)
        goto loc_8a41;
    if ((short)memoryAGet16(ss, bp - 2) <= (short)0xfff8)
        goto loc_8a41;
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0008)
        goto loc_8a41;
    if ((short)memoryAGet16(ss, bp - 4) <= (short)0xfff8)
        goto loc_8a41;
    if (memoryAGet(ds, 0x69f3) != 0x00)
        goto loc_8a41;
    if (memoryAGet(ds, 0x69f5) != 0x00)
        goto loc_8a41;
    if (memoryAGet(ds, 0x6a40) <= 0x01)
        goto loc_8a30;
    if (memoryAGet(ds, 0x6a41) != 0x00)
        goto loc_8a2e;
    memoryASet(ds, 0x6a41, 0x01);
    memoryASet(ds, 0x6a42, 0x1e);
    memoryASet(ds, 0x6a40, memoryAGet(ds, 0x6a40) - 1);
    memoryASet16(ds, 0x6832, 0xffff);
    memoryASet16(ds, 0x34ec, 0x0005);
loc_8a2e: // 070d:195e
    goto loc_8a41;
loc_8a30: // 070d:1960
    if (memoryAGet(ds, 0x6a41) != 0x00)
        goto loc_8a41;
    memoryASet(ds, 0x69f5, 0x01);
    memoryASet(ds, 0x69f6, 0x23);
loc_8a41: // 070d:1971
    goto loc_a035;
loc_8a44: // 070d:1974
    if (ax == 0x000a)
        goto loc_8a51;
    if (ax == 0x000c)
        goto loc_8a51;
    goto loc_8b2f;
loc_8a51: // 070d:1981
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13528))
        goto loc_8a77;
    goto loc_8b2c;
loc_8a77: // 070d:19a7
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(dx);
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    cx = pop();
    bx = pop();
    if (dx == bx)
        goto loc_8aa3;
    goto loc_8b2c;
loc_8aa3: // 070d:19d3
    if (ax == cx)
        goto loc_8aaa;
    goto loc_8b2c;
loc_8aaa: // 070d:19da
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_8b2c;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) != 0x000a)
        goto loc_8b02;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0008;
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x01d6;
    push(ax);
    push(cs);
    sub_7654();
    goto loc_8b2c;
loc_8b02: // 070d:1a32
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x01e8;
    push(ax);
    push(cs);
    sub_7654();
loc_8b2c: // 070d:1a5c
    goto loc_a035;
loc_8b2f: // 070d:1a5f
    if (ax == 0x000b)
        goto loc_8b3c;
    if (ax == 0x000d)
        goto loc_8b3c;
    goto loc_8c1a;
loc_8b3c: // 070d:1a6c
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13528))
        goto loc_8b62;
    goto loc_8c17;
loc_8b62: // 070d:1a92
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(dx);
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    cx = pop();
    bx = pop();
    if (dx == bx)
        goto loc_8b8e;
    goto loc_8c17;
loc_8b8e: // 070d:1abe
    if (ax == cx)
        goto loc_8b95;
    goto loc_8c17;
loc_8b95: // 070d:1ac5
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_8c17;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) != 0x000b)
        goto loc_8bed;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0008;
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    ax = 0xffff;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x01d6;
    push(ax);
    push(cs);
    sub_7654();
    goto loc_8c17;
loc_8bed: // 070d:1b1d
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    ax = 0xffff;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x01ec;
    push(ax);
    push(cs);
    sub_7654();
loc_8c17: // 070d:1b47
    goto loc_a035;
loc_8c1a: // 070d:1b4a
    if (ax == 0x000e)
        goto loc_8c22;
    goto loc_8d51;
loc_8c22: // 070d:1b52
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_8c75;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_8cd5;
loc_8c75: // 070d:1ba5
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    goto loc_8d4e;
loc_8cd5: // 070d:1c05
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_8d0b;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_8d09;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_8d09: // 070d:1c39
    goto loc_8d26;
loc_8d0b: // 070d:1c3b
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0027)
        goto loc_8d26;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_8d26: // 070d:1c56
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_8d4e: // 070d:1c7e
    goto loc_a035;
loc_8d51: // 070d:1c81
    if (ax == 0x000f)
        goto loc_8d59;
    goto loc_8dea;
loc_8d59: // 070d:1c89
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax < (short)memoryAGet16(ds, di + 13528))
        goto loc_8de7;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13528);
    cx = 0x0002;
    ax >>= cl;
    ax += 0x01ad;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13530) != 0x002d)
        goto loc_8dcd;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
loc_8dcd: // 070d:1cfd
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_8de7: // 070d:1d17
    goto loc_a035;
loc_8dea: // 070d:1d1a
    if (ax == 0x0010)
        goto loc_8df2;
    goto loc_8e83;
loc_8df2: // 070d:1d22
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax < (short)memoryAGet16(ds, di + 13528))
        goto loc_8e80;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13528);
    cx = 0x0002;
    ax >>= cl;
    ax += 0x01b5;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13530) != 0x002d)
        goto loc_8e66;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
loc_8e66: // 070d:1d96
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_8e80: // 070d:1db0
    goto loc_a035;
loc_8e83: // 070d:1db3
    if (ax == 0x0011)
        goto loc_8e8b;
    goto loc_8f14;
loc_8e8b: // 070d:1dbb
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13528);
    memoryASet16(ss, bp - 2, ax);
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x0000)
        goto loc_8f11;
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0002;
    ax >>= cl;
    ax += 0x01d7;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13530) != 0x003c)
        goto loc_8ef3;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
loc_8ef3: // 070d:1e23
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0008;
    push(ax);
    push(cs);
    sub_7294();
loc_8f11: // 070d:1e41
    goto loc_a035;
loc_8f14: // 070d:1e44
    if (ax == 0x0012)
        goto loc_8f1c;
    goto loc_8fa5;
loc_8f1c: // 070d:1e4c
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13528);
    memoryASet16(ss, bp - 2, ax);
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x0000)
        goto loc_8fa2;
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0002;
    ax >>= cl;
    ax += 0x01df;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13530) != 0x003c)
        goto loc_8f84;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
loc_8f84: // 070d:1eb4
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0008;
    push(ax);
    push(cs);
    sub_7294();
loc_8fa2: // 070d:1ed2
    goto loc_a035;
loc_8fa5: // 070d:1ed5
    if (ax == 0x0013)
        goto loc_8fad;
    goto loc_90b1;
loc_8fad: // 070d:1edd
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_9000;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_9060;
loc_9000: // 070d:1f30
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    goto loc_90ae;
loc_9060: // 070d:1f90
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0009)
        goto loc_9086;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_9086: // 070d:1fb6
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_90ae: // 070d:1fde
    goto loc_a035;
loc_90b1: // 070d:1fe1
    if (ax == 0x0014)
        goto loc_90b9;
    goto loc_91c4;
loc_90b9: // 070d:1fe9
    ax = memoryAGet16(ss, bp + 12);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_915b;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_915b;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_9173;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_9173;
loc_915b: // 070d:208b
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
loc_9173: // 070d:20a3
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_9199;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_9199: // 070d:20c9
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    goto loc_a035;
loc_91c4: // 070d:20f4
    if (ax == 0x0015)
        goto loc_91cc;
    goto loc_9298;
loc_91cc: // 070d:20fc
    ax = memoryAGet16(ss, bp + 12);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax += memoryAGet16(ds, di + 13538);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_9247;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_923a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01f1);
    goto loc_9247;
loc_923a: // 070d:216a
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01ef);
loc_9247: // 070d:2177
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0009)
        goto loc_926d;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_926d: // 070d:219d
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    goto loc_a035;
loc_9298: // 070d:21c8
    if (ax == 0x0016)
        goto loc_92a0;
    goto loc_9652;
loc_92a0: // 070d:21d0
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (ax != memoryAGet16(ds, di + 13528))
        goto loc_9313;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) != 0x027b)
        goto loc_9313;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0271);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    ax -= 0x000a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, ax);
    goto loc_954b;
loc_9313: // 070d:2243
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (ax == memoryAGet16(ds, di + 13528))
        goto loc_932e;
    goto loc_954b;
loc_932e: // 070d:225e
    ax = 0x000b;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ss, bp + 6, 0x0001);
    goto loc_9341;
loc_933e: // 070d:226e
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_9341: // 070d:2271
    memoryASet16(ss, bp + 8, 0x0001);
    goto loc_934b;
loc_9348: // 070d:2278
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
loc_934b: // 070d:227b
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 458) == 0x027d)
        goto loc_936b;
    goto loc_951f;
loc_936b: // 070d:229b
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 458, 0x027e);
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 460, 0x00);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 456, 0x027a);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 460, 0x00);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) - 1);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) - 1);
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ss, bp + 8, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ss, bp + 6, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 8));
    ax = memoryAGet16(ss, bp + 6);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 8));
    ax = memoryAGet16(ss, bp + 6);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 8));
    ax = memoryAGet16(ss, bp + 6);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 8));
    ax = memoryAGet16(ss, bp + 6);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp + 8, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp + 6, ax);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_951f: // 070d:244f
    if (memoryAGet16(ss, bp + 8) == 0x0028)
        goto loc_9528;
    goto loc_9348;
loc_9528: // 070d:2458
    if (memoryAGet16(ss, bp + 6) == 0x0018)
        goto loc_9531;
    goto loc_933e;
loc_9531: // 070d:2461
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_954b: // 070d:247b
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) == 0x0271)
        goto loc_955d;
    goto loc_9634;
loc_955d: // 070d:248d
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) > (short)0x000b)
        goto loc_956e;
    goto loc_9632;
loc_956e: // 070d:249e
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
loc_9632: // 070d:2562
    goto loc_964f;
loc_9634: // 070d:2564
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0009)
        goto loc_964f;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_964f: // 070d:257f
    goto loc_a035;
loc_9652: // 070d:2582
    if (ax == 0x0017)
        goto loc_965a;
    goto loc_9794;
loc_965a: // 070d:258a
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13526) != 0x000b)
        goto loc_968d;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_968d: // 070d:25bd
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) == 0x0271)
        goto loc_969f;
    goto loc_9776;
loc_969f: // 070d:25cf
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) > (short)0x000b)
        goto loc_96b0;
    goto loc_9774;
loc_96b0: // 070d:25e0
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
loc_9774: // 070d:26a4
    goto loc_9791;
loc_9776: // 070d:26a6
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0009)
        goto loc_9791;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_9791: // 070d:26c1
    goto loc_a035;
loc_9794: // 070d:26c4
    if (ax == 0x0019)
        goto loc_979c;
    goto loc_98f0;
loc_979c: // 070d:26cc
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (ax != memoryAGet16(ds, di + 13528))
        goto loc_97e4;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
loc_97e4: // 070d:2714
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_980a;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_980a: // 070d:273a
    ax = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_9839;
    goto loc_98ed;
loc_9839: // 070d:2769
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1388);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0187);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x1903;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x1903;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
loc_98ed: // 070d:281d
    goto loc_a035;
loc_98f0: // 070d:2820
    if (ax == 0x001a)
        goto loc_98f8;
    goto loc_9a74;
loc_98f8: // 070d:2828
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_991e;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_991e: // 070d:284e
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax > (short)memoryAGet16(ds, 0x34ee))
        goto loc_9943;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0009;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_996d;
loc_9943: // 070d:2873
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0009;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13518))
        goto loc_9959;
    goto loc_9a71;
loc_9959: // 070d:2889
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_996d;
    goto loc_9a71;
loc_996d: // 070d:289d
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax > (short)memoryAGet16(ds, 0x34f0))
        goto loc_9992;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_99bc;
loc_9992: // 070d:28c2
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x000f;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13520))
        goto loc_99a8;
    goto loc_9a71;
loc_99a8: // 070d:28d8
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_99bc;
    goto loc_9a71;
loc_99bc: // 070d:28ec
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x2710) >= 0x10000;
    ax += 0x2710;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x00ad);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0dc3;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0dc3;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
loc_9a71: // 070d:29a1
    goto loc_a035;
loc_9a74: // 070d:29a4
    if (ax == 0x001b)
        goto loc_9a7c;
    goto loc_9e03;
loc_9a7c: // 070d:29ac
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000d;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 6, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    ax += 0x0002;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_9adf;
    goto loc_9c27;
loc_9adf: // 070d:2a0f
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_9afe;
    goto loc_9c27;
loc_9afe: // 070d:2a2e
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) == 0x00)
        goto loc_9b1d;
    goto loc_9c27;
loc_9b1d: // 070d:2a4d
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) == 0x00)
        goto loc_9b3c;
    goto loc_9c27;
loc_9b3c: // 070d:2a6c
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0008;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0008;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0008;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0xffff);
    memoryASet(ds, 0x6ec2, 0x00);
    goto loc_9c76;
loc_9c27: // 070d:2b57
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13532) != 0xffff)
        goto loc_9c76;
    ax = 0x001d;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13532, ax);
loc_9c76: // 070d:2ba6
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax > (short)memoryAGet16(ds, 0x34ee))
        goto loc_9c9b;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0009;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_9cc5;
loc_9c9b: // 070d:2bcb
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0009;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13518))
        goto loc_9cb1;
    goto loc_9e00;
loc_9cb1: // 070d:2be1
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_9cc5;
    goto loc_9e00;
loc_9cc5: // 070d:2bf5
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if (ax == memoryAGet16(ds, 0x34f0))
        goto loc_9cd9;
    goto loc_9d99;
loc_9cd9: // 070d:2c09
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_9d38;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_9d36;
    ax = memoryAGet16(ds, 0x34ee);
    ax -= 0x000d;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
loc_9d36: // 070d:2c66
    goto loc_9d97;
loc_9d38: // 070d:2c68
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_9d97;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax += 0x0002;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_9d97;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000d;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
loc_9d97: // 070d:2cc7
    goto loc_9e00;
loc_9d99: // 070d:2cc9
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0010;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax < (short)memoryAGet16(ds, di + 13520))
        goto loc_9e00;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax < (short)memoryAGet16(ds, 0x34f0))
        goto loc_9e00;
    if (memoryAGet(ds, 0x6ec1) != 0x00)
        goto loc_9e00;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    memoryASet(ds, 0x6ec2, 0x01);
    if (memoryAGet16(ds, 0x3500) != 0x000d)
        goto loc_9df3;
    memoryASet16(ds, 0x3500, 0x0009);
    goto loc_9e00;
loc_9df3: // 070d:2d23
    if (memoryAGet16(ds, 0x3500) != 0x000e)
        goto loc_9e00;
    memoryASet16(ds, 0x3500, 0x000a);
loc_9e00: // 070d:2d30
    goto loc_a035;
loc_9e03: // 070d:2d33
    if (ax == 0x001c)
        goto loc_9e0b;
    goto loc_a035;
loc_9e0b: // 070d:2d3b
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_9e5e;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 14);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_9e76;
loc_9e5e: // 070d:2d8e
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
loc_9e76: // 070d:2da6
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax > (short)memoryAGet16(ds, 0x34ee))
        goto loc_9e9b;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0009;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_9ec5;
loc_9e9b: // 070d:2dcb
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0009;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13518))
        goto loc_9eb1;
    goto loc_9fd5;
loc_9eb1: // 070d:2de1
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_9ec5;
    goto loc_9fd5;
loc_9ec5: // 070d:2df5
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0010;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13520))
        goto loc_9edb;
    goto loc_9fd5;
loc_9edb: // 070d:2e0b
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax > (short)memoryAGet16(ds, 0x34f0))
        goto loc_9eef;
    goto loc_9fd5;
loc_9eef: // 070d:2e1f
    if (memoryAGet(ds, 0x6ec1) == 0x00)
        goto loc_9ef9;
    goto loc_9fd5;
loc_9ef9: // 070d:2e29
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    memoryASet(ds, 0x6ec2, 0x01);
    if (memoryAGet16(ds, 0x3500) != 0x000d)
        goto loc_9f28;
    memoryASet16(ds, 0x3500, 0x0009);
    goto loc_9f35;
loc_9f28: // 070d:2e58
    if (memoryAGet16(ds, 0x3500) != 0x000e)
        goto loc_9f35;
    memoryASet16(ds, 0x3500, 0x000a);
loc_9f35: // 070d:2e65
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_9f57;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13542);
    ax += memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x34ee, ax);
    goto loc_9f76;
loc_9f57: // 070d:2e87
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_9f76;
    ax = memoryAGet16(ds, 0x34ee);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13542);
    memoryASet16(ds, 0x34ee, ax);
loc_9f76: // 070d:2ea6
    if ((short)memoryAGet16(ds, 0x6838) >= (short)0x0140)
        goto loc_9fa7;
    ax = memoryAGet16(ds, 0x6838);
    ax += 0x00aa;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_9fa7;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13542);
    memoryASet16(ds, 0x6838, memoryAGet16(ds, 0x6838) + ax);
    if ((short)memoryAGet16(ds, 0x6838) <= (short)0x0140)
        goto loc_9fa7;
    memoryASet16(ds, 0x6838, 0x0140);
loc_9fa7: // 070d:2ed7
    if ((short)memoryAGet16(ds, 0x6838) <= (short)0x0000)
        goto loc_9fd5;
    ax = memoryAGet16(ds, 0x6838);
    ax += 0x0096;
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_9fd5;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13542);
    memoryASet16(ds, 0x6838, memoryAGet16(ds, 0x6838) - ax);
    if ((short)memoryAGet16(ds, 0x6838) >= (short)0x0000)
        goto loc_9fd5;
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
loc_9fd5: // 070d:2f05
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_a006;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax += memoryAGet16(ds, di + 13542);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    goto loc_a035;
loc_a006: // 070d:2f36
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_a035;
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13542);
    di = memoryAGet16(ss, bp + 10);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
loc_a035: // 070d:2f65
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_a03b() // 070d:2f6b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0014;
    memoryASet16(ss, bp - 6, 0x0002);
    goto loc_a04b;
loc_a048: // 070d:2f78
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_a04b: // 070d:2f7b
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13546) == 0x00)
        goto loc_a05c;
    goto loc_d52d;
loc_a05c: // 070d:2f8c
    ax = 0x0020;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_70d0();
    if (al)
        goto loc_a098;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x001c)
        goto loc_a098;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x0015)
        goto loc_a098;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13544) == 0x000e)
        goto loc_a098;
    goto loc_d52d;
loc_a098: // 070d:2fc8
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_a0c1;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax += memoryAGet16(ds, di + 13542);
    memoryASet16(ss, bp - 2, ax);
    goto loc_a0f8;
loc_a0c1: // 070d:2ff1
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_a0ea;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13542);
    memoryASet16(ss, bp - 2, ax);
    goto loc_a0f8;
loc_a0ea: // 070d:301a
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    memoryASet16(ss, bp - 2, ax);
loc_a0f8: // 070d:3028
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13540) != 0x0001)
        goto loc_a121;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax += memoryAGet16(ds, di + 13542);
    memoryASet16(ss, bp - 4, ax);
    goto loc_a158;
loc_a121: // 070d:3051
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13540) != 0xffff)
        goto loc_a14a;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13542);
    memoryASet16(ss, bp - 4, ax);
    goto loc_a158;
loc_a14a: // 070d:307a
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    memoryASet16(ss, bp - 4, ax);
loc_a158: // 070d:3088
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13544) >= (short)0x001e)
        goto loc_a1a8;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_7907();
    goto loc_d52d;
loc_a1a8: // 070d:30d8
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13544);
    if (ax == 0x1388)
        goto loc_a1bb;
    goto loc_a412;
loc_a1bb: // 070d:30eb
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_a1dc;
    goto loc_a294;
loc_a1dc: // 070d:310c
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x00a7);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    goto loc_a40f;
loc_a294: // 070d:31c4
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0003;
    dx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0003;
    if ((short)ax < (short)dx)
        goto loc_a2c8;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000c;
    dx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0003;
    if ((short)ax <= (short)dx)
        goto loc_a302;
loc_a2c8: // 070d:31f8
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0003;
    dx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000c;
    if ((short)ax >= (short)dx)
        goto loc_a2e5;
    goto loc_a40f;
loc_a2e5: // 070d:3215
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000c;
    dx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000c;
    if ((short)ax <= (short)dx)
        goto loc_a302;
    goto loc_a40f;
loc_a302: // 070d:3232
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax > (short)memoryAGet16(ds, 0x34f0))
        goto loc_a327;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_a35a;
loc_a327: // 070d:3257
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x000f;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13520))
        goto loc_a33d;
    goto loc_a40f;
loc_a33d: // 070d:326d
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x000f;
    dx = ax;
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x000f;
    if ((short)ax <= (short)dx)
        goto loc_a35a;
    goto loc_a40f;
loc_a35a: // 070d:328a
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x00aa);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0c83;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0c83;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
loc_a40f: // 070d:333f
    goto loc_d52d;
loc_a412: // 070d:3342
    if (ax == 0x1389)
        goto loc_a41a;
    goto loc_a615;
loc_a41a: // 070d:334a
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp - 4);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, memoryAGet16(ds, di + 13520) - 0x0002);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13520) >= (short)0x0010)
        goto loc_a46f;
    memoryASet16(ss, bp - 4, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, 0x0010);
loc_a46f: // 070d:339f
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13530) <= (short)0x0000)
        goto loc_a48b;
    goto loc_a556;
loc_a48b: // 070d:33bb
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    goto loc_a612;
loc_a556: // 070d:3486
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
loc_a612: // 070d:3542
    goto loc_d52d;
loc_a615: // 070d:3545
    if (ax == 0x002a)
        goto loc_a61d;
    goto loc_a9a1;
loc_a61d: // 070d:354d
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax += 0x0002;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 18);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_a686;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_a765;
loc_a686: // 070d:35b6
    ax = memoryAGet16(ss, bp - 18);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_a6bf;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
    goto loc_a765;
loc_a6bf: // 070d:35ef
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_a713;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_a713;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_a765;
loc_a713: // 070d:3643
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_a765;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_a765;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
loc_a765: // 070d:3695
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_a79b;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_a799;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_a799: // 070d:36c9
    goto loc_a7b6;
loc_a79b: // 070d:36cb
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x003b)
        goto loc_a7b6;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
loc_a7b6: // 070d:36e6
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_a83f;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_a83f;
    goto loc_a99e;
loc_a83f: // 070d:376f
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, memoryAGet16(ds, di + 13532) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13532) == 0x0000)
        goto loc_a871;
    goto loc_a947;
loc_a871: // 070d:37a1
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0020;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs);
    sub_74c0();
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x01f4) >= 0x10000;
    ax += 0x01f4;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
loc_a947: // 070d:3877
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_a967;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_a974;
loc_a967: // 070d:3897
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_a974: // 070d:38a4
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_a991;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_a99e;
loc_a991: // 070d:38c1
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
loc_a99e: // 070d:38ce
    goto loc_d52d;
loc_a9a1: // 070d:38d1
    if (ax == 0x001e)
        goto loc_a9a9;
    goto loc_af24;
loc_a9a9: // 070d:38d9
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_aa42;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_aa42;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_aa42;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_aa87;
loc_aa42: // 070d:3972
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_aa77;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
    goto loc_aa84;
loc_aa77: // 070d:39a7
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_aa84: // 070d:39b4
    goto loc_ab3b;
loc_aa87: // 070d:39b7
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_aae3;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_aae3;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_ab3b;
loc_aae3: // 070d:3a13
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_ab3b;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_ab3b;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
loc_ab3b: // 070d:3a6b
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_ab71;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_ab6f;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_ab6f: // 070d:3a9f
    goto loc_ab8c;
loc_ab71: // 070d:3aa1
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x003b)
        goto loc_ab8c;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
loc_ab8c: // 070d:3abc
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13530) <= (short)0x0000)
        goto loc_aba5;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) - 1);
loc_aba5: // 070d:3ad5
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13530) == 0x0000)
        goto loc_abb6;
    goto loc_ac4f;
loc_abb6: // 070d:3ae6
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    if (ax != dx)
        goto loc_ac4f;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_abf6;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) == 0x0001)
        goto loc_ac15;
loc_abf6: // 070d:3b26
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_ac4f;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_ac4f;
loc_ac15: // 070d:3b45
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0046);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13538));
    ax = 0x0004;
    push(ax);
    ax = 0x0339;
    push(ax);
    push(cs);
    sub_7654();
loc_ac4f: // 070d:3b7f
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_aca0;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs);
    sub_734c();
    if (al)
        goto loc_aca0;
    goto loc_aee9;
loc_aca0: // 070d:3bd0
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_ad28;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_ad26;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_ad26;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_ad26: // 070d:3c56
    goto loc_ad97;
loc_ad28: // 070d:3c58
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_ad97;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_ad97;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
loc_ad97: // 070d:3cc7
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, memoryAGet16(ds, di + 13532) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13532) == 0x0000)
        goto loc_adc0;
    goto loc_aede;
loc_adc0: // 070d:3cf0
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_74c0();
    goto loc_aee7;
loc_aede: // 070d:3e0e
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_aee7: // 070d:3e17
    goto loc_af21;
loc_aee9: // 070d:3e19
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs);
    sub_7294();
loc_af21: // 070d:3e51
    goto loc_d52d;
loc_af24: // 070d:3e54
    if (ax == 0x001f)
        goto loc_af2c;
    goto loc_b64d;
loc_af2c: // 070d:3e5c
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_afc5;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_afc5;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_afc5;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_b00a;
loc_afc5: // 070d:3ef5
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_affa;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_b007;
loc_affa: // 070d:3f2a
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x003d);
loc_b007: // 070d:3f37
    goto loc_b0be;
loc_b00a: // 070d:3f3a
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b066;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_b066;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x003d);
    goto loc_b0be;
loc_b066: // 070d:3f96
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b0be;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_b0be;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_b0be: // 070d:3fee
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13528))
        goto loc_b0e4;
    goto loc_b17d;
loc_b0e4: // 070d:4014
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    if (ax != dx)
        goto loc_b17d;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_b131;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) == 0x0001)
        goto loc_b150;
loc_b131: // 070d:4061
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_b17d;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_b17d;
loc_b150: // 070d:4080
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13538));
    ax = 0x0004;
    push(ax);
    ax = 0x033b;
    push(ax);
    push(cs);
    sub_7654();
loc_b17d: // 070d:40ad
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13534) <= (short)0x0000)
        goto loc_b196;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, memoryAGet16(ds, di + 13534) - 1);
loc_b196: // 070d:40c6
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) != 0x0001)
        goto loc_b1b4;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x001e);
    goto loc_b29a;
loc_b1b4: // 070d:40e4
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) != 0x0000)
        goto loc_b23b;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_b1f8;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_b1f6;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0013);
loc_b1f6: // 070d:4126
    goto loc_b213;
loc_b1f8: // 070d:4128
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x004f)
        goto loc_b213;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x004f);
loc_b213: // 070d:4143
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, memoryAGet16(ds, di + 13532) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13532) != 0x0000)
        goto loc_b239;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, 0x0050);
loc_b239: // 070d:4169
    goto loc_b29a;
loc_b23b: // 070d:416b
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_b271;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_b26f;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_b26f: // 070d:419f
    goto loc_b28c;
loc_b271: // 070d:41a1
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x004f)
        goto loc_b28c;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x003d);
loc_b28c: // 070d:41bc
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
loc_b29a: // 070d:41ca
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_b2f3;
    goto loc_b3f6;
loc_b2f3: // 070d:4223
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_b384;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b382;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b382;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x003d);
loc_b382: // 070d:42b2
    goto loc_b3f3;
loc_b384: // 070d:42b4
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b3f3;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b3f3;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_b3f3: // 070d:4323
    goto loc_b64a;
loc_b3f6: // 070d:4326
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs);
    sub_734c();
    if (al)
        goto loc_b41b;
    goto loc_b64a;
loc_b41b: // 070d:434b
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_b4a3;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b4a1;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b4a1;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x003d);
loc_b4a1: // 070d:43d1
    goto loc_b512;
loc_b4a3: // 070d:43d3
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b512;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b512;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_b512: // 070d:4442
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) == 0x0000)
        goto loc_b523;
    goto loc_b641;
loc_b523: // 070d:4453
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_74c0();
    goto loc_b64a;
loc_b641: // 070d:4571
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_b64a: // 070d:457a
    goto loc_d52d;
loc_b64d: // 070d:457d
    if (ax == 0x0020)
        goto loc_b655;
    goto loc_b7a9;
loc_b655: // 070d:4585
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_b67b;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_b67b: // 070d:45ab
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_b69c;
    goto loc_b7a6;
loc_b69c: // 070d:45cc
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, memoryAGet16(ds, di + 13528) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13528) <= (short)0x0000)
        goto loc_b6c5;
    goto loc_b79d;
loc_b6c5: // 070d:45f5
    ax = 0;
    memoryASet16(ss, bp - 12, ax);
    goto loc_b6cf;
loc_b6cc: // 070d:45fc
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
loc_b6cf: // 070d:45ff
    push(memoryAGet16(ss, bp - 12));
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x070d);
    if (memoryAGet16(ss, bp - 12) != 0x000f)
        goto loc_b6cc;
    memoryASet(ds, 0x34ae, 0x00);
    ax = 0x000a;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet(ds, 0x69ce, 0x01);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x1388) >= 0x10000;
    ax += 0x1388;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x00ac);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0d23;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0d23;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    ax = 0;
    push(ax);
    push(cs); cs = 0x19e6; sub_19f3b(); assert(cs == 0x070d);
    goto loc_b7a6;
loc_b79d: // 070d:46cd
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_b7a6: // 070d:46d6
    goto loc_d52d;
loc_b7a9: // 070d:46d9
    if (ax == 0x0021)
        goto loc_b7b1;
    goto loc_bb28;
loc_b7b1: // 070d:46e1
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_b7dc;
    goto loc_b85b;
loc_b7dc: // 070d:470c
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b85b;
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_b89d;
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_b89d;
loc_b85b: // 070d:478b
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_b890;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_b89d;
loc_b890: // 070d:47c0
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_b89d: // 070d:47cd
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_b8d3;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_b8d1;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_b8d1: // 070d:4801
    goto loc_b8ee;
loc_b8d3: // 070d:4803
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0027)
        goto loc_b8ee;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_b8ee: // 070d:481e
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (ax != memoryAGet16(ds, di + 13528))
        goto loc_b986;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_b97b;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_b97b;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_b97b;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    push(memoryAGet16(ss, bp - 2));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0008;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x00c7;
    push(ax);
    push(cs);
    sub_7654();
    goto loc_b986;
loc_b97b: // 070d:48ab
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) - 1);
loc_b986: // 070d:48b6
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_b9cf;
    goto loc_bb25;
loc_b9cf: // 070d:48ff
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, memoryAGet16(ds, di + 13532) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13532) <= (short)0x0000)
        goto loc_b9f8;
    goto loc_bb1c;
loc_b9f8: // 070d:4928
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x01f4) >= 0x10000;
    ax += 0x01f4;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x00a9);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0b43;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0b43;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    goto loc_bb25;
loc_bb1c: // 070d:4a4c
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_bb25: // 070d:4a55
    goto loc_d52d;
loc_bb28: // 070d:4a58
    if (ax == 0x0022)
        goto loc_bb30;
    goto loc_beb5;
loc_bb30: // 070d:4a60
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 18);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_bb97;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_bc76;
loc_bb97: // 070d:4ac7
    ax = memoryAGet16(ss, bp - 18);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_bbd0;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
    goto loc_bc76;
loc_bbd0: // 070d:4b00
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_bc24;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_bc24;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_bc76;
loc_bc24: // 070d:4b54
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_bc76;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_bc76;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_bc76: // 070d:4ba6
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_bcac;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_bcaa;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_bcaa: // 070d:4bda
    goto loc_bcc7;
loc_bcac: // 070d:4bdc
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0027)
        goto loc_bcc7;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_bcc7: // 070d:4bf7
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_bd10;
    goto loc_beb2;
loc_bd10: // 070d:4c40
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, memoryAGet16(ds, di + 13532) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13532) <= (short)0x0000)
        goto loc_bd39;
    goto loc_bea9;
loc_bd39: // 070d:4c69
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x00aa);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0be3;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0be3;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    ax = 0xffff;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x007d;
    push(ax);
    push(cs);
    sub_7654();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x007e;
    push(ax);
    push(cs);
    sub_7654();
    goto loc_beb2;
loc_bea9: // 070d:4dd9
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_beb2: // 070d:4de2
    goto loc_d52d;
loc_beb5: // 070d:4de5
    if (ax == 0x0023)
        goto loc_bebd;
    goto loc_c031;
loc_bebd: // 070d:4ded
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_bee3;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_bee3: // 070d:4e13
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_bf2c;
    goto loc_c02e;
loc_bf2c: // 070d:4e5c
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13516, 0x0003);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, memoryAGet16(ds, di + 13532) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13532) <= (short)0x0000)
        goto loc_bf55;
    goto loc_c025;
loc_bf55: // 070d:4e85
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x00aa);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0be3;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0be3;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    memoryASet(ds, 0x69ef, 0x01);
    goto loc_c02e;
loc_c025: // 070d:4f55
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_c02e: // 070d:4f5e
    goto loc_d52d;
loc_c031: // 070d:4f61
    if (ax == 0x0024)
        goto loc_c039;
    goto loc_c109;
loc_c039: // 070d:4f69
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13532))
        goto loc_c06d;
    goto loc_c106;
loc_c06d: // 070d:4f9d
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13532);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0004;
    dx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0008;
    if ((short)ax < (short)dx)
        goto loc_c106;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0004;
    dx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0008;
    if ((short)ax > (short)dx)
        goto loc_c106;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax < (short)memoryAGet16(ds, 0x34f0))
        goto loc_c106;
    if (memoryAGet(ds, 0x69ef) != 0x00)
        goto loc_c106;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0008;
    push(ax);
    ax = 0xffff;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0072;
    push(ax);
    push(cs);
    sub_7654();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
loc_c106: // 070d:5036
    goto loc_d52d;
loc_c109: // 070d:5039
    if (ax == 0x0089)
        goto loc_c111;
    goto loc_c326;
loc_c111: // 070d:5041
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c17f;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c17f;
    goto loc_c2ba;
loc_c17f: // 070d:50af
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13547) == 0x00)
        goto loc_c199;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x01);
loc_c199: // 070d:50c9
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13520) >= (short)0x0000)
        goto loc_c1c0;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13520, ax);
loc_c1c0: // 070d:50f0
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    goto loc_c323;
loc_c2ba: // 070d:51ea
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0009)
        goto loc_c2e0;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_c2e0: // 070d:5210
    ax = memoryAGet16(ss, bp - 4);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13520) >= (short)0x0000)
        goto loc_c309;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13520, ax);
loc_c309: // 070d:5239
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_c323: // 070d:5253
    goto loc_d52d;
loc_c326: // 070d:5256
    if (ax == 0x0025)
        goto loc_c32e;
    goto loc_c5df;
loc_c32e: // 070d:525e
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c39b;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c39b;
    goto loc_c4d7;
loc_c39b: // 070d:52cb
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13547) == 0x00)
        goto loc_c3b5;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x01);
loc_c3b5: // 070d:52e5
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13520) >= (short)0x0000)
        goto loc_c3dc;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13520, ax);
loc_c3dc: // 070d:530c
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    goto loc_c5dc;
loc_c4d7: // 070d:5407
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0009)
        goto loc_c4fd;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_c4fd: // 070d:542d
    ax = memoryAGet16(ss, bp - 4);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13520) >= (short)0x0000)
        goto loc_c526;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13520, ax);
loc_c526: // 070d:5456
    if (memoryAGet(ds, 0x69f3) == 0x00)
        goto loc_c530;
    goto loc_c5dc;
loc_c530: // 070d:5460
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax > (short)memoryAGet16(ds, 0x34ee))
        goto loc_c555;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0009;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_c579;
loc_c555: // 070d:5485
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0009;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)ax < (short)memoryAGet16(ds, di + 13518))
        goto loc_c5dc;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax < (short)memoryAGet16(ds, 0x34ee))
        goto loc_c5dc;
loc_c579: // 070d:54a9
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax > (short)memoryAGet16(ds, 0x34f0))
        goto loc_c59e;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_c5c2;
loc_c59e: // 070d:54ce
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x000f;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)ax < (short)memoryAGet16(ds, di + 13520))
        goto loc_c5dc;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    if ((short)ax < (short)memoryAGet16(ds, 0x34f0))
        goto loc_c5dc;
loc_c5c2: // 070d:54f2
    if (memoryAGet(ds, 0x69f5) != 0x00)
        goto loc_c5dc;
    memoryASet(ds, 0x69f5, 0x01);
    memoryASet(ds, 0x69f6, 0x23);
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_c5dc: // 070d:550c
    goto loc_d52d;
loc_c5df: // 070d:550f
    if (ax == 0x0026)
        goto loc_c5e7;
    goto loc_c767;
loc_c5e7: // 070d:5517
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c63a;
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_c652;
loc_c63a: // 070d:556a
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
loc_c652: // 070d:5582
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_c678;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_c678: // 070d:55a8
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13534) <= (short)0x0000)
        goto loc_c691;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, memoryAGet16(ds, di + 13534) - 1);
loc_c691: // 070d:55c1
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) != 0x0000)
        goto loc_c715;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13530) != 0x0000)
        goto loc_c6d6;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0089;
    push(ax);
    push(cs);
    sub_7654();
loc_c6d6: // 070d:5606
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (ax != memoryAGet16(ds, di + 13528))
        goto loc_c713;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, 0x006e);
loc_c713: // 070d:5643
    goto loc_c723;
loc_c715: // 070d:5645
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
loc_c723: // 070d:5653
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (!al)
        goto loc_c764;
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_c764: // 070d:5694
    goto loc_d52d;
loc_c767: // 070d:5697
    if (ax == 0x0027)
        goto loc_c76f;
    goto loc_ce92;
loc_c76f: // 070d:569f
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c808;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c808;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c808;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_c84d;
loc_c808: // 070d:5738
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13538);
    ax = -ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_c83d;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_c84a;
loc_c83d: // 070d:576d
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x00c9);
loc_c84a: // 070d:577a
    goto loc_c901;
loc_c84d: // 070d:577d
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c8a9;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_c8a9;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x00c9);
    goto loc_c901;
loc_c8a9: // 070d:57d9
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_c901;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_c901;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_c901: // 070d:5831
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13530);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)ax >= (short)memoryAGet16(ds, di + 13528))
        goto loc_c927;
    goto loc_c9c0;
loc_c927: // 070d:5857
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    dx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    if (ax != dx)
        goto loc_c9c0;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_c974;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) == 0x0001)
        goto loc_c993;
loc_c974: // 070d:58a4
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_c9c0;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_c9c0;
loc_c993: // 070d:58c3
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13538));
    ax = 0x0004;
    push(ax);
    ax = 0x033b;
    push(ax);
    push(cs);
    sub_7654();
loc_c9c0: // 070d:58f0
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13534) <= (short)0x0000)
        goto loc_c9d9;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, memoryAGet16(ds, di + 13534) - 1);
loc_c9d9: // 070d:5909
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) != 0x0001)
        goto loc_c9f7;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x001e);
    goto loc_cadf;
loc_c9f7: // 070d:5927
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) != 0x0000)
        goto loc_ca7f;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_ca3b;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_ca39;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0013);
loc_ca39: // 070d:5969
    goto loc_ca57;
loc_ca3b: // 070d:596b
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x00db)
        goto loc_ca57;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x00db);
loc_ca57: // 070d:5987
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, memoryAGet16(ds, di + 13532) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13532) != 0x0000)
        goto loc_ca7d;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, 0x0050);
loc_ca7d: // 070d:59ad
    goto loc_cadf;
loc_ca7f: // 070d:59af
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0xffff)
        goto loc_cab5;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_cab3;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_cab3: // 070d:59e3
    goto loc_cad1;
loc_cab5: // 070d:59e5
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x00db)
        goto loc_cad1;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x00c9);
loc_cad1: // 070d:5a01
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
loc_cadf: // 070d:5a0f
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs);
    sub_7294();
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_734c();
    if (al)
        goto loc_cb38;
    goto loc_cc3b;
loc_cb38: // 070d:5a68
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_cbc9;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_cbc7;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_cbc7;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x00c9);
loc_cbc7: // 070d:5af7
    goto loc_cc38;
loc_cbc9: // 070d:5af9
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_cc38;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_cc38;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_cc38: // 070d:5b68
    goto loc_ce8f;
loc_cc3b: // 070d:5b6b
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs);
    sub_734c();
    if (al)
        goto loc_cc60;
    goto loc_ce8f;
loc_cc60: // 070d:5b90
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_cce8;
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_cce6;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_cce6;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x00c9);
loc_cce6: // 070d:5c16
    goto loc_cd57;
loc_cce8: // 070d:5c18
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_cd57;
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_cd57;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_cd57: // 070d:5c87
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13534) == 0x0000)
        goto loc_cd68;
    goto loc_ce86;
loc_cd68: // 070d:5c98
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_74c0();
    goto loc_ce8f;
loc_ce86: // 070d:5db6
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_ce8f: // 070d:5dbf
    goto loc_d52d;
loc_ce92: // 070d:5dc2
    if (ax == 0x0028)
        goto loc_ce9a;
    goto loc_cfbf;
loc_ce9a: // 070d:5dca
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_cec0;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_cec0: // 070d:5df0
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, memoryAGet16(ds, di + 13530) - 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13530) == 0x0000)
        goto loc_cedc;
    goto loc_cfa2;
loc_cedc: // 070d:5e0c
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    goto loc_cfbc;
loc_cfa2: // 070d:5ed2
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_cfbc: // 070d:5eec
    goto loc_d52d;
loc_cfbf: // 070d:5eef
    if (ax == 0x0029)
        goto loc_cfc7;
    goto loc_d469;
loc_cfc7: // 070d:5ef7
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) == 0x01b3)
        goto loc_cfd9;
    goto loc_d084;
loc_cfd9: // 070d:5f09
    ax = memoryAGet16(ds, 0x34ee);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13518);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, 0x34f0);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13520);
    memoryASet16(ss, bp - 14, ax);
    if ((short)memoryAGet16(ss, bp - 12) < (short)0x0008)
        goto loc_d004;
    goto loc_d081;
loc_d004: // 070d:5f34
    if ((short)memoryAGet16(ss, bp - 12) <= (short)0xfff8)
        goto loc_d081;
    if ((short)memoryAGet16(ss, bp - 14) >= (short)0x0008)
        goto loc_d081;
    if ((short)memoryAGet16(ss, bp - 14) <= (short)0xfff8)
        goto loc_d081;
loc_d016: // 070d:5f46
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax >>= cl;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_d043;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0010);
    goto loc_d016;
loc_d043: // 070d:5f73
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 4);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x026b);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0008);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13540, 0x0001);
loc_d081: // 070d:5fb1
    goto loc_d466;
loc_d084: // 070d:5fb4
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    cx = 0x0004;
    ax >>= cl;
    ax += 0x0002;
    memoryASet16(ss, bp - 14, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 12, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_d0e7;
    goto loc_d1dc;
loc_d0e7: // 070d:6017
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_d106;
    goto loc_d1dc;
loc_d106: // 070d:6036
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) == 0x00)
        goto loc_d125;
    goto loc_d1dc;
loc_d125: // 070d:6055
    ax = memoryAGet16(ss, bp - 14);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 16);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) == 0x00)
        goto loc_d144;
    goto loc_d1dc;
loc_d144: // 070d:6074
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0004;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13518);
    ax -= 0x0010;
    push(ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    goto loc_d374;
loc_d1dc: // 070d:610c
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
loc_d374: // 070d:62a4
    ax = memoryAGet16(ds, 0x34ee);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13518);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, 0x34f0);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 13520);
    memoryASet16(ss, bp - 14, ax);
    if ((short)memoryAGet16(ss, bp - 12) < (short)0x000a)
        goto loc_d39f;
    goto loc_d466;
loc_d39f: // 070d:62cf
    if ((short)memoryAGet16(ss, bp - 12) > (short)0xfff6)
        goto loc_d3a8;
    goto loc_d466;
loc_d3a8: // 070d:62d8
    if ((short)memoryAGet16(ss, bp - 14) < (short)0x000a)
        goto loc_d3b1;
    goto loc_d466;
loc_d3b1: // 070d:62e1
    if ((short)memoryAGet16(ss, bp - 14) > (short)0xfff6)
        goto loc_d3ba;
    goto loc_d466;
loc_d3ba: // 070d:62ea
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x1388) >= 0x10000;
    ax += 0x1388;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x1389);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0010);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x00ac);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0c83;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0c83;
    push(es);
    push(di);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13520);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
loc_d466: // 070d:6396
    goto loc_d52d;
loc_d469: // 070d:6399
    if (ax != 0x002b)
        goto loc_d4ce;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, memoryAGet16(ds, di + 13528) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 13528);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (ax != memoryAGet16(ds, di + 13530))
        goto loc_d4cc;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_d4bf;
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x070d);
    ax++;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, ax);
loc_d4bf: // 070d:63ef
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
loc_d4cc: // 070d:63fc
    goto loc_d52d;
loc_d4ce: // 070d:63fe
    if (ax != 0x002c)
        goto loc_d52d;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13536) != 0x0103)
        goto loc_d512;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, memoryAGet16(ds, di + 13526) + 1);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13518));
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    push(memoryAGet16(ds, di + 13520));
    push(cs);
    sub_7294();
loc_d512: // 070d:6442
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if ((short)memoryAGet16(ds, di + 13526) <= (short)0x0013)
        goto loc_d52d;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_d52d: // 070d:645d
    if (memoryAGet16(ss, bp - 6) == 0x0019)
        goto loc_d536;
    goto loc_a048;
loc_d536: // 070d:6466
    ax = memoryAGet16(ds, 0x69a2);
    memoryASet16(ss, bp - 20, ax);
    ax = 0x0001;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 20))
        goto loc_d547;
    goto loc_d6a5;
loc_d547: // 070d:6477
    memoryASet16(ss, bp - 6, ax);
    goto loc_d54f;
loc_d54c: // 070d:647c
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_d54f: // 070d:647f
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 26712) == 0x00)
        goto loc_d560;
    goto loc_d69a;
loc_d560: // 070d:6490
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 26702) != 0x0272)
        goto loc_d572;
    goto loc_d69a;
loc_d572: // 070d:64a2
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26688, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26690, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 26704) != 0x0001)
        goto loc_d5c7;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax += memoryAGet16(ds, di + 26708);
    memoryASet16(ss, bp - 2, ax);
    goto loc_d5fe;
loc_d5c7: // 070d:64f7
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 26704) != 0xffff)
        goto loc_d5f0;
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax -= memoryAGet16(ds, di + 26708);
    memoryASet16(ss, bp - 2, ax);
    goto loc_d5fe;
loc_d5f0: // 070d:6520
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26684);
    memoryASet16(ss, bp - 2, ax);
loc_d5fe: // 070d:652e
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = memoryAGet16(ds, di + 26686);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_d65c;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0008;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_d68c;
loc_d65c: // 070d:658c
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26702, 0x0272);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 26708, ax);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26696, 0x0007);
loc_d68c: // 070d:65bc
    ax = memoryAGet16(ss, bp - 2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26684, ax);
loc_d69a: // 070d:65ca
    ax = memoryAGet16(ss, bp - 6);
    if (ax == memoryAGet16(ss, bp - 20))
        goto loc_d6a5;
    goto loc_d54c;
loc_d6a5: // 070d:65d5
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_d6a9() // 070d:65d9 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    ax = memoryAGet16(ds, 0x34ee);
    ax += memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, 0x34ee);
    ax += memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ds, 0x34f0);
    ax += memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ds, 0x34f0);
    ax += memoryAGet16(ss, bp + 6);
    ax += 0x000f;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_d764;
    ax = memoryAGet16(ss, bp - 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_d764;
    ax = memoryAGet16(ss, bp - 10);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_d764;
    ax = memoryAGet16(ss, bp - 10);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_d776;
loc_d764: // 070d:6694
    memoryASet(ss, bp - 1, 0x00);
    if ((short)memoryAGet16(ds, 0x681c) <= (short)0x0001)
        goto loc_d774;
    ax = 0;
    memoryASet16(ds, 0x681e, ax);
loc_d774: // 070d:66a4
    goto loc_d77a;
loc_d776: // 070d:66a6
    memoryASet(ss, bp - 1, 0x01);
loc_d77a: // 070d:66aa
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_d783() // 070d:66b3 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet(ds, 0x34ea, memoryAGet(ds, 0x34ea) + 1);
    if (memoryAGet(ds, 0x34ea) <= 0x13)
        goto loc_d796;
    memoryASet(ds, 0x34ea, 0x13);
loc_d796: // 070d:66c6
    memoryASet(ds, 0x6ec0, 0x01);
    al = memoryAGet(ds, 0x34ea);
    ah = 0;
    di = ax;
    al = memoryAGet(ds, di + 13487);
    ah = 0;
    memoryASet16(ds, 0x34f0, memoryAGet16(ds, 0x34f0) + ax);
    ax = memoryAGet16(ds, 0x34f0);
    cx = 0x0004;
    ax >>= cl;
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_d806;
    ax = memoryAGet16(ds, 0x34f0);
    cx = 0x0004;
    ax >>= cl;
    ax += 0x0002;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_d81d;
loc_d806: // 070d:6736
    memoryASet16(ds, 0x6818, memoryAGet16(ds, 0x6818) + 1);
    ax = memoryAGet16(ds, 0x34f0);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet(ds, 0x6ec0, 0x00);
loc_d81d: // 070d:674d
    if (memoryAGet(ds, 0x34ea) > 0x0a)
        goto loc_d827;
    goto loc_d919;
loc_d827: // 070d:6757
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0010;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_d886;
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0010;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_d886;
    goto loc_d919;
loc_d886: // 070d:67b6
    if ((short)memoryAGet16(ds, 0x34f0) >= (short)0x0005)
        goto loc_d8a6;
    memoryASet16(ds, 0x6818, memoryAGet16(ds, 0x6818) + 1);
    ax = memoryAGet16(ds, 0x34f0);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet(ds, 0x6ec0, 0x00);
    goto loc_d919;
loc_d8a6: // 070d:67d6
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0007;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_d919;
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0007;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 461) != 0x00)
        goto loc_d919;
    memoryASet16(ds, 0x6818, memoryAGet16(ds, 0x6818) + 1);
    ax = memoryAGet16(ds, 0x34f0);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet(ds, 0x6ec0, 0x00);
loc_d919: // 070d:6849
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x0078;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_d954;
    al = memoryAGet(ds, 0x34ea);
    ah = 0;
    di = ax;
    al = memoryAGet(ds, di + 13487);
    ah = 0;
    ax += memoryAGet16(ds, 0x683a);
    if ((short)ax >= (short)0x00b8)
        goto loc_d94e;
    al = memoryAGet(ds, 0x34ea);
    ah = 0;
    di = ax;
    al = memoryAGet(ds, di + 13487);
    ah = 0;
    memoryASet16(ds, 0x683a, memoryAGet16(ds, 0x683a) + ax);
    goto loc_d954;
loc_d94e: // 070d:687e
    memoryASet16(ds, 0x683a, 0x00b8);
loc_d954: // 070d:6884
    if (memoryAGet(ds, 0x6ec0) == 0x00)
        goto loc_d987;
    if (memoryAGet16(ds, 0x3500) == 0x0001)
        goto loc_d977;
    if (memoryAGet16(ds, 0x3500) == 0x0009)
        goto loc_d977;
    if (memoryAGet16(ds, 0x3500) == 0x000b)
        goto loc_d977;
    if (memoryAGet16(ds, 0x3500) != 0x000d)
        goto loc_d97f;
loc_d977: // 070d:68a7
    memoryASet16(ds, 0x3500, 0x000d);
    goto loc_d985;
loc_d97f: // 070d:68af
    memoryASet16(ds, 0x3500, 0x000e);
loc_d985: // 070d:68b5
    goto loc_d9c1;
loc_d987: // 070d:68b7
    if (memoryAGet16(ds, 0x3500) != 0x000d)
        goto loc_d9a5;
    if (memoryAGet(ds, 0x6ecb) == 0x00)
        goto loc_d99d;
    memoryASet16(ds, 0x3500, 0x0001);
    goto loc_d9a3;
loc_d99d: // 070d:68cd
    memoryASet16(ds, 0x3500, 0x0009);
loc_d9a3: // 070d:68d3
    goto loc_d9c1;
loc_d9a5: // 070d:68d5
    if (memoryAGet16(ds, 0x3500) != 0x000e)
        goto loc_d9c1;
    if (memoryAGet(ds, 0x6eca) == 0x00)
        goto loc_d9bb;
    memoryASet16(ds, 0x3500, 0x0005);
    goto loc_d9c1;
loc_d9bb: // 070d:68eb
    memoryASet16(ds, 0x3500, 0x000a);
loc_d9c1: // 070d:68f1
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_d9c5() // 070d:68f5 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x34f2, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x34f4, ax);
    if (memoryAGet(ds, 0x6ecb) == 0x00)
        goto loc_da1e;
    push(cs);
    sub_71fd();
    push(memoryAGet16(ds, 0x6820));
    ax = 0;
    push(ax);
    push(cs);
    sub_d6a9();
    if (!al)
        goto loc_da1e;
    if ((short)memoryAGet16(ds, 0x6838) >= (short)0x0140)
        goto loc_da17;
    ax = memoryAGet16(ds, 0x6838);
    ax += 0x00aa;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34ee))
        goto loc_da17;
    ax = memoryAGet16(ds, 0x6820);
    memoryASet16(ds, 0x6838, memoryAGet16(ds, 0x6838) + ax);
    if ((short)memoryAGet16(ds, 0x6838) <= (short)0x0140)
        goto loc_da17;
    memoryASet16(ds, 0x6838, 0x0140);
loc_da17: // 070d:6947
    ax = memoryAGet16(ds, 0x6820);
    memoryASet16(ds, 0x34ee, memoryAGet16(ds, 0x34ee) + ax);
loc_da1e: // 070d:694e
    if (memoryAGet(ds, 0x6eca) == 0x00)
        goto loc_da67;
    push(cs);
    sub_71fd();
    ax = memoryAGet16(ds, 0x6820);
    ax = -ax;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_d6a9();
    if (!al)
        goto loc_da67;
    if ((short)memoryAGet16(ds, 0x6838) <= (short)0x0000)
        goto loc_da60;
    ax = memoryAGet16(ds, 0x6838);
    ax += 0x0096;
    if ((short)ax <= (short)memoryAGet16(ds, 0x34ee))
        goto loc_da60;
    ax = memoryAGet16(ds, 0x6820);
    memoryASet16(ds, 0x6838, memoryAGet16(ds, 0x6838) - ax);
    if ((short)memoryAGet16(ds, 0x6838) >= (short)0x0000)
        goto loc_da60;
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
loc_da60: // 070d:6990
    ax = memoryAGet16(ds, 0x6820);
    memoryASet16(ds, 0x34ee, memoryAGet16(ds, 0x34ee) - ax);
loc_da67: // 070d:6997
    if (memoryAGet(ds, 0x6ec4) == 0x00)
        goto loc_da9b;
    ax = 0;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_d6a9();
    if (!al)
        goto loc_da9b;
    if ((short)memoryAGet16(ds, 0x683a) >= (short)0x00b8)
        goto loc_da96;
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x0050;
    if ((short)ax >= (short)memoryAGet16(ds, 0x34f0))
        goto loc_da96;
    memoryASet16(ds, 0x683a, memoryAGet16(ds, 0x683a) + 0x0004);
loc_da96: // 070d:69c6
    memoryASet16(ds, 0x34f0, memoryAGet16(ds, 0x34f0) + 0x0004);
loc_da9b: // 070d:69cb
    if (memoryAGet(ds, 0x6ec3) == 0x00)
        goto loc_dada;
    ax = 0;
    push(ax);
    ax = 0xfffc;
    push(ax);
    push(cs);
    sub_d6a9();
    if (!al)
        goto loc_dada;
    if ((short)memoryAGet16(ds, 0x683a) <= (short)0x0000)
        goto loc_dad5;
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x0050;
    if ((short)ax <= (short)memoryAGet16(ds, 0x34f0))
        goto loc_dad5;
    memoryASet16(ds, 0x683a, memoryAGet16(ds, 0x683a) - 0x0004);
    if ((short)memoryAGet16(ds, 0x683a) >= (short)0x0000)
        goto loc_dad5;
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
loc_dad5: // 070d:6a05
    memoryASet16(ds, 0x34f0, memoryAGet16(ds, 0x34f0) - 0x0004);
loc_dada: // 070d:6a0a
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_dade() // 070d:6a0e +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x6ec1) != 0x00)
        goto loc_daf3;
    if (memoryAGet(ds, 0x6ec2) != 0x00)
        goto loc_daf3;
    push(cs);
    sub_d783();
loc_daf3: // 070d:6a23
    if (memoryAGet(ds, 0x69b4) == 0x00)
        goto loc_dafd;
    goto loc_dbcc;
loc_dafd: // 070d:6a2d
    if (memoryAGet(ds, 0x6ec1) == 0x00)
        goto loc_db07;
    goto loc_dbcc;
loc_db07: // 070d:6a37
    if (memoryAGet(ds, 0x6ec0) == 0x00)
        goto loc_db11;
    goto loc_dbcc;
loc_db11: // 070d:6a41
    if (memoryAGet(ds, 0x6ecd) != 0x00)
        goto loc_db2e;
    push(cs); cs = 0x2a5b; sub_2a5e8(); assert(cs == 0x070d);
    if (al)
        goto loc_db24;
    goto loc_dbcc;
loc_db24: // 070d:6a54
    if (memoryAGet(ds, 0x341c) != 0x00)
        goto loc_db2e;
    goto loc_dbcc;
loc_db2e: // 070d:6a5e
    ax = memoryAGet16(ds, 0x34f0);
    ax -= 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_dbcc;
    ax = memoryAGet16(ds, 0x34f0);
    ax -= 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x00)
        goto loc_dbcc;
    if (memoryAGet16(ds, 0x3500) == 0x0001)
        goto loc_dba6;
    if (memoryAGet16(ds, 0x3500) == 0x0009)
        goto loc_dba6;
    if (memoryAGet16(ds, 0x3500) == 0x000b)
        goto loc_dba6;
    if (memoryAGet16(ds, 0x3500) != 0x000d)
        goto loc_dbae;
loc_dba6: // 070d:6ad6
    memoryASet16(ds, 0x3500, 0x000d);
    goto loc_dbb4;
loc_dbae: // 070d:6ade
    memoryASet16(ds, 0x3500, 0x000e);
loc_dbb4: // 070d:6ae4
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet(ds, 0x6ec1, 0x01);
    memoryASet(ds, 0x6ec2, 0x00);
    memoryASet(ds, 0x34ea, 0x00);
loc_dbcc: // 070d:6afc
    if (memoryAGet(ds, 0x6ec1) != 0x00)
        goto loc_dbd6;
    goto loc_dc5a;
loc_dbd6: // 070d:6b06
    memoryASet(ds, 0x34ea, memoryAGet(ds, 0x34ea) + 1);
    if (memoryAGet(ds, 0x34ea) != 0x0a)
        goto loc_dbeb;
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x34ea, 0x09);
loc_dbeb: // 070d:6b1b
    if (memoryAGet(ds, 0x34ea) >= 0x11)
        goto loc_dc5a;
    ax = 0;
    push(ax);
    al = memoryAGet(ds, 0x34ea);
    ah = 0;
    di = ax;
    al = memoryAGet(ds, di + 13487);
    ah = 0;
    ax = -ax;
    push(ax);
    push(cs);
    sub_d6a9();
    if (!al)
        goto loc_dc50;
    if ((short)memoryAGet16(ds, 0x683a) <= (short)0x0000)
        goto loc_dc3d;
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x0050;
    if ((short)ax <= (short)memoryAGet16(ds, 0x34f0))
        goto loc_dc3d;
    al = memoryAGet(ds, 0x34ea);
    ah = 0;
    di = ax;
    al = memoryAGet(ds, di + 13487);
    ah = 0;
    memoryASet16(ds, 0x683a, memoryAGet16(ds, 0x683a) - ax);
    if ((short)memoryAGet16(ds, 0x683a) >= (short)0x0000)
        goto loc_dc3d;
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
loc_dc3d: // 070d:6b6d
    al = memoryAGet(ds, 0x34ea);
    ah = 0;
    di = ax;
    al = memoryAGet(ds, di + 13487);
    ah = 0;
    memoryASet16(ds, 0x34f0, memoryAGet16(ds, 0x34f0) - ax);
    goto loc_dc5a;
loc_dc50: // 070d:6b80
    memoryASet(ds, 0x34ea, 0x09);
    memoryASet(ds, 0x6ec1, 0x00);
loc_dc5a: // 070d:6b8a
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_ddde() // 070d:6d0e +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    if (ax != 0x0000)
        goto loc_de11;
    goto loc_f7a9;
loc_de11: // 070d:6d41
    if (ax == 0x01a5)
        goto loc_de23;
    if (ax == 0x01a7)
        goto loc_de23;
    if (ax == 0x01a9)
        goto loc_de23;
    goto loc_dea3;
loc_de23: // 070d:6d53
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    if (ax != 0x01a5)
        goto loc_de54;
    memoryASet(ds, 0x69e9, 0x01);
    goto loc_de6a;
loc_de54: // 070d:6d84
    if (ax != 0x01a7)
        goto loc_de60;
    memoryASet(ds, 0x69ea, 0x01);
    goto loc_de6a;
loc_de60: // 070d:6d90
    if (ax != 0x01a9)
        goto loc_de6a;
    memoryASet(ds, 0x69eb, 0x01);
loc_de6a: // 070d:6d9a
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x6832, 0xffff);
    goto loc_f7a9;
loc_dea3: // 070d:6dd3
    if (ax == 0x01a6)
        goto loc_deb5;
    if (ax == 0x01a8)
        goto loc_deb5;
    if (ax == 0x01aa)
        goto loc_deb5;
    goto loc_df8a;
loc_deb5: // 070d:6de5
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    if (ax != 0x01a6)
        goto loc_def7;
    if (memoryAGet(ds, 0x69e9) != 0x01)
        goto loc_def5;
    memoryASet16(ss, bp - 2, 0x0001);
    memoryASet(ds, 0x69e9, 0x00);
loc_def5: // 070d:6e25
    goto loc_df25;
loc_def7: // 070d:6e27
    if (ax != 0x01a8)
        goto loc_df0f;
    if (memoryAGet(ds, 0x69ea) != 0x01)
        goto loc_df0d;
    memoryASet16(ss, bp - 2, 0x0001);
    memoryASet(ds, 0x69ea, 0x00);
loc_df0d: // 070d:6e3d
    goto loc_df25;
loc_df0f: // 070d:6e3f
    if (ax != 0x01aa)
        goto loc_df25;
    if (memoryAGet(ds, 0x69eb) != 0x01)
        goto loc_df25;
    memoryASet16(ss, bp - 2, 0x0001);
    memoryASet(ds, 0x69eb, 0x00);
loc_df25: // 070d:6e55
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_df87;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 460, 0x00);
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x6832, 0xffff);
loc_df87: // 070d:6eb7
    goto loc_f7a9;
loc_df8a: // 070d:6eba
    if (ax != 0x012d)
        goto loc_dfde;
    ax = memoryAGet16(ds, 0x6858);
    ax += 0x0005;
    memoryASet16(ds, 0x6858, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    if ((short)memoryAGet16(ds, 0x6858) <= (short)0x0063)
        goto loc_dfcc;
    memoryASet16(ds, 0x6858, 0x0063);
loc_dfcc: // 070d:6efc
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_dfde: // 070d:6f0e
    if (ax != 0x013c)
        goto loc_e04f;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e04f: // 070d:6f7f
    if (ax != 0x026a)
        goto loc_e0c0;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x00fa) >= 0x10000;
    ax += 0x00fa;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e0c0: // 070d:6ff0
    if (ax != 0x026b)
        goto loc_e131;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e131: // 070d:7061
    if (ax != 0x026c)
        goto loc_e1a2;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x01f4) >= 0x10000;
    ax += 0x01f4;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e1a2: // 070d:70d2
    if (ax != 0x0275)
        goto loc_e213;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e213: // 070d:7143
    if (ax != 0x0276)
        goto loc_e284;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e284: // 070d:71b4
    if (ax != 0x0277)
        goto loc_e2f5;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x01f4) >= 0x10000;
    ax += 0x01f4;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e2f5: // 070d:7225
    if (ax != 0x0278)
        goto loc_e366;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e366: // 070d:7296
    if (ax != 0x002c)
        goto loc_e3d7;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x01f4) >= 0x10000;
    ax += 0x01f4;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_e3d7: // 070d:7307
    if ((short)ax >= (short)0x026d)
        goto loc_e3df;
    goto loc_e5db;
loc_e3df: // 070d:730f
    if ((short)ax <= (short)0x026f)
        goto loc_e3e7;
    goto loc_e5db;
loc_e3e7: // 070d:7317
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    if (ax != 0x026d)
        goto loc_e45b;
    memoryASet(ds, 0x69f0, 0x01);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_e5b1;
loc_e45b: // 070d:738b
    if (ax == 0x026e)
        goto loc_e463;
    goto loc_e509;
loc_e463: // 070d:7393
    if (memoryAGet(ds, 0x69f2) == 0x00)
        goto loc_e4ba;
    if (memoryAGet(ds, 0x69f0) == 0x00)
        goto loc_e4ba;
    memoryASet(ds, 0x69f1, 0x01);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_e506;
loc_e4ba: // 070d:73ea
    memoryASet(ds, 0x69f1, 0x01);
    memoryASet(ds, 0x69f2, 0x00);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_e506: // 070d:7436
    goto loc_e5b1;
loc_e509: // 070d:7439
    if (ax == 0x026f)
        goto loc_e511;
    goto loc_e5b1;
loc_e511: // 070d:7441
    if (memoryAGet(ds, 0x69f2) == 0x00)
        goto loc_e56a;
    if (memoryAGet(ds, 0x69f0) == 0x00)
        goto loc_e56a;
    if (memoryAGet(ds, 0x69f1) == 0x00)
        goto loc_e56a;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x2710) >= 0x10000;
    ax += 0x2710;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0017;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_e5b1;
loc_e56a: // 070d:749a
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    memoryASet(ds, 0x69f2, 0x00);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_e5b1: // 070d:74e1
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    goto loc_f7a9;
loc_e5db: // 070d:750b
    if (ax != 0x025e)
        goto loc_e652;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x01f4) >= 0x10000;
    ax += 0x01f4;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x6832, 0xffff);
    goto loc_f7a9;
loc_e652: // 070d:7582
    if (ax != 0x0130)
        goto loc_e6d1;
    di = memoryAGet16(ds, 0x681c);
    memoryASet(ds, di + 26691, 0x01);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x07d0) >= 0x10000;
    ax += 0x07d0;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet(ds, 0x6d66, 0x01);
    goto loc_f7a9;
loc_e6d1: // 070d:7601
    if (ax == 0x025f)
        goto loc_e6d9;
    goto loc_e81a;
loc_e6d9: // 070d:7609
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    di = 0x6b8e;
    push(cs);
    push(di);
    push(cs); cs = 0x19e6; sub_2399e(); assert(cs == 0x070d);
    memoryASet16(ss, bp + 6, 0x0001);
    goto loc_e71d;
loc_e71a: // 070d:764a
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_e71d: // 070d:764d
    memoryASet16(ss, bp + 8, 0x0001);
    goto loc_e727;
loc_e724: // 070d:7654
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
loc_e727: // 070d:7657
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 458) == 0xffff)
        goto loc_e746;
    goto loc_e805;
loc_e746: // 070d:7676
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 456, 0x0260);
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 461, 0x01);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x070d);
loc_e805: // 070d:7735
    if (memoryAGet16(ss, bp + 8) == 0x0028)
        goto loc_e80e;
    goto loc_e724;
loc_e80e: // 070d:773e
    if (memoryAGet16(ss, bp + 6) == 0x0018)
        goto loc_e817;
    goto loc_e71a;
loc_e817: // 070d:7747
    goto loc_f7a9;
loc_e81a: // 070d:774a
    if ((short)ax >= (short)0x0201)
        goto loc_e822;
    goto loc_ea42;
loc_e822: // 070d:7752
    if ((short)ax <= (short)0x0204)
        goto loc_e82a;
    goto loc_ea42;
loc_e82a: // 070d:775a
    if (memoryAGet(ds, 0x34ae) != 0x00)
        goto loc_e83a;
    ax = 0x001c;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_e83a: // 070d:776a
    if (memoryAGet(ds, 0x69f3) != 0x00)
        goto loc_e846;
    memoryASet(ds, 0x69b4, 0x01);
loc_e846: // 070d:7776
    memoryASet16(ds, 0x69b6, 0x0033);
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x6d62, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x6d64, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    if ((short)ax < (short)0x0113)
        goto loc_e8db;
    if ((short)ax > (short)0x0122)
        goto loc_e8db;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0111;
    memoryASet16(ds, 0x69b8, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 458, 0x010c);
    goto loc_e93f;
loc_e8db: // 070d:780b
    if (ax != 0x010c)
        goto loc_e90e;
    if ((short)memoryAGet16(ds, 0x69b6) <= (short)0x000f)
        goto loc_e90c;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 458, memoryAGet16(ds, di + 458) + 1);
loc_e90c: // 070d:783c
    goto loc_e93f;
loc_e90e: // 070d:783e
    if (ax != 0x010d)
        goto loc_e93f;
    if ((short)memoryAGet16(ds, 0x69b6) <= (short)0x001e)
        goto loc_e93f;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 458, memoryAGet16(ds, di + 458) + 1);
loc_e93f: // 070d:786f
    if ((short)memoryAGet16(ds, 0x69b6) > (short)0x0032)
        goto loc_e949;
    goto loc_ea3f;
loc_e949: // 070d:7879
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    memoryASet16(ds, 0x69b8, ax);
    ax = 0;
    memoryASet16(ds, 0x69b6, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x19e6; sub_1a092(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x69b8);
    memoryASet16(ds, 0x681c, ax);
    push(cs); cs = 0x19e6; sub_1db18(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = (ax + 0x0008) >= 0x10000;
    ax += 0x0008;
    dx += 0x0000 + flags.carry;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ds, 0x6d18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    if ((short)dx > (short)bx)
        goto loc_e9ad;
    if ((short)dx < (short)bx)
        goto loc_e9c3;
    if (ax <= cx)
        goto loc_e9c3;
loc_e9ad: // 070d:78dd
    ax = memoryAGet16(ds, 0x6d18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = (ax + 0x0010) >= 0x10000;
    ax += 0x0010;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x6d18, ax);
    goto loc_e9d4;
loc_e9c3: // 070d:78f3
    ax = memoryAGet16(ds, 0x6d18);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x6d18, ax);
loc_e9d4: // 070d:7904
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = (ax + 0x0008) >= 0x10000;
    ax += 0x0008;
    dx += 0x0000 + flags.carry;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ds, 0x6d1a);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    if ((short)dx > (short)bx)
        goto loc_e9f7;
    if ((short)dx < (short)bx)
        goto loc_ea0d;
    if (ax <= cx)
        goto loc_ea0d;
loc_e9f7: // 070d:7927
    ax = memoryAGet16(ds, 0x6d1a);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = (ax + 0x0010) >= 0x10000;
    ax += 0x0010;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x6d1a, ax);
    goto loc_ea1e;
loc_ea0d: // 070d:793d
    ax = memoryAGet16(ds, 0x6d1a);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x6d1a, ax);
loc_ea1e: // 070d:794e
    push(memoryAGet16(ds, 0x69b8));
    push(cs); cs = 0x0f80; sub_199ae(); assert(cs == 0x070d);
    push(cs); cs = 0x2a7d; sub_2b259(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x69b8);
    memoryASet(ds, di + 27065, 0x01);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
loc_ea3f: // 070d:796f
    goto loc_f7a9;
loc_ea42: // 070d:7972
    if (ax != 0x027b)
        goto loc_eab8;
    memoryASet(ds, 0x69f4, 0x01);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs);
    sub_74c0();
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x01f4) >= 0x10000;
    ax += 0x01f4;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    goto loc_f7a9;
loc_eab8: // 070d:79e8
    if (ax == 0x027d)
        goto loc_eac0;
    goto loc_ecc4;
loc_eac0: // 070d:79f0
    if (memoryAGet(ds, 0x69f4) == 0x01)
        goto loc_eaca;
    goto loc_ec43;
loc_eaca: // 070d:79fa
    memoryASet(ds, 0x69f4, 0x00);
    ax = 0x000b;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0005;
    if ((short)ax <= (short)memoryAGet16(ss, bp + 8))
        goto loc_eb0a;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ss, bp - 6, ax);
    goto loc_eb29;
loc_eb0a: // 070d:7a3a
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax--;
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ss, bp - 6, ax);
loc_eb29: // 070d:7a59
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x1543;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x1543;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x070d);
    memoryASet16(ss, bp - 2, 0x0001);
loc_eb60: // 070d:7a90
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13546) == 0x01)
        goto loc_eb77;
    if (memoryAGet16(ss, bp - 2) != 0x0019)
        goto loc_eb60;
loc_eb77: // 070d:7aa7
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x027b);
    ax = memoryAGet16(ss, bp - 4);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp - 6);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp - 4);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp - 6);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x0028);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0016);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
    memoryASet(ds, 0x69ee, 0x01);
    goto loc_ecc1;
loc_ec43: // 070d:7b73
    if (memoryAGet(ds, 0x69ee) != 0x00)
        goto loc_ecc1;
    memoryASet(ds, 0x69ee, 0x01);
    push(cs); cs = 0x19e6; sub_1a5fe(); assert(cs == 0x070d);
    di = 0x6baf;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6bc7;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    memoryASet(ds, 0x3864, 0x00);
    di = 0x6bdf;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6bee;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x00;
    push(ax);
    push(cs); cs = 0x19e6; sub_1b461(); assert(cs == 0x070d);
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
loc_ecc1: // 070d:7bf1
    goto loc_f7a9;
loc_ecc4: // 070d:7bf4
    if (ax == 0x027e)
        goto loc_eccc;
    goto loc_ef81;
loc_eccc: // 070d:7bfc
    if (memoryAGet(ds, 0x69ce) != 0x00)
        goto loc_ecd6;
    goto loc_edeb;
loc_ecd6: // 070d:7c06
    if (memoryAGet(ds, 0x6d66) == 0x00)
        goto loc_ece2;
    memoryASet(ds, 0x6ec6, 0x01);
loc_ece2: // 070d:7c12
    memoryASet(ds, 0x6a3e, 0x01);
    di = memoryAGet16(ds, 0x681c);
    memoryASet(ds, di + 27065, 0x01);
    if (memoryAGet(ds, 0x6a40) != 0x03)
        goto loc_ed15;
    push(cs); cs = 0x19e6; sub_27680(); assert(cs == 0x070d);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x61a8) >= 0x10000;
    ax += 0x61a8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
loc_ed15: // 070d:7c45
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    if (!ax)
        goto loc_ed4a;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    ax--;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x01)
        goto loc_ed9a;
loc_ed4a: // 070d:7c7a
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x34f2, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x34f4, ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = (ax + 0x0010) >= 0x10000;
    ax += 0x0010;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x34ee, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet16(ds, 0x3502, 0xffff);
    memoryASet16(ds, 0x3500, 0x0005);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    memoryASet(ds, 0x6eca, 0x01);
    memoryASet(ds, 0x6ecb, 0x00);
    goto loc_ede8;
loc_ed9a: // 070d:7cca
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x34f2, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x34f4, ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = ax < 0x0010;
    ax -= 0x0010;
    dx = dx - 0x0000 - flags.carry;
    memoryASet16(ds, 0x34ee, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet16(ds, 0x3502, 0x0001);
    memoryASet16(ds, 0x3500, 0x0001);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x01);
loc_ede8: // 070d:7d18
    goto loc_ef7e;
loc_edeb: // 070d:7d1b
    if ((short)memoryAGet16(ds, 0x681c) > (short)0x0001)
        goto loc_edf5;
    goto loc_ef7e;
loc_edf5: // 070d:7d25
    ax = 0x000f;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    push(cs); cs = 0x19e6; sub_1a5fe(); assert(cs == 0x070d);
    di = 0x6bfc;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6c14;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6c2c;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6c44;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6c5c;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6c14;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6c6a;
    push(cs);
    push(di);
    di = 0x3908;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6bee;
    push(cs);
    push(di);
    di = 0x3931;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x00;
    push(ax);
    push(cs); cs = 0x19e6; sub_1b461(); assert(cs == 0x070d);
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    if (!ax)
        goto loc_eeec;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    ax--;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) != 0x01)
        goto loc_ef36;
loc_eeec: // 070d:7e1c
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x34f2, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x34f4, ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = (ax + 0x0010) >= 0x10000;
    ax += 0x0010;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x34ee, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet16(ds, 0x3500, 0x000a);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    goto loc_ef7e;
loc_ef36: // 070d:7e66
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x34f2, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x34f4, ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    flags.carry = ax < 0x0010;
    ax -= 0x0010;
    dx = dx - 0x0000 - flags.carry;
    memoryASet16(ds, 0x34ee, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x34f0, ax);
    memoryASet16(ds, 0x3500, 0x0009);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
loc_ef7e: // 070d:7eae
    goto loc_f7a9;
loc_ef81: // 070d:7eb1
    if (ax == 0x0270)
        goto loc_ef89;
    goto loc_f0f1;
loc_ef89: // 070d:7eb9
    memoryASet16(ss, bp - 2, 0x0001);
loc_ef8e: // 070d:7ebe
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet(ds, di + 13546) == 0x01)
        goto loc_efa5;
    if (memoryAGet16(ss, bp - 2) != 0x0019)
        goto loc_ef8e;
loc_efa5: // 070d:7ed5
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0271);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x0028);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0017);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
    if (memoryAGet(ds, 0x69f3) != 0x00)
        goto loc_f0bd;
    memoryASet(ds, 0x69b4, 0x01);
loc_f0bd: // 070d:7fed
    if (memoryAGet(ds, 0x69f5) != 0x00)
        goto loc_f0d5;
    if (memoryAGet(ds, 0x69f3) != 0x00)
        goto loc_f0d5;
    memoryASet(ds, 0x69f5, 0x01);
    memoryASet(ds, 0x69f6, 0x23);
loc_f0d5: // 070d:8005
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec1, 0x00);
    goto loc_f7a9;
loc_f0f1: // 070d:8021
    if (ax == 0x01f3)
        goto loc_f10a;
    if (ax == 0x025b)
        goto loc_f10a;
    if (ax == 0x0265)
        goto loc_f10a;
    if (ax == 0x0267)
        goto loc_f10a;
    if (ax != 0x0268)
        goto loc_f127;
loc_f10a: // 070d:803a
    if (memoryAGet(ds, 0x69f3) != 0x00)
        goto loc_f124;
    memoryASet(ds, 0x69f5, 0x01);
    memoryASet(ds, 0x69f6, 0x23);
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
loc_f124: // 070d:8054
    goto loc_f7a9;
loc_f127: // 070d:8057
    if (ax == 0x025c)
        goto loc_f12f;
    goto loc_f2e5;
loc_f12f: // 070d:805f
    if (memoryAGet(ds, 0x69ec) == 0x01)
        goto loc_f139;
    goto loc_f258;
loc_f139: // 070d:8069
    memoryASet(ds, 0x69ec, 0x00);
    memoryASet(ds, 0x69ed, 0x01);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 460, 0x00);
    ax = 0x0018;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ss, bp + 6, 0x0001);
    goto loc_f17c;
loc_f179: // 070d:80a9
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_f17c: // 070d:80ac
    memoryASet16(ss, bp + 8, 0x0001);
    goto loc_f186;
loc_f183: // 070d:80b3
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
loc_f186: // 070d:80b6
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 458) == 0x025b)
        goto loc_f1a6;
    goto loc_f239;
loc_f1a6: // 070d:80d6
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x0f80; sub_f800(); assert(cs == 0x070d);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x0f80; sub_11d30(); assert(cs == 0x070d);
    ax = 0x01b0;
    ax -= memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x6840, ax);
loc_f239: // 070d:8169
    if (memoryAGet16(ss, bp + 8) == 0x0028)
        goto loc_f242;
    goto loc_f183;
loc_f242: // 070d:8172
    if (memoryAGet16(ss, bp + 6) == 0x0018)
        goto loc_f24b;
    goto loc_f179;
loc_f24b: // 070d:817b
    di = 0x6c82;
    push(cs);
    push(di);
    push(cs); cs = 0x19e6; sub_2399e(); assert(cs == 0x070d);
    goto loc_f2e2;
loc_f258: // 070d:8188
    if (memoryAGet(ds, 0x69ed) == 0x00)
        goto loc_f262;
    goto loc_f2e2;
loc_f262: // 070d:8192
    ax = 0x0019;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet(ds, 0x69ed, 0x01);
    push(cs); cs = 0x19e6; sub_1a5fe(); assert(cs == 0x070d);
    di = 0x6ca5;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6cc1;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    memoryASet(ds, 0x3864, 0x00);
    di = 0x6cd2;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    di = 0x6bee;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x070d);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x00;
    push(ax);
    push(cs); cs = 0x19e6; sub_1b461(); assert(cs == 0x070d);
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
loc_f2e2: // 070d:8212
    goto loc_f7a9;
loc_f2e5: // 070d:8215
    if (ax != 0x025d)
        goto loc_f35b;
    memoryASet(ds, 0x69ec, 0x01);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs);
    sub_74c0();
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x01f4) >= 0x10000;
    ax += 0x01f4;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    goto loc_f7a9;
loc_f35b: // 070d:828b
    if (ax == 0x00b7)
        goto loc_f363;
    goto loc_f4bb;
loc_f363: // 070d:8293
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ss, bp + 8, ax);
    ax = memoryAGet16(ds, 0x34ee);
    if ((short)ax <= (short)memoryAGet16(ss, bp + 8))
        goto loc_f384;
    ax = memoryAGet16(ds, 0x34ee);
    ax -= memoryAGet16(ss, bp + 8);
    if ((short)ax <= (short)0x0002)
        goto loc_f39e;
loc_f384: // 070d:82b4
    ax = memoryAGet16(ds, 0x34ee);
    if ((short)ax < (short)memoryAGet16(ss, bp + 8))
        goto loc_f38f;
    goto loc_f4b8;
loc_f38f: // 070d:82bf
    ax = memoryAGet16(ss, bp + 8);
    ax -= memoryAGet16(ds, 0x34ee);
    if ((short)ax <= (short)0x0002)
        goto loc_f39e;
    goto loc_f4b8;
loc_f39e: // 070d:82ce
    if (memoryAGet(ds, 0x69e0) == 0x00)
        goto loc_f3a8;
    goto loc_f4b8;
loc_f3a8: // 070d:82d8
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0x0017;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ss, bp - 6, 0x0001);
    goto loc_f3c1;
loc_f3be: // 070d:82ee
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_f3c1: // 070d:82f1
    memoryASet16(ss, bp - 4, 0x0001);
    goto loc_f3cb;
loc_f3c8: // 070d:82f8
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_f3cb: // 070d:82fb
    ax = memoryAGet16(ss, bp - 6);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 458) != 0x00b7)
        goto loc_f461;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    if (ax != memoryAGet16(ss, bp - 4))
        goto loc_f404;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    if (ax == memoryAGet16(ss, bp - 6))
        goto loc_f461;
loc_f404: // 070d:8334
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x69e4, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x69e6, ax);
    ax = memoryAGet16(ds, 0x69e6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ds, 0x69e4);
    cx = 0x0004;
    ax >>= cl;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 460) == 0x00)
        goto loc_f44e;
    ax = memoryAGet16(ds, 0x69e4);
    ax += 0x0003;
    memoryASet16(ds, 0x69e4, ax);
    goto loc_f457;
loc_f44e: // 070d:837e
    ax = memoryAGet16(ds, 0x69e4);
    ax -= 0x0003;
    memoryASet16(ds, 0x69e4, ax);
loc_f457: // 070d:8387
    memoryASet16(ss, bp - 4, 0x0028);
    memoryASet16(ss, bp - 6, 0x0018);
loc_f461: // 070d:8391
    if (memoryAGet16(ss, bp - 4) == 0x0028)
        goto loc_f46a;
    goto loc_f3c8;
loc_f46a: // 070d:839a
    if (memoryAGet16(ss, bp - 6) == 0x0018)
        goto loc_f473;
    goto loc_f3be;
loc_f473: // 070d:83a3
    memoryASet(ds, 0x69e0, 0x01);
    memoryASet16(ds, 0x69e2, 0x0013);
    memoryASet(ds, 0x69b4, 0x01);
    if (memoryAGet(ds, 0x6ecb) == 0x01)
        goto loc_f491;
    if (memoryAGet16(ds, 0x3500) != 0x0001)
        goto loc_f499;
loc_f491: // 070d:83c1
    memoryASet16(ds, 0x3500, 0x0009);
    goto loc_f49f;
loc_f499: // 070d:83c9
    memoryASet16(ds, 0x3500, 0x000a);
loc_f49f: // 070d:83cf
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec1, 0x00);
loc_f4b8: // 070d:83e8
    goto loc_f7a9;
loc_f4bb: // 070d:83eb
    if (ax != 0x0139)
        goto loc_f538;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x00fa) >= 0x10000;
    ax += 0x00fa;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs);
    sub_74c0();
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x69a4, 0x0004);
    memoryASet16(ds, 0x69a6, 0x00d8);
    goto loc_f7a9;
loc_f538: // 070d:8468
    if ((short)ax < (short)0x0143)
        goto loc_f5b4;
    if ((short)ax > (short)0x0145)
        goto loc_f5b4;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 461, 0x00);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_f5b4: // 070d:84e4
    if (ax != 0x0142)
        goto loc_f610;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet(ds, 0x6836, 0x02);
    memoryASet16(ds, 0x69a8, 0x01b0);
    goto loc_f7a9;
loc_f610: // 070d:8540
    if (ax != 0x0031)
        goto loc_f665;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x0064) >= 0x10000;
    ax += 0x0064;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    memoryASet16(ds, 0x69a0, memoryAGet16(ds, 0x69a0) + 1);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_f665: // 070d:8595
    if (ax != 0x013a)
        goto loc_f6d1;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    flags.carry = (ax + 0x1388) >= 0x10000;
    ax += 0x1388;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x69a2, memoryAGet16(ds, 0x69a2) + 1);
    if ((short)memoryAGet16(ds, 0x69a2) <= (short)0x0002)
        goto loc_f6c4;
    memoryASet16(ds, 0x69a2, 0x0002);
loc_f6c4: // 070d:85f4
    di = 0x6cdf;
    push(cs);
    push(di);
    push(cs); cs = 0x19e6; sub_2399e(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_f6d1: // 070d:8601
    if (ax != 0x01d2)
        goto loc_f728;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x001a;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet(ds, 0x69ad, 0x01);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet16(ds, 0x69aa, 0x00d8);
    di = 0x6cf5;
    push(cs);
    push(di);
    push(cs); cs = 0x19e6; sub_2399e(); assert(cs == 0x070d);
    goto loc_f7a9;
loc_f728: // 070d:8658
    if (ax != 0x01d4)
        goto loc_f76a;
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x001b;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet(ds, 0x69b0, 0x01);
    memoryASet16(ds, 0x69ae, 0x00d8);
    goto loc_f7a9;
loc_f76a: // 070d:869a
    if (ax != 0x0269)
        goto loc_f7a9;
    memoryASet16(ds, 0x6832, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x070d);
    memoryASet16(ds, 0x699e, memoryAGet16(ds, 0x699e) + 1);
loc_f7a9: // 070d:86d9
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_f7af() // 070d:86df +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0x34ee);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x34f0));
    push(cs);
    sub_ddde();
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000e;
    push(ax);
    push(memoryAGet16(ds, 0x34f0));
    push(cs);
    sub_ddde();
    ax = memoryAGet16(ds, 0x34ee);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x000f;
    push(ax);
    push(cs);
    sub_ddde();
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x000e;
    push(ax);
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x000f;
    push(ax);
    push(cs);
    sub_ddde();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_f7f4() // 070d:8724 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_f800() // 0f80:0000 +nearfar +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 2) >= (short)0x0000)
        goto loc_f825;
    goto loc_1097f;
loc_f825: // 0f80:0025
    if ((short)memoryAGet16(ss, bp - 2) <= (short)0x0027)
        goto loc_f82e;
    goto loc_1097f;
loc_f82e: // 0f80:002e
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0000)
        goto loc_f837;
    goto loc_1097f;
loc_f837: // 0f80:0037
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    if (ax != 0x0000)
        goto loc_f883;
    goto loc_fe05;
loc_f883: // 0f80:0083
    if ((short)ax < (short)0x0001)
        goto loc_f8bb;
    if ((short)ax > (short)0x0008)
        goto loc_f8bb;
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax--;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e95d(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_f8bb: // 0f80:00bb
    if ((short)ax < (short)0x0009)
        goto loc_f902;
    if ((short)ax > (short)0x0032)
        goto loc_f902;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_f902: // 0f80:0102
    if (ax != 0x0065)
        goto loc_f91e;
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e95d(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_f91e: // 0f80:011e
    if (ax == 0x0064)
        goto loc_f92d;
    if ((short)ax < (short)0x0066)
        goto loc_f96d;
    if ((short)ax > (short)0x0096)
        goto loc_f96d;
loc_f92d: // 0f80:012d
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x0064;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_f96d: // 0f80:016d
    if (ax != 0x00b3)
        goto loc_f9b2;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_f995;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1183;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_f9af;
loc_f995: // 0f80:0195
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1223;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_f9af: // 0f80:01af
    goto loc_fe05;
loc_f9b2: // 0f80:01b2
    if ((short)ax < (short)0x0097)
        goto loc_f9fc;
    if ((short)ax > (short)0x00c8)
        goto loc_f9fc;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x0096;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_f9fc: // 0f80:01fc
    if ((short)ax < (short)0x00c9)
        goto loc_fa46;
    if ((short)ax > (short)0x00fa)
        goto loc_fa46;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x00c8;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fa46: // 0f80:0246
    if ((short)ax < (short)0x00fb)
        goto loc_fa90;
    if ((short)ax > (short)0x012c)
        goto loc_fa90;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x00fa;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fa90: // 0f80:0290
    if ((short)ax < (short)0x012d)
        goto loc_fada;
    if ((short)ax > (short)0x015e)
        goto loc_fada;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x012c;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fada: // 0f80:02da
    if ((short)ax < (short)0x015f)
        goto loc_fb24;
    if ((short)ax > (short)0x0190)
        goto loc_fb24;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x015e;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fb24: // 0f80:0324
    if ((short)ax < (short)0x0191)
        goto loc_fb6e;
    if ((short)ax > (short)0x01c2)
        goto loc_fb6e;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x0190;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fb6e: // 0f80:036e
    if (ax != 0x01f3)
        goto loc_fbb3;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_fb96;
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1e03;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fbb0;
loc_fb96: // 0f80:0396
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_fbb0: // 0f80:03b0
    goto loc_fe05;
loc_fbb3: // 0f80:03b3
    if ((short)ax < (short)0x01c3)
        goto loc_fbfd;
    if ((short)ax > (short)0x01f4)
        goto loc_fbfd;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x01c2;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fbfd: // 0f80:03fd
    if (ax != 0x0217)
        goto loc_fc42;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_fc25;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0c83;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fc3f;
loc_fc25: // 0f80:0425
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x1543;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_fc3f: // 0f80:043f
    goto loc_fe05;
loc_fc42: // 0f80:0442
    if ((short)ax < (short)0x01f5)
        goto loc_fc8c;
    if ((short)ax > (short)0x0226)
        goto loc_fc8c;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x01f4;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fc8c: // 0f80:048c
    if (ax != 0x0265)
        goto loc_fce1;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_fcbc;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fcde;
loc_fcbc: // 0f80:04bc
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_fcde: // 0f80:04de
    goto loc_fe05;
loc_fce1: // 0f80:04e1
    if ((short)ax < (short)0x0259)
        goto loc_fd2b;
    if ((short)ax > (short)0x028a)
        goto loc_fd2b;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fd2b: // 0f80:052b
    if ((short)ax < (short)0x028b)
        goto loc_fd75;
    if ((short)ax > (short)0x02bc)
        goto loc_fd75;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x028a;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fd75: // 0f80:0575
    if ((short)ax < (short)0x02bd)
        goto loc_fdbe;
    if ((short)ax > (short)0x02ee)
        goto loc_fdbe;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x02bc;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_fe05;
loc_fdbe: // 0f80:05be
    if ((short)ax < (short)0x02ef)
        goto loc_fe05;
    if ((short)ax > (short)0x0320)
        goto loc_fe05;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x02ee;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_fe05: // 0f80:0605
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    if (ax != 0x0000)
        goto loc_fe26;
    goto loc_1030a;
loc_fe26: // 0f80:0626
    if ((short)ax < (short)0x0001)
        goto loc_fe6d;
    if ((short)ax > (short)0x0032)
        goto loc_fe6d;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_fe6d: // 0f80:066d
    if ((short)ax < (short)0x0064)
        goto loc_feb7;
    if ((short)ax > (short)0x0096)
        goto loc_feb7;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x0064;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_feb7: // 0f80:06b7
    if (ax != 0x00b3)
        goto loc_fefc;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_fedf;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1183;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_fef9;
loc_fedf: // 0f80:06df
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1223;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_fef9: // 0f80:06f9
    goto loc_1030a;
loc_fefc: // 0f80:06fc
    if ((short)ax < (short)0x0097)
        goto loc_ff46;
    if ((short)ax > (short)0x00c8)
        goto loc_ff46;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x0096;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_ff46: // 0f80:0746
    if ((short)ax < (short)0x00c9)
        goto loc_ff90;
    if ((short)ax > (short)0x00fa)
        goto loc_ff90;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x00c8;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_ff90: // 0f80:0790
    if ((short)ax < (short)0x00fb)
        goto loc_ffda;
    if ((short)ax > (short)0x012c)
        goto loc_ffda;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x00fa;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_ffda: // 0f80:07da
    if ((short)ax < (short)0x012d)
        goto loc_10024;
    if ((short)ax > (short)0x015e)
        goto loc_10024;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x012c;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_10024: // 0f80:0824
    if ((short)ax < (short)0x015f)
        goto loc_1006e;
    if ((short)ax > (short)0x0190)
        goto loc_1006e;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x015e;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_1006e: // 0f80:086e
    if ((short)ax < (short)0x0191)
        goto loc_100b8;
    if ((short)ax > (short)0x01c2)
        goto loc_100b8;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x0190;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_100b8: // 0f80:08b8
    if (ax != 0x01f3)
        goto loc_100fd;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_100e0;
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1e03;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_100fa;
loc_100e0: // 0f80:08e0
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_100fa: // 0f80:08fa
    goto loc_1030a;
loc_100fd: // 0f80:08fd
    if ((short)ax < (short)0x01c3)
        goto loc_10147;
    if ((short)ax > (short)0x01f4)
        goto loc_10147;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x01c2;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_10147: // 0f80:0947
    if ((short)ax < (short)0x01f5)
        goto loc_10191;
    if ((short)ax > (short)0x0226)
        goto loc_10191;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x01f4;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_10191: // 0f80:0991
    if (ax != 0x0265)
        goto loc_101e6;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_101c1;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_101e3;
loc_101c1: // 0f80:09c1
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_101e3: // 0f80:09e3
    goto loc_1030a;
loc_101e6: // 0f80:09e6
    if ((short)ax < (short)0x0259)
        goto loc_10230;
    if ((short)ax > (short)0x028a)
        goto loc_10230;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_10230: // 0f80:0a30
    if ((short)ax < (short)0x028b)
        goto loc_1027a;
    if ((short)ax > (short)0x02bc)
        goto loc_1027a;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x028a;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_1027a: // 0f80:0a7a
    if ((short)ax < (short)0x02bd)
        goto loc_102c3;
    if ((short)ax > (short)0x02ee)
        goto loc_102c3;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x02bc;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1030a;
loc_102c3: // 0f80:0ac3
    if ((short)ax < (short)0x02ef)
        goto loc_1030a;
    if ((short)ax > (short)0x0320)
        goto loc_1030a;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x02ee;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_1030a: // 0f80:0b0a
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    if (ax != 0x0000)
        goto loc_1032b;
    goto loc_1097f;
loc_1032b: // 0f80:0b2b
    if ((short)ax < (short)0x0001)
        goto loc_10372;
    if ((short)ax > (short)0x0032)
        goto loc_10372;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_10372: // 0f80:0b72
    if ((short)ax < (short)0x0064)
        goto loc_103bc;
    if ((short)ax > (short)0x0096)
        goto loc_103bc;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0064;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_103bc: // 0f80:0bbc
    if (ax != 0x00b3)
        goto loc_10401;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_103e4;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1183;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_103fe;
loc_103e4: // 0f80:0be4
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1223;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_103fe: // 0f80:0bfe
    goto loc_1097f;
loc_10401: // 0f80:0c01
    if ((short)ax < (short)0x0097)
        goto loc_1044b;
    if ((short)ax > (short)0x00c8)
        goto loc_1044b;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0096;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_1044b: // 0f80:0c4b
    if ((short)ax < (short)0x00c9)
        goto loc_10495;
    if ((short)ax > (short)0x00fa)
        goto loc_10495;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x00c8;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_10495: // 0f80:0c95
    if ((short)ax < (short)0x00fb)
        goto loc_104df;
    if ((short)ax > (short)0x012c)
        goto loc_104df;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x00fa;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_104df: // 0f80:0cdf
    if ((short)ax < (short)0x012d)
        goto loc_10529;
    if ((short)ax > (short)0x015e)
        goto loc_10529;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x012c;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_10529: // 0f80:0d29
    if ((short)ax < (short)0x015f)
        goto loc_10573;
    if ((short)ax > (short)0x0190)
        goto loc_10573;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x015e;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_10573: // 0f80:0d73
    if ((short)ax < (short)0x0191)
        goto loc_105bd;
    if ((short)ax > (short)0x01c2)
        goto loc_105bd;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0190;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_105bd: // 0f80:0dbd
    if (ax != 0x01f3)
        goto loc_10602;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_105e5;
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1e03;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_105ff;
loc_105e5: // 0f80:0de5
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_105ff: // 0f80:0dff
    goto loc_1097f;
loc_10602: // 0f80:0e02
    if ((short)ax < (short)0x01c3)
        goto loc_1064c;
    if ((short)ax > (short)0x01f4)
        goto loc_1064c;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x01c2;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_1064c: // 0f80:0e4c
    if ((short)ax < (short)0x01f5)
        goto loc_10696;
    if ((short)ax > (short)0x0226)
        goto loc_10696;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x01f4;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_10696: // 0f80:0e96
    if (ax != 0x0265)
        goto loc_106eb;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_106c6;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_106e8;
loc_106c6: // 0f80:0ec6
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_106e8: // 0f80:0ee8
    goto loc_1097f;
loc_106eb: // 0f80:0eeb
    if ((short)ax < (short)0x0259)
        goto loc_10735;
    if ((short)ax > (short)0x025a)
        goto loc_10735;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_10735: // 0f80:0f35
    if (ax != 0x025b)
        goto loc_10782;
    if (memoryAGet16(ds, 0x6840) != 0x01a0)
        goto loc_1077f;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_1077f: // 0f80:0f7f
    goto loc_1097f;
loc_10782: // 0f80:0f82
    if ((short)ax < (short)0x025c)
        goto loc_107cc;
    if ((short)ax > (short)0x026f)
        goto loc_107cc;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_107cc: // 0f80:0fcc
    if (ax == 0x0270)
        goto loc_107d4;
    goto loc_1085b;
loc_107d4: // 0f80:0fd4
    if (memoryAGet16(ds, 0x6840) != 0x01a0)
        goto loc_1081b;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_10858;
loc_1081b: // 0f80:101b
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0246;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_10858: // 0f80:1058
    goto loc_1097f;
loc_1085b: // 0f80:105b
    if ((short)ax < (short)0x0271)
        goto loc_108a5;
    if ((short)ax > (short)0x028a)
        goto loc_108a5;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_108a5: // 0f80:10a5
    if ((short)ax < (short)0x028b)
        goto loc_108ef;
    if ((short)ax > (short)0x02bc)
        goto loc_108ef;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x028a;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_108ef: // 0f80:10ef
    if ((short)ax < (short)0x02bd)
        goto loc_10938;
    if ((short)ax > (short)0x02ee)
        goto loc_10938;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x02bc;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1097f;
loc_10938: // 0f80:1138
    if ((short)ax < (short)0x02ef)
        goto loc_1097f;
    if ((short)ax > (short)0x0320)
        goto loc_1097f;
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x02ee;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_1097f: // 0f80:117f
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_10985() // 0f80:1185 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 454) != 0x0002)
        goto loc_109df;
    push(memoryAGet16(ds, 0x681a));
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 454, ax);
loc_109df: // 0f80:11df
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 454) != 0x0005)
        goto loc_10a1e;
    ax = memoryAGet16(ds, 0x681a);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 454, ax);
loc_10a1e: // 0f80:121e
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 454) != 0x0006)
        goto loc_10a5f;
    ax = memoryAGet16(ds, 0x681a);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 454, ax);
loc_10a5f: // 0f80:125f
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 454) != 0x0007)
        goto loc_10aa0;
    ax = memoryAGet16(ds, 0x681a);
    ax += 0x0003;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 454, ax);
loc_10aa0: // 0f80:12a0
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 454) != 0x0008)
        goto loc_10adb;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 454, 0x029b);
loc_10adb: // 0f80:12db
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    if ((short)ax < (short)0x0001)
        goto loc_10b47;
    if ((short)ax > (short)0x0032)
        goto loc_10b47;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10b47: // 0f80:1347
    if ((short)ax < (short)0x0064)
        goto loc_10b9b;
    if ((short)ax > (short)0x0096)
        goto loc_10b9b;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x0064;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10b9b: // 0f80:139b
    if (ax != 0x00b3)
        goto loc_10bf0;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_10bcb;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1183;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_10bed;
loc_10bcb: // 0f80:13cb
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1223;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_10bed: // 0f80:13ed
    goto loc_11086;
loc_10bf0: // 0f80:13f0
    if ((short)ax < (short)0x0097)
        goto loc_10c44;
    if ((short)ax > (short)0x00c8)
        goto loc_10c44;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x0096;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10c44: // 0f80:1444
    if ((short)ax < (short)0x00c9)
        goto loc_10c98;
    if ((short)ax > (short)0x00fa)
        goto loc_10c98;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x00c8;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10c98: // 0f80:1498
    if ((short)ax < (short)0x00fb)
        goto loc_10cec;
    if ((short)ax > (short)0x012c)
        goto loc_10cec;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x00fa;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10cec: // 0f80:14ec
    if ((short)ax < (short)0x012d)
        goto loc_10d40;
    if ((short)ax > (short)0x015e)
        goto loc_10d40;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x012c;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10d40: // 0f80:1540
    if ((short)ax < (short)0x015f)
        goto loc_10d94;
    if ((short)ax > (short)0x0190)
        goto loc_10d94;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x015e;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10d94: // 0f80:1594
    if ((short)ax < (short)0x0191)
        goto loc_10de8;
    if ((short)ax > (short)0x01c2)
        goto loc_10de8;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x0190;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10de8: // 0f80:15e8
    if (ax != 0x01f3)
        goto loc_10e3d;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_10e18;
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1e03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_10e3a;
loc_10e18: // 0f80:1618
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_10e3a: // 0f80:163a
    goto loc_11086;
loc_10e3d: // 0f80:163d
    if ((short)ax < (short)0x01c3)
        goto loc_10e91;
    if ((short)ax > (short)0x01f4)
        goto loc_10e91;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x01c2;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10e91: // 0f80:1691
    if ((short)ax < (short)0x01f5)
        goto loc_10ee5;
    if ((short)ax > (short)0x0226)
        goto loc_10ee5;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x01f4;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10ee5: // 0f80:16e5
    if (ax != 0x0265)
        goto loc_10f3a;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_10f15;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_10f37;
loc_10f15: // 0f80:1715
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_10f37: // 0f80:1737
    goto loc_11086;
loc_10f3a: // 0f80:173a
    if ((short)ax < (short)0x0259)
        goto loc_10f8e;
    if ((short)ax > (short)0x028a)
        goto loc_10f8e;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10f8e: // 0f80:178e
    if ((short)ax < (short)0x028b)
        goto loc_10fe2;
    if ((short)ax > (short)0x02bc)
        goto loc_10fe2;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x028a;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_10fe2: // 0f80:17e2
    if ((short)ax < (short)0x02bd)
        goto loc_11035;
    if ((short)ax > (short)0x02ee)
        goto loc_11035;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x02bc;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
    goto loc_11086;
loc_11035: // 0f80:1835
    if ((short)ax < (short)0x02ef)
        goto loc_11086;
    if ((short)ax > (short)0x0320)
        goto loc_11086;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    ax -= 0x02ee;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e58f(); assert(cs == 0x0f80);
loc_11086: // 0f80:1886
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 454);
    if (ax != memoryAGet16(ds, 0x681a))
        goto loc_110c4;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 454, 0x0002);
loc_110c4: // 0f80:18c4
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    dx = memoryAGet16(ds, di + 454);
    ax = memoryAGet16(ds, 0x681a);
    ax++;
    if (ax != dx)
        goto loc_11104;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 454, 0x0005);
loc_11104: // 0f80:1904
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    dx = memoryAGet16(ds, di + 454);
    ax = memoryAGet16(ds, 0x681a);
    ax += 0x0002;
    if (ax != dx)
        goto loc_11146;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 454, 0x0006);
loc_11146: // 0f80:1946
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    dx = memoryAGet16(ds, di + 454);
    ax = memoryAGet16(ds, 0x681a);
    ax += 0x0003;
    if (ax != dx)
        goto loc_11188;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 454, 0x0007);
loc_11188: // 0f80:1988
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 454) != 0x029b)
        goto loc_111c4;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 454, 0x0008);
loc_111c4: // 0f80:19c4
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    if (ax != 0x0000)
        goto loc_111e7;
    goto loc_11777;
loc_111e7: // 0f80:19e7
    if ((short)ax < (short)0x0001)
        goto loc_11238;
    if ((short)ax > (short)0x0032)
        goto loc_11238;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_11238: // 0f80:1a38
    if ((short)ax < (short)0x0064)
        goto loc_1128c;
    if ((short)ax > (short)0x0096)
        goto loc_1128c;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x0064;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_1128c: // 0f80:1a8c
    if (ax != 0x00b3)
        goto loc_112e1;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_112bc;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1183;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_112de;
loc_112bc: // 0f80:1abc
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1223;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_112de: // 0f80:1ade
    goto loc_11777;
loc_112e1: // 0f80:1ae1
    if ((short)ax < (short)0x0097)
        goto loc_11335;
    if ((short)ax > (short)0x00c8)
        goto loc_11335;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x0096;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_11335: // 0f80:1b35
    if ((short)ax < (short)0x00c9)
        goto loc_11389;
    if ((short)ax > (short)0x00fa)
        goto loc_11389;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x00c8;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_11389: // 0f80:1b89
    if ((short)ax < (short)0x00fb)
        goto loc_113dd;
    if ((short)ax > (short)0x012c)
        goto loc_113dd;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x00fa;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_113dd: // 0f80:1bdd
    if ((short)ax < (short)0x012d)
        goto loc_11431;
    if ((short)ax > (short)0x015e)
        goto loc_11431;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x012c;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_11431: // 0f80:1c31
    if ((short)ax < (short)0x015f)
        goto loc_11485;
    if ((short)ax > (short)0x0190)
        goto loc_11485;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x015e;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_11485: // 0f80:1c85
    if ((short)ax < (short)0x0191)
        goto loc_114d9;
    if ((short)ax > (short)0x01c2)
        goto loc_114d9;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x0190;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_114d9: // 0f80:1cd9
    if (ax != 0x01f3)
        goto loc_1152e;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_11509;
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1e03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_1152b;
loc_11509: // 0f80:1d09
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_1152b: // 0f80:1d2b
    goto loc_11777;
loc_1152e: // 0f80:1d2e
    if ((short)ax < (short)0x01c3)
        goto loc_11582;
    if ((short)ax > (short)0x01f4)
        goto loc_11582;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x01c2;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_11582: // 0f80:1d82
    if ((short)ax < (short)0x01f5)
        goto loc_115d6;
    if ((short)ax > (short)0x0226)
        goto loc_115d6;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x01f4;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_115d6: // 0f80:1dd6
    if (ax != 0x0265)
        goto loc_1162b;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_11606;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11628;
loc_11606: // 0f80:1e06
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_11628: // 0f80:1e28
    goto loc_11777;
loc_1162b: // 0f80:1e2b
    if ((short)ax < (short)0x0259)
        goto loc_1167f;
    if ((short)ax > (short)0x028a)
        goto loc_1167f;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_1167f: // 0f80:1e7f
    if ((short)ax < (short)0x028b)
        goto loc_116d3;
    if ((short)ax > (short)0x02bc)
        goto loc_116d3;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x028a;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_116d3: // 0f80:1ed3
    if ((short)ax < (short)0x02bd)
        goto loc_11726;
    if ((short)ax > (short)0x02ee)
        goto loc_11726;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x02bc;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11777;
loc_11726: // 0f80:1f26
    if ((short)ax < (short)0x02ef)
        goto loc_11777;
    if ((short)ax > (short)0x0320)
        goto loc_11777;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 456);
    ax -= 0x02ee;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_11777: // 0f80:1f77
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    if (ax != 0x0000)
        goto loc_1179a;
    goto loc_11d2a;
loc_1179a: // 0f80:1f9a
    if ((short)ax < (short)0x0001)
        goto loc_117eb;
    if ((short)ax > (short)0x0032)
        goto loc_117eb;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_117eb: // 0f80:1feb
    if ((short)ax < (short)0x0064)
        goto loc_1183f;
    if ((short)ax > (short)0x0096)
        goto loc_1183f;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0064;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_1183f: // 0f80:203f
    if (ax != 0x00b3)
        goto loc_11894;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_1186f;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1183;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11891;
loc_1186f: // 0f80:206f
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1223;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_11891: // 0f80:2091
    goto loc_11d2a;
loc_11894: // 0f80:2094
    if ((short)ax < (short)0x0097)
        goto loc_118e8;
    if ((short)ax > (short)0x00c8)
        goto loc_118e8;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0096;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_118e8: // 0f80:20e8
    if ((short)ax < (short)0x00c9)
        goto loc_1193c;
    if ((short)ax > (short)0x00fa)
        goto loc_1193c;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x00c8;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_1193c: // 0f80:213c
    if ((short)ax < (short)0x00fb)
        goto loc_11990;
    if ((short)ax > (short)0x012c)
        goto loc_11990;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x00fa;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_11990: // 0f80:2190
    if ((short)ax < (short)0x012d)
        goto loc_119e4;
    if ((short)ax > (short)0x015e)
        goto loc_119e4;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x012c;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_119e4: // 0f80:21e4
    if ((short)ax < (short)0x015f)
        goto loc_11a38;
    if ((short)ax > (short)0x0190)
        goto loc_11a38;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x015e;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_11a38: // 0f80:2238
    if ((short)ax < (short)0x0191)
        goto loc_11a8c;
    if ((short)ax > (short)0x01c2)
        goto loc_11a8c;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0190;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_11a8c: // 0f80:228c
    if (ax != 0x01f3)
        goto loc_11ae1;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_11abc;
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1e03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11ade;
loc_11abc: // 0f80:22bc
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_11ade: // 0f80:22de
    goto loc_11d2a;
loc_11ae1: // 0f80:22e1
    if ((short)ax < (short)0x01c3)
        goto loc_11b35;
    if ((short)ax > (short)0x01f4)
        goto loc_11b35;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x01c2;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_11b35: // 0f80:2335
    if ((short)ax < (short)0x01f5)
        goto loc_11b89;
    if ((short)ax > (short)0x0226)
        goto loc_11b89;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x01f4;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_11b89: // 0f80:2389
    if (ax != 0x0265)
        goto loc_11bde;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_11bb9;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11bdb;
loc_11bb9: // 0f80:23b9
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_11bdb: // 0f80:23db
    goto loc_11d2a;
loc_11bde: // 0f80:23de
    if ((short)ax < (short)0x0259)
        goto loc_11c32;
    if ((short)ax > (short)0x028a)
        goto loc_11c32;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_11c32: // 0f80:2432
    if ((short)ax < (short)0x028b)
        goto loc_11c86;
    if ((short)ax > (short)0x02bc)
        goto loc_11c86;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x028a;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_11c86: // 0f80:2486
    if ((short)ax < (short)0x02bd)
        goto loc_11cd9;
    if ((short)ax > (short)0x02ee)
        goto loc_11cd9;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x02bc;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11d2a;
loc_11cd9: // 0f80:24d9
    if ((short)ax < (short)0x02ef)
        goto loc_11d2a;
    if ((short)ax > (short)0x0320)
        goto loc_11d2a;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x02ee;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_11d2a: // 0f80:252a
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_11d30() // 0f80:2530 +nearfar +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 2) >= (short)0x0000)
        goto loc_11d55;
    goto loc_12468;
loc_11d55: // 0f80:2555
    if ((short)memoryAGet16(ss, bp - 2) <= (short)0x0027)
        goto loc_11d5e;
    goto loc_12468;
loc_11d5e: // 0f80:255e
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0000)
        goto loc_11d67;
    goto loc_12468;
loc_11d67: // 0f80:2567
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    if (ax != 0x0000)
        goto loc_11d8a;
    goto loc_12468;
loc_11d8a: // 0f80:258a
    if ((short)ax < (short)0x0001)
        goto loc_11ddb;
    if ((short)ax > (short)0x0032)
        goto loc_11ddb;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_11ddb: // 0f80:25db
    if (ax != 0x00b3)
        goto loc_11e30;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_11e0b;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1183;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_11e2d;
loc_11e0b: // 0f80:260b
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1223;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_11e2d: // 0f80:262d
    goto loc_12468;
loc_11e30: // 0f80:2630
    if ((short)ax < (short)0x0064)
        goto loc_11e84;
    if ((short)ax > (short)0x0096)
        goto loc_11e84;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0064;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_11e84: // 0f80:2684
    if ((short)ax < (short)0x0097)
        goto loc_11ed8;
    if ((short)ax > (short)0x00c8)
        goto loc_11ed8;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0096;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_11ed8: // 0f80:26d8
    if ((short)ax < (short)0x00c9)
        goto loc_11f2c;
    if ((short)ax > (short)0x00fa)
        goto loc_11f2c;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x00c8;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_11f2c: // 0f80:272c
    if ((short)ax < (short)0x00fb)
        goto loc_11f80;
    if ((short)ax > (short)0x012c)
        goto loc_11f80;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x00fa;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_11f80: // 0f80:2780
    if ((short)ax < (short)0x012d)
        goto loc_11fd4;
    if ((short)ax > (short)0x015e)
        goto loc_11fd4;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x012c;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_11fd4: // 0f80:27d4
    if ((short)ax < (short)0x015f)
        goto loc_12028;
    if ((short)ax > (short)0x0190)
        goto loc_12028;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x015e;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_12028: // 0f80:2828
    if ((short)ax < (short)0x0191)
        goto loc_1207c;
    if ((short)ax > (short)0x01c2)
        goto loc_1207c;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0190;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_1207c: // 0f80:287c
    if (ax != 0x01f3)
        goto loc_120d1;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_120ac;
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1e03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_120ce;
loc_120ac: // 0f80:28ac
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_120ce: // 0f80:28ce
    goto loc_12468;
loc_120d1: // 0f80:28d1
    if ((short)ax < (short)0x01c3)
        goto loc_12125;
    if ((short)ax > (short)0x01f4)
        goto loc_12125;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x01c2;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_12125: // 0f80:2925
    if (ax != 0x0265)
        goto loc_1217a;
    if (memoryAGet16(ds, 0x6840) != 0x0010)
        goto loc_12155;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12177;
loc_12155: // 0f80:2955
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_12177: // 0f80:2977
    goto loc_12468;
loc_1217a: // 0f80:297a
    if ((short)ax < (short)0x0259)
        goto loc_121ce;
    if ((short)ax > (short)0x025a)
        goto loc_121ce;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_121ce: // 0f80:29ce
    if (ax != 0x025b)
        goto loc_12225;
    if (memoryAGet16(ds, 0x6840) != 0x01a0)
        goto loc_12222;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_12222: // 0f80:2a22
    goto loc_12468;
loc_12225: // 0f80:2a25
    if ((short)ax < (short)0x025c)
        goto loc_12279;
    if ((short)ax > (short)0x026f)
        goto loc_12279;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_12279: // 0f80:2a79
    if (ax == 0x0270)
        goto loc_12281;
    goto loc_1231c;
loc_12281: // 0f80:2a81
    if (memoryAGet16(ds, 0x6840) != 0x01a0)
        goto loc_122d2;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12319;
loc_122d2: // 0f80:2ad2
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0246;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_12319: // 0f80:2b19
    goto loc_12468;
loc_1231c: // 0f80:2b1c
    if ((short)ax < (short)0x0271)
        goto loc_12370;
    if ((short)ax > (short)0x028a)
        goto loc_12370;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x0258;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_12370: // 0f80:2b70
    if ((short)ax < (short)0x028b)
        goto loc_123c4;
    if ((short)ax > (short)0x02bc)
        goto loc_123c4;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x028a;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_123c4: // 0f80:2bc4
    if ((short)ax < (short)0x02bd)
        goto loc_12417;
    if ((short)ax > (short)0x02ee)
        goto loc_12417;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x02bc;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
    goto loc_12468;
loc_12417: // 0f80:2c17
    if ((short)ax < (short)0x02ef)
        goto loc_12468;
    if ((short)ax > (short)0x0320)
        goto loc_12468;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = memoryAGet16(ds, di + 458);
    ax -= 0x02ee;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x6840);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x0f80);
loc_12468: // 0f80:2c68
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_1246e() // 0f80:2c6e +stackDrop18
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ss, bp + 6) == 0x00)
        goto loc_124d7;
    push(memoryAGet16(ss, bp + 12));
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 20);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 458, ax);
    memoryASet16(ds, 0x6840, 0x0010);
    ax = memoryAGet16(ss, bp + 20);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs);
    sub_11d30();
    memoryASet16(ds, 0x6840, 0x01a0);
    ax = memoryAGet16(ss, bp + 20);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs);
    sub_11d30();
    memoryASet16(ds, 0x6840, 0x0010);
    goto loc_1261a;
loc_124d7: // 0f80:2cd7
    push(memoryAGet16(ss, bp + 16));
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 20);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 454, ax);
    push(memoryAGet16(ss, bp + 14));
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 20);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 456, ax);
    push(memoryAGet16(ss, bp + 12));
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 20);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 458, ax);
    al = memoryAGet(ss, bp + 10);
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 20);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet(ds, di + 460, al);
    al = memoryAGet(ss, bp + 8);
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp + 20);
    ax++;
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet(ds, di + 461, al);
    memoryASet16(ds, 0x6840, 0x0010);
    if (memoryAGet16(ss, bp + 18) != 0x0018)
        goto loc_12598;
    ax = memoryAGet16(ss, bp + 20);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs);
    sub_10985();
    goto loc_125ae;
loc_12598: // 0f80:2d98
    ax = memoryAGet16(ss, bp + 20);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs);
    sub_f800();
loc_125ae: // 0f80:2dae
    ax = memoryAGet16(ss, bp + 20);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs);
    sub_11d30();
    memoryASet16(ds, 0x6840, 0x01a0);
    if (memoryAGet16(ss, bp + 18) != 0x0018)
        goto loc_125e8;
    ax = memoryAGet16(ss, bp + 20);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs);
    sub_10985();
    goto loc_125fe;
loc_125e8: // 0f80:2de8
    ax = memoryAGet16(ss, bp + 20);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs);
    sub_f800();
loc_125fe: // 0f80:2dfe
    ax = memoryAGet16(ss, bp + 20);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 18);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs);
    sub_11d30();
    memoryASet16(ds, 0x6840, 0x0010);
loc_1261a: // 0f80:2e1a
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 16;
}
void sub_12688() // 0f80:2e88 +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0106;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2);
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x0f80);
    memoryASet(ds, 0x6842, 0x00);
    memoryASet(ss, bp - 261, 0x00);
    ax = 0;
    memoryASet16(ss, bp - 260, ax);
    memoryASet16(ss, bp - 258, 0x0002);
    goto loc_126bf;
loc_126bb: // 0f80:2ebb
    memoryASet16(ss, bp - 258, memoryAGet16(ss, bp - 258) + 1);
loc_126bf: // 0f80:2ebf
    di = memoryAGet16(ss, bp - 258);
    if (memoryAGet(ds, di + 27065) != 0x01)
        goto loc_126ce;
    memoryASet16(ss, bp - 260, memoryAGet16(ss, bp - 260) + 1);
loc_126ce: // 0f80:2ece
    if (memoryAGet16(ss, bp - 258) != 0x0011)
        goto loc_126bb;
    if (memoryAGet16(ss, bp - 260) != 0x000f)
        goto loc_126e1;
    memoryASet(ds, 0x6842, 0x01);
loc_126e1: // 0f80:2ee1
    if (memoryAGet16(ds, 0x681c) == 0x0001)
        goto loc_126eb;
    goto loc_13253;
loc_126eb: // 0f80:2eeb
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e20;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1271c;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01f5;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_1271c: // 0f80:2f1c
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e22;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1274d;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01f6;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_1274d: // 0f80:2f4d
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e24;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1277e;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01f7;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_1277e: // 0f80:2f7e
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e26;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_127af;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01f8;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_127af: // 0f80:2faf
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e28;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_127e0;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01f9;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_127e0: // 0f80:2fe0
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e2a;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12811;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01fa;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12811: // 0f80:3011
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e2c;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12842;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01fb;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12842: // 0f80:3042
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e2e;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12873;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12873: // 0f80:3073
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e30;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_128a4;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_128a4: // 0f80:30a4
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e32;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_128d5;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0295;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_128d5: // 0f80:30d5
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e34;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12906;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12906: // 0f80:3106
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e36;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12937;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12937: // 0f80:3137
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e38;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_129a0;
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    di = ax;
    if (memoryAGet(ds, di + 27065) == 0x00)
        goto loc_1297d;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0205;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
    goto loc_129a0;
loc_1297d: // 0f80:317d
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0201;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_129a0: // 0f80:31a0
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e3a;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12a0d;
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    di = ax;
    if (memoryAGet(ds, di + 27065) == 0x00)
        goto loc_129e6;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0206;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
    goto loc_12a09;
loc_129e6: // 0f80:31e6
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0202;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12a09: // 0f80:3209
    memoryASet16(ds, 0x6834, memoryAGet16(ds, 0x6834) + 1);
loc_12a0d: // 0f80:320d
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e3c;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12a7a;
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    di = ax;
    if (memoryAGet(ds, di + 27065) == 0x00)
        goto loc_12a53;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0207;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
    goto loc_12a76;
loc_12a53: // 0f80:3253
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0203;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12a76: // 0f80:3276
    memoryASet16(ds, 0x6834, memoryAGet16(ds, 0x6834) + 1);
loc_12a7a: // 0f80:327a
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e3e;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12ae7;
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    di = ax;
    if (memoryAGet(ds, di + 27065) == 0x00)
        goto loc_12ac0;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0208;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
    goto loc_12ae3;
loc_12ac0: // 0f80:32c0
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ds, 0x6834);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0204;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12ae3: // 0f80:32e3
    memoryASet16(ds, 0x6834, memoryAGet16(ds, 0x6834) + 1);
loc_12ae7: // 0f80:32e7
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e40;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12b18;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0205;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12b18: // 0f80:3318
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e42;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12b49;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0206;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12b49: // 0f80:3349
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e44;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12b7a;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0207;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12b7a: // 0f80:337a
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e46;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12bab;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0208;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12bab: // 0f80:33ab
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e48;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12bdc;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0209;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12bdc: // 0f80:33dc
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e4a;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12c0d;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x020a;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12c0d: // 0f80:340d
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e4c;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12c3e;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x020b;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12c3e: // 0f80:343e
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e4e;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12c6f;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x020c;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12c6f: // 0f80:346f
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e50;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12ca0;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x020d;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12ca0: // 0f80:34a0
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e52;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12cd1;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x020e;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12cd1: // 0f80:34d1
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e54;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12d02;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x020f;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12d02: // 0f80:3502
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e56;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12d33;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0210;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12d33: // 0f80:3533
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e58;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12d64;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0211;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12d64: // 0f80:3564
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e5a;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12d95;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0212;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12d95: // 0f80:3595
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e5c;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12dc6;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0213;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12dc6: // 0f80:35c6
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e5e;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12df7;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0214;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12df7: // 0f80:35f7
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e60;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12e28;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0215;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12e28: // 0f80:3628
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e62;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12e59;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0216;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12e59: // 0f80:3659
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e64;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12e8a;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0217;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12e8a: // 0f80:368a
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e66;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12ebb;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0218;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12ebb: // 0f80:36bb
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e68;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12eec;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0219;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12eec: // 0f80:36ec
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e6a;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12f45;
    if (memoryAGet(ds, 0x6842) != 0x00)
        goto loc_12f26;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01fc;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
    goto loc_12f45;
loc_12f26: // 0f80:3726
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12f45: // 0f80:3745
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e6c;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12f77;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x0299;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12f77: // 0f80:3777
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e6e;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12fa9;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x029a;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12fa9: // 0f80:37a9
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e70;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_12fdb;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x029f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_12fdb: // 0f80:37db
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e72;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1300d;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02a0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_1300d: // 0f80:380d
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e74;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1303f;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02a1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_1303f: // 0f80:383f
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e76;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_13071;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02a2;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_13071: // 0f80:3871
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e78;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_130a2;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02ab;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_130a2: // 0f80:38a2
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e7a;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_130d4;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02ac;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_130d4: // 0f80:38d4
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e7c;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_13106;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02ad;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_13106: // 0f80:3906
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e7e;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_13138;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02ae;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_13138: // 0f80:3938
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e80;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1316a;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02b0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_1316a: // 0f80:396a
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e82;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1319c;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02b1;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_1319c: // 0f80:399c
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e84;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_131cd;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02b2;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_131cd: // 0f80:39cd
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e86;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_131ff;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02af;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_131ff: // 0f80:39ff
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x2e86;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_13253;
    push(memoryAGet16(ss, bp + 12));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00b3;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00b7;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1246e();
loc_13253: // 0f80:3a53
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_13291() // 0f80:3a91 +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x0f80);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a59;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_132c1;
    goto loc_134a7;
loc_132c1: // 0f80:3ac1
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0353);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_133fe;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_1340c;
loc_133fe: // 0f80:3bfe
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_1340c: // 0f80:3c0c
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_13439;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_13447;
loc_13439: // 0f80:3c39
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
loc_13447: // 0f80:3c47
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x0003);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x002a);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_134a7: // 0f80:3ca7
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a5b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_134bc;
    goto loc_1364a;
loc_134bc: // 0f80:3cbc
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x015f);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_135af;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_135bd;
loc_135af: // 0f80:3daf
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_135bd: // 0f80:3dbd
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_135ea;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_135f8;
loc_135ea: // 0f80:3dea
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_135f8: // 0f80:3df8
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_1364a: // 0f80:3e4a
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a5d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_1365f;
    goto loc_137df;
loc_1365f: // 0f80:3e5f
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0167);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_13752;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_13760;
loc_13752: // 0f80:3f52
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_13760: // 0f80:3f60
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_1378d;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_1379b;
loc_1378d: // 0f80:3f8d
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_1379b: // 0f80:3f9b
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_137df: // 0f80:3fdf
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a5f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_137f4;
    goto loc_13974;
loc_137f4: // 0f80:3ff4
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x016f);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_138e7;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_138f5;
loc_138e7: // 0f80:40e7
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_138f5: // 0f80:40f5
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_13922;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_13930;
loc_13922: // 0f80:4122
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_13930: // 0f80:4130
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0003);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_13974: // 0f80:4174
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a61;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_13989;
    goto loc_13b21;
loc_13989: // 0f80:4189
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0f03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0f03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0177);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_13a7c;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_13a8a;
loc_13a7c: // 0f80:427c
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_13a8a: // 0f80:428a
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_13ab7;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_13ac5;
loc_13ab7: // 0f80:42b7
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_13ac5: // 0f80:42c5
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    ax = 0x0032;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x0032;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0004);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_13b21: // 0f80:4321
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a63;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_13b36;
    goto loc_13cce;
loc_13b36: // 0f80:4336
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x1403;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x1403;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x017f);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_13c29;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_13c37;
loc_13c29: // 0f80:4429
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_13c37: // 0f80:4437
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_13c64;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_13c72;
loc_13c64: // 0f80:4464
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_13c72: // 0f80:4472
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x001e;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0005);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_13cce: // 0f80:44ce
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a65;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_13ce3;
    goto loc_13ed7;
loc_13ce3: // 0f80:44e3
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0283;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0283;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0321);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_13e24;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_13e32;
loc_13e24: // 0f80:4624
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_13e32: // 0f80:4632
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_13e5f;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_13e6d;
loc_13e5f: // 0f80:465f
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0029);
loc_13e6d: // 0f80:466d
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x001e;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x0003);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x001e);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_13ed7: // 0f80:46d7
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a67;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_13eec;
    goto loc_140ee;
loc_13eec: // 0f80:46ec
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0c83;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0c83;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0331);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_1402d;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_1403b;
loc_1402d: // 0f80:482d
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_1403b: // 0f80:483b
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_14068;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x003d);
    goto loc_14076;
loc_14068: // 0f80:4868
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_14076: // 0f80:4876
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x003c);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x0003);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x003c;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x001f);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_140ee: // 0f80:48ee
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a69;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_14103;
    goto loc_14247;
loc_14103: // 0f80:4903
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0097);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x0003);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0020);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_14247: // 0f80:4a47
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a6b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_1425c;
    goto loc_14450;
loc_1425c: // 0f80:4a5c
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1903;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1903;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1903;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1903;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0345);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_1439d;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_143ab;
loc_1439d: // 0f80:4b9d
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_143ab: // 0f80:4bab
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_143d8;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_143e6;
loc_143d8: // 0f80:4bd8
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_143e6: // 0f80:4be6
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x001e;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x0003);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0021);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_14450: // 0f80:4c50
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a6d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_14465;
    goto loc_14601;
loc_14465: // 0f80:4c65
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0a03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0075);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_14558;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_14566;
loc_14558: // 0f80:4d58
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_14566: // 0f80:4d66
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_14593;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    goto loc_145a1;
loc_14593: // 0f80:4d93
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0015);
loc_145a1: // 0f80:4da1
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x0003);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0022);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_14601: // 0f80:4e01
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a6f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_14616;
    goto loc_14776;
loc_14616: // 0f80:4e16
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x006d);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x0003);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0023);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_14776: // 0f80:4f76
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a71;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_1478b;
    goto loc_148eb;
loc_1478b: // 0f80:4f8b
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0071);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x000a);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x000a);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0024);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_148eb: // 0f80:50eb
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a73;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_14900;
    goto loc_14a9f;
loc_14900: // 0f80:5100
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x1403;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x1403;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0085);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_149f3;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_14a01;
loc_149f3: // 0f80:51f3
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_14a01: // 0f80:5201
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x001e;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x0003);
    ax = 0x0032;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x0064;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0026);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_14a9f: // 0f80:529f
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a75;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_14ab4;
    goto loc_14cb6;
loc_14ab4: // 0f80:52b4
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    ax -= 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0283;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0283;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0065);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_14bf5;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_14c03;
loc_14bf5: // 0f80:53f5
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_14c03: // 0f80:5403
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_14c30;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x00c9);
    goto loc_14c3e;
loc_14c30: // 0f80:5430
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
loc_14c3e: // 0f80:543e
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x003c);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13532, 0x0003);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x003c;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13534, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0027);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_14cb6: // 0f80:54b6
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a77;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_14ccb;
    goto loc_14df1;
loc_14ccb: // 0f80:54cb
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13532, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13534, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0029);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_14df1: // 0f80:55f1
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a79;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_14e06;
    goto loc_14f75;
loc_14e06: // 0f80:5606
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0261);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_14ef9;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_14f07;
loc_14ef9: // 0f80:56f9
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_14f07: // 0f80:5707
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x000b);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0006);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_14f75: // 0f80:5775
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a7b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_14f8a;
    goto loc_150e7;
loc_14f8a: // 0f80:578a
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0x01d0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01d0);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x0037;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x000a);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_150e7: // 0f80:58e7
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a7d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_150fc;
    goto loc_15259;
loc_150fc: // 0f80:58fc
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0x01d1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x08c3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x08c3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01d1);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x0037;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x000b);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_15259: // 0f80:5a59
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a7f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_1526e;
    goto loc_153cb;
loc_1526e: // 0f80:5a6e
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01e7;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1683;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1683;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01e7);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x0037;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x000c);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_153cb: // 0f80:5bcb
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a81;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_153e0;
    goto loc_1553d;
loc_153e0: // 0f80:5be0
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01eb;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1903;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1903;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01eb);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax += 0x0037;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x000d);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_1553d: // 0f80:5d3d
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a83;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_15552;
    goto loc_1573d;
loc_15552: // 0f80:5d52
    push(memoryAGet16(ss, bp + 14));
    ax = memoryAGet16(ss, bp + 12);
    ax -= 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01ac;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp + 14));
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01ab;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x10e3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    ax -= 0x0002;
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x10e3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    ax -= 0x0002;
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x1043;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x1043;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x001e);
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x000f);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_1573d: // 0f80:5f3d
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a85;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_15752;
    goto loc_1593f;
loc_15752: // 0f80:5f52
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01b1;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp + 14);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01b2;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x1403;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0002;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x1403;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    ax -= 0x0002;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x14a3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x14a3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
    ax = memoryAGet16(ss, bp + 14);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x001e);
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0010);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_1593f: // 0f80:613f
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a87;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_15954;
    goto loc_15a65;
loc_15954: // 0f80:6154
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x001e);
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0011);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_15a65: // 0f80:6265
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a89;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_15a7a;
    goto loc_15b8b;
loc_15a7a: // 0f80:627a
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01b3);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13528, 0x001e);
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0012);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_15b8b: // 0f80:638b
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a8b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_15ba0;
    goto loc_15cb5;
loc_15ba0: // 0f80:63a0
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x012e;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0131);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    ax++;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0005);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x002b);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_15cb5: // 0f80:64b5
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a8d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_15cca;
    goto loc_15dd4;
loc_15cca: // 0f80:64ca
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0135);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x002c);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_15dd4: // 0f80:65d4
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3a8f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_15de9;
    goto loc_15ef3;
loc_15de9: // 0f80:65e9
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0103);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp + 14);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 12);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13538, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13530, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x002c);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_15ef3: // 0f80:66f3
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_160a9() // 0f80:68a9 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0232;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2);
    push(es);
    push(di);
    di = bp - 42;
    push(ss);
    push(di);
    ax = 0x002a;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2ee2d(); assert(cs == 0x0f80);
    if (memoryAGet(ss, bp - 42) != 0x2a)
        goto loc_160cc;
    goto loc_16170;
loc_160cc: // 0f80:68cc
    memoryASet(ss, bp - 305, 0x00);
    memoryASet16(ss, bp - 44, 0x0001);
    goto loc_160db;
loc_160d8: // 0f80:68d8
    memoryASet16(ss, bp - 44, memoryAGet16(ss, bp - 44) + 1);
loc_160db: // 0f80:68db
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 44);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 454, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 44);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 456, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 44);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 458, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 44);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 460, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    cl = 0x03;
    ax <<= cl;
    bx = ax;
    ax = memoryAGet16(ss, bp - 44);
    dx = 0x00c8;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 461, 0x00);
    if (memoryAGet16(ss, bp - 44) == 0x0028)
        goto loc_1616e;
    goto loc_160d8;
loc_1616e: // 0f80:696e
    goto loc_16175;
loc_16170: // 0f80:6970
    memoryASet(ss, bp - 305, 0x01);
loc_16175: // 0f80:6975
    ax = 0;
    memoryASet16(ss, bp - 44, ax);
    goto loc_1617f;
loc_1617c: // 0f80:697c
    memoryASet16(ss, bp - 44, memoryAGet16(ss, bp - 44) + 1);
loc_1617f: // 0f80:697f
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    di = bp - 562;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    ax++;
    di = ax;
    al = memoryAGet(ss, bp + di + -43);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x0f80);
    di = bp - 300;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x0f80);
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x66f9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_161ef;
    if (memoryAGet(ss, bp - 305) != 0x00)
        goto loc_161ef;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_161ef: // 0f80:69ef
    if ((short)memoryAGet16(ds, 0x681c) > (short)0x0001)
        goto loc_161f9;
    goto loc_197ec;
loc_161f9: // 0f80:69f9
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x66fb;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1622a;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1622a: // 0f80:6a2a
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x66fd;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1625b;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1625b: // 0f80:6a5b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x66ff;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1628c;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1628c: // 0f80:6a8c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6701;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_162bd;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_162bd: // 0f80:6abd
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6703;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_162ee;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_162ee: // 0f80:6aee
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6705;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1631f;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1631f: // 0f80:6b1f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6707;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16350;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16350: // 0f80:6b50
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6709;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_163a4;
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00b3;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00b7;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_163a4: // 0f80:6ba4
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x670b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_163d6;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x026b;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_163d6: // 0f80:6bd6
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x670d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16408;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00a1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16408: // 0f80:6c08
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x670f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1643a;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00a2;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1643a: // 0f80:6c3a
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6711;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1646c;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x009b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1646c: // 0f80:6c6c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6713;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1649e;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x009e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1649e: // 0f80:6c9e
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6715;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_164f0;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x009c;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x009d;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_164f0: // 0f80:6cf0
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6717;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16522;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00ae;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16522: // 0f80:6d22
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6719;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16576;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00b5;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00b6;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16576: // 0f80:6d76
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x671b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_165ca;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00b9;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00ba;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_165ca: // 0f80:6dca
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x671d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_165fc;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00b2;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_165fc: // 0f80:6dfc
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x671f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1662e;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02dd;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1662e: // 0f80:6e2e
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6721;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16660;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02de;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16660: // 0f80:6e60
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6723;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16692;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02df;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16692: // 0f80:6e92
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6725;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_166c4;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02e1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_166c4: // 0f80:6ec4
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6727;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_166f6;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02e5;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_166f6: // 0f80:6ef6
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6729;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16728;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02e7;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16728: // 0f80:6f28
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x672b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1677c;
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x02e9;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02ed;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1677c: // 0f80:6f7c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x672d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_167ae;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02ea;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_167ae: // 0f80:6fae
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x672f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_167e0;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02ee;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_167e0: // 0f80:6fe0
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6731;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16812;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02a5;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16812: // 0f80:7012
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6733;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16844;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02a6;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16844: // 0f80:7044
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6735;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16898;
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x00fb;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00ff;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16898: // 0f80:7098
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6737;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_168ad;
    goto loc_16935;
loc_168ad: // 0f80:70ad
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x00fc;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x00fd;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x0100;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x0101;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16935: // 0f80:7135
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6739;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16989;
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x00fe;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x0102;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16989: // 0f80:7189
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x673b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_169bb;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x013a;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_169bb: // 0f80:71bb
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x673d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_169ed;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x025e;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_169ed: // 0f80:71ed
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x673f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16a1e;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16a1e: // 0f80:721e
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6741;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16a50;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0xffff;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16a50: // 0f80:7250
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6743;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16a82;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x025f;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16a82: // 0f80:7282
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6745;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16ab4;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x012d;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16ab4: // 0f80:72b4
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6747;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16ae6;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0139;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16ae6: // 0f80:72e6
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6749;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16b18;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x013c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16b18: // 0f80:7318
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x674b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16b4a;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x026a;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16b4a: // 0f80:734a
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x674d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16b7c;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x026c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16b7c: // 0f80:737c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x674f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16bae;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0275;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16bae: // 0f80:73ae
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6751;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16be0;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0276;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16be0: // 0f80:73e0
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6753;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16c12;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0277;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16c12: // 0f80:7412
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6755;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16c44;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0278;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16c44: // 0f80:7444
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6757;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16c76;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01d2;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16c76: // 0f80:7476
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6759;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16ca8;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01d4;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16ca8: // 0f80:74a8
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x675b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16cda;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0270;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16cda: // 0f80:74da
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x675d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16d0c;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0130;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16d0c: // 0f80:750c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x675f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16d60;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x009f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00a0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16d60: // 0f80:7560
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6761;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16db4;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x00a3;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x00a4;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16db4: // 0f80:75b4
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6763;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16e08;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x00a6;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x00a5;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16e08: // 0f80:7608
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6765;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16e3a;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x00a6;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16e3a: // 0f80:763a
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6767;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16e6c;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00af;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16e6c: // 0f80:766c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6769;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16e9e;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00b0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16e9e: // 0f80:769e
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x676b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16ed0;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00b1;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16ed0: // 0f80:76d0
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x676d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16f22;
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x00c2;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00c6;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16f22: // 0f80:7722
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x676f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16f54;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x00c5;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16f54: // 0f80:7754
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6771;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_16f85;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00c1;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_16f85: // 0f80:7785
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6773;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_16f9a;
    goto loc_17024;
loc_16f9a: // 0f80:779a
    ax = memoryAGet16(ss, bp - 44);
    ax -= 0x0003;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00dd;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax -= 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00de;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00df;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00e0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17024: // 0f80:7824
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6775;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1709c;
    ax = memoryAGet16(ss, bp - 44);
    ax -= 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00e5;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00e6;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00e7;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1709c: // 0f80:789c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6777;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_170ce;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01a5;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_170ce: // 0f80:78ce
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6779;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17100;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01a6;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17100: // 0f80:7900
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x677b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17132;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01a7;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17132: // 0f80:7932
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x677d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17164;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01a8;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17164: // 0f80:7964
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x677f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17196;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01a9;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17196: // 0f80:7996
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6781;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_171c8;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01aa;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_171c8: // 0f80:79c8
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6783;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_171fa;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x01a1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_171fa: // 0f80:79fa
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6785;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1722b;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01b9;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1722b: // 0f80:7a2b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6787;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1725d;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x01ba;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1725d: // 0f80:7a5d
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6789;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1728f;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x01bb;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1728f: // 0f80:7a8f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x678b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_172c1;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x01bc;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_172c1: // 0f80:7ac1
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x678d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_172f3;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x01c1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_172f3: // 0f80:7af3
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x678f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17325;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x01a3;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17325: // 0f80:7b25
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6791;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17357;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x01a4;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17357: // 0f80:7b57
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6793;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_1736c;
    goto loc_174dc;
loc_1736c: // 0f80:7b6c
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x1b83;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x1b83;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01bd);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_17460;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_1746e;
loc_17460: // 0f80:7c60
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_1746e: // 0f80:7c6e
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0014);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_174dc: // 0f80:7cdc
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6795;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1750d;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01f4;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1750d: // 0f80:7d0d
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6797;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1753f;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01f3;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1753f: // 0f80:7d3f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6799;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_17554;
    goto loc_176e3;
loc_17554: // 0f80:7d54
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1b83;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    di += 0x1b83;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_1763a;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_17648;
loc_1763a: // 0f80:7e3a
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_17648: // 0f80:7e48
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    if (memoryAGet16(ds, di + 13538) != 0x0001)
        goto loc_17667;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01f1);
    goto loc_17675;
loc_17667: // 0f80:7e67
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x01ef);
loc_17675: // 0f80:7e75
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0015);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_176e3: // 0f80:7ee3
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x679b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17715;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0265;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17715: // 0f80:7f15
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x679d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17747;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x0266;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17747: // 0f80:7f47
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x679f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17779;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0267;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17779: // 0f80:7f79
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67a1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_177ab;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0268;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_177ab: // 0f80:7fab
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67a3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_177dd;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0259;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_177dd: // 0f80:7fdd
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67a5;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1780f;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x025a;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1780f: // 0f80:800f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67a7;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17841;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x025b;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17841: // 0f80:8041
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67a9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17873;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x025c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17873: // 0f80:8073
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67ab;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_178a5;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x025d;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_178a5: // 0f80:80a5
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67ad;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_178d7;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x026d;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_178d7: // 0f80:80d7
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67af;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17909;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x026e;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17909: // 0f80:8109
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67b1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1793b;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x026f;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1793b: // 0f80:813b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67b3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1798f;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01c4;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01c5;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1798f: // 0f80:818f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67b5;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_179a4;
    goto loc_17a28;
loc_179a4: // 0f80:81a4
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x01c7;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x01c8;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01cb;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01cc;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17a28: // 0f80:8228
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67b7;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_17a3d;
    goto loc_17ac1;
loc_17a3d: // 0f80:823d
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x01c9;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x01ca;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01cd;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x01ce;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17ac1: // 0f80:82c1
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67b9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17af3;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01cf;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17af3: // 0f80:82f3
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67bb;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17b2b;
    if ((short)memoryAGet16(ss, bp - 44) <= (short)0x0000)
        goto loc_17b2b;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x01d3;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17b2b: // 0f80:832b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67bd;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17b7f;
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0279;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x027d;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17b7f: // 0f80:837f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67bf;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17bb1;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x027b;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17bb1: // 0f80:83b1
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    di = bp - 300;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_13291();
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67c1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17bf7;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x015d;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17bf7: // 0f80:83f7
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67c3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17c29;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x028b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17c29: // 0f80:8429
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67c5;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17c5a;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x028c;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17c5a: // 0f80:845a
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67c7;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17c8c;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x028d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17c8c: // 0f80:848c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67c9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17cbe;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x028e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17cbe: // 0f80:84be
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67cb;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17cef;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x028f;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17cef: // 0f80:84ef
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67cd;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17d20;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0290;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17d20: // 0f80:8520
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67cf;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17d52;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0292;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17d52: // 0f80:8552
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67d1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17d84;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0293;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17d84: // 0f80:8584
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67d3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17db6;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0294;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17db6: // 0f80:85b6
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67d5;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17de7;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0295;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17de7: // 0f80:85e7
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67d7;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17e19;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0297;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17e19: // 0f80:8619
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67d9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17e4b;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0298;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17e4b: // 0f80:864b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67db;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17e7d;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x0299;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17e7d: // 0f80:867d
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67dd;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17eaf;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x029a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17eaf: // 0f80:86af
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67df;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17ee1;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x029f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17ee1: // 0f80:86e1
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67e1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17f13;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02a0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17f13: // 0f80:8713
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67e3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17f45;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02a1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17f45: // 0f80:8745
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67e5;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17f77;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02a2;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17f77: // 0f80:8777
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67e7;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17fa9;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02ac;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17fa9: // 0f80:87a9
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67e9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_17fdb;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02ad;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_17fdb: // 0f80:87db
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67eb;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1800d;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02ae;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1800d: // 0f80:880d
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67ed;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1803f;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02af;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1803f: // 0f80:883f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67ef;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18071;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02b0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18071: // 0f80:8871
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67f1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_180a3;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02b1;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_180a3: // 0f80:88a3
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67f3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_180d5;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02b3;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_180d5: // 0f80:88d5
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67f5;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18107;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02b4;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18107: // 0f80:8907
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67f7;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18139;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02b5;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18139: // 0f80:8939
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67f9;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1818b;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02b2;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02b6;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1818b: // 0f80:898b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67fb;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_181bc;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02b7;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_181bc: // 0f80:89bc
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67fd;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_181ed;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02ba;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_181ed: // 0f80:89ed
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x67ff;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1821e;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02b8;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1821e: // 0f80:8a1e
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6801;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1824f;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02b9;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1824f: // 0f80:8a4f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6803;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_182a1;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02a7;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02a8;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_182a1: // 0f80:8aa1
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6805;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_182f3;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x013e;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x013f;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_182f3: // 0f80:8af3
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6807;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18325;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x013d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18325: // 0f80:8b25
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6809;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18377;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0143;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0144;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18377: // 0f80:8b77
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x680b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_183a9;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02a9;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_183a9: // 0f80:8ba9
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x680d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_183fb;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02bb;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02bc;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_183fb: // 0f80:8bfb
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x680f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1842d;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x0159;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1842d: // 0f80:8c2d
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6811;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1845f;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x015a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1845f: // 0f80:8c5f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6813;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18491;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x015b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18491: // 0f80:8c91
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6815;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_184c3;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x015c;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_184c3: // 0f80:8cc3
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6817;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_184f4;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02bd;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_184f4: // 0f80:8cf4
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6819;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18525;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02be;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18525: // 0f80:8d25
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x681b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18556;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02bf;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18556: // 0f80:8d56
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x681d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18587;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02c0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18587: // 0f80:8d87
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x681f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_185b8;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02c1;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_185b8: // 0f80:8db8
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6821;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_185e9;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02c2;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_185e9: // 0f80:8de9
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6823;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1861a;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02c3;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1861a: // 0f80:8e1a
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6825;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1864b;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02c4;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1864b: // 0f80:8e4b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6827;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1867c;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02c5;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1867c: // 0f80:8e7c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6829;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_186ae;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02c6;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_186ae: // 0f80:8eae
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x682b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_186e0;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02c7;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_186e0: // 0f80:8ee0
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x682d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18712;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02c8;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18712: // 0f80:8f12
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x682f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18744;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0;
    push(ax);
    ax = 0x02c9;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18744: // 0f80:8f44
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6831;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18776;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02ca;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18776: // 0f80:8f76
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6833;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_187a8;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02cb;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_187a8: // 0f80:8fa8
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6835;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_187da;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02cc;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_187da: // 0f80:8fda
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6837;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_187ef;
    goto loc_18942;
loc_187ef: // 0f80:8fef
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x02cd);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x001a);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_18942: // 0f80:9142
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6839;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_18957;
    goto loc_189db;
loc_18957: // 0f80:9157
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x00bf;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x00c0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00c3;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00c4;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_189db: // 0f80:91db
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x683b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18a0d;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02d1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18a0d: // 0f80:920d
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x683d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18a3f;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02d2;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18a3f: // 0f80:923f
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x683f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18a71;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02d3;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18a71: // 0f80:9271
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6841;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18aa3;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02d5;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18aa3: // 0f80:92a3
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6843;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18ad5;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02d6;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18ad5: // 0f80:92d5
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6845;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18b07;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02d7;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18b07: // 0f80:9307
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6847;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18b39;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02d8;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18b39: // 0f80:9339
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6849;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18b6b;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x02d9;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18b6b: // 0f80:936b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x684b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18b9d;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02da;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18b9d: // 0f80:939d
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x684d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18bce;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00c9;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18bce: // 0f80:93ce
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x684f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18bff;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00ca;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18bff: // 0f80:93ff
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6851;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18c30;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00cb;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18c30: // 0f80:9430
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6853;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18c61;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00cd;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18c61: // 0f80:9461
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6855;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18c92;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00ce;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18c92: // 0f80:9492
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6857;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18cc3;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00cf;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18cc3: // 0f80:94c3
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6859;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18cf4;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02ef;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18cf4: // 0f80:94f4
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x685b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18d26;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02f1;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18d26: // 0f80:9526
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x685d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18d57;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02f3;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18d57: // 0f80:9557
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x685f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18d89;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02f4;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18d89: // 0f80:9589
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6861;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18dbb;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x02f5;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18dbb: // 0f80:95bb
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6863;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18dec;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x02f6;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18dec: // 0f80:95ec
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6865;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18e1e;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02f7;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18e1e: // 0f80:961e
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6867;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18e50;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02f8;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18e50: // 0f80:9650
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6869;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18e82;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02f9;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18e82: // 0f80:9682
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x686b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18eb4;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02fa;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18eb4: // 0f80:96b4
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x686d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18ee6;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02fb;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18ee6: // 0f80:96e6
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x686f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18f18;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02fc;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18f18: // 0f80:9718
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6871;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18f4a;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x02fd;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18f4a: // 0f80:974a
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6873;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18f9c;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00c7;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x00c8;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18f9c: // 0f80:979c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6875;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_18fee;
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x010c;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x010d;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_18fee: // 0f80:97ee
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6877;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19066;
    ax = memoryAGet16(ss, bp - 44);
    ax -= 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x0108;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x0109;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x010a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19066: // 0f80:9866
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6879;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_190ba;
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0107;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x010b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_190ba: // 0f80:98ba
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x687b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_190eb;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0307;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_190eb: // 0f80:98eb
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x687d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1911c;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0308;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1911c: // 0f80:991c
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x687f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1914d;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0309;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1914d: // 0f80:994d
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6881;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1917e;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x030a;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1917e: // 0f80:997e
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6883;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_191af;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x030b;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_191af: // 0f80:99af
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6885;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_191e0;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x030c;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_191e0: // 0f80:99e0
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6887;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19211;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x030d;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19211: // 0f80:9a11
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6889;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19242;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x030e;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19242: // 0f80:9a42
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x688b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19273;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x030f;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19273: // 0f80:9a73
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x688d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_192a4;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0310;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_192a4: // 0f80:9aa4
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x688f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_192d5;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0311;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_192d5: // 0f80:9ad5
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6891;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19306;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0312;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19306: // 0f80:9b06
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6893;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19338;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x0313;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19338: // 0f80:9b38
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6895;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19369;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0314;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19369: // 0f80:9b69
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6897;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_1939b;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x0315;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_1939b: // 0f80:9b9b
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x6899;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_193cd;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x0317;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_193cd: // 0f80:9bcd
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x689b;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_193fe;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0318;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_193fe: // 0f80:9bfe
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x689d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19430;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ds, 0x681a));
    ax = 0x0319;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19430: // 0f80:9c30
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x689f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (!flags.zero)
        goto loc_19462;
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0316;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_19462: // 0f80:9c62
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x68a1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_19477;
    goto loc_194ff;
loc_19477: // 0f80:9c77
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x031b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x031c;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x031f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0x0320;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
loc_194ff: // 0f80:9cff
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x68a3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_19514;
    goto loc_19667;
loc_19514: // 0f80:9d14
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += 0x0f03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += 0x0f03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x02a3);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13542, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x001b);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_19667: // 0f80:9e67
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x68a5;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_1967c;
    goto loc_197ec;
loc_1967c: // 0f80:9e7c
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    memoryASet16(ds, 0x682e, memoryAGet16(ds, 0x682e) + 1);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += 0x0fa3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += 0x0fa3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x02a4);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13520, ax);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13524, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_19770;
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    goto loc_1977e;
loc_19770: // 0f80:9f70
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0xffff);
loc_1977e: // 0f80:9f7e
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0002);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x001c);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x00);
    di = memoryAGet16(ds, 0x682e);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x00);
loc_197ec: // 0f80:9fec
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    di = bp - 300;
    push(ss);
    push(di);
    push(cs);
    sub_12688();
    di = bp - 300;
    push(ss);
    push(di);
    di = 0x68a7;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x0f80);
    if (flags.zero)
        goto loc_19811;
    goto loc_19994;
loc_19811: // 0f80:a011
    push(memoryAGet16(ss, bp - 44));
    push(memoryAGet16(ss, bp + 10));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 305);
    push(ax);
    push(cs);
    sub_1246e();
    ax = memoryAGet16(ss, bp - 44);
    memoryASet16(ss, bp - 302, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 304, ax);
    if (memoryAGet16(ds, 0x6d18) == 0x0000)
        goto loc_19862;
    if (memoryAGet16(ds, 0x681c) != 0x0001)
        goto loc_19862;
    ax = memoryAGet16(ds, 0x6d18);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 44, ax);
    ax = memoryAGet16(ds, 0x6d1a);
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp + 10, ax);
loc_19862: // 0f80:a062
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x01a0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d4e9(); assert(cs == 0x0f80);
    ax = 0;
    memoryASet16(ds, 0x34ec, ax);
    memoryASet16(ds, 0x3500, 0x0009);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x34ee, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x34f0, ax);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x34f2, ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x34f4, ax);
    memoryASet16(ds, 0x3502, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x3504, ax);
    memoryASet16(ds, 0x34f6, 0x0001);
    memoryASet16(ds, 0x3506, 0x0002);
    ax = 0;
    memoryASet16(ds, 0x34f8, ax);
    memoryASet16(ds, 0x3508, 0x0063);
    memoryASet(ds, 0x350a, 0x00);
    memoryASet(ds, 0x350b, 0x00);
    ax = memoryAGet16(ss, bp - 44);
    cx = 0x0004;
    ax <<= cl;
    ax -= 0x00a0;
    memoryASet16(ds, 0x6838, ax);
    if ((short)memoryAGet16(ds, 0x6838) >= (short)0x0000)
        goto loc_19927;
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
loc_19927: // 0f80:a127
    if ((short)memoryAGet16(ds, 0x6838) <= (short)0x0140)
        goto loc_19935;
    memoryASet16(ds, 0x6838, 0x0140);
loc_19935: // 0f80:a135
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    ax <<= cl;
    ax -= 0x0064;
    memoryASet16(ds, 0x683a, ax);
    if ((short)memoryAGet16(ds, 0x683a) >= (short)0x0000)
        goto loc_1994f;
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
loc_1994f: // 0f80:a14f
    if ((short)memoryAGet16(ds, 0x683a) <= (short)0x00b8)
        goto loc_1995d;
    memoryASet16(ds, 0x683a, 0x00b8);
loc_1995d: // 0f80:a15d
    if (memoryAGet16(ds, 0x70c6) != 0x0000)
        goto loc_19976;
    push(memoryAGet16(ds, 0x6838));
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bce9(); assert(cs == 0x0f80);
    goto loc_19986;
loc_19976: // 0f80:a176
    push(memoryAGet16(ds, 0x6838));
    ax = memoryAGet16(ds, 0x683a);
    ax += 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bd3c(); assert(cs == 0x0f80);
loc_19986: // 0f80:a186
    ax = memoryAGet16(ss, bp - 302);
    memoryASet16(ss, bp - 44, ax);
    ax = memoryAGet16(ss, bp - 304);
    memoryASet16(ss, bp + 10, ax);
loc_19994: // 0f80:a194
    if (memoryAGet16(ss, bp - 44) == 0x0027)
        goto loc_1999d;
    goto loc_1617c;
loc_1999d: // 0f80:a19d
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_199ae() // 0f80:a1ae +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x03d6;
    memoryASet16(ds, 0x682e, 0x0001);
    push(cs); cs = 0x2baf; sub_2ea22(); assert(cs == 0x0f80);
    memoryASet16(ds, 0x6832, 0xffff);
    memoryASet16(ss, bp - 2, 0x0002);
    goto loc_199d0;
loc_199cd: // 0f80:a1cd
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_199d0: // 0f80:a1d0
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13516, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13536, 0x0009);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13518, 0xffd7);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13520, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13522, 0xffd7);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13524, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13538, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13540, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13526, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13542, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13528, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13530, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13532, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 13534, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 13544, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x01);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13547, 0x01);
    if (memoryAGet16(ss, bp - 2) == 0x0019)
        goto loc_19ab4;
    goto loc_199cd;
loc_19ab4: // 0f80:a2b4
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_19abe;
loc_19abb: // 0f80:a2bb
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_19abe: // 0f80:a2be
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26702, 0x0007);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26684, 0xffd7);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 26686, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26688, 0xffd7);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 26690, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26704, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 26706, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26692, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26708, 0x0008);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    ax = 0;
    memoryASet16(ds, di + 26694, ax);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet16(ds, di + 26710, 0x0001);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 26712, 0x01);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 26713, 0x00);
    if (memoryAGet16(ss, bp - 2) == 0x000a)
        goto loc_19b6e;
    goto loc_19abb;
loc_19b6e: // 0f80:a36e
    di = memoryAGet16(ss, bp + 6);
    memoryASet(ds, di + 26691, 0x00);
    push(cs); cs = 0x2ebd; sub_2edd7(); assert(cs == 0x0f80);
    if (!ax)
        goto loc_19b7f;
loc_19b7f: // 0f80:a37f
    ax = memoryAGet16(ss, bp + 6);
    if (ax == 0x0001)
        goto loc_19b8a;
    goto loc_19cb6;
loc_19b8a: // 0f80:a38a
    ax = 0;
    memoryASet16(ds, 0x6834, ax);
    di = bp - 130;
    push(ss);
    push(di);
    di = 0xa1a3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x0f80);
    di = bp - 130;
    push(ss);
    push(di);
    ax = 0x002a;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x0f80);
    di = bp - 130;
    push(ss);
    push(di);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x0f80);
    sp += 0x0004;
    di = bp - 172;
    push(ss);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x0f80);
    di = bp - 470;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 172);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x0f80);
    di = bp - 726;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 171);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x0f80);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x0f80);
    di = bp - 982;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 170);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x0f80);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x0f80);
    di = bp - 214;
    push(ss);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x0f80);
    di = bp - 214;
    push(ss);
    push(di);
    di = bp - 2;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f741(); assert(cs == 0x0f80);
    memoryASet16(ds, 0x681a, ax);
    di = bp - 130;
    push(ss);
    push(di);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x0f80);
    sp += 0x0004;
    di = bp - 172;
    push(ss);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x0f80);
    ax = 0x0018;
    push(ax);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs);
    sub_160a9();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_19c68;
loc_19c65: // 0f80:a465
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_19c68: // 0f80:a468
    di = bp - 130;
    push(ss);
    push(di);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x0f80);
    sp += 0x0004;
    di = bp - 172;
    push(ss);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x0f80);
    if (memoryAGet(ss, bp - 172) != 0x2a)
        goto loc_19c95;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_19c95: // 0f80:a495
    push(memoryAGet16(ss, bp - 2));
    di = bp - 172;
    push(ss);
    push(di);
    push(cs);
    sub_160a9();
    if (memoryAGet16(ss, bp - 2) != 0x0017)
        goto loc_19c65;
    di = bp - 130;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x0f80);
    goto loc_19e25;
loc_19cb6: // 0f80:a4b6
    if ((short)ax >= (short)0x0002)
        goto loc_19cbe;
    goto loc_19e25;
loc_19cbe: // 0f80:a4be
    if ((short)ax <= (short)0x0011)
        goto loc_19cc6;
    goto loc_19e25;
loc_19cc6: // 0f80:a4c6
    di = bp - 130;
    push(ss);
    push(di);
    di = 0xa1a3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x0f80);
    di = bp - 130;
    push(ss);
    push(di);
    ax = 0x002a;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x0f80);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    cx = 0x0030;
    imul16(cx);
    memoryASet16(ss, bp - 216, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 216))
        goto loc_19d20;
    memoryASet16(ss, bp - 2, ax);
    goto loc_19d03;
loc_19d00: // 0f80:a500
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_19d03: // 0f80:a503
    di = bp - 130;
    push(ss);
    push(di);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x0f80);
    sp += 0x0004;
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 216))
        goto loc_19d00;
loc_19d20: // 0f80:a520
    di = bp - 130;
    push(ss);
    push(di);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x0f80);
    sp += 0x0004;
    di = bp - 172;
    push(ss);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x0f80);
    di = bp - 470;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 172);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x0f80);
    di = bp - 726;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 171);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x0f80);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x0f80);
    di = bp - 982;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 170);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x0f80);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x0f80);
    di = bp - 214;
    push(ss);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x0f80);
    di = bp - 214;
    push(ss);
    push(di);
    di = bp - 2;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f741(); assert(cs == 0x0f80);
    memoryASet16(ds, 0x681a, ax);
    di = bp - 130;
    push(ss);
    push(di);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x0f80);
    sp += 0x0004;
    di = bp - 172;
    push(ss);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x0f80);
    ax = 0x0018;
    push(ax);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs);
    sub_160a9();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_19dda;
loc_19dd7: // 0f80:a5d7
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_19dda: // 0f80:a5da
    di = bp - 130;
    push(ss);
    push(di);
    di = bp - 172;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x0f80);
    sp += 0x0004;
    di = bp - 172;
    push(ss);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x0f80);
    if (memoryAGet(ss, bp - 172) != 0x2a)
        goto loc_19e07;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_19e07: // 0f80:a607
    push(memoryAGet16(ss, bp - 2));
    di = bp - 172;
    push(ss);
    push(di);
    push(cs);
    sub_160a9();
    if (memoryAGet16(ss, bp - 2) != 0x0017)
        goto loc_19dd7;
    di = bp - 130;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x0f80);
loc_19e25: // 0f80:a625
    ax = 0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2c115(); assert(cs == 0x0f80);
    ax = 0;
    push(ax);
    ax = 0x0050;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2baf; sub_2c2de(); assert(cs == 0x0f80);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x19e6; sub_19f3b(); assert(cs == 0x0f80);
    ax = 0x000d;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x0f80);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_19e58() // 0f80:a658 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19e60() // 19e6:0000 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0060;
    ax = ss;
    memoryASet16(ss, bp - 6, ax);
    ax = bp - 96;
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 22, 0x1b00);
    ax = 0;
    memoryASet16(ss, bp - 20, ax);
    al = 0x10;
    push(ax);
    di = bp - 22;
    push(ss);
    push(di);
    push(cs); cs = 0x2eb3; sub_2eb3b(); assert(cs == 0x19e6);
    if (memoryAGet(ss, bp - 22) != 0x1b)
        goto loc_19e94;
    memoryASet(ss, bp - 32, 0x56);
    goto loc_19ecf;
loc_19e94: // 19e6:0034
    al = 0x11;
    push(ax);
    di = bp - 22;
    push(ss);
    push(di);
    push(cs); cs = 0x2eb3; sub_2eb3b(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 22);
    al &= 0x30;
    ah = 0;
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 24, ax);
    si = 0;
    es = si;
    //{int tmp1 = memoryAGet16(es, 0x0487); int tmp2 = memoryAGet16(es, 0x0487 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    //al = memoryAGet(es, di);
    al = 1; //gabo
    memoryASet(ss, bp - 31, al);
    if (memoryAGet(ss, bp - 31) == 0x00)
        goto loc_19ecb;
    memoryASet(ss, bp - 32, 0x45);
    goto loc_19ecf;
loc_19ecb: // 19e6:006b
    memoryASet(ss, bp - 32, 0x55);
loc_19ecf: // 19e6:006f
    al = memoryAGet(ss, bp - 32);
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19edc() // 19e6:007c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x683e) != 0x0000)
        goto loc_19ef4;
    memoryASet16(ds, 0x683e, 0x0001);
    memoryASet16(ds, 0x6840, 0x01a0);
    goto loc_19eff;
loc_19ef4: // 19e6:0094
    ax = 0;
    memoryASet16(ds, 0x683e, ax);
    memoryASet16(ds, 0x6840, 0x0010);
loc_19eff: // 19e6:009f
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19f03() // 19e6:00a3 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x70c6) != 0x0000)
        goto loc_19f20;
    push(memoryAGet16(ds, 0x6838));
    ax = memoryAGet16(ds, 0x6840);
    ax += memoryAGet16(ds, 0x683a);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bce9(); assert(cs == 0x19e6);
    goto loc_19f31;
loc_19f20: // 19e6:00c0
    push(memoryAGet16(ds, 0x6838));
    ax = memoryAGet16(ds, 0x6840);
    ax += memoryAGet16(ds, 0x683a);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bd3c(); assert(cs == 0x19e6);
loc_19f31: // 19e6:00d1
    ax = memoryAGet16(ds, 0x6840);
    memoryASet16(ds, 0x683c, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19f3b() // 19e6:00db +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0003;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0005;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0006;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0007;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0008;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x0009;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x000a;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x000b;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x000c;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x000d;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x000e;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0x000f;
    push(ax);
    ax = 0x0017;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1a092() // 19e6:0232 +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1a0a2;
loc_1a09f: // 19e6:023f
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1a0a2: // 19e6:0242
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp - 2));
    ax = 0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    if (memoryAGet16(ss, bp - 2) != 0x000f)
        goto loc_1a09f;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1a0c1() // 19e6:0261 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0012;
    push(cs); cs = 0x2baf; sub_2ea22(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6838);
    memoryASet16(ds, 0x6832, ax);
    ax = memoryAGet16(ds, 0x6838);
    ax &= 0x0007;
    memoryASet16(ss, bp - 4, ax);
    push(memoryAGet16(ds, 0x699c));
    push(memoryAGet16(ds, 0x699a));
    ax = 0x0006;
    push(ax);
    di = bp - 16;
    push(ss);
    push(di);
    ax = 0x000b;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f6f6(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1a0ff;
loc_1a0fc: // 19e6:029c
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1a0ff: // 19e6:029f
    di = memoryAGet16(ss, bp - 2);
    if (memoryAGet(ss, bp + di + -16) != 0x20)
        goto loc_1a10f;
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ss, bp + di + -16, 0x30);
loc_1a10f: // 19e6:02af
    if (memoryAGet16(ss, bp - 2) != 0x0006)
        goto loc_1a0fc;
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1a11e;
    goto loc_1a371;
loc_1a11e: // 19e6:02be
    al = memoryAGet(ss, bp - 15);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 14);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 13);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = 0x0002;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 12);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = 0x0003;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 11);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = 0x0004;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 10);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = 0x0005;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x01e3;
    push(es);
    push(di);
    ax = 0x000c;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x0193;
    push(es);
    push(di);
    ax = 0x000d;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6858);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000a;
    idiv16(cx);
    ax++;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = 0x000e;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6858);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000a;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    ax++;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = 0x000f;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    if ((short)memoryAGet16(ds, 0x69a4) <= (short)0x0000)
        goto loc_1a29e;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x020b;
    push(es);
    push(di);
    ax = 0x0014;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
loc_1a29e: // 19e6:043e
    if (memoryAGet(ds, 0x69f4) == 0x00)
        goto loc_1a2bc;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x0323;
    push(es);
    push(di);
    ax = 0x0019;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
loc_1a2bc: // 19e6:045c
    if (memoryAGet(ds, 0x69ea) == 0x00)
        goto loc_1a2da;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x02ab;
    push(es);
    push(di);
    ax = 0x001b;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
loc_1a2da: // 19e6:047a
    if (memoryAGet(ds, 0x69eb) == 0x00)
        goto loc_1a2f8;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x02d3;
    push(es);
    push(di);
    ax = 0x001c;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
loc_1a2f8: // 19e6:0498
    if (memoryAGet(ds, 0x69e9) == 0x00)
        goto loc_1a316;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x02fb;
    push(es);
    push(di);
    ax = 0x001d;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
loc_1a316: // 19e6:04b6
    if (memoryAGet(ds, 0x69ec) == 0x00)
        goto loc_1a334;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x034b;
    push(es);
    push(di);
    ax = 0x001e;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
loc_1a334: // 19e6:04d4
    al = memoryAGet(ds, 0x6a40);
    ah = 0;
    memoryASet16(ss, bp - 18, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 18))
        goto loc_1a36e;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1a34c;
loc_1a349: // 19e6:04e9
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1a34c: // 19e6:04ec
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x01bb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0020;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 18))
        goto loc_1a349;
loc_1a36e: // 19e6:050e
    goto loc_1a5fa;
loc_1a371: // 19e6:0511
    al = memoryAGet(ss, bp - 15);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 14);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0008;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 13);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0010;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 12);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0018;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 11);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0020;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 10);
    ah = 0;
    ax -= 0x002f;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0028;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x01e3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0060;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x0193;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0068;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6858);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000a;
    idiv16(cx);
    ax++;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0070;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6858);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000a;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    ax++;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0078;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    if ((short)memoryAGet16(ds, 0x69a4) <= (short)0x0000)
        goto loc_1a50f;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x020b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x00a0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
loc_1a50f: // 19e6:06af
    if (memoryAGet(ds, 0x69f4) == 0x00)
        goto loc_1a530;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x0323;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x00c8;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
loc_1a530: // 19e6:06d0
    if (memoryAGet(ds, 0x69ea) == 0x00)
        goto loc_1a551;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x02ab;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x00d8;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
loc_1a551: // 19e6:06f1
    if (memoryAGet(ds, 0x69eb) == 0x00)
        goto loc_1a572;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x02d3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x00e0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
loc_1a572: // 19e6:0712
    if (memoryAGet(ds, 0x69e9) == 0x00)
        goto loc_1a593;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x02fb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x00e8;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
loc_1a593: // 19e6:0733
    if (memoryAGet(ds, 0x69ec) == 0x00)
        goto loc_1a5b4;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x034b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x00f0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
loc_1a5b4: // 19e6:0754
    al = memoryAGet(ds, 0x6a40);
    ah = 0;
    memoryASet16(ss, bp - 18, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 18))
        goto loc_1a5fa;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1a5cc;
loc_1a5c9: // 19e6:0769
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1a5cc: // 19e6:076c
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    di += 0x01bb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0100;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2baf; sub_2d617(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 18))
        goto loc_1a5c9;
loc_1a5fa: // 19e6:079a
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a5fe() // 19e6:079e +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1a60e;
loc_1a60b: // 19e6:07ab
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1a60e: // 19e6:07ae
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    if (memoryAGet16(ss, bp - 2) != 0x012b)
        goto loc_1a60b;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1a62e;
loc_1a62b: // 19e6:07cb
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1a62e: // 19e6:07ce
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 26617, 0x00);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_1a62b;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a6f2() // 19e6:0892 +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0306;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2);
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x07e0;
    push(cs);
    push(di);
    di = bp - 516;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    al = memoryAGet(ss, bp - 256);
    ah = 0;
    memoryASet16(ss, bp - 518, ax);
    ax = 0x0001;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 518))
        goto loc_1a737;
    goto loc_1b40b;
loc_1a737: // 19e6:08d7
    memoryASet16(ss, bp - 258, ax);
    goto loc_1a741;
loc_1a73d: // 19e6:08dd
    memoryASet16(ss, bp - 258, memoryAGet16(ss, bp - 258) + 1);
loc_1a741: // 19e6:08e1
    di = bp - 774;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 258));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f250(); assert(cs == 0x19e6);
    di = bp - 516;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2bd(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 260, ax);
    di = bp - 774;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 258));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f250(); assert(cs == 0x19e6);
    di = 0x0890;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_1a791;
    goto loc_1b3fe;
loc_1a791: // 19e6:0931
    if ((short)memoryAGet16(ss, bp - 260) < (short)0x005d)
        goto loc_1a7d8;
    if ((short)memoryAGet16(ss, bp - 260) >= (short)0x0076)
        goto loc_1a7d8;
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x005d;
    ax += 0x0015;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e3a); es = memoryAGet16(ds, 0x6e3a + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    goto loc_1b3fe;
loc_1a7d8: // 19e6:0978
    if ((short)memoryAGet16(ss, bp - 260) > (short)0x0048)
        goto loc_1a826;
    ax = memoryAGet16(ss, bp - 260);
    if ((short)ax < (short)0x0020)
        goto loc_1a823;
    if ((short)ax > (short)0x0048)
        goto loc_1a823;
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x0020;
    ax += 0x000a;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1a823: // 19e6:09c3
    goto loc_1b3fe;
loc_1a826: // 19e6:09c6
    if ((short)memoryAGet16(ss, bp - 260) >= (short)0x0076)
        goto loc_1a830;
    goto loc_1b3cb;
loc_1a830: // 19e6:09d0
    ax = memoryAGet16(ss, bp - 260);
    if (ax != 0x0076)
        goto loc_1a861;
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a861: // 19e6:0a01
    if (ax != 0x0077)
        goto loc_1a88e;
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    di += 0x03c3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a88e: // 19e6:0a2e
    if (ax != 0x0078)
        goto loc_1a8bb;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x08c3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a8bb: // 19e6:0a5b
    if (ax != 0x0079)
        goto loc_1a8e8;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0963;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a8e8: // 19e6:0a88
    if (ax != 0x007a)
        goto loc_1a915;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a915: // 19e6:0ab5
    if (ax != 0x007b)
        goto loc_1a942;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a942: // 19e6:0ae2
    if (ax != 0x007c)
        goto loc_1a96f;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x01e3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a96f: // 19e6:0b0f
    if (ax != 0x007d)
        goto loc_1a99c;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0463;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a99c: // 19e6:0b3c
    if (ax != 0x007e)
        goto loc_1a9c9;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x14a3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a9c9: // 19e6:0b69
    if (ax != 0x007f)
        goto loc_1a9f6;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    di += 0x0c83;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1a9f6: // 19e6:0b96
    if (ax != 0x0080)
        goto loc_1aa23;
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x0c83;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1aa23: // 19e6:0bc3
    if (ax != 0x0081)
        goto loc_1aa50;
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x0dc3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1aa50: // 19e6:0bf0
    if (ax != 0x0082)
        goto loc_1aa7d;
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x0f03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1aa7d: // 19e6:0c1d
    if (ax != 0x0083)
        goto loc_1aaaa;
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x0d23;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1aaaa: // 19e6:0c4a
    if (ax != 0x0084)
        goto loc_1aad7;
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x0e63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1aad7: // 19e6:0c77
    if (ax != 0x0085)
        goto loc_1ab04;
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x0fa3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ab04: // 19e6:0ca4
    if (ax != 0x0086)
        goto loc_1ab31;
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    di += 0x1cc3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ab31: // 19e6:0cd1
    if (ax != 0x0087)
        goto loc_1ab5e;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x01e3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ab5e: // 19e6:0cfe
    if (ax != 0x0088)
        goto loc_1ab8b;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0283;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ab8b: // 19e6:0d2b
    if (ax != 0x0089)
        goto loc_1abb8;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x1403;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1abb8: // 19e6:0d58
    if (ax != 0x008a)
        goto loc_1abe5;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x1683;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1abe5: // 19e6:0d85
    if (ax != 0x008b)
        goto loc_1ac12;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0b43;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ac12: // 19e6:0db2
    if (ax != 0x008c)
        goto loc_1ac3f;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0aa3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ac3f: // 19e6:0ddf
    if (ax != 0x008d)
        goto loc_1ac6c;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x0be3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ac6c: // 19e6:0e0c
    if (ax != 0x008e)
        goto loc_1ac99;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x1183;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ac99: // 19e6:0e39
    if (ax != 0x008f)
        goto loc_1acc6;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x1223;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1acc6: // 19e6:0e66
    if (ax != 0x0090)
        goto loc_1acf3;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x12c3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1acf3: // 19e6:0e93
    if (ax != 0x0091)
        goto loc_1ad20;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x1363;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ad20: // 19e6:0ec0
    if (ax != 0x0092)
        goto loc_1ad4d;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    di += 0x1543;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ad4d: // 19e6:0eed
    if (ax != 0x0093)
        goto loc_1ad7a;
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    di += 0x0f03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ad7a: // 19e6:0f1a
    if (ax != 0x0094)
        goto loc_1ada7;
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ada7: // 19e6:0f47
    if (ax != 0x0095)
        goto loc_1add4;
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += 0x01e3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1add4: // 19e6:0f74
    if (ax != 0x0096)
        goto loc_1ae01;
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += 0x0783;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ae01: // 19e6:0fa1
    if (ax != 0x0097)
        goto loc_1ae2e;
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ae2e: // 19e6:0fce
    if (ax != 0x0098)
        goto loc_1ae5b;
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    di += 0x0963;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ae5b: // 19e6:0ffb
    if (ax != 0x0099)
        goto loc_1ae88;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1ae88: // 19e6:1028
    if (ax != 0x009a)
        goto loc_1aeb5;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x0283;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1aeb5: // 19e6:1055
    if (ax != 0x009b)
        goto loc_1aee2;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1363;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1aee2: // 19e6:1082
    if (ax != 0x009c)
        goto loc_1af0f;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x15e3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1af0f: // 19e6:10af
    if (ax != 0x009d)
        goto loc_1af3c;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    di += 0x1683;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1af3c: // 19e6:10dc
    if (ax != 0x009e)
        goto loc_1af69;
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    di += 0x00a3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1af69: // 19e6:1109
    if (ax != 0x009f)
        goto loc_1af96;
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1af96: // 19e6:1136
    if (ax != 0x00a0)
        goto loc_1afc3;
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1afc3: // 19e6:1163
    if (ax != 0x00a1)
        goto loc_1aff0;
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0503;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1aff0: // 19e6:1190
    if (ax != 0x00a2)
        goto loc_1b01d;
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0aa3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b01d: // 19e6:11bd
    if (ax != 0x00a3)
        goto loc_1b04a;
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x0f03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b04a: // 19e6:11ea
    if (ax != 0x00a4)
        goto loc_1b077;
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    di += 0x15e3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b077: // 19e6:1217
    if (ax != 0x00a5)
        goto loc_1b0a4;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x00a3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b0a4: // 19e6:1244
    if (ax != 0x00a6)
        goto loc_1b0d1;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1223;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b0d1: // 19e6:1271
    if (ax != 0x00a7)
        goto loc_1b0fe;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    di += 0x1403;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b0fe: // 19e6:129e
    if (ax != 0x00a8)
        goto loc_1b12b;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b12b: // 19e6:12cb
    if (ax != 0x00a9)
        goto loc_1b158;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b158: // 19e6:12f8
    if (ax != 0x00aa)
        goto loc_1b185;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b185: // 19e6:1325
    if (ax != 0x00ab)
        goto loc_1b1b2;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b1b2: // 19e6:1352
    if (ax != 0x00ac)
        goto loc_1b1df;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b1df: // 19e6:137f
    if (ax != 0x00ad)
        goto loc_1b20c;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b20c: // 19e6:13ac
    if (ax != 0x00ae)
        goto loc_1b239;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b239: // 19e6:13d9
    if (ax != 0x00af)
        goto loc_1b266;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b266: // 19e6:1406
    if (ax != 0x00b0)
        goto loc_1b293;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b293: // 19e6:1433
    if (ax != 0x00b1)
        goto loc_1b2c0;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b2c0: // 19e6:1460
    if (ax != 0x00b2)
        goto loc_1b2ed;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b2ed: // 19e6:148d
    if (ax != 0x00b3)
        goto loc_1b31a;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b31a: // 19e6:14ba
    if (ax != 0x00b4)
        goto loc_1b347;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b347: // 19e6:14e7
    if (ax != 0x00b5)
        goto loc_1b373;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b373: // 19e6:1513
    if (ax != 0x00b6)
        goto loc_1b39f;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
    goto loc_1b3c9;
loc_1b39f: // 19e6:153f
    if (ax != 0x00b7)
        goto loc_1b3c9;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    di += 0x0823;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bf65(); assert(cs == 0x19e6);
loc_1b3c9: // 19e6:1569
    goto loc_1b3fe;
loc_1b3cb: // 19e6:156b
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x0048;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e3a); es = memoryAGet16(ds, 0x6e3a + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1b3fe: // 19e6:159e
    ax = memoryAGet16(ss, bp - 258);
    if (ax == memoryAGet16(ss, bp - 518))
        goto loc_1b40b;
    goto loc_1a73d;
loc_1b40b: // 19e6:15ab
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_1b461() // 19e6:1601 +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0124;
    memoryASet16(ss, bp - 8, 0x0001);
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    memoryASet16(ss, bp - 6, ax);
    ax = 0;
    memoryASet16(ss, bp - 10, ax);
    ax = 0;
    memoryASet16(ss, bp - 12, ax);
    memoryASet(ss, bp - 33, 0x00);
    memoryASet(ss, bp - 32, 0x00);
    memoryASet16(ds, 0x6828, 0x0001);
    goto loc_1b495;
loc_1b491: // 19e6:1631
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1b495: // 19e6:1635
    if (memoryAGet16(ds, 0x6828) != 0x0001)
        goto loc_1b4b0;
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 10, ax);
loc_1b4b0: // 19e6:1650
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 10))
        goto loc_1b4d9;
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 10, ax);
loc_1b4d9: // 19e6:1679
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    di = 0x15b1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_1b4fe;
    ax = memoryAGet16(ds, 0x6828);
    ax -= 0x0002;
    memoryASet16(ss, bp - 12, ax);
loc_1b4fe: // 19e6:169e
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    memoryASet16(ss, bp - 36, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 36))
        goto loc_1b57e;
    memoryASet16(ds, 0x6826, ax);
    goto loc_1b522;
loc_1b51e: // 19e6:16be
    memoryASet16(ds, 0x6826, memoryAGet16(ds, 0x6826) + 1);
loc_1b522: // 19e6:16c2
    di = bp - 292;
    push(ss);
    push(di);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(memoryAGet16(ds, 0x6826));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f250(); assert(cs == 0x19e6);
    di = 0x15bf;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_1b576;
    di = 0x15bf;
    push(cs);
    push(di);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2bd(); assert(cs == 0x19e6);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, 0x6828);
    ax++;
    memoryASet16(ss, bp - 6, ax);
loc_1b576: // 19e6:1716
    ax = memoryAGet16(ds, 0x6826);
    if (ax != memoryAGet16(ss, bp - 36))
        goto loc_1b51e;
loc_1b57e: // 19e6:171e
    if (memoryAGet16(ds, 0x6828) == 0x0014)
        goto loc_1b588;
    goto loc_1b491;
loc_1b588: // 19e6:1728
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0003);
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x0140;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x6838);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0003;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 12);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x00c8;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x683a);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0002;
    memoryASet16(ss, bp - 16, ax);
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1b5e5;
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 4, ax);
loc_1b5e5: // 19e6:1785
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 6, ax);
    di = 0x67f6;
    push(ds);
    push(di);
    ax = 0x7530;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x67f6); es = memoryAGet16(ds, 0x67f6 + 2);
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0005;
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d285(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0004;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 12);
    ax++;
    memoryASet16(ss, bp - 20, ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 36, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 36))
        goto loc_1b6b3;
    memoryASet16(ds, 0x682a, ax);
    goto loc_1b666;
loc_1b662: // 19e6:1802
    memoryASet16(ds, 0x682a, memoryAGet16(ds, 0x682a) + 1);
loc_1b666: // 19e6:1806
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 38, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 38))
        goto loc_1b6ab;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1b67f;
loc_1b67b: // 19e6:181b
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1b67f: // 19e6:181f
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ds, 0x682a);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 38))
        goto loc_1b67b;
loc_1b6ab: // 19e6:184b
    ax = memoryAGet16(ds, 0x682a);
    if (ax != memoryAGet16(ss, bp - 36))
        goto loc_1b662;
loc_1b6b3: // 19e6:1853
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 36, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 36))
        goto loc_1b713;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1b6eb;
loc_1b6e7: // 19e6:1887
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1b6eb: // 19e6:188b
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 36))
        goto loc_1b6e7;
loc_1b713: // 19e6:18b3
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0053;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 36, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 36))
        goto loc_1b7bf;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1b74c;
loc_1b748: // 19e6:18e8
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1b74c: // 19e6:18ec
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x011b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 36))
        goto loc_1b748;
loc_1b7bf: // 19e6:195f
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 16);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00a3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 36, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 36))
        goto loc_1b847;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1b81f;
loc_1b81b: // 19e6:19bb
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1b81f: // 19e6:19bf
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00f3;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 36))
        goto loc_1b81b;
loc_1b847: // 19e6:19e7
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x007b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    memoryASet16(ss, bp - 36, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 36))
        goto loc_1b8a8;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1b87f;
loc_1b87b: // 19e6:1a1b
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1b87f: // 19e6:1a1f
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 36))
        goto loc_1b87b;
loc_1b8a8: // 19e6:1a48
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 36, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 36))
        goto loc_1b907;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1b8bf;
loc_1b8bb: // 19e6:1a5b
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1b8bf: // 19e6:1a5f
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    di = 0x15b1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1b8ff;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ds, 0x6828);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(cs);
    sub_1a6f2();
loc_1b8ff: // 19e6:1a9f
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 36))
        goto loc_1b8bb;
loc_1b907: // 19e6:1aa7
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
loc_1b91b: // 19e6:1abb
    sync();
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if ((short)memoryAGet16(ds, 0x6824) <= (short)0x0080)
        goto loc_1b91b;
    ax = 0x0011;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x19e6);
loc_1b940: // 19e6:1ae0
    sync();
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6828, ax);
    if (memoryAGet(ss, bp - 32) == 0x00)
        goto loc_1b969;
    goto loc_1ba00;
loc_1b969: // 19e6:1b09
    if ((short)memoryAGet16(ds, 0x6828) >= (short)0x0063)
        goto loc_1b973;
    goto loc_1ba00;
loc_1b973: // 19e6:1b13
    memoryASet(ss, bp - 32, 0x01);
    ax = 0;
    memoryASet16(ss, bp - 30, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    if (ax != 0x0000)
        goto loc_1b9c1;
    ax = memoryAGet16(ss, bp - 18);
    ax -= memoryAGet16(ss, bp - 14);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    memoryASet16(ss, bp - 26, ax);
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    memoryASet16(ss, bp - 28, ax);
    memoryASet(ss, bp - 31, 0x01);
    goto loc_1ba00;
loc_1b9c1: // 19e6:1b61
    if (ax != 0x0001)
        goto loc_1ba00;
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 26, ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 16);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    cx = 0x0008;
    bx = 0;
    push(cs); cs = 0x2ebd; sub_2ee49(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 28, ax);
    memoryASet(ss, bp - 31, 0x00);
loc_1ba00: // 19e6:1ba0
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_1ba09;
    goto loc_1bb28;
loc_1ba09: // 19e6:1ba9
    if ((short)memoryAGet16(ds, 0x682c) > (short)0x0014)
        goto loc_1ba13;
    goto loc_1bb28;
loc_1ba13: // 19e6:1bb3
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 6);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x002d;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e3a); es = memoryAGet16(ds, 0x6e3a + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 6);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
    if ((short)memoryAGet16(ss, bp - 8) <= (short)0x0005)
        goto loc_1ba71;
    memoryASet16(ss, bp - 8, 0x0001);
loc_1ba71: // 19e6:1c11
    if (memoryAGet(ss, bp - 32) != 0x00)
        goto loc_1ba7a;
    goto loc_1bb28;
loc_1ba7a: // 19e6:1c1a
    memoryASet16(ss, bp - 30, memoryAGet16(ss, bp - 30) + 1);
    if ((short)memoryAGet16(ss, bp - 30) <= (short)0x0004)
        goto loc_1bac5;
    memoryASet(ss, bp - 32, 0x00);
    if (memoryAGet(ss, bp - 31) == 0x00)
        goto loc_1baa9;
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 26));
    ax = memoryAGet16(ss, bp - 28);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    goto loc_1bac3;
loc_1baa9: // 19e6:1c49
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 26));
    ax = memoryAGet16(ss, bp - 28);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1bac3: // 19e6:1c63
    goto loc_1bb28;
loc_1bac5: // 19e6:1c65
    if (memoryAGet(ss, bp - 31) == 0x00)
        goto loc_1bae7;
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 26));
    ax = memoryAGet16(ss, bp - 28);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    goto loc_1bb01;
loc_1bae7: // 19e6:1c87
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 26));
    ax = memoryAGet16(ss, bp - 28);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1bb01: // 19e6:1ca1
    ax = memoryAGet16(ss, bp - 30);
    ax += 0x0025;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 26));
    ax = memoryAGet16(ss, bp - 28);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1bb28: // 19e6:1cc8
    if ((short)memoryAGet16(ds, 0x6824) < (short)0x0080)
        goto loc_1bb3b;
    if (memoryAGet16(ds, 0x6824) == 0x00e0)
        goto loc_1bb3b;
    goto loc_1b940;
loc_1bb3b: // 19e6:1cdb
    ax = memoryAGet16(ds, 0x6824);
    memoryASet16(ss, bp - 24, ax);
    if (memoryAGet16(ss, bp - 24) != 0x00e0)
        goto loc_1bb8d;
loc_1bb48: // 19e6:1ce8
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = memoryAGet(ds, 0x6824);
    push(ax);
    di = 0x15c1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f4a4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1bb48;
    al = memoryAGet(ds, 0x6824);
    push(ax);
    di = 0x15e1;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f4a4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1bb82;
    memoryASet16(ds, 0x6824, 0x01f4);
loc_1bb82: // 19e6:1d22
    ax = memoryAGet16(ds, 0x6824);
    ax -= 0x0080;
    memoryASet16(ss, bp - 24, ax);
    goto loc_1bba9;
loc_1bb8d: // 19e6:1d2d
    sync();
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if ((short)memoryAGet16(ds, 0x6824) <= (short)0x0080)
        goto loc_1bb8d;
loc_1bba9: // 19e6:1d49
    if (memoryAGet(ss, bp + 6) != 0x00)
        goto loc_1bbe8;
    memoryASet16(ds, 0x6828, 0x0001);
    goto loc_1bbbb;
loc_1bbb7: // 19e6:1d57
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1bbbb: // 19e6:1d5b
    di = memoryAGet16(ds, 0x6828);
    if (memoryAGet(ds, di + 26617) == 0x00)
        goto loc_1bbdf;
    di = memoryAGet16(ds, 0x6828);
    al = memoryAGet(ds, di + 26617);
    ah = 0;
    if (ax != memoryAGet16(ss, bp - 24))
        goto loc_1bbdf;
    al = memoryAGet(ss, bp - 24);
    memoryASet(ss, bp - 1, al);
    memoryASet(ss, bp - 33, 0x01);
loc_1bbdf: // 19e6:1d7f
    if (memoryAGet16(ds, 0x6828) != 0x0014)
        goto loc_1bbb7;
    goto loc_1bbf2;
loc_1bbe8: // 19e6:1d88
    al = memoryAGet(ss, bp - 24);
    memoryASet(ss, bp - 1, al);
    memoryASet(ss, bp - 33, 0x01);
loc_1bbf2: // 19e6:1d92
    if (memoryAGet(ss, bp - 33) != 0x00)
        goto loc_1bbfb;
    goto loc_1b940;
loc_1bbfb: // 19e6:1d9b
    di = memoryAGet16(ds, 0x67f6); es = memoryAGet16(ds, 0x67f6 + 2);
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d321(); assert(cs == 0x19e6);
    di = 0x67f6;
    push(ds);
    push(di);
    ax = 0x7530;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2ef34(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    memoryASet(ds, 0x6ecc, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1bc8a() // 19e6:1e2a +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0322;
    memoryASet16(ss, bp - 6, 0x0001);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    ax = 0;
    memoryASet16(ss, bp - 8, ax);
    ax = 0;
    memoryASet16(ss, bp - 10, ax);
    memoryASet(ss, bp - 31, 0x00);
    memoryASet(ss, bp - 30, 0x00);
    memoryASet16(ds, 0x6828, 0x0001);
    goto loc_1bcb9;
loc_1bcb5: // 19e6:1e55
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1bcb9: // 19e6:1e59
    if (memoryAGet16(ds, 0x6828) != 0x0001)
        goto loc_1bcd4;
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 8, ax);
loc_1bcd4: // 19e6:1e74
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 8))
        goto loc_1bcfd;
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 8, ax);
loc_1bcfd: // 19e6:1e9d
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    di = 0x1dfa;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_1bd22;
    ax = memoryAGet16(ds, 0x6828);
    ax -= 0x0002;
    memoryASet16(ss, bp - 10, ax);
loc_1bd22: // 19e6:1ec2
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    memoryASet16(ss, bp - 292, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 292))
        goto loc_1bda5;
    memoryASet16(ds, 0x6826, ax);
    goto loc_1bd48;
loc_1bd44: // 19e6:1ee4
    memoryASet16(ds, 0x6826, memoryAGet16(ds, 0x6826) + 1);
loc_1bd48: // 19e6:1ee8
    di = bp - 548;
    push(ss);
    push(di);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(memoryAGet16(ds, 0x6826));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f250(); assert(cs == 0x19e6);
    di = 0x1e08;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_1bd9c;
    di = 0x1e08;
    push(cs);
    push(di);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2bd(); assert(cs == 0x19e6);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, 0x6828);
    ax++;
    memoryASet16(ss, bp - 4, ax);
loc_1bd9c: // 19e6:1f3c
    ax = memoryAGet16(ds, 0x6826);
    if (ax != memoryAGet16(ss, bp - 292))
        goto loc_1bd44;
loc_1bda5: // 19e6:1f45
    if (memoryAGet16(ds, 0x6828) == 0x0014)
        goto loc_1bdaf;
    goto loc_1bcb5;
loc_1bdaf: // 19e6:1f4f
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 0x0003);
    ax = memoryAGet16(ss, bp - 8);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x0140;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x6838);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0003;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x00c8;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x683a);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0002;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 4, ax);
    di = 0x67f6;
    push(ds);
    push(di);
    ax = 0x7530;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x67f6); es = memoryAGet16(ds, 0x67f6 + 2);
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 12));
    ax = memoryAGet16(ss, bp - 14);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ss, bp - 8);
    ax += 0x0005;
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0002;
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d285(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 12);
    ax += memoryAGet16(ss, bp - 8);
    ax += 0x0004;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 10);
    ax++;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 18);
    ax -= memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 292, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 292))
        goto loc_1beda;
    memoryASet16(ds, 0x682a, ax);
    goto loc_1be89;
loc_1be85: // 19e6:2025
    memoryASet16(ds, 0x682a, memoryAGet16(ds, 0x682a) + 1);
loc_1be89: // 19e6:2029
    ax = memoryAGet16(ss, bp - 16);
    ax--;
    memoryASet16(ss, bp - 294, ax);
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 294))
        goto loc_1bed1;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1bea4;
loc_1bea0: // 19e6:2040
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1bea4: // 19e6:2044
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ds, 0x682a);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 294))
        goto loc_1bea0;
loc_1bed1: // 19e6:2071
    ax = memoryAGet16(ds, 0x682a);
    if (ax != memoryAGet16(ss, bp - 292))
        goto loc_1be85;
loc_1beda: // 19e6:207a
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 12));
    ax = memoryAGet16(ss, bp - 14);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 16);
    ax--;
    memoryASet16(ss, bp - 292, ax);
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 292))
        goto loc_1bf3d;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1bf14;
loc_1bf10: // 19e6:20b0
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1bf14: // 19e6:20b4
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 14);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 292))
        goto loc_1bf10;
loc_1bf3d: // 19e6:20dd
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0053;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 14);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 18);
    ax -= memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 292, ax);
    ax = 0x0001;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 292))
        goto loc_1bf72;
    goto loc_1bfef;
loc_1bf72: // 19e6:2112
    memoryASet16(ds, 0x6828, ax);
    goto loc_1bf7b;
loc_1bf77: // 19e6:2117
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1bf7b: // 19e6:211b
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 12));
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x011b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 292))
        goto loc_1bf77;
loc_1bfef: // 19e6:218f
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 18);
    ax -= memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 14);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00a3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 12));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 16);
    ax--;
    memoryASet16(ss, bp - 292, ax);
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 292))
        goto loc_1c07a;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c051;
loc_1c04d: // 19e6:21ed
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c051: // 19e6:21f1
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00f3;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 292))
        goto loc_1c04d;
loc_1c07a: // 19e6:221a
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x007b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    memoryASet16(ss, bp - 292, ax);
    ax = memoryAGet16(ss, bp - 12);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 292))
        goto loc_1c0de;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c0b4;
loc_1c0b0: // 19e6:2250
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c0b4: // 19e6:2254
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 292))
        goto loc_1c0b0;
loc_1c0de: // 19e6:227e
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ss, bp - 292, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 292))
        goto loc_1c140;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c0f7;
loc_1c0f3: // 19e6:2293
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c0f7: // 19e6:2297
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    di = 0x1dfa;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1c137;
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ds, 0x6828);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(cs);
    sub_1a6f2();
loc_1c137: // 19e6:22d7
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 292))
        goto loc_1c0f3;
loc_1c140: // 19e6:22e0
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
loc_1c154: // 19e6:22f4
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = in8(0x60);
    if (al <= 0x80)
        goto loc_1c154;
    memoryASet(ss, bp - 288, 0x00);
    ax = 0;
    memoryASet16(ss, bp - 20, ax);
    memoryASet(ss, bp - 289, 0x5a);
loc_1c17d: // 19e6:231d
    if (memoryAGet(ss, bp - 289) != 0x0d)
        goto loc_1c187;
    goto loc_1c474;
loc_1c187: // 19e6:2327
    push(cs); cs = 0x2b4d; sub_2b7ca(); assert(cs == 0x19e6);
    if (al)
        goto loc_1c193;
    goto loc_1c2a6;
loc_1c193: // 19e6:2333
    push(cs); cs = 0x2b4d; sub_2b7dc(); assert(cs == 0x19e6);
    memoryASet(ss, bp - 289, al);
    al = memoryAGet(ss, bp - 289);
    push(ax);
    di = 0x1e0a;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f4a4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_1c1b0;
    goto loc_1c23f;
loc_1c1b0: // 19e6:2350
    if (memoryAGet(ss, bp - 289) >= 0x20)
        goto loc_1c1ba;
    goto loc_1c23d;
loc_1c1ba: // 19e6:235a
    if (memoryAGet(ss, bp - 289) > 0x7f)
        goto loc_1c23d;
    ax = memoryAGet16(ss, bp - 20);
    if ((short)ax >= (short)memoryAGet16(ss, bp + 6))
        goto loc_1c23d;
    di = bp - 802;
    push(ss);
    push(di);
    di = bp - 288;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = bp - 546;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 289);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x19e6);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = bp - 288;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 1);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    di = bp - 546;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 289);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x19e6);
    push(cs);
    sub_1a6f2();
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1c23d: // 19e6:23dd
    goto loc_1c2a6;
loc_1c23f: // 19e6:23df
    if (memoryAGet(ss, bp - 289) != 0x08)
        goto loc_1c2a6;
    if ((short)memoryAGet16(ss, bp - 20) <= (short)0x0000)
        goto loc_1c2a6;
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    di = bp - 288;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 288);
    ah = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f3a0(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) - 1);
loc_1c2a6: // 19e6:2446
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6828, ax);
    if (memoryAGet(ss, bp - 30) == 0x00)
        goto loc_1c2bb;
    goto loc_1c352;
loc_1c2bb: // 19e6:245b
    if ((short)memoryAGet16(ds, 0x6828) >= (short)0x0063)
        goto loc_1c2c5;
    goto loc_1c352;
loc_1c2c5: // 19e6:2465
    memoryASet(ss, bp - 30, 0x01);
    ax = 0;
    memoryASet16(ss, bp - 28, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    if (ax != 0x0000)
        goto loc_1c313;
    ax = memoryAGet16(ss, bp - 16);
    ax -= memoryAGet16(ss, bp - 12);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 12);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ss, bp - 14);
    cx = 0x0003;
    ax <<= cl;
    memoryASet16(ss, bp - 26, ax);
    memoryASet(ss, bp - 29, 0x01);
    goto loc_1c352;
loc_1c313: // 19e6:24b3
    if (ax != 0x0001)
        goto loc_1c352;
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ss, bp - 18);
    ax -= memoryAGet16(ss, bp - 14);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    cx = 0x0008;
    bx = 0;
    push(cs); cs = 0x2ebd; sub_2ee49(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 26, ax);
    memoryASet(ss, bp - 29, 0x00);
loc_1c352: // 19e6:24f2
    if ((short)memoryAGet16(ds, 0x682c) > (short)0x0014)
        goto loc_1c35c;
    goto loc_1c471;
loc_1c35c: // 19e6:24fc
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x002d;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e3a); es = memoryAGet16(ds, 0x6e3a + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    if ((short)memoryAGet16(ss, bp - 6) <= (short)0x0005)
        goto loc_1c3ba;
    memoryASet16(ss, bp - 6, 0x0001);
loc_1c3ba: // 19e6:255a
    if (memoryAGet(ss, bp - 30) != 0x00)
        goto loc_1c3c3;
    goto loc_1c471;
loc_1c3c3: // 19e6:2563
    memoryASet16(ss, bp - 28, memoryAGet16(ss, bp - 28) + 1);
    if ((short)memoryAGet16(ss, bp - 28) <= (short)0x0004)
        goto loc_1c40e;
    memoryASet(ss, bp - 30, 0x00);
    if (memoryAGet(ss, bp - 29) == 0x00)
        goto loc_1c3f2;
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 26);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    goto loc_1c40c;
loc_1c3f2: // 19e6:2592
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 26);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1c40c: // 19e6:25ac
    goto loc_1c471;
loc_1c40e: // 19e6:25ae
    if (memoryAGet(ss, bp - 29) == 0x00)
        goto loc_1c430;
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 26);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    goto loc_1c44a;
loc_1c430: // 19e6:25d0
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 26);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1c44a: // 19e6:25ea
    ax = memoryAGet16(ss, bp - 28);
    ax += 0x0025;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 26);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1c471: // 19e6:2611
    goto loc_1c17d;
loc_1c474: // 19e6:2614
    di = bp - 288;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x67f6); es = memoryAGet16(ds, 0x67f6 + 2);
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 12));
    ax = memoryAGet16(ss, bp - 14);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d321(); assert(cs == 0x19e6);
    di = 0x67f6;
    push(ds);
    push(di);
    ax = 0x7530;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2ef34(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1c52f() // 19e6:26cf +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0128;
    memoryASet16(ss, bp - 8, 0x0001);
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    memoryASet16(ss, bp - 10, ax);
    ax = 0;
    memoryASet16(ss, bp - 12, ax);
    ax = 0;
    memoryASet16(ss, bp - 14, ax);
    ax = 0;
    memoryASet16(ss, bp - 24, ax);
    memoryASet(ss, bp - 37, 0x00);
    memoryASet(ss, bp - 36, 0x00);
    memoryASet16(ds, 0x6828, 0x0001);
    goto loc_1c568;
loc_1c564: // 19e6:2704
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c568: // 19e6:2708
    if (memoryAGet16(ds, 0x6828) != 0x0001)
        goto loc_1c583;
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 10, ax);
loc_1c583: // 19e6:2723
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 10))
        goto loc_1c5ac;
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 10, ax);
loc_1c5ac: // 19e6:274c
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    di = 0x267f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_1c5d1;
    ax = memoryAGet16(ds, 0x6828);
    ax -= 0x0002;
    memoryASet16(ss, bp - 12, ax);
loc_1c5d1: // 19e6:2771
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    al = memoryAGet(ds, di + 14313);
    ah = 0;
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1c651;
    memoryASet16(ds, 0x6826, ax);
    goto loc_1c5f5;
loc_1c5f1: // 19e6:2791
    memoryASet16(ds, 0x6826, memoryAGet16(ds, 0x6826) + 1);
loc_1c5f5: // 19e6:2795
    di = bp - 296;
    push(ss);
    push(di);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(memoryAGet16(ds, 0x6826));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f250(); assert(cs == 0x19e6);
    di = 0x268d;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_1c649;
    di = 0x268d;
    push(cs);
    push(di);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2bd(); assert(cs == 0x19e6);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, 0x6828);
    ax++;
    memoryASet16(ss, bp - 6, ax);
loc_1c649: // 19e6:27e9
    ax = memoryAGet16(ds, 0x6826);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1c5f1;
loc_1c651: // 19e6:27f1
    if (memoryAGet16(ds, 0x6828) == 0x012b)
        goto loc_1c65c;
    goto loc_1c564;
loc_1c65c: // 19e6:27fc
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 14, ax);
    if ((short)memoryAGet16(ss, bp - 12) <= (short)0x0010)
        goto loc_1c66d;
    memoryASet16(ss, bp - 12, 0x0010);
loc_1c66d: // 19e6:280d
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0003);
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x0140;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x6838);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0003;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 12);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x00c8;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x683a);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0002;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 6, ax);
    di = 0x67f6;
    push(ds);
    push(di);
    ax = 0x7530;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x67f6); es = memoryAGet16(ds, 0x67f6 + 2);
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0005;
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d285(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0004;
    memoryASet16(ss, bp - 20, ax);
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ss, bp - 12);
    ax++;
    memoryASet16(ss, bp - 22, ax);
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1c792;
    memoryASet16(ds, 0x682a, ax);
    goto loc_1c745;
loc_1c741: // 19e6:28e1
    memoryASet16(ds, 0x682a, memoryAGet16(ds, 0x682a) + 1);
loc_1c745: // 19e6:28e5
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 42, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_1c78a;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c75e;
loc_1c75a: // 19e6:28fa
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c75e: // 19e6:28fe
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x682a);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_1c75a;
loc_1c78a: // 19e6:292a
    ax = memoryAGet16(ds, 0x682a);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1c741;
loc_1c792: // 19e6:2932
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1c7f2;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c7ca;
loc_1c7c6: // 19e6:2966
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c7ca: // 19e6:296a
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1c7c6;
loc_1c7f2: // 19e6:2992
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0053;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1c89e;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c82b;
loc_1c827: // 19e6:29c7
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c82b: // 19e6:29cb
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x011b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1c827;
loc_1c89e: // 19e6:2a3e
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ss, bp - 18);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00a3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1c926;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c8fe;
loc_1c8fa: // 19e6:2a9a
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c8fe: // 19e6:2a9e
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00f3;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1c8fa;
loc_1c926: // 19e6:2ac6
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x007b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1c987;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c95e;
loc_1c95a: // 19e6:2afa
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c95e: // 19e6:2afe
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 22);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1c95a;
loc_1c987: // 19e6:2b27
    ax = memoryAGet16(ss, bp - 12);
    ax -= 0x0002;
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1c9e9;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1c9a1;
loc_1c99d: // 19e6:2b3d
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1c9a1: // 19e6:2b41
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    di = 0x267f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1c9e1;
    ax = memoryAGet16(ss, bp - 16);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(cs);
    sub_1a6f2();
loc_1c9e1: // 19e6:2b81
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1c99d;
loc_1c9e9: // 19e6:2b89
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
loc_1c9fd: // 19e6:2b9d
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if ((short)memoryAGet16(ds, 0x6824) <= (short)0x0080)
        goto loc_1c9fd;
loc_1ca19: // 19e6:2bb9
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6828, ax);
    if (memoryAGet(ss, bp - 36) == 0x00)
        goto loc_1ca42;
    goto loc_1cad9;
loc_1ca42: // 19e6:2be2
    if ((short)memoryAGet16(ds, 0x6828) >= (short)0x0063)
        goto loc_1ca4c;
    goto loc_1cad9;
loc_1ca4c: // 19e6:2bec
    memoryASet(ss, bp - 36, 0x01);
    ax = 0;
    memoryASet16(ss, bp - 34, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    if (ax != 0x0000)
        goto loc_1ca9a;
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 16);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    memoryASet16(ss, bp - 30, ax);
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    memoryASet16(ss, bp - 32, ax);
    memoryASet(ss, bp - 35, 0x01);
    goto loc_1cad9;
loc_1ca9a: // 19e6:2c3a
    if (ax != 0x0001)
        goto loc_1cad9;
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 30, ax);
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f550(); assert(cs == 0x19e6);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    cx = 0x0008;
    bx = 0;
    push(cs); cs = 0x2ebd; sub_2ee49(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 32, ax);
    memoryASet(ss, bp - 35, 0x00);
loc_1cad9: // 19e6:2c79
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_1cae2;
    goto loc_1cba8;
loc_1cae2: // 19e6:2c82
    if ((short)memoryAGet16(ds, 0x682c) > (short)0x0014)
        goto loc_1caec;
    goto loc_1cba8;
loc_1caec: // 19e6:2c8c
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
    if (memoryAGet(ss, bp - 36) != 0x00)
        goto loc_1cafa;
    goto loc_1cba8;
loc_1cafa: // 19e6:2c9a
    memoryASet16(ss, bp - 34, memoryAGet16(ss, bp - 34) + 1);
    if ((short)memoryAGet16(ss, bp - 34) <= (short)0x0004)
        goto loc_1cb45;
    memoryASet(ss, bp - 36, 0x00);
    if (memoryAGet(ss, bp - 35) == 0x00)
        goto loc_1cb29;
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 30));
    ax = memoryAGet16(ss, bp - 32);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    goto loc_1cb43;
loc_1cb29: // 19e6:2cc9
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 30));
    ax = memoryAGet16(ss, bp - 32);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1cb43: // 19e6:2ce3
    goto loc_1cba8;
loc_1cb45: // 19e6:2ce5
    if (memoryAGet(ss, bp - 35) == 0x00)
        goto loc_1cb67;
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 30));
    ax = memoryAGet16(ss, bp - 32);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    goto loc_1cb81;
loc_1cb67: // 19e6:2d07
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 30));
    ax = memoryAGet16(ss, bp - 32);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1cb81: // 19e6:2d21
    ax = memoryAGet16(ss, bp - 34);
    ax += 0x0025;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 30));
    ax = memoryAGet16(ss, bp - 32);
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
loc_1cba8: // 19e6:2d48
    if ((short)memoryAGet16(ds, 0x6824) < (short)0x0080)
        goto loc_1cbbb;
    if (memoryAGet16(ds, 0x6824) == 0x00e0)
        goto loc_1cbbb;
    goto loc_1ca19;
loc_1cbbb: // 19e6:2d5b
    ax = memoryAGet16(ds, 0x6824);
    memoryASet16(ss, bp - 28, ax);
    if (memoryAGet16(ss, bp - 28) != 0x00e0)
        goto loc_1cc0d;
loc_1cbc8: // 19e6:2d68
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = memoryAGet(ds, 0x6824);
    push(ax);
    di = 0x268f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f4a4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1cbc8;
    al = memoryAGet(ds, 0x6824);
    push(ax);
    di = 0x26af;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f4a4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1cc02;
    memoryASet16(ds, 0x6824, 0x01f4);
loc_1cc02: // 19e6:2da2
    ax = memoryAGet16(ds, 0x6824);
    ax -= 0x0080;
    memoryASet16(ss, bp - 28, ax);
    goto loc_1cc29;
loc_1cc0d: // 19e6:2dad
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if ((short)memoryAGet16(ds, 0x6824) <= (short)0x0080)
        goto loc_1cc0d;
loc_1cc29: // 19e6:2dc9
    if (memoryAGet16(ss, bp - 28) == 0x0050)
        goto loc_1cc38;
    if (memoryAGet16(ss, bp - 28) == 0x0051)
        goto loc_1cc38;
    goto loc_1cf12;
loc_1cc38: // 19e6:2dd8
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + 0x0011);
    ax = memoryAGet16(ss, bp - 14);
    ax -= 0x0010;
    if ((short)ax >= (short)memoryAGet16(ss, bp - 24))
        goto loc_1cc50;
    ax = memoryAGet16(ss, bp - 14);
    ax -= 0x0010;
    memoryASet16(ss, bp - 24, ax);
loc_1cc50: // 19e6:2df0
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1ccb8;
    memoryASet16(ds, 0x682a, ax);
    goto loc_1cc6b;
loc_1cc67: // 19e6:2e07
    memoryASet16(ds, 0x682a, memoryAGet16(ds, 0x682a) + 1);
loc_1cc6b: // 19e6:2e0b
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 42, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_1ccb0;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1cc84;
loc_1cc80: // 19e6:2e20
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1cc84: // 19e6:2e24
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x682a);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_1cc80;
loc_1ccb0: // 19e6:2e50
    ax = memoryAGet16(ds, 0x682a);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1cc67;
loc_1ccb8: // 19e6:2e58
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1cd18;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1ccf0;
loc_1ccec: // 19e6:2e8c
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1ccf0: // 19e6:2e90
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1ccec;
loc_1cd18: // 19e6:2eb8
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0053;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1cdc4;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1cd51;
loc_1cd4d: // 19e6:2eed
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1cd51: // 19e6:2ef1
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x011b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1cd4d;
loc_1cdc4: // 19e6:2f64
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ss, bp - 18);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00a3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1ce4c;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1ce24;
loc_1ce20: // 19e6:2fc0
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1ce24: // 19e6:2fc4
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00f3;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1ce20;
loc_1ce4c: // 19e6:2fec
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x007b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1cead;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1ce84;
loc_1ce80: // 19e6:3020
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1ce84: // 19e6:3024
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 22);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1ce80;
loc_1cead: // 19e6:304d
    ax = memoryAGet16(ss, bp - 12);
    ax -= 0x0002;
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1cf12;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1cec7;
loc_1cec3: // 19e6:3063
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1cec7: // 19e6:3067
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    di = 0x267f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1cf0a;
    ax = memoryAGet16(ss, bp - 16);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, 0x6828);
    ax += memoryAGet16(ss, bp - 24);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(cs);
    sub_1a6f2();
loc_1cf0a: // 19e6:30aa
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1cec3;
loc_1cf12: // 19e6:30b2
    if (memoryAGet16(ss, bp - 28) == 0x0048)
        goto loc_1cf21;
    if (memoryAGet16(ss, bp - 28) == 0x0049)
        goto loc_1cf21;
    goto loc_1d1f2;
loc_1cf21: // 19e6:30c1
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) - 0x0011);
    if ((short)memoryAGet16(ss, bp - 24) >= (short)0x0000)
        goto loc_1cf30;
    ax = 0;
    memoryASet16(ss, bp - 24, ax);
loc_1cf30: // 19e6:30d0
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1cf98;
    memoryASet16(ds, 0x682a, ax);
    goto loc_1cf4b;
loc_1cf47: // 19e6:30e7
    memoryASet16(ds, 0x682a, memoryAGet16(ds, 0x682a) + 1);
loc_1cf4b: // 19e6:30eb
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 42, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_1cf90;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1cf64;
loc_1cf60: // 19e6:3100
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1cf64: // 19e6:3104
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x682a);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2e628(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_1cf60;
loc_1cf90: // 19e6:3130
    ax = memoryAGet16(ds, 0x682a);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1cf47;
loc_1cf98: // 19e6:3138
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1cff8;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1cfd0;
loc_1cfcc: // 19e6:316c
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1cfd0: // 19e6:3170
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1cfcc;
loc_1cff8: // 19e6:3198
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x0053;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1d0a4;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1d031;
loc_1d02d: // 19e6:31cd
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1d031: // 19e6:31d1
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x011b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1d02d;
loc_1d0a4: // 19e6:3244
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 22);
    ax -= memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ss, bp - 18);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00a3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1d12c;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1d104;
loc_1d100: // 19e6:32a0
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1d104: // 19e6:32a4
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x00f3;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1d100;
loc_1d12c: // 19e6:32cc
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x007b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    memoryASet16(ss, bp - 40, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1d18d;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1d164;
loc_1d160: // 19e6:3300
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1d164: // 19e6:3304
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    di += 0x016b;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x6828));
    ax = memoryAGet16(ss, bp - 22);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2c00f(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1d160;
loc_1d18d: // 19e6:332d
    ax = memoryAGet16(ss, bp - 12);
    ax -= 0x0002;
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 40))
        goto loc_1d1f2;
    memoryASet16(ds, 0x6828, ax);
    goto loc_1d1a7;
loc_1d1a3: // 19e6:3343
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1d1a7: // 19e6:3347
    ax = memoryAGet16(ds, 0x6828);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    di = 0x267f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_1d1ea;
    ax = memoryAGet16(ss, bp - 16);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 18);
    ax += memoryAGet16(ds, 0x6828);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, 0x6828);
    ax += memoryAGet16(ss, bp - 24);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    push(cs);
    sub_1a6f2();
loc_1d1ea: // 19e6:338a
    ax = memoryAGet16(ds, 0x6828);
    if (ax != memoryAGet16(ss, bp - 40))
        goto loc_1d1a3;
loc_1d1f2: // 19e6:3392
    if (memoryAGet(ss, bp + 6) != 0x00)
        goto loc_1d231;
    memoryASet16(ds, 0x6828, 0x0001);
    goto loc_1d204;
loc_1d200: // 19e6:33a0
    memoryASet16(ds, 0x6828, memoryAGet16(ds, 0x6828) + 1);
loc_1d204: // 19e6:33a4
    di = memoryAGet16(ds, 0x6828);
    if (memoryAGet(ds, di + 26617) == 0x00)
        goto loc_1d228;
    di = memoryAGet16(ds, 0x6828);
    al = memoryAGet(ds, di + 26617);
    ah = 0;
    if (ax != memoryAGet16(ss, bp - 28))
        goto loc_1d228;
    al = memoryAGet(ss, bp - 28);
    memoryASet(ss, bp - 1, al);
    memoryASet(ss, bp - 37, 0x01);
loc_1d228: // 19e6:33c8
    if (memoryAGet16(ds, 0x6828) != 0x0014)
        goto loc_1d200;
    goto loc_1d23b;
loc_1d231: // 19e6:33d1
    al = memoryAGet(ss, bp - 28);
    memoryASet(ss, bp - 1, al);
    memoryASet(ss, bp - 37, 0x01);
loc_1d23b: // 19e6:33db
    if (memoryAGet(ss, bp - 37) != 0x00)
        goto loc_1d244;
    goto loc_1ca19;
loc_1d244: // 19e6:33e4
    di = memoryAGet16(ds, 0x67f6); es = memoryAGet16(ds, 0x67f6 + 2);
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 18);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x683c);
    push(ax);
    push(cs); cs = 0x2baf; sub_2d321(); assert(cs == 0x19e6);
    di = 0x67f6;
    push(ds);
    push(di);
    ax = 0x7530;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2ef34(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    memoryASet(ds, 0x6ecc, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1d2ac() // 19e6:344c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0;
    push(ax);
    push(cs);
    sub_1a092();
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x282f; sub_282ff(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x282f; sub_28337(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bcc3(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
    ax = 0;
    memoryASet16(ds, 0x683c, ax);
    ax = 0;
    memoryASet16(ds, 0x6840, ax);
    di = 0x3443;
    push(cs);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x282f; sub_29c05(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_19f3b();
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
loc_1d332: // 19e6:34d2
    push(cs); cs = 0x2b4d; sub_2b7ca(); assert(cs == 0x19e6);
    if (al)
        goto loc_1d343;
    if ((short)memoryAGet16(ds, 0x682c) <= (short)0x02d0)
        goto loc_1d332;
loc_1d343: // 19e6:34e3
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_1a092();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d365() // 19e6:3505 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0;
    push(ax);
    push(cs);
    sub_1a092();
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x282f; sub_282ff(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x282f; sub_28337(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bcc3(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
    ax = 0;
    memoryASet16(ds, 0x683c, ax);
    ax = 0;
    memoryASet16(ds, 0x6840, ax);
    di = 0x34f3;
    push(cs);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x282f; sub_29c05(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00c8;
    push(ax);
    push(cs); cs = 0x2baf; sub_2e9bf(); assert(cs == 0x19e6);
    di = 0x34fc;
    push(cs);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x282f; sub_29c05(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 6, ax);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_19f3b();
    memoryASet16(ss, bp - 2, 0x0001);
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    memoryASet(ss, bp - 7, 0x20);
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
loc_1d40a: // 19e6:35aa
    sync();
    if ((short)memoryAGet16(ds, 0x6824) <= (short)0x0000)
        goto loc_1d41f;
    push(cs);
    sub_231a0();
    memoryASet(ss, bp - 7, al);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    goto loc_1d424;
loc_1d41f: // 19e6:35bf
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
loc_1d424: // 19e6:35c4
    if ((short)memoryAGet16(ds, 0x682c) > (short)0x0090)
        goto loc_1d432;
    if (memoryAGet(ss, bp - 7) == 0x20)
        goto loc_1d40a;
loc_1d432: // 19e6:35d2
    if (memoryAGet(ss, bp - 7) != 0x42)
        goto loc_1d43b;
    goto loc_1d55c;
loc_1d43b: // 19e6:35db
    if (memoryAGet(ss, bp - 7) != 0x52)
        goto loc_1d444;
    goto loc_1d55c;
loc_1d444: // 19e6:35e4
    if (memoryAGet(ss, bp - 7) != 0x51)
        goto loc_1d44d;
    goto loc_1d55c;
loc_1d44d: // 19e6:35ed
    if (memoryAGet(ss, bp - 7) == 0x42)
        goto loc_1d463;
    if (memoryAGet(ss, bp - 7) == 0x52)
        goto loc_1d463;
    if (memoryAGet(ss, bp - 7) == 0x51)
        goto loc_1d463;
    memoryASet(ss, bp - 7, 0x20);
loc_1d463: // 19e6:3603
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_1d490;
    if (memoryAGet16(ds, 0x70c6) != 0x0000)
        goto loc_1d47d;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x2baf; sub_2bce9(); assert(cs == 0x19e6);
    goto loc_1d488;
loc_1d47d: // 19e6:361d
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x2baf; sub_2bd3c(); assert(cs == 0x19e6);
loc_1d488: // 19e6:3628
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0x683c, ax);
    goto loc_1d4c0;
loc_1d490: // 19e6:3630
    if (memoryAGet16(ds, 0x70c6) != 0x0000)
        goto loc_1d4a8;
    ax = 0;
    push(ax);
    ax = 0x00c8;
    ax -= memoryAGet16(ss, bp - 4);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bce9(); assert(cs == 0x19e6);
    goto loc_1d4b7;
loc_1d4a8: // 19e6:3648
    ax = 0;
    push(ax);
    ax = 0x00c8;
    ax -= memoryAGet16(ss, bp - 4);
    push(ax);
    push(cs); cs = 0x2baf; sub_2bd3c(); assert(cs == 0x19e6);
loc_1d4b7: // 19e6:3657
    ax = 0x00c8;
    ax -= memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0x683c, ax);
loc_1d4c0: // 19e6:3660
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    if ((short)memoryAGet16(ss, bp - 4) <= (short)0x00c8)
        goto loc_1d502;
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax = -ax;
    memoryASet16(ss, bp - 2, ax);
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
loc_1d4dc: // 19e6:367c
    if ((short)memoryAGet16(ds, 0x6824) <= (short)0x0000)
        goto loc_1d4f4;
    push(cs);
    sub_231a0();
    memoryASet(ss, bp - 7, al);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
loc_1d4f4: // 19e6:3694
    if ((short)memoryAGet16(ds, 0x682c) > (short)0x01b0)
        goto loc_1d502;
    if (memoryAGet(ss, bp - 7) == 0x20)
        goto loc_1d4dc;
loc_1d502: // 19e6:36a2
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec5, 0x00);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if (memoryAGet16(ds, 0x6824) == 0x0000)
        goto loc_1d547;
    push(cs);
    sub_231a0();
    memoryASet(ss, bp - 7, al);
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
loc_1d547: // 19e6:36e7
    if (memoryAGet(ss, bp - 7) == 0x42)
        goto loc_1d55c;
    if (memoryAGet(ss, bp - 7) == 0x52)
        goto loc_1d55c;
    if (memoryAGet(ss, bp - 7) == 0x51)
        goto loc_1d55c;
    goto loc_1d44d;
loc_1d55c: // 19e6:36fc
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    push(cs);
    sub_1a092();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d572() // 19e6:3712 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0204;
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    if ((short)dx > (short)memoryAGet16(ds, 0x6d04))
        goto loc_1d593;
    if ((short)dx >= (short)memoryAGet16(ds, 0x6d04))
        goto loc_1d58a;
    goto loc_1d6f4;
loc_1d58a: // 19e6:372a
    if (ax > memoryAGet16(ds, 0x6d02))
        goto loc_1d593;
    goto loc_1d6f4;
loc_1d593: // 19e6:3733
    push(cs);
    sub_222ee();
    memoryASet16(ss, bp - 2, 0x000a);
    goto loc_1d5a1;
loc_1d59e: // 19e6:373e
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_1d5a1: // 19e6:3741
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    di <<= 1;
    ax = memoryAGet16(ds, di + 27866); es = memoryAGet16(ds, di + 27866 + 2);
    dx = es;
    if ((short)dx < (short)memoryAGet16(ds, 0x699c))
        goto loc_1d5bc;
    if ((short)dx > (short)memoryAGet16(ds, 0x699c))
        goto loc_1d5c2;
    if (ax >= memoryAGet16(ds, 0x699a))
        goto loc_1d5c2;
loc_1d5bc: // 19e6:375c
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 4, ax);
loc_1d5c2: // 19e6:3762
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_1d59e;
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x000a)
        goto loc_1d639;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    memoryASet16(ss, bp - 262, ax);
    ax = 0x000a;
    if ((short)ax < (short)memoryAGet16(ss, bp - 262))
        goto loc_1d639;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1d5e7;
loc_1d5e4: // 19e6:3784
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_1d5e7: // 19e6:3787
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    di = ax;
    di <<= 1;
    di <<= 1;
    ax = memoryAGet16(ds, di + 27866); es = memoryAGet16(ds, di + 27866 + 2);
    dx = es;
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    di <<= 1;
    memoryASet16(ds, di + 27866, ax);
    memoryASet16(ds, di + 27868, dx);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 262))
        goto loc_1d5e4;
loc_1d639: // 19e6:37d9
    al = memoryAGet(ds, 0x6a44);
    ah = 0;
    if ((short)ax > (short)0x0016)
        goto loc_1d679;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1d64b;
loc_1d648: // 19e6:37e8
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1d64b: // 19e6:37eb
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x6a44;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = 0x3710;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x6a44;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    if (memoryAGet16(ss, bp - 2) != 0x0016)
        goto loc_1d648;
loc_1d679: // 19e6:3819
    push(memoryAGet16(ds, 0x699c));
    push(memoryAGet16(ds, 0x699a));
    ax = 0x0007;
    push(ax);
    di = bp - 260;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f6f6(); assert(cs == 0x19e6);
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x6a44;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = bp - 260;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x6a44;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    di = memoryAGet16(ss, bp - 4);
    di <<= 1;
    di <<= 1;
    memoryASet16(ds, di + 27866, ax);
    memoryASet16(ds, di + 27868, dx);
    di = 0x6a44;
    push(ds);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    push(cs);
    sub_238d1();
loc_1d6f4: // 19e6:3894
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d70e() // 19e6:38ae +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    di = 0x6db2;
    push(ds);
    push(di);
    di = 0x3898;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x19e6);
    di = 0x6da6;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6da6); es = memoryAGet16(ds, 0x6da6 + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d72;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d72); es = memoryAGet16(ds, 0x6d72 + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d76;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d76); es = memoryAGet16(ds, 0x6d76 + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d7e;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d7e); es = memoryAGet16(ds, 0x6d7e + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d82;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d82); es = memoryAGet16(ds, 0x6d82 + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d86;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d86); es = memoryAGet16(ds, 0x6d86 + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d8a;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d8a); es = memoryAGet16(ds, 0x6d8a + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d8e;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d8e); es = memoryAGet16(ds, 0x6d8e + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d92;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d92); es = memoryAGet16(ds, 0x6d92 + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6da2;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6da2); es = memoryAGet16(ds, 0x6da2 + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d96;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d96); es = memoryAGet16(ds, 0x6d96 + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d9a;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d9a); es = memoryAGet16(ds, 0x6d9a + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d9e;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d9e); es = memoryAGet16(ds, 0x6d9e + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6d7a;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6d7a); es = memoryAGet16(ds, 0x6d7a + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6dae;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6dae); es = memoryAGet16(ds, 0x6dae + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6daa;
    push(ds);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6daa); es = memoryAGet16(ds, 0x6daa + 2);
    push(es);
    push(di);
    ax = 0x1f80;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6db2;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x19e6);
    di = 0x6e3e;
    push(ds);
    push(di);
    di = 0x38a3;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x19e6);
    di = 0x6e3e;
    push(ds);
    push(di);
    ax = 0x0800;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x19e6);
    di = 0x6e36;
    push(ds);
    push(di);
    ax = 0x0800;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6e3e;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6e36); es = memoryAGet16(ds, 0x6e36 + 2);
    push(es);
    push(di);
    ax = 0x0800;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6e3a;
    push(ds);
    push(di);
    ax = 0x0800;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6e3e;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6e3a); es = memoryAGet16(ds, 0x6e3a + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6e3a); es = memoryAGet16(ds, 0x6e3a + 2);
    push(es);
    push(di);
    ax = 0x0800;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6e32;
    push(ds);
    push(di);
    ax = 0x0800;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2eef9(); assert(cs == 0x19e6);
    di = 0x6e3e;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    push(es);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = memoryAGet16(ds, 0x6e32); es = memoryAGet16(ds, 0x6e32 + 2);
    push(es);
    push(di);
    ax = 0x0800;
    push(ax);
    push(cs); cs = 0x2a7d; sub_2b3e4(); assert(cs == 0x19e6);
    di = 0x6e3e;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x19e6);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1daf3() // 19e6:3c93 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1db03;
loc_1db00: // 19e6:3ca0
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1db03: // 19e6:3ca3
    push(memoryAGet16(ss, bp - 2));
    ax = 0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2be42(); assert(cs == 0x19e6);
    if (memoryAGet16(ss, bp - 2) != 0x000f)
        goto loc_1db00;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1db18() // 19e6:3cb8 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0x34ee);
    memoryASet16(ds, 0x6d18, ax);
    ax = memoryAGet16(ds, 0x34f0);
    memoryASet16(ds, 0x6d1a, ax);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    memoryASet16(ds, 0x6d1c, ax);
    memoryASet16(ds, 0x6d1e, dx);
    ax = memoryAGet16(ds, 0x699e);
    memoryASet16(ds, 0x6d20, ax);
    ax = memoryAGet16(ds, 0x6858);
    memoryASet16(ds, 0x6d22, ax);
    ax = memoryAGet16(ds, 0x69a2);
    memoryASet16(ds, 0x6d24, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1db53;
loc_1db50: // 19e6:3cf0
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1db53: // 19e6:3cf3
    di = memoryAGet16(ss, bp - 2);
    al = memoryAGet(ds, di + 26691);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27941, al);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_1db50;
    ax = memoryAGet16(ds, 0x69a4);
    memoryASet16(ds, 0x6d3a, ax);
    ax = memoryAGet16(ds, 0x69a6);
    memoryASet16(ds, 0x6d3c, ax);
    al = memoryAGet(ds, 0x69ad);
    memoryASet(ds, 0x6d3e, al);
    ax = memoryAGet16(ds, 0x69aa);
    memoryASet16(ds, 0x6d3f, ax);
    al = memoryAGet(ds, 0x69ac);
    memoryASet(ds, 0x6d41, al);
    al = memoryAGet(ds, 0x69b0);
    memoryASet(ds, 0x6d42, al);
    ax = memoryAGet16(ds, 0x69ae);
    memoryASet16(ds, 0x6d43, ax);
    ax = memoryAGet16(ds, 0x69b2);
    memoryASet16(ds, 0x6d45, ax);
    ax = memoryAGet16(ds, 0x69b6);
    memoryASet16(ds, 0x6d47, ax);
    ax = memoryAGet16(ds, 0x69b8);
    memoryASet16(ds, 0x6d49, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1dbad;
loc_1dbaa: // 19e6:3d4a
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1dbad: // 19e6:3d4d
    di = memoryAGet16(ss, bp - 2);
    al = memoryAGet(ds, di + 27065);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27978, al);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_1dbaa;
    al = memoryAGet(ds, 0x69dc);
    memoryASet(ds, 0x6d5f, al);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1dbcb() // 19e6:3d6b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0x6d18);
    memoryASet16(ds, 0x34ee, ax);
    ax = memoryAGet16(ds, 0x6d1a);
    memoryASet16(ds, 0x34f0, ax);
    ax = memoryAGet16(ds, 0x6d1c); es = memoryAGet16(ds, 0x6d1c + 2);
    dx = es;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ds, 0x6d20);
    memoryASet16(ds, 0x699e, ax);
    ax = memoryAGet16(ds, 0x6d22);
    memoryASet16(ds, 0x6858, ax);
    ax = memoryAGet16(ds, 0x6d24);
    memoryASet16(ds, 0x69a2, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1dc06;
loc_1dc03: // 19e6:3da3
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1dc06: // 19e6:3da6
    di = memoryAGet16(ss, bp - 2);
    al = memoryAGet(ds, di + 27941);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 26691, al);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_1dc03;
    ax = memoryAGet16(ds, 0x6d3a);
    memoryASet16(ds, 0x69a4, ax);
    ax = memoryAGet16(ds, 0x6d3c);
    memoryASet16(ds, 0x69a6, ax);
    al = memoryAGet(ds, 0x6d3e);
    memoryASet(ds, 0x69ad, al);
    ax = memoryAGet16(ds, 0x6d3f);
    memoryASet16(ds, 0x69aa, ax);
    al = memoryAGet(ds, 0x6d41);
    memoryASet(ds, 0x69ac, al);
    al = memoryAGet(ds, 0x6d42);
    memoryASet(ds, 0x69b0, al);
    ax = memoryAGet16(ds, 0x6d43);
    memoryASet16(ds, 0x69ae, ax);
    ax = memoryAGet16(ds, 0x6d45);
    memoryASet16(ds, 0x69b2, ax);
    ax = memoryAGet16(ds, 0x6d47);
    memoryASet16(ds, 0x69b6, ax);
    ax = memoryAGet16(ds, 0x6d49);
    memoryASet16(ds, 0x69b8, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1dc60;
loc_1dc5d: // 19e6:3dfd
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1dc60: // 19e6:3e00
    di = memoryAGet16(ss, bp - 2);
    al = memoryAGet(ds, di + 27978);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27065, al);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_1dc5d;
    al = memoryAGet(ds, 0x6d5f);
    memoryASet(ds, 0x69dc, al);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1dc89() // 19e6:3e29 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0282;
    ax = memoryAGet16(ds, 0x34ee);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x6d18, ax);
    ax = memoryAGet16(ds, 0x34f0);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0xfff0;
    dx &= 0x0000;
    memoryASet16(ds, 0x6d1a, ax);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    memoryASet16(ds, 0x6d1c, ax);
    memoryASet16(ds, 0x6d1e, dx);
    ax = memoryAGet16(ds, 0x699e);
    memoryASet16(ds, 0x6d20, ax);
    ax = memoryAGet16(ds, 0x6858);
    memoryASet16(ds, 0x6d22, ax);
    ax = memoryAGet16(ds, 0x69a2);
    memoryASet16(ds, 0x6d24, ax);
    memoryASet16(ss, bp - 130, 0x0001);
    goto loc_1dcdd;
loc_1dcd9: // 19e6:3e79
    memoryASet16(ss, bp - 130, memoryAGet16(ss, bp - 130) + 1);
loc_1dcdd: // 19e6:3e7d
    di = memoryAGet16(ss, bp - 130);
    al = memoryAGet(ds, di + 26691);
    di = memoryAGet16(ss, bp - 130);
    memoryASet(ds, di + 27941, al);
    if (memoryAGet16(ss, bp - 130) != 0x0014)
        goto loc_1dcd9;
    ax = memoryAGet16(ds, 0x69a4);
    memoryASet16(ds, 0x6d3a, ax);
    ax = memoryAGet16(ds, 0x69a6);
    memoryASet16(ds, 0x6d3c, ax);
    al = memoryAGet(ds, 0x69ad);
    memoryASet(ds, 0x6d3e, al);
    ax = memoryAGet16(ds, 0x69aa);
    memoryASet16(ds, 0x6d3f, ax);
    al = memoryAGet(ds, 0x69ac);
    memoryASet(ds, 0x6d41, al);
    al = memoryAGet(ds, 0x69b0);
    memoryASet(ds, 0x6d42, al);
    ax = memoryAGet16(ds, 0x69ae);
    memoryASet16(ds, 0x6d43, ax);
    ax = memoryAGet16(ds, 0x69b2);
    memoryASet16(ds, 0x6d45, ax);
    ax = memoryAGet16(ds, 0x69b6);
    memoryASet16(ds, 0x6d47, ax);
    ax = memoryAGet16(ds, 0x69b8);
    memoryASet16(ds, 0x6d49, ax);
    memoryASet16(ss, bp - 130, 0x0001);
    goto loc_1dd3c;
loc_1dd38: // 19e6:3ed8
    memoryASet16(ss, bp - 130, memoryAGet16(ss, bp - 130) + 1);
loc_1dd3c: // 19e6:3edc
    di = memoryAGet16(ss, bp - 130);
    al = memoryAGet(ds, di + 27065);
    di = memoryAGet16(ss, bp - 130);
    memoryASet(ds, di + 27978, al);
    if (memoryAGet16(ss, bp - 130) != 0x0014)
        goto loc_1dd38;
    al = memoryAGet(ds, 0x69dc);
    memoryASet(ds, 0x6d5f, al);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0001;
    push(ax);
    di = bp - 386;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f6f6(); assert(cs == 0x19e6);
    di = bp - 128;
    push(ss);
    push(di);
    di = bp - 642;
    push(ss);
    push(di);
    di = 0x3e1e;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = bp - 386;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x3e24;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x19e6);
    di = bp - 128;
    push(ss);
    push(di);
    ax = 0x0048;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fbb0(); assert(cs == 0x19e6);
    di = bp - 128;
    push(ss);
    push(di);
    di = 0x6d18;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc63(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = bp - 128;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x19e6);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1ddec() // 19e6:3f8c +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0286;
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0001;
    push(ax);
    di = bp - 388;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f6f6(); assert(cs == 0x19e6);
    di = bp - 130;
    push(ss);
    push(di);
    di = bp - 646;
    push(ss);
    push(di);
    di = 0x3f71;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = bp - 388;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x3f77;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    push(cs); cs = 0x2ebd; sub_2fb79(); assert(cs == 0x19e6);
    di = bp - 130;
    push(ss);
    push(di);
    ax = 0x0048;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x19e6);
    push(cs); cs = 0x2ebd; sub_2edd7(); assert(cs == 0x19e6);
    if (!ax)
        goto loc_1de58;
    al = 0x00;
    goto loc_1de5a;
loc_1de58: // 19e6:3ff8
    al = 0x01;
loc_1de5a: // 19e6:3ffa
    memoryASet(ss, bp - 389, al);
    di = bp - 130;
    push(ss);
    push(di);
    ax = 0x0048;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fba7(); assert(cs == 0x19e6);
    push(cs); cs = 0x2ebd; sub_2edd7(); assert(cs == 0x19e6);
    if (!ax)
        goto loc_1de7a;
    al = 0x00;
    goto loc_1de7c;
loc_1de7a: // 19e6:401a
    al = 0x01;
loc_1de7c: // 19e6:401c
    memoryASet(ss, bp - 389, al);
    if (memoryAGet(ss, bp - 389) != 0x00)
        goto loc_1de8a;
    goto loc_1df61;
loc_1de8a: // 19e6:402a
    di = bp - 130;
    push(ss);
    push(di);
    di = 0x6d18;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc5c(); assert(cs == 0x19e6);
    sp += 0x0004;
    di = bp - 130;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2fc28(); assert(cs == 0x19e6);
    ax = memoryAGet16(ds, 0x6d18);
    memoryASet16(ds, 0x34ee, ax);
    ax = memoryAGet16(ds, 0x6d1a);
    memoryASet16(ds, 0x34f0, ax);
    ax = memoryAGet16(ds, 0x6d1c); es = memoryAGet16(ds, 0x6d1c + 2);
    dx = es;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, dx);
    ax = memoryAGet16(ds, 0x6d20);
    memoryASet16(ds, 0x699e, ax);
    ax = memoryAGet16(ds, 0x6d22);
    memoryASet16(ds, 0x6858, ax);
    ax = memoryAGet16(ds, 0x6d24);
    memoryASet16(ds, 0x69a2, ax);
    memoryASet16(ss, bp - 132, 0x0001);
    goto loc_1dedf;
loc_1dedb: // 19e6:407b
    memoryASet16(ss, bp - 132, memoryAGet16(ss, bp - 132) + 1);
loc_1dedf: // 19e6:407f
    di = memoryAGet16(ss, bp - 132);
    al = memoryAGet(ds, di + 27941);
    di = memoryAGet16(ss, bp - 132);
    memoryASet(ds, di + 26691, al);
    if (memoryAGet16(ss, bp - 132) != 0x0014)
        goto loc_1dedb;
    ax = memoryAGet16(ds, 0x6d3a);
    memoryASet16(ds, 0x69a4, ax);
    ax = memoryAGet16(ds, 0x6d3c);
    memoryASet16(ds, 0x69a6, ax);
    al = memoryAGet(ds, 0x6d3e);
    memoryASet(ds, 0x69ad, al);
    ax = memoryAGet16(ds, 0x6d3f);
    memoryASet16(ds, 0x69aa, ax);
    al = memoryAGet(ds, 0x6d41);
    memoryASet(ds, 0x69ac, al);
    al = memoryAGet(ds, 0x6d42);
    memoryASet(ds, 0x69b0, al);
    ax = memoryAGet16(ds, 0x6d43);
    memoryASet16(ds, 0x69ae, ax);
    ax = memoryAGet16(ds, 0x6d45);
    memoryASet16(ds, 0x69b2, ax);
    ax = memoryAGet16(ds, 0x6d47);
    memoryASet16(ds, 0x69b6, ax);
    ax = memoryAGet16(ds, 0x6d49);
    memoryASet16(ds, 0x69b8, ax);
    memoryASet16(ss, bp - 132, 0x0001);
    goto loc_1df3e;
loc_1df3a: // 19e6:40da
    memoryASet16(ss, bp - 132, memoryAGet16(ss, bp - 132) + 1);
loc_1df3e: // 19e6:40de
    di = memoryAGet16(ss, bp - 132);
    al = memoryAGet(ds, di + 27978);
    di = memoryAGet16(ss, bp - 132);
    memoryASet(ds, di + 27065, al);
    if (memoryAGet16(ss, bp - 132) != 0x0014)
        goto loc_1df3a;
    al = memoryAGet(ds, 0x6d5f);
    memoryASet(ds, 0x69dc, al);
    memoryASet(ss, bp - 1, 0x01);
    goto loc_1df6e;
loc_1df61: // 19e6:4101
    di = 0x3f7c;
    push(cs);
    push(di);
    push(cs);
    sub_2399e();
    memoryASet(ss, bp - 1, 0x00);
loc_1df6e: // 19e6:410e
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1ecc4() // 19e6:4e64 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4117;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4157;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x416c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x418b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x41a8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x41c5;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x41e2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x41fe;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x421a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4239;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4277;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4297;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x42b5;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x42cd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x42ec;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x42f8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x430e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x432d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x434a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4368;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4382;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x438d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43ad;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43cc;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43db;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43ea;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43fa;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x440e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x442e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x444d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x446b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4489;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x448b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4498;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44b6;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44c7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44e7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44fc;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44fe;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4514;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4524;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4543;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x455e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x457e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x459d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x45bc;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x45d3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x45e1;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x45ef;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x460d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4627;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4647;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x465c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x466e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x467c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x468e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x46ab;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x46ca;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x46ea;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4707;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4725;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4740;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4749;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4766;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4784;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x47a2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x47c0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x47d4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x47f4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4811;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4831;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4851;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4871;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4891;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x48ad;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x48cb;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x48eb;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x490b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x492b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4949;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4966;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4984;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49a4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49c4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49e1;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49e3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a02;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a1e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a3e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a40;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a5e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a7b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a98;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4ab2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4ab4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4acf;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4ae7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b07;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b27;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b44;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b5e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b7a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b87;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4ba3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4bc1;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4bdf;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4bfd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c1d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c3b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c5b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c79;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c98;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4cae;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4ccc;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4cec;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4d0b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4d29;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4d47;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4d67;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4d87;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4da4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4dc3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4de1;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4dfb;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4e1b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4e29;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4e45;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4137;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4257;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4e56;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1c52f();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_20d09() // 19e6:6ea9 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_1a5fe();
    memoryASet16(ss, bp - 2, 0x0001);
    di = 0x6956;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6976;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6996;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x69ab;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x69c9;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x69e8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6a07;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6a20;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6a3e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6a5c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6a77;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6a95;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6976;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6aad;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6acd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6976;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6aed;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6b0a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6b28;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6b45;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6b60;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6b7b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6b95;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6bae;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6bca;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6be8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6c03;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6976;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6aad;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6c21;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6976;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6c41;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6c61;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6c80;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6c9d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6cbc;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6cda;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6ce0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6cff;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6d1f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6d3c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6d58;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6976;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6aad;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6d5f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6976;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6d7f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6d9c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6db3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6dd0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6de4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6dfe;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6e18;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6e31;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6e42;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6e62;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6e7e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6976;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6aad;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6e9b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1c52f();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_21a77() // 19e6:7c17 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_1a5fe();
    memoryASet16(ss, bp - 2, 0x0001);
    di = 0x7732;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7752;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7772;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7790;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x77ab;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x77c6;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x77e5;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7801;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7821;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7840;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7860;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x787f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x789e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7752;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x78be;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x78de;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7752;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x78fe;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x791b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7938;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7958;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7974;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x798f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x79a4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7752;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x78be;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x79b3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7752;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x79d3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x79f2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7a10;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7a2b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7a4a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7a69;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7a77;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7a95;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7ab4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7ad1;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7752;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x78be;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7af0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7752;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7b10;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7b2e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7b4b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7b6b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7b87;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7b9c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7bb1;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7bc9;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7be9;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7752;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x78be;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c09;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1c52f();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_222ee() // 19e6:848e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    push(cs);
    sub_1a5fe();
    di = 0x8446;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x8463;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x388d, 0x00);
    di = 0x847a;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x8480;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_1bc8a();
    di = 0x6a44;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_223e7() // 19e6:8587 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    push(cs);
    sub_1a5fe();
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x850f;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = 0x7068;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x7068;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x8518;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = 0x6fc4;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x6fc4;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x8521;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = 0x6ece;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x6ece;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x852a;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = 0x6f20;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x6f20;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x8533;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = 0x7016;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x7016;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x853c;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f204(); assert(cs == 0x19e6);
    di = 0x6f72;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f291(); assert(cs == 0x19e6);
    di = 0x6f72;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x8545;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x7068;
    push(ds);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x6fc4;
    push(ds);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x6ece;
    push(ds);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x6f20;
    push(ds);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x7016;
    push(ds);
    push(di);
    di = 0x3908;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x6f72;
    push(ds);
    push(di);
    di = 0x3931;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x395a, 0x00);
    di = 0x8558;
    push(cs);
    push(di);
    di = 0x3983;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x39ac, 0x00);
    di = 0x8579;
    push(cs);
    push(di);
    di = 0x39d5;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x15);
    memoryASet(ds, 0x67fb, 0x31);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    if (memoryAGet16(ds, 0x6814) != 0x0031)
        goto loc_225bf;
    push(cs);
    sub_2278b();
    goto loc_225fb;
loc_225bf: // 19e6:875f
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, di + 65526);
    memoryASet16(ds, 0x70c2, ax);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, di + 65532);
    memoryASet16(ds, 0x70be, ax);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, di + 65534);
    memoryASet16(ds, 0x70c0, ax);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, di + 65530);
    memoryASet16(ds, 0x70ba, ax);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, di + 65528);
    memoryASet16(ds, 0x70bc, ax);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, di + 65524);
    memoryASet16(ds, 0x70c4, ax);
loc_225fb: // 19e6:879b
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2265d() // 19e6:87fd +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_1a5fe();
    di = 0x87a1;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x87c1;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x388d, 0x00);
    di = 0x87de;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x87ef;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 2, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2278b() // 19e6:892b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0110;
    memoryASet(ss, bp - 16, 0x01);
loc_22796: // 19e6:8936
    memoryASet(ss, bp - 15, 0x01);
    push(cs);
    sub_1a5fe();
    di = 0x886f;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x8881;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x889c;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp - 4) != 0x0001)
        goto loc_227f2;
    memoryASet(ss, bp - 16, 0x00);
loc_227f2: // 19e6:8992
    di = bp - 272;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_24556();
    di = 0x7068;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    if (memoryAGet(ss, bp - 16) == 0x00)
        goto loc_2282d;
    di = 0x7068;
    push(ds);
    push(di);
    di = 0x88aa;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_2282d;
    push(bp);
    push(cs);
    sub_2265d();
    memoryASet(ss, bp - 15, 0x00);
loc_2282d: // 19e6:89cd
    if (memoryAGet(ss, bp - 15) != 0x00)
        goto loc_22836;
    goto loc_22796;
loc_22836: // 19e6:89d6
    if (memoryAGet(ss, bp - 16) != 0x00)
        goto loc_2283f;
    goto loc_228f5;
loc_2283f: // 19e6:89df
    memoryASet(ss, bp - 15, 0x01);
    push(cs);
    sub_1a5fe();
    di = 0x886f;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x88af;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x889c;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_228a0;
    memoryASet(ss, bp - 16, 0x00);
loc_228a0: // 19e6:8a40
    di = bp - 272;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_24556();
    di = 0x6fc4;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    if (memoryAGet(ss, bp - 16) == 0x00)
        goto loc_228ec;
    di = 0x6fc4;
    push(ds);
    push(di);
    di = 0x88aa;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_228e3;
    di = 0x6fc4;
    push(ds);
    push(di);
    di = 0x7068;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_228ec;
loc_228e3: // 19e6:8a83
    push(bp);
    push(cs);
    sub_2265d();
    memoryASet(ss, bp - 15, 0x00);
loc_228ec: // 19e6:8a8c
    if (memoryAGet(ss, bp - 15) != 0x00)
        goto loc_228f5;
    goto loc_2283f;
loc_228f5: // 19e6:8a95
    if (memoryAGet(ss, bp - 16) != 0x00)
        goto loc_228fe;
    goto loc_229c5;
loc_228fe: // 19e6:8a9e
    memoryASet(ss, bp - 15, 0x01);
    push(cs);
    sub_1a5fe();
    di = 0x886f;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x88cb;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x889c;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet16(ss, bp - 6) != 0x0001)
        goto loc_2295f;
    memoryASet(ss, bp - 16, 0x00);
loc_2295f: // 19e6:8aff
    di = bp - 272;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_24556();
    di = 0x6ece;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    if (memoryAGet(ss, bp - 16) == 0x00)
        goto loc_229bc;
    di = 0x6ece;
    push(ds);
    push(di);
    di = 0x88aa;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_229b3;
    di = 0x6ece;
    push(ds);
    push(di);
    di = 0x7068;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_229b3;
    di = 0x6ece;
    push(ds);
    push(di);
    di = 0x6fc4;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_229bc;
loc_229b3: // 19e6:8b53
    push(bp);
    push(cs);
    sub_2265d();
    memoryASet(ss, bp - 15, 0x00);
loc_229bc: // 19e6:8b5c
    if (memoryAGet(ss, bp - 15) != 0x00)
        goto loc_229c5;
    goto loc_228fe;
loc_229c5: // 19e6:8b65
    if (memoryAGet(ss, bp - 16) != 0x00)
        goto loc_229ce;
    goto loc_22aa6;
loc_229ce: // 19e6:8b6e
    memoryASet(ss, bp - 15, 0x01);
    push(cs);
    sub_1a5fe();
    di = 0x886f;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x88e4;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x889c;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 8, ax);
    if (memoryAGet16(ss, bp - 8) != 0x0001)
        goto loc_22a2f;
    memoryASet(ss, bp - 16, 0x00);
loc_22a2f: // 19e6:8bcf
    di = bp - 272;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_24556();
    di = 0x6f20;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    if (memoryAGet(ss, bp - 16) == 0x00)
        goto loc_22a9d;
    di = 0x6f20;
    push(ds);
    push(di);
    di = 0x88aa;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22a94;
    di = 0x6f20;
    push(ds);
    push(di);
    di = 0x7068;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22a94;
    di = 0x6f20;
    push(ds);
    push(di);
    di = 0x6fc4;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22a94;
    di = 0x6f20;
    push(ds);
    push(di);
    di = 0x6ece;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_22a9d;
loc_22a94: // 19e6:8c34
    push(bp);
    push(cs);
    sub_2265d();
    memoryASet(ss, bp - 15, 0x00);
loc_22a9d: // 19e6:8c3d
    if (memoryAGet(ss, bp - 15) != 0x00)
        goto loc_22aa6;
    goto loc_229ce;
loc_22aa6: // 19e6:8c46
    if (memoryAGet(ss, bp - 16) != 0x00)
        goto loc_22aaf;
    goto loc_22b98;
loc_22aaf: // 19e6:8c4f
    memoryASet(ss, bp - 15, 0x01);
    push(cs);
    sub_1a5fe();
    di = 0x886f;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x88ff;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x889c;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 12, ax);
    if (memoryAGet16(ss, bp - 12) != 0x0001)
        goto loc_22b10;
    memoryASet(ss, bp - 16, 0x00);
loc_22b10: // 19e6:8cb0
    di = bp - 272;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    sub_24556();
    di = 0x7016;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    if (memoryAGet(ss, bp - 16) == 0x00)
        goto loc_22b8f;
    di = 0x7016;
    push(ds);
    push(di);
    di = 0x88aa;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22b86;
    di = 0x7016;
    push(ds);
    push(di);
    di = 0x7068;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22b86;
    di = 0x7016;
    push(ds);
    push(di);
    di = 0x6fc4;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22b86;
    di = 0x7016;
    push(ds);
    push(di);
    di = 0x6ece;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22b86;
    di = 0x7016;
    push(ds);
    push(di);
    di = 0x6f20;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_22b8f;
loc_22b86: // 19e6:8d26
    push(bp);
    push(cs);
    sub_2265d();
    memoryASet(ss, bp - 15, 0x00);
loc_22b8f: // 19e6:8d2f
    if (memoryAGet(ss, bp - 15) != 0x00)
        goto loc_22b98;
    goto loc_22aaf;
loc_22b98: // 19e6:8d38
    if (memoryAGet(ss, bp - 16) != 0x00)
        goto loc_22ba1;
    goto loc_22c96;
loc_22ba1: // 19e6:8d41
    memoryASet(ss, bp - 15, 0x01);
    push(cs);
    sub_1a5fe();
    di = 0x886f;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x8915;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x889c;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 10, ax);
    if (memoryAGet16(ss, bp - 10) != 0x0001)
        goto loc_22bfd;
    memoryASet(ss, bp - 16, 0x00);
loc_22bfd: // 19e6:8d9d
    di = bp - 272;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_24556();
    di = 0x6f72;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    if (memoryAGet(ss, bp - 16) == 0x00)
        goto loc_22c8d;
    di = 0x6f72;
    push(ds);
    push(di);
    di = 0x88aa;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22c84;
    di = 0x6f72;
    push(ds);
    push(di);
    di = 0x7068;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22c84;
    di = 0x6f72;
    push(ds);
    push(di);
    di = 0x6fc4;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22c84;
    di = 0x7016;
    push(ds);
    push(di);
    di = 0x6ece;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22c84;
    di = 0x7016;
    push(ds);
    push(di);
    di = 0x6f20;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (flags.zero)
        goto loc_22c84;
    di = 0x6f72;
    push(ds);
    push(di);
    di = 0x7016;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f2f4(); assert(cs == 0x19e6);
    if (!flags.zero)
        goto loc_22c8d;
loc_22c84: // 19e6:8e24
    push(bp);
    push(cs);
    sub_2265d();
    memoryASet(ss, bp - 15, 0x00);
loc_22c8d: // 19e6:8e2d
    if (memoryAGet(ss, bp - 15) != 0x00)
        goto loc_22c96;
    goto loc_22ba1;
loc_22c96: // 19e6:8e36
    if (memoryAGet(ss, bp - 16) == 0x00)
        goto loc_22ca1;
    push(bp);
    push(cs);
    sub_223e7();
loc_22ca1: // 19e6:8e41
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_22d03() // 19e6:8ea3 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0106;
    push(cs);
    sub_1a5fe();
    di = 0x8e59;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x8e6e;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3864, 0x00);
    di = 0x8e83;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x38b6, 0x00);
    di = 0x8e95;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = bp - 262;
    push(ss);
    push(di);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_1bc8a();
    di = 0x6a44;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    di = 0x6a44;
    push(ds);
    push(di);
    di = bp - 6;
    push(ss);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f741(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    ax = memoryAGet16(ss, bp - 2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_22e16() // 19e6:8fb6 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1a5fe();
    di = 0x8f5d;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x8f6e;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3864, 0x00);
    di = 0x8f7f;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x38b6, 0x00);
    di = 0x8f90;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x02);
    memoryASet(ds, 0x67fb, 0x03);
    memoryASet(ds, 0x67fc, 0x04);
    memoryASet(ds, 0x67fd, 0x05);
    memoryASet(ds, 0x67fe, 0x06);
    memoryASet(ds, 0x67ff, 0x07);
    memoryASet(ds, 0x6800, 0x08);
    memoryASet(ds, 0x6801, 0x09);
    memoryASet(ds, 0x6802, 0x0a);
    memoryASet(ds, 0x6803, 0x0b);
    memoryASet(ds, 0x6804, 0x1c);
    memoryASet(ds, 0x6805, 0x01);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    push(cs); cs = 0x2ebd; sub_2edd7(); assert(cs == 0x19e6);
    if (ax)
        goto loc_22ed8;
loc_22ed8: // 19e6:9078
    ax = memoryAGet16(ds, 0x6814);
    if ((short)ax < (short)0x0002)
        goto loc_22ef0;
    if ((short)ax > (short)0x000a)
        goto loc_22ef0;
    ax = memoryAGet16(ds, 0x6814);
    ax--;
    push(ax);
    push(cs);
    sub_1dc89();
    goto loc_22efc;
loc_22ef0: // 19e6:9090
    if (ax != 0x000b)
        goto loc_22efc;
    ax = 0;
    push(ax);
    push(cs);
    sub_1dc89();
loc_22efc: // 19e6:909c
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    push(cs);
    sub_1a5fe();
    push(cs); cs = 0x2ebd; sub_2edd7(); assert(cs == 0x19e6);
    if (ax)
        goto loc_22f28;
    di = 0x8f9e;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_22f3b;
loc_22f28: // 19e6:90c8
    di = 0x8faa;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
loc_22f3b: // 19e6:90db
    di = 0x8f90;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x1c);
    memoryASet(ds, 0x67fb, 0x01);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_22fc3() // 19e6:9163 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_1a5fe();
    di = 0x911c;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9130;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3864, 0x00);
    di = 0x9144;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x38b6, 0x00);
    di = 0x9155;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x02);
    memoryASet(ds, 0x67fb, 0x03);
    memoryASet(ds, 0x67fc, 0x04);
    memoryASet(ds, 0x67fd, 0x05);
    memoryASet(ds, 0x67fe, 0x06);
    memoryASet(ds, 0x67ff, 0x07);
    memoryASet(ds, 0x6800, 0x08);
    memoryASet(ds, 0x6801, 0x09);
    memoryASet(ds, 0x6802, 0x0a);
    memoryASet(ds, 0x6803, 0x0b);
    memoryASet(ds, 0x6804, 0x1c);
    memoryASet(ds, 0x6805, 0x01);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    ax = memoryAGet16(ds, 0x6814);
    if ((short)ax < (short)0x0002)
        goto loc_230a1;
    if ((short)ax > (short)0x000a)
        goto loc_230a1;
    ax = memoryAGet16(ds, 0x6814);
    ax--;
    push(ax);
    push(cs);
    sub_1ddec();
    if (al)
        goto loc_2309f;
    memoryASet16(ds, 0x6814, 0x001c);
loc_2309f: // 19e6:923f
    goto loc_230b7;
loc_230a1: // 19e6:9241
    if (ax != 0x000b)
        goto loc_230b7;
    ax = 0;
    push(ax);
    push(cs);
    sub_1ddec();
    if (al)
        goto loc_230b7;
    memoryASet16(ds, 0x6814, 0x001c);
loc_230b7: // 19e6:9257
    ax = memoryAGet16(ds, 0x6814);
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    ax = memoryAGet16(ss, bp - 2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_231a0() // 19e6:9340 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_1a5fe();
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x926e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x927d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x9288;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x929b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x92a3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x92b2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x92c0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x92d1;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x92e2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x92f1;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x9301;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x9310;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x931e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x9332;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x31);
    memoryASet(ds, 0x67fb, 0x17);
    memoryASet(ds, 0x67fc, 0x23);
    memoryASet(ds, 0x67fd, 0x13);
    memoryASet(ds, 0x67fe, 0x1f);
    memoryASet(ds, 0x67ff, 0x18);
    memoryASet(ds, 0x6800, 0x10);
    memoryASet(ds, 0x6801, 0x01);
    memoryASet(ds, 0x6802, 0x39);
    memoryASet(ds, 0x6803, 0x1c);
    memoryASet(ds, 0x6804, 0x21);
    memoryASet(ds, 0x6805, 0x1e);
    memoryASet(ds, 0x6806, 0x2e);
    memoryASet(ds, 0x6807, 0x2f);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    ax = memoryAGet16(ds, 0x6814);
    if (ax == 0x0031)
        goto loc_23429;
    if (ax == 0x0039)
        goto loc_23429;
    if (ax != 0x001c)
        goto loc_2343b;
loc_23429: // 19e6:95c9
    memoryASet(ss, bp - 1, 0x42);
    memoryASet(ds, 0x6ec7, 0x00);
    memoryASet16(ds, 0x699e, 0x0001);
    goto loc_23511;
loc_2343b: // 19e6:95db
    if (ax != 0x0017)
        goto loc_2344b;
    push(cs);
    sub_1ecc4();
    memoryASet(ss, bp - 1, 0x49);
    goto loc_23511;
loc_2344b: // 19e6:95eb
    if (ax != 0x0021)
        goto loc_2345b;
    push(cs);
    sub_25f6d();
    memoryASet(ss, bp - 1, 0x46);
    goto loc_23511;
loc_2345b: // 19e6:95fb
    if (ax != 0x002e)
        goto loc_2346b;
    push(cs);
    sub_26da0();
    memoryASet(ss, bp - 1, 0x41);
    goto loc_23511;
loc_2346b: // 19e6:960b
    if (ax != 0x0023)
        goto loc_2347b;
    memoryASet(ss, bp - 1, 0x48);
    push(cs);
    sub_238d1();
    goto loc_23511;
loc_2347b: // 19e6:961b
    if (ax != 0x001e)
        goto loc_2348b;
    memoryASet(ss, bp - 1, 0x41);
    push(cs);
    sub_27183();
    goto loc_23511;
loc_2348b: // 19e6:962b
    if (ax != 0x002f)
        goto loc_2349a;
    memoryASet(ss, bp - 1, 0x56);
    push(cs);
    sub_23e87();
    goto loc_23511;
loc_2349a: // 19e6:963a
    if (ax != 0x0013)
        goto loc_234c9;
    memoryASet(ss, bp - 1, 0x52);
    memoryASet16(ds, 0x699e, 0x0001);
    push(cs);
    sub_22fc3();
    memoryASet16(ds, 0x6d60, ax);
    if (memoryAGet16(ds, 0x6d60) != 0x001c)
        goto loc_234c2;
    ax = 0;
    memoryASet16(ds, 0x6d60, ax);
    memoryASet(ss, bp - 1, 0x20);
    goto loc_234c7;
loc_234c2: // 19e6:9662
    memoryASet(ds, 0x6ec7, 0x00);
loc_234c7: // 19e6:9667
    goto loc_23511;
loc_234c9: // 19e6:9669
    if (ax != 0x001f)
        goto loc_234d8;
    memoryASet(ss, bp - 1, 0x53);
    push(cs);
    sub_20d09();
    goto loc_23511;
loc_234d8: // 19e6:9678
    if (ax != 0x0018)
        goto loc_234e7;
    memoryASet(ss, bp - 1, 0x4f);
    push(cs);
    sub_256f8();
    goto loc_23511;
loc_234e7: // 19e6:9687
    if (ax != 0x0010)
        goto loc_23503;
    push(cs);
    sub_23a3f();
    if (memoryAGet(ds, 0x6ec6) == 0x00)
        goto loc_234fd;
    memoryASet(ss, bp - 1, 0x51);
    goto loc_23501;
loc_234fd: // 19e6:969d
    memoryASet(ss, bp - 1, 0x20);
loc_23501: // 19e6:96a1
    goto loc_23511;
loc_23503: // 19e6:96a3
    if (ax != 0x0001)
        goto loc_23511;
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ss, bp - 1, 0x20);
loc_23511: // 19e6:96b1
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2361b() // 19e6:97bb +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    di = 0x96b8;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x96d1;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3864, 0x00);
    di = 0x96ea;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x96f0;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x96ff;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x970d;
    push(cs);
    push(di);
    di = 0x3908;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x971e;
    push(cs);
    push(di);
    di = 0x3931;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9732;
    push(cs);
    push(di);
    di = 0x395a;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9743;
    push(cs);
    push(di);
    di = 0x3983;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9751;
    push(cs);
    push(di);
    di = 0x39ac;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x975c;
    push(cs);
    push(di);
    di = 0x39d5;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x39fe, 0x00);
    di = 0x9762;
    push(cs);
    push(di);
    di = 0x3a27;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3a50, 0x00);
    di = 0x976f;
    push(cs);
    push(di);
    di = 0x3a79;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x23);
    memoryASet(ds, 0x67fb, 0x14);
    memoryASet(ds, 0x67fc, 0x2f);
    memoryASet(ds, 0x67fd, 0x24);
    memoryASet(ds, 0x67fe, 0x2e);
    memoryASet(ds, 0x67ff, 0x25);
    memoryASet(ds, 0x6800, 0x13);
    memoryASet(ds, 0x6801, 0x1f);
    memoryASet(ds, 0x6802, 0x10);
    memoryASet(ds, 0x6803, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    ax = memoryAGet16(ds, 0x6814);
    if (ax != 0x0023)
        goto loc_2377c;
    memoryASet(ss, bp - 1, 0x48);
    push(cs);
    sub_1ecc4();
    goto loc_2388f;
loc_2377c: // 19e6:991c
    if (ax != 0x0014)
        goto loc_2378c;
    memoryASet(ss, bp - 1, 0x54);
    push(cs);
    sub_23c40();
    goto loc_2388f;
loc_2378c: // 19e6:992c
    if (ax != 0x002f)
        goto loc_2379c;
    memoryASet(ss, bp - 1, 0x56);
    push(cs);
    sub_23e87();
    goto loc_2388f;
loc_2379c: // 19e6:993c
    if (ax != 0x0024)
        goto loc_237ac;
    memoryASet(ss, bp - 1, 0x4a);
    push(cs);
    sub_24038();
    goto loc_2388f;
loc_237ac: // 19e6:994c
    if (ax != 0x002e)
        goto loc_237bc;
    memoryASet(ss, bp - 1, 0x43);
    push(cs);
    sub_24216();
    goto loc_2388f;
loc_237bc: // 19e6:995c
    if (ax != 0x0025)
        goto loc_237cc;
    memoryASet(ss, bp - 1, 0x4b);
    push(cs);
    sub_2278b();
    goto loc_2388f;
loc_237cc: // 19e6:996c
    if (ax != 0x0013)
        goto loc_237ea;
    memoryASet(ss, bp - 1, 0x52);
    push(cs);
    sub_22fc3();
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp - 4) == 0x001c)
        goto loc_237e7;
    memoryASet(ds, 0x6ec8, 0x01);
loc_237e7: // 19e6:9987
    goto loc_2388f;
loc_237ea: // 19e6:998a
    if (ax == 0x001f)
        goto loc_237f2;
    goto loc_23875;
loc_237f2: // 19e6:9992
    memoryASet(ss, bp - 1, 0x53);
    if (memoryAGet16(ds, 0x681c) != 0x0001)
        goto loc_23803;
    push(cs);
    sub_22e16();
    goto loc_23873;
loc_23803: // 19e6:99a3
    push(cs);
    sub_1a5fe();
    di = 0x977d;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9799;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3864, 0x00);
    di = 0x97ae;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x976f;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
loc_23873: // 19e6:9a13
    goto loc_2388f;
loc_23875: // 19e6:9a15
    if (ax != 0x0010)
        goto loc_2388f;
    push(cs);
    sub_23b09();
    if (memoryAGet(ds, 0x6ec6) == 0x00)
        goto loc_2388b;
    memoryASet(ss, bp - 1, 0x51);
    goto loc_2388f;
loc_2388b: // 19e6:9a2b
    memoryASet(ss, bp - 1, 0x20);
loc_2388f: // 19e6:9a2f
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_238d1() // 19e6:9a71 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_1a5fe();
    di = 0x9a36;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    memoryASet(ds, 0x3864, 0x00);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_23902;
loc_238ff: // 19e6:9a9f
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_23902: // 19e6:9aa2
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0003;
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    if (memoryAGet16(ss, bp - 2) != 0x000a)
        goto loc_238ff;
    memoryASet(ds, 0x3a27, 0x00);
    di = 0x9a53;
    push(cs);
    push(di);
    di = 0x3a50;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3a79, 0x00);
    di = 0x9a63;
    push(cs);
    push(di);
    di = 0x3aa2;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2399e() // 19e6:9b3e +nearfar +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2);
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    push(cs);
    sub_1a5fe();
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x9b23;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9b30;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_23a3f() // 19e6:9bdf +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1a5fe();
    di = 0x9bbd;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9bd1;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    memoryASet(ds, 0x67fb, 0x15);
    memoryASet(ds, 0x67fc, 0x31);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    if (memoryAGet16(ds, 0x6814) != 0x0015)
        goto loc_23a93;
    memoryASet(ds, 0x6ec6, 0x01);
loc_23a93: // 19e6:9c33
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_23b09() // 19e6:9ca9 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1a5fe();
    di = 0x9c6e;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x9c79;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9c7f;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9c8e;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9c9b;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x20);
    memoryASet(ds, 0x67fb, 0x14);
    memoryASet(ds, 0x67fc, 0x17);
    memoryASet(ds, 0x67fd, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    if (memoryAGet16(ds, 0x6814) != 0x0020)
        goto loc_23bb4;
    push(cs);
    sub_1d572();
    memoryASet(ds, 0x6ec6, 0x01);
    memoryASet(ds, 0x6d66, 0x00);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x19e6);
    goto loc_23be5;
loc_23bb4: // 19e6:9d54
    if (memoryAGet16(ds, 0x6814) != 0x0014)
        goto loc_23bd4;
    push(cs);
    sub_1d572();
    memoryASet(ds, 0x6ec7, 0x01);
    memoryASet(ds, 0x6d66, 0x00);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x2a6b; sub_2a6b0(); assert(cs == 0x19e6);
    goto loc_23be5;
loc_23bd4: // 19e6:9d74
    if (memoryAGet16(ds, 0x6814) != 0x0017)
        goto loc_23be5;
    memoryASet(ds, 0x6ec8, 0x01);
    memoryASet(ds, 0x6d66, 0x00);
loc_23be5: // 19e6:9d85
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_23c40() // 19e6:9de0 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1a5fe();
    di = 0x9dc0;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9dd2;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x15);
    memoryASet(ds, 0x67fb, 0x31);
    memoryASet(ds, 0x67fc, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    if (memoryAGet16(ds, 0x6814) != 0x0015)
        goto loc_23c96;
    memoryASet(ds, 0x34af, 0x01);
    goto loc_23c9b;
loc_23c96: // 19e6:9e36
    memoryASet(ds, 0x34af, 0x00);
loc_23c9b: // 19e6:9e3b
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_23e87() // 19e6:a027 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1a5fe();
    di = 0x9e76;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x383b, 0x00);
    di = 0x9e94;
    push(cs);
    push(di);
    di = 0x3864;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9eb2;
    push(cs);
    push(di);
    di = 0x388d;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9ed1;
    push(cs);
    push(di);
    di = 0x38b6;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9ef1;
    push(cs);
    push(di);
    di = 0x38df;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3908, 0x00);
    di = 0x9f13;
    push(cs);
    push(di);
    di = 0x3931;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9f33;
    push(cs);
    push(di);
    di = 0x395a;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9f54;
    push(cs);
    push(di);
    di = 0x3983;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x39ac, 0x00);
    di = 0x9f72;
    push(cs);
    push(di);
    di = 0x39d5;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9f94;
    push(cs);
    push(di);
    di = 0x39fe;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9fb7;
    push(cs);
    push(di);
    di = 0x3a27;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0x9fd6;
    push(cs);
    push(di);
    di = 0x3a50;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x3a79, 0x00);
    di = 0x9ff6;
    push(cs);
    push(di);
    di = 0x3aa2;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0xa019;
    push(cs);
    push(di);
    di = 0x3acb;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x15);
    memoryASet(ds, 0x67fb, 0x31);
    memoryASet(ds, 0x67fc, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    if (memoryAGet16(ds, 0x6814) != 0x0015)
        goto loc_23fd6;
    memoryASet16(ds, 0x70c6, 0x0001);
    goto loc_23fdb;
loc_23fd6: // 19e6:a176
    ax = 0;
    memoryASet16(ds, 0x70c6, ax);
loc_23fdb: // 19e6:a17b
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_24038() // 19e6:a1d8 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1a5fe();
    di = 0xa1b6;
    push(cs);
    push(di);
    di = 0x3812;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    di = 0xa1ca;
    push(cs);
    push(di);
    di = 0x383b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x15);
    memoryASet(ds, 0x67fb, 0x31);
    memoryASet(ds, 0x67fc, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    if (memoryAGet16(ds, 0x6814) != 0x0015)
        goto loc_24097;
    push(cs); cs = 0x2a5b; sub_2a5b0(); assert(cs == 0x19e6);
    memoryASet(ds, 0x341c, al);
    memoryASet16(ds, 0x70c8, 0x0001);
    goto loc_240a8;
loc_24097: // 19e6:a237
    if (memoryAGet16(ds, 0x6814) != 0x0031)
        goto loc_240a8;
    memoryASet(ds, 0x341c, 0x00);
    ax = 0;
    memoryASet16(ds, 0x70c8, ax);
loc_240a8: // 19e6:a248
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_24216() // 19e6:a3b6 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa283;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa29f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa2bd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa2bf;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa2db;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa2f8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa2bd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa30e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa32c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa349;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa2bd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa366;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa384;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa398;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa3a8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    memoryASet(ds, 0x67fb, 0x39);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ds, 0x6814, ax);
    if (memoryAGet16(ds, 0x6814) != 0x0039)
        goto loc_24457;
    push(cs); cs = 0x2a5b; sub_2a5b0(); assert(cs == 0x19e6);
    memoryASet(ds, 0x341c, al);
    if (memoryAGet(ds, 0x341c) == 0x00)
        goto loc_24457;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2a5b; sub_2a67c(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6d68, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2a5b; sub_2a67c(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6d6a, ax);
loc_24457: // 19e6:a5f7
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x6824, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_24556() // 19e6:a6f6 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    if (ax != 0x0002)
        goto loc_24577;
    di = 0xa632;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24577: // 19e6:a717
    if (ax != 0x0003)
        goto loc_24592;
    di = 0xa634;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24592: // 19e6:a732
    if (ax != 0x0004)
        goto loc_245ad;
    di = 0xa636;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_245ad: // 19e6:a74d
    if (ax != 0x0005)
        goto loc_245c8;
    di = 0xa638;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_245c8: // 19e6:a768
    if (ax != 0x0006)
        goto loc_245e3;
    di = 0xa63a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_245e3: // 19e6:a783
    if (ax != 0x0007)
        goto loc_245fe;
    di = 0xa63c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_245fe: // 19e6:a79e
    if (ax != 0x0008)
        goto loc_24619;
    di = 0xa63e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24619: // 19e6:a7b9
    if (ax != 0x0009)
        goto loc_24634;
    di = 0xa640;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24634: // 19e6:a7d4
    if (ax != 0x000a)
        goto loc_2464f;
    di = 0xa642;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_2464f: // 19e6:a7ef
    if (ax != 0x000b)
        goto loc_2466a;
    di = 0xa644;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_2466a: // 19e6:a80a
    if (ax != 0x0010)
        goto loc_24685;
    di = 0xa646;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24685: // 19e6:a825
    if (ax != 0x0011)
        goto loc_246a0;
    di = 0xa648;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_246a0: // 19e6:a840
    if (ax != 0x0012)
        goto loc_246bb;
    di = 0xa64a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_246bb: // 19e6:a85b
    if (ax != 0x0013)
        goto loc_246d6;
    di = 0xa64c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_246d6: // 19e6:a876
    if (ax != 0x0014)
        goto loc_246f1;
    di = 0xa64e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_246f1: // 19e6:a891
    if (ax != 0x0015)
        goto loc_2470c;
    di = 0xa650;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_2470c: // 19e6:a8ac
    if (ax != 0x0016)
        goto loc_24727;
    di = 0xa652;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24727: // 19e6:a8c7
    if (ax != 0x0017)
        goto loc_24742;
    di = 0xa654;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24742: // 19e6:a8e2
    if (ax != 0x0018)
        goto loc_2475d;
    di = 0xa656;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_2475d: // 19e6:a8fd
    if (ax != 0x0019)
        goto loc_24778;
    di = 0xa658;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24778: // 19e6:a918
    if (ax != 0x001c)
        goto loc_24793;
    di = 0xa65a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24793: // 19e6:a933
    if (ax != 0x001d)
        goto loc_247ae;
    di = 0xa660;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_247ae: // 19e6:a94e
    if (ax != 0x001e)
        goto loc_247c9;
    di = 0xa665;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_247c9: // 19e6:a969
    if (ax != 0x001f)
        goto loc_247e4;
    di = 0xa667;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_247e4: // 19e6:a984
    if (ax != 0x0020)
        goto loc_247ff;
    di = 0xa669;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_247ff: // 19e6:a99f
    if (ax != 0x0021)
        goto loc_2481a;
    di = 0xa66b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_2481a: // 19e6:a9ba
    if (ax != 0x0022)
        goto loc_24835;
    di = 0xa66d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24835: // 19e6:a9d5
    if (ax != 0x0023)
        goto loc_24850;
    di = 0xa66f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24850: // 19e6:a9f0
    if (ax != 0x0024)
        goto loc_2486b;
    di = 0xa671;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_2486b: // 19e6:aa0b
    if (ax != 0x0025)
        goto loc_24886;
    di = 0xa673;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24886: // 19e6:aa26
    if (ax != 0x0026)
        goto loc_248a1;
    di = 0xa675;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_248a1: // 19e6:aa41
    if (ax != 0x002a)
        goto loc_248bc;
    di = 0xa677;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_248bc: // 19e6:aa5c
    if (ax != 0x002c)
        goto loc_248d7;
    di = 0xa67f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_248d7: // 19e6:aa77
    if (ax != 0x002d)
        goto loc_248f2;
    di = 0xa681;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_248f2: // 19e6:aa92
    if (ax != 0x002e)
        goto loc_2490d;
    di = 0xa683;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_2490d: // 19e6:aaad
    if (ax != 0x002f)
        goto loc_24928;
    di = 0xa685;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24928: // 19e6:aac8
    if (ax != 0x0030)
        goto loc_24943;
    di = 0xa687;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24943: // 19e6:aae3
    if (ax != 0x0031)
        goto loc_2495e;
    di = 0xa689;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_2495e: // 19e6:aafe
    if (ax != 0x0032)
        goto loc_24979;
    di = 0xa68b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24979: // 19e6:ab19
    if (ax != 0x0033)
        goto loc_24994;
    di = 0xa68d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24994: // 19e6:ab34
    if (ax != 0x0034)
        goto loc_249af;
    di = 0xa68f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_249af: // 19e6:ab4f
    if (ax != 0x0035)
        goto loc_249ca;
    di = 0xa691;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_249ca: // 19e6:ab6a
    if (ax != 0x0036)
        goto loc_249e5;
    di = 0xa693;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_249e5: // 19e6:ab85
    if (ax != 0x0038)
        goto loc_24a00;
    di = 0xa69b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24a00: // 19e6:aba0
    if (ax != 0x0039)
        goto loc_24a1b;
    di = 0xa69f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24a1b: // 19e6:abbb
    if (ax != 0x0047)
        goto loc_24a36;
    di = 0xa6a5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24a36: // 19e6:abd6
    if (ax != 0x0048)
        goto loc_24a51;
    di = 0xa6aa;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24a51: // 19e6:abf1
    if (ax != 0x0049)
        goto loc_24a6c;
    di = 0xa6b3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24a6c: // 19e6:ac0c
    if (ax != 0x004b)
        goto loc_24a87;
    di = 0xa6b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24a87: // 19e6:ac27
    if (ax != 0x004d)
        goto loc_24aa2;
    di = 0xa6c3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24aa2: // 19e6:ac42
    if (ax != 0x004f)
        goto loc_24abc;
    di = 0xa6cf;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24abc: // 19e6:ac5c
    if (ax != 0x0050)
        goto loc_24ad6;
    di = 0xa6d3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24ad6: // 19e6:ac76
    if (ax != 0x0051)
        goto loc_24af0;
    di = 0xa6de;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24af0: // 19e6:ac90
    if (ax != 0x0052)
        goto loc_24b0a;
    di = 0xa6e3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24b0a: // 19e6:acaa
    if (ax != 0x0053)
        goto loc_24b24;
    di = 0xa6ea;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    goto loc_24b37;
loc_24b24: // 19e6:acc4
    di = 0xa6f1;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
loc_24b37: // 19e6:acd7
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_24b3d() // 19e6:acdd +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_24db6() // 19e6:af56 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xace4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xad06;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xad24;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xad3d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xad5c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xad7b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xad94;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xadad;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xadcb;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xade7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xadfe;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xae19;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xae37;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0x6ec5, 0x01);
    push(cs);
    sub_24b3d();
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xae45;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xae65;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xae86;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xaea5;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xaec2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xaee2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xaf01;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xaf20;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xaf3e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xae37;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0x6ec5, 0x01);
    push(cs);
    sub_24b3d();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_25336() // 19e6:b4d6 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb35d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb37f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb39b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb3ba;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb3d9;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb3f7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb413;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb431;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb449;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb469;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb48a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb4aa;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb4c8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0x6ec5, 0x01);
    push(cs);
    sub_24b3d();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_256f8() // 19e6:b898 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb719;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb73b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb75b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb77d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb79e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb7b5;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb7c6;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb7e7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb808;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb829;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb84b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb86c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xb88a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0x6ec5, 0x01);
    push(cs);
    sub_24b3d();
    push(cs);
    sub_25336();
    push(cs);
    sub_24db6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_25f6d() // 19e6:c10d +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbae3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbafc;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbb15;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbb34;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbb51;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbb71;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbb90;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbbac;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbbc7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbbe0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbbff;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc1c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc3a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc52;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_24b3d();
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc60;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc7b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc95;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbca0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbcad;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbcc0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbcda;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbcf4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd0e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd25;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd45;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc52;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_24b3d();
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc60;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc7b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd4e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd57;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd66;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd78;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd8d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbd25;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbda2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc52;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_24b3d();
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbdc0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbdd7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbdec;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbdfc;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbe05;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbe21;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbe3a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbe41;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbe5b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbe75;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbe8f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbea7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc52;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_24b3d();
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbeb5;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbece;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbeec;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbf0c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbf19;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbf29;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbf43;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbf55;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbf67;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbf7f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbf9f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbfbf;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc52;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_24b3d();
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbfd0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbfed;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc007;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc027;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc044;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc04d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc063;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc082;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc09d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc0b8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc0d7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xc0f0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xbc52;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_24b3d();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_26da0() // 19e6:cf40 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xcdc8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xcde3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xcdfe;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xce1c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xce39;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xce57;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xce76;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xce92;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xceaa;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xcec4;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xcede;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xcefd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xcf1a;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xcf32;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_24b3d();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_27183() // 19e6:d323 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd193;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd1ae;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd1ce;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd1ec;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd20b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd229;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd249;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd269;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd289;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd2a7;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd2c3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd2e2;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd2fd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd315;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_24b3d();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_274a5() // 19e6:d645 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd576;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd594;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd5b3;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd5d0;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd5ea;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd607;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd61f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd637;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    memoryASet(ds, 0x67fb, 0x1c);
    memoryASet(ds, 0x67fc, 0x39);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    push(cs);
    sub_24b3d();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_27680() // 19e6:d820 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a5fe();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd7b5;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd7cd;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd7e6;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 14313, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd7fa;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xd812;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x37e9;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x19e6);
    memoryASet(ds, 0x67fa, 0x01);
    memoryASet(ds, 0x67fb, 0x1c);
    memoryASet(ds, 0x67fc, 0x39);
    memoryASet16(ds, 0x6824, 0x03e7);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1b461();
    ah = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    push(cs);
    sub_24b3d();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_27a22() // 19e6:dbc2 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2b4d; sub_2b63d(); assert(cs == 0x19e6);
    push(cs); cs = 0x2b4d; sub_2b692(); assert(cs == 0x19e6);
    al = 0x01;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs); cs = 0x2b4d; sub_2b6e5(); assert(cs == 0x19e6);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_27a4b;
loc_27a48: // 19e6:dbe8
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_27a4b: // 19e6:dbeb
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0002;
    ax <<= cl;
    ax++;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    di = 0xd92d;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_280b9(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0002;
    ax <<= cl;
    ax += 0x0002;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    di = 0xd92d;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_280b9(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0002;
    ax <<= cl;
    ax += 0x0003;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    di = 0xd92d;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_280b9(); assert(cs == 0x19e6);
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0002;
    ax <<= cl;
    ax += 0x0004;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    di = 0xd92d;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_280b9(); assert(cs == 0x19e6);
    if (memoryAGet16(ss, bp - 2) == 0x0013)
        goto loc_27ad6;
    goto loc_27a48;
loc_27ad6: // 19e6:dc76
    ax = 0x0009;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0048;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x27d2; sub_28029(); assert(cs == 0x19e6);
    ax = 0x0003;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xd945;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x0005;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x004c;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x27d2; sub_28029(); assert(cs == 0x19e6);
    ax = 0x0008;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xd982;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x0009;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xd9c2;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x000a;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xda02;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x000c;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xda44;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x000d;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xda84;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x000e;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xdac4;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x0010;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xdaf9;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x0011;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xdb28;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x0012;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xdb57;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    ax = 0x0014;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0xdb87;
    push(cs);
    push(di);
    push(cs); cs = 0x27d2; sub_28069(); assert(cs == 0x19e6);
    al = 0x03;
    push(ax);
    push(cs); cs = 0x2b4d; sub_2b729(); assert(cs == 0x19e6);
    al = 0x00;
    push(ax);
    push(cs); cs = 0x2b4d; sub_2b743(); assert(cs == 0x19e6);
    al = 0x01;
    push(ax);
    al = 0x18;
    push(ax);
    push(cs); cs = 0x2b4d; sub_2b6e5(); assert(cs == 0x19e6);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_27c32() // 19e6:ddd2 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bc93(); assert(cs == 0x19e6);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x282f; sub_282ff(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x282f; sub_28337(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, ax);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2baf; sub_2bcc3(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
    ax = 0;
    memoryASet16(ds, 0x683c, ax);
    ax = 0;
    memoryASet16(ds, 0x6840, ax);
    di = 0xddc9;
    push(cs);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x282f; sub_29c05(); assert(cs == 0x19e6);
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_19f3b();
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_27ca0;
loc_27c9d: // 19e6:de3d
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_27ca0: // 19e6:de40
    ax = 0x0032;
    push(ax);
    push(cs); cs = 0x2b4d; sub_2b76e(); assert(cs == 0x19e6);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if (memoryAGet16(ss, bp - 2) != 0x001e)
        goto loc_27c9d;
    push(cs);
    sub_21a77();
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
loc_27cdb: // 19e6:de7b
    push(cs); cs = 0x2b4d; sub_2b7ca(); assert(cs == 0x19e6);
    if (!al)
        goto loc_27cdb;
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    push(cs);
    sub_1d572();
    memoryASet(ds, 0x6ec7, 0x01);
    memoryASet(ds, 0x6d66, 0x00);
    memoryASet(ds, 0x6ec6, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_27d0f() // 19e6:deaf +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_27d20() // 27d2:0000 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    al = memoryAGet(ss, bp + 8);
    ah = 0;
    dx = ax;
    al = memoryAGet(ss, bp + 6);
    ah = 0;
    cx = 0x0004;
    ax <<= cl;
    ax |= dx;
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_27d65() // 27d2:0045 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    al = memoryAGet(ss, bp + 8);
    push(ax);
    di = 0x0025;
    push(cs);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f4a4(); assert(cs == 0x27d2);
    if (!flags.zero)
        goto loc_27d80;
    memoryASet(ss, bp + 8, 0x01);
loc_27d80: // 27d2:0060
    di = bp - 256;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp + 8);
    ah = 0;
    ax++;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2fd4d(); assert(cs == 0x27d2);
    al = memoryAGet(ss, bp + 8);
    memoryASet(ss, bp - 256, al);
    di = bp - 256;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x27d2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_27db7() // 27d2:0097 +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0106;
    if ((short)memoryAGet16(ss, bp + 12) <= (short)0x0050)
        goto loc_27dc9;
    memoryASet16(ss, bp + 12, 0x0050);
loc_27dc9: // 27d2:00a9
    al = memoryAGet(ss, bp + 8);
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_27d20();
    memoryASet(ss, bp - 3, al);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 14);
    if ((short)ax > (short)memoryAGet16(ss, bp - 6))
        goto loc_27e1b;
    memoryASet16(ss, bp - 2, ax);
    goto loc_27dee;
loc_27deb: // 27d2:00cb
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_27dee: // 27d2:00ce
    al = memoryAGet(ss, bp + 16);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    al = memoryAGet(ss, bp - 3);
    push(ax);
    di = bp - 262;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax -= memoryAGet16(ss, bp + 16);
    ax++;
    push(ax);
    al = 0x20;
    push(ax);
    push(cs);
    sub_27d65();
    push(cs);
    sub_281df();
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 6))
        goto loc_27deb;
loc_27e1b: // 27d2:00fb
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_27e21() // 27d2:0101 +stackDrop16
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x010c;
    ax = memoryAGet16(ss, bp + 6);
    if (ax != 0x0000)
        goto loc_27e4b;
    memoryASet(ss, bp - 3, 0x20);
    memoryASet(ss, bp - 4, 0x20);
    memoryASet(ss, bp - 5, 0x20);
    memoryASet(ss, bp - 6, 0x20);
    memoryASet(ss, bp - 7, 0x20);
    memoryASet(ss, bp - 8, 0x20);
    goto loc_27eec;
loc_27e4b: // 27d2:012b
    if (ax != 0x0001)
        goto loc_27e6b;
    memoryASet(ss, bp - 3, 0xda);
    memoryASet(ss, bp - 4, 0xbf);
    memoryASet(ss, bp - 5, 0xc0);
    memoryASet(ss, bp - 6, 0xd9);
    memoryASet(ss, bp - 7, 0xc4);
    memoryASet(ss, bp - 8, 0xb3);
    goto loc_27eec;
loc_27e6b: // 27d2:014b
    if (ax != 0x0002)
        goto loc_27e8a;
    memoryASet(ss, bp - 3, 0xc9);
    memoryASet(ss, bp - 4, 0xbb);
    memoryASet(ss, bp - 5, 0xc8);
    memoryASet(ss, bp - 6, 0xbc);
    memoryASet(ss, bp - 7, 0xcd);
    memoryASet(ss, bp - 8, 0xba);
    goto loc_27eec;
loc_27e8a: // 27d2:016a
    if (ax != 0x0003)
        goto loc_27ea9;
    memoryASet(ss, bp - 3, 0xd6);
    memoryASet(ss, bp - 4, 0xb7);
    memoryASet(ss, bp - 5, 0xd3);
    memoryASet(ss, bp - 6, 0xbd);
    memoryASet(ss, bp - 7, 0xc4);
    memoryASet(ss, bp - 8, 0xba);
    goto loc_27eec;
loc_27ea9: // 27d2:0189
    if (ax != 0x0004)
        goto loc_27ec8;
    memoryASet(ss, bp - 3, 0xd5);
    memoryASet(ss, bp - 4, 0xb8);
    memoryASet(ss, bp - 5, 0xd4);
    memoryASet(ss, bp - 6, 0xbe);
    memoryASet(ss, bp - 7, 0xcd);
    memoryASet(ss, bp - 8, 0xb3);
    goto loc_27eec;
loc_27ec8: // 27d2:01a8
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 3, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 4, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 5, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 6, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 7, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 8, al);
loc_27eec: // 27d2:01cc
    al = memoryAGet(ss, bp + 10);
    push(ax);
    al = memoryAGet(ss, bp + 8);
    push(ax);
    push(cs);
    sub_27d20();
    memoryASet(ss, bp - 9, al);
    al = memoryAGet(ss, bp + 18);
    push(ax);
    al = memoryAGet(ss, bp + 16);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 3);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x27d2);
    push(cs);
    sub_281df();
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    push(ax);
    al = memoryAGet(ss, bp + 16);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    ax -= memoryAGet16(ss, bp + 18);
    ax--;
    push(ax);
    al = memoryAGet(ss, bp - 7);
    push(ax);
    push(cs);
    sub_27d65();
    push(cs);
    sub_281df();
    al = memoryAGet(ss, bp + 14);
    push(ax);
    al = memoryAGet(ss, bp + 16);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 4);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x27d2);
    push(cs);
    sub_281df();
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 12))
        goto loc_27fbe;
    memoryASet16(ss, bp - 2, ax);
    goto loc_27f78;
loc_27f75: // 27d2:0255
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_27f78: // 27d2:0258
    al = memoryAGet(ss, bp + 18);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 268;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 8);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x27d2);
    push(cs);
    sub_281df();
    al = memoryAGet(ss, bp + 14);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 268;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 8);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x27d2);
    push(cs);
    sub_281df();
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 12))
        goto loc_27f75;
loc_27fbe: // 27d2:029e
    al = memoryAGet(ss, bp + 18);
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 5);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x27d2);
    push(cs);
    sub_281df();
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    ax -= memoryAGet16(ss, bp + 18);
    ax--;
    push(ax);
    al = memoryAGet(ss, bp - 7);
    push(ax);
    push(cs);
    sub_27d65();
    push(cs);
    sub_281df();
    al = memoryAGet(ss, bp + 14);
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 6);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x27d2);
    push(cs);
    sub_281df();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 14;
}
void sub_28029() // 27d2:0309 +far +stackDrop16
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_27e21();
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 14);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_27db7();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 14;
}
void sub_28069() // 27d2:0349 +far +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2);
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x27d2);
    al = memoryAGet(ss, bp - 256);
    ah = 0;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    dx = ax;
    ax = 0x0028;
    ax -= dx;
    push(ax);
    al = memoryAGet(ss, bp + 14);
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp + 10);
    push(ax);
    push(cs);
    sub_27d20();
    push(ax);
    di = bp - 256;
    push(ss);
    push(di);
    push(cs);
    sub_281df();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_280b9() // 27d2:0399 +far +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0304;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2);
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x27d2);
    ax = 0x001a;
    ax -= memoryAGet16(ss, bp + 14);
    dx = ax;
    al = memoryAGet(ss, bp - 256);
    ah = 0;
    if ((short)ax <= (short)dx)
        goto loc_280fc;
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x001b;
    ax -= memoryAGet16(ss, bp + 14);
    push(ax);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f3a0(); assert(cs == 0x27d2);
loc_280fc: // 27d2:03dc
    al = memoryAGet(ss, bp - 256);
    ah = 0;
    memoryASet16(ss, bp - 516, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 516))
        goto loc_28178;
    memoryASet16(ss, bp - 258, ax);
    goto loc_28119;
loc_28115: // 27d2:03f5
    memoryASet16(ss, bp - 258, memoryAGet16(ss, bp - 258) + 1);
loc_28119: // 27d2:03f9
    di = bp - 772;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp - 258);
    al = memoryAGet(ss, bp + di + -256);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x27d2);
    di = bp - 514;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x27d2);
    al = memoryAGet(ss, bp + 16);
    push(ax);
    ax = memoryAGet16(ss, bp + 14);
    ax--;
    ax += memoryAGet16(ss, bp - 258);
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp + 10);
    push(ax);
    push(cs);
    sub_27d20();
    push(ax);
    di = bp - 772;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp - 258);
    al = memoryAGet(ss, bp + di + -256);
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f31f(); assert(cs == 0x27d2);
    push(cs);
    sub_281df();
    ax = memoryAGet16(ss, bp - 258);
    if (ax != memoryAGet16(ss, bp - 516))
        goto loc_28115;
loc_28178: // 27d2:0458
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_2817e() // 27d2:045e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_282e3();
    if (al != 0x07)
        goto loc_28191;
    memoryASet16(ds, 0x21d6, 0xb000);
    goto loc_28197;
loc_28191: // 27d2:0471
    memoryASet16(ds, 0x21d6, 0xb800);
loc_28197: // 27d2:0477
    push(cs);
    sub_28277();
    if (al == 0x01)
        goto loc_281a3;
    al = 0x00;
    goto loc_281a5;
loc_281a3: // 27d2:0483
    al = 0x01;
loc_281a5: // 27d2:0485
    memoryASet(ds, 0x21d8, al);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_281ac() // 27d2:048c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_2817e();
    memoryASet16(ds, 0x21da, 0x00c8);
    memoryASet16(ds, 0x21dc, 0x0000);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_281c3() // 27d2:04a3 +returnCarry
{
    sp -= 2;
    ax = 0;
    cl = al;
    bh = al;
    ch--;
    cx >>= 1;
    di = cx;
    di >>= 1;
    di >>= 1;
    di += cx;
    bx--;
    bx <<= 1;
    flags.carry = (di + bx) >= 0x10000;
    di += bx;
    es = memoryAGet16(ds, 0x21d6);
    sp += 2;
}
void sub_281df() // 27d2:04bf +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    ch = memoryAGet(ss, bp + 12);
    bl = memoryAGet(ss, bp + 14);
    sub_281c3();
    cl = memoryAGet(ds, 0x21d8);
    si = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2);
    flags.direction = 0;
    al = lodsb<DS_SI>();
    tx = cx; cx = ax; ax = tx;
    if (cx==0)
        goto loc_28221;
    ah = memoryAGet(ss, bp + 10);
    al = rcr8(al, 0x01);
    if (!flags.carry)
        goto loc_2821d;
    dx = 0x03da;
loc_28202: // 27d2:04e2
    al = lodsb<DS_SI>();
    bx = ax;
    flags.interrupts = 0;
loc_28206: // 27d2:04e6
    al = in8(dx);
    flags.carry = 0;
    if (al & 0x08)
        goto loc_28214;
    al = rcr8(al, 0x01);
    if (flags.carry)
        goto loc_28206;
loc_2820f: // 27d2:04ef
    al = in8(dx);
    al = rcr8(al, 0x01);
    if (!flags.carry)
        goto loc_2820f;
loc_28214: // 27d2:04f4
    ax = bx;
    stosw<ES_DI>(ax);
    flags.interrupts = 1;
    if (--cx)
        goto loc_28202;
    goto loc_28221;
    // gap 1 bytes
loc_2821d: // 27d2:04fd
    al = lodsb<DS_SI>();
    stosw<ES_DI>(ax);
    if (--cx)
        goto loc_2821d;
loc_28221: // 27d2:0501
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_2826f() // 27d2:054f
{
    sp -= 2;
    ah = 0x0f;
    interrupt(0x10);
    memoryASet(ds, 0x21de, al);
    sp += 2;
}
void sub_28277() // 27d2:0557 +stackDrop2
{
    sp -= 2;
    sub_2826f();
    memoryASet(ds, 0x21df, 0x04);
    cx = 0xffff;
    ax = 0x1c00;
    interrupt(0x10);
    if (al == 0x1c)
        goto loc_282cc;
    memoryASet(ds, 0x21df, 0x03);
    bl = 0x32;
    ax = 0x1200;
    interrupt(0x10);
    if (al == 0x12)
        goto loc_282cc;
    memoryASet(ds, 0x21df, 0x02);
    bx = 0xff10;
    cx = 0xffff;
    ax = 0x1200;
    interrupt(0x10);
    al = 0;
    if (cx == 0xffff)
        goto loc_282d0;
    if (bh > 0x01)
        goto loc_282d0;
    if (bh == 0x01)
        goto loc_282c5;
    if (memoryAGet(ds, 0x21de) == 0x07)
        goto loc_282d0;
    goto loc_282cc;
loc_282c5: // 27d2:05a5
    if (memoryAGet(ds, 0x21de) != 0x07)
        goto loc_282d0;
loc_282cc: // 27d2:05ac
    al = memoryAGet(ds, 0x21df);
    sp += 2;
    cs = pop();
    return;
loc_282d0: // 27d2:05b0
    memoryASet(ds, 0x21df, 0x01);
    if (memoryAGet(ds, 0x21de) != 0x07)
        goto loc_282cc;
    memoryASet(ds, 0x21df, 0x00);
    goto loc_282cc;
}
void sub_282e3() // 27d2:05c3 +stackDrop2
{
    sp -= 2;
    sub_2826f();
    sp += 2;
    cs = pop();
}
void sub_282f0() // 282f:0000 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_2855b();
    push(cs);
    sub_2a392();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_282ff() // 282f:000f +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    ax = memoryAGet16(ss, bp + 6);
    if (ax < 0x0000)
        goto loc_2831b;
    if (ax <= 0x0015)
        goto loc_28322;
loc_2831b: // 282f:002b
    memoryASet16(ss, bp - 2, 0xfffa);
    goto loc_2832a;
loc_28322: // 282f:0032
    memoryASet16(ds, 0x21e0, ax);
    memoryASet16(ss, bp - 2, 0x0000);
loc_2832a: // 282f:003a
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_28337() // 282f:0047 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    memoryASet16(ss, bp - 2, 0x0000);
    ax = memoryAGet16(ds, 0x21e0);
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    if (ax >= 0x0000)
        goto loc_2835e;
    memoryASet16(ss, bp - 2, ax);
    goto loc_283ce;
loc_2835e: // 282f:006e
    di = ax;
    ax = dx;
    es = ax;
    bx = memoryAGet16(ss, bp + 6);
    if (bx != 0x0001)
        goto loc_283a0;
    memoryASet16(ds, 0x21e2, bx);
    memoryASet16(ds, 0x21e4, 0x0000);
    if (memoryAGet(es, di) == 0x09)
        goto loc_28396;
    push(bx);
    push(bp);
    ah = 0x0f;
    interrupt(0x10);
    bp = pop();
    bx = pop();
    if (al == memoryAGet(es, di + 22))
        goto loc_283ce;
    al = memoryAGet(es, di + 22);
    push(bp);
    ah = 0x00;
    interrupt(0x10);
    bp = pop();
    goto loc_283ce;
loc_28396: // 282f:00a6
    ax = 0x0002;
    push(cs); cs = 0x282f; sub_28f60(); assert(cs == 0x282f);
    goto loc_283ce;
loc_283a0: // 282f:00b0
    if (bx != 0x0000)
        goto loc_283c9;
    memoryASet16(ds, 0x21e2, bx);
    memoryASet16(ds, 0x21e4, 0x0000);
    if (memoryAGet(es, di) == 0x09)
        goto loc_283bf;
    al = 0x03;
    push(bp);
    ah = 0x00;
    interrupt(0x10);
    bp = pop();
    goto loc_283ce;
loc_283bf: // 282f:00cf
    ax = 0x0020;
    push(cs); cs = 0x282f; sub_28f60(); assert(cs == 0x282f);
    goto loc_283ce;
loc_283c9: // 282f:00d9
    memoryASet16(ss, bp - 2, 0xfff9);
loc_283ce: // 282f:00de
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_283db() // 282f:00eb +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    ax = memoryAGet16(ds, 0x21e0);
    memoryASet16(ss, bp - 2, ax);
    if ((short)ax < (short)0x0000)
        goto loc_283fa;
    if ((short)ax <= (short)0x0015)
        goto loc_283ff;
loc_283fa: // 282f:010a
    memoryASet16(ss, bp - 2, 0xfffa);
loc_283ff: // 282f:010f
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2849c() // 282f:01ac +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    ax = memoryAGet16(ss, bp + 6);
    if (ax < 0x0000)
        goto loc_284b8;
    if (ax <= 0x0015)
        goto loc_284bf;
loc_284b8: // 282f:01c8
    memoryASet16(ss, bp - 2, 0xfffa);
    goto loc_284e7;
loc_284bf: // 282f:01cf
    di = 0x2ea2;
    ax = 0x0038;
    cx = memoryAGet16(ss, bp + 6);
    mul16(cx);
    di += ax;
    ax = 0x2fd7;
    es = ax;
    ax = di;
    dx = es;
    bl = memoryAGet(es, di);
    if (bl == memoryAGet(ss, bp + 6))
        goto loc_284e4;
    memoryASet16(ss, bp - 2, 0xfc19);
    goto loc_284e7;
loc_284e4: // 282f:01f4
    memoryASet16(ss, bp - 2, ax);
loc_284e7: // 282f:01f7
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2855b() // 282f:026b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ds, 0x21e0, 0xffff);
    memoryASet16(ds, 0x21e2, 0xffff);
    memoryASet16(ds, 0x21e4, 0xffff);
    memoryASet16(ds, 0x21e6, 0x0001);
    memoryASet16(ds, 0x2a90, 0xffff);
    memoryASet16(ds, 0x2a8c, 0xffff);
    memoryASet16(ds, 0x2a8e, 0xffff);
    memoryASet16(ds, 0x2a8a, 0x0800);
    memoryASet(ds, 0x2a96, 0x00);
    memoryASet(ds, 0x2a97, 0x00);
    memoryASet(ds, 0x2a98, 0x00);
    memoryASet(ds, 0x2a99, 0x00);
    memoryASet(ds, 0x2a9a, 0x00);
    ax = 0x2fd7;
    es = ax;
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0000;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x00);
    memoryASet(ds, bx + 22, 0x04);
    memoryASet(ds, bx + 23, 0x02);
    memoryASet16(ds, bx + 24, 0x0140);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xb800);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0001);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0001;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x01);
    memoryASet(ds, bx + 22, 0x06);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xb800);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0002);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0002;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x02);
    memoryASet(ds, bx + 22, 0x0d);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0140);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x08);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x2000);
    memoryASet16(ds, bx + 34, 0x0003);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0003;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x03);
    memoryASet(ds, bx + 22, 0x0e);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x04);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x4000);
    memoryASet16(ds, bx + 34, 0x0003);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0004;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x04);
    memoryASet(ds, bx + 22, 0x0f);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x015e);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x02);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x8000);
    memoryASet16(ds, bx + 34, 0x0000);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0005;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x05);
    memoryASet(ds, bx + 22, 0x10);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x015e);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x02);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x8000);
    memoryASet16(ds, bx + 34, 0x0003);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0006;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x06);
    memoryASet(ds, bx + 22, 0x11);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0000);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0007;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x07);
    memoryASet(ds, bx + 22, 0x12);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0004);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0008;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x08);
    memoryASet(ds, bx + 22, 0x13);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0140);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0009;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x09);
    memoryASet(ds, bx + 22, 0x00);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x02d0);
    memoryASet16(ds, bx + 26, 0x015c);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x02);
    memoryASet16(ds, bx + 30, 0xb000);
    memoryASet16(ds, bx + 32, 0x8000);
    memoryASet16(ds, bx + 34, 0x0000);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x000a;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0a);
    memoryASet(ds, bx + 22, 0x29);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0004);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x000b;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0b);
    memoryASet(ds, bx + 22, 0x2d);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x015e);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x000c;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0c);
    memoryASet(ds, bx + 22, 0x2e);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x000d;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0d);
    memoryASet(ds, bx + 22, 0x30);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x000e;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0e);
    memoryASet(ds, bx + 22, 0x58);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0004);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x000f;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0f);
    memoryASet(ds, bx + 22, 0x59);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0000);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0010;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x10);
    memoryASet(ds, bx + 22, 0x5e);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x0190);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0011;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x11);
    memoryASet(ds, bx + 22, 0x5f);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0012;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x12);
    memoryASet(ds, bx + 22, 0x16);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0004);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0013;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x13);
    memoryASet(ds, bx + 22, 0x1a);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x0190);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0014;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x14);
    memoryASet(ds, bx + 22, 0x1b);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x2ea2;
    ax = 0x0038;
    cx = 0x0015;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x15);
    memoryASet(ds, bx + 22, 0x1d);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    si = 0x3372;
    memoryASet(ds, si, 0x35);
    si++;
    memoryASet(ds, si, 0x2d);
    si++;
    memoryASet(ds, si, 0x2e);
    si++;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x5b);
    si++;
    memoryASet(ds, si, 0x02);
    si++;
    memoryASet(ds, si, 0x57);
    si++;
    memoryASet(ds, si, 0x57);
    si++;
    memoryASet(ds, si, 0x02);
    si++;
    memoryASet(ds, si, 0x03);
    si++;
    memoryASet(ds, si, 0x00);
    si++;
    memoryASet(ds, si, 0x00);
    si++;
    si = 0x337e;
    memoryASet(ds, si, 0x61);
    si++;
    memoryASet(ds, si, 0x50);
    si++;
    memoryASet(ds, si, 0x52);
    si++;
    memoryASet(ds, si, 0x0f);
    si++;
    memoryASet(ds, si, 0x19);
    si++;
    memoryASet(ds, si, 0x06);
    si++;
    memoryASet(ds, si, 0x19);
    si++;
    memoryASet(ds, si, 0x19);
    si++;
    memoryASet(ds, si, 0x02);
    si++;
    memoryASet(ds, si, 0x0d);
    si++;
    memoryASet(ds, si, 0x0b);
    si++;
    memoryASet(ds, si, 0x0c);
    si++;
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_28f60() // 282f:0c70 +far +stackDrop2
{
    sp -= 2;
    push(ax);
    if (al == 0x02)
        goto loc_28f72;
    si = 0x337e;
    bx = 0x0720;
    push(bx);
    bx = 0x07d0;
    push(bx);
    goto loc_28f7d;
loc_28f72: // 282f:0c82
    si = 0x3372;
    bx = 0x0000;
    push(bx);
    bx = 0x4000;
    push(bx);
loc_28f7d: // 282f:0c8d
    ah = al;
    al = ah;
    dx = 0x03b8;
    out8(dx, al);
    cx = 0x000c;
    ah = 0;
    flags.direction = 0;
loc_28f8b: // 282f:0c9b
    al = ah;
    dx = 0x03b4;
    out8(dx, al);
    al = lodsb<DS_SI>();
    bl = al;
    al = bl;
    dx = 0x03b5;
    out8(dx, al);
    ah++;
    if (--cx)
        goto loc_28f8b;
    cx = pop();
    ax = 0xb000;
    es = ax;
    di = 0;
    ax = pop();
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    bx = pop();
    bl += 0x08;
    al = bl;
    dx = 0x03b8;
    out8(dx, al);
    sp += 2;
    cs = pop();
}
void sub_2901d() // 282f:0d2d +far +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x001e;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    if (memoryAGet(ds, 0x2a96) == 0x01)
        goto loc_29038;
    push(cs); cs = 0x282f; sub_290b7(); assert(cs == 0x282f);
loc_29038: // 282f:0d48
    ax = memoryAGet16(ds, 0x21e6);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 16);
    ds = ax;
    si = memoryAGet16(ss, bp + 14);
    memoryASet16(ss, bp - 8, si);
    bx = memoryAGet16(ss, bp + 12);
    bx += memoryAGet16(ss, bp - 8);
    bx--;
    memoryASet16(ss, bp - 10, bx);
    al = memoryAGet(ds, si);
    if (al == 0x0a)
        goto loc_29060;
    memoryASet16(ss, bp - 2, 0xfffb);
    goto loc_290aa;
loc_29060: // 282f:0d70
    push(cs); cs = 0x282f; sub_283db(); assert(cs == 0x282f);
    if ((short)ax >= (short)0x0000)
        goto loc_2906f;
    memoryASet16(ss, bp - 2, ax);
    goto loc_290aa;
loc_2906f: // 282f:0d7f
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    if (ax >= 0x0000)
        goto loc_29081;
    memoryASet16(ss, bp - 2, 0xfc19);
    goto loc_290aa;
loc_29081: // 282f:0d91
    di = ax;
    ax = dx;
    es = ax;
    if (memoryAGet16(ss, bp - 4) != 0x0001)
        goto loc_290a6;
    if (memoryAGet(es, di) == 0x09)
        goto loc_290a6;
    push(bp);
    ah = 0x0f;
    interrupt(0x10);
    bp = pop();
    if (al == memoryAGet(es, di + 22))
        goto loc_290a6;
    memoryASet16(ss, bp - 2, 0xfff9);
    goto loc_290aa;
loc_290a6: // 282f:0db6
    assert(memoryAGet16(es, di + 36 + 2) == cs);
    switch (memoryAGet16(es, di + 36))
    {
        case 0x10d7: goto loc_293c7;
        default:
            stop("ind 282f:0db6");
    }
loc_290aa: // 282f:0dba
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
    return;
    // gap 784 bytes
loc_293c7: // 282f:10d7
    ax = memoryAGet16(es, di + 24);
    cl = 0x03;
    ax >>= cl;
    memoryASet16(ss, bp - 22, ax);
    memoryASet16(ss, bp - 14, 0x0000);
    ax = memoryAGet16(ds, si + 8);
    ax -= memoryAGet16(ds, si + 4);
    ax++;
    bx = memoryAGet16(ss, bp + 10);
    bx += ax;
    if (bx <= memoryAGet16(es, di + 24))
        goto loc_293f8;
    ax = memoryAGet16(es, di + 24);
    ax -= memoryAGet16(ss, bp + 10);
    ax++;
    if (!(al & 0x07))
        goto loc_293f8;
    ax++;
    al &= 0xf8;
loc_293f8: // 282f:1108
    bl = memoryAGet(ds, si + 3);
    bh = 0;
    mul16(bx);
    bl = 0x08;
    div8(bl);
    cl = ah;
    ah = 0;
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) - 1);
    if (cl == 0x00)
        goto loc_29423;
    memoryASet16(ss, bp - 14, 0x0001);
    al = 0x80;
    cl--;
    al = sar8(al, cl);
    memoryASet(ss, bp - 12, al);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
loc_29423: // 282f:1133
    al = 0x05;
    dx = 0x03ce;
    out8(dx, al);
    dx++;
    al = 0x00;
    out8(dx, al);
    al = 0x08;
    dx = 0x03ce;
    out8(dx, al);
    dx++;
    al = 0xff;
    out8(dx, al);
    memoryASet(ss, bp - 24, 0x01);
    al = 0x02;
    dx = 0x03c4;
    out8(dx, al);
    dx++;
    al = memoryAGet(ss, bp - 24);
    out8(dx, al);
    memoryASet16(ss, bp - 28, 0x0001);
    memoryASet16(ss, bp - 26, 0x0008);
    if (memoryAGet(ds, si + 65) != 0x03)
        goto loc_2945b;
    memoryASet16(ss, bp - 26, 0x0004);
loc_2945b: // 282f:116b
    if (memoryAGet(ds, si + 65) != 0x01)
        goto loc_29475;
    memoryASet16(ss, bp - 28, 0x000f);
    memoryASet16(ss, bp - 26, 0x0001);
    al = 0x02;
    dx = 0x03c4;
    out8(dx, al);
    dx++;
    al = 0x0f;
    out8(dx, al);
loc_29475: // 282f:1185
    ax = memoryAGet16(es, di + 32);
    bx = memoryAGet16(ss, bp + 6);
    mul16(bx);
    dx = ax;
    ax = memoryAGet16(ss, bp + 10);
    cl = 0x03;
    ax >>= cl;
    dx += ax;
    ax = memoryAGet16(ss, bp + 8);
    if (memoryAGet16(ss, bp - 22) == 0x0050)
        goto loc_294a6;
    if (memoryAGet16(ss, bp - 22) == 0x0064)
        goto loc_294b4;
    cl = 0x03;
    ax <<= cl;
    dx += ax;
    ax <<= 1;
    ax <<= 1;
    dx += ax;
    goto loc_294c6;
loc_294a6: // 282f:11b6
    cl = 0x04;
    ax <<= cl;
    dx += ax;
    ax <<= 1;
    ax <<= 1;
    dx += ax;
    goto loc_294c6;
loc_294b4: // 282f:11c4
    ax <<= 1;
    ax <<= 1;
    dx += ax;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    dx += ax;
    ax <<= 1;
    dx += ax;
loc_294c6: // 282f:11d6
    ax = memoryAGet16(ds, si + 10);
    ax -= memoryAGet16(ds, si + 6);
    ax++;
    memoryASet16(ss, bp - 18, ax);
    bx = memoryAGet16(ss, bp + 8);
    bx += ax;
    if (bx <= memoryAGet16(es, di + 26))
        goto loc_294e6;
    ax = memoryAGet16(es, di + 26);
    ax -= memoryAGet16(ss, bp + 8);
    ax++;
    memoryASet16(ss, bp - 18, ax);
loc_294e6: // 282f:11f6
    bx = 0x0000;
    ax = memoryAGet16(es, di + 30);
    es = ax;
    di = dx;
    ax = memoryAGet16(ds, si + 66);
    memoryASet16(ss, bp - 20, ax);
    si += 0x0080;
    flags.direction = 0;
loc_294fc: // 282f:120c
    cx = 0x0001;
    al = lodsb<DS_SI>();
    ah = al;
    ah &= 0xc0;
    if (ah != 0xc0)
        goto loc_29510;
    cl = al;
    cl -= 0xc0;
    al = lodsb<DS_SI>();
loc_29510: // 282f:1220
    if (bx < memoryAGet16(ss, bp - 16))
        goto loc_2953e;
    if (bx > memoryAGet16(ss, bp - 16))
        goto loc_29541;
    if (memoryAGet16(ss, bp - 14) != 0x0001)
        goto loc_2953e;
    push(ax);
    al = 0x08;
    dx = 0x03ce;
    out8(dx, al);
    dx++;
    al = memoryAGet(ss, bp - 12);
    out8(dx, al);
    al = memoryAGet(es, bx + di);
    ax = pop();
    memoryASet(es, bx + di, al);
    push(ax);
    al = 0x08;
    dx = 0x03ce;
    out8(dx, al);
    dx++;
    al = 0xff;
    out8(dx, al);
    ax = pop();
    goto loc_29541;
loc_2953e: // 282f:124e
    memoryASet(es, bx + di, al);
loc_29541: // 282f:1251
    bx++;
    if (bx != memoryAGet16(ss, bp - 20))
        goto loc_2956f;
    bx = 0;
    dx = memoryAGet16(ss, bp - 26);
    memoryASet(ss, bp - 24, memoryAGet(ss, bp - 24) << 1);
    if (memoryAGet(ss, bp - 24) <= dl)
        goto loc_29562;
    dx = memoryAGet16(ss, bp - 28);
    memoryASet(ss, bp - 24, dl);
    di += memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) - 1);
    if (!memoryAGet16(ss, bp - 18))
        goto loc_2958a;
loc_29562: // 282f:1272
    push(ax);
    al = 0x02;
    dx = 0x03c4;
    out8(dx, al);
    dx++;
    al = memoryAGet(ss, bp - 24);
    out8(dx, al);
    ax = pop();
loc_2956f: // 282f:127f
    if (--cx)
        goto loc_29510;
    if (si <= memoryAGet16(ss, bp - 10))
        goto loc_29587;
    push(si);
    push(cs); cs = 0x282f; sub_29cd3(); assert(cs == 0x282f);
    si = ax;
    if (!flags.carry)
        goto loc_29587;
    memoryASet16(ss, bp - 2, 0xfffd);
    goto loc_29599;
loc_29587: // 282f:1297
    goto loc_294fc;
loc_2958a: // 282f:129a
    al = 0x02;
    dx = 0x03c4;
    out8(dx, al);
    dx++;
    al = 0xff;
    out8(dx, al);
    memoryASet16(ss, bp - 2, 0x0000);
loc_29599: // 282f:12a9
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_290b7() // 282f:0dc7 +far +stackDrop2
{
    sp -= 2;
    ax = 0x0000;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x0f9b);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x0f9b);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x12b6);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x137a);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x000a;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x000b;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x15d1);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x15d1);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x000d;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x15d1);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x000f;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x14a7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0011;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x14a7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x16f5);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x16f5);
    memoryASet16(ds, bx + 38, 0x282f);
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x282f; sub_2849c(); assert(cs == 0x282f);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x16f5);
    memoryASet16(ds, bx + 38, 0x282f);
    memoryASet(ds, 0x2a96, 0x01);
    sp += 2;
    cs = pop();
}
void sub_29c05() // 282f:1915 +far +stackDrop12
{
    sp -= 2;
    //stop("breakpoint");
    push(bp);
    bp = sp;
    sp -= 0x0084;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    push(ds);
    flags.direction = 0;
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    ax = ss;
    es = ax;
    si = memoryAGet16(ss, bp + 12);
    cl = memoryAGet(ds, si);
    ch = 0;
    si++;
    di = bp;
    di -= 0x0084;
    memoryASet16(ss, bp + 14, es);
    memoryASet16(ss, bp + 12, di);
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    memoryASet(es, di, 0x00);
    ds = pop();
    push(ds);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    al = 0x00;
    ah = 0x3d;
    interrupt(0x21);
    ds = pop();
    memoryASet16(ds, 0x2a90, ax);
    if (!flags.carry)
        goto loc_29c58;
    memoryASet16(ss, bp - 2, 0xffff);
    goto loc_29cc0;
loc_29c58: // 282f:1968
    ax = 0x2fd7;
    es = ax;
    di = 0x2280;
    if (memoryAGet16(ds, 0x2a8c) == 0xffff)
        goto loc_29c70;
    ax = memoryAGet16(ds, 0x2a8c);
    es = ax;
    di = memoryAGet16(ds, 0x2a8e);
loc_29c70: // 282f:1980
    memoryASet16(ds, 0x2a92, 0x0000);
    memoryASet16(ds, 0x2a94, 0x0000);
    push(ds);
    bx = memoryAGet16(ds, 0x2a90);
    cx = memoryAGet16(ds, 0x2a8a);
    dx = di;
    ax = es;
    ds = ax;
    ah = 0x3f;
    interrupt(0x21);
    ds = pop();
    if (!flags.carry)
        goto loc_29c99;
    memoryASet16(ss, bp - 2, 0xfffd);
    goto loc_29cb8;
loc_29c99: // 282f:19a9
    ax = es;
    push(ax);
    push(di);
    ax = memoryAGet16(ds, 0x2a8a);
    ax -= 0x000a;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    push(ax);
    push(cs); cs = 0x282f; sub_2901d(); assert(cs == 0x282f);
    memoryASet16(ss, bp - 2, ax);
loc_29cb8: // 282f:19c8
    bx = memoryAGet16(ds, 0x2a90);
    ah = 0x3e;
    interrupt(0x21);
loc_29cc0: // 282f:19d0
    memoryASet16(ds, 0x2a90, 0xffff);
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_29cd3() // 282f:19e3 +far +returnCarry +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    push(bx);
    push(cx);
    push(dx);
    if (memoryAGet16(ds, 0x2a90) != 0xffff)
        goto loc_29cef;
    flags.carry = 1;
    goto loc_29d3f;
loc_29cef: // 282f:19ff
    ax = ds;
    es = ax;
    di = 0x2280;
    if (memoryAGet16(ds, 0x2a8c) == 0xffff)
        goto loc_29d06;
    ax = memoryAGet16(ds, 0x2a8c);
    es = ax;
    di = memoryAGet16(ds, 0x2a8e);
loc_29d06: // 282f:1a16
    ax = memoryAGet16(ss, bp + 6);
    ax -= di;
    flags.carry = (memoryAGet16(ds, 0x2a94) + ax) >= 0x10000;
    memoryASet16(ds, 0x2a94, memoryAGet16(ds, 0x2a94) + ax);
    if (!flags.carry)
        goto loc_29d16;
    memoryASet16(ds, 0x2a92, memoryAGet16(ds, 0x2a92) + 0x0001);
loc_29d16: // 282f:1a26
    bx = memoryAGet16(ds, 0x2a90);
    cx = memoryAGet16(ds, 0x2a92);
    dx = memoryAGet16(ds, 0x2a94);
    al = 0x00;
    ah = 0x42;
    interrupt(0x21);
    push(ds);
    bx = memoryAGet16(ds, 0x2a90);
    cx = memoryAGet16(ds, 0x2a8a);
    dx = di;
    ax = es;
    ds = ax;
    ah = 0x3f;
    interrupt(0x21);
    ds = pop();
    memoryASet16(ss, bp - 2, di);
loc_29d3f: // 282f:1a4f
    dx = pop();
    cx = pop();
    bx = pop();
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2a392() // 282f:20a2 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2fd7;
    ds = ax;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ds, 0x2e9e, 0x0000);
    memoryASet16(ds, 0x2ea0, 0x0001);
    memoryASet16(ds, 0x338a, 0x0000);
    memoryASet16(ds, 0x338c, 0x0000);
    memoryASet16(ds, 0x338e, 0x0001);
    memoryASet16(ds, 0x3390, 0x0001);
    si = 0x3395;
    memoryASet(ds, si, 0x02);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x45);
    si++;
    si = 0x3398;
    memoryASet(ds, si, 0x05);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x26);
    si++;
    memoryASet(ds, si, 0x6c);
    si++;
    memoryASet(ds, si, 0x31);
    si++;
    memoryASet(ds, si, 0x58);
    si++;
    si = 0x339e;
    memoryASet(ds, si, 0x05);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x26);
    si++;
    memoryASet(ds, si, 0x6c);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x4f);
    si++;
    si = 0x33a4;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x26);
    si++;
    memoryASet(ds, si, 0x6c);
    si++;
    memoryASet(ds, si, 0x32);
    si++;
    memoryASet(ds, si, 0x45);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x39);
    si++;
    si = 0x33ac;
    memoryASet(ds, si, 0x05);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x26);
    si++;
    memoryASet(ds, si, 0x6c);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x48);
    si++;
    si = 0x33b2;
    memoryASet(ds, si, 0x03);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x70);
    si++;
    si = 0x33c0;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x74);
    si++;
    memoryASet(ds, si, 0x31);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x52);
    si++;
    si = 0x33c8;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x74);
    si++;
    memoryASet(ds, si, 0x31);
    si++;
    memoryASet(ds, si, 0x35);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x52);
    si++;
    si = 0x33d0;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x74);
    si++;
    memoryASet(ds, si, 0x33);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x52);
    si++;
    si = 0x33d8;
    memoryASet(ds, si, 0x05);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x72);
    si++;
    memoryASet(ds, si, 0x31);
    si++;
    memoryASet(ds, si, 0x41);
    si++;
    si = 0x33de;
    memoryASet(ds, si, 0x04);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x72);
    si++;
    memoryASet(ds, si, 0x42);
    si++;
    si = 0x33e3;
    memoryASet(ds, si, 0x03);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x62);
    si++;
    si = 0x33f3;
    memoryASet16(ds, si, 0xca00);
    si += 0x0002;
    memoryASet16(ds, si, 0x3b9a);
    si += 0x0002;
    memoryASet16(ds, si, 0xe100);
    si += 0x0002;
    memoryASet16(ds, si, 0x05f5);
    si += 0x0002;
    memoryASet16(ds, si, 0x9680);
    si += 0x0002;
    memoryASet16(ds, si, 0x0098);
    si += 0x0002;
    memoryASet16(ds, si, 0x4240);
    si += 0x0002;
    memoryASet16(ds, si, 0x000f);
    si += 0x0002;
    memoryASet16(ds, si, 0x86a0);
    si += 0x0002;
    memoryASet16(ds, si, 0x0001);
    si += 0x0002;
    memoryASet16(ds, si, 0x2710);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    memoryASet16(ds, si, 0x03e8);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    memoryASet16(ds, si, 0x0064);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    memoryASet16(ds, si, 0x000a);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    memoryASet16(ds, si, 0x0001);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a5b0() // 2a5b:0000 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = 0;
    push(ax);
    push(cs);
    sub_2a67c();
    memoryASet16(ss, bp - 4, ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2a67c();
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet16(ss, bp - 4) != 0xffff)
        goto loc_2a5dd;
    if (memoryAGet16(ss, bp - 6) != 0xffff)
        goto loc_2a5dd;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_2a5e1;
loc_2a5dd: // 2a5b:002d
    memoryASet(ss, bp - 1, 0x01);
loc_2a5e1: // 2a5b:0031
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a5e8() // 2a5b:0038 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    dx = 0x0201;
    al = in8(dx);
    al &= 0x10;
    if (!al)
        goto loc_2a5fc;
    al = 0x00;
    goto loc_2a5fe;
loc_2a5fc: // 2a5b:004c
    al = 0x01;
loc_2a5fe: // 2a5b:004e
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a608() // 2a5b:0058 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    dx = 0x0201;
    al = in8(dx);
    al &= 0x20;
    if (!al)
        goto loc_2a61c;
    al = 0x00;
    goto loc_2a61e;
loc_2a61c: // 2a5b:006c
    al = 0x01;
loc_2a61e: // 2a5b:006e
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a628() // 2a5b:0078 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a67c() // 2a5b:00cc +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0x0201;
    ax = memoryAGet16(ss, bp + 6);
    cl = al;
    ah = 0x01;
    ah <<= cl;
    cx = 0xffff;
loc_2a68e: // 2a5b:00de
    al = in8(dx);
    if (--cx && al & ah)
        goto loc_2a68e;
    cx = 0xffff;
    flags.interrupts = 0;
    out8(dx, al);
loc_2a698: // 2a5b:00e8
    al = in8(dx);
    if (--cx && al & ah)
        goto loc_2a698;
    flags.interrupts = 1;
    cx = -cx;
    cx += 0xffff;
    ax = cx;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2a6b0() // 2a6b:0000 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    if (memoryAGet(ds, 0x34ae) != 0x00)
        goto loc_2a6c0;
    goto loc_2a7af;
loc_2a6c0: // 2a6b:0010
    ax = memoryAGet16(ss, bp + 6);
    if ((short)ax < (short)0x0001)
        goto loc_2a6e4;
    if ((short)ax > (short)0x000c)
        goto loc_2a6e4;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0262;
    mul16(dx);
    di = memoryAGet16(ds, 0x341e); es = memoryAGet16(ds, 0x341e + 2);
    di += ax;
    ax = memoryAGet16(es, di + 65526);
    memoryASet16(ss, bp - 2, ax);
    goto loc_2a72a;
loc_2a6e4: // 2a6b:0034
    if ((short)ax < (short)0x000d)
        goto loc_2a708;
    if ((short)ax > (short)0x0018)
        goto loc_2a708;
    ax = memoryAGet16(ss, bp + 6);
    ax -= 0x000c;
    dx = 0x0262;
    mul16(dx);
    di = memoryAGet16(ds, 0x3422); es = memoryAGet16(ds, 0x3422 + 2);
    di += ax;
    ax = memoryAGet16(es, di + 65526);
    memoryASet16(ss, bp - 2, ax);
    goto loc_2a72a;
loc_2a708: // 2a6b:0058
    if ((short)ax < (short)0x0019)
        goto loc_2a72a;
    if ((short)ax > (short)0x0024)
        goto loc_2a72a;
    ax = memoryAGet16(ss, bp + 6);
    ax -= 0x0018;
    dx = 0x0262;
    mul16(dx);
    di = memoryAGet16(ds, 0x3426); es = memoryAGet16(ds, 0x3426 + 2);
    di += ax;
    ax = memoryAGet16(es, di + 65526);
    memoryASet16(ss, bp - 2, ax);
loc_2a72a: // 2a6b:007a
    ax = memoryAGet16(ds, 0x34aa);
    if ((short)ax < (short)0x0001)
        goto loc_2a74e;
    if ((short)ax > (short)0x000c)
        goto loc_2a74e;
    ax = memoryAGet16(ds, 0x34aa);
    dx = 0x0262;
    mul16(dx);
    di = memoryAGet16(ds, 0x341e); es = memoryAGet16(ds, 0x341e + 2);
    di += ax;
    ax = memoryAGet16(es, di + 65526);
    memoryASet16(ss, bp - 2, ax);
    goto loc_2a794;
loc_2a74e: // 2a6b:009e
    if ((short)ax < (short)0x000d)
        goto loc_2a772;
    if ((short)ax > (short)0x0018)
        goto loc_2a772;
    ax = memoryAGet16(ds, 0x34aa);
    ax -= 0x000c;
    dx = 0x0262;
    mul16(dx);
    di = memoryAGet16(ds, 0x3422); es = memoryAGet16(ds, 0x3422 + 2);
    di += ax;
    ax = memoryAGet16(es, di + 65526);
    memoryASet16(ss, bp - 2, ax);
    goto loc_2a794;
loc_2a772: // 2a6b:00c2
    if ((short)ax < (short)0x0019)
        goto loc_2a794;
    if ((short)ax > (short)0x0024)
        goto loc_2a794;
    ax = memoryAGet16(ds, 0x34aa);
    ax -= 0x0018;
    dx = 0x0262;
    mul16(dx);
    di = memoryAGet16(ds, 0x3426); es = memoryAGet16(ds, 0x3426 + 2);
    di += ax;
    ax = memoryAGet16(es, di + 65526);
    memoryASet16(ss, bp - 2, ax);
loc_2a794: // 2a6b:00e4
    ax = memoryAGet16(ss, bp - 2);
    if ((short)ax < (short)memoryAGet16(ss, bp - 4))
        goto loc_2a7ad;
    memoryASet16(ds, 0x34ac, 0x0001);
    memoryASet(ds, 0x34ae, 0x01);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x34aa, ax);
loc_2a7ad: // 2a6b:00fd
    goto loc_2a7c0;
loc_2a7af: // 2a6b:00ff
    memoryASet16(ds, 0x34ac, 0x0001);
    memoryASet(ds, 0x34ae, 0x01);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x34aa, ax);
loc_2a7c0: // 2a6b:0110
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2a7c6() // 2a6b:0116 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a906() // 2a7d:0136 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2a916;
loc_2a913: // 2a7d:0143
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2a916: // 2a7d:0146
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x01);
    if (memoryAGet16(ss, bp - 2) != 0x0019)
        goto loc_2a913;
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
    push(cs); cs = 0x2baf; sub_2ea22(); assert(cs == 0x2a7d);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
    ax = 0;
    memoryASet16(ds, 0x70c6, ax);
    ax = 0;
    memoryASet16(ds, 0x70c8, ax);
    memoryASet16(ds, 0x70ba, 0x0048);
    memoryASet16(ds, 0x70bc, 0x0050);
    memoryASet16(ds, 0x70be, 0x004b);
    memoryASet16(ds, 0x70c0, 0x004d);
    memoryASet16(ds, 0x70c2, 0x0038);
    memoryASet16(ds, 0x70c4, 0x001d);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2a97a;
loc_2a977: // 2a7d:01a7
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2a97a: // 2a7d:01aa
    ax = memoryAGet16(ss, bp - 2);
    if (ax != 0x0001)
        goto loc_2a9a3;
    di = 0x0000;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2a9a3: // 2a7d:01d3
    if (ax != 0x0002)
        goto loc_2a9c9;
    di = 0x001f;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2a9c9: // 2a7d:01f9
    if (ax != 0x0003)
        goto loc_2a9ef;
    di = 0x003e;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2a9ef: // 2a7d:021f
    if (ax != 0x0004)
        goto loc_2aa15;
    di = 0x005d;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2aa15: // 2a7d:0245
    if (ax != 0x0005)
        goto loc_2aa3b;
    di = 0x007c;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2aa3b: // 2a7d:026b
    if (ax != 0x0006)
        goto loc_2aa61;
    di = 0x009b;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2aa61: // 2a7d:0291
    if (ax != 0x0007)
        goto loc_2aa86;
    di = 0x00ba;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2aa86: // 2a7d:02b6
    if (ax != 0x0008)
        goto loc_2aaab;
    di = 0x00d9;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2aaab: // 2a7d:02db
    if (ax != 0x0009)
        goto loc_2aad0;
    di = 0x00f8;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
    goto loc_2aaf3;
loc_2aad0: // 2a7d:0300
    if (ax != 0x000a)
        goto loc_2aaf3;
    di = 0x0117;
    push(cs);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0029;
    mul16(dx);
    di = ax;
    di += 0x6b1b;
    push(ds);
    push(di);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2a7d);
loc_2aaf3: // 2a7d:0323
    ax = memoryAGet16(ss, bp - 2);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ss, bp - 6); es = memoryAGet16(ss, bp - 6 + 2);
    dx = es;
    flags.carry = ax < 0x0001;
    ax -= 0x0001;
    dx = dx - 0x0000 - flags.carry;
    cx = 0x2710;
    bx = 0;
    push(cs); cs = 0x2ebd; sub_2ee49(); assert(cs == 0x2a7d);
    cx = ax;
    bx = dx;
    ax = 0x0d40;
    dx = 0x0003;
    flags.carry = ax < cx;
    ax -= cx;
    dx = dx - bx - flags.carry;
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    di <<= 1;
    memoryASet16(ds, di + 27866, ax);
    memoryASet16(ds, di + 27868, dx);
    if (memoryAGet16(ss, bp - 2) == 0x000a)
        goto loc_2ab38;
    goto loc_2a977;
loc_2ab38: // 2a7d:0368
    memoryASet(ds, 0x6ebf, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6ec6, 0x00);
    memoryASet(ds, 0x6ec7, 0x00);
    memoryASet(ds, 0x6ec8, 0x00);
    memoryASet(ds, 0x6ec9, 0x00);
    memoryASet(ds, 0x6ec2, 0x00);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ecd, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    memoryASet16(ds, 0x681c, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x6830, ax);
    memoryASet16(ds, 0x6840, 0x0010);
    ax = 0;
    memoryASet16(ds, 0x683e, ax);
    ax = 0;
    memoryASet16(ds, 0x683c, ax);
    ax = 0;
    memoryASet16(ds, 0x6820, ax);
    memoryASet(ds, 0x6836, 0x01);
    ax = 0;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, ax);
    memoryASet16(ds, 0x699e, 0x0001);
    memoryASet16(ds, 0x6858, 0x0005);
    memoryASet16(ds, 0x69a2, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x69a0, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2abcc;
loc_2abc9: // 2a7d:03f9
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2abcc: // 2a7d:03fc
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 26691, 0x00);
    if (memoryAGet16(ss, bp - 2) != 0x000f)
        goto loc_2abc9;
    ax = 0;
    memoryASet16(ds, 0x69a4, ax);
    ax = 0;
    memoryASet16(ds, 0x69a6, ax);
    ax = 0;
    memoryASet16(ds, 0x69a8, ax);
    memoryASet(ds, 0x69ad, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69aa, ax);
    memoryASet(ds, 0x69ac, 0x00);
    memoryASet(ds, 0x69b0, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69ae, ax);
    ax = 0;
    memoryASet16(ds, 0x69b2, ax);
    memoryASet(ds, 0x69ef, 0x00);
    memoryASet(ds, 0x69ec, 0x00);
    memoryASet(ds, 0x69ed, 0x00);
    memoryASet(ds, 0x69e8, 0x00);
    memoryASet(ds, 0x69e9, 0x00);
    memoryASet(ds, 0x69ea, 0x00);
    memoryASet(ds, 0x69eb, 0x00);
    memoryASet(ds, 0x69f3, 0x00);
    memoryASet(ds, 0x69f4, 0x00);
    memoryASet(ds, 0x69ee, 0x00);
    memoryASet(ds, 0x69b4, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69b6, ax);
    memoryASet16(ds, 0x69b8, 0x0001);
    memoryASet(ds, 0x69f0, 0x00);
    memoryASet(ds, 0x69f1, 0x00);
    memoryASet(ds, 0x69f2, 0x01);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2ac62;
loc_2ac5f: // 2a7d:048f
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2ac62: // 2a7d:0492
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27065, 0x00);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_2ac5f;
    memoryASet(ds, 0x69f5, 0x00);
    memoryASet(ds, 0x69f6, 0x23);
    memoryASet(ds, 0x6a3e, 0x00);
    memoryASet(ds, 0x6a3f, 0x08);
    memoryASet(ds, 0x6a40, 0x03);
    memoryASet(ds, 0x6a41, 0x00);
    memoryASet(ds, 0x6a42, 0x00);
    memoryASet(ds, 0x69ce, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x69d4, 0x00);
    memoryASet(ds, 0x69d5, 0x00);
    memoryASet(ds, 0x69d6, 0x00);
    memoryASet(ds, 0x69d9, 0x00);
    memoryASet(ds, 0x69da, 0x00);
    memoryASet(ds, 0x69db, 0x00);
    memoryASet(ds, 0x69dc, 0x00);
    memoryASet(ds, 0x69dd, 0x00);
    memoryASet(ds, 0x69de, 0x00);
    memoryASet(ds, 0x69df, 0x00);
    memoryASet(ds, 0x69cf, 0x00);
    memoryASet(ds, 0x69d0, 0x00);
    memoryASet(ds, 0x69d1, 0x00);
    memoryASet(ds, 0x69d2, 0x00);
    memoryASet(ds, 0x69d3, 0x00);
    memoryASet(ds, 0x69d7, 0x00);
    memoryASet(ds, 0x69d8, 0x00);
    memoryASet(ds, 0x69e0, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69e2, ax);
    ax = 0;
    memoryASet16(ds, 0x69e4, ax);
    ax = 0;
    memoryASet16(ds, 0x69e6, ax);
    ax = 0;
    memoryASet16(ds, 0x6d18, ax);
    ax = 0;
    memoryASet16(ds, 0x6d1a, ax);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    memoryASet16(ds, 0x6d1c, ax);
    memoryASet16(ds, 0x6d1e, dx);
    ax = memoryAGet16(ds, 0x699e);
    memoryASet16(ds, 0x6d20, ax);
    ax = memoryAGet16(ds, 0x6858);
    memoryASet16(ds, 0x6d22, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2ad33;
loc_2ad30: // 2a7d:0560
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2ad33: // 2a7d:0563
    di = memoryAGet16(ss, bp - 2);
    al = memoryAGet(ds, di + 26691);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27941, al);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_2ad30;
    ax = memoryAGet16(ds, 0x69a4);
    memoryASet16(ds, 0x6d3a, ax);
    ax = memoryAGet16(ds, 0x69a6);
    memoryASet16(ds, 0x6d3c, ax);
    al = memoryAGet(ds, 0x69ad);
    memoryASet(ds, 0x6d3e, al);
    ax = memoryAGet16(ds, 0x69aa);
    memoryASet16(ds, 0x6d3f, ax);
    al = memoryAGet(ds, 0x69ac);
    memoryASet(ds, 0x6d41, al);
    al = memoryAGet(ds, 0x69b0);
    memoryASet(ds, 0x6d42, al);
    ax = memoryAGet16(ds, 0x69ae);
    memoryASet16(ds, 0x6d43, ax);
    ax = memoryAGet16(ds, 0x69b2);
    memoryASet16(ds, 0x6d45, ax);
    ax = memoryAGet16(ds, 0x69b6);
    memoryASet16(ds, 0x6d47, ax);
    ax = memoryAGet16(ds, 0x69b8);
    memoryASet16(ds, 0x6d49, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2ad8d;
loc_2ad8a: // 2a7d:05ba
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2ad8d: // 2a7d:05bd
    di = memoryAGet16(ss, bp - 2);
    al = memoryAGet(ds, di + 27065);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27978, al);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_2ad8a;
    ax = 0;
    memoryASet16(ds, 0x6d60, ax);
    memoryASet(ds, 0x34b0, 0x00);
    memoryASet(ds, 0x34b1, 0x08);
    memoryASet(ds, 0x34b2, 0x08);
    memoryASet(ds, 0x34b3, 0x08);
    memoryASet(ds, 0x34b4, 0x04);
    memoryASet(ds, 0x34b5, 0x04);
    memoryASet(ds, 0x34b6, 0x02);
    memoryASet(ds, 0x34b7, 0x02);
    memoryASet(ds, 0x34b8, 0x02);
    memoryASet(ds, 0x34b9, 0x01);
    memoryASet(ds, 0x34ba, 0x01);
    memoryASet(ds, 0x34bb, 0x02);
    memoryASet(ds, 0x34bc, 0x02);
    memoryASet(ds, 0x34bd, 0x02);
    memoryASet(ds, 0x34be, 0x04);
    memoryASet(ds, 0x34bf, 0x04);
    memoryASet(ds, 0x34c0, 0x08);
    memoryASet(ds, 0x34c1, 0x08);
    memoryASet(ds, 0x34c2, 0x08);
    memoryASet(ds, 0x34ea, 0x12);
    memoryASet(ds, 0x34c4, 0x00);
    memoryASet(ds, 0x34c5, 0x08);
    memoryASet(ds, 0x34c6, 0x08);
    memoryASet(ds, 0x34c7, 0x06);
    memoryASet(ds, 0x34c8, 0x06);
    memoryASet(ds, 0x34c9, 0x04);
    memoryASet(ds, 0x34ca, 0x04);
    memoryASet(ds, 0x34cb, 0x04);
    memoryASet(ds, 0x34cc, 0x04);
    memoryASet(ds, 0x34cd, 0x04);
    memoryASet(ds, 0x34ce, 0x04);
    memoryASet(ds, 0x34cf, 0x02);
    memoryASet(ds, 0x34d0, 0x02);
    memoryASet(ds, 0x34d1, 0x02);
    memoryASet(ds, 0x34d2, 0x02);
    memoryASet(ds, 0x34d3, 0x02);
    memoryASet(ds, 0x34d4, 0x01);
    memoryASet(ds, 0x34d5, 0x01);
    memoryASet(ds, 0x34d6, 0x01);
    memoryASet(ds, 0x34d7, 0x01);
    memoryASet(ds, 0x34d8, 0x00);
    memoryASet(ds, 0x34d9, 0x00);
    memoryASet(ds, 0x34da, 0x00);
    memoryASet(ds, 0x34db, 0x02);
    memoryASet(ds, 0x34dc, 0x02);
    memoryASet(ds, 0x34dd, 0x02);
    memoryASet(ds, 0x34de, 0x02);
    memoryASet(ds, 0x34df, 0x04);
    memoryASet(ds, 0x34e0, 0x04);
    memoryASet(ds, 0x34e1, 0x04);
    memoryASet(ds, 0x34e2, 0x04);
    memoryASet(ds, 0x34e3, 0x04);
    memoryASet(ds, 0x34e4, 0x04);
    memoryASet(ds, 0x34e5, 0x04);
    memoryASet(ds, 0x34e6, 0x06);
    memoryASet(ds, 0x34e7, 0x06);
    memoryASet(ds, 0x34e8, 0x08);
    memoryASet(ds, 0x34e9, 0x08);
    memoryASet(ds, 0x34eb, 0x25);
    memoryASet16(ds, 0x69f8, 0xfff8);
    memoryASet16(ds, 0x69fa, 0xfff8);
    memoryASet16(ds, 0x69fc, 0xfff8);
    memoryASet16(ds, 0x69fe, 0xfff8);
    memoryASet16(ds, 0x6a00, 0xfff8);
    memoryASet16(ds, 0x6a02, 0xfff8);
    memoryASet16(ds, 0x6a04, 0xfff8);
    memoryASet16(ds, 0x6a06, 0xfff8);
    memoryASet16(ds, 0x6a08, 0xfff8);
    memoryASet16(ds, 0x6a0a, 0xfff8);
    memoryASet16(ds, 0x6a0c, 0xfff8);
    memoryASet16(ds, 0x6a0e, 0xfff8);
    memoryASet16(ds, 0x6a10, 0xfff8);
    memoryASet16(ds, 0x6a12, 0xfff8);
    memoryASet16(ds, 0x6a14, 0xfff8);
    memoryASet16(ds, 0x6a16, 0xfffa);
    memoryASet16(ds, 0x6a18, 0xfffa);
    memoryASet16(ds, 0x6a1a, 0xfffa);
    memoryASet16(ds, 0x6a1c, 0xfffa);
    memoryASet16(ds, 0x6a1e, 0xfffa);
    memoryASet16(ds, 0x6a20, 0xfffa);
    memoryASet16(ds, 0x6a22, 0xfffc);
    memoryASet16(ds, 0x6a24, 0xfffc);
    memoryASet16(ds, 0x6a26, 0xfffc);
    memoryASet16(ds, 0x6a28, 0xfffc);
    ax = 0;
    memoryASet16(ds, 0x6a2a, ax);
    ax = 0;
    memoryASet16(ds, 0x6a2c, ax);
    ax = 0;
    memoryASet16(ds, 0x6a2e, ax);
    memoryASet16(ds, 0x6a30, 0x0004);
    memoryASet16(ds, 0x6a32, 0x0004);
    memoryASet16(ds, 0x6a34, 0x0008);
    memoryASet16(ds, 0x6a36, 0x0008);
    memoryASet16(ds, 0x6a38, 0x0008);
    memoryASet16(ds, 0x6a3a, 0x0008);
    memoryASet16(ds, 0x6a3c, 0x0008);
    memoryASet(ds, 0x6d66, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2afa5() // 2a7d:07d5 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet(ds, 0x6d66, 0x00);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2afba;
loc_2afb7: // 2a7d:07e7
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2afba: // 2a7d:07ea
    di = memoryAGet16(ss, bp - 2);
    cl = 0x05;
    di <<= cl;
    memoryASet(ds, di + 13546, 0x01);
    if (memoryAGet16(ss, bp - 2) != 0x0019)
        goto loc_2afb7;
    ax = 0;
    memoryASet16(ds, 0x6838, ax);
    push(cs); cs = 0x2baf; sub_2ea22(); assert(cs == 0x2a7d);
    memoryASet16(ds, 0x6832, 0xffff);
    ax = 0;
    memoryASet16(ds, 0x683a, ax);
    ax = 0;
    memoryASet16(ds, 0x682c, ax);
    memoryASet(ds, 0x6ebf, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6ec6, 0x00);
    memoryASet(ds, 0x6ec7, 0x00);
    memoryASet(ds, 0x6ec8, 0x00);
    memoryASet(ds, 0x6ec9, 0x00);
    memoryASet(ds, 0x6ec2, 0x00);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ecd, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    memoryASet16(ds, 0x681c, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x6830, ax);
    memoryASet16(ds, 0x6840, 0x0010);
    ax = 0;
    memoryASet16(ds, 0x683e, ax);
    ax = 0;
    memoryASet16(ds, 0x683c, ax);
    ax = 0;
    memoryASet16(ds, 0x6820, ax);
    memoryASet(ds, 0x6836, 0x01);
    ax = 0;
    memoryASet16(ds, 0x699a, ax);
    memoryASet16(ds, 0x699c, ax);
    memoryASet16(ds, 0x699e, 0x0001);
    memoryASet16(ds, 0x6858, 0x0005);
    memoryASet16(ds, 0x69a2, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x69a0, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2b07a;
loc_2b077: // 2a7d:08a7
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2b07a: // 2a7d:08aa
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 26691, 0x00);
    if (memoryAGet16(ss, bp - 2) != 0x000f)
        goto loc_2b077;
    ax = 0;
    memoryASet16(ds, 0x69a4, ax);
    ax = 0;
    memoryASet16(ds, 0x69a6, ax);
    ax = 0;
    memoryASet16(ds, 0x69a8, ax);
    memoryASet(ds, 0x69ad, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69aa, ax);
    memoryASet(ds, 0x69ac, 0x00);
    memoryASet(ds, 0x69b0, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69ae, ax);
    ax = 0;
    memoryASet16(ds, 0x69b2, ax);
    memoryASet(ds, 0x69ef, 0x00);
    memoryASet(ds, 0x69ec, 0x00);
    memoryASet(ds, 0x69ed, 0x00);
    memoryASet(ds, 0x69e8, 0x00);
    memoryASet(ds, 0x69e9, 0x00);
    memoryASet(ds, 0x69ea, 0x00);
    memoryASet(ds, 0x69eb, 0x00);
    memoryASet(ds, 0x69f3, 0x00);
    memoryASet(ds, 0x69f4, 0x00);
    memoryASet(ds, 0x69ee, 0x00);
    memoryASet(ds, 0x69b4, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69b6, ax);
    memoryASet16(ds, 0x69b8, 0x0001);
    memoryASet(ds, 0x69f0, 0x00);
    memoryASet(ds, 0x69f1, 0x00);
    memoryASet(ds, 0x69f2, 0x01);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2b110;
loc_2b10d: // 2a7d:093d
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2b110: // 2a7d:0940
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27065, 0x00);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_2b10d;
    memoryASet(ds, 0x69f5, 0x00);
    memoryASet(ds, 0x69f6, 0x23);
    memoryASet(ds, 0x69ce, 0x00);
    memoryASet(ds, 0x6a3e, 0x00);
    memoryASet(ds, 0x6a3f, 0x08);
    memoryASet(ds, 0x6a40, 0x03);
    memoryASet(ds, 0x6a41, 0x00);
    memoryASet(ds, 0x6a42, 0x00);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x69d4, 0x00);
    memoryASet(ds, 0x69d5, 0x00);
    memoryASet(ds, 0x69d6, 0x00);
    memoryASet(ds, 0x69d9, 0x00);
    memoryASet(ds, 0x69da, 0x00);
    memoryASet(ds, 0x69db, 0x00);
    memoryASet(ds, 0x69dc, 0x00);
    memoryASet(ds, 0x69dd, 0x00);
    memoryASet(ds, 0x69de, 0x00);
    memoryASet(ds, 0x69df, 0x00);
    memoryASet(ds, 0x69cf, 0x00);
    memoryASet(ds, 0x69d0, 0x00);
    memoryASet(ds, 0x69d1, 0x00);
    memoryASet(ds, 0x69d2, 0x00);
    memoryASet(ds, 0x69d3, 0x00);
    memoryASet(ds, 0x69d7, 0x00);
    memoryASet(ds, 0x69d8, 0x00);
    memoryASet(ds, 0x69e0, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69e2, ax);
    ax = 0;
    memoryASet16(ds, 0x69e4, ax);
    ax = 0;
    memoryASet16(ds, 0x69e6, ax);
    ax = 0;
    memoryASet16(ds, 0x6d18, ax);
    ax = 0;
    memoryASet16(ds, 0x6d1a, ax);
    ax = memoryAGet16(ds, 0x699a); es = memoryAGet16(ds, 0x699a + 2);
    dx = es;
    memoryASet16(ds, 0x6d1c, ax);
    memoryASet16(ds, 0x6d1e, dx);
    ax = memoryAGet16(ds, 0x699e);
    memoryASet16(ds, 0x6d20, ax);
    ax = memoryAGet16(ds, 0x6858);
    memoryASet16(ds, 0x6d22, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2b1e1;
loc_2b1de: // 2a7d:0a0e
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2b1e1: // 2a7d:0a11
    di = memoryAGet16(ss, bp - 2);
    al = memoryAGet(ds, di + 26691);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27941, al);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_2b1de;
    ax = memoryAGet16(ds, 0x69a4);
    memoryASet16(ds, 0x6d3a, ax);
    ax = memoryAGet16(ds, 0x69a6);
    memoryASet16(ds, 0x6d3c, ax);
    al = memoryAGet(ds, 0x69ad);
    memoryASet(ds, 0x6d3e, al);
    ax = memoryAGet16(ds, 0x69aa);
    memoryASet16(ds, 0x6d3f, ax);
    al = memoryAGet(ds, 0x69ac);
    memoryASet(ds, 0x6d41, al);
    al = memoryAGet(ds, 0x69b0);
    memoryASet(ds, 0x6d42, al);
    ax = memoryAGet16(ds, 0x69ae);
    memoryASet16(ds, 0x6d43, ax);
    ax = memoryAGet16(ds, 0x69b2);
    memoryASet16(ds, 0x6d45, ax);
    ax = memoryAGet16(ds, 0x69b6);
    memoryASet16(ds, 0x6d47, ax);
    ax = memoryAGet16(ds, 0x69b8);
    memoryASet16(ds, 0x6d49, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2b23b;
loc_2b238: // 2a7d:0a68
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2b23b: // 2a7d:0a6b
    di = memoryAGet16(ss, bp - 2);
    al = memoryAGet(ds, di + 27065);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 27978, al);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_2b238;
    al = memoryAGet(ds, 0x69dc);
    memoryASet(ds, 0x6d5f, al);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2b259() // 2a7d:0a89 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet(ds, 0x6d66, 0x00);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2baf; sub_2c115(); assert(cs == 0x2a7d);
    ax = 0;
    push(ax);
    ax = 0x0050;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2baf; sub_2c2de(); assert(cs == 0x2a7d);
    push(cs); cs = 0x2baf; sub_2ea22(); assert(cs == 0x2a7d);
    memoryASet16(ds, 0x6832, 0xffff);
    memoryASet(ds, 0x6ebf, 0x00);
    memoryASet(ds, 0x6eca, 0x00);
    memoryASet(ds, 0x6ecb, 0x00);
    memoryASet(ds, 0x6ec3, 0x00);
    memoryASet(ds, 0x6ec4, 0x00);
    memoryASet(ds, 0x6ec5, 0x00);
    memoryASet(ds, 0x6ec6, 0x00);
    memoryASet(ds, 0x6ec7, 0x00);
    memoryASet(ds, 0x6ec8, 0x00);
    memoryASet(ds, 0x6ec9, 0x00);
    memoryASet(ds, 0x6ec2, 0x00);
    memoryASet(ds, 0x6ec1, 0x00);
    memoryASet(ds, 0x6ecd, 0x00);
    memoryASet(ds, 0x6ec0, 0x00);
    ax = 0;
    memoryASet16(ds, 0x6830, ax);
    ax = 0;
    memoryASet16(ds, 0x6820, ax);
    memoryASet(ds, 0x69ef, 0x00);
    memoryASet(ds, 0x69ec, 0x00);
    memoryASet(ds, 0x69ed, 0x00);
    memoryASet(ds, 0x69e8, 0x00);
    memoryASet(ds, 0x69e9, 0x00);
    memoryASet(ds, 0x69ea, 0x00);
    memoryASet(ds, 0x69eb, 0x00);
    memoryASet(ds, 0x69f4, 0x00);
    memoryASet(ds, 0x69ee, 0x00);
    memoryASet(ds, 0x69b4, 0x00);
    memoryASet(ds, 0x69f0, 0x00);
    memoryASet(ds, 0x69f1, 0x00);
    memoryASet(ds, 0x69f2, 0x01);
    ax = 0;
    memoryASet16(ds, 0x69a4, ax);
    ax = 0;
    memoryASet16(ds, 0x69a6, ax);
    ax = 0;
    memoryASet16(ds, 0x69a8, ax);
    memoryASet(ds, 0x69ad, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69aa, ax);
    memoryASet(ds, 0x69ac, 0x00);
    memoryASet(ds, 0x69b0, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69ae, ax);
    memoryASet(ds, 0x6816, 0x00);
    memoryASet(ds, 0x6a3e, 0x00);
    memoryASet(ds, 0x6a3f, 0x08);
    memoryASet(ds, 0x6a40, 0x03);
    memoryASet(ds, 0x6a41, 0x00);
    memoryASet(ds, 0x6a42, 0x00);
    memoryASet(ds, 0x69f5, 0x00);
    memoryASet(ds, 0x69f6, 0x23);
    memoryASet(ds, 0x69ce, 0x00);
    memoryASet(ds, 0x69d4, 0x00);
    memoryASet(ds, 0x69d5, 0x00);
    memoryASet(ds, 0x69d6, 0x00);
    memoryASet(ds, 0x69d9, 0x00);
    memoryASet(ds, 0x69da, 0x00);
    memoryASet(ds, 0x69db, 0x00);
    memoryASet(ds, 0x69dc, 0x00);
    memoryASet(ds, 0x69dd, 0x00);
    memoryASet(ds, 0x69de, 0x00);
    memoryASet(ds, 0x69df, 0x00);
    memoryASet(ds, 0x69cf, 0x00);
    memoryASet(ds, 0x69d0, 0x00);
    memoryASet(ds, 0x69d1, 0x00);
    memoryASet(ds, 0x69d2, 0x00);
    memoryASet(ds, 0x69d3, 0x00);
    memoryASet(ds, 0x69d7, 0x00);
    memoryASet(ds, 0x69d8, 0x00);
    memoryASet(ds, 0x69e0, 0x00);
    ax = 0;
    memoryASet16(ds, 0x69e2, ax);
    ax = 0;
    memoryASet16(ds, 0x69e4, ax);
    ax = 0;
    memoryASet16(ds, 0x69e6, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2b3dd() // 2a7d:0c0d +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2b3e4() // 2a7d:0c14 +far +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0054;
    push(si);
    push(di);
    push(ds);
    ax = ds;
    flags.interrupts = 0;
    memoryASet(ss, bp - 84, 0x43);
    memoryASet(ss, bp - 83, 0x6f);
    memoryASet(ss, bp - 82, 0x70);
    memoryASet(ss, bp - 81, 0x79);
    memoryASet(ss, bp - 80, 0x72);
    memoryASet(ss, bp - 79, 0x69);
    memoryASet(ss, bp - 78, 0x67);
    memoryASet(ss, bp - 77, 0x68);
    memoryASet(ss, bp - 76, 0x74);
    memoryASet(ss, bp - 75, 0x20);
    memoryASet(ss, bp - 74, 0x31);
    memoryASet(ss, bp - 73, 0x39);
    memoryASet(ss, bp - 72, 0x39);
    memoryASet(ss, bp - 71, 0x31);
    memoryASet(ss, bp - 70, 0x20);
    memoryASet(ss, bp - 69, 0x50);
    memoryASet(ss, bp - 68, 0x65);
    memoryASet(ss, bp - 67, 0x64);
    memoryASet(ss, bp - 66, 0x65);
    memoryASet(ss, bp - 65, 0x72);
    memoryASet(ss, bp - 64, 0x20);
    memoryASet(ss, bp - 63, 0x4a);
    memoryASet(ss, bp - 62, 0x75);
    memoryASet(ss, bp - 61, 0x6e);
    memoryASet(ss, bp - 60, 0x67);
    memoryASet(ss, bp - 59, 0x63);
    memoryASet(ss, bp - 58, 0x6b);
    memoryASet(ss, bp - 57, 0x00);
    memoryASet(ss, bp - 56, 0x00);
    memoryASet(ss, bp - 55, 0x00);
    di = 0;
    si = 0;
    goto loc_2b4bd;
loc_2b46e: // 2a7d:0c9e
    memoryASet(ss, bp - 3, 0x00);
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_2b49c;
loc_2b479: // 2a7d:0ca9
    bx = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    al = memoryAGet(es, bx + si);
    ah = 0x00;
    dx = 0x0001;
    cl = memoryAGet(ss, bp - 2);
    dx <<= cl;
    if (((short)dx & ax) <= 0) // TODO: CICO!
        goto loc_2b499;
    cl = 0x07;
    cl -= memoryAGet(ss, bp - 2);
    al = 0x01;
    al <<= cl;
    memoryASet(ss, bp - 3, memoryAGet(ss, bp - 3) | al);
loc_2b499: // 2a7d:0cc9
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2b49c: // 2a7d:0ccc
    if (memoryAGet16(ss, bp - 2) < 0x0008)
        goto loc_2b479;
    bx = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    al = memoryAGet(ss, bp - 3);
    memoryASet(es, bx + si, al);
    bx = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    al = memoryAGet(ss, bp + di + -84);
    memoryASet(es, bx + si, memoryAGet(es, bx + si) ^ al);
    di++;
    if (di <= 0x001b)
        goto loc_2b4bc;
    di = 0;
loc_2b4bc: // 2a7d:0cec
    si++;
loc_2b4bd: // 2a7d:0ced
    if (si < memoryAGet16(ss, bp + 6))
        goto loc_2b46e;
    flags.interrupts = 1;
    ds = pop();
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2b4d0() // 2b4d:0000 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sub_2b500();
    di = 0x7192;
    push(ds);
    push(di);
    push(cs);
    sub_2b7fe();
    di = 0x7192;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f7e2(); assert(cs == 0x2b4d);
    di = 0x7292;
    push(ds);
    push(di);
    push(cs);
    sub_2b7fe();
    di = 0x7292;
    push(ds);
    push(di);
    push(cs); cs = 0x2ebd; sub_2f7e7(); assert(cs == 0x2b4d);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2b500() // 2b4d:0030
{
    sp -= 2;
    ah = 0x0f;
    sub_2bad8();
    if (al == 0x07)
        goto loc_2b513;
    if (al <= 0x03)
        goto loc_2b513;
    ax = 0x0003;
    sub_2b569();
loc_2b513: // 2b4d:0043
    sub_2b5b7();
    ah = 0x08;
    bh = 0;
    sub_2bad8();
    al = ah;
    al &= 0x7f;
    memoryASet(ds, 0x70ea, al);
    memoryASet(ds, 0x70e0, al);
    ax = 0;
    memoryASet(ds, 0x70db, al);
    memoryASet(ds, 0x70eb, al);
    memoryASet(ds, 0x70ec, al);
    ax++;
    memoryASet(ds, 0x70da, al);
    ax = 0x0040;
    es = ax;
    di = 0x006c;
    al = memoryAGet(es, di);
loc_2b541: // 2b4d:0071
    sync();
    if (al == memoryAGet(es, di))
        goto loc_2b541;
    al = memoryAGet(es, di);
    cx = 0xffff;
    sub_2b78e();
    ax = 0x0037;
    tx = cx; cx = ax; ax = tx;
    ax = ~ax;
    dx = 0;
    div16(cx);
    memoryASet16(ds, 0x70e6, ax);
    push(ds);
    push(cs);
    ds = pop();
    dx = 0x012f;
    ax = 0x251b;
    interrupt(0x21);
    ds = pop();
    sp += 2;
}
void sub_2b569() // 2b4d:0099
{
    sp -= 2;
    dx = 0x0040;
    es = dx;
    memoryASet(es, 0x0087, memoryAGet(es, 0x0087) & 0xfe);
    if (al == 0x07)
        goto loc_2b57e;
    if (al < 0x04)
        goto loc_2b57e;
    al = 0x03;
loc_2b57e: // 2b4d:00ae
    push(ax);
    ah = 0x00;
    sub_2bad8();
    ax = pop();
    if (!ah)
        goto loc_2b5b6;
    ax = 0x1112;
    bl = 0x00;
    sub_2bad8();
    ax = 0x1130;
    bh = 0x00;
    dl = 0x00;
    sub_2bad8();
    if (dl != 0x2a)
        goto loc_2b5b6;
    memoryASet(es, 0x0087, memoryAGet(es, 0x0087) | 0x01);
    ax = 0x0100;
    cx = 0x0600;
    sub_2bad8();
    ah = 0x12;
    bl = 0x20;
    sub_2bad8();
loc_2b5b6: // 2b4d:00e6
    sp += 2;
    return;
}
void sub_2b5b7() // 2b4d:00e7
{
    sp -= 2;
    ah = 0x0f;
    sub_2bad8();
    push(ax);
    ax = 0x1130;
    bh = 0x00;
    dl = 0x00;
    sub_2bad8();
    ax = pop();
    cl = 0x00;
    if (dl)
        goto loc_2b5d6;
    dl = 0x18;
    if (al > 0x03)
        goto loc_2b5d6;
    cl = 0x01;
loc_2b5d6: // 2b4d:0106
    dh = dl;
    dl = ah;
    dl--;
    ah = 0x00;
    if (dh <= 0x18)
        goto loc_2b5e5;
    ah = 0x01;
loc_2b5e5: // 2b4d:0115
    memoryASet16(ds, 0x70de, ax);
    memoryASet16(ds, 0x70e8, dx);
    memoryASet(ds, 0x70dd, cl);
    memoryASet(ds, 0x70dc, 0x01);
    ax = 0;
    memoryASet16(ds, 0x70e2, ax);
    memoryASet16(ds, 0x70e4, dx);
    sp += 2;
}
void sub_2b615() // 2b4d:0145 +stackDrop4
{
    sp -= 2;
    if (memoryAGet(ds, 0x70ec) != 0x00)
        goto loc_2b61d;
    sp += 2;
    return;
loc_2b61d: // 2b4d:014d
    memoryASet(ds, 0x70ec, 0x00);
loc_2b622: // 2b4d:0152
    ah = 0x01;
    interrupt(0x16);
    if (flags.zero)
        goto loc_2b62e;
    ah = 0x00;
    interrupt(0x16);
    goto loc_2b622;
loc_2b62e: // 2b4d:015e
    al = 0x5e;
    sub_2b94b();
    al = 0x43;
    sub_2b94b();
    sub_2b944();
    interrupt(0x23);
    bx = sp;
    ax = memoryAGet16(ss, bx + 4);
    sub_2b569();
    sub_2b5b7();
    al = memoryAGet(ds, 0x70ea);
    memoryASet(ds, 0x70e0, al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2b63d() // 2b4d:016d +far +stackDrop4
{
    sp -= 2;
    bx = sp;
    ax = memoryAGet16(ss, bx + 4);
    sub_2b569();
    sub_2b5b7();
    al = memoryAGet(ds, 0x70ea);
    memoryASet(ds, 0x70e0, al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2b692() // 2b4d:01c2 +far +stackDrop2
{
    sp -= 2;
    ax = 0x0600;
    bh = memoryAGet(ds, 0x70e0);
    cx = memoryAGet16(ds, 0x70e2);
    dx = memoryAGet16(ds, 0x70e4);
    sub_2bad8();
    dx = memoryAGet16(ds, 0x70e2);
    sub_2b9cc();
    sp += 2;
    cs = pop();
}
void sub_2b6e5() // 2b4d:0215 +far +stackDrop6
{
    sp -= 2;
    bx = sp;
    dl = memoryAGet(ss, bx + 6);
    dh = memoryAGet(ss, bx + 4);
    dl--;
    flags.carry = (dl + memoryAGet(ds, 0x70e2)) >= 0x100;
    dl += memoryAGet(ds, 0x70e2);
    if (flags.carry)
        goto loc_2b70e;
    if (dl > memoryAGet(ds, 0x70e4))
        goto loc_2b70e;
    dh--;
    flags.carry = (dh + memoryAGet(ds, 0x70e3)) >= 0x100;
    dh += memoryAGet(ds, 0x70e3);
    if (flags.carry)
        goto loc_2b70e;
    if (dh > memoryAGet(ds, 0x70e5))
        goto loc_2b70e;
    sub_2b9cc();
loc_2b70e: // 2b4d:023e
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2b729() // 2b4d:0259 +far +stackDrop4
{
    sp -= 2;
    bx = sp;
    al = memoryAGet(ss, bx + 4);
    if (!(al & 0xf0))
        goto loc_2b737;
    al &= 0x0f;
    al |= 0x80;
loc_2b737: // 2b4d:0267
    memoryASet(ds, 0x70e0, memoryAGet(ds, 0x70e0) & 0x70);
    memoryASet(ds, 0x70e0, memoryAGet(ds, 0x70e0) | al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2b743() // 2b4d:0273 +far +stackDrop4
{
    sp -= 2;
    bx = sp;
    al = memoryAGet(ss, bx + 4);
    al &= 0x07;
    cl = 0x04;
    al <<= cl;
    memoryASet(ds, 0x70e0, memoryAGet(ds, 0x70e0) & 0x8f);
    memoryASet(ds, 0x70e0, memoryAGet(ds, 0x70e0) | al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2b76e() // 2b4d:029e +far +stackDrop4
{
    sp -= 2;
    bx = sp;
    dx = memoryAGet16(ss, bx + 4);
    if (!dx)
        goto loc_2b78b;
    di = 0;
    es = di;
    al = memoryAGet(es, di);
    bx = memoryAGet16(ds, 0x70e6);
loc_2b783: // 2b4d:02b3
    cx = bx;
    sub_2b78e();
    dx--;
    if (dx)
        goto loc_2b783;
loc_2b78b: // 2b4d:02bb
    sp += 2;
    cs = pop();
    sp += 2;
    return;
}
void sub_2b78e() // 2b4d:02be
{
    sp -= 2;
loc_2b78e: // 2b4d:02be
    if (al != memoryAGet(es, di))
        goto loc_2b795;
    if (--cx)
        goto loc_2b78e;
loc_2b795: // 2b4d:02c5
    sp += 2;
    return;
}
void sub_2b7c3() // 2b4d:02f3 +far +stackDrop2
{
    sp -= 2;
    al = in8(0x61);
    al &= 0xfc;
    out8(0x61, al);
    sp += 2;
    cs = pop();
}
void sub_2b7ca() // 2b4d:02fa +far +stackDrop2
{
    sync();
    sp -= 2;
    if (memoryAGet(ds, 0x70eb) != 0x00)
        goto loc_2b7d9;
    ah = 0x01;
    interrupt(0x16);
    al = 0x00;
    if (flags.zero) // wait key
        goto loc_2b7db;
loc_2b7d9: // 2b4d:0309
    al = 0x01;
loc_2b7db: // 2b4d:030b
    sp += 2;
    cs = pop();
    return;
}
void sub_2b7dc() // 2b4d:030c +far +stackDrop2
{
    sp -= 2;
    al = memoryAGet(ds, 0x70eb);
    memoryASet(ds, 0x70eb, 0x00);
    if (al)
        goto loc_2b7fa;
    ah = 0;
    interrupt(0x16);
    if (al)
        goto loc_2b7fa;
    memoryASet(ds, 0x70eb, ah);
    if (ah)
        goto loc_2b7fa;
    al = 0x03;
loc_2b7fa: // 2b4d:032a
    sub_2b615();
    stop("stack_below", "2b4d:032a");
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_2b7fe() // 2b4d:032e +stackDrop6
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2);
    memoryASet16(ds, di + 2, 0xd7b0);
    memoryASet16(ds, di + 4, 0x0080);
    ax = di + 128;
    memoryASet16(ds, di + 12, ax);
    memoryASet16(ds, di + 14, ds);
    memoryASet16(ds, di + 16, 0x0359);
    memoryASet16(ds, di + 18, cs);
    memoryASet(ds, di + 48, 0x00);
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2b829() // 2b4d:0359 +stackDrop6
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2);
    ax = 0x0391;
    bx = 0x046f;
    cx = bx;
    if (memoryAGet16(ds, di + 2) == 0xd7b1)
        goto loc_2b849;
    memoryASet16(ds, di + 2, 0xd7b2);
    ax = 0x043e;
    bx = ax;
loc_2b849: // 2b4d:0379
    memoryASet16(ds, di + 20, ax);
    memoryASet16(ds, di + 22, cs);
    memoryASet16(ds, di + 24, bx);
    memoryASet16(ds, di + 26, cs);
    memoryASet16(ds, di + 28, cx);
    memoryASet16(ds, di + 30, cs);
    ax = 0;
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2b90e() // 2b4d:043e +stackDrop6
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    cx = memoryAGet16(es, di + 8);
    memoryASet16(es, di + 8, memoryAGet16(es, di + 8) - cx);
    if (cx==0)
        goto loc_2b937;
    {int tmp1 = memoryAGet16(es, di + 12); int tmp2 = memoryAGet16(es, di + 12 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    if (memoryAGet(ds, 0x70dc) != 0x00)
        goto loc_2b934;
loc_2b929: // 2b4d:0459
    al = memoryAGet(es, di);
    sub_2b94b();
    di++;
    if (--cx)
        goto loc_2b929;
    goto loc_2b937;
loc_2b934: // 2b4d:0464
    sub_2b9d3(); // Print text / Error: this game requires EGA
loc_2b937: // 2b4d:0467
    sub_2b615();
//    stop("stack_below", "2b4d:0467");
    ax = 0;
//    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2b93f() // 2b4d:046f +stackDrop6
{
    sp -= 2;
    ax = 0;
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2b944() // 2b4d:0474
{
    sp -= 2;
    al = 0x0d;
    sub_2b94b();
    al = 0x0a;
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ax);
    sub_2b9c5();
    ax = pop();
    if (al == 0x07)
        goto loc_2b982;
    if (al == 0x08)
        goto loc_2b989;
    if (al == 0x0d)
        goto loc_2b993;
    if (al == 0x0a)
        goto loc_2b999;
    ah = 0x09;
    bl = memoryAGet(ds, 0x70e0);
    bh = 0;
    cx = 0x0001;
    push(dx);
    sub_2bad8();
    dx = pop();
    dl++;
    if (dl <= memoryAGet(ds, 0x70e4))
        goto loc_2b99c;
    dl = memoryAGet(ds, 0x70e2);
    goto loc_2b999;
loc_2b982: // 2b4d:04b2
    ah = 0x0e;
    sub_2bad8();
    goto loc_2b99c;
loc_2b989: // 2b4d:04b9
    if (dl == memoryAGet(ds, 0x70e2))
        goto loc_2b99c;
    dl--;
    goto loc_2b99c;
loc_2b993: // 2b4d:04c3
    dl = memoryAGet(ds, 0x70e2);
    goto loc_2b99c;
loc_2b999: // 2b4d:04c9
    sub_2b9a4();
loc_2b99c: // 2b4d:04cc
    sub_2b9cc();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    sp += 2;
}
void sub_2b94b() // 2b4d:047b
{
    sp -= 2;
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ax);
    sub_2b9c5();
    ax = pop();
    if (al == 0x07)
        goto loc_2b982;
    if (al == 0x08)
        goto loc_2b989;
    if (al == 0x0d)
        goto loc_2b993;
    if (al == 0x0a)
        goto loc_2b999;
    ah = 0x09;
    bl = memoryAGet(ds, 0x70e0);
    bh = 0;
    cx = 0x0001;
    push(dx);
    sub_2bad8();
    dx = pop();
    dl++;
    if (dl <= memoryAGet(ds, 0x70e4))
        goto loc_2b99c;
    dl = memoryAGet(ds, 0x70e2);
    goto loc_2b999;
loc_2b982: // 2b4d:04b2
    ah = 0x0e;
    sub_2bad8();
    goto loc_2b99c;
loc_2b989: // 2b4d:04b9
    if (dl == memoryAGet(ds, 0x70e2))
        goto loc_2b99c;
    dl--;
    goto loc_2b99c;
loc_2b993: // 2b4d:04c3
    dl = memoryAGet(ds, 0x70e2);
    goto loc_2b99c;
loc_2b999: // 2b4d:04c9
    sub_2b9a4();
loc_2b99c: // 2b4d:04cc
    sub_2b9cc();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    sp += 2;
}
void sub_2b9a4() // 2b4d:04d4
{
    sp -= 2;
    dh++;
    if (dh <= memoryAGet(ds, 0x70e5))
        goto loc_2b9c4;
    dh--;
    push(cx);
    push(dx);
    ax = 0x0601;
    bh = memoryAGet(ds, 0x70e0);
    cx = memoryAGet16(ds, 0x70e2);
    dx = memoryAGet16(ds, 0x70e4);
    sub_2bad8();
    dx = pop();
    cx = pop();
loc_2b9c4: // 2b4d:04f4
    sp += 2;
    return;
}
void sub_2b9c5() // 2b4d:04f5
{
    sp -= 2;
    ah = 0x03;
    bh = 0;
    goto loc_2bad8;
    // gap 268 bytes
loc_2bad8: // 2b4d:0608
    push(si);
    push(di);
    push(bp);
    push(es);
    interrupt(0x10);
    es = pop();
    bp = pop();
    di = pop();
    si = pop();
    sp += 2;
}
void sub_2b9cc() // 2b4d:04fc
{
    sp -= 2;
    ah = 0x02;
    bh = 0;
    goto loc_2bad8;
    // gap 261 bytes
loc_2bad8: // 2b4d:0608
    push(si);
    push(di);
    push(bp);
    push(es);
    interrupt(0x10);
    es = pop();
    bp = pop();
    di = pop();
    si = pop();
    sp += 2;
}
void sub_2b9d3() // 2b4d:0503
{
    sp -= 2;
    push(ds);
    ax = 0x0040;
    ds = ax;
    dx = memoryAGet16(ds, 0x0050);
    ds = pop();
    bx = dx;
    si = di;
loc_2b9e2: // 2b4d:0512
    al = memoryAGet(es, di);
    if (al == 0x07)
        goto loc_2ba0a;
    if (al == 0x08)
        goto loc_2ba19;
    if (al == 0x0a)
        goto loc_2ba26;
    if (al == 0x0d)
        goto loc_2ba2e;
    di++;
    dl++;
    if (dl <= memoryAGet(ds, 0x70e4))
        goto loc_2ba3a;
    sub_2ba70();
    sub_2b9a4();
    dl = memoryAGet(ds, 0x70e2);
    goto loc_2ba36;
loc_2ba0a: // 2b4d:053a
    sub_2ba70();
    push(cx);
    push(dx);
    ax = 0x0e07;
    sub_2bad8();
    dx = pop();
    cx = pop();
    goto loc_2ba35;
loc_2ba19: // 2b4d:0549
    sub_2ba70();
    if (dl == memoryAGet(ds, 0x70e2))
        goto loc_2ba35;
    dl--;
    goto loc_2ba35;
loc_2ba26: // 2b4d:0556
    sub_2ba70();
    sub_2b9a4();
    goto loc_2ba35;
loc_2ba2e: // 2b4d:055e
    sub_2ba70();
    dl = memoryAGet(ds, 0x70e2);
loc_2ba35: // 2b4d:0565
    di++;
loc_2ba36: // 2b4d:0566
    si = di;
    bx = dx;
loc_2ba3a: // 2b4d:056a
    if (--cx)
        goto loc_2b9e2;
    sub_2ba70();
    push(ds);
    ax = 0x0040;
    ds = ax;
    memoryASet16(ds, 0x0050, dx);
    al = dh;
    mul8(memoryAGet(ds, 0x004a));
    dh = 0;
    ax += dx;
    cx = ax;
    dx = memoryAGet16(ds, 0x0063);
    al = 0x0e;
    out8(dx, al);
    goto loc_2ba5e;
loc_2ba5e: // 2b4d:058e
    al = ch;
    dx++;
    out8(dx, al);
    goto loc_2ba64;
loc_2ba64: // 2b4d:0594
    dx--;
    al = 0x0f;
    out8(dx, al);
    goto loc_2ba6a;
loc_2ba6a: // 2b4d:059a
    al = cl;
    dx++;
    out8(dx, al);
    ds = pop();
    sp += 2;
}
void sub_2ba70() // 2b4d:05a0
{
    sp -= 2;
    if (si == di)
        goto loc_2bad7;
    push(cx);
    push(dx);
    push(di);
    push(ds);
    push(es);
    cx = di;
    cx -= si;
    dl = memoryAGet(ds, 0x70dd);
    dh = memoryAGet(ds, 0x70e0);
    ax = 0x0040;
    ds = ax;
    al = bh;
    mul8(memoryAGet(ds, 0x004a));
    bh = 0;
    ax += bx;
    ax <<= 1;
    di = ax;
    bx = dx;
    dx = memoryAGet16(ds, 0x0063);
    dx += 0x0006;
    ax = 0xb800;
    if (memoryAGet(ds, 0x0049) != 0x07)
        goto loc_2baad;
    ah = 0xb0;
loc_2baad: // 2b4d:05dd
    push(es);
    ds = pop();
    es = ax;
    flags.direction = 0;
    if (!bl)
        goto loc_2bacc;
loc_2bab6: // 2b4d:05e6
    al = lodsb<DS_SI>();
    bl = al;
loc_2bab9: // 2b4d:05e9
    al = in8(dx);
    if (al & 0x01)
        goto loc_2bab9;
    flags.interrupts = 0;
loc_2babf: // 2b4d:05ef
    al = in8(dx);
    if (!(al & 0x01))
        goto loc_2babf;
    ax = bx;
    stosw<ES_DI>(ax);
    flags.interrupts = 1;
    if (--cx)
        goto loc_2bab6;
    goto loc_2bad2;
loc_2bacc: // 2b4d:05fc
    ah = bh;
loc_2bace: // 2b4d:05fe
    al = lodsb<DS_SI>();
    stosw<ES_DI>(ax);
    if (--cx)
        goto loc_2bace;
loc_2bad2: // 2b4d:0602
    es = pop();
    ds = pop();
    di = pop();
    dx = pop();
    cx = pop();
loc_2bad7: // 2b4d:0607
    sp += 2;
    return;
}
void sub_2bad8() // 2b4d:0608
{
    sp -= 2;
    push(si);
    push(di);
    push(bp);
    push(es);
    interrupt(0x10);
    es = pop();
    bp = pop();
    di = pop();
    si = pop();
    sp += 2;
}
void sub_2bb60() // 2baf:0070 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2bc93();
    push(cs);
    sub_2e2d2();
    ax = 0;
    push(ax);
    push(cs);
    sub_2e471();
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_2bcb5();
    ax = 0x000f;
    push(ax);
    push(cs);
    sub_2c115();
    di = 0x0000;
    push(cs);
    push(di);
    di = 0x7140;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2baf);
    di = 0x001c;
    push(cs);
    push(di);
    di = 0x7140;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2baf);
    di = 0x0038;
    push(cs);
    push(di);
    di = 0x7140;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2baf);
    di = 0x0054;
    push(cs);
    push(di);
    di = 0x7140;
    push(ds);
    push(di);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2ebd; sub_2f21e(); assert(cs == 0x2baf);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2bc93() // 2baf:01a3 +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    if (al != 0x00)
        goto loc_2bca2;
    al = 0x0d;
    goto loc_2bcaf;
    // gap 1 bytes
loc_2bca2: // 2baf:01b2
    if (al == 0x01)
        goto loc_2bcad;
    ah = 0;
    al = 0x12;
    goto loc_2bcaf;
    // gap 1 bytes
loc_2bcad: // 2baf:01bd
    al = 0x10;
loc_2bcaf: // 2baf:01bf
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2bcb5() // 2baf:01c5 +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    ah = 0;
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2bcc3() // 2baf:01d3 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    if ((short)bx >= (short)0x0028)
        goto loc_2bcd1;
    bx = 0x0028;
loc_2bcd1: // 2baf:01e1
    memoryASet16(cs, 0x011c, bx);
    push(ax);
    dx = 0x03d4;
    ax = 0x0013;
    out16(dx, ax);
    dx++;
    ax = bx;
    ax >>= 1;
    out16(dx, ax);
    ax = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2bce9() // 2baf:01f9 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0x03da;
loc_2bcef: // 2baf:01ff
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_2bcef;
loc_2bcf4: // 2baf:0204
    al = in8(dx);
    if (al & 0x08)
        goto loc_2bcf4;
    flags.interrupts = 0;
    ax = memoryAGet16(ss, bp + 6);
    mul16(memoryAGet16(cs, 0x011c));
    cx = memoryAGet16(ss, bp + 8);
    cx >>= 1;
    cx >>= 1;
    cx >>= 1;
    ax += cx;
    bx = ax;
    al = 0x0c;
    dx = 0x03d4;
    out16(dx, ax);
    al = 0x0d;
    ah = bl;
    out16(dx, ax);
    flags.interrupts = 1;
    dx = 0x03da;
loc_2bd1e: // 2baf:022e
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_2bd1e;
    flags.interrupts = 0;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    al |= 0x10;
    ah = al;
    dx = 0x03c0;
    al = 0x33;
    out8(dx, al);
    tl = al; al = ah; ah = tl;
    out8(dx, al);
    flags.interrupts = 1;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2bd3c() // 2baf:024c +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0x03da;
loc_2bd42: // 2baf:0252
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_2bd42;
loc_2bd47: // 2baf:0257
    al = in8(dx);
    if (al & 0x08)
        goto loc_2bd47;
    flags.interrupts = 0;
    ax = memoryAGet16(ss, bp + 6);
    mul16(memoryAGet16(cs, 0x011c));
    cx = memoryAGet16(ss, bp + 8);
    cx >>= 1;
    cx >>= 1;
    cx >>= 1;
    ax += cx;
    bx = ax;
    al = 0x0c;
    dx = 0x03d4;
    out16(dx, ax);
    al = 0x0d;
    ah = bl;
    out16(dx, ax);
    flags.interrupts = 1;
    dx = 0x03da;
loc_2bd71: // 2baf:0281
    al = in8(dx);
    if (al & 0x08)
        goto loc_2bd71;
    flags.interrupts = 0;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    al |= 0x10;
    ah = al;
    dx = 0x03c0;
    al = 0x33;
    out8(dx, al);
    tl = al; al = ah; ah = tl;
    out8(dx, al);
    flags.interrupts = 1;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2bd8f() // 2baf:029f +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0040;
    es = ax;
    dx = memoryAGet16(es, 0x0063);
    dl += 0x06;
loc_2bd9f: // 2baf:02af
    al = in8(dx);
    if (al & 0x08)
        goto loc_2bd9f;
loc_2bda4: // 2baf:02b4
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_2bda4;
    dl -= 0x06;
    ax = memoryAGet16(ss, bp + 6);
    bh = ah;
    bh &= 0x01;
    cl = 0x04;
    bh <<= cl;
    ah = al;
    al = 0x18;
    out16(dx, ax);
    ah = 0x11;
    ah &= 0xef;
    ah |= bh;
    al = 0x07;
    out16(dx, ax);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2bdcb() // 2baf:02db +stackDrop2
{
    sp -= 2;
    push(es);
    ax = 0;
    es = ax;
    dx = 0x03da;
    al = in8(dx);
    goto loc_2bdd6;
loc_2bdd6: // 2baf:02e6
    if (!(al & 0x08))
        goto loc_2bde1;
loc_2bdda: // 2baf:02ea
    al = in8(dx);
    goto loc_2bddd;
loc_2bddd: // 2baf:02ed
    if (al & 0x08)
        goto loc_2bdda;
loc_2bde1: // 2baf:02f1
    al = in8(dx);
    goto loc_2bde4;
loc_2bde4: // 2baf:02f4
    if (!(al & 0x08))
        goto loc_2bde1;
    es = pop();
    sp += 2;
    cs = pop();
}
void sub_2bdea() // 2baf:02fa +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_2bdcb();
    push(es);
    ax = 0;
    es = ax;
    dx = 0x03d4;
    al = 0x18;
    out8(dx, al);
    dx++;
    ax = memoryAGet16(ss, bp + 6);
    out8(dx, al);
    dx--;
    al = 0x07;
    out8(dx, al);
    dx++;
    al = in8(dx);
    bl = memoryAGet(ss, bp + 7);
    bl &= 0x01;
    cl = 0x04;
    bl <<= cl;
    al &= 0xef;
    al |= bl;
    out8(dx, al);
    dx--;
    al = 0x09;
    out8(dx, al);
    dx++;
    al = in8(dx);
    al &= 0xbf;
    out8(dx, al);
    goto loc_2be22;
    // gap 1 bytes
loc_2be22: // 2baf:0332
    es = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2be27() // 2baf:0337 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x10;
    al = 0x01;
    bx = memoryAGet16(ss, bp + 6);
    bh = bl;
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2be42() // 2baf:0352 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x1000;
    bl = memoryAGet(ss, bp + 8);
    bh = memoryAGet(ss, bp + 6);
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2bf65() // 2baf:0475 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    di = memoryAGet16(cs, 0x011c);
    di--;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    bx += ax;
    ax = memoryAGet16(cs, 0x0192);
    if (al == 0x00)
        goto loc_2bfa0;
    cx = ax;
loc_2bf9a: // 2baf:04aa
    bx += 0x2000;
    if (--cx)
        goto loc_2bf9a;
loc_2bfa0: // 2baf:04b0
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0010;
loc_2bfa9: // 2baf:04b9
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    ah = 0x08;
    tl = al; al = ah; ah = tl;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx++;
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    ah = 0x08;
    tl = al; al = ah; ah = tl;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx += di;
    if (--cx)
        goto loc_2bfa9;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2c00f() // 2baf:051f +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(cs, 0x0192);
    if (dl == 0x00)
        goto loc_2c032;
    cx = ax;
loc_2c02c: // 2baf:053c
    bx += 0x2000;
    if (--cx)
        goto loc_2c02c;
loc_2c032: // 2baf:0542
    dx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = dx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0008;
loc_2c04f: // 2baf:055f
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    ah = 0x08;
    tl = al; al = ah; ah = tl;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx += memoryAGet16(cs, 0x011c);
    if (--cx)
        goto loc_2c04f;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2c115() // 2baf:0625 +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(cs, 0x0194, ax);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2c2de() // 2baf:07ee +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(cs, 0x0192);
    if (dl == 0x00)
        goto loc_2c2fc;
    cx = ax;
loc_2c2f6: // 2baf:0806
    bx += 0x2000;
    if (--cx)
        goto loc_2c2f6;
loc_2c2fc: // 2baf:080c
    ax = memoryAGet16(ss, bp + 8);
    push(di);
    push(ax);
    ax = ax;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    dx = di;
    di = pop();
    ax = dx;
    bx += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx++;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(cs, 0x07ec, ax);
loc_2c320: // 2baf:0830
    cx = memoryAGet16(ss, bp + 10);
loc_2c323: // 2baf:0833
    dx = 0x03c5;
    ax = memoryAGet16(cs, 0x0194);
    dx = 0x03c5;
    out8(dx, al);
    ax = 0x00ff;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ax = memoryAGet16(cs, 0x0194);
    ax ^= 0x00ff;
    dx = 0x03c5;
    out8(dx, al);
    ax = 0x0000;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx++;
    if (--cx)
        goto loc_2c323;
    bx += memoryAGet16(cs, 0x011c);
    bx -= memoryAGet16(ss, bp + 10);
    memoryASet16(cs, 0x07ec, memoryAGet16(cs, 0x07ec) - 1);
    if (memoryAGet16(cs, 0x07ec) == 0x0000)
        goto loc_2c35f;
    goto loc_2c320;
loc_2c35f: // 2baf:086f
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2d285() // 2baf:1795 +far +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 8);
    ax -= memoryAGet16(ss, bp + 12);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax -= memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 10);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 12);
    bx += ax;
    ax = memoryAGet16(cs, 0x0192);
    if (al == 0x00)
        goto loc_2d2c6;
    cx = ax;
loc_2d2c0: // 2baf:17d0
    bx += 0x2000;
    if (--cx)
        goto loc_2d2c0;
loc_2d2c6: // 2baf:17d6
    push(es);
    ds = pop();
    si = bx;
    di = memoryAGet16(ss, bp + 14); es = memoryAGet16(ss, bp + 14 + 2);
    ax = pop();
    memoryASet16(cs, 0x0110, ax);
    stosw<ES_DI>(ax);
    ax = pop();
    memoryASet16(cs, 0x0112, ax);
    stosw<ES_DI>(ax);
    al = 0xff;
    stosb<ES_DI>(al);
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    ax = 0x0304;
loc_2d2e7: // 2baf:17f7
    out16(dx, ax);
    push(ax);
    push(memoryAGet16(cs, 0x0110));
    push(si);
loc_2d2ef: // 2baf:17ff
    bx = memoryAGet16(cs, 0x0112);
    push(si);
loc_2d2f5: // 2baf:1805
    al = lodsb<DS_SI>();
    stosb<ES_DI>(al);
    bx--;
    if (bx)
        goto loc_2d2f5;
    si = pop();
    si += memoryAGet16(cs, 0x011c);
    memoryASet16(cs, 0x0110, memoryAGet16(cs, 0x0110) - 1);
    if (memoryAGet16(cs, 0x0110))
        goto loc_2d2ef;
    si = pop();
    memoryASet16(cs, 0x0110, pop());
    ax = pop();
    ah--;
    if ((char)ah >= 0)
        goto loc_2d2e7;
    ax = di;
    ax -= memoryAGet16(ss, bp + 14);
    di = pop();
    si = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_2d321() // 2baf:1831 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2);
    ax = lodsw<DS_SI>();
    memoryASet16(cs, 0x0110, ax);
    ax = lodsw<DS_SI>();
    memoryASet16(cs, 0x0112, ax);
    al = lodsb<DS_SI>();
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    bx += ax;
    ax = memoryAGet16(cs, 0x0192);
    if (al == 0x00)
        goto loc_2d361;
    cx = ax;
loc_2d35b: // 2baf:186b
    bx += 0x2000;
    if (--cx)
        goto loc_2d35b;
loc_2d361: // 2baf:1871
    di = bx;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx = 0x03c5;
    ax = 0x0008;
loc_2d36f: // 2baf:187f
    out8(dx, al);
    ax >>= 1;
    push(ax);
    push(memoryAGet16(cs, 0x0110));
    push(di);
loc_2d379: // 2baf:1889
    bx = memoryAGet16(cs, 0x0112);
loc_2d37e: // 2baf:188e
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, di); memoryASet(es, di, al); al = tl;
    di++;
    bx--;
    if (bx)
        goto loc_2d37e;
    di += memoryAGet16(cs, 0x011c);
    di -= memoryAGet16(cs, 0x0112);
    memoryASet16(cs, 0x0110, memoryAGet16(cs, 0x0110) - 1);
    if (memoryAGet16(cs, 0x0110))
        goto loc_2d379;
    di = pop();
    memoryASet16(cs, 0x0110, pop());
    ax = pop();
    if ((short)ax > (short)0x0000)
        goto loc_2d36f;
    ax = si;
    ax -= memoryAGet16(ss, bp + 14);
    di = pop();
    si = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2d4e9() // 2baf:19f9 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    di = memoryAGet16(cs, 0x011c);
    di--;
    di--;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    cl = 0x03;
    bx >>= cl;
    bx += ax;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    memoryASet(cs, 0x18c3, al);
    al = 0x08;
    al -= memoryAGet(cs, 0x18c3);
    memoryASet(cs, 0x18c4, al);
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0010;
loc_2d537: // 2baf:1a47
    memoryASet(cs, 0x18c2, 0x02);
loc_2d53d: // 2baf:1a4d
    dl = memoryAGet(cs, 0x18c2);
    dl--;
    memoryASet(cs, 0x18c2, dl);
    push(cx);
    push(di);
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    ah = al;
    di = ax;
    cl = memoryAGet(cs, 0x18c3);
    ah >>= cl;
    al = 0x08;
    out16(dx, ax);
    dx = 0x03c5;
    ch = 0x01;
    al = ch;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c6, al);
    al >>= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c7, al);
    al >>= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c8, al);
    al >>= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c9, al);
    al >>= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    goto loc_2d5a3;
    // gap 1 bytes
loc_2d59f: // 2baf:1aaf
    goto loc_2d537;
loc_2d5a1: // 2baf:1ab1
    goto loc_2d53d;
loc_2d5a3: // 2baf:1ab3
    bx++;
    dx = 0x03ce;
    ax = di;
    cl = memoryAGet(cs, 0x18c4);
    ah <<= cl;
    al = 0x08;
    out16(dx, ax);
    dx = 0x03c5;
    ch = 0x01;
    al = ch;
    out8(dx, al);
    al = memoryAGet(cs, 0x18c6);
    al <<= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = memoryAGet(cs, 0x18c7);
    al <<= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = memoryAGet(cs, 0x18c8);
    al <<= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = memoryAGet(cs, 0x18c9);
    al <<= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    di = pop();
    cx = pop();
    dl = memoryAGet(cs, 0x18c2);
    if ((char)dl > (char)0x00)
        goto loc_2d5a1;
    bx += di;
    if (--cx)
        goto loc_2d59f;
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    di = pop();
    si = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2d617() // 2baf:1b27 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    cx = memoryAGet16(ss, bp + 8);
    cx &= 0x0007;
    cl ^= 0x07;
    cl++;
    memoryASet(cs, 0x1b26, cl);
    bx = memoryAGet16(ss, bp + 8);
    bx >>= 1;
    bx >>= 1;
    bx >>= 1;
    bx += ax;
    ax = memoryAGet16(cs, 0x0192);
    if (al == 0x00)
        goto loc_2d662;
    cx = ax;
loc_2d65c: // 2baf:1b6c
    bx += 0x2000;
    if (--cx)
        goto loc_2d65c;
loc_2d662: // 2baf:1b72
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0008;
loc_2d66b: // 2baf:1b7b
    push(cx);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1b26);
    ax = rol16(ax, cl);
    memoryASet(cs, 0x1b22, ah);
    memoryASet(cs, 0x1b23, al);
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1b26);
    ax = rol16(ax, cl);
    cx = ax;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(cs, 0x1b22);
    out16(dx, ax);
    tl = memoryAGet(es, bx); memoryASet(es, bx, ch); ch = tl;
    ah = memoryAGet(cs, 0x1b23);
    out16(dx, ax);
    tl = memoryAGet(es, bx + 1); memoryASet(es, bx + 1, cl); cl = tl;
    dx = 0x03c5;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1b26);
    ax = rol16(ax, cl);
    cx = ax;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(cs, 0x1b22);
    out16(dx, ax);
    tl = memoryAGet(es, bx); memoryASet(es, bx, ch); ch = tl;
    ah = memoryAGet(cs, 0x1b23);
    out16(dx, ax);
    tl = memoryAGet(es, bx + 1); memoryASet(es, bx + 1, cl); cl = tl;
    goto loc_2d6d8;
    // gap 1 bytes
loc_2d6d6: // 2baf:1be6
    goto loc_2d66b;
loc_2d6d8: // 2baf:1be8
    dx = 0x03c5;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1b26);
    ax = rol16(ax, cl);
    cx = ax;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(cs, 0x1b22);
    out16(dx, ax);
    tl = memoryAGet(es, bx); memoryASet(es, bx, ch); ch = tl;
    ah = memoryAGet(cs, 0x1b23);
    out16(dx, ax);
    tl = memoryAGet(es, bx + 1); memoryASet(es, bx + 1, cl); cl = tl;
    dx = 0x03c5;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1b26);
    ax = rol16(ax, cl);
    cx = ax;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(cs, 0x1b22);
    out16(dx, ax);
    tl = memoryAGet(es, bx); memoryASet(es, bx, ch); ch = tl;
    ah = memoryAGet(cs, 0x1b23);
    out16(dx, ax);
    tl = memoryAGet(es, bx + 1); memoryASet(es, bx + 1, cl); cl = tl;
    bx += memoryAGet16(cs, 0x011c);
    cx = pop();
    if (--cx)
        goto loc_2d6d6;
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2df53() // 2baf:2463 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    di = memoryAGet16(cs, 0x011c);
    di--;
    di--;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    cl = 0x03;
    bx >>= cl;
    bx += ax;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    memoryASet(cs, 0x18c3, al);
    al = 0x08;
    al -= memoryAGet(cs, 0x18c3);
    memoryASet(cs, 0x18c4, al);
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0010;
loc_2dfa1: // 2baf:24b1
    memoryASet(cs, 0x18c2, 0x02);
loc_2dfa7: // 2baf:24b7
    dl = memoryAGet(cs, 0x18c2);
    dl--;
    memoryASet(cs, 0x18c2, dl);
    push(cx);
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c5, al);
    ah = memoryAGet(cs, 0x18c5);
    cl = memoryAGet(cs, 0x18c3);
    ah >>= cl;
    al = 0x08;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c6, al);
    al >>= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c7, al);
    al >>= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c8, al);
    al >>= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x18c9, al);
    al >>= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    goto loc_2e015;
    // gap 1 bytes
loc_2e011: // 2baf:2521
    goto loc_2dfa1;
loc_2e013: // 2baf:2523
    goto loc_2dfa7;
loc_2e015: // 2baf:2525
    bx++;
    dx = 0x03ce;
    ah = memoryAGet(cs, 0x18c5);
    cl = memoryAGet(cs, 0x18c4);
    ah <<= cl;
    al = 0x08;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    al = memoryAGet(cs, 0x18c6);
    al <<= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = memoryAGet(cs, 0x18c7);
    al <<= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = memoryAGet(cs, 0x18c8);
    al <<= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = memoryAGet(cs, 0x18c9);
    al <<= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    cx = pop();
    dl = memoryAGet(cs, 0x18c2);
    if ((char)dl > (char)0x00)
        goto loc_2e013;
    bx += di;
    if (--cx)
        goto loc_2e011;
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    di = pop();
    si = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e2d2() // 2baf:27e2 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(di);
    push(si);
    push(ds);
    push(es);
    push(cs);
    ds = pop();
    push(bp);
    ax = 0x1130;
    bx = 0x0200;
    interrupt(0x10);
    ax = bp;
    bp = pop();
    memoryASet16(cs, 0x26df, ax);
    memoryASet16(cs, 0x26e1, es);
    memoryASet16(cs, 0x26e3, 0x000e);
    push(bp);
    ax = 0x1130;
    bx = 0x0300;
    interrupt(0x10);
    ax = bp;
    bp = pop();
    memoryASet16(cs, 0x26d9, ax);
    memoryASet16(cs, 0x26db, es);
    memoryASet16(cs, 0x26dd, 0x0008);
    es = pop();
    ds = pop();
    si = pop();
    di = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2e471() // 2baf:2981 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    if (ax == 0x0001)
        goto loc_2e497;
    ax = memoryAGet16(cs, 0x26df);
    memoryASet16(cs, 0x26cf, ax);
    ax = memoryAGet16(cs, 0x26e1);
    memoryASet16(cs, 0x26d1, ax);
    ax = memoryAGet16(cs, 0x26e3);
    memoryASet16(cs, 0x26d3, ax);
    goto loc_2e4af;
    // gap 1 bytes
loc_2e497: // 2baf:29a7
    ax = memoryAGet16(cs, 0x26d9);
    memoryASet16(cs, 0x26cf, ax);
    ax = memoryAGet16(cs, 0x26db);
    memoryASet16(cs, 0x26d1, ax);
    ax = memoryAGet16(cs, 0x26dd);
    memoryASet16(cs, 0x26d3, ax);
loc_2e4af: // 2baf:29bf
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2e58f() // 2baf:2a9f +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    di = memoryAGet16(cs, 0x011c);
    di--;
    di--;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    bx += ax;
    ax = memoryAGet16(cs, 0x0192);
    if (al == 0x00)
        goto loc_2e5cb;
    cx = ax;
loc_2e5c5: // 2baf:2ad5
    bx += 0x2000;
    if (--cx)
        goto loc_2e5c5;
loc_2e5cb: // 2baf:2adb
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0010;
loc_2e5d4: // 2baf:2ae4
    al = lodsb<DS_SI>();
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx++;
    al = lodsb<DS_SI>();
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx++;
    bx += di;
    if (--cx)
        goto loc_2e5d4;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e628() // 2baf:2b38 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    di = memoryAGet16(cs, 0x011c);
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(cs, 0x0192);
    if (dl == 0x00)
        goto loc_2e650;
    cx = ax;
loc_2e64a: // 2baf:2b5a
    bx += 0x2000;
    if (--cx)
        goto loc_2e64a;
loc_2e650: // 2baf:2b60
    dx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = dx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0008;
loc_2e66d: // 2baf:2b7d
    al = lodsb<DS_SI>();
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx += di;
    if (--cx)
        goto loc_2e66d;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e95d() // 2baf:2e6d +far +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    dx = 0xa000;
    es = dx;
    ds = dx;
    si = memoryAGet16(ss, bp + 6);
    si <<= 1;
    si |= 0xfa00;
    bx = memoryAGet16(ss, bp + 8);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x011c));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    di = memoryAGet16(ss, bp + 10);
    di += ax;
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = 0x01;
    out8(dx, al);
    cx = 0x0001;
    dl = 0x10;
    ax = memoryAGet16(cs, 0x011c);
    ax--;
    ax--;
loc_2e9a5: // 2baf:2eb5
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += ax;
    di += ax;
    dl--;
    if ((char)dl > (char)0x00)
        goto loc_2e9a5;
    dx = 0x03cf;
    al = 0x00;
    out8(dx, al);
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2e9bf() // 2baf:2ecf +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    dx = 0xa000;
    es = dx;
    ds = dx;
    ax = memoryAGet16(ss, bp + 10);
    mul16(memoryAGet16(cs, 0x011c));
    si = memoryAGet16(ss, bp + 12);
    si += ax;
    ax = memoryAGet16(ss, bp + 6);
    mul16(memoryAGet16(cs, 0x011c));
    di = memoryAGet16(ss, bp + 8);
    di += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = 0x01;
    out8(dx, al);
    ax = memoryAGet16(cs, 0x011c);
    ax -= 0x0028;
    bx = 0x00c8;
loc_2ea06: // 2baf:2f16
    cx = 0x0028;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += ax;
    di += ax;
    bx--;
    if ((short)bx > (short)0x0000)
        goto loc_2ea06;
    dx = 0x03cf;
    al = 0x00;
    out8(dx, al);
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2ea22() // 2baf:2f32 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    dx = 0xa000;
    es = dx;
    ds = dx;
    si = 0x0028;
    di = 0x0000;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = 0x01;
    out8(dx, al);
    ax = 0x0028;
    bx = 0x0008;
loc_2ea51: // 2baf:2f61
    cx = 0x0028;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += ax;
    di += ax;
    bx--;
    if ((short)bx > (short)0x0000)
        goto loc_2ea51;
    dx = 0x03cf;
    al = 0x00;
    out8(dx, al);
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2eb3b() // 2eb3:000b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    push(ds);
    bp = sp;
    push(flagAsReg());
    bx = 0x0045;
    push(cs);
    push(bx);
    bx = 0;
    ds = bx;
    bl = memoryAGet(ss, bp + 12);
    bx <<= 1;
    bx <<= 1;
    {int tmp1 = memoryAGet16(ds, bx); int tmp2 = memoryAGet16(ds, bx + 2); bx = tmp1; ds = tmp2; /*ggg2!!check*/};
    push(ds);
    push(bx);
    si = memoryAGet16(ss, bp + 8); ds = memoryAGet16(ss, bp + 8 + 2);
    flags.direction = 0;
    ax = lodsw<DS_SI>();
    push(ax);
    ax = lodsw<DS_SI>();
    bx = ax;
    ax = lodsw<DS_SI>();
    cx = ax;
    ax = lodsw<DS_SI>();
    dx = ax;
    ax = lodsw<DS_SI>();
    bp = ax;
    ax = lodsw<DS_SI>();
    push(ax);
    ax = lodsw<DS_SI>();
    di = ax;
    ax = lodsw<DS_SI>();
    push(ax);
    ax = lodsw<DS_SI>();
    es = ax;
    ds = pop();
    si = pop();
    ax = pop();
    flags.interrupts = 0;
        
    sp += 10; // jumps to f000:1320 int 10, ax=1b00, bx=0, cx=0cad, dx=2ebd
    interrupt(0x10);
    //sp += 2;
// TODO CODE CONTINUES 2eb3:0045
//    sp += 2;
//    cs = pop();
//    stop("stack_unbalanced");
//}
//void sub_2eb75() // 2eb3:0045 +stackDrop8
//{
//    sp -= 2;
    push(flagAsReg());
    push(es);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 16); es = memoryAGet16(ss, bp + 16 + 2);
    flags.direction = 0;
    stosw<ES_DI>(ax);
    ax = bx;
    stosw<ES_DI>(ax);
    ax = cx;
    stosw<ES_DI>(ax);
    ax = dx;
    stosw<ES_DI>(ax);
    ax = pop();
    stosw<ES_DI>(ax);
    ax = si;
    stosw<ES_DI>(ax);
    ax = pop();
    stosw<ES_DI>(ax);
    ax = ds;
    stosw<ES_DI>(ax);
    ax = pop();
    stosw<ES_DI>(ax);
    ax = pop();
    stosw<ES_DI>(ax);
    ds = pop();
//    stop("stack_below", "2eb3:0067");
    bp = pop();
//    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    // TODO CHECK!
    sp += 6;
}
void sub_2eb9c() // 2eb3:006c +far +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 10);
    ah = 0x35;
    interrupt(0x21);
    ax = es;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2);
    flags.direction = 0;
    tx = bx; bx = ax; ax = tx;
    stosw<ES_DI>(ax);
    tx = bx; bx = ax; ax = tx;
    stosw<ES_DI>(ax);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2ebb4() // 2eb3:0084 +far +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    dx = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2);
    al = memoryAGet(ss, bp + 10);
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2ebd0() // 2ebd:0000 +far +stackDrop2
{
    sp -= 2;
    dx = 0x2fd7;
    ds = dx;
    memoryASet16(ds, 0x0288, es);
    bp = 0;
    ax = sp;
    ax += 0x0013;
    cl = 0x04;
    ax >>= cl;
    dx = ss;
    ax += dx;
    memoryASet16(ds, 0x0260, ax);
    memoryASet16(ds, 0x0262, ax);
    ax += memoryAGet16(ds, 0x025a);
    memoryASet16(ds, 0x0264, ax);
    memoryASet16(ds, 0x026e, ax);
    memoryASet16(ds, 0x0272, ax);
    ax = memoryAGet16(es, 0x0002);
    ax -= 0x1000;
    memoryASet16(ds, 0x0276, ax);
    di = 0x7392;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2ec10: // 2ebd:0040
    al = lodsb<CS_SI>();
    ah = 0x35;
    interrupt(0x21);
    memoryASet16(ds, di, bx);
    memoryASet16(ds, di + 2, es);
    di += 0x0004;
    if (--cx)
        goto loc_2ec10;
    push(ds);
    push(cs);
    ds = pop();
    dx = 0x00ce;
    ax = 0x2500;
    interrupt(0x21);
    dx = 0x00d5;
    ax = 0x2523;
    interrupt(0x21);
    dx = 0x009d;
    ax = 0x2524;
    interrupt(0x21);
    dx = 0x00c6;
    ax = 0x253f;
    interrupt(0x21);
    ds = pop();
    ax = 0x7192;
    push(ds);
    push(ax);
    push(ds);
    push(ax);
    ax = 0x0206;
    push(cs);
    push(ax);
    push(cs);
    sub_2f772();
    push(cs);
    sub_2f7e2();
    ax = 0x7292;
    push(ds);
    push(ax);
    push(ds);
    push(ax);
    ax = 0x0206;
    push(cs);
    push(ax);
    push(cs);
    sub_2f772();
    push(cs);
    sub_2f7e7();
    sp += 2;
    cs = pop();
}
void sub_2eca8() // 2ebd:00d8 +far +stackDrop2
{
    sp -= 2;
    cx = 0;
    bx = 0;
    dx = 0x2fd7;
    ds = dx;
    flags.interrupts = 1;
    memoryASet16(ds, 0x0282, ax);
    ax = cx;
    ax |= bx;
    if (!ax)
        goto loc_2ecda;
    ax = memoryAGet16(ds, 0x0266);
loc_2ecbe: // 2ebd:00ee
    if (!ax)
        goto loc_2ecd3;
    es = ax;
    if (bx == memoryAGet16(es, 0x0010))
        goto loc_2ecd1;
    ax = memoryAGet16(es, 0x0014);
    goto loc_2ecbe;
loc_2ecd1: // 2ebd:0101
    bx = es;
loc_2ecd3: // 2ebd:0103
    bx -= memoryAGet16(ds, 0x0288);
    bx -= 0x0010;
loc_2ecda: // 2ebd:010a
    memoryASet16(ds, 0x0284, cx);
    memoryASet16(ds, 0x0286, bx);
    bx = memoryAGet16(ds, 0x027e); es = memoryAGet16(ds, 0x027e + 2);
    ax = es;
    ax |= bx;
    if (!ax)
        goto loc_2ecff;
    ax = 0;
    memoryASet16(ds, 0x027e, ax);
    memoryASet16(ds, 0x0280, ax);
    memoryASet16(ds, 0x028c, ax);
    ax = 0x0112;
    push(cs);
    push(ax);
    push(es);
    push(bx);
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    return;
loc_2ecff: // 2ebd:012f
    ax = 0x7192;
    push(ds);
    push(ax);
    push(cs);
    sub_2f83b();
    ax = 0x7292;
    push(ds);
    push(ax);
    push(cs);
    sub_2f83b();
    di = 0x7392;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2ed1c: // 2ebd:014c
    al = lodsb<CS_SI>();
    ah = 0x25;
    push(ds);
    dx = memoryAGet16(ds, di); ds = memoryAGet16(ds, di + 2);
    interrupt(0x21);
    ds = pop();
    di += 0x0004;
    if (--cx)
        goto loc_2ed1c;
    ax = memoryAGet16(ds, 0x0284);
    ax |= memoryAGet16(ds, 0x0286);
    if (!ax)
        goto loc_2ed5d;
    bx = 0x01ef;
    sub_2ed64();
    ax = memoryAGet16(ds, 0x0282);
    sub_2ed72();
    bx = 0x01fe;
    sub_2ed64();
    ax = memoryAGet16(ds, 0x0286);
    sub_2ed8c();
    al = 0x3a;
    sub_2eda6();
    ax = memoryAGet16(ds, 0x0284);
    sub_2ed8c();
    bx = 0x0203;
    sub_2ed64();
loc_2ed5d: // 2ebd:018d
    ax = memoryAGet16(ds, 0x0282);
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_2ed64() // 2ebd:0194
{
    sp -= 2;
loc_2ed64: // 2ebd:0194
    al = memoryAGet(cs, bx);
    if (!al)
        goto loc_2ed71;
    sub_2eda6();
    bx++;
    goto loc_2ed64;
loc_2ed71: // 2ebd:01a1
    sp += 2;
    return;
}
void sub_2ed72() // 2ebd:01a2
{
    sp -= 2;
    cl = 0x64;
    sub_2ed7e();
    cl = 0x0a;
    sub_2ed7e();
    goto loc_2ed82;
    // gap 4 bytes
loc_2ed82: // 2ebd:01b2
    al += 0x30;
    push(ax);
    sub_2eda6();
    ax = pop();
    al = ah;
    sp += 2;
}
void sub_2ed7e() // 2ebd:01ae
{
    sp -= 2;
    ah = 0;
    div8(cl);
    al += 0x30;
    push(ax);
    sub_2eda6();
    ax = pop();
    al = ah;
    sp += 2;
}
void sub_2ed8c() // 2ebd:01bc
{
    sp -= 2;
    push(ax);
    al = ah;
    sub_2ed93();
    ax = pop();
    push(ax);
    cl = 0x04;
    al >>= cl;
    sub_2ed9e();
    ax = pop();
    al &= 0x0f;
    al += 0x30;
    if (al < 0x3a)
        goto loc_2eda6;
    al += 0x07;
loc_2eda6: // 2ebd:01d6
    dl = al;
    ah = 0x06;
    interrupt(0x21);
    sp += 2;
}
void sub_2ed93() // 2ebd:01c3
{
    sp -= 2;
    push(ax);
    cl = 0x04;
    al >>= cl;
    sub_2ed9e();
    ax = pop();
    al &= 0x0f;
    al += 0x30;
    if (al < 0x3a)
        goto loc_2eda6;
    al += 0x07;
loc_2eda6: // 2ebd:01d6
    dl = al;
    ah = 0x06;
    interrupt(0x21);
    sp += 2;
}
void sub_2ed9e() // 2ebd:01ce
{
    sp -= 2;
    al += 0x30;
    if (al < 0x3a)
        goto loc_2eda6;
    al += 0x07;
loc_2eda6: // 2ebd:01d6
    dl = al;
    ah = 0x06;
    interrupt(0x21);
    sp += 2;
}
void sub_2eda6() // 2ebd:01d6
{
    sp -= 2;
    dl = al;
    ah = 0x06;
    interrupt(0x21);
    sp += 2;
}
void sub_2edd7() // 2ebd:0207 +far +stackDrop2
{
    sp -= 2;
    ax = 0;
    tx = memoryAGet16(ds, 0x028c); memoryASet16(ds, 0x028c, ax); ax = tx;
    sp += 2;
    cs = pop();
}
void sub_2ee2d() // 2ebd:025d +far +stackDrop12
{
    sp -= 2;
    bx = sp;
    dx = ds;
    si = memoryAGet16(ss, bx + 10); ds = memoryAGet16(ss, bx + 10 + 2);
    di = memoryAGet16(ss, bx + 6); es = memoryAGet16(ss, bx + 6 + 2);
    cx = memoryAGet16(ss, bx + 4);
    flags.direction = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_2ee49() // 2ebd:0279 +far +stackDrop2
{
    sp -= 2;
    si = ax;
    di = dx;
    mul16(cx);
    push(ax);
    push(dx);
    ax = si;
    mul16(bx);
    bx = ax;
    ax = di;
    mul16(cx);
    cx = ax;
    dx = pop();
    ax = pop();
    dx += bx;
    dx += cx;
    sp += 2;
    cs = pop();
}
void sub_2eef9() // 2ebd:0329 +far +stackDrop8
{
    sp -= 2;
    goto loc_2eef9;
loc_2eca1: // 2ebd:00d1
    cx = pop();
    stop("stack_below", "2ebd:00d1");
    bx = pop();
    goto loc_2ecac;
    // gap 7 bytes
loc_2ecac: // 2ebd:00dc
    dx = 0x2fd7;
    ds = dx;
    flags.interrupts = 1;
    memoryASet16(ds, 0x0282, ax);
    ax = cx;
    ax |= bx;
    if (!ax)
        goto loc_2ecda;
    ax = memoryAGet16(ds, 0x0266);
loc_2ecbe: // 2ebd:00ee
    if (!ax)
        goto loc_2ecd3;
    es = ax;
    if (bx == memoryAGet16(es, 0x0010))
        goto loc_2ecd1;
    ax = memoryAGet16(es, 0x0014);
    goto loc_2ecbe;
loc_2ecd1: // 2ebd:0101
    bx = es;
loc_2ecd3: // 2ebd:0103
    bx -= memoryAGet16(ds, 0x0288);
    bx -= 0x0010;
loc_2ecda: // 2ebd:010a
    memoryASet16(ds, 0x0284, cx);
    memoryASet16(ds, 0x0286, bx);
    bx = memoryAGet16(ds, 0x027e); es = memoryAGet16(ds, 0x027e + 2);
    ax = es;
    ax |= bx;
    if (!ax)
        goto loc_2ecff;
    ax = 0;
    memoryASet16(ds, 0x027e, ax);
    memoryASet16(ds, 0x0280, ax);
    memoryASet16(ds, 0x028c, ax);
    ax = 0x0112;
    push(cs);
    push(ax);
    push(es);
    push(bx);
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    return;
loc_2ecff: // 2ebd:012f
    ax = 0x7192;
    stop("stack_below", "2ebd:012f");
    push(ds);
    push(ax);
    push(cs);
    sub_2f83b();
    stop("stack_below", "2ebd:0135");
    ax = 0x7292;
    push(ds);
    push(ax);
    push(cs);
    sub_2f83b();
    stop("stack_below", "2ebd:013e");
    di = 0x7392;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2ed1c: // 2ebd:014c
    al = lodsb<CS_SI>();
    ah = 0x25;
    push(ds);
    dx = memoryAGet16(ds, di); ds = memoryAGet16(ds, di + 2);
    interrupt(0x21);
    ds = pop();
    di += 0x0004;
    if (--cx)
        goto loc_2ed1c;
    ax = memoryAGet16(ds, 0x0284);
    ax |= memoryAGet16(ds, 0x0286);
    if (!ax)
        goto loc_2ed5d;
    bx = 0x01ef;
    sub_2ed64();
    ax = memoryAGet16(ds, 0x0282);
    sub_2ed72();
    bx = 0x01fe;
    sub_2ed64();
    ax = memoryAGet16(ds, 0x0286);
    sub_2ed8c();
    al = 0x3a;
    sub_2eda6();
    ax = memoryAGet16(ds, 0x0284);
    sub_2ed8c();
    bx = 0x0203;
    sub_2ed64();
loc_2ed5d: // 2ebd:018d
    ax = memoryAGet16(ds, 0x0282);
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
    // gap 405 bytes
loc_2eef9: // 2ebd:0329
    push(bp);
    bp = sp;
loc_2eefc: // 2ebd:032c
    ax = memoryAGet16(ss, bp + 6);
    sub_2f016();
    if (!flags.carry)
        goto loc_2ef1f;
    ax = memoryAGet16(ds, 0x027a);
    ax |= memoryAGet16(ds, 0x027c);
    if (!ax)
        goto loc_2ef2d;
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = memoryAGet16(ds, 0x027a + 2); indirectCall(cs, memoryAGet16(ds, 0x027a), 0x2ebd, 0x0340); assert(cs == 0x2ebd); // 2ebd:0340;
    if (!ax)
        goto loc_2ef2d;
    ax--;
    if (ax)
        goto loc_2eefc;
    cx = 0;
    bx = 0;
loc_2ef1f: // 2ebd:034f
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet16(es, di, cx);
    memoryASet16(es, di + 2, bx);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
    return;
loc_2ef2d: // 2ebd:035d
    bp = pop();
    ax = 0x00cb;
    goto loc_2eca1;
}
void sub_2ef34() // 2ebd:0364 +far +stackDrop8
{
    sp -= 2;
    goto loc_2ef34;
loc_2eca1: // 2ebd:00d1
    cx = pop();
    stop("stack_below", "2ebd:00d1");
    bx = pop();
    goto loc_2ecac;
    // gap 7 bytes
loc_2ecac: // 2ebd:00dc
    dx = 0x2fd7;
    ds = dx;
    flags.interrupts = 1;
    memoryASet16(ds, 0x0282, ax);
    ax = cx;
    ax |= bx;
    if (!ax)
        goto loc_2ecda;
    ax = memoryAGet16(ds, 0x0266);
loc_2ecbe: // 2ebd:00ee
    if (!ax)
        goto loc_2ecd3;
    es = ax;
    if (bx == memoryAGet16(es, 0x0010))
        goto loc_2ecd1;
    ax = memoryAGet16(es, 0x0014);
    goto loc_2ecbe;
loc_2ecd1: // 2ebd:0101
    bx = es;
loc_2ecd3: // 2ebd:0103
    bx -= memoryAGet16(ds, 0x0288);
    bx -= 0x0010;
loc_2ecda: // 2ebd:010a
    memoryASet16(ds, 0x0284, cx);
    memoryASet16(ds, 0x0286, bx);
    bx = memoryAGet16(ds, 0x027e); es = memoryAGet16(ds, 0x027e + 2);
    ax = es;
    ax |= bx;
    if (!ax)
        goto loc_2ecff;
    ax = 0;
    memoryASet16(ds, 0x027e, ax);
    memoryASet16(ds, 0x0280, ax);
    memoryASet16(ds, 0x028c, ax);
    ax = 0x0112;
    push(cs);
    push(ax);
    push(es);
    push(bx);
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    return;
loc_2ecff: // 2ebd:012f
    ax = 0x7192;
    stop("stack_below", "2ebd:012f");
    push(ds);
    push(ax);
    push(cs);
    sub_2f83b();
    stop("stack_below", "2ebd:0135");
    ax = 0x7292;
    push(ds);
    push(ax);
    push(cs);
    sub_2f83b();
    stop("stack_below", "2ebd:013e");
    di = 0x7392;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2ed1c: // 2ebd:014c
    al = lodsb<CS_SI>();
    ah = 0x25;
    push(ds);
    dx = memoryAGet16(ds, di); ds = memoryAGet16(ds, di + 2);
    interrupt(0x21);
    ds = pop();
    di += 0x0004;
    if (--cx)
        goto loc_2ed1c;
    ax = memoryAGet16(ds, 0x0284);
    ax |= memoryAGet16(ds, 0x0286);
    if (!ax)
        goto loc_2ed5d;
    bx = 0x01ef;
    sub_2ed64();
    ax = memoryAGet16(ds, 0x0282);
    sub_2ed72();
    bx = 0x01fe;
    sub_2ed64();
    ax = memoryAGet16(ds, 0x0286);
    sub_2ed8c();
    al = 0x3a;
    sub_2eda6();
    ax = memoryAGet16(ds, 0x0284);
    sub_2ed8c();
    bx = 0x0203;
    sub_2ed64();
loc_2ed5d: // 2ebd:018d
    ax = memoryAGet16(ds, 0x0282);
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
    // gap 464 bytes
loc_2ef34: // 2ebd:0364
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    cx = memoryAGet16(es, di);
    bx = memoryAGet16(es, di + 2);
    sub_2f0b2();
    if (flags.carry)
        goto loc_2ef4d;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
    return;
loc_2ef4d: // 2ebd:037d
    bp = pop();
    ax = 0x00cc;
    goto loc_2eca1;
}
void sub_2ef85() // 2ebd:03b5 +far +stackDrop2
{
    sp -= 2;
    sub_2f19e();
    ax = si;
    dx = di;
    di = memoryAGet16(ds, 0x0274); es = memoryAGet16(ds, 0x0274 + 2);
    dx -= memoryAGet16(ds, 0x0272);
    flags.carry = ax < memoryAGet16(ds, 0x0270);
    ax -= memoryAGet16(ds, 0x0270);
    if (!flags.carry)
        goto loc_2efc1;
    ax += 0x0010;
    dx--;
    goto loc_2efc1;
loc_2efa0: // 2ebd:03d0
    dx += memoryAGet16(es, di + 6);
    dx -= memoryAGet16(es, di + 2);
    ax += memoryAGet16(es, di + 4);
    if (ax < 0x0010)
        goto loc_2efb5;
    ax -= 0x0010;
    dx++;
loc_2efb5: // 2ebd:03e5
    flags.carry = ax < memoryAGet16(es, di);
    ax -= memoryAGet16(es, di);
    if (!flags.carry)
        goto loc_2efbe;
    ax += 0x0010;
    dx--;
loc_2efbe: // 2ebd:03ee
    di += 0x0008;
loc_2efc1: // 2ebd:03f1
    if (di)
        goto loc_2efa0;
    sub_2f1f5();
    sp += 2;
    cs = pop();
}
void sub_2f016() // 2ebd:0446 +returnCarry
{
    sp -= 2;
    sub_2f1e7();
    di = memoryAGet16(ds, 0x0274); es = memoryAGet16(ds, 0x0274 + 2);
    goto loc_2f02e;
loc_2f01f: // 2ebd:044f
    bx = memoryAGet16(es, di + 6);
    bx -= memoryAGet16(es, di + 2);
    if (bx >= dx)
        goto loc_2f06f;
loc_2f02b: // 2ebd:045b
    di += 0x0008;
loc_2f02e: // 2ebd:045e
    if (di)
        goto loc_2f01f;
    sub_2f19e();
    cx = si;
    bx = di;
    bx -= memoryAGet16(ds, 0x0272);
    flags.carry = cx < memoryAGet16(ds, 0x0270);
    cx -= memoryAGet16(ds, 0x0270);
    if (!flags.carry)
        goto loc_2f047;
    cx += 0x0010;
    bx--;
loc_2f047: // 2ebd:0477
    flags.carry = bx < dx;
    if (bx > dx)
        goto loc_2f051;
    if (flags.carry)
        goto loc_2f06e;
    flags.carry = cx < ax;
    if (flags.carry)
        goto loc_2f06e;
loc_2f051: // 2ebd:0481
    cx = memoryAGet16(ds, 0x0270);
    bx = memoryAGet16(ds, 0x0272);
    dx += bx;
    ax += cx;
    if (ax < 0x0010)
        goto loc_2f066;
    ax -= 0x0010;
    dx++;
loc_2f066: // 2ebd:0496
    memoryASet16(ds, 0x0270, ax);
    memoryASet16(ds, 0x0272, dx);
    flags.carry = 0;
loc_2f06e: // 2ebd:049e
    sp += 2;
    return;
loc_2f06f: // 2ebd:049f
    cx = memoryAGet16(es, di + 4);
    flags.carry = cx < memoryAGet16(es, di);
    cx -= memoryAGet16(es, di);
    if (!flags.carry)
        goto loc_2f07c;
    cx += 0x0010;
    bx--;
loc_2f07c: // 2ebd:04ac
    if (bx > dx)
        goto loc_2f086;
    if (bx < dx)
        goto loc_2f02b;
    if (cx < ax)
        goto loc_2f02b;
loc_2f086: // 2ebd:04b6
    cx = memoryAGet16(es, di);
    bx = memoryAGet16(es, di + 2);
    dx += bx;
    ax += cx;
    if (ax < 0x0010)
        goto loc_2f09a;
    ax -= 0x0010;
    dx++;
loc_2f09a: // 2ebd:04ca
    memoryASet16(es, di, ax);
    memoryASet16(es, di + 2, dx);
    if (dx != memoryAGet16(es, di + 6))
        goto loc_2f0b0;
    if (ax != memoryAGet16(es, di + 4))
        goto loc_2f0b0;
    sub_2f189();
loc_2f0b0: // 2ebd:04e0
    flags.carry = 0;
    sp += 2;
}
void sub_2f0b2() // 2ebd:04e2 +returnCarry
{
    sp -= 2;
    flags.carry = 0 /*ggg1*/;
    if (!ax)
        goto loc_2f0e9;
    sub_2f1e7();
    dx += bx;
    ax += cx;
    if (ax < 0x0010)
        goto loc_2f0c6;
    ax -= 0x0010;
    dx++;
loc_2f0c6: // 2ebd:04f6
    if (bx < memoryAGet16(ds, 0x026e))
        goto loc_2f0e8;
    if (bx > memoryAGet16(ds, 0x026e))
        goto loc_2f0d4;
    if (cx < memoryAGet16(ds, 0x026c))
        goto loc_2f0e8;
loc_2f0d4: // 2ebd:0504
    if (dx > memoryAGet16(ds, 0x0272))
        goto loc_2f0e8;
    if (dx < memoryAGet16(ds, 0x0272))
        goto loc_2f0e2;
    if (ax > memoryAGet16(ds, 0x0270))
        goto loc_2f0e8;
loc_2f0e2: // 2ebd:0512
    di = memoryAGet16(ds, 0x0274); es = memoryAGet16(ds, 0x0274 + 2);
    goto loc_2f137;
loc_2f0e8: // 2ebd:0518
    flags.carry = 1;
loc_2f0e9: // 2ebd:0519
    sp += 2;
    return;
loc_2f0ea: // 2ebd:051a
    if (bx < memoryAGet16(es, di + 2))
        goto loc_2f10e;
    if (bx > memoryAGet16(es, di + 2))
        goto loc_2f0f7;
    if (cx < memoryAGet16(es, di))
        goto loc_2f10e;
loc_2f0f7: // 2ebd:0527
    if (bx > memoryAGet16(es, di + 6))
        goto loc_2f134;
    if (bx < memoryAGet16(es, di + 6))
        goto loc_2f105;
    if (cx > memoryAGet16(es, di + 4))
        goto loc_2f134;
loc_2f105: // 2ebd:0535
    cx = memoryAGet16(es, di);
    bx = memoryAGet16(es, di + 2);
    goto loc_2f11b;
loc_2f10e: // 2ebd:053e
    if (dx < memoryAGet16(es, di + 2))
        goto loc_2f134;
    if (dx > memoryAGet16(es, di + 2))
        goto loc_2f11b;
    if (ax < memoryAGet16(es, di))
        goto loc_2f134;
loc_2f11b: // 2ebd:054b
    if (dx > memoryAGet16(es, di + 6))
        goto loc_2f131;
    if (dx < memoryAGet16(es, di + 6))
        goto loc_2f129;
    if (ax > memoryAGet16(es, di + 4))
        goto loc_2f131;
loc_2f129: // 2ebd:0559
    ax = memoryAGet16(es, di + 4);
    dx = memoryAGet16(es, di + 6);
loc_2f131: // 2ebd:0561
    sub_2f189();
loc_2f134: // 2ebd:0564
    di += 0x0008;
loc_2f137: // 2ebd:0567
    if (di)
        goto loc_2f0ea;
    if (dx != memoryAGet16(ds, 0x0272))
        goto loc_2f150;
    flags.carry = ax < memoryAGet16(ds, 0x0270);
    if (ax != memoryAGet16(ds, 0x0270))
        goto loc_2f150;
    memoryASet16(ds, 0x0270, cx);
    memoryASet16(ds, 0x0272, bx);
    sp += 2;
    return;
loc_2f150: // 2ebd:0580
    sub_2f165();
    if (flags.carry)
        goto loc_2f164;
    memoryASet16(es, di, cx);
    memoryASet16(es, di + 2, bx);
    memoryASet16(es, di + 4, ax);
    memoryASet16(es, di + 6, dx);
loc_2f164: // 2ebd:0594
    sp += 2;
    return;
}
void sub_2f165() // 2ebd:0595 +returnCarry
{
    sp -= 2;
    di = memoryAGet16(ds, 0x0274);
    di -= 0x0008;
    if (!di)
        goto loc_2f187;
    si = di;
    si >>= 1;
    si >>= 1;
    si >>= 1;
    si >>= 1;
    si += memoryAGet16(ds, 0x0276);
    flags.carry = si < memoryAGet16(ds, 0x0272);
    if (si <= memoryAGet16(ds, 0x0272))
        goto loc_2f187;
    memoryASet16(ds, 0x0274, di);
    sp += 2;
    return;
loc_2f187: // 2ebd:05b7
    flags.carry = 1;
    sp += 2;
}
void sub_2f189() // 2ebd:05b9
{
    sp -= 2;
    si = memoryAGet16(ds, 0x0274);
    flags.direction = 0;
    movsw<ES_DI, ES_SI>();
    movsw<ES_DI, ES_SI>();
    movsw<ES_DI, ES_SI>();
    movsw<ES_DI, ES_SI>();
    di -= 0x0008;
    memoryASet16(ds, 0x0274, si);
    sp += 2;
}
void sub_2f19e() // 2ebd:05ce
{
    sp -= 2;
    di = memoryAGet16(ds, 0x0274);
    if (di)
        goto loc_2f1b7;
    di -= memoryAGet16(ds, 0x0278);
    if (di)
        goto loc_2f1bf;
    si = 0;
    di = memoryAGet16(ds, 0x0276);
    di += 0x1000;
    sp += 2;
    return;
loc_2f1b7: // 2ebd:05e7
    flags.carry = di < memoryAGet16(ds, 0x0278);
    di -= memoryAGet16(ds, 0x0278);
    if (!flags.carry)
        goto loc_2f1bf;
    di = 0;
loc_2f1bf: // 2ebd:05ef
    si = di;
    si &= 0x000f;
    di >>= 1;
    di >>= 1;
    di >>= 1;
    di >>= 1;
    di += memoryAGet16(ds, 0x0276);
    if (di > memoryAGet16(ds, 0x0272))
        goto loc_2f1e6;
    if (di < memoryAGet16(ds, 0x0272))
        goto loc_2f1de;
    if (si >= memoryAGet16(ds, 0x0270))
        goto loc_2f1e6;
loc_2f1de: // 2ebd:060e
    si = memoryAGet16(ds, 0x0270);
    di = memoryAGet16(ds, 0x0272);
loc_2f1e6: // 2ebd:0616
    sp += 2;
    return;
}
void sub_2f1e7() // 2ebd:0617
{
    sp -= 2;
    dx = ax;
    ax &= 0x000f;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    sp += 2;
}
void sub_2f1f5() // 2ebd:0625
{
    sp -= 2;
    cl = 0x04;
    dx = rol16(dx, cl);
    cx = dx;
    cx &= 0xfff0;
    dx &= 0x000f;
    ax |= cx;
    sp += 2;
}
void sub_2f204() // 2ebd:0634 +far +stackDrop6
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2);
    si = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2);
    al = lodsb<DS_SI>();
    stosb<ES_DI>(al);
    cl = al;
    ch = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2f21e() // 2ebd:064e +nearfar +stackDrop12
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    si = memoryAGet16(ss, bx + 10); ds = memoryAGet16(ss, bx + 10 + 2);
    di = memoryAGet16(ss, bx + 6); es = memoryAGet16(ss, bx + 6 + 2);
    cx = memoryAGet16(ss, bx + 4);
    al = lodsb<DS_SI>();
    if (al <= cl)
        goto loc_2f236;
    al = cl;
loc_2f236: // 2ebd:0666
    stosb<ES_DI>(al);
    cl = al;
    ch = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_2f250() // 2ebd:0680 +nearfar +stackDrop10
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    di = memoryAGet16(ss, bx + 12); es = memoryAGet16(ss, bx + 12 + 2);
    si = memoryAGet16(ss, bx + 8); ds = memoryAGet16(ss, bx + 8 + 2);
    al = memoryAGet(ds, si);
    ah = 0;
    cx = memoryAGet16(ss, bx + 6);
    if ((short)cx > 0)
        goto loc_2f26c;
    cx = 0x0001;
loc_2f26c: // 2ebd:069c
    si += cx;
    flags.carry = ax < cx;
    ax -= cx;
    if (flags.carry)
        goto loc_2f285;
    ax++;
    cx = memoryAGet16(ss, bx + 4);
    if ((short)cx >= 0)
        goto loc_2f27d;
    cx = 0;
loc_2f27d: // 2ebd:06ad
    if (ax <= cx)
        goto loc_2f287;
    ax = cx;
    goto loc_2f287;
loc_2f285: // 2ebd:06b5
    ax = 0;
loc_2f287: // 2ebd:06b7
    stosb<ES_DI>(al);
    cx = ax;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2f291() // 2ebd:06c1 +nearfar +stackDrop6
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2);
    si = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2);
    cl = memoryAGet(es, di);
    ch = 0;
    al = lodsb<DS_SI>();
    flags.carry = (memoryAGet(es, di) + al) >= 0x100;
    memoryASet(es, di, memoryAGet(es, di) + al);
    if (!flags.carry)
        goto loc_2f2b1;
    memoryASet(es, di, 0xff);
    al = cl;
    al = ~al;
loc_2f2b1: // 2ebd:06e1
    di += cx;
    di++;
    cl = al;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2f2bd() // 2ebd:06ed +far +stackDrop10
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    push(ds);
    si = memoryAGet16(ss, bx + 8); ds = memoryAGet16(ss, bx + 8 + 2);
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    cl = memoryAGet(ds, si);
    ch = 0;
    dl = memoryAGet(es, di);
    dh = 0;
    flags.carry = dx < cx;
    dx -= cx;
    if (flags.carry)
        goto loc_2f2ee;
    ax = 0x0001;
    if (!cx)
        goto loc_2f2f0;
    dx++;
    si++;
loc_2f2df: // 2ebd:070f
    di++;
    push(cx);
    push(si);
    push(di);
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) cmpsb<DS_SI, ES_DI>();
    di = pop();
    si = pop();
    cx = pop();
    if (flags.zero)
        goto loc_2f2f0;
    ax++;
    dx--;
    if (dx)
        goto loc_2f2df;
loc_2f2ee: // 2ebd:071e
    ax = 0;
loc_2f2f0: // 2ebd:0720
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2f2f4() // 2ebd:0724 +far +returnZero +stackDrop10
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    si = memoryAGet16(ss, bx + 8); ds = memoryAGet16(ss, bx + 8 + 2);
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    al = lodsb<DS_SI>();
    ah = memoryAGet(es, di);
    di++;
    cl = al;
    if (cl <= ah)
        goto loc_2f30e;
    cl = ah;
loc_2f30e: // 2ebd:073e
    if (!cl)
        goto loc_2f318;
    ch = 0;
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) cmpsb<DS_SI, ES_DI>();
    if (!flags.zero)
        goto loc_2f31a;
loc_2f318: // 2ebd:0748
    flags.zero = al == ah;
loc_2f31a: // 2ebd:074a
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2f31f() // 2ebd:074f +far +stackDrop4
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    di = memoryAGet16(ss, bx + 6); es = memoryAGet16(ss, bx + 6 + 2);
    al = 0x01;
    stosb<ES_DI>(al);
    al = memoryAGet(ss, bx + 4);
    stosb<ES_DI>(al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2f3a0() // 2ebd:07d0 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0200;
    if ((short)memoryAGet16(ss, bp + 6) <= (short)0x0000)
        goto loc_2f3f0;
    di = bp - 256;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2);
    push(es);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    push(ax);
    push(cs);
    sub_2f250();
    di = bp - 512;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2);
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 8);
    ax += memoryAGet16(ss, bp + 6);
    push(ax);
    ax = 0x00ff;
    push(ax);
    push(cs);
    sub_2f250();
    push(cs);
    sub_2f291();
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2);
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs);
    sub_2f21e();
loc_2f3f0: // 2ebd:0820
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2f4a4() // 2ebd:08d4 +far +returnZero +stackDrop8
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    al = memoryAGet(ss, bx + 8);
    bl = al;
    bh = 0;
    cl = 0x03;
    bx >>= cl;
    cl = al;
    cl &= 0x07;
    al = 0x01;
    al <<= cl;
    flags.zero = !(memoryAGet(es, bx + di) & al);
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2f550() // 2ebd:0980 +far +stackDrop4
{
    sp -= 2;
    sub_2f59f();
    ax = 0;
    bx = sp;
    bx = memoryAGet16(ss, bx + 4);
    if (!bx)
        goto loc_2f563;
    tx = dx; dx = ax; ax = tx;
    div16(bx);
    tx = dx; dx = ax; ax = tx;
loc_2f563: // 2ebd:0993
    sp += 2;
    cs = pop();
    sp += 2;
    return;
}
void sub_2f59f() // 2ebd:09cf
{
    sp -= 2;
    ax = memoryAGet16(ds, 0x028e);
    bx = memoryAGet16(ds, 0x0290);
    cx = ax;
    mul16(memoryAGet16(cs, 0x0a05));
    cx <<= 1;
    cx <<= 1;
    cx <<= 1;
    ch += cl;
    dx += cx;
    dx += bx;
    bx <<= 1;
    bx <<= 1;
    dx += bx;
    dh += bl;
    cl = 0x05;
    bx <<= cl;
    dh += bl;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x028e, ax);
    memoryASet16(ds, 0x0290, dx);
    sp += 2;
}
void sub_2f5e4() // 2ebd:0a14
{
    bool temp_cf;

    sp -= 2;
    push(di);
    flags.direction = 0;
    bx = ax;
    if ((short)dx >= 0)
        goto loc_2f5f9;
    bx = ~bx;
    dx = ~dx;
    flags.carry = (bx + 0x0001) >= 0x10000;
    bx += 0x0001;
    dx += 0x0000 + flags.carry;
    al = 0x2d;
    stosb<ES_DI>(al);
loc_2f5f9: // 2ebd:0a29
    si = 0x0a66;
    cl = 0x09;
loc_2f5fe: // 2ebd:0a2e
    if (dx < memoryAGet16(cs, si + 2))
        goto loc_2f60b;
    if (dx > memoryAGet16(cs, si + 2))
        goto loc_2f612;
    if (bx >= memoryAGet16(cs, si))
        goto loc_2f612;
loc_2f60b: // 2ebd:0a3b
    si += 0x0004;
    cl--;
    if (cl)
        goto loc_2f5fe;
loc_2f612: // 2ebd:0a42
    cl++;
loc_2f614: // 2ebd:0a44
    al = 0x2f;
loc_2f616: // 2ebd:0a46
    al++;
    flags.carry = bx < memoryAGet16(cs, si);
    bx -= memoryAGet16(cs, si);
    temp_cf = dx < memoryAGet16(cs, si + 2) + flags.carry;
    dx = dx - memoryAGet16(cs, si + 2) - flags.carry;
    flags.carry = temp_cf;
    if (!flags.carry)
        goto loc_2f616;
    flags.carry = (bx + memoryAGet16(cs, si)) >= 0x10000;
    bx += memoryAGet16(cs, si);
    dx += memoryAGet16(cs, si + 2) + flags.carry;
    si += 0x0004;
    stosb<ES_DI>(al);
    cl--;
    if (cl)
        goto loc_2f614;
    cx = di;
    di = pop();
    cx -= di;
    sp += 2;
}
void sub_2f65e() // 2ebd:0a8e +returnCarry
{
    sp -= 2;
    ax = 0;
    dx = 0;
    si = 0;
    if (cx==0)
        goto loc_2f6bf;
    if (memoryAGet(es, di) == 0x2b)
        goto loc_2f673;
    if (memoryAGet(es, di) != 0x2d)
        goto loc_2f677;
    si++;
loc_2f673: // 2ebd:0aa3
    di++;
    cx--;
    if (cx==0)
        goto loc_2f6bf;
loc_2f677: // 2ebd:0aa7
    if (memoryAGet(es, di) == 0x24)
        goto loc_2f6c1;
loc_2f67d: // 2ebd:0aad
    bl = memoryAGet(es, di);
    bl -= 0x3a;
    flags.carry = (bl + 0x0a) >= 0x100;
    bl += 0x0a;
    if (!flags.carry)
        goto loc_2f6b0;
    if (dx & 0xf000)
        goto loc_2f6bf;
    push(bx);
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    push(dx);
    push(ax);
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    bx = pop();
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    bx = pop();
    dx += bx + flags.carry;
    bx = pop();
    bh = 0;
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    dx += 0x0000 + flags.carry;
    if ((short)dx < 0)
        goto loc_2f6bf;
    di++;
    if (--cx)
        goto loc_2f67d;
loc_2f6b0: // 2ebd:0ae0
    si--;
    if (si)
        goto loc_2f6bd;
    ax = ~ax;
    dx = ~dx;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
loc_2f6bd: // 2ebd:0aed
    flags.carry = 0;
    sp += 2;
    return;
loc_2f6bf: // 2ebd:0aef
    flags.carry = 1;
    sp += 2;
    return;
loc_2f6c1: // 2ebd:0af1
    di++;
    cx--;
    if (cx==0)
        goto loc_2f6bf;
loc_2f6c5: // 2ebd:0af5
    bl = memoryAGet(es, di);
    if (bl < 0x61)
        goto loc_2f6d0;
    bl -= 0x20;
loc_2f6d0: // 2ebd:0b00
    bl -= 0x3a;
    flags.carry = (bl + 0x0a) >= 0x100;
    bl += 0x0a;
    if (flags.carry)
        goto loc_2f6e3;
    bl -= 0x17;
    flags.carry = (bl + 0x06) >= 0x100;
    bl += 0x06;
    if (!flags.carry)
        goto loc_2f6b0;
    bl += 0x0a;
loc_2f6e3: // 2ebd:0b13
    bh = 0x04;
loc_2f6e5: // 2ebd:0b15
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    if (flags.carry)
        goto loc_2f6bf;
    bh--;
    if (bh)
        goto loc_2f6e5;
    al |= bl;
    di++;
    if (--cx)
        goto loc_2f6c5;
    goto loc_2f6b0;
}
void sub_2f6f6() // 2ebd:0b26 +far +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0020;
    ax = memoryAGet16(ss, bp + 14);
    dx = memoryAGet16(ss, bp + 16);
    di = bp - 32;
    push(ss);
    es = pop();
    sub_2f5e4();
    push(ds);
    si = di;
    push(ss);
    ds = pop();
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    dx = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, bp + 12);
    if ((short)ax <= (short)dx)
        goto loc_2f71e;
    ax = dx;
loc_2f71e: // 2ebd:0b4e
    if ((short)cx <= (short)dx)
        goto loc_2f724;
    cx = dx;
loc_2f724: // 2ebd:0b54
    if ((short)ax >= (short)cx)
        goto loc_2f72a;
    ax = cx;
loc_2f72a: // 2ebd:0b5a
    flags.direction = 0;
    stosb<ES_DI>(al);
    ax -= cx;
    if (!ax)
        goto loc_2f738;
    push(cx);
    cx = ax;
    al = 0x20;
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    cx = pop();
loc_2f738: // 2ebd:0b68
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_2f741() // 2ebd:0b71 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2);
    cl = memoryAGet(es, di);
    ch = 0;
    di++;
    if (cx==0)
        goto loc_2f758;
loc_2f74f: // 2ebd:0b7f
    if (memoryAGet(es, di) != 0x20)
        goto loc_2f758;
    di++;
    if (--cx)
        goto loc_2f74f;
loc_2f758: // 2ebd:0b88
    sub_2f65e();
    if (flags.carry)
        goto loc_2f75f;
    if (cx==0)
        goto loc_2f768;
loc_2f75f: // 2ebd:0b8f
    cx = di;
    cx -= memoryAGet16(ss, bp + 10);
    ax = 0;
    dx = 0;
loc_2f768: // 2ebd:0b98
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet16(es, di, cx);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2f772() // 2ebd:0ba2 +stackDrop10
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2);
    si = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2);
    flags.direction = 0;
    ax = 0;
    stosw<ES_DI>(ax);
    ax = 0xd7b0;
    stosw<ES_DI>(ax);
    ax = 0x0080;
    stosw<ES_DI>(ax);
    ax = 0;
    stosw<ES_DI>(ax);
    stosw<ES_DI>(ax);
    stosw<ES_DI>(ax);
    ax = di + 116;
    stosw<ES_DI>(ax);
    ax = es;
    stosw<ES_DI>(ax);
    ax = 0x0cb7;
    stosw<ES_DI>(ax);
    ax = cs;
    stosw<ES_DI>(ax);
    ax = 0;
    cx = 0x000e;
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    al = lodsb<DS_SI>();
    if (al <= 0x4f)
        goto loc_2f7aa;
    al = 0x4f;
loc_2f7aa: // 2ebd:0bda
    cl = al;
    ch = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    al = 0;
    stosb<ES_DI>(al);
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2f7e2() // 2ebd:0c12 +nearfar +stackDrop6
{
    sp -= 2;
    dx = 0xd7b1;
    goto loc_2f7ef;
    // gap 8 bytes
loc_2f7ef: // 2ebd:0c1f
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    ax = memoryAGet16(es, di + 2);
    if (ax == 0xd7b1)
        goto loc_2f810;
    if (ax == 0xd7b2)
        goto loc_2f810;
    if (ax == 0xd7b0)
        goto loc_2f818;
    memoryASet16(ds, 0x028c, 0x0066);
    goto loc_2f834;
loc_2f810: // 2ebd:0c40
    push(dx);
    push(es);
    push(di);
    push(cs);
    sub_2f83b();
    dx = pop();
loc_2f818: // 2ebd:0c48
    ax = 0;
    memoryASet16(es, di + 2, dx);
    memoryASet16(es, di + 8, ax);
    memoryASet16(es, di + 10, ax);
    bx = 0x0010;
    sub_2f876();
    if (flags.zero)
        goto loc_2f834;
    memoryASet16(es, di + 2, 0xd7b0);
loc_2f834: // 2ebd:0c64
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2f7e7() // 2ebd:0c17 +nearfar +stackDrop6
{
    sp -= 2;
    dx = 0xd7b2;
    goto loc_2f7ef;
    // gap 3 bytes
loc_2f7ef: // 2ebd:0c1f
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    ax = memoryAGet16(es, di + 2);
    if (ax == 0xd7b1)
        goto loc_2f810;
    if (ax == 0xd7b2)
        goto loc_2f810;
    if (ax == 0xd7b0)
        goto loc_2f818;
    memoryASet16(ds, 0x028c, 0x0066);
    goto loc_2f834;
loc_2f810: // 2ebd:0c40
    push(dx);
    push(es);
    push(di);
    push(cs);
    sub_2f83b();
    dx = pop();
loc_2f818: // 2ebd:0c48
    ax = 0;
    memoryASet16(es, di + 2, dx);
    memoryASet16(es, di + 8, ax);
    memoryASet16(es, di + 10, ax);
    bx = 0x0010;
    sub_2f876();
    if (flags.zero)
        goto loc_2f834;
    memoryASet16(es, di + 2, 0xd7b0);
loc_2f834: // 2ebd:0c64
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2f83b() // 2ebd:0c6b +stackDrop6
{
    sp -= 2;
    al = 0x01;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    if (memoryAGet16(es, di + 2) == 0xd7b1)
        goto loc_2f863;
    if (memoryAGet16(es, di + 2) == 0xd7b2)
        goto loc_2f85b;
    memoryASet16(ds, 0x028c, 0x0067);
    goto loc_2f873;
loc_2f85b: // 2ebd:0c8b
    push(ax);
    bx = 0x0014;
    sub_2f876();
    ax = pop();
loc_2f863: // 2ebd:0c93
    if (!al)
        goto loc_2f873;
    bx = 0x001c;
    sub_2f876();
    memoryASet16(es, di + 2, 0xd7b0);
loc_2f873: // 2ebd:0ca3
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2f876() // 2ebd:0ca6 +returnZero
{
    sp -= 2;
    push(es);
    push(di);
    push(es);
    push(di);
    switch (memoryAGet16(es, bx + di + 2)*0x10000 + memoryAGet16(es, bx + di))
    {
        case 0x2ebd0cb7: push(cs); cs = 0x2ebd; sub_2f887(); assert(cs == 0x2ebd); break;
        case 0x2b4d0359: push(cs); cs = 0x2b4d; sub_2b829(); assert(cs == 0x2ebd); break;
        case 0x2b4d046f: push(cs); cs = 0x2b4d; sub_2b93f(); assert(cs == 0x2ebd); break;
        case 0x2b4d043e: push(cs); cs = 0x2b4d; sub_2b90e(); assert(cs == 0x2ebd); break;
        default:
            stop("ind 2ebd:0caa");
    }
    flags.zero = !ax;
    if (flags.zero)
        goto loc_2f884;
    memoryASet16(ds, 0x028c, ax);
loc_2f884: // 2ebd:0cb4
    di = pop();
    es = pop();
//    stop("stack_unbalanced");
    sp += 2;
}
void sub_2f887() // 2ebd:0cb7 +stackDrop6
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2);
    cx = 0;
    memoryASet16(ds, di, cx);
    ax = 0x3d00;
    if (memoryAGet16(ds, di + 2) == 0xd7b1)
        goto loc_2f8a9;
    al = 0x02;
    memoryASet16(ds, di, memoryAGet16(ds, di) + 1);
    if (memoryAGet16(ds, di + 2) == 0xd7b3)
        goto loc_2f8a9;
    ah = 0x3c;
loc_2f8a9: // 2ebd:0cd9
    if (memoryAGet(ds, di + 48) == 0x00)
        goto loc_2f8b8;
    dx = di + 48;
    interrupt(0x21);
    if (flags.carry)
        goto loc_2f905;
    memoryASet16(ds, di, ax);
loc_2f8b8: // 2ebd:0ce8
    ax = 0x0d93;
    cx = 0;
    bx = cx;
    if (memoryAGet16(ds, di + 2) == 0xd7b1)
        goto loc_2f8ef;
    bx = memoryAGet16(ds, di);
    ax = 0x4400;
    interrupt(0x21);
    ax = 0x0de8;
    cx = ax;
    bx = cs;
    if (dl & 0x80)
        goto loc_2f8ea;
    if (memoryAGet16(ds, di + 2) != 0xd7b3)
        goto loc_2f8e3;
    sub_2f909();
loc_2f8e3: // 2ebd:0d13
    ax = 0x0dc3;
    cx = 0;
    bx = cx;
loc_2f8ea: // 2ebd:0d1a
    memoryASet16(ds, di + 2, 0xd7b2);
loc_2f8ef: // 2ebd:0d1f
    memoryASet16(ds, di + 20, ax);
    memoryASet16(ds, di + 22, cs);
    memoryASet16(ds, di + 24, cx);
    memoryASet16(ds, di + 26, bx);
    memoryASet16(ds, di + 28, 0x0e08);
    memoryASet16(ds, di + 30, cs);
    ax = 0;
loc_2f905: // 2ebd:0d35
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2f909() // 2ebd:0d39
{
    bool temp_cf;

    sp -= 2;
    dx = 0;
    cx = 0;
    bx = memoryAGet16(ds, di);
    ax = 0x4202;
    interrupt(0x21);
    flags.carry = ax < 0x0080;
    ax -= 0x0080;
    temp_cf = dx < 0x0000 + flags.carry;
    dx = dx - 0x0000 - flags.carry;
    flags.carry = temp_cf;
    if (!flags.carry)
        goto loc_2f920;
    ax = 0;
    dx = 0;
loc_2f920: // 2ebd:0d50
    cx = dx;
    dx = ax;
    bx = memoryAGet16(ds, di);
    ax = 0x4200;
    interrupt(0x21);
    dx = di + 128;
    cx = 0x0080;
    bx = memoryAGet16(ds, di);
    ah = 0x3f;
    interrupt(0x21);
    if (!flags.carry)
        goto loc_2f93c;
    ax = 0;
loc_2f93c: // 2ebd:0d6c
    bx = 0;
loc_2f93e: // 2ebd:0d6e
    if (bx == ax)
        goto loc_2f962;
    if (memoryAGet(ds, bx + di + 128) == 0x1a)
        goto loc_2f94c;
    bx++;
    goto loc_2f93e;
loc_2f94c: // 2ebd:0d7c
    dx = bx;
    dx -= ax;
    cx = 0xffff;
    bx = memoryAGet16(ds, di);
    ax = 0x4202;
    interrupt(0x21);
    cx = 0;
    bx = memoryAGet16(ds, di);
    ah = 0x40;
    interrupt(0x21);
loc_2f962: // 2ebd:0d92
    sp += 2;
    return;
}
void sub_2fa31() // 2ebd:0e61 +returnZero
{
    sp -= 2;
    flags.zero = memoryAGet16(ds, 0x028c) == 0x0000;
    if (!flags.zero)
        goto loc_2fa40;
    flags.zero = memoryAGet16(es, di + 2) == 0xd7b2;
    if (!flags.zero)
        goto loc_2fa4d;
loc_2fa40: // 2ebd:0e70
    bx = memoryAGet16(es, di + 8);
    dx = memoryAGet16(es, di + 4);
    {int tmp1 = memoryAGet16(es, di + 12); int tmp2 = memoryAGet16(es, di + 12 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    sp += 2;
    return;
loc_2fa4d: // 2ebd:0e7d
    memoryASet16(ds, 0x028c, 0x0069);
    goto loc_2fa40;
}
void sub_2fa55() // 2ebd:0e85
{
    sp -= 2;
    memoryASet(es, bx + di, al);
    bx++;
    if (bx == dx)
        goto loc_2fa5e;
    sp += 2;
    return;
loc_2fa5e: // 2ebd:0e8e
    di = sp;
    {int tmp1 = memoryAGet16(ss, di + 2); int tmp2 = memoryAGet16(ss, di + 2 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    push(cx);
    push(si);
    push(ds);
    dx = 0x2fd7;
    ds = dx;
    memoryASet16(es, di + 8, bx);
    push(es);
    push(di);
    push(es);
    push(di);
    push(cs); cs = memoryAGet16(es, di + 20 + 2); indirectCall(cs, memoryAGet16(es, di + 20), 0x2ebd, 0x0ea4); assert(cs == 0x2ebd); // 2ebd:0ea4;
    if (!ax)
        goto loc_2fa7f;
    memoryASet16(ds, 0x028c, ax);
loc_2fa7f: // 2ebd:0eaf
    di = pop();
    es = pop();
    ax = memoryAGet16(es, di + 10);
    bx = memoryAGet16(es, di + 8);
    dx = memoryAGet16(es, di + 4);
    {int tmp1 = memoryAGet16(es, di + 12); int tmp2 = memoryAGet16(es, di + 12 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    ds = pop();
    si = pop();
    cx = pop();
    stop("stack_unbalanced");
    sp += 2;
}
void sub_2fabe() // 2ebd:0eee +far +stackDrop6
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    push(es);
    push(di);
    sub_2fa31();
    if (!flags.zero)
        goto loc_2fad5;
    al = 0x0d;
    sub_2fa55();
    al = 0x0a;
    sub_2fa55();
loc_2fad5: // 2ebd:0f05
    di = pop();
    es = pop();
    memoryASet16(es, di + 8, bx);
    goto loc_2fae3;
    // gap 6 bytes
loc_2fae3: // 2ebd:0f13
    if (memoryAGet16(es, di + 26) != 0x0000)
        goto loc_2faed;
loc_2faea: // 2ebd:0f1a
    sp += 2;
    cs = pop();
    sp += 4;
    return;
loc_2faed: // 2ebd:0f1d
    if (memoryAGet16(ds, 0x028c) != 0x0000)
        goto loc_2faea;
    push(es);
    push(di);
    switch (memoryAGet16(es, di + 24 + 2)*0x10000 + memoryAGet16(es, di + 24))
    {
        case 0x2b4d043e: push(cs); cs = 0x2b4d; sub_2b90e(); assert(cs == 0x2ebd); break;
        default:
            stop("ind 2ebd:0f26");
    }
    if (!ax)
        goto loc_2faea;
    memoryASet16(ds, 0x028c, ax);
    goto loc_2faea;
}
void sub_2fb3b() // 2ebd:0f6b +far +stackDrop8
{
    bool temp_cond0;

    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    di = memoryAGet16(ss, bp + 12); es = memoryAGet16(ss, bp + 12 + 2);
    push(es);
    push(di);
    sub_2fa31();
    if (!flags.zero)
        goto loc_2fb6e;
    si = memoryAGet16(ss, bp + 8); ds = memoryAGet16(ss, bp + 8 + 2);
    cx = memoryAGet16(ss, bp + 6);
    flags.direction = 0;
    al = lodsb<DS_SI>();
    ah = 0;
    temp_cond0 = (short)cx - (short)ax <= 0;
    cx -= ax;
    if (temp_cond0)
        goto loc_2fb63;
loc_2fb57: // 2ebd:0f87
    al = 0x20;
    sub_2fa55();
    if (--cx)
        goto loc_2fb57;
    al = memoryAGet(ds, si + 65535);
    ah = 0;
loc_2fb63: // 2ebd:0f93
    cx = ax;
    if (cx==0)
        goto loc_2fb6e;
loc_2fb67: // 2ebd:0f97
    flags.direction = 0;
    al = lodsb<DS_SI>();
    sub_2fa55();
    if (--cx)
        goto loc_2fb67;
loc_2fb6e: // 2ebd:0f9e
    di = pop();
    es = pop();
    memoryASet16(es, di + 8, bx);
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2fb79() // 2ebd:0fa9 +far +stackDrop10
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2);
    si = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2);
    flags.direction = 0;
    ax = 0;
    stosw<ES_DI>(ax);
    ax = 0xd7b0;
    stosw<ES_DI>(ax);
    ax = 0;
    cx = 0x0016;
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    al = lodsb<DS_SI>();
    if (al <= 0x4f)
        goto loc_2fb9a;
    al = 0x4f;
loc_2fb9a: // 2ebd:0fca
    cl = al;
    ch = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    al = 0;
    stosb<ES_DI>(al);
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2fba7() // 2ebd:0fd7 +far +stackDrop8
{
    sp -= 2;
    al = memoryAGet(ds, 0x0292);
    ah = 0x3d;
    dx = 0;
    goto loc_2fbb6;
    // gap 6 bytes
loc_2fbb6: // 2ebd:0fe6
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    if (memoryAGet16(es, di + 2) == 0xd7b0)
        goto loc_2fbde;
    if (memoryAGet16(es, di + 2) == 0xd7b3)
        goto loc_2fbd4;
    memoryASet16(ds, 0x028c, 0x0066);
    goto loc_2fc08;
loc_2fbd4: // 2ebd:1004
    push(ax);
    push(dx);
    push(es);
    push(di);
    push(cs);
    sub_2fc28();
    dx = pop();
    ax = pop();
loc_2fbde: // 2ebd:100e
    if (memoryAGet(es, di + 48) == 0x00)
        goto loc_2fbf7;
    push(ds);
    dx = di + 48;
    push(es);
    ds = pop();
    cx = 0;
    interrupt(0x21);
    ds = pop();
    if (!flags.carry)
        goto loc_2fbf8;
    memoryASet16(ds, 0x028c, ax);
    goto loc_2fc08;
loc_2fbf7: // 2ebd:1027
    tx = dx; dx = ax; ax = tx;
loc_2fbf8: // 2ebd:1028
    memoryASet16(es, di + 2, 0xd7b3);
    memoryASet16(es, di, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(es, di + 4, ax);
loc_2fc08: // 2ebd:1038
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2fbb0() // 2ebd:0fe0 +far +stackDrop8
{
    sp -= 2;
    ax = 0x3c00;
    dx = 0x0001;
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2);
    if (memoryAGet16(es, di + 2) == 0xd7b0)
        goto loc_2fbde;
    if (memoryAGet16(es, di + 2) == 0xd7b3)
        goto loc_2fbd4;
    memoryASet16(ds, 0x028c, 0x0066);
    goto loc_2fc08;
loc_2fbd4: // 2ebd:1004
    push(ax);
    push(dx);
    push(es);
    push(di);
    push(cs);
    sub_2fc28();
    dx = pop();
    ax = pop();
loc_2fbde: // 2ebd:100e
    if (memoryAGet(es, di + 48) == 0x00)
        goto loc_2fbf7;
    push(ds);
    dx = di + 48;
    push(es);
    ds = pop();
    cx = 0;
    interrupt(0x21);
    ds = pop();
    if (!flags.carry)
        goto loc_2fbf8;
    memoryASet16(ds, 0x028c, ax);
    goto loc_2fc08;
loc_2fbf7: // 2ebd:1027
    tx = dx; dx = ax; ax = tx;
loc_2fbf8: // 2ebd:1028
    memoryASet16(es, di + 2, 0xd7b3);
    memoryASet16(es, di, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(es, di + 4, ax);
loc_2fc08: // 2ebd:1038
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2fc28() // 2ebd:1058 +nearfar +stackDrop6
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2);
    sub_2fc4d();
    if (!flags.zero)
        goto loc_2fc4a;
    bx = memoryAGet16(es, di);
    if (bx <= 0x0004)
        goto loc_2fc44;
    ah = 0x3e;
    interrupt(0x21);
    if (!flags.carry)
        goto loc_2fc44;
    memoryASet16(ds, 0x028c, ax);
loc_2fc44: // 2ebd:1074
    memoryASet16(es, di + 2, 0xd7b0);
loc_2fc4a: // 2ebd:107a
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2fc4d() // 2ebd:107d +returnZero
{
    sp -= 2;
    flags.zero = memoryAGet16(es, di + 2) == 0xd7b3;
    if (flags.zero)
        goto loc_2fc5b;
    memoryASet16(ds, 0x028c, 0x0067);
loc_2fc5b: // 2ebd:108b
    sp += 2;
    return;
}
void sub_2fc5c() // 2ebd:108c +far +stackDrop6
{
    sp -= 2;
    ah = 0x3f;
    dx = 0x0064;
    goto loc_2fc68;
    // gap 5 bytes
loc_2fc68: // 2ebd:1098
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2);
    sub_2fc4d();
    if (!flags.zero)
        goto loc_2fc8e;
    push(ds);
    push(dx);
    dx = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2);
    cx = memoryAGet16(es, di + 4);
    bx = memoryAGet16(es, di);
    interrupt(0x21);
    dx = pop();
    ds = pop();
    if (flags.carry)
        goto loc_2fc8b;
    if (ax == cx)
        goto loc_2fc8e;
    ax = dx;
loc_2fc8b: // 2ebd:10bb
    memoryASet16(ds, 0x028c, ax);
loc_2fc8e: // 2ebd:10be
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2fc63() // 2ebd:1093 +far +stackDrop6
{
    sp -= 2;
    ah = 0x40;
    dx = 0x0065;
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2);
    sub_2fc4d();
    if (!flags.zero)
        goto loc_2fc8e;
    push(ds);
    push(dx);
    dx = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2);
    cx = memoryAGet16(es, di + 4);
    bx = memoryAGet16(es, di);
    interrupt(0x21);
    dx = pop();
    ds = pop();
    if (flags.carry)
        goto loc_2fc8b;
    if (ax == cx)
        goto loc_2fc8e;
    ax = dx;
loc_2fc8b: // 2ebd:10bb
    memoryASet16(ds, 0x028c, ax);
loc_2fc8e: // 2ebd:10be
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2fd4d() // 2ebd:117d +far +stackDrop10
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2);
    cx = memoryAGet16(ss, bx + 6);
    al = memoryAGet(ss, bx + 4);
    flags.direction = 0;
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    sp += 2;
    cs = pop();
    sp += 8;
}
void fixReloc(uint16_t seg)
{
    memoryASet16(seg, 0x000f, memoryAGet16(seg, 0x000f) + seg); // 2dea -> 2fd7; lin=f
    memoryASet16(0x0017 + seg, 0x000d, memoryAGet16(0x0017 + seg, 0x000d) + seg); // 287e -> 2a6b; lin=17d
    memoryASet16(0x002c + seg, 0x0001, memoryAGet16(0x002c + seg, 0x0001) + seg); // 287e -> 2a6b; lin=2c1
    memoryASet16(0x008a + seg, 0x000e, memoryAGet16(0x008a + seg, 0x000e) + seg); // 286e -> 2a5b; lin=8ae
    memoryASet16(0x008b + seg, 0x000a, memoryAGet16(0x008b + seg, 0x000a) + seg); // 286e -> 2a5b; lin=8ba
    memoryASet16(0x00a5 + seg, 0x0001, memoryAGet16(0x00a5 + seg, 0x0001) + seg); // 286e -> 2a5b; lin=a51
    memoryASet16(0x00ba + seg, 0x0003, memoryAGet16(0x00ba + seg, 0x0003) + seg); // 287e -> 2a6b; lin=ba3
    memoryASet16(0x00bf + seg, 0x0001, memoryAGet16(0x00bf + seg, 0x0001) + seg); // 2dea -> 2fd7; lin=bf1
    memoryASet16(0x00ca + seg, 0x000b, memoryAGet16(0x00ca + seg, 0x000b) + seg); // 2960 -> 2b4d; lin=cab
    memoryASet16(0x00cd + seg, 0x0001, memoryAGet16(0x00cd + seg, 0x0001) + seg); // 2960 -> 2b4d; lin=cd1
    memoryASet16(0x00d0 + seg, 0x0000, memoryAGet16(0x00d0 + seg, 0x0000) + seg); // 2960 -> 2b4d; lin=d00
    memoryASet16(0x00d3 + seg, 0x0007, memoryAGet16(0x00d3 + seg, 0x0007) + seg); // 2960 -> 2b4d; lin=d37
    memoryASet16(0x00d6 + seg, 0x0000, memoryAGet16(0x00d6 + seg, 0x0000) + seg); // 2960 -> 2b4d; lin=d60
    memoryASet16(0x00d9 + seg, 0x0002, memoryAGet16(0x00d9 + seg, 0x0002) + seg); // 2960 -> 2b4d; lin=d92
    memoryASet16(0x00dc + seg, 0x0009, memoryAGet16(0x00dc + seg, 0x0009) + seg); // 2960 -> 2b4d; lin=dc9
    memoryASet16(0x00df + seg, 0x0002, memoryAGet16(0x00df + seg, 0x0002) + seg); // 2960 -> 2b4d; lin=df2
    memoryASet16(0x00e2 + seg, 0x0004, memoryAGet16(0x00e2 + seg, 0x0004) + seg); // 2960 -> 2b4d; lin=e24
    memoryASet16(0x00e5 + seg, 0x0001, memoryAGet16(0x00e5 + seg, 0x0001) + seg); // 2cc6 -> 2eb3; lin=e51
    memoryASet16(0x00e6 + seg, 0x0001, memoryAGet16(0x00e6 + seg, 0x0001) + seg); // 2cc6 -> 2eb3; lin=e61
    memoryASet16(0x00e7 + seg, 0x000b, memoryAGet16(0x00e7 + seg, 0x000b) + seg); // 0000 -> 01ed; lin=e7b
    memoryASet16(0x00e8 + seg, 0x000f, memoryAGet16(0x00e8 + seg, 0x000f) + seg); // 2cc6 -> 2eb3; lin=e8f
    memoryASet16(0x00e9 + seg, 0x0008, memoryAGet16(0x00e9 + seg, 0x0008) + seg); // 0000 -> 01ed; lin=e98
    memoryASet16(0x00e9 + seg, 0x000f, memoryAGet16(0x00e9 + seg, 0x000f) + seg); // 2cc6 -> 2eb3; lin=e9f
    memoryASet16(0x00ea + seg, 0x000c, memoryAGet16(0x00ea + seg, 0x000c) + seg); // 2cc6 -> 2eb3; lin=eac
    memoryASet16(0x00eb + seg, 0x0005, memoryAGet16(0x00eb + seg, 0x0005) + seg); // 0000 -> 01ed; lin=eb5
    memoryASet16(0x00eb + seg, 0x000c, memoryAGet16(0x00eb + seg, 0x000c) + seg); // 2cc6 -> 2eb3; lin=ebc
    memoryASet16(0x00ed + seg, 0x0003, memoryAGet16(0x00ed + seg, 0x0003) + seg); // 2cc6 -> 2eb3; lin=ed3
    memoryASet16(0x00ee + seg, 0x0003, memoryAGet16(0x00ee + seg, 0x0003) + seg); // 2cc6 -> 2eb3; lin=ee3
    memoryASet16(0x00f3 + seg, 0x000c, memoryAGet16(0x00f3 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=f3c
    memoryASet16(0x00f4 + seg, 0x000a, memoryAGet16(0x00f4 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=f4a
    memoryASet16(0x00f5 + seg, 0x0009, memoryAGet16(0x00f5 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=f59
    memoryASet16(0x00f6 + seg, 0x0006, memoryAGet16(0x00f6 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=f66
    memoryASet16(0x00f8 + seg, 0x0009, memoryAGet16(0x00f8 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=f89
    memoryASet16(0x00f9 + seg, 0x0007, memoryAGet16(0x00f9 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=f97
    memoryASet16(0x00f9 + seg, 0x000c, memoryAGet16(0x00f9 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=f9c
    memoryASet16(0x00fb + seg, 0x0008, memoryAGet16(0x00fb + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=fb8
    memoryASet16(0x00fb + seg, 0x000d, memoryAGet16(0x00fb + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=fbd
    memoryASet16(0x00fe + seg, 0x0001, memoryAGet16(0x00fe + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=fe1
    memoryASet16(0x00fe + seg, 0x000e, memoryAGet16(0x00fe + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=fee
    memoryASet16(0x0103 + seg, 0x0000, memoryAGet16(0x0103 + seg, 0x0000) + seg); // 286e -> 2a5b; lin=1030
    memoryASet16(0x0114 + seg, 0x000b, memoryAGet16(0x0114 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=114b
    memoryASet16(0x0115 + seg, 0x0000, memoryAGet16(0x0115 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=1150
    memoryASet16(0x0115 + seg, 0x0005, memoryAGet16(0x0115 + seg, 0x0005) + seg); // 2960 -> 2b4d; lin=1155
    memoryASet16(0x0115 + seg, 0x000a, memoryAGet16(0x0115 + seg, 0x000a) + seg); // 2890 -> 2a7d; lin=115a
    memoryASet16(0x0115 + seg, 0x000f, memoryAGet16(0x0115 + seg, 0x000f) + seg); // 287e -> 2a6b; lin=115f
    memoryASet16(0x0116 + seg, 0x0004, memoryAGet16(0x0116 + seg, 0x0004) + seg); // 286e -> 2a5b; lin=1164
    memoryASet16(0x0116 + seg, 0x0009, memoryAGet16(0x0116 + seg, 0x0009) + seg); // 2642 -> 282f; lin=1169
    memoryASet16(0x0116 + seg, 0x000e, memoryAGet16(0x0116 + seg, 0x000e) + seg); // 25e5 -> 27d2; lin=116e
    memoryASet16(0x0117 + seg, 0x0003, memoryAGet16(0x0117 + seg, 0x0003) + seg); // 17f9 -> 19e6; lin=1173
    memoryASet16(0x0117 + seg, 0x0008, memoryAGet16(0x0117 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=1178
    memoryASet16(0x0117 + seg, 0x000d, memoryAGet16(0x0117 + seg, 0x000d) + seg); // 0520 -> 070d; lin=117d
    memoryASet16(0x0118 + seg, 0x0008, memoryAGet16(0x0118 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1188
    memoryASet16(0x011a + seg, 0x0006, memoryAGet16(0x011a + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=11a6
    memoryASet16(0x011a + seg, 0x000b, memoryAGet16(0x011a + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=11ab
    memoryASet16(0x011b + seg, 0x0002, memoryAGet16(0x011b + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=11b2
    memoryASet16(0x011b + seg, 0x0007, memoryAGet16(0x011b + seg, 0x0007) + seg); // 17f9 -> 19e6; lin=11b7
    memoryASet16(0x011d + seg, 0x0008, memoryAGet16(0x011d + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=11d8
    memoryASet16(0x011e + seg, 0x0007, memoryAGet16(0x011e + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=11e7
    memoryASet16(0x011f + seg, 0x0005, memoryAGet16(0x011f + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=11f5
    memoryASet16(0x0120 + seg, 0x0005, memoryAGet16(0x0120 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1205
    memoryASet16(0x0121 + seg, 0x0007, memoryAGet16(0x0121 + seg, 0x0007) + seg); // 2890 -> 2a7d; lin=1217
    memoryASet16(0x0122 + seg, 0x0001, memoryAGet16(0x0122 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1221
    memoryASet16(0x0122 + seg, 0x000f, memoryAGet16(0x0122 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=122f
    memoryASet16(0x0123 + seg, 0x000e, memoryAGet16(0x0123 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=123e
    memoryASet16(0x0124 + seg, 0x000c, memoryAGet16(0x0124 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=124c
    memoryASet16(0x0125 + seg, 0x000c, memoryAGet16(0x0125 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=125c
    memoryASet16(0x0126 + seg, 0x000e, memoryAGet16(0x0126 + seg, 0x000e) + seg); // 2890 -> 2a7d; lin=126e
    memoryASet16(0x0127 + seg, 0x0008, memoryAGet16(0x0127 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1278
    memoryASet16(0x0128 + seg, 0x0006, memoryAGet16(0x0128 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1286
    memoryASet16(0x0129 + seg, 0x0005, memoryAGet16(0x0129 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1295
    memoryASet16(0x012a + seg, 0x0003, memoryAGet16(0x012a + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=12a3
    memoryASet16(0x012b + seg, 0x0003, memoryAGet16(0x012b + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=12b3
    memoryASet16(0x012c + seg, 0x0005, memoryAGet16(0x012c + seg, 0x0005) + seg); // 2890 -> 2a7d; lin=12c5
    memoryASet16(0x012c + seg, 0x000f, memoryAGet16(0x012c + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=12cf
    memoryASet16(0x012d + seg, 0x0009, memoryAGet16(0x012d + seg, 0x0009) + seg); // 2890 -> 2a7d; lin=12d9
    memoryASet16(0x012d + seg, 0x000e, memoryAGet16(0x012d + seg, 0x000e) + seg); // 17f9 -> 19e6; lin=12de
    memoryASet16(0x012f + seg, 0x0005, memoryAGet16(0x012f + seg, 0x0005) + seg); // 17f9 -> 19e6; lin=12f5
    memoryASet16(0x012f + seg, 0x000a, memoryAGet16(0x012f + seg, 0x000a) + seg); // 286e -> 2a5b; lin=12fa
    memoryASet16(0x0131 + seg, 0x0001, memoryAGet16(0x0131 + seg, 0x0001) + seg); // 286e -> 2a5b; lin=1311
    memoryASet16(0x0131 + seg, 0x000d, memoryAGet16(0x0131 + seg, 0x000d) + seg); // 286e -> 2a5b; lin=131d
    memoryASet16(0x0133 + seg, 0x0006, memoryAGet16(0x0133 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1336
    memoryASet16(0x0133 + seg, 0x000b, memoryAGet16(0x0133 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=133b
    memoryASet16(0x0134 + seg, 0x0000, memoryAGet16(0x0134 + seg, 0x0000) + seg); // 17f9 -> 19e6; lin=1340
    memoryASet16(0x0134 + seg, 0x0008, memoryAGet16(0x0134 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=1348
    memoryASet16(0x0134 + seg, 0x000d, memoryAGet16(0x0134 + seg, 0x000d) + seg); // 17f9 -> 19e6; lin=134d
    memoryASet16(0x0135 + seg, 0x000f, memoryAGet16(0x0135 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=135f
    memoryASet16(0x0136 + seg, 0x0004, memoryAGet16(0x0136 + seg, 0x0004) + seg); // 17f9 -> 19e6; lin=1364
    memoryASet16(0x0137 + seg, 0x0000, memoryAGet16(0x0137 + seg, 0x0000) + seg); // 2890 -> 2a7d; lin=1370
    memoryASet16(0x0138 + seg, 0x000d, memoryAGet16(0x0138 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=138d
    memoryASet16(0x0139 + seg, 0x0009, memoryAGet16(0x0139 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=1399
    memoryASet16(0x0139 + seg, 0x000e, memoryAGet16(0x0139 + seg, 0x000e) + seg); // 17f9 -> 19e6; lin=139e
    memoryASet16(0x013b + seg, 0x0001, memoryAGet16(0x013b + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=13b1
    memoryASet16(0x013b + seg, 0x000f, memoryAGet16(0x013b + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=13bf
    memoryASet16(0x013c + seg, 0x0004, memoryAGet16(0x013c + seg, 0x0004) + seg); // 2890 -> 2a7d; lin=13c4
    memoryASet16(0x013e + seg, 0x0002, memoryAGet16(0x013e + seg, 0x0002) + seg); // 17f9 -> 19e6; lin=13e2
    memoryASet16(0x013f + seg, 0x0005, memoryAGet16(0x013f + seg, 0x0005) + seg); // 17f9 -> 19e6; lin=13f5
    memoryASet16(0x0140 + seg, 0x0007, memoryAGet16(0x0140 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=1407
    memoryASet16(0x0140 + seg, 0x000c, memoryAGet16(0x0140 + seg, 0x000c) + seg); // 17f9 -> 19e6; lin=140c
    memoryASet16(0x0141 + seg, 0x0009, memoryAGet16(0x0141 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=1419
    memoryASet16(0x0142 + seg, 0x0004, memoryAGet16(0x0142 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=1424
    memoryASet16(0x0144 + seg, 0x0006, memoryAGet16(0x0144 + seg, 0x0006) + seg); // 17f9 -> 19e6; lin=1446
    memoryASet16(0x014b + seg, 0x0003, memoryAGet16(0x014b + seg, 0x0003) + seg); // 17f9 -> 19e6; lin=14b3
    memoryASet16(0x014c + seg, 0x0006, memoryAGet16(0x014c + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=14c6
    memoryASet16(0x014d + seg, 0x0006, memoryAGet16(0x014d + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=14d6
    memoryASet16(0x014e + seg, 0x0009, memoryAGet16(0x014e + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=14e9
    memoryASet16(0x014f + seg, 0x0009, memoryAGet16(0x014f + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=14f9
    memoryASet16(0x0150 + seg, 0x0006, memoryAGet16(0x0150 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=1506
    memoryASet16(0x0151 + seg, 0x0006, memoryAGet16(0x0151 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=1516
    memoryASet16(0x0152 + seg, 0x0009, memoryAGet16(0x0152 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=1529
    memoryASet16(0x0153 + seg, 0x0009, memoryAGet16(0x0153 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=1539
    memoryASet16(0x0154 + seg, 0x000c, memoryAGet16(0x0154 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=154c
    memoryASet16(0x015a + seg, 0x0006, memoryAGet16(0x015a + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=15a6
    memoryASet16(0x015c + seg, 0x0007, memoryAGet16(0x015c + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=15c7
    memoryASet16(0x015e + seg, 0x0008, memoryAGet16(0x015e + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=15e8
    memoryASet16(0x0160 + seg, 0x0009, memoryAGet16(0x0160 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=1609
    memoryASet16(0x0162 + seg, 0x000e, memoryAGet16(0x0162 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=162e
    memoryASet16(0x0165 + seg, 0x0003, memoryAGet16(0x0165 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=1653
    memoryASet16(0x0167 + seg, 0x0008, memoryAGet16(0x0167 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=1678
    memoryASet16(0x0169 + seg, 0x000d, memoryAGet16(0x0169 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=169d
    memoryASet16(0x016b + seg, 0x000e, memoryAGet16(0x016b + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=16be
    memoryASet16(0x016d + seg, 0x000f, memoryAGet16(0x016d + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=16df
    memoryASet16(0x016e + seg, 0x000f, memoryAGet16(0x016e + seg, 0x000f) + seg); // 0520 -> 070d; lin=16ef
    memoryASet16(0x0174 + seg, 0x000f, memoryAGet16(0x0174 + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=174f
    memoryASet16(0x0178 + seg, 0x0003, memoryAGet16(0x0178 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=1783
    memoryASet16(0x017b + seg, 0x0005, memoryAGet16(0x017b + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=17b5
    memoryASet16(0x017d + seg, 0x0006, memoryAGet16(0x017d + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=17d6
    memoryASet16(0x017f + seg, 0x0007, memoryAGet16(0x017f + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=17f7
    memoryASet16(0x0182 + seg, 0x000a, memoryAGet16(0x0182 + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=182a
    memoryASet16(0x0186 + seg, 0x0002, memoryAGet16(0x0186 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=1862
    memoryASet16(0x0188 + seg, 0x000e, memoryAGet16(0x0188 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=188e
    memoryASet16(0x018a + seg, 0x000f, memoryAGet16(0x018a + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=18af
    memoryASet16(0x018e + seg, 0x0007, memoryAGet16(0x018e + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=18e7
    memoryASet16(0x0190 + seg, 0x000c, memoryAGet16(0x0190 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=190c
    memoryASet16(0x0193 + seg, 0x0004, memoryAGet16(0x0193 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=1934
    memoryASet16(0x0196 + seg, 0x000c, memoryAGet16(0x0196 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=196c
    memoryASet16(0x019a + seg, 0x000d, memoryAGet16(0x019a + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=19ad
    memoryASet16(0x019c + seg, 0x000e, memoryAGet16(0x019c + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=19ce
    memoryASet16(0x019e + seg, 0x000f, memoryAGet16(0x019e + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=19ef
    memoryASet16(0x01a1 + seg, 0x0004, memoryAGet16(0x01a1 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=1a14
    memoryASet16(0x01a3 + seg, 0x0002, memoryAGet16(0x01a3 + seg, 0x0002) + seg); // 0520 -> 070d; lin=1a32
    memoryASet16(0x01a3 + seg, 0x000e, memoryAGet16(0x01a3 + seg, 0x000e) + seg); // 0520 -> 070d; lin=1a3e
    memoryASet16(0x01a5 + seg, 0x0007, memoryAGet16(0x01a5 + seg, 0x0007) + seg); // 0520 -> 070d; lin=1a57
    memoryASet16(0x01a9 + seg, 0x000a, memoryAGet16(0x01a9 + seg, 0x000a) + seg); // 287e -> 2a6b; lin=1a9a
    memoryASet16(0x01aa + seg, 0x000a, memoryAGet16(0x01aa + seg, 0x000a) + seg); // 0520 -> 070d; lin=1aaa
    memoryASet16(0x01b0 + seg, 0x000b, memoryAGet16(0x01b0 + seg, 0x000b) + seg); // 287e -> 2a6b; lin=1b0b
    memoryASet16(0x01b1 + seg, 0x000f, memoryAGet16(0x01b1 + seg, 0x000f) + seg); // 17f9 -> 19e6; lin=1b1f
    memoryASet16(0x01b2 + seg, 0x000a, memoryAGet16(0x01b2 + seg, 0x000a) + seg); // 2890 -> 2a7d; lin=1b2a
    memoryASet16(0x01b3 + seg, 0x0003, memoryAGet16(0x01b3 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=1b33
    memoryASet16(0x01b3 + seg, 0x000f, memoryAGet16(0x01b3 + seg, 0x000f) + seg); // 17f9 -> 19e6; lin=1b3f
    memoryASet16(0x01b6 + seg, 0x0000, memoryAGet16(0x01b6 + seg, 0x0000) + seg); // 0520 -> 070d; lin=1b60
    memoryASet16(0x01bb + seg, 0x000b, memoryAGet16(0x01bb + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=1bbb
    memoryASet16(0x01bd + seg, 0x000c, memoryAGet16(0x01bd + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=1bdc
    memoryASet16(0x01bf + seg, 0x0009, memoryAGet16(0x01bf + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=1bf9
    memoryASet16(0x01c1 + seg, 0x000a, memoryAGet16(0x01c1 + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=1c1a
    memoryASet16(0x01c3 + seg, 0x000b, memoryAGet16(0x01c3 + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=1c3b
    memoryASet16(0x01c6 + seg, 0x0000, memoryAGet16(0x01c6 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=1c60
    memoryASet16(0x01c8 + seg, 0x0001, memoryAGet16(0x01c8 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=1c81
    memoryASet16(0x01ca + seg, 0x0006, memoryAGet16(0x01ca + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=1ca6
    memoryASet16(0x01d0 + seg, 0x000d, memoryAGet16(0x01d0 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1d0d
    memoryASet16(0x01d5 + seg, 0x0005, memoryAGet16(0x01d5 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=1d55
    memoryASet16(0x01d7 + seg, 0x0006, memoryAGet16(0x01d7 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=1d76
    memoryASet16(0x01d9 + seg, 0x0007, memoryAGet16(0x01d9 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=1d97
    memoryASet16(0x01db + seg, 0x0008, memoryAGet16(0x01db + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=1db8
    memoryASet16(0x01dd + seg, 0x000d, memoryAGet16(0x01dd + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=1ddd
    memoryASet16(0x01e0 + seg, 0x0002, memoryAGet16(0x01e0 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=1e02
    memoryASet16(0x01e1 + seg, 0x0002, memoryAGet16(0x01e1 + seg, 0x0002) + seg); // 0520 -> 070d; lin=1e12
    memoryASet16(0x01e3 + seg, 0x0006, memoryAGet16(0x01e3 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=1e36
    memoryASet16(0x01e5 + seg, 0x0007, memoryAGet16(0x01e5 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=1e57
    memoryASet16(0x01e7 + seg, 0x0008, memoryAGet16(0x01e7 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=1e78
    memoryASet16(0x01e9 + seg, 0x000d, memoryAGet16(0x01e9 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=1e9d
    memoryASet16(0x01ec + seg, 0x000a, memoryAGet16(0x01ec + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=1eca
    memoryASet16(0x01ee + seg, 0x000b, memoryAGet16(0x01ee + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=1eeb
    memoryASet16(0x01f0 + seg, 0x000c, memoryAGet16(0x01f0 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=1f0c
    memoryASet16(0x01f3 + seg, 0x0001, memoryAGet16(0x01f3 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=1f31
    memoryASet16(0x01f8 + seg, 0x0003, memoryAGet16(0x01f8 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=1f83
    memoryASet16(0x01fa + seg, 0x0000, memoryAGet16(0x01fa + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=1fa0
    memoryASet16(0x01fc + seg, 0x0001, memoryAGet16(0x01fc + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=1fc1
    memoryASet16(0x01fe + seg, 0x0002, memoryAGet16(0x01fe + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=1fe2
    memoryASet16(0x0200 + seg, 0x0007, memoryAGet16(0x0200 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=2007
    memoryASet16(0x020b + seg, 0x0004, memoryAGet16(0x020b + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=20b4
    memoryASet16(0x020c + seg, 0x0006, memoryAGet16(0x020c + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=20c6
    memoryASet16(0x0216 + seg, 0x000d, memoryAGet16(0x0216 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=216d
    memoryASet16(0x021b + seg, 0x0001, memoryAGet16(0x021b + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=21b1
    memoryASet16(0x021e + seg, 0x0002, memoryAGet16(0x021e + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=21e2
    memoryASet16(0x0221 + seg, 0x000e, memoryAGet16(0x0221 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=221e
    memoryASet16(0x0225 + seg, 0x0002, memoryAGet16(0x0225 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=2252
    memoryASet16(0x022b + seg, 0x0009, memoryAGet16(0x022b + seg, 0x0009) + seg); // 0520 -> 070d; lin=22b9
    memoryASet16(0x0236 + seg, 0x000a, memoryAGet16(0x0236 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=236a
    memoryASet16(0x023e + seg, 0x0002, memoryAGet16(0x023e + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=23e2
    memoryASet16(0x0241 + seg, 0x000d, memoryAGet16(0x0241 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=241d
    memoryASet16(0x0244 + seg, 0x000b, memoryAGet16(0x0244 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=244b
    memoryASet16(0x0248 + seg, 0x000c, memoryAGet16(0x0248 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=248c
    memoryASet16(0x024b + seg, 0x000d, memoryAGet16(0x024b + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=24bd
    memoryASet16(0x0251 + seg, 0x0005, memoryAGet16(0x0251 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=2515
    memoryASet16(0x0257 + seg, 0x000a, memoryAGet16(0x0257 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=257a
    memoryASet16(0x025d + seg, 0x000f, memoryAGet16(0x025d + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=25df
    memoryASet16(0x0264 + seg, 0x0004, memoryAGet16(0x0264 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=2644
    memoryASet16(0x026a + seg, 0x0009, memoryAGet16(0x026a + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=26a9
    memoryASet16(0x0270 + seg, 0x000e, memoryAGet16(0x0270 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=270e
    memoryASet16(0x0277 + seg, 0x0003, memoryAGet16(0x0277 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=2773
    memoryASet16(0x027d + seg, 0x0008, memoryAGet16(0x027d + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=27d8
    memoryASet16(0x0283 + seg, 0x000c, memoryAGet16(0x0283 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=283c
    memoryASet16(0x0289 + seg, 0x000c, memoryAGet16(0x0289 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=289c
    memoryASet16(0x0290 + seg, 0x0003, memoryAGet16(0x0290 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=2903
    memoryASet16(0x0296 + seg, 0x0008, memoryAGet16(0x0296 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=2968
    memoryASet16(0x029c + seg, 0x000d, memoryAGet16(0x029c + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=29cd
    memoryASet16(0x02a3 + seg, 0x0002, memoryAGet16(0x02a3 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=2a32
    memoryASet16(0x02a9 + seg, 0x0007, memoryAGet16(0x02a9 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=2a97
    memoryASet16(0x02af + seg, 0x000c, memoryAGet16(0x02af + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=2afc
    memoryASet16(0x02b6 + seg, 0x0001, memoryAGet16(0x02b6 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=2b61
    memoryASet16(0x02bc + seg, 0x0007, memoryAGet16(0x02bc + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=2bc7
    memoryASet16(0x02c1 + seg, 0x000f, memoryAGet16(0x02c1 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=2c1f
    memoryASet16(0x02c9 + seg, 0x0007, memoryAGet16(0x02c9 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=2c97
    memoryASet16(0x02cd + seg, 0x0002, memoryAGet16(0x02cd + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=2cd2
    memoryASet16(0x02d0 + seg, 0x0000, memoryAGet16(0x02d0 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=2d00
    memoryASet16(0x02d4 + seg, 0x0001, memoryAGet16(0x02d4 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=2d41
    memoryASet16(0x02d7 + seg, 0x0002, memoryAGet16(0x02d7 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=2d72
    memoryASet16(0x02dc + seg, 0x000a, memoryAGet16(0x02dc + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=2dca
    memoryASet16(0x02e2 + seg, 0x000f, memoryAGet16(0x02e2 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=2e2f
    memoryASet16(0x02e9 + seg, 0x0004, memoryAGet16(0x02e9 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=2e94
    memoryASet16(0x02ef + seg, 0x0007, memoryAGet16(0x02ef + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=2ef7
    memoryASet16(0x02f5 + seg, 0x0003, memoryAGet16(0x02f5 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=2f53
    memoryASet16(0x02fe + seg, 0x0009, memoryAGet16(0x02fe + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=2fe9
    memoryASet16(0x0306 + seg, 0x0007, memoryAGet16(0x0306 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=3067
    memoryASet16(0x030a + seg, 0x0008, memoryAGet16(0x030a + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=30a8
    memoryASet16(0x030d + seg, 0x000c, memoryAGet16(0x030d + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=30dc
    memoryASet16(0x0312 + seg, 0x0003, memoryAGet16(0x0312 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=3123
    memoryASet16(0x0315 + seg, 0x000a, memoryAGet16(0x0315 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=315a
    memoryASet16(0x031b + seg, 0x0008, memoryAGet16(0x031b + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=31b8
    memoryASet16(0x0322 + seg, 0x0003, memoryAGet16(0x0322 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=3223
    memoryASet16(0x0328 + seg, 0x000e, memoryAGet16(0x0328 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=328e
    memoryASet16(0x032f + seg, 0x0009, memoryAGet16(0x032f + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=32f9
    memoryASet16(0x0336 + seg, 0x0004, memoryAGet16(0x0336 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=3364
    memoryASet16(0x033c + seg, 0x000f, memoryAGet16(0x033c + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=33cf
    memoryASet16(0x0343 + seg, 0x000a, memoryAGet16(0x0343 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=343a
    memoryASet16(0x034a + seg, 0x0005, memoryAGet16(0x034a + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=34a5
    memoryASet16(0x0350 + seg, 0x000f, memoryAGet16(0x0350 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=350f
    memoryASet16(0x0357 + seg, 0x0005, memoryAGet16(0x0357 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=3575
    memoryASet16(0x035e + seg, 0x0002, memoryAGet16(0x035e + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=35e2
    memoryASet16(0x0364 + seg, 0x000d, memoryAGet16(0x0364 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=364d
    memoryASet16(0x036b + seg, 0x0008, memoryAGet16(0x036b + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=36b8
    memoryASet16(0x0372 + seg, 0x0003, memoryAGet16(0x0372 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=3723
    memoryASet16(0x0378 + seg, 0x0009, memoryAGet16(0x0378 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=3789
    memoryASet16(0x037f + seg, 0x0004, memoryAGet16(0x037f + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=37f4
    memoryASet16(0x0385 + seg, 0x000f, memoryAGet16(0x0385 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=385f
    memoryASet16(0x038c + seg, 0x000a, memoryAGet16(0x038c + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=38ca
    memoryASet16(0x0393 + seg, 0x0005, memoryAGet16(0x0393 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=3935
    memoryASet16(0x039a + seg, 0x0001, memoryAGet16(0x039a + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=39a1
    memoryASet16(0x039f + seg, 0x000f, memoryAGet16(0x039f + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=39ff
    memoryASet16(0x03a7 + seg, 0x000d, memoryAGet16(0x03a7 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=3a7d
    memoryASet16(0x03ab + seg, 0x000e, memoryAGet16(0x03ab + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=3abe
    memoryASet16(0x03af + seg, 0x0002, memoryAGet16(0x03af + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=3af2
    memoryASet16(0x03b3 + seg, 0x0009, memoryAGet16(0x03b3 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=3b39
    memoryASet16(0x03b7 + seg, 0x0000, memoryAGet16(0x03b7 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=3b70
    memoryASet16(0x03bc + seg, 0x000e, memoryAGet16(0x03bc + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=3bce
    memoryASet16(0x03c3 + seg, 0x0009, memoryAGet16(0x03c3 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=3c39
    memoryASet16(0x03ca + seg, 0x0004, memoryAGet16(0x03ca + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=3ca4
    memoryASet16(0x03d0 + seg, 0x000d, memoryAGet16(0x03d0 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=3d0d
    memoryASet16(0x03d6 + seg, 0x000e, memoryAGet16(0x03d6 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=3d6e
    memoryASet16(0x03dd + seg, 0x000c, memoryAGet16(0x03dd + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=3ddc
    memoryASet16(0x03e5 + seg, 0x0004, memoryAGet16(0x03e5 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=3e54
    memoryASet16(0x03e8 + seg, 0x000f, memoryAGet16(0x03e8 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=3e8f
    memoryASet16(0x03eb + seg, 0x000d, memoryAGet16(0x03eb + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=3ebd
    memoryASet16(0x03ef + seg, 0x000e, memoryAGet16(0x03ef + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=3efe
    memoryASet16(0x03f2 + seg, 0x000f, memoryAGet16(0x03f2 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=3f2f
    memoryASet16(0x03f8 + seg, 0x0007, memoryAGet16(0x03f8 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=3f87
    memoryASet16(0x03fe + seg, 0x000c, memoryAGet16(0x03fe + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=3fec
    memoryASet16(0x0405 + seg, 0x0001, memoryAGet16(0x0405 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=4051
    memoryASet16(0x040b + seg, 0x0006, memoryAGet16(0x040b + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=40b6
    memoryASet16(0x0411 + seg, 0x000b, memoryAGet16(0x0411 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=411b
    memoryASet16(0x0418 + seg, 0x0000, memoryAGet16(0x0418 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=4180
    memoryASet16(0x041e + seg, 0x0005, memoryAGet16(0x041e + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=41e5
    memoryASet16(0x0424 + seg, 0x000a, memoryAGet16(0x0424 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=424a
    memoryASet16(0x042a + seg, 0x000e, memoryAGet16(0x042a + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=42ae
    memoryASet16(0x0430 + seg, 0x000e, memoryAGet16(0x0430 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=430e
    memoryASet16(0x0437 + seg, 0x0005, memoryAGet16(0x0437 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=4375
    memoryASet16(0x043d + seg, 0x000a, memoryAGet16(0x043d + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=43da
    memoryASet16(0x0443 + seg, 0x000f, memoryAGet16(0x0443 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=443f
    memoryASet16(0x044a + seg, 0x0004, memoryAGet16(0x044a + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=44a4
    memoryASet16(0x0450 + seg, 0x0009, memoryAGet16(0x0450 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=4509
    memoryASet16(0x0456 + seg, 0x000e, memoryAGet16(0x0456 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=456e
    memoryASet16(0x045d + seg, 0x0003, memoryAGet16(0x045d + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=45d3
    memoryASet16(0x0463 + seg, 0x0009, memoryAGet16(0x0463 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=4639
    memoryASet16(0x0469 + seg, 0x0001, memoryAGet16(0x0469 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=4691
    memoryASet16(0x0470 + seg, 0x0009, memoryAGet16(0x0470 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=4709
    memoryASet16(0x0474 + seg, 0x0004, memoryAGet16(0x0474 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=4744
    memoryASet16(0x0477 + seg, 0x0002, memoryAGet16(0x0477 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=4772
    memoryASet16(0x047b + seg, 0x0003, memoryAGet16(0x047b + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=47b3
    memoryASet16(0x047e + seg, 0x0004, memoryAGet16(0x047e + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=47e4
    memoryASet16(0x0483 + seg, 0x000c, memoryAGet16(0x0483 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=483c
    memoryASet16(0x048a + seg, 0x0001, memoryAGet16(0x048a + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=48a1
    memoryASet16(0x0490 + seg, 0x0006, memoryAGet16(0x0490 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=4906
    memoryASet16(0x0496 + seg, 0x0009, memoryAGet16(0x0496 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=4969
    memoryASet16(0x049c + seg, 0x0005, memoryAGet16(0x049c + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=49c5
    memoryASet16(0x049e + seg, 0x0002, memoryAGet16(0x049e + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=49e2
    memoryASet16(0x049f + seg, 0x0002, memoryAGet16(0x049f + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=49f2
    memoryASet16(0x04a0 + seg, 0x0005, memoryAGet16(0x04a0 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=4a05
    memoryASet16(0x04a1 + seg, 0x0005, memoryAGet16(0x04a1 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=4a15
    memoryASet16(0x04a2 + seg, 0x0002, memoryAGet16(0x04a2 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=4a22
    memoryASet16(0x04a3 + seg, 0x0002, memoryAGet16(0x04a3 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=4a32
    memoryASet16(0x04a4 + seg, 0x0005, memoryAGet16(0x04a4 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=4a45
    memoryASet16(0x04a5 + seg, 0x0005, memoryAGet16(0x04a5 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=4a55
    memoryASet16(0x04a6 + seg, 0x0008, memoryAGet16(0x04a6 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=4a68
    memoryASet16(0x04ab + seg, 0x0005, memoryAGet16(0x04ab + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=4ab5
    memoryASet16(0x04ad + seg, 0x0006, memoryAGet16(0x04ad + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=4ad6
    memoryASet16(0x04af + seg, 0x0007, memoryAGet16(0x04af + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=4af7
    memoryASet16(0x04b1 + seg, 0x000c, memoryAGet16(0x04b1 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=4b1c
    memoryASet16(0x04b4 + seg, 0x0001, memoryAGet16(0x04b4 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=4b41
    memoryASet16(0x04b6 + seg, 0x0006, memoryAGet16(0x04b6 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=4b66
    memoryASet16(0x04b8 + seg, 0x000b, memoryAGet16(0x04b8 + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=4b8b
    memoryASet16(0x04ba + seg, 0x000c, memoryAGet16(0x04ba + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=4bac
    memoryASet16(0x04bc + seg, 0x000d, memoryAGet16(0x04bc + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=4bcd
    memoryASet16(0x04bd + seg, 0x000d, memoryAGet16(0x04bd + seg, 0x000d) + seg); // 0520 -> 070d; lin=4bdd
    memoryASet16(0x04c3 + seg, 0x000d, memoryAGet16(0x04c3 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=4c3d
    memoryASet16(0x04c7 + seg, 0x0001, memoryAGet16(0x04c7 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=4c71
    memoryASet16(0x04ca + seg, 0x0001, memoryAGet16(0x04ca + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=4ca1
    memoryASet16(0x04cc + seg, 0x0006, memoryAGet16(0x04cc + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=4cc6
    memoryASet16(0x04cf + seg, 0x000b, memoryAGet16(0x04cf + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=4cfb
    memoryASet16(0x04d1 + seg, 0x000c, memoryAGet16(0x04d1 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=4d1c
    memoryASet16(0x04d3 + seg, 0x000d, memoryAGet16(0x04d3 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=4d3d
    memoryASet16(0x04d7 + seg, 0x0000, memoryAGet16(0x04d7 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=4d70
    memoryASet16(0x04da + seg, 0x0008, memoryAGet16(0x04da + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=4da8
    memoryASet16(0x04de + seg, 0x0003, memoryAGet16(0x04de + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=4de3
    memoryASet16(0x04e0 + seg, 0x0004, memoryAGet16(0x04e0 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=4e04
    memoryASet16(0x04e3 + seg, 0x000c, memoryAGet16(0x04e3 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=4e3c
    memoryASet16(0x04e7 + seg, 0x0000, memoryAGet16(0x04e7 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=4e70
    memoryASet16(0x04e9 + seg, 0x0008, memoryAGet16(0x04e9 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=4e98
    memoryASet16(0x04ed + seg, 0x0000, memoryAGet16(0x04ed + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=4ed0
    memoryASet16(0x04f3 + seg, 0x000d, memoryAGet16(0x04f3 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=4f3d
    memoryASet16(0x04f7 + seg, 0x0001, memoryAGet16(0x04f7 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=4f71
    memoryASet16(0x04f9 + seg, 0x0002, memoryAGet16(0x04f9 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=4f92
    memoryASet16(0x04fd + seg, 0x0002, memoryAGet16(0x04fd + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=4fd2
    memoryASet16(0x04fd + seg, 0x0007, memoryAGet16(0x04fd + seg, 0x0007) + seg); // 17f9 -> 19e6; lin=4fd7
    memoryASet16(0x04fe + seg, 0x000d, memoryAGet16(0x04fe + seg, 0x000d) + seg); // 17f9 -> 19e6; lin=4fed
    memoryASet16(0x04ff + seg, 0x0009, memoryAGet16(0x04ff + seg, 0x0009) + seg); // 17f9 -> 19e6; lin=4ff9
    memoryASet16(0x0501 + seg, 0x0001, memoryAGet16(0x0501 + seg, 0x0001) + seg); // 17f9 -> 19e6; lin=5011
    memoryASet16(0x0503 + seg, 0x0009, memoryAGet16(0x0503 + seg, 0x0009) + seg); // 2890 -> 2a7d; lin=5039
    memoryASet16(0x0503 + seg, 0x000e, memoryAGet16(0x0503 + seg, 0x000e) + seg); // 17f9 -> 19e6; lin=503e
    memoryASet16(0x0504 + seg, 0x0007, memoryAGet16(0x0504 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=5047
    memoryASet16(0x0505 + seg, 0x000e, memoryAGet16(0x0505 + seg, 0x000e) + seg); // 17f9 -> 19e6; lin=505e
    memoryASet16(0x0507 + seg, 0x000f, memoryAGet16(0x0507 + seg, 0x000f) + seg); // 17f9 -> 19e6; lin=507f
    memoryASet16(0x0508 + seg, 0x000d, memoryAGet16(0x0508 + seg, 0x000d) + seg); // 17f9 -> 19e6; lin=508d
    memoryASet16(0x0509 + seg, 0x0006, memoryAGet16(0x0509 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=5096
    memoryASet16(0x0509 + seg, 0x000b, memoryAGet16(0x0509 + seg, 0x000b) + seg); // 2890 -> 2a7d; lin=509b
    memoryASet16(0x050b + seg, 0x000e, memoryAGet16(0x050b + seg, 0x000e) + seg); // 17f9 -> 19e6; lin=50be
    memoryASet16(0x050c + seg, 0x000a, memoryAGet16(0x050c + seg, 0x000a) + seg); // 17f9 -> 19e6; lin=50ca
    memoryASet16(0x050d + seg, 0x0009, memoryAGet16(0x050d + seg, 0x0009) + seg); // 17f9 -> 19e6; lin=50d9
    memoryASet16(0x050e + seg, 0x0005, memoryAGet16(0x050e + seg, 0x0005) + seg); // 17f9 -> 19e6; lin=50e5
    memoryASet16(0x050e + seg, 0x000e, memoryAGet16(0x050e + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=50ee
    memoryASet16(0x0510 + seg, 0x0003, memoryAGet16(0x0510 + seg, 0x0003) + seg); // 2960 -> 2b4d; lin=5103
    memoryASet16(0x0510 + seg, 0x0008, memoryAGet16(0x0510 + seg, 0x0008) + seg); // 17f9 -> 19e6; lin=5108
    memoryASet16(0x0512 + seg, 0x0002, memoryAGet16(0x0512 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=5122
    memoryASet16(0x0513 + seg, 0x0004, memoryAGet16(0x0513 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=5134
    memoryASet16(0x0513 + seg, 0x0009, memoryAGet16(0x0513 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=5139
    memoryASet16(0x0513 + seg, 0x000e, memoryAGet16(0x0513 + seg, 0x000e) + seg); // 2960 -> 2b4d; lin=513e
    memoryASet16(0x0514 + seg, 0x0008, memoryAGet16(0x0514 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=5148
    memoryASet16(0x0517 + seg, 0x0002, memoryAGet16(0x0517 + seg, 0x0002) + seg); // 0000 -> 01ed; lin=5172
    memoryASet16(0x0517 + seg, 0x000d, memoryAGet16(0x0517 + seg, 0x000d) + seg); // 0000 -> 01ed; lin=517d
    memoryASet16(0x0518 + seg, 0x0008, memoryAGet16(0x0518 + seg, 0x0008) + seg); // 0000 -> 01ed; lin=5188
    memoryASet16(0x0519 + seg, 0x0003, memoryAGet16(0x0519 + seg, 0x0003) + seg); // 0000 -> 01ed; lin=5193
    memoryASet16(0x0519 + seg, 0x000e, memoryAGet16(0x0519 + seg, 0x000e) + seg); // 0000 -> 01ed; lin=519e
    memoryASet16(0x051a + seg, 0x0009, memoryAGet16(0x051a + seg, 0x0009) + seg); // 0000 -> 01ed; lin=51a9
    memoryASet16(0x0545 + seg, 0x0008, memoryAGet16(0x0545 + seg, 0x0008) + seg); // 287e -> 2a6b; lin=5458
    memoryASet16(0x0546 + seg, 0x000a, memoryAGet16(0x0546 + seg, 0x000a) + seg); // 287e -> 2a6b; lin=546a
    memoryASet16(0x0553 + seg, 0x0009, memoryAGet16(0x0553 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=5539
    memoryASet16(0x0555 + seg, 0x0004, memoryAGet16(0x0555 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=5554
    memoryASet16(0x0557 + seg, 0x000d, memoryAGet16(0x0557 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=557d
    memoryASet16(0x0559 + seg, 0x000c, memoryAGet16(0x0559 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=559c
    memoryASet16(0x055b + seg, 0x000b, memoryAGet16(0x055b + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=55bb
    memoryASet16(0x055d + seg, 0x000a, memoryAGet16(0x055d + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=55da
    memoryASet16(0x0572 + seg, 0x0008, memoryAGet16(0x0572 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=5728
    memoryASet16(0x0576 + seg, 0x0009, memoryAGet16(0x0576 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=5769
    memoryASet16(0x057a + seg, 0x000e, memoryAGet16(0x057a + seg, 0x000e) + seg); // 287e -> 2a6b; lin=57ae
    memoryASet16(0x05c3 + seg, 0x0007, memoryAGet16(0x05c3 + seg, 0x0007) + seg); // 287e -> 2a6b; lin=5c37
    memoryASet16(0x05ca + seg, 0x000d, memoryAGet16(0x05ca + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=5cad
    memoryASet16(0x05cd + seg, 0x0006, memoryAGet16(0x05cd + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=5cd6
    memoryASet16(0x05ec + seg, 0x000a, memoryAGet16(0x05ec + seg, 0x000a) + seg); // 287e -> 2a6b; lin=5eca
    memoryASet16(0x05f0 + seg, 0x0005, memoryAGet16(0x05f0 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=5f05
    memoryASet16(0x0615 + seg, 0x0001, memoryAGet16(0x0615 + seg, 0x0001) + seg); // 287e -> 2a6b; lin=6151
    memoryASet16(0x064a + seg, 0x0008, memoryAGet16(0x064a + seg, 0x0008) + seg); // 287e -> 2a6b; lin=64a8
    memoryASet16(0x067e + seg, 0x0003, memoryAGet16(0x067e + seg, 0x0003) + seg); // 287e -> 2a6b; lin=67e3
    memoryASet16(0x0696 + seg, 0x0002, memoryAGet16(0x0696 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=6962
    memoryASet16(0x0697 + seg, 0x0001, memoryAGet16(0x0697 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=6971
    memoryASet16(0x0698 + seg, 0x0000, memoryAGet16(0x0698 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=6980
    memoryASet16(0x0698 + seg, 0x000b, memoryAGet16(0x0698 + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=698b
    memoryASet16(0x0699 + seg, 0x000a, memoryAGet16(0x0699 + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=699a
    memoryASet16(0x069a + seg, 0x0009, memoryAGet16(0x069a + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=69a9
    memoryASet16(0x069d + seg, 0x0002, memoryAGet16(0x069d + seg, 0x0002) + seg); // 287e -> 2a6b; lin=69d2
    memoryASet16(0x06a9 + seg, 0x0004, memoryAGet16(0x06a9 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=6a94
    memoryASet16(0x06aa + seg, 0x0003, memoryAGet16(0x06aa + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=6aa3
    memoryASet16(0x06ab + seg, 0x0002, memoryAGet16(0x06ab + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=6ab2
    memoryASet16(0x06ab + seg, 0x000d, memoryAGet16(0x06ab + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=6abd
    memoryASet16(0x06ac + seg, 0x000c, memoryAGet16(0x06ac + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=6acc
    memoryASet16(0x06ad + seg, 0x000b, memoryAGet16(0x06ad + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=6adb
    memoryASet16(0x06db + seg, 0x000a, memoryAGet16(0x06db + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=6dba
    memoryASet16(0x06dc + seg, 0x0009, memoryAGet16(0x06dc + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=6dc9
    memoryASet16(0x06dd + seg, 0x0008, memoryAGet16(0x06dd + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=6dd8
    memoryASet16(0x06de + seg, 0x0003, memoryAGet16(0x06de + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=6de3
    memoryASet16(0x06df + seg, 0x0002, memoryAGet16(0x06df + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=6df2
    memoryASet16(0x06e0 + seg, 0x0001, memoryAGet16(0x06e0 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=6e01
    memoryASet16(0x0714 + seg, 0x0005, memoryAGet16(0x0714 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=7145
    memoryASet16(0x0715 + seg, 0x0004, memoryAGet16(0x0715 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=7154
    memoryASet16(0x0716 + seg, 0x0003, memoryAGet16(0x0716 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=7163
    memoryASet16(0x0716 + seg, 0x000e, memoryAGet16(0x0716 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=716e
    memoryASet16(0x0717 + seg, 0x000d, memoryAGet16(0x0717 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=717d
    memoryASet16(0x0718 + seg, 0x000c, memoryAGet16(0x0718 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=718c
    memoryASet16(0x0746 + seg, 0x0005, memoryAGet16(0x0746 + seg, 0x0005) + seg); // 287e -> 2a6b; lin=7465
    memoryASet16(0x0754 + seg, 0x0008, memoryAGet16(0x0754 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=7548
    memoryASet16(0x0755 + seg, 0x0003, memoryAGet16(0x0755 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=7553
    memoryASet16(0x0756 + seg, 0x0002, memoryAGet16(0x0756 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=7562
    memoryASet16(0x0757 + seg, 0x0001, memoryAGet16(0x0757 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=7571
    memoryASet16(0x0758 + seg, 0x0000, memoryAGet16(0x0758 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=7580
    memoryASet16(0x0758 + seg, 0x000f, memoryAGet16(0x0758 + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=758f
    memoryASet16(0x0759 + seg, 0x000e, memoryAGet16(0x0759 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=759e
    memoryASet16(0x075a + seg, 0x000d, memoryAGet16(0x075a + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=75ad
    memoryASet16(0x075c + seg, 0x0002, memoryAGet16(0x075c + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=75c2
    memoryASet16(0x075c + seg, 0x000d, memoryAGet16(0x075c + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=75cd
    memoryASet16(0x075d + seg, 0x000c, memoryAGet16(0x075d + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=75dc
    memoryASet16(0x075e + seg, 0x000b, memoryAGet16(0x075e + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=75eb
    memoryASet16(0x075f + seg, 0x000a, memoryAGet16(0x075f + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=75fa
    memoryASet16(0x0760 + seg, 0x0009, memoryAGet16(0x0760 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=7609
    memoryASet16(0x0761 + seg, 0x0008, memoryAGet16(0x0761 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=7618
    memoryASet16(0x0762 + seg, 0x0007, memoryAGet16(0x0762 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=7627
    memoryASet16(0x076b + seg, 0x0003, memoryAGet16(0x076b + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=76b3
    memoryASet16(0x076c + seg, 0x0002, memoryAGet16(0x076c + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=76c2
    memoryASet16(0x076d + seg, 0x0001, memoryAGet16(0x076d + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=76d1
    memoryASet16(0x076d + seg, 0x000c, memoryAGet16(0x076d + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=76dc
    memoryASet16(0x076e + seg, 0x000b, memoryAGet16(0x076e + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=76eb
    memoryASet16(0x076f + seg, 0x000a, memoryAGet16(0x076f + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=76fa
    memoryASet16(0x0770 + seg, 0x000f, memoryAGet16(0x0770 + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=770f
    memoryASet16(0x0771 + seg, 0x000e, memoryAGet16(0x0771 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=771e
    memoryASet16(0x0772 + seg, 0x000d, memoryAGet16(0x0772 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=772d
    memoryASet16(0x0773 + seg, 0x0008, memoryAGet16(0x0773 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=7738
    memoryASet16(0x0774 + seg, 0x0007, memoryAGet16(0x0774 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=7747
    memoryASet16(0x0775 + seg, 0x0006, memoryAGet16(0x0775 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=7756
    memoryASet16(0x077f + seg, 0x0005, memoryAGet16(0x077f + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=77f5
    memoryASet16(0x0780 + seg, 0x0004, memoryAGet16(0x0780 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=7804
    memoryASet16(0x0781 + seg, 0x0003, memoryAGet16(0x0781 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=7813
    memoryASet16(0x0781 + seg, 0x000e, memoryAGet16(0x0781 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=781e
    memoryASet16(0x0782 + seg, 0x000d, memoryAGet16(0x0782 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=782d
    memoryASet16(0x0783 + seg, 0x000c, memoryAGet16(0x0783 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=783c
    memoryASet16(0x0785 + seg, 0x0001, memoryAGet16(0x0785 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=7851
    memoryASet16(0x0786 + seg, 0x0000, memoryAGet16(0x0786 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=7860
    memoryASet16(0x0786 + seg, 0x000f, memoryAGet16(0x0786 + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=786f
    memoryASet16(0x0787 + seg, 0x000a, memoryAGet16(0x0787 + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=787a
    memoryASet16(0x0788 + seg, 0x0009, memoryAGet16(0x0788 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=7889
    memoryASet16(0x0789 + seg, 0x0008, memoryAGet16(0x0789 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=7898
    memoryASet16(0x0797 + seg, 0x0000, memoryAGet16(0x0797 + seg, 0x0000) + seg); // 287e -> 2a6b; lin=7970
    memoryASet16(0x079f + seg, 0x0002, memoryAGet16(0x079f + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=79f2
    memoryASet16(0x07a1 + seg, 0x000b, memoryAGet16(0x07a1 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=7a1b
    memoryASet16(0x07af + seg, 0x0003, memoryAGet16(0x07af + seg, 0x0003) + seg); // 287e -> 2a6b; lin=7af3
    memoryASet16(0x07b7 + seg, 0x0006, memoryAGet16(0x07b7 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=7b76
    memoryASet16(0x07b9 + seg, 0x000f, memoryAGet16(0x07b9 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=7b9f
    memoryASet16(0x07c8 + seg, 0x0005, memoryAGet16(0x07c8 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=7c85
    memoryASet16(0x07ca + seg, 0x0004, memoryAGet16(0x07ca + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=7ca4
    memoryASet16(0x07cc + seg, 0x0003, memoryAGet16(0x07cc + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=7cc3
    memoryASet16(0x07ce + seg, 0x0006, memoryAGet16(0x07ce + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=7ce6
    memoryASet16(0x07d0 + seg, 0x0005, memoryAGet16(0x07d0 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=7d05
    memoryASet16(0x07d2 + seg, 0x0008, memoryAGet16(0x07d2 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=7d28
    memoryASet16(0x07d9 + seg, 0x0007, memoryAGet16(0x07d9 + seg, 0x0007) + seg); // 287e -> 2a6b; lin=7d97
    memoryASet16(0x0831 + seg, 0x0003, memoryAGet16(0x0831 + seg, 0x0003) + seg); // 287e -> 2a6b; lin=8313
    memoryASet16(0x0839 + seg, 0x0006, memoryAGet16(0x0839 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=8396
    memoryASet16(0x083b + seg, 0x000f, memoryAGet16(0x083b + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=83bf
    memoryASet16(0x0849 + seg, 0x0001, memoryAGet16(0x0849 + seg, 0x0001) + seg); // 287e -> 2a6b; lin=8491
    memoryASet16(0x0851 + seg, 0x0004, memoryAGet16(0x0851 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=8514
    memoryASet16(0x0853 + seg, 0x000d, memoryAGet16(0x0853 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=853d
    memoryASet16(0x085d + seg, 0x0000, memoryAGet16(0x085d + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=85d0
    memoryASet16(0x085d + seg, 0x000f, memoryAGet16(0x085d + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=85df
    memoryASet16(0x085e + seg, 0x000e, memoryAGet16(0x085e + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=85ee
    memoryASet16(0x085f + seg, 0x0009, memoryAGet16(0x085f + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=85f9
    memoryASet16(0x0860 + seg, 0x0008, memoryAGet16(0x0860 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=8608
    memoryASet16(0x0861 + seg, 0x0007, memoryAGet16(0x0861 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=8617
    memoryASet16(0x0862 + seg, 0x0006, memoryAGet16(0x0862 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=8626
    memoryASet16(0x0863 + seg, 0x0009, memoryAGet16(0x0863 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=8639
    memoryASet16(0x0864 + seg, 0x000c, memoryAGet16(0x0864 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=864c
    memoryASet16(0x0865 + seg, 0x000b, memoryAGet16(0x0865 + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=865b
    memoryASet16(0x0866 + seg, 0x000e, memoryAGet16(0x0866 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=866e
    memoryASet16(0x0868 + seg, 0x0001, memoryAGet16(0x0868 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=8681
    memoryASet16(0x0868 + seg, 0x000f, memoryAGet16(0x0868 + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=868f
    memoryASet16(0x0869 + seg, 0x000e, memoryAGet16(0x0869 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=869e
    memoryASet16(0x086a + seg, 0x0009, memoryAGet16(0x086a + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=86a9
    memoryASet16(0x086b + seg, 0x0008, memoryAGet16(0x086b + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=86b8
    memoryASet16(0x086c + seg, 0x0007, memoryAGet16(0x086c + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=86c7
    memoryASet16(0x086d + seg, 0x000a, memoryAGet16(0x086d + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=86da
    memoryASet16(0x086e + seg, 0x0009, memoryAGet16(0x086e + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=86e9
    memoryASet16(0x086f + seg, 0x000c, memoryAGet16(0x086f + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=86fc
    memoryASet16(0x0870 + seg, 0x000b, memoryAGet16(0x0870 + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=870b
    memoryASet16(0x0871 + seg, 0x000e, memoryAGet16(0x0871 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=871e
    memoryASet16(0x0872 + seg, 0x000d, memoryAGet16(0x0872 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=872d
    memoryASet16(0x0874 + seg, 0x0000, memoryAGet16(0x0874 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=8740
    memoryASet16(0x0897 + seg, 0x0006, memoryAGet16(0x0897 + seg, 0x0006) + seg); // 287e -> 2a6b; lin=8976
    memoryASet16(0x089a + seg, 0x0008, memoryAGet16(0x089a + seg, 0x0008) + seg); // 287e -> 2a6b; lin=89a8
    memoryASet16(0x089c + seg, 0x000f, memoryAGet16(0x089c + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=89cf
    memoryASet16(0x089e + seg, 0x000e, memoryAGet16(0x089e + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=89ee
    memoryASet16(0x08a0 + seg, 0x000d, memoryAGet16(0x08a0 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=8a0d
    memoryASet16(0x08a2 + seg, 0x000c, memoryAGet16(0x08a2 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=8a2c
    memoryASet16(0x08ef + seg, 0x0007, memoryAGet16(0x08ef + seg, 0x0007) + seg); // 287e -> 2a6b; lin=8ef7
    memoryASet16(0x08f3 + seg, 0x0007, memoryAGet16(0x08f3 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=8f37
    memoryASet16(0x08f5 + seg, 0x0006, memoryAGet16(0x08f5 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=8f56
    memoryASet16(0x08f7 + seg, 0x0005, memoryAGet16(0x08f7 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=8f75
    memoryASet16(0x08f9 + seg, 0x0008, memoryAGet16(0x08f9 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=8f98
    memoryASet16(0x08fb + seg, 0x000b, memoryAGet16(0x08fb + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=8fbb
    memoryASet16(0x08fd + seg, 0x000a, memoryAGet16(0x08fd + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=8fda
    memoryASet16(0x0901 + seg, 0x0005, memoryAGet16(0x0901 + seg, 0x0005) + seg); // 287e -> 2a6b; lin=9015
    memoryASet16(0x0942 + seg, 0x000a, memoryAGet16(0x0942 + seg, 0x000a) + seg); // 287e -> 2a6b; lin=942a
    memoryASet16(0x0965 + seg, 0x000a, memoryAGet16(0x0965 + seg, 0x000a) + seg); // 287e -> 2a6b; lin=965a
    memoryASet16(0x0969 + seg, 0x000a, memoryAGet16(0x0969 + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=969a
    memoryASet16(0x096b + seg, 0x0009, memoryAGet16(0x096b + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=96b9
    memoryASet16(0x096d + seg, 0x0008, memoryAGet16(0x096d + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=96d8
    memoryASet16(0x096f + seg, 0x000b, memoryAGet16(0x096f + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=96fb
    memoryASet16(0x0971 + seg, 0x000e, memoryAGet16(0x0971 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=971e
    memoryASet16(0x0973 + seg, 0x000d, memoryAGet16(0x0973 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=973d
    memoryASet16(0x0977 + seg, 0x0008, memoryAGet16(0x0977 + seg, 0x0008) + seg); // 287e -> 2a6b; lin=9778
    memoryASet16(0x0980 + seg, 0x0009, memoryAGet16(0x0980 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=9809
    memoryASet16(0x0981 + seg, 0x000d, memoryAGet16(0x0981 + seg, 0x000d) + seg); // 287e -> 2a6b; lin=981d
    memoryASet16(0x0989 + seg, 0x0008, memoryAGet16(0x0989 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=9898
    memoryASet16(0x098c + seg, 0x0001, memoryAGet16(0x098c + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=98c1
    memoryASet16(0x098c + seg, 0x0009, memoryAGet16(0x098c + seg, 0x0009) + seg); // 17f9 -> 19e6; lin=98c9
    memoryASet16(0x098d + seg, 0x0004, memoryAGet16(0x098d + seg, 0x0004) + seg); // 287e -> 2a6b; lin=98d4
    memoryASet16(0x09b2 + seg, 0x000f, memoryAGet16(0x09b2 + seg, 0x000f) + seg); // 287e -> 2a6b; lin=9b2f
    memoryASet16(0x09b6 + seg, 0x0003, memoryAGet16(0x09b6 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=9b63
    memoryASet16(0x09b8 + seg, 0x0002, memoryAGet16(0x09b8 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=9b82
    memoryASet16(0x09ba + seg, 0x0001, memoryAGet16(0x09ba + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=9ba1
    memoryASet16(0x09c1 + seg, 0x000f, memoryAGet16(0x09c1 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=9c1f
    memoryASet16(0x09c4 + seg, 0x0008, memoryAGet16(0x09c4 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=9c48
    memoryASet16(0x09c5 + seg, 0x0003, memoryAGet16(0x09c5 + seg, 0x0003) + seg); // 287e -> 2a6b; lin=9c53
    memoryASet16(0x09e7 + seg, 0x0000, memoryAGet16(0x09e7 + seg, 0x0000) + seg); // 287e -> 2a6b; lin=9e70
    memoryASet16(0x09ea + seg, 0x0004, memoryAGet16(0x09ea + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=9ea4
    memoryASet16(0x09ec + seg, 0x0003, memoryAGet16(0x09ec + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=9ec3
    memoryASet16(0x09ee + seg, 0x0002, memoryAGet16(0x09ee + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=9ee2
    memoryASet16(0x09f6 + seg, 0x0000, memoryAGet16(0x09f6 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=9f60
    memoryASet16(0x09f8 + seg, 0x0009, memoryAGet16(0x09f8 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=9f89
    memoryASet16(0x09fe + seg, 0x0000, memoryAGet16(0x09fe + seg, 0x0000) + seg); // 287e -> 2a6b; lin=9fe0
    memoryASet16(0x0a08 + seg, 0x000c, memoryAGet16(0x0a08 + seg, 0x000c) + seg); // 287e -> 2a6b; lin=a08c
    memoryASet16(0x0a12 + seg, 0x0003, memoryAGet16(0x0a12 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=a123
    memoryASet16(0x0a14 + seg, 0x000c, memoryAGet16(0x0a14 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=a14c
    memoryASet16(0x0a15 + seg, 0x000c, memoryAGet16(0x0a15 + seg, 0x000c) + seg); // 287e -> 2a6b; lin=a15c
    memoryASet16(0x0a30 + seg, 0x0009, memoryAGet16(0x0a30 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=a309
    memoryASet16(0x0a32 + seg, 0x0008, memoryAGet16(0x0a32 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=a328
    memoryASet16(0x0a34 + seg, 0x0007, memoryAGet16(0x0a34 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=a347
    memoryASet16(0x0a36 + seg, 0x000a, memoryAGet16(0x0a36 + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=a36a
    memoryASet16(0x0a38 + seg, 0x0005, memoryAGet16(0x0a38 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=a385
    memoryASet16(0x0a3a + seg, 0x0004, memoryAGet16(0x0a3a + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=a3a4
    memoryASet16(0x0a3c + seg, 0x0003, memoryAGet16(0x0a3c + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=a3c3
    memoryASet16(0x0a3e + seg, 0x0006, memoryAGet16(0x0a3e + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=a3e6
    memoryASet16(0x0a52 + seg, 0x0005, memoryAGet16(0x0a52 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=a525
    memoryASet16(0x0a54 + seg, 0x0004, memoryAGet16(0x0a54 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=a544
    memoryASet16(0x0a56 + seg, 0x0003, memoryAGet16(0x0a56 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=a563
    memoryASet16(0x0a58 + seg, 0x0006, memoryAGet16(0x0a58 + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=a586
    memoryASet16(0x0a5a + seg, 0x0001, memoryAGet16(0x0a5a + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=a5a1
    memoryASet16(0x0a5c + seg, 0x0000, memoryAGet16(0x0a5c + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=a5c0
    memoryASet16(0x0a5d + seg, 0x000f, memoryAGet16(0x0a5d + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=a5df
    memoryASet16(0x0a60 + seg, 0x0002, memoryAGet16(0x0a60 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=a602
    memoryASet16(0x0a70 + seg, 0x000a, memoryAGet16(0x0a70 + seg, 0x000a) + seg); // 287e -> 2a6b; lin=a70a
    memoryASet16(0x0a89 + seg, 0x0002, memoryAGet16(0x0a89 + seg, 0x0002) + seg); // 287e -> 2a6b; lin=a892
    memoryASet16(0x0ac6 + seg, 0x000f, memoryAGet16(0x0ac6 + seg, 0x000f) + seg); // 287e -> 2a6b; lin=ac6f
    memoryASet16(0x0ae9 + seg, 0x000f, memoryAGet16(0x0ae9 + seg, 0x000f) + seg); // 287e -> 2a6b; lin=ae9f
    memoryASet16(0x0aed + seg, 0x000f, memoryAGet16(0x0aed + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=aedf
    memoryASet16(0x0aef + seg, 0x000e, memoryAGet16(0x0aef + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=aefe
    memoryASet16(0x0af1 + seg, 0x000d, memoryAGet16(0x0af1 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=af1d
    memoryASet16(0x0af4 + seg, 0x0000, memoryAGet16(0x0af4 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=af40
    memoryASet16(0x0af6 + seg, 0x0003, memoryAGet16(0x0af6 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=af63
    memoryASet16(0x0af8 + seg, 0x0002, memoryAGet16(0x0af8 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=af82
    memoryASet16(0x0afb + seg, 0x000d, memoryAGet16(0x0afb + seg, 0x000d) + seg); // 287e -> 2a6b; lin=afbd
    memoryASet16(0x0b02 + seg, 0x0001, memoryAGet16(0x0b02 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=b021
    memoryASet16(0x0b03 + seg, 0x0000, memoryAGet16(0x0b03 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=b030
    memoryASet16(0x0b03 + seg, 0x000f, memoryAGet16(0x0b03 + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=b03f
    memoryASet16(0x0b04 + seg, 0x000a, memoryAGet16(0x0b04 + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=b04a
    memoryASet16(0x0b05 + seg, 0x0009, memoryAGet16(0x0b05 + seg, 0x0009) + seg); // 0d93 -> 0f80; lin=b059
    memoryASet16(0x0b06 + seg, 0x0008, memoryAGet16(0x0b06 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=b068
    memoryASet16(0x0b07 + seg, 0x000d, memoryAGet16(0x0b07 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=b07d
    memoryASet16(0x0b08 + seg, 0x000c, memoryAGet16(0x0b08 + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=b08c
    memoryASet16(0x0b09 + seg, 0x000b, memoryAGet16(0x0b09 + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=b09b
    memoryASet16(0x0b0a + seg, 0x0006, memoryAGet16(0x0b0a + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=b0a6
    memoryASet16(0x0b0b + seg, 0x0005, memoryAGet16(0x0b0b + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=b0b5
    memoryASet16(0x0b0c + seg, 0x0004, memoryAGet16(0x0b0c + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=b0c4
    memoryASet16(0x0b17 + seg, 0x000a, memoryAGet16(0x0b17 + seg, 0x000a) + seg); // 287e -> 2a6b; lin=b17a
    memoryASet16(0x0b2a + seg, 0x0006, memoryAGet16(0x0b2a + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=b2a6
    memoryASet16(0x0b2c + seg, 0x0001, memoryAGet16(0x0b2c + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=b2c1
    memoryASet16(0x0b2e + seg, 0x0004, memoryAGet16(0x0b2e + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=b2e4
    memoryASet16(0x0b30 + seg, 0x0007, memoryAGet16(0x0b30 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=b307
    memoryASet16(0x0b32 + seg, 0x0001, memoryAGet16(0x0b32 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=b321
    memoryASet16(0x0b33 + seg, 0x0000, memoryAGet16(0x0b33 + seg, 0x0000) + seg); // 0d93 -> 0f80; lin=b330
    memoryASet16(0x0b33 + seg, 0x000f, memoryAGet16(0x0b33 + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=b33f
    memoryASet16(0x0b34 + seg, 0x000e, memoryAGet16(0x0b34 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=b34e
    memoryASet16(0x0b36 + seg, 0x0001, memoryAGet16(0x0b36 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=b361
    memoryASet16(0x0b37 + seg, 0x0004, memoryAGet16(0x0b37 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=b374
    memoryASet16(0x0b37 + seg, 0x000f, memoryAGet16(0x0b37 + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=b37f
    memoryASet16(0x0b38 + seg, 0x000e, memoryAGet16(0x0b38 + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=b38e
    memoryASet16(0x0b39 + seg, 0x000d, memoryAGet16(0x0b39 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=b39d
    memoryASet16(0x0b3a + seg, 0x000c, memoryAGet16(0x0b3a + seg, 0x000c) + seg); // 0d93 -> 0f80; lin=b3ac
    memoryASet16(0x0b3b + seg, 0x000f, memoryAGet16(0x0b3b + seg, 0x000f) + seg); // 0d93 -> 0f80; lin=b3bf
    memoryASet16(0x0b3d + seg, 0x0002, memoryAGet16(0x0b3d + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=b3d2
    memoryASet16(0x0b3e + seg, 0x0007, memoryAGet16(0x0b3e + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=b3e7
    memoryASet16(0x0b3f + seg, 0x0006, memoryAGet16(0x0b3f + seg, 0x0006) + seg); // 0d93 -> 0f80; lin=b3f6
    memoryASet16(0x0b40 + seg, 0x0005, memoryAGet16(0x0b40 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=b405
    memoryASet16(0x0b41 + seg, 0x0004, memoryAGet16(0x0b41 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=b414
    memoryASet16(0x0b42 + seg, 0x0007, memoryAGet16(0x0b42 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=b427
    memoryASet16(0x0b43 + seg, 0x000a, memoryAGet16(0x0b43 + seg, 0x000a) + seg); // 0d93 -> 0f80; lin=b43a
    memoryASet16(0x0b44 + seg, 0x0005, memoryAGet16(0x0b44 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=b445
    memoryASet16(0x0b45 + seg, 0x0004, memoryAGet16(0x0b45 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=b454
    memoryASet16(0x0b46 + seg, 0x0003, memoryAGet16(0x0b46 + seg, 0x0003) + seg); // 0d93 -> 0f80; lin=b463
    memoryASet16(0x0b47 + seg, 0x0002, memoryAGet16(0x0b47 + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=b472
    memoryASet16(0x0b48 + seg, 0x0005, memoryAGet16(0x0b48 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=b485
    memoryASet16(0x0b49 + seg, 0x0008, memoryAGet16(0x0b49 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=b498
    memoryASet16(0x0b56 + seg, 0x000b, memoryAGet16(0x0b56 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=b56b
    memoryASet16(0x0b59 + seg, 0x0004, memoryAGet16(0x0b59 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=b594
    memoryASet16(0x0b5e + seg, 0x0001, memoryAGet16(0x0b5e + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=b5e1
    memoryASet16(0x0b79 + seg, 0x0003, memoryAGet16(0x0b79 + seg, 0x0003) + seg); // 287e -> 2a6b; lin=b793
    memoryASet16(0x0bc4 + seg, 0x000b, memoryAGet16(0x0bc4 + seg, 0x000b) + seg); // 286e -> 2a5b; lin=bc4b
    memoryASet16(0x0bce + seg, 0x000b, memoryAGet16(0x0bce + seg, 0x000b) + seg); // 287e -> 2a6b; lin=bceb
    memoryASet16(0x0bfc + seg, 0x0008, memoryAGet16(0x0bfc + seg, 0x0008) + seg); // 287e -> 2a6b; lin=bfc8
    memoryASet16(0x0c0a + seg, 0x000f, memoryAGet16(0x0c0a + seg, 0x000f) + seg); // 287e -> 2a6b; lin=c0af
    memoryASet16(0x0c10 + seg, 0x0009, memoryAGet16(0x0c10 + seg, 0x0009) + seg); // 287e -> 2a6b; lin=c109
    memoryASet16(0x0c17 + seg, 0x000a, memoryAGet16(0x0c17 + seg, 0x000a) + seg); // 287e -> 2a6b; lin=c17a
    memoryASet16(0x0c1e + seg, 0x000b, memoryAGet16(0x0c1e + seg, 0x000b) + seg); // 287e -> 2a6b; lin=c1eb
    memoryASet16(0x0c25 + seg, 0x000c, memoryAGet16(0x0c25 + seg, 0x000c) + seg); // 287e -> 2a6b; lin=c25c
    memoryASet16(0x0c2c + seg, 0x000d, memoryAGet16(0x0c2c + seg, 0x000d) + seg); // 287e -> 2a6b; lin=c2cd
    memoryASet16(0x0c33 + seg, 0x000e, memoryAGet16(0x0c33 + seg, 0x000e) + seg); // 287e -> 2a6b; lin=c33e
    memoryASet16(0x0c3a + seg, 0x000f, memoryAGet16(0x0c3a + seg, 0x000f) + seg); // 287e -> 2a6b; lin=c3af
    memoryASet16(0x0c42 + seg, 0x0000, memoryAGet16(0x0c42 + seg, 0x0000) + seg); // 287e -> 2a6b; lin=c420
    memoryASet16(0x0c49 + seg, 0x0001, memoryAGet16(0x0c49 + seg, 0x0001) + seg); // 287e -> 2a6b; lin=c491
    memoryASet16(0x0c50 + seg, 0x0002, memoryAGet16(0x0c50 + seg, 0x0002) + seg); // 287e -> 2a6b; lin=c502
    memoryASet16(0x0c58 + seg, 0x0006, memoryAGet16(0x0c58 + seg, 0x0006) + seg); // 287e -> 2a6b; lin=c586
    memoryASet16(0x0c5e + seg, 0x0006, memoryAGet16(0x0c5e + seg, 0x0006) + seg); // 287e -> 2a6b; lin=c5e6
    memoryASet16(0x0c63 + seg, 0x0004, memoryAGet16(0x0c63 + seg, 0x0004) + seg); // 287e -> 2a6b; lin=c634
    memoryASet16(0x0c69 + seg, 0x0006, memoryAGet16(0x0c69 + seg, 0x0006) + seg); // 287e -> 2a6b; lin=c696
    memoryASet16(0x0c6d + seg, 0x000f, memoryAGet16(0x0c6d + seg, 0x000f) + seg); // 287e -> 2a6b; lin=c6df
    memoryASet16(0x0c77 + seg, 0x0007, memoryAGet16(0x0c77 + seg, 0x0007) + seg); // 287e -> 2a6b; lin=c777
    memoryASet16(0x0c7f + seg, 0x0007, memoryAGet16(0x0c7f + seg, 0x0007) + seg); // 287e -> 2a6b; lin=c7f7
    memoryASet16(0x0c83 + seg, 0x0007, memoryAGet16(0x0c83 + seg, 0x0007) + seg); // 287e -> 2a6b; lin=c837
    memoryASet16(0x0c84 + seg, 0x0001, memoryAGet16(0x0c84 + seg, 0x0001) + seg); // 17f9 -> 19e6; lin=c841
    memoryASet16(0x0c8c + seg, 0x0002, memoryAGet16(0x0c8c + seg, 0x0002) + seg); // 0d93 -> 0f80; lin=c8c2
    memoryASet16(0x0c8d + seg, 0x000b, memoryAGet16(0x0c8d + seg, 0x000b) + seg); // 0d93 -> 0f80; lin=c8db
    memoryASet16(0x0c8f + seg, 0x000e, memoryAGet16(0x0c8f + seg, 0x000e) + seg); // 0d93 -> 0f80; lin=c8fe
    memoryASet16(0x0c91 + seg, 0x0007, memoryAGet16(0x0c91 + seg, 0x0007) + seg); // 0d93 -> 0f80; lin=c917
    memoryASet16(0x0c92 + seg, 0x000a, memoryAGet16(0x0c92 + seg, 0x000a) + seg); // 287e -> 2a6b; lin=c92a
    memoryASet16(0x0c93 + seg, 0x0003, memoryAGet16(0x0c93 + seg, 0x0003) + seg); // 2960 -> 2b4d; lin=c933
    memoryASet16(0x0c96 + seg, 0x0008, memoryAGet16(0x0c96 + seg, 0x0008) + seg); // 287e -> 2a6b; lin=c968
    memoryASet16(0x0caa + seg, 0x000d, memoryAGet16(0x0caa + seg, 0x000d) + seg); // 17f9 -> 19e6; lin=caad
    memoryASet16(0x0cab + seg, 0x0008, memoryAGet16(0x0cab + seg, 0x0008) + seg); // 17f9 -> 19e6; lin=cab8
    memoryASet16(0x0cb5 + seg, 0x0005, memoryAGet16(0x0cb5 + seg, 0x0005) + seg); // 0d93 -> 0f80; lin=cb55
    memoryASet16(0x0cb5 + seg, 0x000a, memoryAGet16(0x0cb5 + seg, 0x000a) + seg); // 2890 -> 2a7d; lin=cb5a
    memoryASet16(0x0cba + seg, 0x000a, memoryAGet16(0x0cba + seg, 0x000a) + seg); // 287e -> 2a6b; lin=cbaa
    memoryASet16(0x0cc0 + seg, 0x0006, memoryAGet16(0x0cc0 + seg, 0x0006) + seg); // 287e -> 2a6b; lin=cc06
    memoryASet16(0x0cc7 + seg, 0x0000, memoryAGet16(0x0cc7 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=cc70
    memoryASet16(0x0cc8 + seg, 0x0009, memoryAGet16(0x0cc8 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=cc89
    memoryASet16(0x0cd8 + seg, 0x0002, memoryAGet16(0x0cd8 + seg, 0x0002) + seg); // 17f9 -> 19e6; lin=cd82
    memoryASet16(0x0cd9 + seg, 0x0005, memoryAGet16(0x0cd9 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=cd95
    memoryASet16(0x0cda + seg, 0x0008, memoryAGet16(0x0cda + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=cda8
    memoryASet16(0x0cdc + seg, 0x0000, memoryAGet16(0x0cdc + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=cdc0
    memoryASet16(0x0cdd + seg, 0x0003, memoryAGet16(0x0cdd + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=cdd3
    memoryASet16(0x0cde + seg, 0x0000, memoryAGet16(0x0cde + seg, 0x0000) + seg); // 17f9 -> 19e6; lin=cde0
    memoryASet16(0x0ce2 + seg, 0x000a, memoryAGet16(0x0ce2 + seg, 0x000a) + seg); // 17f9 -> 19e6; lin=ce2a
    memoryASet16(0x0cf2 + seg, 0x000c, memoryAGet16(0x0cf2 + seg, 0x000c) + seg); // 287e -> 2a6b; lin=cf2c
    memoryASet16(0x0cf3 + seg, 0x0001, memoryAGet16(0x0cf3 + seg, 0x0001) + seg); // 17f9 -> 19e6; lin=cf31
    memoryASet16(0x0cf4 + seg, 0x0004, memoryAGet16(0x0cf4 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=cf44
    memoryASet16(0x0cf5 + seg, 0x0007, memoryAGet16(0x0cf5 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=cf57
    memoryASet16(0x0cf6 + seg, 0x000a, memoryAGet16(0x0cf6 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=cf6a
    memoryASet16(0x0cf7 + seg, 0x000d, memoryAGet16(0x0cf7 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=cf7d
    memoryASet16(0x0cf9 + seg, 0x0000, memoryAGet16(0x0cf9 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=cf90
    memoryASet16(0x0cfa + seg, 0x0003, memoryAGet16(0x0cfa + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=cfa3
    memoryASet16(0x0cfb + seg, 0x0006, memoryAGet16(0x0cfb + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=cfb6
    memoryASet16(0x0cfc + seg, 0x0009, memoryAGet16(0x0cfc + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=cfc9
    memoryASet16(0x0cfd + seg, 0x0006, memoryAGet16(0x0cfd + seg, 0x0006) + seg); // 17f9 -> 19e6; lin=cfd6
    memoryASet16(0x0d25 + seg, 0x0002, memoryAGet16(0x0d25 + seg, 0x0002) + seg); // 287e -> 2a6b; lin=d252
    memoryASet16(0x0d2a + seg, 0x0000, memoryAGet16(0x0d2a + seg, 0x0000) + seg); // 287e -> 2a6b; lin=d2a0
    memoryASet16(0x0d30 + seg, 0x0008, memoryAGet16(0x0d30 + seg, 0x0008) + seg); // 0d93 -> 0f80; lin=d308
    memoryASet16(0x0d32 + seg, 0x0001, memoryAGet16(0x0d32 + seg, 0x0001) + seg); // 0d93 -> 0f80; lin=d321
    memoryASet16(0x0d34 + seg, 0x0004, memoryAGet16(0x0d34 + seg, 0x0004) + seg); // 0d93 -> 0f80; lin=d344
    memoryASet16(0x0d35 + seg, 0x000d, memoryAGet16(0x0d35 + seg, 0x000d) + seg); // 0d93 -> 0f80; lin=d35d
    memoryASet16(0x0d38 + seg, 0x0003, memoryAGet16(0x0d38 + seg, 0x0003) + seg); // 17f9 -> 19e6; lin=d383
    memoryASet16(0x0d39 + seg, 0x0009, memoryAGet16(0x0d39 + seg, 0x0009) + seg); // 287e -> 2a6b; lin=d399
    memoryASet16(0x0d3a + seg, 0x0003, memoryAGet16(0x0d3a + seg, 0x0003) + seg); // 17f9 -> 19e6; lin=d3a3
    memoryASet16(0x0d3b + seg, 0x0006, memoryAGet16(0x0d3b + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=d3b6
    memoryASet16(0x0d3c + seg, 0x0009, memoryAGet16(0x0d3c + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=d3c9
    memoryASet16(0x0d3e + seg, 0x0001, memoryAGet16(0x0d3e + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=d3e1
    memoryASet16(0x0d3f + seg, 0x0004, memoryAGet16(0x0d3f + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=d3f4
    memoryASet16(0x0d40 + seg, 0x0001, memoryAGet16(0x0d40 + seg, 0x0001) + seg); // 17f9 -> 19e6; lin=d401
    memoryASet16(0x0d44 + seg, 0x000d, memoryAGet16(0x0d44 + seg, 0x000d) + seg); // 287e -> 2a6b; lin=d44d
    memoryASet16(0x0d4e + seg, 0x0005, memoryAGet16(0x0d4e + seg, 0x0005) + seg); // 287e -> 2a6b; lin=d4e5
    memoryASet16(0x0d65 + seg, 0x0007, memoryAGet16(0x0d65 + seg, 0x0007) + seg); // 287e -> 2a6b; lin=d657
    memoryASet16(0x0d6d + seg, 0x000f, memoryAGet16(0x0d6d + seg, 0x000f) + seg); // 287e -> 2a6b; lin=d6df
    memoryASet16(0x0d73 + seg, 0x0000, memoryAGet16(0x0d73 + seg, 0x0000) + seg); // 287e -> 2a6b; lin=d730
    memoryASet16(0x0d79 + seg, 0x0000, memoryAGet16(0x0d79 + seg, 0x0000) + seg); // 287e -> 2a6b; lin=d790
    memoryASet16(0x0d7e + seg, 0x0001, memoryAGet16(0x0d7e + seg, 0x0001) + seg); // 287e -> 2a6b; lin=d7e1
    memoryASet16(0x0d7f + seg, 0x000c, memoryAGet16(0x0d7f + seg, 0x000c) + seg); // 17f9 -> 19e6; lin=d7fc
    memoryASet16(0x0d83 + seg, 0x0004, memoryAGet16(0x0d83 + seg, 0x0004) + seg); // 287e -> 2a6b; lin=d834
    memoryASet16(0x0d85 + seg, 0x0003, memoryAGet16(0x0d85 + seg, 0x0003) + seg); // 17f9 -> 19e6; lin=d853
    memoryASet16(0x0d88 + seg, 0x000b, memoryAGet16(0x0d88 + seg, 0x000b) + seg); // 287e -> 2a6b; lin=d88b
    memoryASet16(0x0d8d + seg, 0x0003, memoryAGet16(0x0d8d + seg, 0x0003) + seg); // 287e -> 2a6b; lin=d8d3
    memoryASet16(0x0d9e + seg, 0x0006, memoryAGet16(0x0d9e + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=d9e6
    memoryASet16(0x0da2 + seg, 0x000d, memoryAGet16(0x0da2 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=da2d
    memoryASet16(0x0da4 + seg, 0x0009, memoryAGet16(0x0da4 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=da49
    memoryASet16(0x0da9 + seg, 0x0008, memoryAGet16(0x0da9 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=da98
    memoryASet16(0x0dac + seg, 0x0001, memoryAGet16(0x0dac + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=dac1
    memoryASet16(0x0dad + seg, 0x000d, memoryAGet16(0x0dad + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=dadd
    memoryASet16(0x0db2 + seg, 0x0007, memoryAGet16(0x0db2 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=db27
    memoryASet16(0x0db7 + seg, 0x0001, memoryAGet16(0x0db7 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=db71
    memoryASet16(0x0dbb + seg, 0x000b, memoryAGet16(0x0dbb + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=dbbb
    memoryASet16(0x0dc0 + seg, 0x0005, memoryAGet16(0x0dc0 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=dc05
    memoryASet16(0x0dc4 + seg, 0x000f, memoryAGet16(0x0dc4 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=dc4f
    memoryASet16(0x0dc9 + seg, 0x0009, memoryAGet16(0x0dc9 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=dc99
    memoryASet16(0x0dcc + seg, 0x0002, memoryAGet16(0x0dcc + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=dcc2
    memoryASet16(0x0dcd + seg, 0x000e, memoryAGet16(0x0dcd + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=dcde
    memoryASet16(0x0dd2 + seg, 0x0008, memoryAGet16(0x0dd2 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=dd28
    memoryASet16(0x0dd5 + seg, 0x0001, memoryAGet16(0x0dd5 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=dd51
    memoryASet16(0x0dd6 + seg, 0x000d, memoryAGet16(0x0dd6 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=dd6d
    memoryASet16(0x0ddb + seg, 0x0007, memoryAGet16(0x0ddb + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=ddb7
    memoryASet16(0x0dde + seg, 0x0008, memoryAGet16(0x0dde + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=dde8
    memoryASet16(0x0de0 + seg, 0x000c, memoryAGet16(0x0de0 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=de0c
    memoryASet16(0x0de5 + seg, 0x0006, memoryAGet16(0x0de5 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=de56
    memoryASet16(0x0dea + seg, 0x0000, memoryAGet16(0x0dea + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=dea0
    memoryASet16(0x0dee + seg, 0x000a, memoryAGet16(0x0dee + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=deea
    memoryASet16(0x0df3 + seg, 0x0003, memoryAGet16(0x0df3 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=df33
    memoryASet16(0x0df9 + seg, 0x0008, memoryAGet16(0x0df9 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=df98
    memoryASet16(0x0dfe + seg, 0x0002, memoryAGet16(0x0dfe + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=dfe2
    memoryASet16(0x0e00 + seg, 0x000b, memoryAGet16(0x0e00 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=e00b
    memoryASet16(0x0e02 + seg, 0x0007, memoryAGet16(0x0e02 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=e027
    memoryASet16(0x0e07 + seg, 0x0001, memoryAGet16(0x0e07 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=e071
    memoryASet16(0x0e0b + seg, 0x000b, memoryAGet16(0x0e0b + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=e0bb
    memoryASet16(0x0e10 + seg, 0x0005, memoryAGet16(0x0e10 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=e105
    memoryASet16(0x0e14 + seg, 0x000f, memoryAGet16(0x0e14 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=e14f
    memoryASet16(0x0e19 + seg, 0x0009, memoryAGet16(0x0e19 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=e199
    memoryASet16(0x0e1e + seg, 0x0003, memoryAGet16(0x0e1e + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=e1e3
    memoryASet16(0x0e20 + seg, 0x000c, memoryAGet16(0x0e20 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=e20c
    memoryASet16(0x0e22 + seg, 0x0008, memoryAGet16(0x0e22 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=e228
    memoryASet16(0x0e27 + seg, 0x0002, memoryAGet16(0x0e27 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=e272
    memoryASet16(0x0e2b + seg, 0x000c, memoryAGet16(0x0e2b + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=e2bc
    memoryASet16(0x0e2e + seg, 0x000d, memoryAGet16(0x0e2e + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=e2ed
    memoryASet16(0x0e31 + seg, 0x0001, memoryAGet16(0x0e31 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=e311
    memoryASet16(0x0e35 + seg, 0x000b, memoryAGet16(0x0e35 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=e35b
    memoryASet16(0x0e3a + seg, 0x0005, memoryAGet16(0x0e3a + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=e3a5
    memoryASet16(0x0e3e + seg, 0x000f, memoryAGet16(0x0e3e + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=e3ef
    memoryASet16(0x0e43 + seg, 0x0008, memoryAGet16(0x0e43 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=e438
    memoryASet16(0x0e49 + seg, 0x000d, memoryAGet16(0x0e49 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=e49d
    memoryASet16(0x0e4e + seg, 0x0007, memoryAGet16(0x0e4e + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=e4e7
    memoryASet16(0x0e51 + seg, 0x0000, memoryAGet16(0x0e51 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=e510
    memoryASet16(0x0e52 + seg, 0x000c, memoryAGet16(0x0e52 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=e52c
    memoryASet16(0x0e57 + seg, 0x0006, memoryAGet16(0x0e57 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=e576
    memoryASet16(0x0e5c + seg, 0x0000, memoryAGet16(0x0e5c + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=e5c0
    memoryASet16(0x0e60 + seg, 0x000a, memoryAGet16(0x0e60 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=e60a
    memoryASet16(0x0e65 + seg, 0x0004, memoryAGet16(0x0e65 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=e654
    memoryASet16(0x0e69 + seg, 0x000e, memoryAGet16(0x0e69 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=e69e
    memoryASet16(0x0e6e + seg, 0x0008, memoryAGet16(0x0e6e + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=e6e8
    memoryASet16(0x0e71 + seg, 0x0001, memoryAGet16(0x0e71 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=e711
    memoryASet16(0x0e72 + seg, 0x000d, memoryAGet16(0x0e72 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=e72d
    memoryASet16(0x0e77 + seg, 0x0007, memoryAGet16(0x0e77 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=e777
    memoryASet16(0x0e7c + seg, 0x0001, memoryAGet16(0x0e7c + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=e7c1
    memoryASet16(0x0e7f + seg, 0x0002, memoryAGet16(0x0e7f + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=e7f2
    memoryASet16(0x0e81 + seg, 0x0006, memoryAGet16(0x0e81 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=e816
    memoryASet16(0x0e86 + seg, 0x0000, memoryAGet16(0x0e86 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=e860
    memoryASet16(0x0e8a + seg, 0x000d, memoryAGet16(0x0e8a + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=e8ad
    memoryASet16(0x0e8f + seg, 0x0007, memoryAGet16(0x0e8f + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=e8f7
    memoryASet16(0x0e94 + seg, 0x0007, memoryAGet16(0x0e94 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=e947
    memoryASet16(0x0e98 + seg, 0x0006, memoryAGet16(0x0e98 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=e986
    memoryASet16(0x0e9d + seg, 0x0000, memoryAGet16(0x0e9d + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=e9d0
    memoryASet16(0x0ea1 + seg, 0x000a, memoryAGet16(0x0ea1 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=ea1a
    memoryASet16(0x0ea6 + seg, 0x0004, memoryAGet16(0x0ea6 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=ea64
    memoryASet16(0x0eaa + seg, 0x000d, memoryAGet16(0x0eaa + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=eaad
    memoryASet16(0x0ec7 + seg, 0x0002, memoryAGet16(0x0ec7 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=ec72
    memoryASet16(0x0ecc + seg, 0x0006, memoryAGet16(0x0ecc + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=ecc6
    memoryASet16(0x0ecf + seg, 0x0007, memoryAGet16(0x0ecf + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=ecf7
    memoryASet16(0x0ed1 + seg, 0x000b, memoryAGet16(0x0ed1 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=ed1b
    memoryASet16(0x0ed6 + seg, 0x000f, memoryAGet16(0x0ed6 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=ed6f
    memoryASet16(0x0edc + seg, 0x0003, memoryAGet16(0x0edc + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=edc3
    memoryASet16(0x0ee1 + seg, 0x0007, memoryAGet16(0x0ee1 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=ee17
    memoryASet16(0x0ee6 + seg, 0x000b, memoryAGet16(0x0ee6 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=ee6b
    memoryASet16(0x0eeb + seg, 0x000f, memoryAGet16(0x0eeb + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=eebf
    memoryASet16(0x0ef1 + seg, 0x0003, memoryAGet16(0x0ef1 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=ef13
    memoryASet16(0x0ef4 + seg, 0x0004, memoryAGet16(0x0ef4 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=ef44
    memoryASet16(0x0ef6 + seg, 0x0008, memoryAGet16(0x0ef6 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=ef68
    memoryASet16(0x0efb + seg, 0x000c, memoryAGet16(0x0efb + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=efbc
    memoryASet16(0x0f01 + seg, 0x0000, memoryAGet16(0x0f01 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=f010
    memoryASet16(0x0f04 + seg, 0x0001, memoryAGet16(0x0f04 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=f041
    memoryASet16(0x0f06 + seg, 0x0005, memoryAGet16(0x0f06 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=f065
    memoryASet16(0x0f0b + seg, 0x0009, memoryAGet16(0x0f0b + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=f0b9
    memoryASet16(0x0f10 + seg, 0x000d, memoryAGet16(0x0f10 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=f10d
    memoryASet16(0x0f16 + seg, 0x0001, memoryAGet16(0x0f16 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=f161
    memoryASet16(0x0f1b + seg, 0x0004, memoryAGet16(0x0f1b + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=f1b4
    memoryASet16(0x0f36 + seg, 0x0003, memoryAGet16(0x0f36 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=f363
    memoryASet16(0x0f3b + seg, 0x0007, memoryAGet16(0x0f3b + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=f3b7
    memoryASet16(0x0f3e + seg, 0x0008, memoryAGet16(0x0f3e + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=f3e8
    memoryASet16(0x0f40 + seg, 0x000c, memoryAGet16(0x0f40 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=f40c
    memoryASet16(0x0f46 + seg, 0x0000, memoryAGet16(0x0f46 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=f460
    memoryASet16(0x0f4b + seg, 0x0004, memoryAGet16(0x0f4b + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=f4b4
    memoryASet16(0x0f50 + seg, 0x0008, memoryAGet16(0x0f50 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=f508
    memoryASet16(0x0f55 + seg, 0x000c, memoryAGet16(0x0f55 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=f55c
    memoryASet16(0x0f5b + seg, 0x0000, memoryAGet16(0x0f5b + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=f5b0
    memoryASet16(0x0f60 + seg, 0x0004, memoryAGet16(0x0f60 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=f604
    memoryASet16(0x0f63 + seg, 0x0005, memoryAGet16(0x0f63 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=f635
    memoryASet16(0x0f65 + seg, 0x0009, memoryAGet16(0x0f65 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=f659
    memoryASet16(0x0f6a + seg, 0x000d, memoryAGet16(0x0f6a + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=f6ad
    memoryASet16(0x0f70 + seg, 0x0001, memoryAGet16(0x0f70 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=f701
    memoryASet16(0x0f73 + seg, 0x0002, memoryAGet16(0x0f73 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=f732
    memoryASet16(0x0f75 + seg, 0x0006, memoryAGet16(0x0f75 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=f756
    memoryASet16(0x0f7a + seg, 0x000a, memoryAGet16(0x0f7a + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=f7aa
    memoryASet16(0x0f7f + seg, 0x000e, memoryAGet16(0x0f7f + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=f7fe
    memoryASet16(0x0f85 + seg, 0x0002, memoryAGet16(0x0f85 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=f852
    memoryASet16(0x0f8a + seg, 0x0005, memoryAGet16(0x0f8a + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=f8a5
    memoryASet16(0x0f91 + seg, 0x0006, memoryAGet16(0x0f91 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=f916
    memoryASet16(0x0f96 + seg, 0x000a, memoryAGet16(0x0f96 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=f96a
    memoryASet16(0x0f99 + seg, 0x000b, memoryAGet16(0x0f99 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=f99b
    memoryASet16(0x0f9b + seg, 0x000f, memoryAGet16(0x0f9b + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=f9bf
    memoryASet16(0x0fa1 + seg, 0x0003, memoryAGet16(0x0fa1 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=fa13
    memoryASet16(0x0fa6 + seg, 0x0007, memoryAGet16(0x0fa6 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=fa67
    memoryASet16(0x0fab + seg, 0x000b, memoryAGet16(0x0fab + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=fabb
    memoryASet16(0x0fb0 + seg, 0x000f, memoryAGet16(0x0fb0 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=fb0f
    memoryASet16(0x0fb6 + seg, 0x0003, memoryAGet16(0x0fb6 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=fb63
    memoryASet16(0x0fbb + seg, 0x0007, memoryAGet16(0x0fbb + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=fbb7
    memoryASet16(0x0fbe + seg, 0x0008, memoryAGet16(0x0fbe + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=fbe8
    memoryASet16(0x0fc0 + seg, 0x000c, memoryAGet16(0x0fc0 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=fc0c
    memoryASet16(0x0fc6 + seg, 0x0000, memoryAGet16(0x0fc6 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=fc60
    memoryASet16(0x0fcb + seg, 0x0004, memoryAGet16(0x0fcb + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=fcb4
    memoryASet16(0x0fce + seg, 0x0005, memoryAGet16(0x0fce + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=fce5
    memoryASet16(0x0fd0 + seg, 0x0009, memoryAGet16(0x0fd0 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=fd09
    memoryASet16(0x0fd5 + seg, 0x000d, memoryAGet16(0x0fd5 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=fd5d
    memoryASet16(0x0fdb + seg, 0x0001, memoryAGet16(0x0fdb + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=fdb1
    memoryASet16(0x0fe0 + seg, 0x0005, memoryAGet16(0x0fe0 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=fe05
    memoryASet16(0x0fe5 + seg, 0x0008, memoryAGet16(0x0fe5 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=fe58
    memoryASet16(0x0ff0 + seg, 0x0006, memoryAGet16(0x0ff0 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=ff06
    memoryASet16(0x0ff3 + seg, 0x0007, memoryAGet16(0x0ff3 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=ff37
    memoryASet16(0x0ff5 + seg, 0x000b, memoryAGet16(0x0ff5 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=ff5b
    memoryASet16(0x0ffa + seg, 0x000f, memoryAGet16(0x0ffa + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=ffaf
    memoryASet16(0x1000 + seg, 0x0003, memoryAGet16(0x1000 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=10003
    memoryASet16(0x1005 + seg, 0x0007, memoryAGet16(0x1005 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=10057
    memoryASet16(0x100a + seg, 0x000b, memoryAGet16(0x100a + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=100ab
    memoryASet16(0x100f + seg, 0x000f, memoryAGet16(0x100f + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=100ff
    memoryASet16(0x1015 + seg, 0x0003, memoryAGet16(0x1015 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=10153
    memoryASet16(0x101a + seg, 0x0007, memoryAGet16(0x101a + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=101a7
    memoryASet16(0x101d + seg, 0x0008, memoryAGet16(0x101d + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=101d8
    memoryASet16(0x101f + seg, 0x000c, memoryAGet16(0x101f + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=101fc
    memoryASet16(0x1025 + seg, 0x0000, memoryAGet16(0x1025 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=10250
    memoryASet16(0x1028 + seg, 0x0001, memoryAGet16(0x1028 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=10281
    memoryASet16(0x102a + seg, 0x0005, memoryAGet16(0x102a + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=102a5
    memoryASet16(0x102f + seg, 0x0009, memoryAGet16(0x102f + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=102f9
    memoryASet16(0x1035 + seg, 0x0000, memoryAGet16(0x1035 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=10350
    memoryASet16(0x103a + seg, 0x0004, memoryAGet16(0x103a + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=103a4
    memoryASet16(0x103f + seg, 0x000e, memoryAGet16(0x103f + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=103fe
    memoryASet16(0x1044 + seg, 0x0007, memoryAGet16(0x1044 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=10447
    memoryASet16(0x1049 + seg, 0x000b, memoryAGet16(0x1049 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=1049b
    memoryASet16(0x104e + seg, 0x000f, memoryAGet16(0x104e + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=104ef
    memoryASet16(0x1054 + seg, 0x0003, memoryAGet16(0x1054 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=10543
    memoryASet16(0x1059 + seg, 0x0006, memoryAGet16(0x1059 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=10596
    memoryASet16(0x107d + seg, 0x0001, memoryAGet16(0x107d + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=107d1
    memoryASet16(0x1082 + seg, 0x0009, memoryAGet16(0x1082 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=10829
    memoryASet16(0x1085 + seg, 0x000a, memoryAGet16(0x1085 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1085a
    memoryASet16(0x1088 + seg, 0x000b, memoryAGet16(0x1088 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1088b
    memoryASet16(0x108b + seg, 0x000c, memoryAGet16(0x108b + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=108bc
    memoryASet16(0x108e + seg, 0x000d, memoryAGet16(0x108e + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=108ed
    memoryASet16(0x1091 + seg, 0x000e, memoryAGet16(0x1091 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1091e
    memoryASet16(0x1094 + seg, 0x000f, memoryAGet16(0x1094 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1094f
    memoryASet16(0x1098 + seg, 0x0000, memoryAGet16(0x1098 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=10980
    memoryASet16(0x109b + seg, 0x0001, memoryAGet16(0x109b + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=109b1
    memoryASet16(0x109e + seg, 0x0002, memoryAGet16(0x109e + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=109e2
    memoryASet16(0x10a1 + seg, 0x0003, memoryAGet16(0x10a1 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=10a13
    memoryASet16(0x10a4 + seg, 0x0004, memoryAGet16(0x10a4 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=10a44
    memoryASet16(0x10a7 + seg, 0x0005, memoryAGet16(0x10a7 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=10a75
    memoryASet16(0x10ad + seg, 0x000e, memoryAGet16(0x10ad + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=10ade
    memoryASet16(0x10b4 + seg, 0x000b, memoryAGet16(0x10b4 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=10b4b
    memoryASet16(0x10bb + seg, 0x0008, memoryAGet16(0x10bb + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=10bb8
    memoryASet16(0x10c2 + seg, 0x0005, memoryAGet16(0x10c2 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=10c25
    memoryASet16(0x10c5 + seg, 0x0006, memoryAGet16(0x10c5 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=10c56
    memoryASet16(0x10c8 + seg, 0x0007, memoryAGet16(0x10c8 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=10c87
    memoryASet16(0x10cb + seg, 0x0008, memoryAGet16(0x10cb + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=10cb8
    memoryASet16(0x10ce + seg, 0x0009, memoryAGet16(0x10ce + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=10ce9
    memoryASet16(0x10d1 + seg, 0x000a, memoryAGet16(0x10d1 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=10d1a
    memoryASet16(0x10d4 + seg, 0x000b, memoryAGet16(0x10d4 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=10d4b
    memoryASet16(0x10d7 + seg, 0x000c, memoryAGet16(0x10d7 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=10d7c
    memoryASet16(0x10da + seg, 0x000d, memoryAGet16(0x10da + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=10dad
    memoryASet16(0x10dd + seg, 0x000e, memoryAGet16(0x10dd + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=10dde
    memoryASet16(0x10e0 + seg, 0x000f, memoryAGet16(0x10e0 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=10e0f
    memoryASet16(0x10e4 + seg, 0x0000, memoryAGet16(0x10e4 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=10e40
    memoryASet16(0x10e7 + seg, 0x0001, memoryAGet16(0x10e7 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=10e71
    memoryASet16(0x10ea + seg, 0x0002, memoryAGet16(0x10ea + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=10ea2
    memoryASet16(0x10ed + seg, 0x0003, memoryAGet16(0x10ed + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=10ed3
    memoryASet16(0x10f0 + seg, 0x0004, memoryAGet16(0x10f0 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=10f04
    memoryASet16(0x10f3 + seg, 0x0005, memoryAGet16(0x10f3 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=10f35
    memoryASet16(0x10f6 + seg, 0x0006, memoryAGet16(0x10f6 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=10f66
    memoryASet16(0x10f9 + seg, 0x0007, memoryAGet16(0x10f9 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=10f97
    memoryASet16(0x10fc + seg, 0x0008, memoryAGet16(0x10fc + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=10fc8
    memoryASet16(0x10ff + seg, 0x0009, memoryAGet16(0x10ff + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=10ff9
    memoryASet16(0x1102 + seg, 0x000a, memoryAGet16(0x1102 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1102a
    memoryASet16(0x1108 + seg, 0x0003, memoryAGet16(0x1108 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=11083
    memoryASet16(0x110b + seg, 0x0005, memoryAGet16(0x110b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=110b5
    memoryASet16(0x110e + seg, 0x0007, memoryAGet16(0x110e + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=110e7
    memoryASet16(0x1111 + seg, 0x0009, memoryAGet16(0x1111 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=11119
    memoryASet16(0x1114 + seg, 0x000b, memoryAGet16(0x1114 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1114b
    memoryASet16(0x1117 + seg, 0x000d, memoryAGet16(0x1117 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1117d
    memoryASet16(0x111a + seg, 0x000f, memoryAGet16(0x111a + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=111af
    memoryASet16(0x111e + seg, 0x0000, memoryAGet16(0x111e + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=111e0
    memoryASet16(0x1121 + seg, 0x0002, memoryAGet16(0x1121 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=11212
    memoryASet16(0x1124 + seg, 0x0004, memoryAGet16(0x1124 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=11244
    memoryASet16(0x1127 + seg, 0x0006, memoryAGet16(0x1127 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=11276
    memoryASet16(0x112a + seg, 0x0008, memoryAGet16(0x112a + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=112a8
    memoryASet16(0x112d + seg, 0x000a, memoryAGet16(0x112d + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=112da
    memoryASet16(0x1130 + seg, 0x000b, memoryAGet16(0x1130 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1130b
    memoryASet16(0x1133 + seg, 0x000d, memoryAGet16(0x1133 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1133d
    memoryASet16(0x113d + seg, 0x000a, memoryAGet16(0x113d + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=113da
    memoryASet16(0x113e + seg, 0x000a, memoryAGet16(0x113e + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=113ea
    memoryASet16(0x1143 + seg, 0x0005, memoryAGet16(0x1143 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=11435
    memoryASet16(0x1145 + seg, 0x0009, memoryAGet16(0x1145 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=11459
    memoryASet16(0x1147 + seg, 0x000e, memoryAGet16(0x1147 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1147e
    memoryASet16(0x114a + seg, 0x0003, memoryAGet16(0x114a + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=114a3
    memoryASet16(0x1151 + seg, 0x0008, memoryAGet16(0x1151 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=11518
    memoryASet16(0x115e + seg, 0x0005, memoryAGet16(0x115e + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=115e5
    memoryASet16(0x1163 + seg, 0x0000, memoryAGet16(0x1163 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=11630
    memoryASet16(0x1165 + seg, 0x0004, memoryAGet16(0x1165 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=11654
    memoryASet16(0x116c + seg, 0x0009, memoryAGet16(0x116c + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=116c9
    memoryASet16(0x1178 + seg, 0x0008, memoryAGet16(0x1178 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=11788
    memoryASet16(0x117d + seg, 0x0003, memoryAGet16(0x117d + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=117d3
    memoryASet16(0x117f + seg, 0x0007, memoryAGet16(0x117f + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=117f7
    memoryASet16(0x1186 + seg, 0x000c, memoryAGet16(0x1186 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1186c
    memoryASet16(0x1191 + seg, 0x000d, memoryAGet16(0x1191 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1191d
    memoryASet16(0x1196 + seg, 0x0008, memoryAGet16(0x1196 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=11968
    memoryASet16(0x1198 + seg, 0x000c, memoryAGet16(0x1198 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1198c
    memoryASet16(0x11a0 + seg, 0x0001, memoryAGet16(0x11a0 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=11a01
    memoryASet16(0x11ab + seg, 0x0002, memoryAGet16(0x11ab + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=11ab2
    memoryASet16(0x11af + seg, 0x000d, memoryAGet16(0x11af + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=11afd
    memoryASet16(0x11b2 + seg, 0x0001, memoryAGet16(0x11b2 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=11b21
    memoryASet16(0x11b9 + seg, 0x0006, memoryAGet16(0x11b9 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=11b96
    memoryASet16(0x11c0 + seg, 0x000a, memoryAGet16(0x11c0 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=11c0a
    memoryASet16(0x11c5 + seg, 0x000f, memoryAGet16(0x11c5 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=11c5f
    memoryASet16(0x11ca + seg, 0x000a, memoryAGet16(0x11ca + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=11caa
    memoryASet16(0x11cc + seg, 0x000e, memoryAGet16(0x11cc + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=11cce
    memoryASet16(0x11d4 + seg, 0x0003, memoryAGet16(0x11d4 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=11d43
    memoryASet16(0x11db + seg, 0x0007, memoryAGet16(0x11db + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=11db7
    memoryASet16(0x11e0 + seg, 0x000c, memoryAGet16(0x11e0 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=11e0c
    memoryASet16(0x11e5 + seg, 0x000a, memoryAGet16(0x11e5 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=11e5a
    memoryASet16(0x11e8 + seg, 0x0001, memoryAGet16(0x11e8 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=11e81
    memoryASet16(0x11ea + seg, 0x0005, memoryAGet16(0x11ea + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=11ea5
    memoryASet16(0x11ec + seg, 0x0009, memoryAGet16(0x11ec + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=11ec9
    memoryASet16(0x11f3 + seg, 0x000e, memoryAGet16(0x11f3 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=11f3e
    memoryASet16(0x11fb + seg, 0x0002, memoryAGet16(0x11fb + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=11fb2
    memoryASet16(0x1201 + seg, 0x0005, memoryAGet16(0x1201 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=12015
    memoryASet16(0x1206 + seg, 0x0003, memoryAGet16(0x1206 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=12063
    memoryASet16(0x1208 + seg, 0x000a, memoryAGet16(0x1208 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1208a
    memoryASet16(0x120a + seg, 0x000e, memoryAGet16(0x120a + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=120ae
    memoryASet16(0x120d + seg, 0x0002, memoryAGet16(0x120d + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=120d2
    memoryASet16(0x1214 + seg, 0x0007, memoryAGet16(0x1214 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=12147
    memoryASet16(0x121e + seg, 0x0005, memoryAGet16(0x121e + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=121e5
    memoryASet16(0x1222 + seg, 0x000c, memoryAGet16(0x1222 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1222c
    memoryASet16(0x1227 + seg, 0x0007, memoryAGet16(0x1227 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=12277
    memoryASet16(0x1229 + seg, 0x000b, memoryAGet16(0x1229 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=1229b
    memoryASet16(0x1238 + seg, 0x0005, memoryAGet16(0x1238 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=12385
    memoryASet16(0x123d + seg, 0x0003, memoryAGet16(0x123d + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=123d3
    memoryASet16(0x123f + seg, 0x000a, memoryAGet16(0x123f + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=123fa
    memoryASet16(0x1241 + seg, 0x000e, memoryAGet16(0x1241 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1241e
    memoryASet16(0x1244 + seg, 0x0002, memoryAGet16(0x1244 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=12442
    memoryASet16(0x124b + seg, 0x0007, memoryAGet16(0x124b + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=124b7
    memoryASet16(0x1252 + seg, 0x000b, memoryAGet16(0x1252 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1252b
    memoryASet16(0x1258 + seg, 0x000e, memoryAGet16(0x1258 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1258e
    memoryASet16(0x125d + seg, 0x0009, memoryAGet16(0x125d + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=125d9
    memoryASet16(0x125f + seg, 0x000d, memoryAGet16(0x125f + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=125fd
    memoryASet16(0x1267 + seg, 0x0002, memoryAGet16(0x1267 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=12672
    memoryASet16(0x1273 + seg, 0x000f, memoryAGet16(0x1273 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1273f
    memoryASet16(0x1278 + seg, 0x000a, memoryAGet16(0x1278 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1278a
    memoryASet16(0x127a + seg, 0x000e, memoryAGet16(0x127a + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=127ae
    memoryASet16(0x128b + seg, 0x0004, memoryAGet16(0x128b + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=128b4
    memoryASet16(0x128f + seg, 0x000f, memoryAGet16(0x128f + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=128ff
    memoryASet16(0x1292 + seg, 0x0003, memoryAGet16(0x1292 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=12923
    memoryASet16(0x12a2 + seg, 0x0009, memoryAGet16(0x12a2 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=12a29
    memoryASet16(0x12a7 + seg, 0x0004, memoryAGet16(0x12a7 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=12a74
    memoryASet16(0x12a9 + seg, 0x0008, memoryAGet16(0x12a9 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=12a98
    memoryASet16(0x12b0 + seg, 0x000d, memoryAGet16(0x12b0 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=12b0d
    memoryASet16(0x12b6 + seg, 0x0002, memoryAGet16(0x12b6 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=12b62
    memoryASet16(0x12b9 + seg, 0x0006, memoryAGet16(0x12b9 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=12b96
    memoryASet16(0x12bd + seg, 0x000d, memoryAGet16(0x12bd + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=12bdd
    memoryASet16(0x12c2 + seg, 0x000b, memoryAGet16(0x12c2 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=12c2b
    memoryASet16(0x12c5 + seg, 0x0002, memoryAGet16(0x12c5 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=12c52
    memoryASet16(0x12c7 + seg, 0x0006, memoryAGet16(0x12c7 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=12c76
    memoryASet16(0x12c9 + seg, 0x000a, memoryAGet16(0x12c9 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=12c9a
    memoryASet16(0x12d0 + seg, 0x000f, memoryAGet16(0x12d0 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=12d0f
    memoryASet16(0x12da + seg, 0x000d, memoryAGet16(0x12da + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=12dad
    memoryASet16(0x12df + seg, 0x0004, memoryAGet16(0x12df + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=12df4
    memoryASet16(0x12f2 + seg, 0x000f, memoryAGet16(0x12f2 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=12f2f
    memoryASet16(0x12f7 + seg, 0x000a, memoryAGet16(0x12f7 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=12f7a
    memoryASet16(0x12f9 + seg, 0x000e, memoryAGet16(0x12f9 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=12f9e
    memoryASet16(0x1301 + seg, 0x0003, memoryAGet16(0x1301 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=13013
    memoryASet16(0x130b + seg, 0x0003, memoryAGet16(0x130b + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=130b3
    memoryASet16(0x130f + seg, 0x000f, memoryAGet16(0x130f + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=130ff
    memoryASet16(0x1312 + seg, 0x0003, memoryAGet16(0x1312 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=13123
    memoryASet16(0x131d + seg, 0x0000, memoryAGet16(0x131d + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=131d0
    memoryASet16(0x1322 + seg, 0x0005, memoryAGet16(0x1322 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=13225
    memoryASet16(0x1327 + seg, 0x0001, memoryAGet16(0x1327 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=13271
    memoryASet16(0x1329 + seg, 0x0005, memoryAGet16(0x1329 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=13295
    memoryASet16(0x1334 + seg, 0x0002, memoryAGet16(0x1334 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=13342
    memoryASet16(0x1339 + seg, 0x0007, memoryAGet16(0x1339 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=13397
    memoryASet16(0x133e + seg, 0x0003, memoryAGet16(0x133e + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=133e3
    memoryASet16(0x1340 + seg, 0x0007, memoryAGet16(0x1340 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=13407
    memoryASet16(0x134b + seg, 0x0004, memoryAGet16(0x134b + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=134b4
    memoryASet16(0x1350 + seg, 0x0009, memoryAGet16(0x1350 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=13509
    memoryASet16(0x1355 + seg, 0x0005, memoryAGet16(0x1355 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=13555
    memoryASet16(0x1357 + seg, 0x0009, memoryAGet16(0x1357 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=13579
    memoryASet16(0x1362 + seg, 0x0006, memoryAGet16(0x1362 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=13626
    memoryASet16(0x1367 + seg, 0x000b, memoryAGet16(0x1367 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1367b
    memoryASet16(0x1370 + seg, 0x000b, memoryAGet16(0x1370 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=1370b
    memoryASet16(0x1373 + seg, 0x0002, memoryAGet16(0x1373 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=13732
    memoryASet16(0x1375 + seg, 0x0006, memoryAGet16(0x1375 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=13756
    memoryASet16(0x1377 + seg, 0x000a, memoryAGet16(0x1377 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1377a
    memoryASet16(0x1383 + seg, 0x0007, memoryAGet16(0x1383 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=13837
    memoryASet16(0x1387 + seg, 0x000b, memoryAGet16(0x1387 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1387b
    memoryASet16(0x1390 + seg, 0x000d, memoryAGet16(0x1390 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1390d
    memoryASet16(0x1393 + seg, 0x0004, memoryAGet16(0x1393 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=13934
    memoryASet16(0x1395 + seg, 0x0008, memoryAGet16(0x1395 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=13958
    memoryASet16(0x1397 + seg, 0x000c, memoryAGet16(0x1397 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1397c
    memoryASet16(0x13a3 + seg, 0x0009, memoryAGet16(0x13a3 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=13a39
    memoryASet16(0x13a7 + seg, 0x000d, memoryAGet16(0x13a7 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=13a7d
    memoryASet16(0x13b5 + seg, 0x000f, memoryAGet16(0x13b5 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=13b5f
    memoryASet16(0x13ba + seg, 0x0003, memoryAGet16(0x13ba + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=13ba3
    memoryASet16(0x13c8 + seg, 0x0005, memoryAGet16(0x13c8 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=13c85
    memoryASet16(0x13cc + seg, 0x0009, memoryAGet16(0x13cc + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=13cc9
    memoryASet16(0x13d8 + seg, 0x0004, memoryAGet16(0x13d8 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=13d84
    memoryASet16(0x13df + seg, 0x0003, memoryAGet16(0x13df + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=13df3
    memoryASet16(0x13f1 + seg, 0x0002, memoryAGet16(0x13f1 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=13f12
    memoryASet16(0x141f + seg, 0x0001, memoryAGet16(0x141f + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=141f1
    memoryASet16(0x142d + seg, 0x0006, memoryAGet16(0x142d + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=142d6
    memoryASet16(0x142e + seg, 0x0005, memoryAGet16(0x142e + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=142e5
    memoryASet16(0x142f + seg, 0x0005, memoryAGet16(0x142f + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=142f5
    memoryASet16(0x1433 + seg, 0x0007, memoryAGet16(0x1433 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=14337
    memoryASet16(0x1436 + seg, 0x0008, memoryAGet16(0x1436 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=14368
    memoryASet16(0x1439 + seg, 0x0009, memoryAGet16(0x1439 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=14399
    memoryASet16(0x143c + seg, 0x000a, memoryAGet16(0x143c + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=143ca
    memoryASet16(0x143f + seg, 0x000b, memoryAGet16(0x143f + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=143fb
    memoryASet16(0x1442 + seg, 0x000c, memoryAGet16(0x1442 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1442c
    memoryASet16(0x1445 + seg, 0x000d, memoryAGet16(0x1445 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1445d
    memoryASet16(0x1448 + seg, 0x000e, memoryAGet16(0x1448 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1448e
    memoryASet16(0x144e + seg, 0x0002, memoryAGet16(0x144e + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=144e2
    memoryASet16(0x1451 + seg, 0x0004, memoryAGet16(0x1451 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=14514
    memoryASet16(0x1454 + seg, 0x0006, memoryAGet16(0x1454 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=14546
    memoryASet16(0x1457 + seg, 0x0008, memoryAGet16(0x1457 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=14578
    memoryASet16(0x145a + seg, 0x000a, memoryAGet16(0x145a + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=145aa
    memoryASet16(0x145d + seg, 0x000c, memoryAGet16(0x145d + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=145dc
    memoryASet16(0x1462 + seg, 0x000e, memoryAGet16(0x1462 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1462e
    memoryASet16(0x1466 + seg, 0x0000, memoryAGet16(0x1466 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=14660
    memoryASet16(0x146b + seg, 0x0004, memoryAGet16(0x146b + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=146b4
    memoryASet16(0x1470 + seg, 0x0008, memoryAGet16(0x1470 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=14708
    memoryASet16(0x1473 + seg, 0x000a, memoryAGet16(0x1473 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1473a
    memoryASet16(0x1476 + seg, 0x000c, memoryAGet16(0x1476 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1476c
    memoryASet16(0x1479 + seg, 0x000e, memoryAGet16(0x1479 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1479e
    memoryASet16(0x147d + seg, 0x0000, memoryAGet16(0x147d + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=147d0
    memoryASet16(0x1480 + seg, 0x0002, memoryAGet16(0x1480 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=14802
    memoryASet16(0x1483 + seg, 0x0004, memoryAGet16(0x1483 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=14834
    memoryASet16(0x1486 + seg, 0x0006, memoryAGet16(0x1486 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=14866
    memoryASet16(0x148b + seg, 0x000a, memoryAGet16(0x148b + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=148ba
    memoryASet16(0x148e + seg, 0x000c, memoryAGet16(0x148e + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=148ec
    memoryASet16(0x1491 + seg, 0x000e, memoryAGet16(0x1491 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1491e
    memoryASet16(0x1495 + seg, 0x0000, memoryAGet16(0x1495 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=14950
    memoryASet16(0x1498 + seg, 0x0002, memoryAGet16(0x1498 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=14982
    memoryASet16(0x149d + seg, 0x0006, memoryAGet16(0x149d + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=149d6
    memoryASet16(0x14a7 + seg, 0x0003, memoryAGet16(0x14a7 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=14a73
    memoryASet16(0x14ac + seg, 0x0007, memoryAGet16(0x14ac + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=14ac7
    memoryASet16(0x14af + seg, 0x0009, memoryAGet16(0x14af + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=14af9
    memoryASet16(0x14b2 + seg, 0x000b, memoryAGet16(0x14b2 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=14b2b
    memoryASet16(0x14b5 + seg, 0x000c, memoryAGet16(0x14b5 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=14b5c
    memoryASet16(0x14b8 + seg, 0x000e, memoryAGet16(0x14b8 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=14b8e
    memoryASet16(0x14bc + seg, 0x0000, memoryAGet16(0x14bc + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=14bc0
    memoryASet16(0x14bf + seg, 0x0002, memoryAGet16(0x14bf + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=14bf2
    memoryASet16(0x14c2 + seg, 0x0004, memoryAGet16(0x14c2 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=14c24
    memoryASet16(0x14c5 + seg, 0x0006, memoryAGet16(0x14c5 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=14c56
    memoryASet16(0x14c8 + seg, 0x0008, memoryAGet16(0x14c8 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=14c88
    memoryASet16(0x14cb + seg, 0x000a, memoryAGet16(0x14cb + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=14cba
    memoryASet16(0x14ce + seg, 0x000c, memoryAGet16(0x14ce + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=14cec
    memoryASet16(0x14d1 + seg, 0x000e, memoryAGet16(0x14d1 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=14d1e
    memoryASet16(0x14d5 + seg, 0x0000, memoryAGet16(0x14d5 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=14d50
    memoryASet16(0x14d8 + seg, 0x0002, memoryAGet16(0x14d8 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=14d82
    memoryASet16(0x14db + seg, 0x0004, memoryAGet16(0x14db + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=14db4
    memoryASet16(0x14de + seg, 0x0006, memoryAGet16(0x14de + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=14de6
    memoryASet16(0x14e1 + seg, 0x0008, memoryAGet16(0x14e1 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=14e18
    memoryASet16(0x14e4 + seg, 0x000a, memoryAGet16(0x14e4 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=14e4a
    memoryASet16(0x14e9 + seg, 0x000e, memoryAGet16(0x14e9 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=14e9e
    memoryASet16(0x14ef + seg, 0x0002, memoryAGet16(0x14ef + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=14ef2
    memoryASet16(0x14f4 + seg, 0x0006, memoryAGet16(0x14f4 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=14f46
    memoryASet16(0x14f7 + seg, 0x0008, memoryAGet16(0x14f7 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=14f78
    memoryASet16(0x14fa + seg, 0x000a, memoryAGet16(0x14fa + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=14faa
    memoryASet16(0x14fd + seg, 0x000c, memoryAGet16(0x14fd + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=14fdc
    memoryASet16(0x1500 + seg, 0x000e, memoryAGet16(0x1500 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1500e
    memoryASet16(0x1506 + seg, 0x0000, memoryAGet16(0x1506 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=15060
    memoryASet16(0x1509 + seg, 0x0002, memoryAGet16(0x1509 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=15092
    memoryASet16(0x150c + seg, 0x0003, memoryAGet16(0x150c + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=150c3
    memoryASet16(0x1516 + seg, 0x0002, memoryAGet16(0x1516 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=15162
    memoryASet16(0x151d + seg, 0x000a, memoryAGet16(0x151d + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=151da
    memoryASet16(0x1520 + seg, 0x000c, memoryAGet16(0x1520 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1520c
    memoryASet16(0x1523 + seg, 0x000e, memoryAGet16(0x1523 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1523e
    memoryASet16(0x1527 + seg, 0x0000, memoryAGet16(0x1527 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=15270
    memoryASet16(0x152a + seg, 0x0002, memoryAGet16(0x152a + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=152a2
    memoryASet16(0x152d + seg, 0x0004, memoryAGet16(0x152d + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=152d4
    memoryASet16(0x1530 + seg, 0x0006, memoryAGet16(0x1530 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=15306
    memoryASet16(0x1533 + seg, 0x0008, memoryAGet16(0x1533 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=15338
    memoryASet16(0x1536 + seg, 0x0009, memoryAGet16(0x1536 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=15369
    memoryASet16(0x1539 + seg, 0x000b, memoryAGet16(0x1539 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1539b
    memoryASet16(0x153c + seg, 0x000d, memoryAGet16(0x153c + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=153cd
    memoryASet16(0x153f + seg, 0x000f, memoryAGet16(0x153f + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=153ff
    memoryASet16(0x1543 + seg, 0x0001, memoryAGet16(0x1543 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=15431
    memoryASet16(0x1546 + seg, 0x0003, memoryAGet16(0x1546 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=15463
    memoryASet16(0x1549 + seg, 0x0005, memoryAGet16(0x1549 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=15495
    memoryASet16(0x154e + seg, 0x0001, memoryAGet16(0x154e + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=154e1
    memoryASet16(0x1550 + seg, 0x0005, memoryAGet16(0x1550 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=15505
    memoryASet16(0x1557 + seg, 0x000a, memoryAGet16(0x1557 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1557a
    memoryASet16(0x1561 + seg, 0x000a, memoryAGet16(0x1561 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1561a
    memoryASet16(0x1564 + seg, 0x000b, memoryAGet16(0x1564 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1564b
    memoryASet16(0x1567 + seg, 0x000d, memoryAGet16(0x1567 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1567d
    memoryASet16(0x156c + seg, 0x0009, memoryAGet16(0x156c + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=156c9
    memoryASet16(0x156e + seg, 0x000d, memoryAGet16(0x156e + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=156ed
    memoryASet16(0x1575 + seg, 0x0004, memoryAGet16(0x1575 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=15754
    memoryASet16(0x1582 + seg, 0x0001, memoryAGet16(0x1582 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=15821
    memoryASet16(0x1585 + seg, 0x0003, memoryAGet16(0x1585 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=15853
    memoryASet16(0x1588 + seg, 0x0005, memoryAGet16(0x1588 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=15885
    memoryASet16(0x158b + seg, 0x0007, memoryAGet16(0x158b + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=158b7
    memoryASet16(0x158e + seg, 0x0009, memoryAGet16(0x158e + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=158e9
    memoryASet16(0x1591 + seg, 0x000b, memoryAGet16(0x1591 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1591b
    memoryASet16(0x1594 + seg, 0x000d, memoryAGet16(0x1594 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1594d
    memoryASet16(0x1597 + seg, 0x000f, memoryAGet16(0x1597 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1597f
    memoryASet16(0x159b + seg, 0x0001, memoryAGet16(0x159b + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=159b1
    memoryASet16(0x159e + seg, 0x0003, memoryAGet16(0x159e + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=159e3
    memoryASet16(0x15a1 + seg, 0x0005, memoryAGet16(0x15a1 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=15a15
    memoryASet16(0x15a4 + seg, 0x0007, memoryAGet16(0x15a4 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=15a47
    memoryASet16(0x15a7 + seg, 0x0009, memoryAGet16(0x15a7 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=15a79
    memoryASet16(0x15ac + seg, 0x000d, memoryAGet16(0x15ac + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=15acd
    memoryASet16(0x15b6 + seg, 0x0006, memoryAGet16(0x15b6 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=15b66
    memoryASet16(0x15bf + seg, 0x000f, memoryAGet16(0x15bf + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=15bff
    memoryASet16(0x15c3 + seg, 0x0001, memoryAGet16(0x15c3 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=15c31
    memoryASet16(0x15c6 + seg, 0x0009, memoryAGet16(0x15c6 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=15c69
    memoryASet16(0x15cb + seg, 0x000d, memoryAGet16(0x15cb + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=15cbd
    memoryASet16(0x15d0 + seg, 0x0004, memoryAGet16(0x15d0 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=15d04
    memoryASet16(0x15d3 + seg, 0x0005, memoryAGet16(0x15d3 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=15d35
    memoryASet16(0x15d6 + seg, 0x0007, memoryAGet16(0x15d6 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=15d67
    memoryASet16(0x15d9 + seg, 0x0008, memoryAGet16(0x15d9 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=15d98
    memoryASet16(0x15dc + seg, 0x000a, memoryAGet16(0x15dc + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=15dca
    memoryASet16(0x15df + seg, 0x000c, memoryAGet16(0x15df + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=15dfc
    memoryASet16(0x15e2 + seg, 0x000d, memoryAGet16(0x15e2 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=15e2d
    memoryASet16(0x15e5 + seg, 0x000e, memoryAGet16(0x15e5 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=15e5e
    memoryASet16(0x15e9 + seg, 0x0000, memoryAGet16(0x15e9 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=15e90
    memoryASet16(0x15ec + seg, 0x0002, memoryAGet16(0x15ec + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=15ec2
    memoryASet16(0x15ef + seg, 0x0004, memoryAGet16(0x15ef + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=15ef4
    memoryASet16(0x15f2 + seg, 0x0005, memoryAGet16(0x15f2 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=15f25
    memoryASet16(0x15f5 + seg, 0x0007, memoryAGet16(0x15f5 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=15f57
    memoryASet16(0x15f8 + seg, 0x0009, memoryAGet16(0x15f8 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=15f89
    memoryASet16(0x15fb + seg, 0x000b, memoryAGet16(0x15fb + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=15fbb
    memoryASet16(0x15fe + seg, 0x000d, memoryAGet16(0x15fe + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=15fed
    memoryASet16(0x1601 + seg, 0x000f, memoryAGet16(0x1601 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1601f
    memoryASet16(0x1605 + seg, 0x0001, memoryAGet16(0x1605 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=16051
    memoryASet16(0x1608 + seg, 0x0003, memoryAGet16(0x1608 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=16083
    memoryASet16(0x160b + seg, 0x0005, memoryAGet16(0x160b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=160b5
    memoryASet16(0x160e + seg, 0x0007, memoryAGet16(0x160e + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=160e7
    memoryASet16(0x1611 + seg, 0x0009, memoryAGet16(0x1611 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=16119
    memoryASet16(0x1614 + seg, 0x000b, memoryAGet16(0x1614 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1614b
    memoryASet16(0x1617 + seg, 0x000d, memoryAGet16(0x1617 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1617d
    memoryASet16(0x161a + seg, 0x000f, memoryAGet16(0x161a + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=161af
    memoryASet16(0x161e + seg, 0x0001, memoryAGet16(0x161e + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=161e1
    memoryASet16(0x1621 + seg, 0x0003, memoryAGet16(0x1621 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=16213
    memoryASet16(0x1624 + seg, 0x0005, memoryAGet16(0x1624 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=16245
    memoryASet16(0x1627 + seg, 0x0007, memoryAGet16(0x1627 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=16277
    memoryASet16(0x162c + seg, 0x0009, memoryAGet16(0x162c + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=162c9
    memoryASet16(0x162f + seg, 0x000a, memoryAGet16(0x162f + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=162fa
    memoryASet16(0x1632 + seg, 0x000b, memoryAGet16(0x1632 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1632b
    memoryASet16(0x1635 + seg, 0x000c, memoryAGet16(0x1635 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1635c
    memoryASet16(0x1638 + seg, 0x000d, memoryAGet16(0x1638 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1638d
    memoryASet16(0x163d + seg, 0x000f, memoryAGet16(0x163d + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=163df
    memoryASet16(0x1643 + seg, 0x0001, memoryAGet16(0x1643 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=16431
    memoryASet16(0x1646 + seg, 0x0003, memoryAGet16(0x1646 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=16463
    memoryASet16(0x164b + seg, 0x0005, memoryAGet16(0x164b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=164b5
    memoryASet16(0x164e + seg, 0x0007, memoryAGet16(0x164e + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=164e7
    memoryASet16(0x1653 + seg, 0x0009, memoryAGet16(0x1653 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=16539
    memoryASet16(0x1656 + seg, 0x000b, memoryAGet16(0x1656 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1656b
    memoryASet16(0x1659 + seg, 0x000d, memoryAGet16(0x1659 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1659d
    memoryASet16(0x165c + seg, 0x000f, memoryAGet16(0x165c + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=165cf
    memoryASet16(0x1660 + seg, 0x0001, memoryAGet16(0x1660 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=16601
    memoryASet16(0x1663 + seg, 0x0002, memoryAGet16(0x1663 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=16632
    memoryASet16(0x1666 + seg, 0x0003, memoryAGet16(0x1666 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=16663
    memoryASet16(0x1669 + seg, 0x0004, memoryAGet16(0x1669 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=16694
    memoryASet16(0x166c + seg, 0x0005, memoryAGet16(0x166c + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=166c5
    memoryASet16(0x166f + seg, 0x0006, memoryAGet16(0x166f + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=166f6
    memoryASet16(0x1672 + seg, 0x0007, memoryAGet16(0x1672 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=16727
    memoryASet16(0x1675 + seg, 0x0008, memoryAGet16(0x1675 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=16758
    memoryASet16(0x1678 + seg, 0x0009, memoryAGet16(0x1678 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=16789
    memoryASet16(0x167b + seg, 0x000a, memoryAGet16(0x167b + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=167ba
    memoryASet16(0x167e + seg, 0x000c, memoryAGet16(0x167e + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=167ec
    memoryASet16(0x1681 + seg, 0x000e, memoryAGet16(0x1681 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1681e
    memoryASet16(0x1685 + seg, 0x0000, memoryAGet16(0x1685 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=16850
    memoryASet16(0x1688 + seg, 0x0002, memoryAGet16(0x1688 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=16882
    memoryASet16(0x168b + seg, 0x0004, memoryAGet16(0x168b + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=168b4
    memoryASet16(0x168e + seg, 0x0006, memoryAGet16(0x168e + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=168e6
    memoryASet16(0x1691 + seg, 0x0008, memoryAGet16(0x1691 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=16918
    memoryASet16(0x1696 + seg, 0x0004, memoryAGet16(0x1696 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=16964
    memoryASet16(0x1698 + seg, 0x0008, memoryAGet16(0x1698 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=16988
    memoryASet16(0x16a8 + seg, 0x0000, memoryAGet16(0x16a8 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=16a80
    memoryASet16(0x16b1 + seg, 0x0009, memoryAGet16(0x16b1 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=16b19
    memoryASet16(0x16b4 + seg, 0x000b, memoryAGet16(0x16b4 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=16b4b
    memoryASet16(0x16b7 + seg, 0x000d, memoryAGet16(0x16b7 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=16b7d
    memoryASet16(0x16ba + seg, 0x000f, memoryAGet16(0x16ba + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=16baf
    memoryASet16(0x16be + seg, 0x0001, memoryAGet16(0x16be + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=16be1
    memoryASet16(0x16c1 + seg, 0x0003, memoryAGet16(0x16c1 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=16c13
    memoryASet16(0x16c4 + seg, 0x0005, memoryAGet16(0x16c4 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=16c45
    memoryASet16(0x16c7 + seg, 0x0007, memoryAGet16(0x16c7 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=16c77
    memoryASet16(0x16ca + seg, 0x0009, memoryAGet16(0x16ca + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=16ca9
    memoryASet16(0x16cd + seg, 0x000b, memoryAGet16(0x16cd + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=16cdb
    memoryASet16(0x16d0 + seg, 0x000c, memoryAGet16(0x16d0 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=16d0c
    memoryASet16(0x16d3 + seg, 0x000d, memoryAGet16(0x16d3 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=16d3d
    memoryASet16(0x16d6 + seg, 0x000e, memoryAGet16(0x16d6 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=16d6e
    memoryASet16(0x16d9 + seg, 0x000f, memoryAGet16(0x16d9 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=16d9f
    memoryASet16(0x16dd + seg, 0x0000, memoryAGet16(0x16dd + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=16dd0
    memoryASet16(0x16e0 + seg, 0x0001, memoryAGet16(0x16e0 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=16e01
    memoryASet16(0x16e3 + seg, 0x0002, memoryAGet16(0x16e3 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=16e32
    memoryASet16(0x16e6 + seg, 0x0004, memoryAGet16(0x16e6 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=16e64
    memoryASet16(0x16e9 + seg, 0x0005, memoryAGet16(0x16e9 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=16e95
    memoryASet16(0x16ec + seg, 0x0007, memoryAGet16(0x16ec + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=16ec7
    memoryASet16(0x16ef + seg, 0x0009, memoryAGet16(0x16ef + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=16ef9
    memoryASet16(0x16f2 + seg, 0x000a, memoryAGet16(0x16f2 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=16f2a
    memoryASet16(0x16f5 + seg, 0x000c, memoryAGet16(0x16f5 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=16f5c
    memoryASet16(0x16f8 + seg, 0x000e, memoryAGet16(0x16f8 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=16f8e
    memoryASet16(0x16fc + seg, 0x0000, memoryAGet16(0x16fc + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=16fc0
    memoryASet16(0x16ff + seg, 0x0002, memoryAGet16(0x16ff + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=16ff2
    memoryASet16(0x1702 + seg, 0x0004, memoryAGet16(0x1702 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=17024
    memoryASet16(0x1705 + seg, 0x0006, memoryAGet16(0x1705 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=17056
    memoryASet16(0x1708 + seg, 0x0008, memoryAGet16(0x1708 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=17088
    memoryASet16(0x170d + seg, 0x000a, memoryAGet16(0x170d + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=170da
    memoryASet16(0x1712 + seg, 0x000c, memoryAGet16(0x1712 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1712c
    memoryASet16(0x171a + seg, 0x0004, memoryAGet16(0x171a + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=171a4
    memoryASet16(0x171f + seg, 0x0008, memoryAGet16(0x171f + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=171f8
    memoryASet16(0x1722 + seg, 0x0009, memoryAGet16(0x1722 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=17229
    memoryASet16(0x1725 + seg, 0x000a, memoryAGet16(0x1725 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1725a
    memoryASet16(0x1728 + seg, 0x000b, memoryAGet16(0x1728 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1728b
    memoryASet16(0x172b + seg, 0x000c, memoryAGet16(0x172b + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=172bc
    memoryASet16(0x172e + seg, 0x000d, memoryAGet16(0x172e + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=172ed
    memoryASet16(0x1731 + seg, 0x000e, memoryAGet16(0x1731 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1731e
    memoryASet16(0x1734 + seg, 0x000f, memoryAGet16(0x1734 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1734f
    memoryASet16(0x1738 + seg, 0x0000, memoryAGet16(0x1738 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=17380
    memoryASet16(0x173b + seg, 0x0001, memoryAGet16(0x173b + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=173b1
    memoryASet16(0x173e + seg, 0x0002, memoryAGet16(0x173e + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=173e2
    memoryASet16(0x1741 + seg, 0x0003, memoryAGet16(0x1741 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=17413
    memoryASet16(0x1744 + seg, 0x0004, memoryAGet16(0x1744 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=17444
    memoryASet16(0x1747 + seg, 0x0006, memoryAGet16(0x1747 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=17476
    memoryASet16(0x174a + seg, 0x0007, memoryAGet16(0x174a + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=174a7
    memoryASet16(0x174d + seg, 0x0009, memoryAGet16(0x174d + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=174d9
    memoryASet16(0x1750 + seg, 0x000b, memoryAGet16(0x1750 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1750b
    memoryASet16(0x1753 + seg, 0x000c, memoryAGet16(0x1753 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1753c
    memoryASet16(0x1756 + seg, 0x000e, memoryAGet16(0x1756 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1756e
    memoryASet16(0x175a + seg, 0x0000, memoryAGet16(0x175a + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=175a0
    memoryASet16(0x1763 + seg, 0x000d, memoryAGet16(0x1763 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1763d
    memoryASet16(0x1768 + seg, 0x0009, memoryAGet16(0x1768 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=17689
    memoryASet16(0x176a + seg, 0x000d, memoryAGet16(0x176a + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=176ad
    memoryASet16(0x177a + seg, 0x0005, memoryAGet16(0x177a + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=177a5
    memoryASet16(0x177f + seg, 0x0001, memoryAGet16(0x177f + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=177f1
    memoryASet16(0x1781 + seg, 0x0005, memoryAGet16(0x1781 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=17815
    memoryASet16(0x1788 + seg, 0x000a, memoryAGet16(0x1788 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1788a
    memoryASet16(0x1793 + seg, 0x000a, memoryAGet16(0x1793 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1793a
    memoryASet16(0x179b + seg, 0x0004, memoryAGet16(0x179b + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=179b4
    memoryASet16(0x179d + seg, 0x0008, memoryAGet16(0x179d + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=179d8
    memoryASet16(0x17aa + seg, 0x0002, memoryAGet16(0x17aa + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=17aa2
    memoryASet16(0x17ab + seg, 0x0004, memoryAGet16(0x17ab + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=17ab4
    memoryASet16(0x17ae + seg, 0x000e, memoryAGet16(0x17ae + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=17aee
    memoryASet16(0x17ca + seg, 0x0009, memoryAGet16(0x17ca + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=17ca9
    memoryASet16(0x17cc + seg, 0x000d, memoryAGet16(0x17cc + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=17ccd
    memoryASet16(0x17cd + seg, 0x000c, memoryAGet16(0x17cd + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=17cdc
    memoryASet16(0x17ce + seg, 0x000d, memoryAGet16(0x17ce + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=17ced
    memoryASet16(0x17cf + seg, 0x000f, memoryAGet16(0x17cf + seg, 0x000f) + seg); // 2890 -> 2a7d; lin=17cff
    memoryASet16(0x17d0 + seg, 0x000f, memoryAGet16(0x17d0 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=17d0f
    memoryASet16(0x17d1 + seg, 0x000f, memoryAGet16(0x17d1 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=17d1f
    memoryASet16(0x17d2 + seg, 0x0004, memoryAGet16(0x17d2 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=17d24
    memoryASet16(0x17d3 + seg, 0x0004, memoryAGet16(0x17d3 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=17d34
    memoryASet16(0x17d3 + seg, 0x0009, memoryAGet16(0x17d3 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=17d39
    memoryASet16(0x17d4 + seg, 0x0008, memoryAGet16(0x17d4 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=17d48
    memoryASet16(0x17d5 + seg, 0x0008, memoryAGet16(0x17d5 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=17d58
    memoryASet16(0x17d6 + seg, 0x000c, memoryAGet16(0x17d6 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=17d6c
    memoryASet16(0x17d7 + seg, 0x000e, memoryAGet16(0x17d7 + seg, 0x000e) + seg); // 2890 -> 2a7d; lin=17d7e
    memoryASet16(0x17da + seg, 0x0007, memoryAGet16(0x17da + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=17da7
    memoryASet16(0x17db + seg, 0x0009, memoryAGet16(0x17db + seg, 0x0009) + seg); // 2890 -> 2a7d; lin=17db9
    memoryASet16(0x17de + seg, 0x0001, memoryAGet16(0x17de + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=17de1
    memoryASet16(0x17e0 + seg, 0x0004, memoryAGet16(0x17e0 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=17e04
    memoryASet16(0x17e1 + seg, 0x0003, memoryAGet16(0x17e1 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=17e13
    memoryASet16(0x17e4 + seg, 0x0002, memoryAGet16(0x17e4 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=17e42
    memoryASet16(0x17e5 + seg, 0x000f, memoryAGet16(0x17e5 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=17e5f
    memoryASet16(0x17e7 + seg, 0x0001, memoryAGet16(0x17e7 + seg, 0x0001) + seg); // 2890 -> 2a7d; lin=17e71
    memoryASet16(0x17e8 + seg, 0x0001, memoryAGet16(0x17e8 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=17e81
    memoryASet16(0x17e9 + seg, 0x0001, memoryAGet16(0x17e9 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=17e91
    memoryASet16(0x17e9 + seg, 0x0006, memoryAGet16(0x17e9 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=17e96
    memoryASet16(0x17ea + seg, 0x0006, memoryAGet16(0x17ea + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=17ea6
    memoryASet16(0x17ea + seg, 0x000b, memoryAGet16(0x17ea + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=17eab
    memoryASet16(0x17eb + seg, 0x000a, memoryAGet16(0x17eb + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=17eba
    memoryASet16(0x17ec + seg, 0x000a, memoryAGet16(0x17ec + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=17eca
    memoryASet16(0x17ed + seg, 0x000e, memoryAGet16(0x17ed + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=17ede
    memoryASet16(0x17ef + seg, 0x0000, memoryAGet16(0x17ef + seg, 0x0000) + seg); // 2890 -> 2a7d; lin=17ef0
    memoryASet16(0x17f1 + seg, 0x0009, memoryAGet16(0x17f1 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=17f19
    memoryASet16(0x17f2 + seg, 0x000b, memoryAGet16(0x17f2 + seg, 0x000b) + seg); // 2890 -> 2a7d; lin=17f2b
    memoryASet16(0x17f5 + seg, 0x0003, memoryAGet16(0x17f5 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=17f53
    memoryASet16(0x17f5 + seg, 0x000b, memoryAGet16(0x17f5 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=17f5b
    memoryASet16(0x17f6 + seg, 0x000e, memoryAGet16(0x17f6 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=17f6e
    memoryASet16(0x17f7 + seg, 0x0007, memoryAGet16(0x17f7 + seg, 0x0007) + seg); // 17f9 -> 19e6; lin=17f77
    memoryASet16(0x17f8 + seg, 0x0000, memoryAGet16(0x17f8 + seg, 0x0000) + seg); // 287e -> 2a6b; lin=17f80
    memoryASet16(0x17fb + seg, 0x0006, memoryAGet16(0x17fb + seg, 0x0006) + seg); // 2cc6 -> 2eb3; lin=17fb6
    memoryASet16(0x17fc + seg, 0x000f, memoryAGet16(0x17fc + seg, 0x000f) + seg); // 2cc6 -> 2eb3; lin=17fcf
    memoryASet16(0x1804 + seg, 0x000c, memoryAGet16(0x1804 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1804c
    memoryASet16(0x1805 + seg, 0x000f, memoryAGet16(0x1805 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1805f
    memoryASet16(0x1807 + seg, 0x0007, memoryAGet16(0x1807 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=18077
    memoryASet16(0x1807 + seg, 0x000f, memoryAGet16(0x1807 + seg, 0x000f) + seg); // 2960 -> 2b4d; lin=1807f
    memoryASet16(0x1808 + seg, 0x000c, memoryAGet16(0x1808 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1808c
    memoryASet16(0x1809 + seg, 0x0004, memoryAGet16(0x1809 + seg, 0x0004) + seg); // 2960 -> 2b4d; lin=18094
    memoryASet16(0x180a + seg, 0x0001, memoryAGet16(0x180a + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=180a1
    memoryASet16(0x180a + seg, 0x0009, memoryAGet16(0x180a + seg, 0x0009) + seg); // 2960 -> 2b4d; lin=180a9
    memoryASet16(0x180b + seg, 0x0006, memoryAGet16(0x180b + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=180b6
    memoryASet16(0x180b + seg, 0x000e, memoryAGet16(0x180b + seg, 0x000e) + seg); // 2960 -> 2b4d; lin=180be
    memoryASet16(0x180c + seg, 0x000b, memoryAGet16(0x180c + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=180cb
    memoryASet16(0x180d + seg, 0x0003, memoryAGet16(0x180d + seg, 0x0003) + seg); // 2960 -> 2b4d; lin=180d3
    memoryASet16(0x180e + seg, 0x0000, memoryAGet16(0x180e + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=180e0
    memoryASet16(0x180e + seg, 0x0008, memoryAGet16(0x180e + seg, 0x0008) + seg); // 2960 -> 2b4d; lin=180e8
    memoryASet16(0x180f + seg, 0x0005, memoryAGet16(0x180f + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=180f5
    memoryASet16(0x180f + seg, 0x000d, memoryAGet16(0x180f + seg, 0x000d) + seg); // 2960 -> 2b4d; lin=180fd
    memoryASet16(0x1810 + seg, 0x000a, memoryAGet16(0x1810 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1810a
    memoryASet16(0x1811 + seg, 0x0002, memoryAGet16(0x1811 + seg, 0x0002) + seg); // 2960 -> 2b4d; lin=18112
    memoryASet16(0x1811 + seg, 0x000f, memoryAGet16(0x1811 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1811f
    memoryASet16(0x1812 + seg, 0x0007, memoryAGet16(0x1812 + seg, 0x0007) + seg); // 2960 -> 2b4d; lin=18127
    memoryASet16(0x1813 + seg, 0x0004, memoryAGet16(0x1813 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=18134
    memoryASet16(0x1813 + seg, 0x000c, memoryAGet16(0x1813 + seg, 0x000c) + seg); // 2960 -> 2b4d; lin=1813c
    memoryASet16(0x1814 + seg, 0x0009, memoryAGet16(0x1814 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=18149
    memoryASet16(0x1815 + seg, 0x0001, memoryAGet16(0x1815 + seg, 0x0001) + seg); // 2960 -> 2b4d; lin=18151
    memoryASet16(0x1815 + seg, 0x000e, memoryAGet16(0x1815 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1815e
    memoryASet16(0x1816 + seg, 0x0006, memoryAGet16(0x1816 + seg, 0x0006) + seg); // 2960 -> 2b4d; lin=18166
    memoryASet16(0x1817 + seg, 0x0003, memoryAGet16(0x1817 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=18173
    memoryASet16(0x1817 + seg, 0x000b, memoryAGet16(0x1817 + seg, 0x000b) + seg); // 2960 -> 2b4d; lin=1817b
    memoryASet16(0x1818 + seg, 0x0008, memoryAGet16(0x1818 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=18188
    memoryASet16(0x1819 + seg, 0x0000, memoryAGet16(0x1819 + seg, 0x0000) + seg); // 2960 -> 2b4d; lin=18190
    memoryASet16(0x1819 + seg, 0x000d, memoryAGet16(0x1819 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1819d
    memoryASet16(0x181a + seg, 0x0005, memoryAGet16(0x181a + seg, 0x0005) + seg); // 2960 -> 2b4d; lin=181a5
    memoryASet16(0x181b + seg, 0x0002, memoryAGet16(0x181b + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=181b2
    memoryASet16(0x181b + seg, 0x000a, memoryAGet16(0x181b + seg, 0x000a) + seg); // 2960 -> 2b4d; lin=181ba
    memoryASet16(0x181d + seg, 0x0008, memoryAGet16(0x181d + seg, 0x0008) + seg); // 2960 -> 2b4d; lin=181d8
    memoryASet16(0x181e + seg, 0x0003, memoryAGet16(0x181e + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=181e3
    memoryASet16(0x181f + seg, 0x000a, memoryAGet16(0x181f + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=181fa
    memoryASet16(0x1822 + seg, 0x0003, memoryAGet16(0x1822 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=18223
    memoryASet16(0x1827 + seg, 0x0001, memoryAGet16(0x1827 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=18271
    memoryASet16(0x1829 + seg, 0x0007, memoryAGet16(0x1829 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=18297
    memoryASet16(0x182b + seg, 0x000d, memoryAGet16(0x182b + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=182bd
    memoryASet16(0x182e + seg, 0x0003, memoryAGet16(0x182e + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=182e3
    memoryASet16(0x1830 + seg, 0x0009, memoryAGet16(0x1830 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=18309
    memoryASet16(0x1832 + seg, 0x000f, memoryAGet16(0x1832 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1832f
    memoryASet16(0x1834 + seg, 0x0006, memoryAGet16(0x1834 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=18346
    memoryASet16(0x1835 + seg, 0x000d, memoryAGet16(0x1835 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1835d
    memoryASet16(0x1838 + seg, 0x0005, memoryAGet16(0x1838 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=18385
    memoryASet16(0x183a + seg, 0x000e, memoryAGet16(0x183a + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=183ae
    memoryASet16(0x183c + seg, 0x000c, memoryAGet16(0x183c + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=183cc
    memoryASet16(0x183e + seg, 0x000a, memoryAGet16(0x183e + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=183ea
    memoryASet16(0x1840 + seg, 0x0008, memoryAGet16(0x1840 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=18408
    memoryASet16(0x1842 + seg, 0x0006, memoryAGet16(0x1842 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=18426
    memoryASet16(0x1844 + seg, 0x0004, memoryAGet16(0x1844 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=18444
    memoryASet16(0x1846 + seg, 0x0002, memoryAGet16(0x1846 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=18462
    memoryASet16(0x1849 + seg, 0x0004, memoryAGet16(0x1849 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=18494
    memoryASet16(0x184c + seg, 0x0004, memoryAGet16(0x184c + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=184c4
    memoryASet16(0x184e + seg, 0x000d, memoryAGet16(0x184e + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=184ed
    memoryASet16(0x1851 + seg, 0x0006, memoryAGet16(0x1851 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=18516
    memoryASet16(0x1853 + seg, 0x000f, memoryAGet16(0x1853 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1853f
    memoryASet16(0x1856 + seg, 0x0008, memoryAGet16(0x1856 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=18568
    memoryASet16(0x1859 + seg, 0x0001, memoryAGet16(0x1859 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=18591
    memoryASet16(0x185a + seg, 0x000b, memoryAGet16(0x185a + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=185ab
    memoryASet16(0x185c + seg, 0x0005, memoryAGet16(0x185c + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=185c5
    memoryASet16(0x185f + seg, 0x0000, memoryAGet16(0x185f + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=185f0
    memoryASet16(0x1861 + seg, 0x000c, memoryAGet16(0x1861 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1861c
    memoryASet16(0x1863 + seg, 0x000d, memoryAGet16(0x1863 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1863d
    memoryASet16(0x1865 + seg, 0x000e, memoryAGet16(0x1865 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1865e
    memoryASet16(0x1867 + seg, 0x000f, memoryAGet16(0x1867 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1867f
    memoryASet16(0x186a + seg, 0x0000, memoryAGet16(0x186a + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=186a0
    memoryASet16(0x186c + seg, 0x0001, memoryAGet16(0x186c + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=186c1
    memoryASet16(0x186e + seg, 0x0002, memoryAGet16(0x186e + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=186e2
    memoryASet16(0x1872 + seg, 0x0000, memoryAGet16(0x1872 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=18720
    memoryASet16(0x1883 + seg, 0x000b, memoryAGet16(0x1883 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1883b
    memoryASet16(0x1884 + seg, 0x000f, memoryAGet16(0x1884 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1884f
    memoryASet16(0x1888 + seg, 0x0008, memoryAGet16(0x1888 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=18888
    memoryASet16(0x1889 + seg, 0x0003, memoryAGet16(0x1889 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=18893
    memoryASet16(0x188b + seg, 0x0000, memoryAGet16(0x188b + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=188b0
    memoryASet16(0x188b + seg, 0x000a, memoryAGet16(0x188b + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=188ba
    memoryASet16(0x1890 + seg, 0x0003, memoryAGet16(0x1890 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=18903
    memoryASet16(0x1895 + seg, 0x0001, memoryAGet16(0x1895 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=18951
    memoryASet16(0x1898 + seg, 0x000c, memoryAGet16(0x1898 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1898c
    memoryASet16(0x189b + seg, 0x0009, memoryAGet16(0x189b + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=189b9
    memoryASet16(0x189e + seg, 0x0006, memoryAGet16(0x189e + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=189e6
    memoryASet16(0x18a1 + seg, 0x0003, memoryAGet16(0x18a1 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=18a13
    memoryASet16(0x18a4 + seg, 0x0000, memoryAGet16(0x18a4 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=18a40
    memoryASet16(0x18a6 + seg, 0x000d, memoryAGet16(0x18a6 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=18a6d
    memoryASet16(0x18a9 + seg, 0x000a, memoryAGet16(0x18a9 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=18a9a
    memoryASet16(0x18ac + seg, 0x0007, memoryAGet16(0x18ac + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=18ac7
    memoryASet16(0x18af + seg, 0x0004, memoryAGet16(0x18af + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=18af4
    memoryASet16(0x18b2 + seg, 0x0001, memoryAGet16(0x18b2 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=18b21
    memoryASet16(0x18b4 + seg, 0x000e, memoryAGet16(0x18b4 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=18b4e
    memoryASet16(0x18b7 + seg, 0x000b, memoryAGet16(0x18b7 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=18b7b
    memoryASet16(0x18ba + seg, 0x0008, memoryAGet16(0x18ba + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=18ba8
    memoryASet16(0x18bd + seg, 0x0005, memoryAGet16(0x18bd + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=18bd5
    memoryASet16(0x18c0 + seg, 0x0002, memoryAGet16(0x18c0 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=18c02
    memoryASet16(0x18c2 + seg, 0x000f, memoryAGet16(0x18c2 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=18c2f
    memoryASet16(0x18c5 + seg, 0x000c, memoryAGet16(0x18c5 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=18c5c
    memoryASet16(0x18c8 + seg, 0x0009, memoryAGet16(0x18c8 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=18c89
    memoryASet16(0x18cb + seg, 0x0006, memoryAGet16(0x18cb + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=18cb6
    memoryASet16(0x18ce + seg, 0x0003, memoryAGet16(0x18ce + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=18ce3
    memoryASet16(0x18d1 + seg, 0x0000, memoryAGet16(0x18d1 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=18d10
    memoryASet16(0x18d3 + seg, 0x000d, memoryAGet16(0x18d3 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=18d3d
    memoryASet16(0x18d6 + seg, 0x000a, memoryAGet16(0x18d6 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=18d6a
    memoryASet16(0x18d9 + seg, 0x0007, memoryAGet16(0x18d9 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=18d97
    memoryASet16(0x18dc + seg, 0x0004, memoryAGet16(0x18dc + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=18dc4
    memoryASet16(0x18df + seg, 0x0001, memoryAGet16(0x18df + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=18df1
    memoryASet16(0x18e1 + seg, 0x000e, memoryAGet16(0x18e1 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=18e1e
    memoryASet16(0x18e4 + seg, 0x000b, memoryAGet16(0x18e4 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=18e4b
    memoryASet16(0x18e7 + seg, 0x0008, memoryAGet16(0x18e7 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=18e78
    memoryASet16(0x18ea + seg, 0x0005, memoryAGet16(0x18ea + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=18ea5
    memoryASet16(0x18ed + seg, 0x0002, memoryAGet16(0x18ed + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=18ed2
    memoryASet16(0x18ef + seg, 0x000f, memoryAGet16(0x18ef + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=18eff
    memoryASet16(0x18f2 + seg, 0x000c, memoryAGet16(0x18f2 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=18f2c
    memoryASet16(0x18f5 + seg, 0x0009, memoryAGet16(0x18f5 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=18f59
    memoryASet16(0x18f8 + seg, 0x0006, memoryAGet16(0x18f8 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=18f86
    memoryASet16(0x18fb + seg, 0x0003, memoryAGet16(0x18fb + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=18fb3
    memoryASet16(0x18fe + seg, 0x0000, memoryAGet16(0x18fe + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=18fe0
    memoryASet16(0x1900 + seg, 0x000d, memoryAGet16(0x1900 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1900d
    memoryASet16(0x1903 + seg, 0x000a, memoryAGet16(0x1903 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1903a
    memoryASet16(0x1906 + seg, 0x0007, memoryAGet16(0x1906 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=19067
    memoryASet16(0x1909 + seg, 0x0004, memoryAGet16(0x1909 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=19094
    memoryASet16(0x190c + seg, 0x0001, memoryAGet16(0x190c + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=190c1
    memoryASet16(0x190e + seg, 0x000e, memoryAGet16(0x190e + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=190ee
    memoryASet16(0x1911 + seg, 0x000b, memoryAGet16(0x1911 + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=1911b
    memoryASet16(0x1914 + seg, 0x0008, memoryAGet16(0x1914 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=19148
    memoryASet16(0x1917 + seg, 0x0005, memoryAGet16(0x1917 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=19175
    memoryASet16(0x191a + seg, 0x0002, memoryAGet16(0x191a + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=191a2
    memoryASet16(0x191c + seg, 0x000f, memoryAGet16(0x191c + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=191cf
    memoryASet16(0x191f + seg, 0x000c, memoryAGet16(0x191f + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=191fc
    memoryASet16(0x1922 + seg, 0x0009, memoryAGet16(0x1922 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=19229
    memoryASet16(0x1925 + seg, 0x0006, memoryAGet16(0x1925 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=19256
    memoryASet16(0x1928 + seg, 0x0003, memoryAGet16(0x1928 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=19283
    memoryASet16(0x192b + seg, 0x0000, memoryAGet16(0x192b + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=192b0
    memoryASet16(0x192d + seg, 0x000d, memoryAGet16(0x192d + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=192dd
    memoryASet16(0x1930 + seg, 0x000a, memoryAGet16(0x1930 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1930a
    memoryASet16(0x1933 + seg, 0x0007, memoryAGet16(0x1933 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=19337
    memoryASet16(0x1936 + seg, 0x0004, memoryAGet16(0x1936 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=19364
    memoryASet16(0x1939 + seg, 0x0001, memoryAGet16(0x1939 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=19391
    memoryASet16(0x193b + seg, 0x000e, memoryAGet16(0x193b + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=193be
    memoryASet16(0x193e + seg, 0x000b, memoryAGet16(0x193e + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=193eb
    memoryASet16(0x1941 + seg, 0x0008, memoryAGet16(0x1941 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=19418
    memoryASet16(0x1944 + seg, 0x0005, memoryAGet16(0x1944 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=19445
    memoryASet16(0x1947 + seg, 0x0002, memoryAGet16(0x1947 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=19472
    memoryASet16(0x1949 + seg, 0x000f, memoryAGet16(0x1949 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1949f
    memoryASet16(0x194c + seg, 0x000b, memoryAGet16(0x194c + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=194cb
    memoryASet16(0x194f + seg, 0x0007, memoryAGet16(0x194f + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=194f7
    memoryASet16(0x1952 + seg, 0x000c, memoryAGet16(0x1952 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1952c
    memoryASet16(0x1962 + seg, 0x0001, memoryAGet16(0x1962 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=19621
    memoryASet16(0x1967 + seg, 0x0003, memoryAGet16(0x1967 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=19673
    memoryASet16(0x1967 + seg, 0x000d, memoryAGet16(0x1967 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1967d
    memoryASet16(0x1969 + seg, 0x0009, memoryAGet16(0x1969 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=19699
    memoryASet16(0x1972 + seg, 0x000a, memoryAGet16(0x1972 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1972a
    memoryASet16(0x1976 + seg, 0x0004, memoryAGet16(0x1976 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=19764
    memoryASet16(0x197d + seg, 0x0001, memoryAGet16(0x197d + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=197d1
    memoryASet16(0x1980 + seg, 0x0000, memoryAGet16(0x1980 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=19800
    memoryASet16(0x1983 + seg, 0x0009, memoryAGet16(0x1983 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=19839
    memoryASet16(0x1986 + seg, 0x0000, memoryAGet16(0x1986 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=19860
    memoryASet16(0x1989 + seg, 0x000d, memoryAGet16(0x1989 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1989d
    memoryASet16(0x198c + seg, 0x0000, memoryAGet16(0x198c + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=198c0
    memoryASet16(0x198e + seg, 0x0005, memoryAGet16(0x198e + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=198e5
    memoryASet16(0x1991 + seg, 0x0005, memoryAGet16(0x1991 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=19915
    memoryASet16(0x1993 + seg, 0x0004, memoryAGet16(0x1993 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=19934
    memoryASet16(0x1996 + seg, 0x000d, memoryAGet16(0x1996 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1996d
    memoryASet16(0x1999 + seg, 0x0004, memoryAGet16(0x1999 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=19994
    memoryASet16(0x199c + seg, 0x000e, memoryAGet16(0x199c + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=199ce
    memoryASet16(0x19a0 + seg, 0x0007, memoryAGet16(0x19a0 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=19a07
    memoryASet16(0x19a6 + seg, 0x000e, memoryAGet16(0x19a6 + seg, 0x000e) + seg); // 287e -> 2a6b; lin=19a6e
    memoryASet16(0x19a8 + seg, 0x000b, memoryAGet16(0x19a8 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=19a8b
    memoryASet16(0x19ab + seg, 0x0003, memoryAGet16(0x19ab + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=19ab3
    memoryASet16(0x19ac + seg, 0x0007, memoryAGet16(0x19ac + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=19ac7
    memoryASet16(0x19b0 + seg, 0x0009, memoryAGet16(0x19b0 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=19b09
    memoryASet16(0x19b2 + seg, 0x0007, memoryAGet16(0x19b2 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=19b27
    memoryASet16(0x19b6 + seg, 0x0005, memoryAGet16(0x19b6 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=19b65
    memoryASet16(0x19b9 + seg, 0x0001, memoryAGet16(0x19b9 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=19b91
    memoryASet16(0x19bd + seg, 0x0005, memoryAGet16(0x19bd + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=19bd5
    memoryASet16(0x19bf + seg, 0x0001, memoryAGet16(0x19bf + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=19bf1
    memoryASet16(0x19c1 + seg, 0x0003, memoryAGet16(0x19c1 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=19c13
    memoryASet16(0x19c2 + seg, 0x000f, memoryAGet16(0x19c2 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=19c2f
    memoryASet16(0x19c5 + seg, 0x0006, memoryAGet16(0x19c5 + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=19c56
    memoryASet16(0x19c9 + seg, 0x0008, memoryAGet16(0x19c9 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=19c98
    memoryASet16(0x19ca + seg, 0x0008, memoryAGet16(0x19ca + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=19ca8
    memoryASet16(0x19d4 + seg, 0x0004, memoryAGet16(0x19d4 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=19d44
    memoryASet16(0x19d5 + seg, 0x0002, memoryAGet16(0x19d5 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=19d52
    memoryASet16(0x19e4 + seg, 0x0005, memoryAGet16(0x19e4 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=19e45
    memoryASet16(0x19e9 + seg, 0x0009, memoryAGet16(0x19e9 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=19e99
    memoryASet16(0x19ea + seg, 0x0003, memoryAGet16(0x19ea + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=19ea3
    memoryASet16(0x19eb + seg, 0x000f, memoryAGet16(0x19eb + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=19ebf
    memoryASet16(0x19f4 + seg, 0x000b, memoryAGet16(0x19f4 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=19f4b
    memoryASet16(0x19f8 + seg, 0x0005, memoryAGet16(0x19f8 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=19f85
    memoryASet16(0x19ff + seg, 0x0006, memoryAGet16(0x19ff + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=19ff6
    memoryASet16(0x1a02 + seg, 0x0007, memoryAGet16(0x1a02 + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=1a027
    memoryASet16(0x1a06 + seg, 0x0002, memoryAGet16(0x1a06 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=1a062
    memoryASet16(0x1a08 + seg, 0x000a, memoryAGet16(0x1a08 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1a08a
    memoryASet16(0x1a0c + seg, 0x000c, memoryAGet16(0x1a0c + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1a0cc
    memoryASet16(0x1a0e + seg, 0x000f, memoryAGet16(0x1a0e + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1a0ef
    memoryASet16(0x1a11 + seg, 0x0004, memoryAGet16(0x1a11 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=1a114
    memoryASet16(0x1a14 + seg, 0x0005, memoryAGet16(0x1a14 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1a145
    memoryASet16(0x1a16 + seg, 0x0004, memoryAGet16(0x1a16 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=1a164
    memoryASet16(0x1a19 + seg, 0x000f, memoryAGet16(0x1a19 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1a19f
    memoryASet16(0x1a1c + seg, 0x0007, memoryAGet16(0x1a1c + seg, 0x0007) + seg); // 29c2 -> 2baf; lin=1a1c7
    memoryASet16(0x1a20 + seg, 0x0003, memoryAGet16(0x1a20 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=1a203
    memoryASet16(0x1a23 + seg, 0x000f, memoryAGet16(0x1a23 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1a23f
    memoryASet16(0x1a2b + seg, 0x000a, memoryAGet16(0x1a2b + seg, 0x000a) + seg); // 2960 -> 2b4d; lin=1a2ba
    memoryASet16(0x1a2c + seg, 0x0006, memoryAGet16(0x1a2c + seg, 0x0006) + seg); // 2960 -> 2b4d; lin=1a2c6
    memoryASet16(0x1a2d + seg, 0x0009, memoryAGet16(0x1a2d + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1a2d9
    memoryASet16(0x1a30 + seg, 0x0008, memoryAGet16(0x1a30 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1a308
    memoryASet16(0x1a31 + seg, 0x0008, memoryAGet16(0x1a31 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1a318
    memoryASet16(0x1a31 + seg, 0x000d, memoryAGet16(0x1a31 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1a31d
    memoryASet16(0x1a32 + seg, 0x000c, memoryAGet16(0x1a32 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1a32c
    memoryASet16(0x1a34 + seg, 0x000e, memoryAGet16(0x1a34 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1a34e
    memoryASet16(0x1a36 + seg, 0x0004, memoryAGet16(0x1a36 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1a364
    memoryASet16(0x1a39 + seg, 0x0009, memoryAGet16(0x1a39 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=1a399
    memoryASet16(0x1a3b + seg, 0x000b, memoryAGet16(0x1a3b + seg, 0x000b) + seg); // 29c2 -> 2baf; lin=1a3bb
    memoryASet16(0x1a3d + seg, 0x0001, memoryAGet16(0x1a3d + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1a3d1
    memoryASet16(0x1a3d + seg, 0x000d, memoryAGet16(0x1a3d + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1a3dd
    memoryASet16(0x1a40 + seg, 0x0005, memoryAGet16(0x1a40 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1a405
    memoryASet16(0x1a41 + seg, 0x0009, memoryAGet16(0x1a41 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1a419
    memoryASet16(0x1a45 + seg, 0x000b, memoryAGet16(0x1a45 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1a45b
    memoryASet16(0x1a47 + seg, 0x0009, memoryAGet16(0x1a47 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1a479
    memoryASet16(0x1a4a + seg, 0x000e, memoryAGet16(0x1a4a + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1a4ae
    memoryASet16(0x1a4d + seg, 0x000a, memoryAGet16(0x1a4d + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1a4da
    memoryASet16(0x1a51 + seg, 0x000e, memoryAGet16(0x1a51 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1a51e
    memoryASet16(0x1a53 + seg, 0x000a, memoryAGet16(0x1a53 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1a53a
    memoryASet16(0x1a55 + seg, 0x000c, memoryAGet16(0x1a55 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1a55c
    memoryASet16(0x1a57 + seg, 0x0008, memoryAGet16(0x1a57 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=1a578
    memoryASet16(0x1a59 + seg, 0x000f, memoryAGet16(0x1a59 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1a59f
    memoryASet16(0x1a5b + seg, 0x0006, memoryAGet16(0x1a5b + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1a5b6
    memoryASet16(0x1a5d + seg, 0x0001, memoryAGet16(0x1a5d + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=1a5d1
    memoryASet16(0x1a5d + seg, 0x000f, memoryAGet16(0x1a5d + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1a5df
    memoryASet16(0x1a6f + seg, 0x0004, memoryAGet16(0x1a6f + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1a6f4
    memoryASet16(0x1a74 + seg, 0x0006, memoryAGet16(0x1a74 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1a746
    memoryASet16(0x1a75 + seg, 0x0000, memoryAGet16(0x1a75 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1a750
    memoryASet16(0x1a76 + seg, 0x000c, memoryAGet16(0x1a76 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1a76c
    memoryASet16(0x1a80 + seg, 0x0009, memoryAGet16(0x1a80 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1a809
    memoryASet16(0x1a84 + seg, 0x0003, memoryAGet16(0x1a84 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=1a843
    memoryASet16(0x1a8b + seg, 0x0000, memoryAGet16(0x1a8b + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=1a8b0
    memoryASet16(0x1a8d + seg, 0x000f, memoryAGet16(0x1a8d + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1a8df
    memoryASet16(0x1a91 + seg, 0x0008, memoryAGet16(0x1a91 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=1a918
    memoryASet16(0x1a93 + seg, 0x000f, memoryAGet16(0x1a93 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1a93f
    memoryASet16(0x1a97 + seg, 0x000c, memoryAGet16(0x1a97 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1a97c
    memoryASet16(0x1a99 + seg, 0x000f, memoryAGet16(0x1a99 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1a99f
    memoryASet16(0x1a9c + seg, 0x0004, memoryAGet16(0x1a9c + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=1a9c4
    memoryASet16(0x1a9f + seg, 0x0004, memoryAGet16(0x1a9f + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=1a9f4
    memoryASet16(0x1aa1 + seg, 0x0003, memoryAGet16(0x1aa1 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=1aa13
    memoryASet16(0x1aa4 + seg, 0x000c, memoryAGet16(0x1aa4 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1aa4c
    memoryASet16(0x1aa7 + seg, 0x0003, memoryAGet16(0x1aa7 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=1aa73
    memoryASet16(0x1aaa + seg, 0x000d, memoryAGet16(0x1aaa + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1aaad
    memoryASet16(0x1aae + seg, 0x0009, memoryAGet16(0x1aae + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1aae9
    memoryASet16(0x1ab6 + seg, 0x0004, memoryAGet16(0x1ab6 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1ab64
    memoryASet16(0x1ab8 + seg, 0x000c, memoryAGet16(0x1ab8 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1ab8c
    memoryASet16(0x1aba + seg, 0x0000, memoryAGet16(0x1aba + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1aba0
    memoryASet16(0x1abe + seg, 0x0002, memoryAGet16(0x1abe + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1abe2
    memoryASet16(0x1ac0 + seg, 0x0000, memoryAGet16(0x1ac0 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1ac00
    memoryASet16(0x1ac5 + seg, 0x0005, memoryAGet16(0x1ac5 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1ac55
    memoryASet16(0x1ac7 + seg, 0x0001, memoryAGet16(0x1ac7 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=1ac71
    memoryASet16(0x1ac9 + seg, 0x0003, memoryAGet16(0x1ac9 + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=1ac93
    memoryASet16(0x1aca + seg, 0x000f, memoryAGet16(0x1aca + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=1acaf
    memoryASet16(0x1acd + seg, 0x0006, memoryAGet16(0x1acd + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=1acd6
    memoryASet16(0x1ad1 + seg, 0x0008, memoryAGet16(0x1ad1 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1ad18
    memoryASet16(0x1ad2 + seg, 0x0008, memoryAGet16(0x1ad2 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1ad28
    memoryASet16(0x1add + seg, 0x0006, memoryAGet16(0x1add + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=1add6
    memoryASet16(0x1ae0 + seg, 0x0005, memoryAGet16(0x1ae0 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1ae05
    memoryASet16(0x1ae3 + seg, 0x000e, memoryAGet16(0x1ae3 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1ae3e
    memoryASet16(0x1ae6 + seg, 0x0005, memoryAGet16(0x1ae6 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1ae65
    memoryASet16(0x1aea + seg, 0x0002, memoryAGet16(0x1aea + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=1aea2
    memoryASet16(0x1aec + seg, 0x0005, memoryAGet16(0x1aec + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1aec5
    memoryASet16(0x1aee + seg, 0x000a, memoryAGet16(0x1aee + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1aeea
    memoryASet16(0x1af1 + seg, 0x000a, memoryAGet16(0x1af1 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1af1a
    memoryASet16(0x1af3 + seg, 0x0009, memoryAGet16(0x1af3 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=1af39
    memoryASet16(0x1af7 + seg, 0x0002, memoryAGet16(0x1af7 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=1af72
    memoryASet16(0x1af9 + seg, 0x0009, memoryAGet16(0x1af9 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=1af99
    memoryASet16(0x1afd + seg, 0x0003, memoryAGet16(0x1afd + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=1afd3
    memoryASet16(0x1b00 + seg, 0x000f, memoryAGet16(0x1b00 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1b00f
    memoryASet16(0x1b0b + seg, 0x0006, memoryAGet16(0x1b0b + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=1b0b6
    memoryASet16(0x1b0e + seg, 0x0005, memoryAGet16(0x1b0e + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1b0e5
    memoryASet16(0x1b11 + seg, 0x000e, memoryAGet16(0x1b11 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=1b11e
    memoryASet16(0x1b14 + seg, 0x0005, memoryAGet16(0x1b14 + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1b145
    memoryASet16(0x1b18 + seg, 0x0002, memoryAGet16(0x1b18 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=1b182
    memoryASet16(0x1b1a + seg, 0x0005, memoryAGet16(0x1b1a + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1b1a5
    memoryASet16(0x1b1c + seg, 0x000a, memoryAGet16(0x1b1c + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1b1ca
    memoryASet16(0x1b1f + seg, 0x000a, memoryAGet16(0x1b1f + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=1b1fa
    memoryASet16(0x1b21 + seg, 0x0009, memoryAGet16(0x1b21 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=1b219
    memoryASet16(0x1b25 + seg, 0x0002, memoryAGet16(0x1b25 + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=1b252
    memoryASet16(0x1b27 + seg, 0x0009, memoryAGet16(0x1b27 + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=1b279
    memoryASet16(0x1b2b + seg, 0x0003, memoryAGet16(0x1b2b + seg, 0x0003) + seg); // 29c2 -> 2baf; lin=1b2b3
    memoryASet16(0x1b2e + seg, 0x000f, memoryAGet16(0x1b2e + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1b2ef
    memoryASet16(0x1b38 + seg, 0x000d, memoryAGet16(0x1b38 + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=1b38d
    memoryASet16(0x1b39 + seg, 0x000b, memoryAGet16(0x1b39 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1b39b
    memoryASet16(0x1b3f + seg, 0x0000, memoryAGet16(0x1b3f + seg, 0x0000) + seg); // 2642 -> 282f; lin=1b3f0
    memoryASet16(0x1b3f + seg, 0x000c, memoryAGet16(0x1b3f + seg, 0x000c) + seg); // 2642 -> 282f; lin=1b3fc
    memoryASet16(0x1b40 + seg, 0x0008, memoryAGet16(0x1b40 + seg, 0x0008) + seg); // 29c2 -> 2baf; lin=1b408
    memoryASet16(0x1b43 + seg, 0x0003, memoryAGet16(0x1b43 + seg, 0x0003) + seg); // 2642 -> 282f; lin=1b433
    memoryASet16(0x1b44 + seg, 0x0007, memoryAGet16(0x1b44 + seg, 0x0007) + seg); // 287e -> 2a6b; lin=1b447
    memoryASet16(0x1b46 + seg, 0x0005, memoryAGet16(0x1b46 + seg, 0x0005) + seg); // 2960 -> 2b4d; lin=1b465
    memoryASet16(0x1b4a + seg, 0x0009, memoryAGet16(0x1b4a + seg, 0x0009) + seg); // 2642 -> 282f; lin=1b4a9
    memoryASet16(0x1b4b + seg, 0x0005, memoryAGet16(0x1b4b + seg, 0x0005) + seg); // 2642 -> 282f; lin=1b4b5
    memoryASet16(0x1b4c + seg, 0x0001, memoryAGet16(0x1b4c + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=1b4c1
    memoryASet16(0x1b4e + seg, 0x000c, memoryAGet16(0x1b4e + seg, 0x000c) + seg); // 2642 -> 282f; lin=1b4ec
    memoryASet16(0x1b50 + seg, 0x0001, memoryAGet16(0x1b50 + seg, 0x0001) + seg); // 29c2 -> 2baf; lin=1b501
    memoryASet16(0x1b51 + seg, 0x0005, memoryAGet16(0x1b51 + seg, 0x0005) + seg); // 2642 -> 282f; lin=1b515
    memoryASet16(0x1b5a + seg, 0x0009, memoryAGet16(0x1b5a + seg, 0x0009) + seg); // 29c2 -> 2baf; lin=1b5a9
    memoryASet16(0x1b5b + seg, 0x0006, memoryAGet16(0x1b5b + seg, 0x0006) + seg); // 29c2 -> 2baf; lin=1b5b6
    memoryASet16(0x1b5d + seg, 0x0004, memoryAGet16(0x1b5d + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=1b5d4
    memoryASet16(0x1b5e + seg, 0x0005, memoryAGet16(0x1b5e + seg, 0x0005) + seg); // 29c2 -> 2baf; lin=1b5e5
    memoryASet16(0x1b69 + seg, 0x0003, memoryAGet16(0x1b69 + seg, 0x0003) + seg); // 287e -> 2a6b; lin=1b693
    memoryASet16(0x1b75 + seg, 0x000e, memoryAGet16(0x1b75 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1b75e
    memoryASet16(0x1b78 + seg, 0x0009, memoryAGet16(0x1b78 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1b789
    memoryASet16(0x1b79 + seg, 0x0003, memoryAGet16(0x1b79 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1b793
    memoryASet16(0x1b7a + seg, 0x0001, memoryAGet16(0x1b7a + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1b7a1
    memoryASet16(0x1b7c + seg, 0x0002, memoryAGet16(0x1b7c + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1b7c2
    memoryASet16(0x1b7d + seg, 0x0002, memoryAGet16(0x1b7d + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1b7d2
    memoryASet16(0x1b7d + seg, 0x000d, memoryAGet16(0x1b7d + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1b7dd
    memoryASet16(0x1b7e + seg, 0x000b, memoryAGet16(0x1b7e + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1b7eb
    memoryASet16(0x1b81 + seg, 0x000e, memoryAGet16(0x1b81 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1b81e
    memoryASet16(0x1b84 + seg, 0x000e, memoryAGet16(0x1b84 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1b84e
    memoryASet16(0x1b85 + seg, 0x000c, memoryAGet16(0x1b85 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1b85c
    memoryASet16(0x1b86 + seg, 0x000a, memoryAGet16(0x1b86 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b86a
    memoryASet16(0x1b87 + seg, 0x000a, memoryAGet16(0x1b87 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b87a
    memoryASet16(0x1b88 + seg, 0x000c, memoryAGet16(0x1b88 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1b88c
    memoryASet16(0x1b89 + seg, 0x000a, memoryAGet16(0x1b89 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b89a
    memoryASet16(0x1b8a + seg, 0x000a, memoryAGet16(0x1b8a + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b8aa
    memoryASet16(0x1b8b + seg, 0x000c, memoryAGet16(0x1b8b + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1b8bc
    memoryASet16(0x1b8c + seg, 0x000a, memoryAGet16(0x1b8c + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b8ca
    memoryASet16(0x1b8d + seg, 0x000a, memoryAGet16(0x1b8d + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b8da
    memoryASet16(0x1b8e + seg, 0x000c, memoryAGet16(0x1b8e + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1b8ec
    memoryASet16(0x1b8f + seg, 0x000a, memoryAGet16(0x1b8f + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b8fa
    memoryASet16(0x1b90 + seg, 0x000a, memoryAGet16(0x1b90 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b90a
    memoryASet16(0x1b91 + seg, 0x000c, memoryAGet16(0x1b91 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1b91c
    memoryASet16(0x1b92 + seg, 0x000a, memoryAGet16(0x1b92 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b92a
    memoryASet16(0x1b93 + seg, 0x000a, memoryAGet16(0x1b93 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b93a
    memoryASet16(0x1b94 + seg, 0x000c, memoryAGet16(0x1b94 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1b94c
    memoryASet16(0x1b95 + seg, 0x000a, memoryAGet16(0x1b95 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b95a
    memoryASet16(0x1b96 + seg, 0x000a, memoryAGet16(0x1b96 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b96a
    memoryASet16(0x1b97 + seg, 0x000c, memoryAGet16(0x1b97 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1b97c
    memoryASet16(0x1b98 + seg, 0x000a, memoryAGet16(0x1b98 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b98a
    memoryASet16(0x1b99 + seg, 0x000a, memoryAGet16(0x1b99 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b99a
    memoryASet16(0x1b9a + seg, 0x000c, memoryAGet16(0x1b9a + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1b9ac
    memoryASet16(0x1b9b + seg, 0x000a, memoryAGet16(0x1b9b + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b9ba
    memoryASet16(0x1b9c + seg, 0x000a, memoryAGet16(0x1b9c + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b9ca
    memoryASet16(0x1b9d + seg, 0x000c, memoryAGet16(0x1b9d + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1b9dc
    memoryASet16(0x1b9e + seg, 0x000a, memoryAGet16(0x1b9e + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b9ea
    memoryASet16(0x1b9f + seg, 0x000a, memoryAGet16(0x1b9f + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1b9fa
    memoryASet16(0x1ba0 + seg, 0x000c, memoryAGet16(0x1ba0 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1ba0c
    memoryASet16(0x1ba1 + seg, 0x000a, memoryAGet16(0x1ba1 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1ba1a
    memoryASet16(0x1ba2 + seg, 0x000a, memoryAGet16(0x1ba2 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1ba2a
    memoryASet16(0x1ba3 + seg, 0x000c, memoryAGet16(0x1ba3 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1ba3c
    memoryASet16(0x1ba4 + seg, 0x000a, memoryAGet16(0x1ba4 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1ba4a
    memoryASet16(0x1ba5 + seg, 0x000a, memoryAGet16(0x1ba5 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1ba5a
    memoryASet16(0x1ba6 + seg, 0x000c, memoryAGet16(0x1ba6 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1ba6c
    memoryASet16(0x1ba7 + seg, 0x000a, memoryAGet16(0x1ba7 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1ba7a
    memoryASet16(0x1ba8 + seg, 0x000a, memoryAGet16(0x1ba8 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1ba8a
    memoryASet16(0x1ba9 + seg, 0x000c, memoryAGet16(0x1ba9 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1ba9c
    memoryASet16(0x1baa + seg, 0x000a, memoryAGet16(0x1baa + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1baaa
    memoryASet16(0x1bab + seg, 0x000a, memoryAGet16(0x1bab + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1baba
    memoryASet16(0x1bac + seg, 0x000c, memoryAGet16(0x1bac + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1bacc
    memoryASet16(0x1bad + seg, 0x000a, memoryAGet16(0x1bad + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1bada
    memoryASet16(0x1bae + seg, 0x000a, memoryAGet16(0x1bae + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1baea
    memoryASet16(0x1baf + seg, 0x000c, memoryAGet16(0x1baf + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1bafc
    memoryASet16(0x1bb0 + seg, 0x000a, memoryAGet16(0x1bb0 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1bb0a
    memoryASet16(0x1bb1 + seg, 0x000a, memoryAGet16(0x1bb1 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1bb1a
    memoryASet16(0x1bb2 + seg, 0x000c, memoryAGet16(0x1bb2 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1bb2c
    memoryASet16(0x1bb3 + seg, 0x000a, memoryAGet16(0x1bb3 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1bb3a
    memoryASet16(0x1bb4 + seg, 0x000a, memoryAGet16(0x1bb4 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1bb4a
    memoryASet16(0x1bb5 + seg, 0x000c, memoryAGet16(0x1bb5 + seg, 0x000c) + seg); // 2890 -> 2a7d; lin=1bb5c
    memoryASet16(0x1bb6 + seg, 0x0006, memoryAGet16(0x1bb6 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1bb66
    memoryASet16(0x1bb7 + seg, 0x0005, memoryAGet16(0x1bb7 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1bb75
    memoryASet16(0x1bb8 + seg, 0x0003, memoryAGet16(0x1bb8 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1bb83
    memoryASet16(0x1bb9 + seg, 0x0001, memoryAGet16(0x1bb9 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1bb91
    memoryASet16(0x1bba + seg, 0x0001, memoryAGet16(0x1bba + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1bba1
    memoryASet16(0x1bbb + seg, 0x0003, memoryAGet16(0x1bbb + seg, 0x0003) + seg); // 2890 -> 2a7d; lin=1bbb3
    memoryASet16(0x1bbc + seg, 0x0001, memoryAGet16(0x1bbc + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1bbc1
    memoryASet16(0x1bbd + seg, 0x0001, memoryAGet16(0x1bbd + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1bbd1
    memoryASet16(0x1bbe + seg, 0x0003, memoryAGet16(0x1bbe + seg, 0x0003) + seg); // 2890 -> 2a7d; lin=1bbe3
    memoryASet16(0x1bbf + seg, 0x0001, memoryAGet16(0x1bbf + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1bbf1
    memoryASet16(0x1bc0 + seg, 0x0001, memoryAGet16(0x1bc0 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1bc01
    memoryASet16(0x1bc1 + seg, 0x0003, memoryAGet16(0x1bc1 + seg, 0x0003) + seg); // 2890 -> 2a7d; lin=1bc13
    memoryASet16(0x1bc1 + seg, 0x000d, memoryAGet16(0x1bc1 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1bc1d
    memoryASet16(0x1bc3 + seg, 0x000c, memoryAGet16(0x1bc3 + seg, 0x000c) + seg); // 29c2 -> 2baf; lin=1bc3c
    memoryASet16(0x1bea + seg, 0x0000, memoryAGet16(0x1bea + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1bea0
    memoryASet16(0x1beb + seg, 0x0005, memoryAGet16(0x1beb + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1beb5
    memoryASet16(0x1bec + seg, 0x0000, memoryAGet16(0x1bec + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1bec0
    memoryASet16(0x1bec + seg, 0x000a, memoryAGet16(0x1bec + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1beca
    memoryASet16(0x1bec + seg, 0x000f, memoryAGet16(0x1bec + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1becf
    memoryASet16(0x1bed + seg, 0x000d, memoryAGet16(0x1bed + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1bedd
    memoryASet16(0x1bee + seg, 0x000c, memoryAGet16(0x1bee + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1beec
    memoryASet16(0x1bef + seg, 0x0009, memoryAGet16(0x1bef + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1bef9
    memoryASet16(0x1bf3 + seg, 0x000a, memoryAGet16(0x1bf3 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1bf3a
    memoryASet16(0x1bf5 + seg, 0x0000, memoryAGet16(0x1bf5 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1bf50
    memoryASet16(0x1bf5 + seg, 0x000b, memoryAGet16(0x1bf5 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1bf5b
    memoryASet16(0x1bf6 + seg, 0x0005, memoryAGet16(0x1bf6 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1bf65
    memoryASet16(0x1bf6 + seg, 0x000a, memoryAGet16(0x1bf6 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1bf6a
    memoryASet16(0x1bf7 + seg, 0x0009, memoryAGet16(0x1bf7 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1bf79
    memoryASet16(0x1bf7 + seg, 0x000e, memoryAGet16(0x1bf7 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1bf7e
    memoryASet16(0x1bf9 + seg, 0x000b, memoryAGet16(0x1bf9 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1bf9b
    memoryASet16(0x1bfa + seg, 0x0000, memoryAGet16(0x1bfa + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1bfa0
    memoryASet16(0x1bfc + seg, 0x0008, memoryAGet16(0x1bfc + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1bfc8
    memoryASet16(0x1bfd + seg, 0x0006, memoryAGet16(0x1bfd + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1bfd6
    memoryASet16(0x1ce2 + seg, 0x0002, memoryAGet16(0x1ce2 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1ce22
    memoryASet16(0x1ce4 + seg, 0x0003, memoryAGet16(0x1ce4 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1ce43
    memoryASet16(0x1ce6 + seg, 0x0004, memoryAGet16(0x1ce6 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1ce64
    memoryASet16(0x1ce8 + seg, 0x0005, memoryAGet16(0x1ce8 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1ce85
    memoryASet16(0x1ceb + seg, 0x0008, memoryAGet16(0x1ceb + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1ceb8
    memoryASet16(0x1ced + seg, 0x0009, memoryAGet16(0x1ced + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1ced9
    memoryASet16(0x1cef + seg, 0x000a, memoryAGet16(0x1cef + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1cefa
    memoryASet16(0x1cf2 + seg, 0x000d, memoryAGet16(0x1cf2 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1cf2d
    memoryASet16(0x1cf6 + seg, 0x0000, memoryAGet16(0x1cf6 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1cf60
    memoryASet16(0x1cf8 + seg, 0x0001, memoryAGet16(0x1cf8 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1cf81
    memoryASet16(0x1cfa + seg, 0x0002, memoryAGet16(0x1cfa + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1cfa2
    memoryASet16(0x1cfd + seg, 0x0005, memoryAGet16(0x1cfd + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1cfd5
    memoryASet16(0x1cff + seg, 0x0006, memoryAGet16(0x1cff + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1cff6
    memoryASet16(0x1d01 + seg, 0x0007, memoryAGet16(0x1d01 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1d017
    memoryASet16(0x1d03 + seg, 0x0008, memoryAGet16(0x1d03 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1d038
    memoryASet16(0x1d06 + seg, 0x000b, memoryAGet16(0x1d06 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1d06b
    memoryASet16(0x1d08 + seg, 0x000c, memoryAGet16(0x1d08 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1d08c
    memoryASet16(0x1d0a + seg, 0x000d, memoryAGet16(0x1d0a + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1d0ad
    memoryASet16(0x1d0c + seg, 0x000e, memoryAGet16(0x1d0c + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1d0ce
    memoryASet16(0x1d0e + seg, 0x000f, memoryAGet16(0x1d0e + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1d0ef
    memoryASet16(0x1d11 + seg, 0x0000, memoryAGet16(0x1d11 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1d110
    memoryASet16(0x1d13 + seg, 0x0001, memoryAGet16(0x1d13 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1d131
    memoryASet16(0x1d15 + seg, 0x0002, memoryAGet16(0x1d15 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1d152
    memoryASet16(0x1d17 + seg, 0x0003, memoryAGet16(0x1d17 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1d173
    memoryASet16(0x1d19 + seg, 0x0004, memoryAGet16(0x1d19 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1d194
    memoryASet16(0x1d1d + seg, 0x0009, memoryAGet16(0x1d1d + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1d1d9
    memoryASet16(0x1d1f + seg, 0x000a, memoryAGet16(0x1d1f + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1d1fa
    memoryASet16(0x1d21 + seg, 0x000b, memoryAGet16(0x1d21 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1d21b
    memoryASet16(0x1d23 + seg, 0x000c, memoryAGet16(0x1d23 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1d23c
    memoryASet16(0x1d26 + seg, 0x000f, memoryAGet16(0x1d26 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1d26f
    memoryASet16(0x1d2a + seg, 0x0002, memoryAGet16(0x1d2a + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1d2a2
    memoryASet16(0x1d2d + seg, 0x0005, memoryAGet16(0x1d2d + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1d2d5
    memoryASet16(0x1d30 + seg, 0x0008, memoryAGet16(0x1d30 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1d308
    memoryASet16(0x1d33 + seg, 0x000b, memoryAGet16(0x1d33 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1d33b
    memoryASet16(0x1d39 + seg, 0x0002, memoryAGet16(0x1d39 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1d392
    memoryASet16(0x1d3b + seg, 0x0003, memoryAGet16(0x1d3b + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1d3b3
    memoryASet16(0x1d3d + seg, 0x0004, memoryAGet16(0x1d3d + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1d3d4
    memoryASet16(0x1d3f + seg, 0x0005, memoryAGet16(0x1d3f + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1d3f5
    memoryASet16(0x1d42 + seg, 0x0008, memoryAGet16(0x1d42 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1d428
    memoryASet16(0x1d45 + seg, 0x000b, memoryAGet16(0x1d45 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1d45b
    memoryASet16(0x1d47 + seg, 0x000c, memoryAGet16(0x1d47 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1d47c
    memoryASet16(0x1d49 + seg, 0x000d, memoryAGet16(0x1d49 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1d49d
    memoryASet16(0x1d4d + seg, 0x0000, memoryAGet16(0x1d4d + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1d4d0
    memoryASet16(0x1d50 + seg, 0x0003, memoryAGet16(0x1d50 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1d503
    memoryASet16(0x1d52 + seg, 0x0004, memoryAGet16(0x1d52 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1d524
    memoryASet16(0x1d56 + seg, 0x0009, memoryAGet16(0x1d56 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1d569
    memoryASet16(0x1d58 + seg, 0x000a, memoryAGet16(0x1d58 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1d58a
    memoryASet16(0x1d5a + seg, 0x000b, memoryAGet16(0x1d5a + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1d5ab
    memoryASet16(0x1d5c + seg, 0x000c, memoryAGet16(0x1d5c + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1d5cc
    memoryASet16(0x1d5f + seg, 0x000f, memoryAGet16(0x1d5f + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1d5ff
    memoryASet16(0x1d63 + seg, 0x0002, memoryAGet16(0x1d63 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1d632
    memoryASet16(0x1d67 + seg, 0x0007, memoryAGet16(0x1d67 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1d677
    memoryASet16(0x1d6b + seg, 0x000c, memoryAGet16(0x1d6b + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1d6bc
    memoryASet16(0x1d6e + seg, 0x000f, memoryAGet16(0x1d6e + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1d6ef
    memoryASet16(0x1d71 + seg, 0x0000, memoryAGet16(0x1d71 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1d710
    memoryASet16(0x1d73 + seg, 0x0001, memoryAGet16(0x1d73 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1d731
    memoryASet16(0x1d75 + seg, 0x0002, memoryAGet16(0x1d75 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1d752
    memoryASet16(0x1d77 + seg, 0x0003, memoryAGet16(0x1d77 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1d773
    memoryASet16(0x1d79 + seg, 0x0004, memoryAGet16(0x1d79 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1d794
    memoryASet16(0x1d7c + seg, 0x0007, memoryAGet16(0x1d7c + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1d7c7
    memoryASet16(0x1d7e + seg, 0x0008, memoryAGet16(0x1d7e + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1d7e8
    memoryASet16(0x1d80 + seg, 0x0009, memoryAGet16(0x1d80 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1d809
    memoryASet16(0x1d83 + seg, 0x000c, memoryAGet16(0x1d83 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1d83c
    memoryASet16(0x1d86 + seg, 0x000f, memoryAGet16(0x1d86 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1d86f
    memoryASet16(0x1d8a + seg, 0x0002, memoryAGet16(0x1d8a + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1d8a2
    memoryASet16(0x1d8c + seg, 0x0003, memoryAGet16(0x1d8c + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1d8c3
    memoryASet16(0x1d90 + seg, 0x0008, memoryAGet16(0x1d90 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1d908
    memoryASet16(0x1d92 + seg, 0x0009, memoryAGet16(0x1d92 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1d929
    memoryASet16(0x1d94 + seg, 0x000a, memoryAGet16(0x1d94 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1d94a
    memoryASet16(0x1d96 + seg, 0x000b, memoryAGet16(0x1d96 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1d96b
    memoryASet16(0x1d99 + seg, 0x000e, memoryAGet16(0x1d99 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1d99e
    memoryASet16(0x1d9d + seg, 0x0001, memoryAGet16(0x1d9d + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1d9d1
    memoryASet16(0x1da0 + seg, 0x0004, memoryAGet16(0x1da0 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1da04
    memoryASet16(0x1da3 + seg, 0x0007, memoryAGet16(0x1da3 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1da37
    memoryASet16(0x1da6 + seg, 0x000a, memoryAGet16(0x1da6 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1da6a
    memoryASet16(0x1da8 + seg, 0x000b, memoryAGet16(0x1da8 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1da8b
    memoryASet16(0x1dad + seg, 0x0000, memoryAGet16(0x1dad + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1dad0
    memoryASet16(0x1daf + seg, 0x0001, memoryAGet16(0x1daf + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1daf1
    memoryASet16(0x1db1 + seg, 0x0002, memoryAGet16(0x1db1 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1db12
    memoryASet16(0x1db3 + seg, 0x0003, memoryAGet16(0x1db3 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1db33
    memoryASet16(0x1db6 + seg, 0x0006, memoryAGet16(0x1db6 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1db66
    memoryASet16(0x1db8 + seg, 0x0007, memoryAGet16(0x1db8 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1db87
    memoryASet16(0x1dba + seg, 0x0008, memoryAGet16(0x1dba + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1dba8
    memoryASet16(0x1dbc + seg, 0x0009, memoryAGet16(0x1dbc + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1dbc9
    memoryASet16(0x1dbf + seg, 0x000c, memoryAGet16(0x1dbf + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1dbfc
    memoryASet16(0x1dc1 + seg, 0x000d, memoryAGet16(0x1dc1 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1dc1d
    memoryASet16(0x1dc5 + seg, 0x0000, memoryAGet16(0x1dc5 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1dc50
    memoryASet16(0x1dc7 + seg, 0x0001, memoryAGet16(0x1dc7 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1dc71
    memoryASet16(0x1dc9 + seg, 0x0002, memoryAGet16(0x1dc9 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1dc92
    memoryASet16(0x1dcc + seg, 0x0005, memoryAGet16(0x1dcc + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1dcc5
    memoryASet16(0x1dce + seg, 0x0006, memoryAGet16(0x1dce + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1dce6
    memoryASet16(0x1dd0 + seg, 0x0007, memoryAGet16(0x1dd0 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1dd07
    memoryASet16(0x1dd2 + seg, 0x0008, memoryAGet16(0x1dd2 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1dd28
    memoryASet16(0x1dd5 + seg, 0x000b, memoryAGet16(0x1dd5 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1dd5b
    memoryASet16(0x1dd7 + seg, 0x000c, memoryAGet16(0x1dd7 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1dd7c
    memoryASet16(0x1dda + seg, 0x000f, memoryAGet16(0x1dda + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1ddaf
    memoryASet16(0x1ddd + seg, 0x0000, memoryAGet16(0x1ddd + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1ddd0
    memoryASet16(0x1de0 + seg, 0x0003, memoryAGet16(0x1de0 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1de03
    memoryASet16(0x1de2 + seg, 0x0004, memoryAGet16(0x1de2 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1de24
    memoryASet16(0x1de5 + seg, 0x0007, memoryAGet16(0x1de5 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1de57
    memoryASet16(0x1de7 + seg, 0x0008, memoryAGet16(0x1de7 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1de78
    memoryASet16(0x1de9 + seg, 0x0009, memoryAGet16(0x1de9 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1de99
    memoryASet16(0x1deb + seg, 0x000a, memoryAGet16(0x1deb + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1deba
    memoryASet16(0x1ded + seg, 0x000b, memoryAGet16(0x1ded + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1dedb
    memoryASet16(0x1def + seg, 0x000c, memoryAGet16(0x1def + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1defc
    memoryASet16(0x1df1 + seg, 0x000d, memoryAGet16(0x1df1 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1df1d
    memoryASet16(0x1df5 + seg, 0x0000, memoryAGet16(0x1df5 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1df50
    memoryASet16(0x1df7 + seg, 0x0001, memoryAGet16(0x1df7 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1df71
    memoryASet16(0x1dfa + seg, 0x0004, memoryAGet16(0x1dfa + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1dfa4
    memoryASet16(0x1dfc + seg, 0x0005, memoryAGet16(0x1dfc + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1dfc5
    memoryASet16(0x1dff + seg, 0x0008, memoryAGet16(0x1dff + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1dff8
    memoryASet16(0x1e01 + seg, 0x0009, memoryAGet16(0x1e01 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1e019
    memoryASet16(0x1e03 + seg, 0x000a, memoryAGet16(0x1e03 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1e03a
    memoryASet16(0x1e05 + seg, 0x000b, memoryAGet16(0x1e05 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1e05b
    memoryASet16(0x1e07 + seg, 0x000c, memoryAGet16(0x1e07 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1e07c
    memoryASet16(0x1e0a + seg, 0x000f, memoryAGet16(0x1e0a + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1e0af
    memoryASet16(0x1e0d + seg, 0x0000, memoryAGet16(0x1e0d + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1e0d0
    memoryASet16(0x1e0f + seg, 0x0001, memoryAGet16(0x1e0f + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1e0f1
    memoryASet16(0x1e11 + seg, 0x0002, memoryAGet16(0x1e11 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1e112
    memoryASet16(0x1e14 + seg, 0x0005, memoryAGet16(0x1e14 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1e145
    memoryASet16(0x1e16 + seg, 0x0006, memoryAGet16(0x1e16 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1e166
    memoryASet16(0x1e18 + seg, 0x0007, memoryAGet16(0x1e18 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1e187
    memoryASet16(0x1e1c + seg, 0x000c, memoryAGet16(0x1e1c + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1e1cc
    memoryASet16(0x1e1e + seg, 0x000d, memoryAGet16(0x1e1e + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1e1ed
    memoryASet16(0x1e20 + seg, 0x000e, memoryAGet16(0x1e20 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1e20e
    memoryASet16(0x1e25 + seg, 0x0003, memoryAGet16(0x1e25 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1e253
    memoryASet16(0x1e27 + seg, 0x0004, memoryAGet16(0x1e27 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1e274
    memoryASet16(0x1e29 + seg, 0x0005, memoryAGet16(0x1e29 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1e295
    memoryASet16(0x1e2b + seg, 0x0006, memoryAGet16(0x1e2b + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1e2b6
    memoryASet16(0x1e2d + seg, 0x0007, memoryAGet16(0x1e2d + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1e2d7
    memoryASet16(0x1e2f + seg, 0x0008, memoryAGet16(0x1e2f + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1e2f8
    memoryASet16(0x1e32 + seg, 0x000b, memoryAGet16(0x1e32 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1e32b
    memoryASet16(0x1e34 + seg, 0x000c, memoryAGet16(0x1e34 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1e34c
    memoryASet16(0x1e36 + seg, 0x000d, memoryAGet16(0x1e36 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1e36d
    memoryASet16(0x1e38 + seg, 0x000e, memoryAGet16(0x1e38 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1e38e
    memoryASet16(0x1e3a + seg, 0x000f, memoryAGet16(0x1e3a + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1e3af
    memoryASet16(0x1e3e + seg, 0x0002, memoryAGet16(0x1e3e + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1e3e2
    memoryASet16(0x1e40 + seg, 0x0003, memoryAGet16(0x1e40 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1e403
    memoryASet16(0x1e42 + seg, 0x0004, memoryAGet16(0x1e42 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1e424
    memoryASet16(0x1e44 + seg, 0x0005, memoryAGet16(0x1e44 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1e445
    memoryASet16(0x1e46 + seg, 0x0006, memoryAGet16(0x1e46 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1e466
    memoryASet16(0x1e48 + seg, 0x0007, memoryAGet16(0x1e48 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1e487
    memoryASet16(0x1e4a + seg, 0x0008, memoryAGet16(0x1e4a + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1e4a8
    memoryASet16(0x1e4c + seg, 0x0009, memoryAGet16(0x1e4c + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1e4c9
    memoryASet16(0x1e4e + seg, 0x000a, memoryAGet16(0x1e4e + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1e4ea
    memoryASet16(0x1e50 + seg, 0x000b, memoryAGet16(0x1e50 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1e50b
    memoryASet16(0x1e53 + seg, 0x000e, memoryAGet16(0x1e53 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1e53e
    memoryASet16(0x1e57 + seg, 0x0001, memoryAGet16(0x1e57 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1e571
    memoryASet16(0x1e59 + seg, 0x0002, memoryAGet16(0x1e59 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1e592
    memoryASet16(0x1e5c + seg, 0x0005, memoryAGet16(0x1e5c + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1e5c5
    memoryASet16(0x1e5e + seg, 0x0006, memoryAGet16(0x1e5e + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1e5e6
    memoryASet16(0x1e61 + seg, 0x0009, memoryAGet16(0x1e61 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1e619
    memoryASet16(0x1e63 + seg, 0x000a, memoryAGet16(0x1e63 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1e63a
    memoryASet16(0x1e65 + seg, 0x000b, memoryAGet16(0x1e65 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1e65b
    memoryASet16(0x1e68 + seg, 0x000e, memoryAGet16(0x1e68 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1e68e
    memoryASet16(0x1e6a + seg, 0x000f, memoryAGet16(0x1e6a + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1e6af
    memoryASet16(0x1e6d + seg, 0x0000, memoryAGet16(0x1e6d + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1e6d0
    memoryASet16(0x1e6f + seg, 0x0001, memoryAGet16(0x1e6f + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1e6f1
    memoryASet16(0x1e72 + seg, 0x0004, memoryAGet16(0x1e72 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1e724
    memoryASet16(0x1e74 + seg, 0x0005, memoryAGet16(0x1e74 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1e745
    memoryASet16(0x1e76 + seg, 0x0006, memoryAGet16(0x1e76 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1e766
    memoryASet16(0x1e78 + seg, 0x0007, memoryAGet16(0x1e78 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1e787
    memoryASet16(0x1e7a + seg, 0x0008, memoryAGet16(0x1e7a + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1e7a8
    memoryASet16(0x1e7d + seg, 0x000b, memoryAGet16(0x1e7d + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1e7db
    memoryASet16(0x1e7f + seg, 0x000c, memoryAGet16(0x1e7f + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1e7fc
    memoryASet16(0x1e82 + seg, 0x000f, memoryAGet16(0x1e82 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1e82f
    memoryASet16(0x1e86 + seg, 0x0002, memoryAGet16(0x1e86 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1e862
    memoryASet16(0x1e88 + seg, 0x0003, memoryAGet16(0x1e88 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1e883
    memoryASet16(0x1e8a + seg, 0x0004, memoryAGet16(0x1e8a + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1e8a4
    memoryASet16(0x1e8c + seg, 0x0005, memoryAGet16(0x1e8c + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1e8c5
    memoryASet16(0x1ee6 + seg, 0x0004, memoryAGet16(0x1ee6 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1ee64
    memoryASet16(0x1ee8 + seg, 0x0005, memoryAGet16(0x1ee8 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1ee85
    memoryASet16(0x1eeb + seg, 0x0008, memoryAGet16(0x1eeb + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1eeb8
    memoryASet16(0x1eed + seg, 0x0009, memoryAGet16(0x1eed + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1eed9
    memoryASet16(0x1ef0 + seg, 0x000c, memoryAGet16(0x1ef0 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1ef0c
    memoryASet16(0x1ef3 + seg, 0x000f, memoryAGet16(0x1ef3 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1ef3f
    memoryASet16(0x1ef6 + seg, 0x0000, memoryAGet16(0x1ef6 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1ef60
    memoryASet16(0x1ef8 + seg, 0x0001, memoryAGet16(0x1ef8 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1ef81
    memoryASet16(0x1efa + seg, 0x0002, memoryAGet16(0x1efa + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1efa2
    memoryASet16(0x1efc + seg, 0x0003, memoryAGet16(0x1efc + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1efc3
    memoryASet16(0x1efe + seg, 0x0004, memoryAGet16(0x1efe + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1efe4
    memoryASet16(0x1f00 + seg, 0x0005, memoryAGet16(0x1f00 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1f005
    memoryASet16(0x1f02 + seg, 0x0006, memoryAGet16(0x1f02 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1f026
    memoryASet16(0x1f04 + seg, 0x0007, memoryAGet16(0x1f04 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1f047
    memoryASet16(0x1f06 + seg, 0x0008, memoryAGet16(0x1f06 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1f068
    memoryASet16(0x1f08 + seg, 0x0009, memoryAGet16(0x1f08 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1f089
    memoryASet16(0x1f0b + seg, 0x000c, memoryAGet16(0x1f0b + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1f0bc
    memoryASet16(0x1f0d + seg, 0x000d, memoryAGet16(0x1f0d + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1f0dd
    memoryASet16(0x1f0f + seg, 0x000e, memoryAGet16(0x1f0f + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1f0fe
    memoryASet16(0x1f11 + seg, 0x000f, memoryAGet16(0x1f11 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1f11f
    memoryASet16(0x1f14 + seg, 0x0000, memoryAGet16(0x1f14 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1f140
    memoryASet16(0x1f17 + seg, 0x0003, memoryAGet16(0x1f17 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1f173
    memoryASet16(0x1f19 + seg, 0x0004, memoryAGet16(0x1f19 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1f194
    memoryASet16(0x1f1b + seg, 0x0005, memoryAGet16(0x1f1b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1f1b5
    memoryASet16(0x1f1d + seg, 0x0006, memoryAGet16(0x1f1d + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1f1d6
    memoryASet16(0x1f1f + seg, 0x0007, memoryAGet16(0x1f1f + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1f1f7
    memoryASet16(0x1f21 + seg, 0x0008, memoryAGet16(0x1f21 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1f218
    memoryASet16(0x1f23 + seg, 0x0009, memoryAGet16(0x1f23 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1f239
    memoryASet16(0x1f25 + seg, 0x000a, memoryAGet16(0x1f25 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1f25a
    memoryASet16(0x1f27 + seg, 0x000b, memoryAGet16(0x1f27 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1f27b
    memoryASet16(0x1f29 + seg, 0x000c, memoryAGet16(0x1f29 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1f29c
    memoryASet16(0x1f2c + seg, 0x000f, memoryAGet16(0x1f2c + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1f2cf
    memoryASet16(0x1f2f + seg, 0x0000, memoryAGet16(0x1f2f + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1f2f0
    memoryASet16(0x1f31 + seg, 0x0001, memoryAGet16(0x1f31 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1f311
    memoryASet16(0x1f33 + seg, 0x0002, memoryAGet16(0x1f33 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1f332
    memoryASet16(0x1f35 + seg, 0x0003, memoryAGet16(0x1f35 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1f353
    memoryASet16(0x1f37 + seg, 0x0004, memoryAGet16(0x1f37 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1f374
    memoryASet16(0x1f3a + seg, 0x0007, memoryAGet16(0x1f3a + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1f3a7
    memoryASet16(0x1f3c + seg, 0x0008, memoryAGet16(0x1f3c + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1f3c8
    memoryASet16(0x1f3e + seg, 0x0009, memoryAGet16(0x1f3e + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1f3e9
    memoryASet16(0x1f40 + seg, 0x000a, memoryAGet16(0x1f40 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1f40a
    memoryASet16(0x1f42 + seg, 0x000b, memoryAGet16(0x1f42 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1f42b
    memoryASet16(0x1f44 + seg, 0x000c, memoryAGet16(0x1f44 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1f44c
    memoryASet16(0x1f46 + seg, 0x000d, memoryAGet16(0x1f46 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1f46d
    memoryASet16(0x1f48 + seg, 0x000e, memoryAGet16(0x1f48 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1f48e
    memoryASet16(0x1f4a + seg, 0x000f, memoryAGet16(0x1f4a + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1f4af
    memoryASet16(0x1f4e + seg, 0x0002, memoryAGet16(0x1f4e + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1f4e2
    memoryASet16(0x1f50 + seg, 0x0003, memoryAGet16(0x1f50 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1f503
    memoryASet16(0x1f52 + seg, 0x0004, memoryAGet16(0x1f52 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1f524
    memoryASet16(0x1f54 + seg, 0x0005, memoryAGet16(0x1f54 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1f545
    memoryASet16(0x1f56 + seg, 0x0006, memoryAGet16(0x1f56 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1f566
    memoryASet16(0x1f58 + seg, 0x0007, memoryAGet16(0x1f58 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1f587
    memoryASet16(0x1f5a + seg, 0x0008, memoryAGet16(0x1f5a + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1f5a8
    memoryASet16(0x1f5c + seg, 0x0009, memoryAGet16(0x1f5c + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1f5c9
    memoryASet16(0x1f5f + seg, 0x000c, memoryAGet16(0x1f5f + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1f5fc
    memoryASet16(0x1f61 + seg, 0x000d, memoryAGet16(0x1f61 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1f61d
    memoryASet16(0x1f63 + seg, 0x000e, memoryAGet16(0x1f63 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1f63e
    memoryASet16(0x1f65 + seg, 0x000f, memoryAGet16(0x1f65 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1f65f
    memoryASet16(0x1f68 + seg, 0x0000, memoryAGet16(0x1f68 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1f680
    memoryASet16(0x1f6a + seg, 0x0001, memoryAGet16(0x1f6a + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1f6a1
    memoryASet16(0x1fbd + seg, 0x0002, memoryAGet16(0x1fbd + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1fbd2
    memoryASet16(0x1fbf + seg, 0x0003, memoryAGet16(0x1fbf + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1fbf3
    memoryASet16(0x1fc2 + seg, 0x0006, memoryAGet16(0x1fc2 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1fc26
    memoryASet16(0x1fc4 + seg, 0x0007, memoryAGet16(0x1fc4 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=1fc47
    memoryASet16(0x1fc6 + seg, 0x0008, memoryAGet16(0x1fc6 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=1fc68
    memoryASet16(0x1fc8 + seg, 0x0009, memoryAGet16(0x1fc8 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1fc89
    memoryASet16(0x1fcb + seg, 0x000c, memoryAGet16(0x1fcb + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1fcbc
    memoryASet16(0x1fcd + seg, 0x000d, memoryAGet16(0x1fcd + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1fcdd
    memoryASet16(0x1fcf + seg, 0x000e, memoryAGet16(0x1fcf + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=1fcfe
    memoryASet16(0x1fd1 + seg, 0x000f, memoryAGet16(0x1fd1 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=1fd1f
    memoryASet16(0x1fd4 + seg, 0x0000, memoryAGet16(0x1fd4 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=1fd40
    memoryASet16(0x1fd6 + seg, 0x0001, memoryAGet16(0x1fd6 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1fd61
    memoryASet16(0x1fd8 + seg, 0x0002, memoryAGet16(0x1fd8 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=1fd82
    memoryASet16(0x1fda + seg, 0x0003, memoryAGet16(0x1fda + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=1fda3
    memoryASet16(0x1fdc + seg, 0x0004, memoryAGet16(0x1fdc + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1fdc4
    memoryASet16(0x1fde + seg, 0x0005, memoryAGet16(0x1fde + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1fde5
    memoryASet16(0x1fe0 + seg, 0x0006, memoryAGet16(0x1fe0 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=1fe06
    memoryASet16(0x1fe3 + seg, 0x0009, memoryAGet16(0x1fe3 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=1fe39
    memoryASet16(0x1fe5 + seg, 0x000a, memoryAGet16(0x1fe5 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1fe5a
    memoryASet16(0x1fe7 + seg, 0x000b, memoryAGet16(0x1fe7 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1fe7b
    memoryASet16(0x1fe9 + seg, 0x000c, memoryAGet16(0x1fe9 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1fe9c
    memoryASet16(0x1fee + seg, 0x0001, memoryAGet16(0x1fee + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=1fee1
    memoryASet16(0x1ff1 + seg, 0x0004, memoryAGet16(0x1ff1 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=1ff14
    memoryASet16(0x1ff3 + seg, 0x0005, memoryAGet16(0x1ff3 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=1ff35
    memoryASet16(0x1ff7 + seg, 0x000a, memoryAGet16(0x1ff7 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=1ff7a
    memoryASet16(0x1ff9 + seg, 0x000b, memoryAGet16(0x1ff9 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=1ff9b
    memoryASet16(0x1ffb + seg, 0x000c, memoryAGet16(0x1ffb + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=1ffbc
    memoryASet16(0x1ffd + seg, 0x000d, memoryAGet16(0x1ffd + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=1ffdd
    memoryASet16(0x2001 + seg, 0x0000, memoryAGet16(0x2001 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20010
    memoryASet16(0x2003 + seg, 0x0001, memoryAGet16(0x2003 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=20031
    memoryASet16(0x2005 + seg, 0x0002, memoryAGet16(0x2005 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20052
    memoryASet16(0x2007 + seg, 0x0003, memoryAGet16(0x2007 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=20073
    memoryASet16(0x2009 + seg, 0x0004, memoryAGet16(0x2009 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=20094
    memoryASet16(0x200b + seg, 0x0005, memoryAGet16(0x200b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=200b5
    memoryASet16(0x200e + seg, 0x0008, memoryAGet16(0x200e + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=200e8
    memoryASet16(0x2010 + seg, 0x0009, memoryAGet16(0x2010 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=20109
    memoryASet16(0x2012 + seg, 0x000a, memoryAGet16(0x2012 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2012a
    memoryASet16(0x2015 + seg, 0x000d, memoryAGet16(0x2015 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2015d
    memoryASet16(0x2017 + seg, 0x000e, memoryAGet16(0x2017 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=2017e
    memoryASet16(0x2019 + seg, 0x000f, memoryAGet16(0x2019 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2019f
    memoryASet16(0x201c + seg, 0x0000, memoryAGet16(0x201c + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=201c0
    memoryASet16(0x201e + seg, 0x0001, memoryAGet16(0x201e + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=201e1
    memoryASet16(0x2021 + seg, 0x0004, memoryAGet16(0x2021 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=20214
    memoryASet16(0x2023 + seg, 0x0005, memoryAGet16(0x2023 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=20235
    memoryASet16(0x2025 + seg, 0x0006, memoryAGet16(0x2025 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=20256
    memoryASet16(0x2028 + seg, 0x0009, memoryAGet16(0x2028 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=20289
    memoryASet16(0x202b + seg, 0x000c, memoryAGet16(0x202b + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=202bc
    memoryASet16(0x202d + seg, 0x000d, memoryAGet16(0x202d + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=202dd
    memoryASet16(0x202f + seg, 0x000e, memoryAGet16(0x202f + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=202fe
    memoryASet16(0x2033 + seg, 0x0001, memoryAGet16(0x2033 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=20331
    memoryASet16(0x2035 + seg, 0x0002, memoryAGet16(0x2035 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20352
    memoryASet16(0x2037 + seg, 0x0003, memoryAGet16(0x2037 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=20373
    memoryASet16(0x2039 + seg, 0x0004, memoryAGet16(0x2039 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=20394
    memoryASet16(0x203b + seg, 0x0005, memoryAGet16(0x203b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=203b5
    memoryASet16(0x2043 + seg, 0x000a, memoryAGet16(0x2043 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2043a
    memoryASet16(0x2045 + seg, 0x0002, memoryAGet16(0x2045 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20452
    memoryASet16(0x2046 + seg, 0x000a, memoryAGet16(0x2046 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2046a
    memoryASet16(0x2047 + seg, 0x000d, memoryAGet16(0x2047 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2047d
    memoryASet16(0x2049 + seg, 0x0009, memoryAGet16(0x2049 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=20499
    memoryASet16(0x2053 + seg, 0x0000, memoryAGet16(0x2053 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20530
    memoryASet16(0x2053 + seg, 0x000a, memoryAGet16(0x2053 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2053a
    memoryASet16(0x2054 + seg, 0x0008, memoryAGet16(0x2054 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=20548
    memoryASet16(0x2055 + seg, 0x0008, memoryAGet16(0x2055 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=20558
    memoryASet16(0x2056 + seg, 0x0002, memoryAGet16(0x2056 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20562
    memoryASet16(0x2057 + seg, 0x0000, memoryAGet16(0x2057 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20570
    memoryASet16(0x2058 + seg, 0x0000, memoryAGet16(0x2058 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20580
    memoryASet16(0x2058 + seg, 0x000a, memoryAGet16(0x2058 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2058a
    memoryASet16(0x2059 + seg, 0x0008, memoryAGet16(0x2059 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=20598
    memoryASet16(0x205a + seg, 0x0008, memoryAGet16(0x205a + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=205a8
    memoryASet16(0x205b + seg, 0x0002, memoryAGet16(0x205b + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=205b2
    memoryASet16(0x205c + seg, 0x0000, memoryAGet16(0x205c + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=205c0
    memoryASet16(0x205d + seg, 0x0000, memoryAGet16(0x205d + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=205d0
    memoryASet16(0x205d + seg, 0x000a, memoryAGet16(0x205d + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=205da
    memoryASet16(0x205e + seg, 0x0008, memoryAGet16(0x205e + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=205e8
    memoryASet16(0x205f + seg, 0x0008, memoryAGet16(0x205f + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=205f8
    memoryASet16(0x2060 + seg, 0x0002, memoryAGet16(0x2060 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20602
    memoryASet16(0x2061 + seg, 0x0000, memoryAGet16(0x2061 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20610
    memoryASet16(0x2062 + seg, 0x0003, memoryAGet16(0x2062 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=20623
    memoryASet16(0x2063 + seg, 0x000b, memoryAGet16(0x2063 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2063b
    memoryASet16(0x2064 + seg, 0x000e, memoryAGet16(0x2064 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=2064e
    memoryASet16(0x2066 + seg, 0x0001, memoryAGet16(0x2066 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=20661
    memoryASet16(0x2067 + seg, 0x0004, memoryAGet16(0x2067 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=20674
    memoryASet16(0x2068 + seg, 0x0007, memoryAGet16(0x2068 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=20687
    memoryASet16(0x2069 + seg, 0x000a, memoryAGet16(0x2069 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2069a
    memoryASet16(0x206b + seg, 0x0002, memoryAGet16(0x206b + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=206b2
    memoryASet16(0x206c + seg, 0x000a, memoryAGet16(0x206c + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=206ca
    memoryASet16(0x207a + seg, 0x0008, memoryAGet16(0x207a + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=207a8
    memoryASet16(0x207c + seg, 0x0000, memoryAGet16(0x207c + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=207c0
    memoryASet16(0x207d + seg, 0x0008, memoryAGet16(0x207d + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=207d8
    memoryASet16(0x207e + seg, 0x000b, memoryAGet16(0x207e + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=207eb
    memoryASet16(0x208d + seg, 0x000f, memoryAGet16(0x208d + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=208df
    memoryASet16(0x208f + seg, 0x0007, memoryAGet16(0x208f + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=208f7
    memoryASet16(0x2090 + seg, 0x000a, memoryAGet16(0x2090 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2090a
    memoryASet16(0x2093 + seg, 0x000b, memoryAGet16(0x2093 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2093b
    memoryASet16(0x2095 + seg, 0x0000, memoryAGet16(0x2095 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20950
    memoryASet16(0x2098 + seg, 0x0008, memoryAGet16(0x2098 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=20988
    memoryASet16(0x209a + seg, 0x0000, memoryAGet16(0x209a + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=209a0
    memoryASet16(0x209b + seg, 0x0003, memoryAGet16(0x209b + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=209b3
    memoryASet16(0x209e + seg, 0x0009, memoryAGet16(0x209e + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=209e9
    memoryASet16(0x209f + seg, 0x000e, memoryAGet16(0x209f + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=209fe
    memoryASet16(0x20a0 + seg, 0x000f, memoryAGet16(0x20a0 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=20a0f
    memoryASet16(0x20a4 + seg, 0x0007, memoryAGet16(0x20a4 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=20a47
    memoryASet16(0x20a5 + seg, 0x000f, memoryAGet16(0x20a5 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=20a5f
    memoryASet16(0x20a7 + seg, 0x0002, memoryAGet16(0x20a7 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20a72
    memoryASet16(0x20aa + seg, 0x0008, memoryAGet16(0x20aa + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=20aa8
    memoryASet16(0x20ab + seg, 0x000d, memoryAGet16(0x20ab + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=20abd
    memoryASet16(0x20ac + seg, 0x000e, memoryAGet16(0x20ac + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=20ace
    memoryASet16(0x20ad + seg, 0x000f, memoryAGet16(0x20ad + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=20adf
    memoryASet16(0x20b1 + seg, 0x0007, memoryAGet16(0x20b1 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=20b17
    memoryASet16(0x20b2 + seg, 0x000f, memoryAGet16(0x20b2 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=20b2f
    memoryASet16(0x20b4 + seg, 0x0002, memoryAGet16(0x20b4 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20b42
    memoryASet16(0x20b7 + seg, 0x0008, memoryAGet16(0x20b7 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=20b78
    memoryASet16(0x20b8 + seg, 0x000d, memoryAGet16(0x20b8 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=20b8d
    memoryASet16(0x20b9 + seg, 0x000e, memoryAGet16(0x20b9 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=20b9e
    memoryASet16(0x20ba + seg, 0x000f, memoryAGet16(0x20ba + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=20baf
    memoryASet16(0x20bc + seg, 0x0000, memoryAGet16(0x20bc + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20bc0
    memoryASet16(0x20bf + seg, 0x0008, memoryAGet16(0x20bf + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=20bf8
    memoryASet16(0x20c1 + seg, 0x0000, memoryAGet16(0x20c1 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20c10
    memoryASet16(0x20c2 + seg, 0x0003, memoryAGet16(0x20c2 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=20c23
    memoryASet16(0x20c5 + seg, 0x0009, memoryAGet16(0x20c5 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=20c59
    memoryASet16(0x20c6 + seg, 0x000e, memoryAGet16(0x20c6 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=20c6e
    memoryASet16(0x20c7 + seg, 0x000f, memoryAGet16(0x20c7 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=20c7f
    memoryASet16(0x20c9 + seg, 0x0000, memoryAGet16(0x20c9 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20c90
    memoryASet16(0x20ca + seg, 0x0001, memoryAGet16(0x20ca + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=20ca1
    memoryASet16(0x20cb + seg, 0x0002, memoryAGet16(0x20cb + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20cb2
    memoryASet16(0x20ce + seg, 0x000a, memoryAGet16(0x20ce + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=20cea
    memoryASet16(0x20d0 + seg, 0x0002, memoryAGet16(0x20d0 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20d02
    memoryASet16(0x20d1 + seg, 0x0005, memoryAGet16(0x20d1 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=20d15
    memoryASet16(0x20d4 + seg, 0x0006, memoryAGet16(0x20d4 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=20d46
    memoryASet16(0x20d5 + seg, 0x000b, memoryAGet16(0x20d5 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=20d5b
    memoryASet16(0x20d6 + seg, 0x000c, memoryAGet16(0x20d6 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=20d6c
    memoryASet16(0x20d7 + seg, 0x000d, memoryAGet16(0x20d7 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=20d7d
    memoryASet16(0x20d8 + seg, 0x000e, memoryAGet16(0x20d8 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=20d8e
    memoryASet16(0x20d9 + seg, 0x000f, memoryAGet16(0x20d9 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=20d9f
    memoryASet16(0x20db + seg, 0x0000, memoryAGet16(0x20db + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=20db0
    memoryASet16(0x20e4 + seg, 0x000f, memoryAGet16(0x20e4 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=20e4f
    memoryASet16(0x20e6 + seg, 0x0002, memoryAGet16(0x20e6 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20e62
    memoryASet16(0x20e7 + seg, 0x000a, memoryAGet16(0x20e7 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=20e7a
    memoryASet16(0x20e9 + seg, 0x0002, memoryAGet16(0x20e9 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=20e92
    memoryASet16(0x20ea + seg, 0x000e, memoryAGet16(0x20ea + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=20eae
    memoryASet16(0x20ed + seg, 0x0001, memoryAGet16(0x20ed + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=20ed1
    memoryASet16(0x20f5 + seg, 0x000e, memoryAGet16(0x20f5 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=20f5e
    memoryASet16(0x20f7 + seg, 0x0001, memoryAGet16(0x20f7 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=20f71
    memoryASet16(0x20f8 + seg, 0x0009, memoryAGet16(0x20f8 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=20f89
    memoryASet16(0x20fa + seg, 0x0001, memoryAGet16(0x20fa + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=20fa1
    memoryASet16(0x2100 + seg, 0x0002, memoryAGet16(0x2100 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=21002
    memoryASet16(0x2103 + seg, 0x000d, memoryAGet16(0x2103 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2103d
    memoryASet16(0x2105 + seg, 0x0004, memoryAGet16(0x2105 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=21054
    memoryASet16(0x2106 + seg, 0x0009, memoryAGet16(0x2106 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=21069
    memoryASet16(0x2107 + seg, 0x000c, memoryAGet16(0x2107 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2107c
    memoryASet16(0x2110 + seg, 0x000e, memoryAGet16(0x2110 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=2110e
    memoryASet16(0x2112 + seg, 0x0001, memoryAGet16(0x2112 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=21121
    memoryASet16(0x2113 + seg, 0x0009, memoryAGet16(0x2113 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=21139
    memoryASet16(0x2115 + seg, 0x0001, memoryAGet16(0x2115 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=21151
    memoryASet16(0x212f + seg, 0x000e, memoryAGet16(0x212f + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=212fe
    memoryASet16(0x2133 + seg, 0x0001, memoryAGet16(0x2133 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=21331
    memoryASet16(0x2135 + seg, 0x0002, memoryAGet16(0x2135 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=21352
    memoryASet16(0x2137 + seg, 0x0003, memoryAGet16(0x2137 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=21373
    memoryASet16(0x2139 + seg, 0x0004, memoryAGet16(0x2139 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=21394
    memoryASet16(0x213b + seg, 0x0005, memoryAGet16(0x213b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=213b5
    memoryASet16(0x213e + seg, 0x0008, memoryAGet16(0x213e + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=213e8
    memoryASet16(0x2140 + seg, 0x0009, memoryAGet16(0x2140 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=21409
    memoryASet16(0x2142 + seg, 0x000a, memoryAGet16(0x2142 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2142a
    memoryASet16(0x2144 + seg, 0x000b, memoryAGet16(0x2144 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2144b
    memoryASet16(0x2146 + seg, 0x000c, memoryAGet16(0x2146 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2146c
    memoryASet16(0x2149 + seg, 0x000f, memoryAGet16(0x2149 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2149f
    memoryASet16(0x214d + seg, 0x0002, memoryAGet16(0x214d + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=214d2
    memoryASet16(0x214f + seg, 0x0003, memoryAGet16(0x214f + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=214f3
    memoryASet16(0x2176 + seg, 0x0006, memoryAGet16(0x2176 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=21766
    memoryASet16(0x2177 + seg, 0x0009, memoryAGet16(0x2177 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=21779
    memoryASet16(0x2179 + seg, 0x0001, memoryAGet16(0x2179 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=21791
    memoryASet16(0x217a + seg, 0x0004, memoryAGet16(0x217a + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=217a4
    memoryASet16(0x217b + seg, 0x0007, memoryAGet16(0x217b + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=217b7
    memoryASet16(0x217c + seg, 0x000a, memoryAGet16(0x217c + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=217ca
    memoryASet16(0x217d + seg, 0x000d, memoryAGet16(0x217d + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=217dd
    memoryASet16(0x217f + seg, 0x0000, memoryAGet16(0x217f + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=217f0
    memoryASet16(0x2180 + seg, 0x0003, memoryAGet16(0x2180 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=21803
    memoryASet16(0x2181 + seg, 0x0006, memoryAGet16(0x2181 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=21816
    memoryASet16(0x2182 + seg, 0x0009, memoryAGet16(0x2182 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=21829
    memoryASet16(0x2184 + seg, 0x0001, memoryAGet16(0x2184 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=21841
    memoryASet16(0x2185 + seg, 0x0009, memoryAGet16(0x2185 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=21859
    memoryASet16(0x2194 + seg, 0x0008, memoryAGet16(0x2194 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=21948
    memoryASet16(0x2195 + seg, 0x000b, memoryAGet16(0x2195 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2195b
    memoryASet16(0x2197 + seg, 0x0003, memoryAGet16(0x2197 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=21973
    memoryASet16(0x2198 + seg, 0x0006, memoryAGet16(0x2198 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=21986
    memoryASet16(0x21a1 + seg, 0x000c, memoryAGet16(0x21a1 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=21a1c
    memoryASet16(0x21a5 + seg, 0x000c, memoryAGet16(0x21a5 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=21a5c
    memoryASet16(0x21a7 + seg, 0x000a, memoryAGet16(0x21a7 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=21a7a
    memoryASet16(0x21a9 + seg, 0x0002, memoryAGet16(0x21a9 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=21a92
    memoryASet16(0x21ae + seg, 0x0007, memoryAGet16(0x21ae + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=21ae7
    memoryASet16(0x21af + seg, 0x000f, memoryAGet16(0x21af + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=21aff
    memoryASet16(0x21b1 + seg, 0x0007, memoryAGet16(0x21b1 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=21b17
    memoryASet16(0x21b2 + seg, 0x000a, memoryAGet16(0x21b2 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=21b2a
    memoryASet16(0x21b8 + seg, 0x0007, memoryAGet16(0x21b8 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=21b87
    memoryASet16(0x21b9 + seg, 0x000a, memoryAGet16(0x21b9 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=21b9a
    memoryASet16(0x21c5 + seg, 0x0001, memoryAGet16(0x21c5 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=21c51
    memoryASet16(0x21c6 + seg, 0x0009, memoryAGet16(0x21c6 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=21c69
    memoryASet16(0x21c7 + seg, 0x000c, memoryAGet16(0x21c7 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=21c7c
    memoryASet16(0x21c8 + seg, 0x000f, memoryAGet16(0x21c8 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=21c8f
    memoryASet16(0x21ca + seg, 0x0002, memoryAGet16(0x21ca + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=21ca2
    memoryASet16(0x21ce + seg, 0x0000, memoryAGet16(0x21ce + seg, 0x0000) + seg); // 287e -> 2a6b; lin=21ce0
    memoryASet16(0x21d0 + seg, 0x0000, memoryAGet16(0x21d0 + seg, 0x0000) + seg); // 287e -> 2a6b; lin=21d00
    memoryASet16(0x21d8 + seg, 0x0008, memoryAGet16(0x21d8 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=21d88
    memoryASet16(0x21d9 + seg, 0x000b, memoryAGet16(0x21d9 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=21d9b
    memoryASet16(0x21fc + seg, 0x000f, memoryAGet16(0x21fc + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=21fcf
    memoryASet16(0x21fe + seg, 0x0007, memoryAGet16(0x21fe + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=21fe7
    memoryASet16(0x21ff + seg, 0x000a, memoryAGet16(0x21ff + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=21ffa
    memoryASet16(0x2200 + seg, 0x000d, memoryAGet16(0x2200 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2200d
    memoryASet16(0x2202 + seg, 0x0000, memoryAGet16(0x2202 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=22020
    memoryASet16(0x2203 + seg, 0x0008, memoryAGet16(0x2203 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=22038
    memoryASet16(0x2204 + seg, 0x000b, memoryAGet16(0x2204 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2204b
    memoryASet16(0x2205 + seg, 0x000e, memoryAGet16(0x2205 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=2205e
    memoryASet16(0x2207 + seg, 0x0006, memoryAGet16(0x2207 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=22076
    memoryASet16(0x2208 + seg, 0x0009, memoryAGet16(0x2208 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=22089
    memoryASet16(0x2209 + seg, 0x000c, memoryAGet16(0x2209 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2209c
    memoryASet16(0x220a + seg, 0x000f, memoryAGet16(0x220a + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=220af
    memoryASet16(0x220c + seg, 0x0007, memoryAGet16(0x220c + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=220c7
    memoryASet16(0x220d + seg, 0x000a, memoryAGet16(0x220d + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=220da
    memoryASet16(0x2218 + seg, 0x0000, memoryAGet16(0x2218 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=22180
    memoryASet16(0x2219 + seg, 0x0003, memoryAGet16(0x2219 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=22193
    memoryASet16(0x221b + seg, 0x000a, memoryAGet16(0x221b + seg, 0x000a) + seg); // 286e -> 2a5b; lin=221ba
    memoryASet16(0x2237 + seg, 0x0004, memoryAGet16(0x2237 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=22374
    memoryASet16(0x2239 + seg, 0x0005, memoryAGet16(0x2239 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=22395
    memoryASet16(0x223b + seg, 0x0006, memoryAGet16(0x223b + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=223b6
    memoryASet16(0x223d + seg, 0x0007, memoryAGet16(0x223d + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=223d7
    memoryASet16(0x223f + seg, 0x0008, memoryAGet16(0x223f + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=223f8
    memoryASet16(0x2241 + seg, 0x0009, memoryAGet16(0x2241 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=22419
    memoryASet16(0x2243 + seg, 0x000a, memoryAGet16(0x2243 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2243a
    memoryASet16(0x2245 + seg, 0x000b, memoryAGet16(0x2245 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2245b
    memoryASet16(0x2247 + seg, 0x000c, memoryAGet16(0x2247 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2247c
    memoryASet16(0x2249 + seg, 0x000d, memoryAGet16(0x2249 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2249d
    memoryASet16(0x224b + seg, 0x000e, memoryAGet16(0x224b + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=224be
    memoryASet16(0x224d + seg, 0x000f, memoryAGet16(0x224d + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=224df
    memoryASet16(0x2250 + seg, 0x0000, memoryAGet16(0x2250 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=22500
    memoryASet16(0x2252 + seg, 0x0001, memoryAGet16(0x2252 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=22521
    memoryASet16(0x2254 + seg, 0x0002, memoryAGet16(0x2254 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=22542
    memoryASet16(0x2256 + seg, 0x0004, memoryAGet16(0x2256 + seg, 0x0004) + seg); // 286e -> 2a5b; lin=22564
    memoryASet16(0x2257 + seg, 0x0006, memoryAGet16(0x2257 + seg, 0x0006) + seg); // 286e -> 2a5b; lin=22576
    memoryASet16(0x2258 + seg, 0x0002, memoryAGet16(0x2258 + seg, 0x0002) + seg); // 286e -> 2a5b; lin=22582
    memoryASet16(0x226a + seg, 0x0002, memoryAGet16(0x226a + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=226a2
    memoryASet16(0x226b + seg, 0x000d, memoryAGet16(0x226b + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=226bd
    memoryASet16(0x226d + seg, 0x0008, memoryAGet16(0x226d + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=226d8
    memoryASet16(0x226f + seg, 0x0003, memoryAGet16(0x226f + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=226f3
    memoryASet16(0x2270 + seg, 0x000e, memoryAGet16(0x2270 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=2270e
    memoryASet16(0x2272 + seg, 0x0009, memoryAGet16(0x2272 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=22729
    memoryASet16(0x2274 + seg, 0x0004, memoryAGet16(0x2274 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=22744
    memoryASet16(0x2275 + seg, 0x000f, memoryAGet16(0x2275 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2275f
    memoryASet16(0x2277 + seg, 0x000a, memoryAGet16(0x2277 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2277a
    memoryASet16(0x2279 + seg, 0x0005, memoryAGet16(0x2279 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=22795
    memoryASet16(0x227b + seg, 0x0000, memoryAGet16(0x227b + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=227b0
    memoryASet16(0x227c + seg, 0x000b, memoryAGet16(0x227c + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=227cb
    memoryASet16(0x227e + seg, 0x0006, memoryAGet16(0x227e + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=227e6
    memoryASet16(0x2280 + seg, 0x0001, memoryAGet16(0x2280 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=22801
    memoryASet16(0x2281 + seg, 0x000c, memoryAGet16(0x2281 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2281c
    memoryASet16(0x2283 + seg, 0x0007, memoryAGet16(0x2283 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=22837
    memoryASet16(0x2285 + seg, 0x0002, memoryAGet16(0x2285 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=22852
    memoryASet16(0x2286 + seg, 0x000d, memoryAGet16(0x2286 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2286d
    memoryASet16(0x2288 + seg, 0x0008, memoryAGet16(0x2288 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=22888
    memoryASet16(0x228a + seg, 0x0003, memoryAGet16(0x228a + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=228a3
    memoryASet16(0x228b + seg, 0x000e, memoryAGet16(0x228b + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=228be
    memoryASet16(0x228d + seg, 0x0009, memoryAGet16(0x228d + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=228d9
    memoryASet16(0x228f + seg, 0x0004, memoryAGet16(0x228f + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=228f4
    memoryASet16(0x2290 + seg, 0x000f, memoryAGet16(0x2290 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2290f
    memoryASet16(0x2292 + seg, 0x000a, memoryAGet16(0x2292 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2292a
    memoryASet16(0x2294 + seg, 0x0005, memoryAGet16(0x2294 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=22945
    memoryASet16(0x2296 + seg, 0x0000, memoryAGet16(0x2296 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=22960
    memoryASet16(0x2297 + seg, 0x000b, memoryAGet16(0x2297 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2297b
    memoryASet16(0x2299 + seg, 0x0006, memoryAGet16(0x2299 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=22996
    memoryASet16(0x229b + seg, 0x0001, memoryAGet16(0x229b + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=229b1
    memoryASet16(0x229c + seg, 0x000c, memoryAGet16(0x229c + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=229cc
    memoryASet16(0x229e + seg, 0x0007, memoryAGet16(0x229e + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=229e7
    memoryASet16(0x22a0 + seg, 0x0002, memoryAGet16(0x22a0 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=22a02
    memoryASet16(0x22a1 + seg, 0x000d, memoryAGet16(0x22a1 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=22a1d
    memoryASet16(0x22a3 + seg, 0x0008, memoryAGet16(0x22a3 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=22a38
    memoryASet16(0x22a5 + seg, 0x0003, memoryAGet16(0x22a5 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=22a53
    memoryASet16(0x22a6 + seg, 0x000e, memoryAGet16(0x22a6 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=22a6e
    memoryASet16(0x22a8 + seg, 0x0009, memoryAGet16(0x22a8 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=22a89
    memoryASet16(0x22aa + seg, 0x0004, memoryAGet16(0x22aa + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=22aa4
    memoryASet16(0x22ab + seg, 0x000f, memoryAGet16(0x22ab + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=22abf
    memoryASet16(0x22ad + seg, 0x000a, memoryAGet16(0x22ad + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=22ada
    memoryASet16(0x22af + seg, 0x0005, memoryAGet16(0x22af + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=22af5
    memoryASet16(0x22b1 + seg, 0x0000, memoryAGet16(0x22b1 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=22b10
    memoryASet16(0x22b2 + seg, 0x000b, memoryAGet16(0x22b2 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=22b2b
    memoryASet16(0x22b4 + seg, 0x0006, memoryAGet16(0x22b4 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=22b46
    memoryASet16(0x22b6 + seg, 0x0001, memoryAGet16(0x22b6 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=22b61
    memoryASet16(0x22b7 + seg, 0x000c, memoryAGet16(0x22b7 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=22b7c
    memoryASet16(0x22b9 + seg, 0x0007, memoryAGet16(0x22b9 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=22b97
    memoryASet16(0x22bb + seg, 0x0002, memoryAGet16(0x22bb + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=22bb2
    memoryASet16(0x22bc + seg, 0x000d, memoryAGet16(0x22bc + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=22bcd
    memoryASet16(0x22be + seg, 0x0008, memoryAGet16(0x22be + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=22be8
    memoryASet16(0x22c0 + seg, 0x0002, memoryAGet16(0x22c0 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=22c02
    memoryASet16(0x22c1 + seg, 0x000c, memoryAGet16(0x22c1 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=22c1c
    memoryASet16(0x22c3 + seg, 0x0006, memoryAGet16(0x22c3 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=22c36
    memoryASet16(0x22c5 + seg, 0x0000, memoryAGet16(0x22c5 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=22c50
    memoryASet16(0x22c6 + seg, 0x0005, memoryAGet16(0x22c6 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=22c65
    memoryASet16(0x22f1 + seg, 0x0004, memoryAGet16(0x22f1 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=22f14
    memoryASet16(0x22f4 + seg, 0x0007, memoryAGet16(0x22f4 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=22f47
    memoryASet16(0x22f6 + seg, 0x0008, memoryAGet16(0x22f6 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=22f68
    memoryASet16(0x22f9 + seg, 0x000b, memoryAGet16(0x22f9 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=22f9b
    memoryASet16(0x22fb + seg, 0x000c, memoryAGet16(0x22fb + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=22fbc
    memoryASet16(0x22fe + seg, 0x000f, memoryAGet16(0x22fe + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=22fef
    memoryASet16(0x2301 + seg, 0x0000, memoryAGet16(0x2301 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=23010
    memoryASet16(0x2303 + seg, 0x0001, memoryAGet16(0x2303 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=23031
    memoryASet16(0x2306 + seg, 0x0004, memoryAGet16(0x2306 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=23064
    memoryASet16(0x2308 + seg, 0x0005, memoryAGet16(0x2308 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=23085
    memoryASet16(0x230a + seg, 0x0006, memoryAGet16(0x230a + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=230a6
    memoryASet16(0x230d + seg, 0x0009, memoryAGet16(0x230d + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=230d9
    memoryASet16(0x230f + seg, 0x000a, memoryAGet16(0x230f + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=230fa
    memoryASet16(0x2314 + seg, 0x000d, memoryAGet16(0x2314 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2314d
    memoryASet16(0x2318 + seg, 0x0000, memoryAGet16(0x2318 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=23180
    memoryASet16(0x231a + seg, 0x0001, memoryAGet16(0x231a + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=231a1
    memoryASet16(0x231c + seg, 0x0002, memoryAGet16(0x231c + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=231c2
    memoryASet16(0x231f + seg, 0x0005, memoryAGet16(0x231f + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=231f5
    memoryASet16(0x2321 + seg, 0x0006, memoryAGet16(0x2321 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=23216
    memoryASet16(0x2323 + seg, 0x0007, memoryAGet16(0x2323 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=23237
    memoryASet16(0x2326 + seg, 0x000a, memoryAGet16(0x2326 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2326a
    memoryASet16(0x2329 + seg, 0x000d, memoryAGet16(0x2329 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2329d
    memoryASet16(0x232b + seg, 0x000e, memoryAGet16(0x232b + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=232be
    memoryASet16(0x2349 + seg, 0x0004, memoryAGet16(0x2349 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=23494
    memoryASet16(0x234c + seg, 0x0007, memoryAGet16(0x234c + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=234c7
    memoryASet16(0x234f + seg, 0x000a, memoryAGet16(0x234f + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=234fa
    memoryASet16(0x2351 + seg, 0x000b, memoryAGet16(0x2351 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2351b
    memoryASet16(0x2353 + seg, 0x000c, memoryAGet16(0x2353 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2353c
    memoryASet16(0x2355 + seg, 0x000d, memoryAGet16(0x2355 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2355d
    memoryASet16(0x2359 + seg, 0x0000, memoryAGet16(0x2359 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=23590
    memoryASet16(0x235b + seg, 0x0001, memoryAGet16(0x235b + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=235b1
    memoryASet16(0x235d + seg, 0x0002, memoryAGet16(0x235d + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=235d2
    memoryASet16(0x2360 + seg, 0x0005, memoryAGet16(0x2360 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=23605
    memoryASet16(0x2362 + seg, 0x0006, memoryAGet16(0x2362 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=23626
    memoryASet16(0x2365 + seg, 0x0009, memoryAGet16(0x2365 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=23659
    memoryASet16(0x2367 + seg, 0x000a, memoryAGet16(0x2367 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2367a
    memoryASet16(0x2385 + seg, 0x0006, memoryAGet16(0x2385 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=23856
    memoryASet16(0x2388 + seg, 0x0009, memoryAGet16(0x2388 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=23889
    memoryASet16(0x238a + seg, 0x000a, memoryAGet16(0x238a + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=238aa
    memoryASet16(0x238d + seg, 0x000d, memoryAGet16(0x238d + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=238dd
    memoryASet16(0x238f + seg, 0x000e, memoryAGet16(0x238f + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=238fe
    memoryASet16(0x2391 + seg, 0x000f, memoryAGet16(0x2391 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2391f
    memoryASet16(0x2395 + seg, 0x0002, memoryAGet16(0x2395 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=23952
    memoryASet16(0x2397 + seg, 0x0003, memoryAGet16(0x2397 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=23973
    memoryASet16(0x239a + seg, 0x0006, memoryAGet16(0x239a + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=239a6
    memoryASet16(0x239c + seg, 0x0007, memoryAGet16(0x239c + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=239c7
    memoryASet16(0x239e + seg, 0x0008, memoryAGet16(0x239e + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=239e8
    memoryASet16(0x23a1 + seg, 0x000b, memoryAGet16(0x23a1 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=23a1b
    memoryASet16(0x23a3 + seg, 0x000c, memoryAGet16(0x23a3 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=23a3c
    memoryASet16(0x240c + seg, 0x000b, memoryAGet16(0x240c + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=240cb
    memoryASet16(0x240e + seg, 0x000c, memoryAGet16(0x240e + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=240ec
    memoryASet16(0x2411 + seg, 0x000f, memoryAGet16(0x2411 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2411f
    memoryASet16(0x2414 + seg, 0x0000, memoryAGet16(0x2414 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=24140
    memoryASet16(0x2416 + seg, 0x0001, memoryAGet16(0x2416 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=24161
    memoryASet16(0x2418 + seg, 0x0002, memoryAGet16(0x2418 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=24182
    memoryASet16(0x241b + seg, 0x0005, memoryAGet16(0x241b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=241b5
    memoryASet16(0x241d + seg, 0x0006, memoryAGet16(0x241d + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=241d6
    memoryASet16(0x241f + seg, 0x0007, memoryAGet16(0x241f + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=241f7
    memoryASet16(0x2422 + seg, 0x000a, memoryAGet16(0x2422 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2422a
    memoryASet16(0x2424 + seg, 0x000b, memoryAGet16(0x2424 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2424b
    memoryASet16(0x2426 + seg, 0x000c, memoryAGet16(0x2426 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2426c
    memoryASet16(0x2429 + seg, 0x000f, memoryAGet16(0x2429 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2429f
    memoryASet16(0x242c + seg, 0x0000, memoryAGet16(0x242c + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=242c0
    memoryASet16(0x2431 + seg, 0x0004, memoryAGet16(0x2431 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=24314
    memoryASet16(0x2434 + seg, 0x0007, memoryAGet16(0x2434 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=24347
    memoryASet16(0x2437 + seg, 0x000a, memoryAGet16(0x2437 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2437a
    memoryASet16(0x2439 + seg, 0x000b, memoryAGet16(0x2439 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2439b
    memoryASet16(0x243b + seg, 0x000c, memoryAGet16(0x243b + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=243bc
    memoryASet16(0x243e + seg, 0x000f, memoryAGet16(0x243e + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=243ef
    memoryASet16(0x2441 + seg, 0x0000, memoryAGet16(0x2441 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=24410
    memoryASet16(0x2443 + seg, 0x0001, memoryAGet16(0x2443 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=24431
    memoryASet16(0x2445 + seg, 0x0002, memoryAGet16(0x2445 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=24452
    memoryASet16(0x2448 + seg, 0x0005, memoryAGet16(0x2448 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=24485
    memoryASet16(0x244a + seg, 0x0006, memoryAGet16(0x244a + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=244a6
    memoryASet16(0x244d + seg, 0x0009, memoryAGet16(0x244d + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=244d9
    memoryASet16(0x2452 + seg, 0x000d, memoryAGet16(0x2452 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2452d
    memoryASet16(0x2456 + seg, 0x0000, memoryAGet16(0x2456 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=24560
    memoryASet16(0x2459 + seg, 0x0003, memoryAGet16(0x2459 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=24593
    memoryASet16(0x245b + seg, 0x0004, memoryAGet16(0x245b + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=245b4
    memoryASet16(0x245d + seg, 0x0005, memoryAGet16(0x245d + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=245d5
    memoryASet16(0x2460 + seg, 0x0008, memoryAGet16(0x2460 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=24608
    memoryASet16(0x2462 + seg, 0x0009, memoryAGet16(0x2462 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=24629
    memoryASet16(0x2465 + seg, 0x000c, memoryAGet16(0x2465 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2465c
    memoryASet16(0x2467 + seg, 0x000d, memoryAGet16(0x2467 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2467d
    memoryASet16(0x246b + seg, 0x0000, memoryAGet16(0x246b + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=246b0
    memoryASet16(0x2470 + seg, 0x0004, memoryAGet16(0x2470 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=24704
    memoryASet16(0x2473 + seg, 0x0007, memoryAGet16(0x2473 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=24737
    memoryASet16(0x2476 + seg, 0x000a, memoryAGet16(0x2476 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2476a
    memoryASet16(0x2478 + seg, 0x000b, memoryAGet16(0x2478 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2478b
    memoryASet16(0x247a + seg, 0x000c, memoryAGet16(0x247a + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=247ac
    memoryASet16(0x247c + seg, 0x000d, memoryAGet16(0x247c + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=247cd
    memoryASet16(0x247e + seg, 0x000e, memoryAGet16(0x247e + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=247ee
    memoryASet16(0x2482 + seg, 0x0001, memoryAGet16(0x2482 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=24821
    memoryASet16(0x2484 + seg, 0x0002, memoryAGet16(0x2484 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=24842
    memoryASet16(0x2486 + seg, 0x0003, memoryAGet16(0x2486 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=24863
    memoryASet16(0x2489 + seg, 0x0006, memoryAGet16(0x2489 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=24896
    memoryASet16(0x248b + seg, 0x0007, memoryAGet16(0x248b + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=248b7
    memoryASet16(0x248d + seg, 0x0008, memoryAGet16(0x248d + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=248d8
    memoryASet16(0x2492 + seg, 0x000c, memoryAGet16(0x2492 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2492c
    memoryASet16(0x2495 + seg, 0x000f, memoryAGet16(0x2495 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2495f
    memoryASet16(0x2498 + seg, 0x0000, memoryAGet16(0x2498 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=24980
    memoryASet16(0x249b + seg, 0x0003, memoryAGet16(0x249b + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=249b3
    memoryASet16(0x249d + seg, 0x0004, memoryAGet16(0x249d + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=249d4
    memoryASet16(0x249f + seg, 0x0005, memoryAGet16(0x249f + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=249f5
    memoryASet16(0x24a2 + seg, 0x0008, memoryAGet16(0x24a2 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=24a28
    memoryASet16(0x24a4 + seg, 0x0009, memoryAGet16(0x24a4 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=24a49
    memoryASet16(0x24a6 + seg, 0x000a, memoryAGet16(0x24a6 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=24a6a
    memoryASet16(0x24a9 + seg, 0x000d, memoryAGet16(0x24a9 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=24a9d
    memoryASet16(0x24ab + seg, 0x000e, memoryAGet16(0x24ab + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=24abe
    memoryASet16(0x24ad + seg, 0x000f, memoryAGet16(0x24ad + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=24adf
    memoryASet16(0x24b0 + seg, 0x0000, memoryAGet16(0x24b0 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=24b00
    memoryASet16(0x24b5 + seg, 0x0004, memoryAGet16(0x24b5 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=24b54
    memoryASet16(0x24b8 + seg, 0x0007, memoryAGet16(0x24b8 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=24b87
    memoryASet16(0x24bb + seg, 0x000a, memoryAGet16(0x24bb + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=24bba
    memoryASet16(0x24bd + seg, 0x000b, memoryAGet16(0x24bd + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=24bdb
    memoryASet16(0x24bf + seg, 0x000c, memoryAGet16(0x24bf + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=24bfc
    memoryASet16(0x24c1 + seg, 0x000d, memoryAGet16(0x24c1 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=24c1d
    memoryASet16(0x24c3 + seg, 0x000e, memoryAGet16(0x24c3 + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=24c3e
    memoryASet16(0x24c7 + seg, 0x0001, memoryAGet16(0x24c7 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=24c71
    memoryASet16(0x24c9 + seg, 0x0002, memoryAGet16(0x24c9 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=24c92
    memoryASet16(0x24cc + seg, 0x0005, memoryAGet16(0x24cc + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=24cc5
    memoryASet16(0x24ce + seg, 0x0006, memoryAGet16(0x24ce + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=24ce6
    memoryASet16(0x24d0 + seg, 0x0007, memoryAGet16(0x24d0 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=24d07
    memoryASet16(0x24d2 + seg, 0x0008, memoryAGet16(0x24d2 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=24d28
    memoryASet16(0x24ef + seg, 0x000e, memoryAGet16(0x24ef + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=24efe
    memoryASet16(0x24f1 + seg, 0x000f, memoryAGet16(0x24f1 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=24f1f
    memoryASet16(0x24f5 + seg, 0x0002, memoryAGet16(0x24f5 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=24f52
    memoryASet16(0x24f7 + seg, 0x0003, memoryAGet16(0x24f7 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=24f73
    memoryASet16(0x24f9 + seg, 0x0004, memoryAGet16(0x24f9 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=24f94
    memoryASet16(0x24fb + seg, 0x0005, memoryAGet16(0x24fb + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=24fb5
    memoryASet16(0x24fd + seg, 0x0006, memoryAGet16(0x24fd + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=24fd6
    memoryASet16(0x2500 + seg, 0x0009, memoryAGet16(0x2500 + seg, 0x0009) + seg); // 2cd0 -> 2ebd; lin=25009
    memoryASet16(0x2502 + seg, 0x000a, memoryAGet16(0x2502 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2502a
    memoryASet16(0x2504 + seg, 0x000b, memoryAGet16(0x2504 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2504b
    memoryASet16(0x2506 + seg, 0x000c, memoryAGet16(0x2506 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=2506c
    memoryASet16(0x2509 + seg, 0x000f, memoryAGet16(0x2509 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2509f
    memoryASet16(0x250d + seg, 0x0002, memoryAGet16(0x250d + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=250d2
    memoryASet16(0x250f + seg, 0x0003, memoryAGet16(0x250f + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=250f3
    memoryASet16(0x252e + seg, 0x0001, memoryAGet16(0x252e + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=252e1
    memoryASet16(0x2531 + seg, 0x0004, memoryAGet16(0x2531 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=25314
    memoryASet16(0x2533 + seg, 0x0005, memoryAGet16(0x2533 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=25335
    memoryASet16(0x2535 + seg, 0x0006, memoryAGet16(0x2535 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=25356
    memoryASet16(0x2537 + seg, 0x0007, memoryAGet16(0x2537 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=25377
    memoryASet16(0x2539 + seg, 0x0008, memoryAGet16(0x2539 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=25398
    memoryASet16(0x253c + seg, 0x000b, memoryAGet16(0x253c + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=253cb
    memoryASet16(0x253e + seg, 0x000c, memoryAGet16(0x253e + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=253ec
    memoryASet16(0x2541 + seg, 0x000f, memoryAGet16(0x2541 + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=2541f
    memoryASet16(0x2544 + seg, 0x0000, memoryAGet16(0x2544 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=25440
    memoryASet16(0x2546 + seg, 0x0001, memoryAGet16(0x2546 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=25461
    memoryASet16(0x2548 + seg, 0x0002, memoryAGet16(0x2548 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=25482
    memoryASet16(0x254b + seg, 0x0005, memoryAGet16(0x254b + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=254b5
    memoryASet16(0x254d + seg, 0x0006, memoryAGet16(0x254d + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=254d6
    memoryASet16(0x2560 + seg, 0x0003, memoryAGet16(0x2560 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=25603
    memoryASet16(0x2562 + seg, 0x0004, memoryAGet16(0x2562 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=25624
    memoryASet16(0x2564 + seg, 0x0005, memoryAGet16(0x2564 + seg, 0x0005) + seg); // 2cd0 -> 2ebd; lin=25645
    memoryASet16(0x2566 + seg, 0x0006, memoryAGet16(0x2566 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=25666
    memoryASet16(0x2568 + seg, 0x0007, memoryAGet16(0x2568 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=25687
    memoryASet16(0x256a + seg, 0x0008, memoryAGet16(0x256a + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=256a8
    memoryASet16(0x256d + seg, 0x000b, memoryAGet16(0x256d + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=256db
    memoryASet16(0x256f + seg, 0x000c, memoryAGet16(0x256f + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=256fc
    memoryASet16(0x257d + seg, 0x000e, memoryAGet16(0x257d + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=257de
    memoryASet16(0x257f + seg, 0x000f, memoryAGet16(0x257f + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=257ff
    memoryASet16(0x2582 + seg, 0x0000, memoryAGet16(0x2582 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=25820
    memoryASet16(0x2585 + seg, 0x0003, memoryAGet16(0x2585 + seg, 0x0003) + seg); // 2cd0 -> 2ebd; lin=25853
    memoryASet16(0x2587 + seg, 0x0004, memoryAGet16(0x2587 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=25874
    memoryASet16(0x25b5 + seg, 0x000f, memoryAGet16(0x25b5 + seg, 0x000f) + seg); // 2960 -> 2b4d; lin=25b5f
    memoryASet16(0x25b6 + seg, 0x0004, memoryAGet16(0x25b6 + seg, 0x0004) + seg); // 2960 -> 2b4d; lin=25b64
    memoryASet16(0x25b6 + seg, 0x000f, memoryAGet16(0x25b6 + seg, 0x000f) + seg); // 2960 -> 2b4d; lin=25b6f
    memoryASet16(0x25b9 + seg, 0x0008, memoryAGet16(0x25b9 + seg, 0x0008) + seg); // 25e5 -> 27d2; lin=25b98
    memoryASet16(0x25bb + seg, 0x0009, memoryAGet16(0x25bb + seg, 0x0009) + seg); // 25e5 -> 27d2; lin=25bb9
    memoryASet16(0x25bd + seg, 0x000a, memoryAGet16(0x25bd + seg, 0x000a) + seg); // 25e5 -> 27d2; lin=25bda
    memoryASet16(0x25bf + seg, 0x000b, memoryAGet16(0x25bf + seg, 0x000b) + seg); // 25e5 -> 27d2; lin=25bfb
    memoryASet16(0x25c2 + seg, 0x0005, memoryAGet16(0x25c2 + seg, 0x0005) + seg); // 25e5 -> 27d2; lin=25c25
    memoryASet16(0x25c3 + seg, 0x000b, memoryAGet16(0x25c3 + seg, 0x000b) + seg); // 25e5 -> 27d2; lin=25c3b
    memoryASet16(0x25c5 + seg, 0x000c, memoryAGet16(0x25c5 + seg, 0x000c) + seg); // 25e5 -> 27d2; lin=25c5c
    memoryASet16(0x25c7 + seg, 0x0002, memoryAGet16(0x25c7 + seg, 0x0002) + seg); // 25e5 -> 27d2; lin=25c72
    memoryASet16(0x25c8 + seg, 0x0008, memoryAGet16(0x25c8 + seg, 0x0008) + seg); // 25e5 -> 27d2; lin=25c88
    memoryASet16(0x25c9 + seg, 0x000e, memoryAGet16(0x25c9 + seg, 0x000e) + seg); // 25e5 -> 27d2; lin=25c9e
    memoryASet16(0x25cb + seg, 0x0004, memoryAGet16(0x25cb + seg, 0x0004) + seg); // 25e5 -> 27d2; lin=25cb4
    memoryASet16(0x25cc + seg, 0x000a, memoryAGet16(0x25cc + seg, 0x000a) + seg); // 25e5 -> 27d2; lin=25cca
    memoryASet16(0x25ce + seg, 0x0000, memoryAGet16(0x25ce + seg, 0x0000) + seg); // 25e5 -> 27d2; lin=25ce0
    memoryASet16(0x25cf + seg, 0x0006, memoryAGet16(0x25cf + seg, 0x0006) + seg); // 25e5 -> 27d2; lin=25cf6
    memoryASet16(0x25d0 + seg, 0x000c, memoryAGet16(0x25d0 + seg, 0x000c) + seg); // 25e5 -> 27d2; lin=25d0c
    memoryASet16(0x25d2 + seg, 0x0002, memoryAGet16(0x25d2 + seg, 0x0002) + seg); // 25e5 -> 27d2; lin=25d22
    memoryASet16(0x25d3 + seg, 0x0008, memoryAGet16(0x25d3 + seg, 0x0008) + seg); // 25e5 -> 27d2; lin=25d38
    memoryASet16(0x25d4 + seg, 0x0000, memoryAGet16(0x25d4 + seg, 0x0000) + seg); // 2960 -> 2b4d; lin=25d40
    memoryASet16(0x25d4 + seg, 0x0008, memoryAGet16(0x25d4 + seg, 0x0008) + seg); // 2960 -> 2b4d; lin=25d48
    memoryASet16(0x25d5 + seg, 0x0003, memoryAGet16(0x25d5 + seg, 0x0003) + seg); // 2960 -> 2b4d; lin=25d53
    memoryASet16(0x25d6 + seg, 0x000e, memoryAGet16(0x25d6 + seg, 0x000e) + seg); // 29c2 -> 2baf; lin=25d6e
    memoryASet16(0x25d7 + seg, 0x0007, memoryAGet16(0x25d7 + seg, 0x0007) + seg); // 2642 -> 282f; lin=25d77
    memoryASet16(0x25d8 + seg, 0x0003, memoryAGet16(0x25d8 + seg, 0x0003) + seg); // 2642 -> 282f; lin=25d83
    memoryASet16(0x25d8 + seg, 0x000f, memoryAGet16(0x25d8 + seg, 0x000f) + seg); // 29c2 -> 2baf; lin=25d8f
    memoryASet16(0x25db + seg, 0x000a, memoryAGet16(0x25db + seg, 0x000a) + seg); // 2642 -> 282f; lin=25dba
    memoryASet16(0x25dd + seg, 0x0007, memoryAGet16(0x25dd + seg, 0x0007) + seg); // 2960 -> 2b4d; lin=25dd7
    memoryASet16(0x25e0 + seg, 0x000e, memoryAGet16(0x25e0 + seg, 0x000e) + seg); // 2960 -> 2b4d; lin=25e0e
    memoryASet16(0x25ea + seg, 0x0008, memoryAGet16(0x25ea + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=25ea8
    memoryASet16(0x25ec + seg, 0x0004, memoryAGet16(0x25ec + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=25ec4
    memoryASet16(0x25ed + seg, 0x000f, memoryAGet16(0x25ed + seg, 0x000f) + seg); // 2cd0 -> 2ebd; lin=25edf
    memoryASet16(0x2604 + seg, 0x0004, memoryAGet16(0x2604 + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=26044
    memoryASet16(0x2608 + seg, 0x000a, memoryAGet16(0x2608 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2608a
    memoryASet16(0x260c + seg, 0x0001, memoryAGet16(0x260c + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=260c1
    memoryASet16(0x260e + seg, 0x0000, memoryAGet16(0x260e + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=260e0
    memoryASet16(0x2610 + seg, 0x0007, memoryAGet16(0x2610 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=26107
    memoryASet16(0x2614 + seg, 0x000d, memoryAGet16(0x2614 + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=2614d
    memoryASet16(0x261b + seg, 0x0002, memoryAGet16(0x261b + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=261b2
    memoryASet16(0x2620 + seg, 0x0002, memoryAGet16(0x2620 + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=26202
    memoryASet16(0x2622 + seg, 0x000a, memoryAGet16(0x2622 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2622a
    memoryASet16(0x2625 + seg, 0x000b, memoryAGet16(0x2625 + seg, 0x000b) + seg); // 2cd0 -> 2ebd; lin=2625b
    memoryASet16(0x2626 + seg, 0x000a, memoryAGet16(0x2626 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2626a
    memoryASet16(0x2629 + seg, 0x0008, memoryAGet16(0x2629 + seg, 0x0008) + seg); // 2cd0 -> 2ebd; lin=26298
    memoryASet16(0x2643 + seg, 0x000a, memoryAGet16(0x2643 + seg, 0x000a) + seg); // 2dea -> 2fd7; lin=2643a
    memoryASet16(0x2647 + seg, 0x0002, memoryAGet16(0x2647 + seg, 0x0002) + seg); // 2dea -> 2fd7; lin=26472
    memoryASet16(0x2648 + seg, 0x0002, memoryAGet16(0x2648 + seg, 0x0002) + seg); // 2642 -> 282f; lin=26482
    memoryASet16(0x264c + seg, 0x000c, memoryAGet16(0x264c + seg, 0x000c) + seg); // 2642 -> 282f; lin=264cc
    memoryASet16(0x264f + seg, 0x0005, memoryAGet16(0x264f + seg, 0x0005) + seg); // 2642 -> 282f; lin=264f5
    memoryASet16(0x2651 + seg, 0x0006, memoryAGet16(0x2651 + seg, 0x0006) + seg); // 2dea -> 2fd7; lin=26516
    memoryASet16(0x2654 + seg, 0x0005, memoryAGet16(0x2654 + seg, 0x0005) + seg); // 2dea -> 2fd7; lin=26545
    memoryASet16(0x2655 + seg, 0x0002, memoryAGet16(0x2655 + seg, 0x0002) + seg); // 2dea -> 2fd7; lin=26552
    memoryASet16(0x2658 + seg, 0x0000, memoryAGet16(0x2658 + seg, 0x0000) + seg); // 2dea -> 2fd7; lin=26580
    memoryASet16(0x265d + seg, 0x0007, memoryAGet16(0x265d + seg, 0x0007) + seg); // 2dea -> 2fd7; lin=265d7
    memoryASet16(0x265f + seg, 0x000d, memoryAGet16(0x265f + seg, 0x000d) + seg); // 2dea -> 2fd7; lin=265fd
    memoryASet16(0x2662 + seg, 0x000f, memoryAGet16(0x2662 + seg, 0x000f) + seg); // 2dea -> 2fd7; lin=2662f
    memoryASet16(0x2663 + seg, 0x000a, memoryAGet16(0x2663 + seg, 0x000a) + seg); // 2642 -> 282f; lin=2663a
    memoryASet16(0x2665 + seg, 0x000d, memoryAGet16(0x2665 + seg, 0x000d) + seg); // 2dea -> 2fd7; lin=2665d
    memoryASet16(0x2669 + seg, 0x0006, memoryAGet16(0x2669 + seg, 0x0006) + seg); // 2dea -> 2fd7; lin=26696
    memoryASet16(0x266e + seg, 0x0009, memoryAGet16(0x266e + seg, 0x0009) + seg); // 2dea -> 2fd7; lin=266e9
    memoryASet16(0x270e + seg, 0x000f, memoryAGet16(0x270e + seg, 0x000f) + seg); // 2dea -> 2fd7; lin=270ef
    memoryASet16(0x2712 + seg, 0x0004, memoryAGet16(0x2712 + seg, 0x0004) + seg); // 2dea -> 2fd7; lin=27124
    memoryASet16(0x2715 + seg, 0x0008, memoryAGet16(0x2715 + seg, 0x0008) + seg); // 2dea -> 2fd7; lin=27158
    memoryASet16(0x2716 + seg, 0x0006, memoryAGet16(0x2716 + seg, 0x0006) + seg); // 2642 -> 282f; lin=27166
    memoryASet16(0x2719 + seg, 0x0003, memoryAGet16(0x2719 + seg, 0x0003) + seg); // 2642 -> 282f; lin=27193
    memoryASet16(0x271a + seg, 0x0003, memoryAGet16(0x271a + seg, 0x0003) + seg); // 2642 -> 282f; lin=271a3
    memoryASet16(0x271e + seg, 0x000e, memoryAGet16(0x271e + seg, 0x000e) + seg); // 2642 -> 282f; lin=271ee
    memoryASet16(0x271f + seg, 0x000a, memoryAGet16(0x271f + seg, 0x000a) + seg); // 2642 -> 282f; lin=271fa
    memoryASet16(0x2720 + seg, 0x0003, memoryAGet16(0x2720 + seg, 0x0003) + seg); // 2642 -> 282f; lin=27203
    memoryASet16(0x2720 + seg, 0x000f, memoryAGet16(0x2720 + seg, 0x000f) + seg); // 2642 -> 282f; lin=2720f
    memoryASet16(0x2721 + seg, 0x0008, memoryAGet16(0x2721 + seg, 0x0008) + seg); // 2642 -> 282f; lin=27218
    memoryASet16(0x2722 + seg, 0x0004, memoryAGet16(0x2722 + seg, 0x0004) + seg); // 2642 -> 282f; lin=27224
    memoryASet16(0x2722 + seg, 0x000d, memoryAGet16(0x2722 + seg, 0x000d) + seg); // 2642 -> 282f; lin=2722d
    memoryASet16(0x2723 + seg, 0x0009, memoryAGet16(0x2723 + seg, 0x0009) + seg); // 2642 -> 282f; lin=27239
    memoryASet16(0x2724 + seg, 0x0002, memoryAGet16(0x2724 + seg, 0x0002) + seg); // 2642 -> 282f; lin=27242
    memoryASet16(0x2724 + seg, 0x000e, memoryAGet16(0x2724 + seg, 0x000e) + seg); // 2642 -> 282f; lin=2724e
    memoryASet16(0x2725 + seg, 0x0007, memoryAGet16(0x2725 + seg, 0x0007) + seg); // 2642 -> 282f; lin=27257
    memoryASet16(0x2726 + seg, 0x0003, memoryAGet16(0x2726 + seg, 0x0003) + seg); // 2642 -> 282f; lin=27263
    memoryASet16(0x2726 + seg, 0x000c, memoryAGet16(0x2726 + seg, 0x000c) + seg); // 2642 -> 282f; lin=2726c
    memoryASet16(0x2727 + seg, 0x0008, memoryAGet16(0x2727 + seg, 0x0008) + seg); // 2642 -> 282f; lin=27278
    memoryASet16(0x2728 + seg, 0x0001, memoryAGet16(0x2728 + seg, 0x0001) + seg); // 2642 -> 282f; lin=27281
    memoryASet16(0x2728 + seg, 0x000d, memoryAGet16(0x2728 + seg, 0x000d) + seg); // 2642 -> 282f; lin=2728d
    memoryASet16(0x2729 + seg, 0x0006, memoryAGet16(0x2729 + seg, 0x0006) + seg); // 2642 -> 282f; lin=27296
    memoryASet16(0x272a + seg, 0x0002, memoryAGet16(0x272a + seg, 0x0002) + seg); // 2642 -> 282f; lin=272a2
    memoryASet16(0x272a + seg, 0x000b, memoryAGet16(0x272a + seg, 0x000b) + seg); // 2642 -> 282f; lin=272ab
    memoryASet16(0x272b + seg, 0x0007, memoryAGet16(0x272b + seg, 0x0007) + seg); // 2642 -> 282f; lin=272b7
    memoryASet16(0x272c + seg, 0x0000, memoryAGet16(0x272c + seg, 0x0000) + seg); // 2642 -> 282f; lin=272c0
    memoryASet16(0x272c + seg, 0x000c, memoryAGet16(0x272c + seg, 0x000c) + seg); // 2642 -> 282f; lin=272cc
    memoryASet16(0x272d + seg, 0x0005, memoryAGet16(0x272d + seg, 0x0005) + seg); // 2642 -> 282f; lin=272d5
    memoryASet16(0x272e + seg, 0x0001, memoryAGet16(0x272e + seg, 0x0001) + seg); // 2642 -> 282f; lin=272e1
    memoryASet16(0x272e + seg, 0x000a, memoryAGet16(0x272e + seg, 0x000a) + seg); // 2642 -> 282f; lin=272ea
    memoryASet16(0x272f + seg, 0x0006, memoryAGet16(0x272f + seg, 0x0006) + seg); // 2642 -> 282f; lin=272f6
    memoryASet16(0x272f + seg, 0x000f, memoryAGet16(0x272f + seg, 0x000f) + seg); // 2642 -> 282f; lin=272ff
    memoryASet16(0x2730 + seg, 0x000b, memoryAGet16(0x2730 + seg, 0x000b) + seg); // 2642 -> 282f; lin=2730b
    memoryASet16(0x2731 + seg, 0x0004, memoryAGet16(0x2731 + seg, 0x0004) + seg); // 2642 -> 282f; lin=27314
    memoryASet16(0x2732 + seg, 0x0000, memoryAGet16(0x2732 + seg, 0x0000) + seg); // 2642 -> 282f; lin=27320
    memoryASet16(0x2732 + seg, 0x0009, memoryAGet16(0x2732 + seg, 0x0009) + seg); // 2642 -> 282f; lin=27329
    memoryASet16(0x2733 + seg, 0x0005, memoryAGet16(0x2733 + seg, 0x0005) + seg); // 2642 -> 282f; lin=27335
    memoryASet16(0x2733 + seg, 0x000e, memoryAGet16(0x2733 + seg, 0x000e) + seg); // 2642 -> 282f; lin=2733e
    memoryASet16(0x2734 + seg, 0x000a, memoryAGet16(0x2734 + seg, 0x000a) + seg); // 2642 -> 282f; lin=2734a
    memoryASet16(0x2735 + seg, 0x0003, memoryAGet16(0x2735 + seg, 0x0003) + seg); // 2642 -> 282f; lin=27353
    memoryASet16(0x2735 + seg, 0x000f, memoryAGet16(0x2735 + seg, 0x000f) + seg); // 2642 -> 282f; lin=2735f
    memoryASet16(0x2736 + seg, 0x0008, memoryAGet16(0x2736 + seg, 0x0008) + seg); // 2642 -> 282f; lin=27368
    memoryASet16(0x2737 + seg, 0x0004, memoryAGet16(0x2737 + seg, 0x0004) + seg); // 2642 -> 282f; lin=27374
    memoryASet16(0x2737 + seg, 0x000d, memoryAGet16(0x2737 + seg, 0x000d) + seg); // 2642 -> 282f; lin=2737d
    memoryASet16(0x2738 + seg, 0x0009, memoryAGet16(0x2738 + seg, 0x0009) + seg); // 2642 -> 282f; lin=27389
    memoryASet16(0x2739 + seg, 0x0002, memoryAGet16(0x2739 + seg, 0x0002) + seg); // 2642 -> 282f; lin=27392
    memoryASet16(0x2739 + seg, 0x000e, memoryAGet16(0x2739 + seg, 0x000e) + seg); // 2642 -> 282f; lin=2739e
    memoryASet16(0x273a + seg, 0x0007, memoryAGet16(0x273a + seg, 0x0007) + seg); // 2642 -> 282f; lin=273a7
    memoryASet16(0x273b + seg, 0x0003, memoryAGet16(0x273b + seg, 0x0003) + seg); // 2642 -> 282f; lin=273b3
    memoryASet16(0x274d + seg, 0x0006, memoryAGet16(0x274d + seg, 0x0006) + seg); // 2642 -> 282f; lin=274d6
    memoryASet16(0x276a + seg, 0x000a, memoryAGet16(0x276a + seg, 0x000a) + seg); // 2642 -> 282f; lin=276aa
    memoryASet16(0x2777 + seg, 0x0009, memoryAGet16(0x2777 + seg, 0x0009) + seg); // 2642 -> 282f; lin=27779
    memoryASet16(0x278a + seg, 0x0006, memoryAGet16(0x278a + seg, 0x0006) + seg); // 2642 -> 282f; lin=278a6
    memoryASet16(0x279b + seg, 0x000c, memoryAGet16(0x279b + seg, 0x000c) + seg); // 2642 -> 282f; lin=279bc
    memoryASet16(0x27ae + seg, 0x0000, memoryAGet16(0x27ae + seg, 0x0000) + seg); // 2642 -> 282f; lin=27ae0
    memoryASet16(0x27cb + seg, 0x000e, memoryAGet16(0x27cb + seg, 0x000e) + seg); // 2642 -> 282f; lin=27cbe
    memoryASet16(0x27d4 + seg, 0x0002, memoryAGet16(0x27d4 + seg, 0x0002) + seg); // 2dea -> 2fd7; lin=27d42
    memoryASet16(0x27d8 + seg, 0x0009, memoryAGet16(0x27d8 + seg, 0x0009) + seg); // 2dea -> 2fd7; lin=27d89
    memoryASet16(0x27de + seg, 0x0003, memoryAGet16(0x27de + seg, 0x0003) + seg); // 2642 -> 282f; lin=27de3
    memoryASet16(0x27e0 + seg, 0x000e, memoryAGet16(0x27e0 + seg, 0x000e) + seg); // 2dea -> 2fd7; lin=27e0e
    memoryASet16(0x27e8 + seg, 0x000a, memoryAGet16(0x27e8 + seg, 0x000a) + seg); // 2dea -> 2fd7; lin=27e8a
    memoryASet16(0x27ef + seg, 0x0001, memoryAGet16(0x27ef + seg, 0x0001) + seg); // 2dea -> 2fd7; lin=27ef1
    memoryASet16(0x27ef + seg, 0x0006, memoryAGet16(0x27ef + seg, 0x0006) + seg); // 2dea -> 2fd7; lin=27ef6
    memoryASet16(0x27f5 + seg, 0x0007, memoryAGet16(0x27f5 + seg, 0x0007) + seg); // 2642 -> 282f; lin=27f57
    memoryASet16(0x27f7 + seg, 0x0001, memoryAGet16(0x27f7 + seg, 0x0001) + seg); // 2642 -> 282f; lin=27f71
    memoryASet16(0x27f8 + seg, 0x0009, memoryAGet16(0x27f8 + seg, 0x0009) + seg); // 2642 -> 282f; lin=27f89
    memoryASet16(0x27fb + seg, 0x000e, memoryAGet16(0x27fb + seg, 0x000e) + seg); // 2642 -> 282f; lin=27fbe
    memoryASet16(0x27fc + seg, 0x0006, memoryAGet16(0x27fc + seg, 0x0006) + seg); // 2642 -> 282f; lin=27fc6
    memoryASet16(0x27fc + seg, 0x000e, memoryAGet16(0x27fc + seg, 0x000e) + seg); // 2642 -> 282f; lin=27fce
    memoryASet16(0x27fd + seg, 0x0006, memoryAGet16(0x27fd + seg, 0x0006) + seg); // 2642 -> 282f; lin=27fd6
    memoryASet16(0x27fe + seg, 0x000c, memoryAGet16(0x27fe + seg, 0x000c) + seg); // 2642 -> 282f; lin=27fec
    memoryASet16(0x27ff + seg, 0x0006, memoryAGet16(0x27ff + seg, 0x0006) + seg); // 2642 -> 282f; lin=27ff6
    memoryASet16(0x2800 + seg, 0x0000, memoryAGet16(0x2800 + seg, 0x0000) + seg); // 2642 -> 282f; lin=28000
    memoryASet16(0x2800 + seg, 0x0008, memoryAGet16(0x2800 + seg, 0x0008) + seg); // 2642 -> 282f; lin=28008
    memoryASet16(0x2802 + seg, 0x0002, memoryAGet16(0x2802 + seg, 0x0002) + seg); // 2dea -> 2fd7; lin=28022
    memoryASet16(0x2802 + seg, 0x000c, memoryAGet16(0x2802 + seg, 0x000c) + seg); // 2642 -> 282f; lin=2802c
    memoryASet16(0x2803 + seg, 0x000b, memoryAGet16(0x2803 + seg, 0x000b) + seg); // 2642 -> 282f; lin=2803b
    memoryASet16(0x2805 + seg, 0x0003, memoryAGet16(0x2805 + seg, 0x0003) + seg); // 2dea -> 2fd7; lin=28053
    memoryASet16(0x2806 + seg, 0x0000, memoryAGet16(0x2806 + seg, 0x0000) + seg); // 2dea -> 2fd7; lin=28060
    memoryASet16(0x280e + seg, 0x0001, memoryAGet16(0x280e + seg, 0x0001) + seg); // 2642 -> 282f; lin=280e1
    memoryASet16(0x280e + seg, 0x0004, memoryAGet16(0x280e + seg, 0x0004) + seg); // 2dea -> 2fd7; lin=280e4
    memoryASet16(0x2814 + seg, 0x0000, memoryAGet16(0x2814 + seg, 0x0000) + seg); // 2642 -> 282f; lin=28140
    memoryASet16(0x2816 + seg, 0x0001, memoryAGet16(0x2816 + seg, 0x0001) + seg); // 2642 -> 282f; lin=28161
    memoryASet16(0x2817 + seg, 0x0001, memoryAGet16(0x2817 + seg, 0x0001) + seg); // 2642 -> 282f; lin=28171
    memoryASet16(0x2819 + seg, 0x000c, memoryAGet16(0x2819 + seg, 0x000c) + seg); // 2dea -> 2fd7; lin=2819c
    memoryASet16(0x281a + seg, 0x0006, memoryAGet16(0x281a + seg, 0x0006) + seg); // 2dea -> 2fd7; lin=281a6
    memoryASet16(0x283d + seg, 0x000b, memoryAGet16(0x283d + seg, 0x000b) + seg); // 2642 -> 282f; lin=283db
    memoryASet16(0x2844 + seg, 0x000b, memoryAGet16(0x2844 + seg, 0x000b) + seg); // 2dea -> 2fd7; lin=2844b
    memoryASet16(0x284c + seg, 0x000d, memoryAGet16(0x284c + seg, 0x000d) + seg); // 2dea -> 2fd7; lin=284cd
    memoryASet16(0x28a6 + seg, 0x0000, memoryAGet16(0x28a6 + seg, 0x0000) + seg); // 29c2 -> 2baf; lin=28a60
    memoryASet16(0x28ac + seg, 0x000e, memoryAGet16(0x28ac + seg, 0x000e) + seg); // 2cd0 -> 2ebd; lin=28ace
    memoryASet16(0x28af + seg, 0x0004, memoryAGet16(0x28af + seg, 0x0004) + seg); // 2cd0 -> 2ebd; lin=28af4
    memoryASet16(0x28b1 + seg, 0x000a, memoryAGet16(0x28b1 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=28b1a
    memoryASet16(0x28b4 + seg, 0x0000, memoryAGet16(0x28b4 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=28b40
    memoryASet16(0x28b6 + seg, 0x0006, memoryAGet16(0x28b6 + seg, 0x0006) + seg); // 2cd0 -> 2ebd; lin=28b66
    memoryASet16(0x28b8 + seg, 0x000c, memoryAGet16(0x28b8 + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=28b8c
    memoryASet16(0x28bb + seg, 0x0002, memoryAGet16(0x28bb + seg, 0x0002) + seg); // 2cd0 -> 2ebd; lin=28bb2
    memoryASet16(0x28bd + seg, 0x0007, memoryAGet16(0x28bd + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=28bd7
    memoryASet16(0x28bf + seg, 0x000c, memoryAGet16(0x28bf + seg, 0x000c) + seg); // 2cd0 -> 2ebd; lin=28bfc
    memoryASet16(0x28c2 + seg, 0x0001, memoryAGet16(0x28c2 + seg, 0x0001) + seg); // 2cd0 -> 2ebd; lin=28c21
    memoryASet16(0x28c4 + seg, 0x0000, memoryAGet16(0x28c4 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=28c40
    memoryASet16(0x2910 + seg, 0x0004, memoryAGet16(0x2910 + seg, 0x0004) + seg); // 29c2 -> 2baf; lin=29104
    memoryASet16(0x2939 + seg, 0x000a, memoryAGet16(0x2939 + seg, 0x000a) + seg); // 29c2 -> 2baf; lin=2939a
    memoryASet16(0x293a + seg, 0x000d, memoryAGet16(0x293a + seg, 0x000d) + seg); // 29c2 -> 2baf; lin=293ad
    memoryASet16(0x293b + seg, 0x0002, memoryAGet16(0x293b + seg, 0x0002) + seg); // 29c2 -> 2baf; lin=293b2
    memoryASet16(0x2961 + seg, 0x0007, memoryAGet16(0x2961 + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=29617
    memoryASet16(0x2962 + seg, 0x000a, memoryAGet16(0x2962 + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=2962a
    memoryASet16(0x2973 + seg, 0x0002, memoryAGet16(0x2973 + seg, 0x0002) + seg); // 2dea -> 2fd7; lin=29732
    memoryASet16(0x29cc + seg, 0x0007, memoryAGet16(0x29cc + seg, 0x0007) + seg); // 2cd0 -> 2ebd; lin=29cc7
    memoryASet16(0x29cd + seg, 0x000a, memoryAGet16(0x29cd + seg, 0x000a) + seg); // 2cd0 -> 2ebd; lin=29cda
    memoryASet16(0x29ce + seg, 0x000d, memoryAGet16(0x29ce + seg, 0x000d) + seg); // 2cd0 -> 2ebd; lin=29ced
    memoryASet16(0x29d0 + seg, 0x0000, memoryAGet16(0x29d0 + seg, 0x0000) + seg); // 2cd0 -> 2ebd; lin=29d00
    memoryASet16(0x2cd0 + seg, 0x0001, memoryAGet16(0x2cd0 + seg, 0x0001) + seg); // 2dea -> 2fd7; lin=2cd01
    memoryASet16(0x2cdd + seg, 0x000d, memoryAGet16(0x2cdd + seg, 0x000d) + seg); // 2dea -> 2fd7; lin=2cddd
    memoryASet16(0x2db9 + seg, 0x0008, memoryAGet16(0x2db9 + seg, 0x0008) + seg); // 2dea -> 2fd7; lin=2db98
}

int GetProcAt(int seg, int ofs)
{
    int marks[] = {
    };
    int map[] = {
        0x2772, 0x1ed, 0x8a2, 0x1ed, 0xbe5, 0x2d37, 0x1ed, 0xe67, 0x1ed, 0xec2, 
        0x2d92, 0x1ed, 0xec2, 0x1ed, 0xee9, 0x2dc2, 0x1ed, 0xef2, 0x1ed, 0xf6c, 
        0x2e45, 0x1ed, 0xf75, 0x1ed, 0x107a, 0x3018, 0x1ed, 0x1148, 0x1ed, 0x514a, 
        0x7021, 0x1ed, 0x5151, 0x1ed, 0x516d, 0x703d, 0x1ed, 0x516d, 0x1ed, 0x51df, 
        0x70af, 0x1ed, 0x51df, 0x1ed, 0x51f3, 0x70c3, 0x1ed, 0x51f3, 0x1ed, 0x5200, 
        0x70d0, 0x70d, 0x0, 0x70d, 0x8d, 0x715d, 0x70d, 0x8d, 0x70d, 0x11a, 
        0x71ea, 0x70d, 0x11a, 0x70d, 0x12d, 0x71fd, 0x70d, 0x12d, 0x70d, 0x1c4, 
        0x7294, 0x70d, 0x1c4, 0x70d, 0x27c, 0x734c, 0x70d, 0x27c, 0x70d, 0x3f0, 
        0x74c0, 0x70d, 0x3f0, 0x70d, 0x584, 0x7654, 0x70d, 0x584, 0x70d, 0x837, 
        0x7907, 0x70d, 0x837, 0x70d, 0x2f6b, 0xa03b, 0x70d, 0x2f6b, 0x70d, 0x65d9, 
        0xd6a9, 0x70d, 0x65d9, 0x70d, 0x66b3, 0xd783, 0x70d, 0x66b3, 0x70d, 0x68f5, 
        0xd9c5, 0x70d, 0x68f5, 0x70d, 0x6a0e, 0xdade, 0x70d, 0x6a0e, 0x70d, 0x6b8e, 
        0xddde, 0x70d, 0x6d0e, 0x70d, 0x86df, 0xf7af, 0x70d, 0x86df, 0x70d, 0x8724, 
        0xf7f4, 0x70d, 0x8724, 0x70d, 0x872b, 0xf800, 0xf80, 0x0, 0xf80, 0x1185, 
        0x10985, 0xf80, 0x1185, 0xf80, 0x2530, 0x11d30, 0xf80, 0x2530, 0xf80, 0x2c6e, 
        0x1246e, 0xf80, 0x2c6e, 0xf80, 0x2e20, 0x12688, 0xf80, 0x2e88, 0xf80, 0x3a59, 
        0x13291, 0xf80, 0x3a91, 0xf80, 0x66f9, 0x160a9, 0xf80, 0x68a9, 0xf80, 0xa1a3, 
        0x199ae, 0xf80, 0xa1ae, 0xf80, 0xa658, 0x19e58, 0xf80, 0xa658, 0xf80, 0xa65f, 
        0x19e60, 0x19e6, 0x0, 0x19e6, 0x7c, 0x19edc, 0x19e6, 0x7c, 0x19e6, 0xa3, 
        0x19f03, 0x19e6, 0xa3, 0x19e6, 0xdb, 0x19f3b, 0x19e6, 0xdb, 0x19e6, 0x232, 
        0x1a092, 0x19e6, 0x232, 0x19e6, 0x261, 0x1a0c1, 0x19e6, 0x261, 0x19e6, 0x79e, 
        0x1a5fe, 0x19e6, 0x79e, 0x19e6, 0x7e0, 0x1a6f2, 0x19e6, 0x892, 0x19e6, 0x15b1, 
        0x1b461, 0x19e6, 0x1601, 0x19e6, 0x1dfa, 0x1bc8a, 0x19e6, 0x1e2a, 0x19e6, 0x267f, 
        0x1c52f, 0x19e6, 0x26cf, 0x19e6, 0x3443, 0x1d2ac, 0x19e6, 0x344c, 0x19e6, 0x34f3, 
        0x1d365, 0x19e6, 0x3505, 0x19e6, 0x3710, 0x1d572, 0x19e6, 0x3712, 0x19e6, 0x3898, 
        0x1d70e, 0x19e6, 0x38ae, 0x19e6, 0x3c93, 0x1daf3, 0x19e6, 0x3c93, 0x19e6, 0x3cb8, 
        0x1db18, 0x19e6, 0x3cb8, 0x19e6, 0x3d6b, 0x1dbcb, 0x19e6, 0x3d6b, 0x19e6, 0x3e1e, 
        0x1dc89, 0x19e6, 0x3e29, 0x19e6, 0x3f71, 0x1ddec, 0x19e6, 0x3f8c, 0x19e6, 0x4117, 
        0x1ecc4, 0x19e6, 0x4e64, 0x19e6, 0x6956, 0x20d09, 0x19e6, 0x6ea9, 0x19e6, 0x7732, 
        0x21a77, 0x19e6, 0x7c17, 0x19e6, 0x8446, 0x222ee, 0x19e6, 0x848e, 0x19e6, 0x850f, 
        0x223e7, 0x19e6, 0x8587, 0x19e6, 0x87a1, 0x2265d, 0x19e6, 0x87fd, 0x19e6, 0x886f, 
        0x2278b, 0x19e6, 0x892b, 0x19e6, 0x8e59, 0x22d03, 0x19e6, 0x8ea3, 0x19e6, 0x8f5d, 
        0x22e16, 0x19e6, 0x8fb6, 0x19e6, 0x911c, 0x22fc3, 0x19e6, 0x9163, 0x19e6, 0x926e, 
        0x231a0, 0x19e6, 0x9340, 0x19e6, 0x96b8, 0x2361b, 0x19e6, 0x97bb, 0x19e6, 0x9a36, 
        0x238d1, 0x19e6, 0x9a71, 0x19e6, 0x9b23, 0x2399e, 0x19e6, 0x9b3e, 0x19e6, 0x9bbd, 
        0x23a3f, 0x19e6, 0x9bdf, 0x19e6, 0x9c6e, 0x23b09, 0x19e6, 0x9ca9, 0x19e6, 0x9dc0, 
        0x23c40, 0x19e6, 0x9de0, 0x19e6, 0x9e76, 0x23e87, 0x19e6, 0xa027, 0x19e6, 0xa1b6, 
        0x24038, 0x19e6, 0xa1d8, 0x19e6, 0xa283, 0x24216, 0x19e6, 0xa3b6, 0x19e6, 0xa632, 
        0x24556, 0x19e6, 0xa6f6, 0x19e6, 0xacdd, 0x24b3d, 0x19e6, 0xacdd, 0x19e6, 0xace4, 
        0x24db6, 0x19e6, 0xaf56, 0x19e6, 0xb35d, 0x25336, 0x19e6, 0xb4d6, 0x19e6, 0xb719, 
        0x256f8, 0x19e6, 0xb898, 0x19e6, 0xbae3, 0x25f6d, 0x19e6, 0xc10d, 0x19e6, 0xcdc8, 
        0x26da0, 0x19e6, 0xcf40, 0x19e6, 0xd193, 0x27183, 0x19e6, 0xd323, 0x19e6, 0xd576, 
        0x274a5, 0x19e6, 0xd645, 0x19e6, 0xd7b5, 0x27680, 0x19e6, 0xd820, 0x19e6, 0xd92d, 
        0x27a22, 0x19e6, 0xdbc2, 0x19e6, 0xddc9, 0x27c32, 0x19e6, 0xddd2, 0x19e6, 0xdeaf, 
        0x27d0f, 0x19e6, 0xdeaf, 0x19e6, 0xdeb6, 0x27d20, 0x27d2, 0x0, 0x27d2, 0x25, 
        0x27d65, 0x27d2, 0x45, 0x27d2, 0x97, 0x27db7, 0x27d2, 0x97, 0x27d2, 0x101, 
        0x27e21, 0x27d2, 0x101, 0x27d2, 0x309, 0x28029, 0x27d2, 0x309, 0x27d2, 0x349, 
        0x28069, 0x27d2, 0x349, 0x27d2, 0x399, 0x280b9, 0x27d2, 0x399, 0x27d2, 0x45e, 
        0x2817e, 0x27d2, 0x45e, 0x27d2, 0x48c, 0x281ac, 0x27d2, 0x48c, 0x27d2, 0x4a3, 
        0x281c3, 0x27d2, 0x4a3, 0x27d2, 0x4bf, 0x281df, 0x27d2, 0x4bf, 0x27d2, 0x4fc, 
        0x281df, 0x27d2, 0x4fd, 0x27d2, 0x508, 0x2826f, 0x27d2, 0x54f, 0x27d2, 0x557, 
        0x28277, 0x27d2, 0x557, 0x27d2, 0x5c3, 0x282e3, 0x27d2, 0x5c3, 0x27d2, 0x5c7, 
        0x282f0, 0x282f, 0x0, 0x282f, 0xf, 0x282ff, 0x282f, 0xf, 0x282f, 0x47, 
        0x28337, 0x282f, 0x47, 0x282f, 0xeb, 0x283db, 0x282f, 0xeb, 0x282f, 0x11a, 
        0x2849c, 0x282f, 0x1ac, 0x282f, 0x204, 0x2855b, 0x282f, 0x26b, 0x282f, 0xc70, 
        0x28f60, 0x282f, 0xc70, 0x282f, 0xcc4, 0x2901d, 0x282f, 0xd2d, 0x282f, 0xdc7, 
        0x2901d, 0x282f, 0x10d7, 0x282f, 0x12b6, 0x290b7, 0x282f, 0xdc7, 0x282f, 0xf9b, 
        0x29c05, 0x282f, 0x1915, 0x282f, 0x19e3, 0x29cd3, 0x282f, 0x19e3, 0x282f, 0x1a5f, 
        0x2a392, 0x282f, 0x20a2, 0x282f, 0x22b8, 0x2a5b0, 0x2a5b, 0x0, 0x2a5b, 0x38, 
        0x2a5e8, 0x2a5b, 0x38, 0x2a5b, 0x58, 0x2a608, 0x2a5b, 0x58, 0x2a5b, 0x78, 
        0x2a628, 0x2a5b, 0x78, 0x2a5b, 0x7f, 0x2a67c, 0x2a5b, 0xcc, 0x2a5b, 0xfb, 
        0x2a6b0, 0x2a6b, 0x0, 0x2a6b, 0x116, 0x2a7c6, 0x2a6b, 0x116, 0x2a6b, 0x11d, 
        0x2a906, 0x2a7d, 0x136, 0x2a7d, 0x7d5, 0x2afa5, 0x2a7d, 0x7d5, 0x2a7d, 0xa89, 
        0x2b259, 0x2a7d, 0xa89, 0x2a7d, 0xc0d, 0x2b3dd, 0x2a7d, 0xc0d, 0x2a7d, 0xc14, 
        0x2b3e4, 0x2a7d, 0xc14, 0x2a7d, 0xcfc, 0x2b4d0, 0x2b4d, 0x0, 0x2b4d, 0x30, 
        0x2b500, 0x2b4d, 0x30, 0x2b4d, 0x99, 0x2b569, 0x2b4d, 0x99, 0x2b4d, 0xe7, 
        0x2b5b7, 0x2b4d, 0xe7, 0x2b4d, 0x12f, 0x2b615, 0x2b4d, 0x145, 0x2b4d, 0x182, 
        0x2b63d, 0x2b4d, 0x16d, 0x2b4d, 0x182, 0x2b692, 0x2b4d, 0x1c2, 0x2b4d, 0x1dc, 
        0x2b6e5, 0x2b4d, 0x215, 0x2b4d, 0x241, 0x2b729, 0x2b4d, 0x259, 0x2b4d, 0x273, 
        0x2b743, 0x2b4d, 0x273, 0x2b4d, 0x28b, 0x2b76e, 0x2b4d, 0x29e, 0x2b4d, 0x2be, 
        0x2b78e, 0x2b4d, 0x2be, 0x2b4d, 0x2c6, 0x2b7c3, 0x2b4d, 0x2f3, 0x2b4d, 0x2fa, 
        0x2b7ca, 0x2b4d, 0x2fa, 0x2b4d, 0x30c, 0x2b7dc, 0x2b4d, 0x30c, 0x2b4d, 0x32a, 
        0x2b7fe, 0x2b4d, 0x32e, 0x2b4d, 0x359, 0x2b829, 0x2b4d, 0x359, 0x2b4d, 0x391, 
        0x2b90e, 0x2b4d, 0x43e, 0x2b4d, 0x467, 0x2b90e, 0x2b4d, 0x46a, 0x2b4d, 0x46c, 
        0x2b93f, 0x2b4d, 0x46f, 0x2b4d, 0x474, 0x2b944, 0x2b4d, 0x474, 0x2b4d, 0x4d4, 
        0x2b94b, 0x2b4d, 0x47b, 0x2b4d, 0x4d4, 0x2b9a4, 0x2b4d, 0x4d4, 0x2b4d, 0x4f5, 
        0x2b9c5, 0x2b4d, 0x4f5, 0x2b4d, 0x4fc, 0x2b9c5, 0x2b4d, 0x608, 0x2b4d, 0x613, 
        0x2b9cc, 0x2b4d, 0x4fc, 0x2b4d, 0x503, 0x2b9cc, 0x2b4d, 0x608, 0x2b4d, 0x613, 
        0x2b9d3, 0x2b4d, 0x503, 0x2b4d, 0x5a0, 0x2ba70, 0x2b4d, 0x5a0, 0x2b4d, 0x608, 
        0x2bad8, 0x2b4d, 0x608, 0x2b4d, 0x613, 0x2bb60, 0x2baf, 0x70, 0x2baf, 0xe6, 
        0x2bc93, 0x2baf, 0x1a3, 0x2baf, 0x1b1, 0x2bc93, 0x2baf, 0x1b2, 0x2baf, 0x1bc, 
        0x2bc93, 0x2baf, 0x1bd, 0x2baf, 0x1c5, 0x2bcb5, 0x2baf, 0x1c5, 0x2baf, 0x1d3, 
        0x2bcc3, 0x2baf, 0x1d3, 0x2baf, 0x1f9, 0x2bce9, 0x2baf, 0x1f9, 0x2baf, 0x24c, 
        0x2bd3c, 0x2baf, 0x24c, 0x2baf, 0x29f, 0x2bd8f, 0x2baf, 0x29f, 0x2baf, 0x2db, 
        0x2bdcb, 0x2baf, 0x2db, 0x2baf, 0x2fa, 0x2bdea, 0x2baf, 0x2fa, 0x2baf, 0x331, 
        0x2bdea, 0x2baf, 0x332, 0x2baf, 0x337, 0x2be27, 0x2baf, 0x337, 0x2baf, 0x349, 
        0x2be42, 0x2baf, 0x352, 0x2baf, 0x364, 0x2bf65, 0x2baf, 0x475, 0x2baf, 0x51f, 
        0x2c00f, 0x2baf, 0x51f, 0x2baf, 0x59f, 0x2c115, 0x2baf, 0x625, 0x2baf, 0x633, 
        0x2c2de, 0x2baf, 0x7ee, 0x2baf, 0x87e, 0x2d285, 0x2baf, 0x1795, 0x2baf, 0x1831, 
        0x2d321, 0x2baf, 0x1831, 0x2baf, 0x18c2, 0x2d4e9, 0x2baf, 0x19f9, 0x2baf, 0x1aae, 
        0x2d4e9, 0x2baf, 0x1aaf, 0x2baf, 0x1b22, 0x2d617, 0x2baf, 0x1b27, 0x2baf, 0x1be5, 
        0x2d617, 0x2baf, 0x1be6, 0x2baf, 0x1c58, 0x2df53, 0x2baf, 0x2463, 0x2baf, 0x2520, 
        0x2df53, 0x2baf, 0x2521, 0x2baf, 0x259a, 0x2e2d2, 0x2baf, 0x27e2, 0x2baf, 0x2829, 
        0x2e471, 0x2baf, 0x2981, 0x2baf, 0x29a6, 0x2e471, 0x2baf, 0x29a7, 0x2baf, 0x29c3, 
        0x2e58f, 0x2baf, 0x2a9f, 0x2baf, 0x2b38, 0x2e628, 0x2baf, 0x2b38, 0x2baf, 0x2bb2, 
        0x2e95d, 0x2baf, 0x2e6d, 0x2baf, 0x2ecf, 0x2e9bf, 0x2baf, 0x2ecf, 0x2baf, 0x2f32, 
        0x2ea22, 0x2baf, 0x2f32, 0x2baf, 0x2f7b, 0x2eb3b, 0x2eb3, 0xb, 0x2eb3, 0x44, 
        0x2eb75, 0x2eb3, 0x45, 0x2eb3, 0x67, 0x2eb75, 0x2eb3, 0x68, 0x2eb3, 0x69, 
        0x2eb9c, 0x2eb3, 0x6c, 0x2eb3, 0x84, 0x2ebb4, 0x2eb3, 0x84, 0x2eb3, 0x97, 
        0x2ebd0, 0x2ebd, 0x0, 0x2ebd, 0x9d, 0x2eca8, 0x2ebd, 0xd8, 0x2ebd, 0x12e, 
        0x2eca8, 0x2ebd, 0x12f, 0x2ebd, 0x194, 0x2ed64, 0x2ebd, 0x194, 0x2ebd, 0x1a2, 
        0x2ed72, 0x2ebd, 0x1a2, 0x2ebd, 0x1ae, 0x2ed72, 0x2ebd, 0x1b2, 0x2ebd, 0x1bc, 
        0x2ed7e, 0x2ebd, 0x1ae, 0x2ebd, 0x1bc, 0x2ed8c, 0x2ebd, 0x1bc, 0x2ebd, 0x1dd, 
        0x2ed93, 0x2ebd, 0x1c3, 0x2ebd, 0x1dd, 0x2ed9e, 0x2ebd, 0x1ce, 0x2ebd, 0x1dd, 
        0x2eda6, 0x2ebd, 0x1d6, 0x2ebd, 0x1dd, 0x2edd7, 0x2ebd, 0x207, 0x2ebd, 0x20e, 
        0x2ee2d, 0x2ebd, 0x25d, 0x2ebd, 0x275, 0x2ee49, 0x2ebd, 0x279, 0x2ebd, 0x294, 
        0x2eef9, 0x2ebd, 0xd2, 0x2ebd, 0xd5, 0x2eef9, 0x2ebd, 0xdc, 0x2ebd, 0x12e, 
        0x2eef9, 0x2ebd, 0x132, 0x2ebd, 0x135, 0x2eef9, 0x2ebd, 0x138, 0x2ebd, 0x13e, 
        0x2eef9, 0x2ebd, 0x141, 0x2ebd, 0x194, 0x2eef9, 0x2ebd, 0x329, 0x2ebd, 0x364, 
        0x2ef34, 0x2ebd, 0xd2, 0x2ebd, 0xd5, 0x2ef34, 0x2ebd, 0xdc, 0x2ebd, 0x12e, 
        0x2ef34, 0x2ebd, 0x132, 0x2ebd, 0x135, 0x2ef34, 0x2ebd, 0x138, 0x2ebd, 0x13e, 
        0x2ef34, 0x2ebd, 0x141, 0x2ebd, 0x194, 0x2ef34, 0x2ebd, 0x364, 0x2ebd, 0x384, 
        0x2ef85, 0x2ebd, 0x3b5, 0x2ebd, 0x3f9, 0x2f016, 0x2ebd, 0x446, 0x2ebd, 0x4e2, 
        0x2f0b2, 0x2ebd, 0x4e2, 0x2ebd, 0x595, 0x2f165, 0x2ebd, 0x595, 0x2ebd, 0x5b9, 
        0x2f189, 0x2ebd, 0x5b9, 0x2ebd, 0x5ce, 0x2f19e, 0x2ebd, 0x5ce, 0x2ebd, 0x617, 
        0x2f1e7, 0x2ebd, 0x617, 0x2ebd, 0x625, 0x2f1f5, 0x2ebd, 0x625, 0x2ebd, 0x634, 
        0x2f204, 0x2ebd, 0x634, 0x2ebd, 0x64e, 0x2f21e, 0x2ebd, 0x64e, 0x2ebd, 0x672, 
        0x2f250, 0x2ebd, 0x680, 0x2ebd, 0x6c1, 0x2f291, 0x2ebd, 0x6c1, 0x2ebd, 0x6ed, 
        0x2f2bd, 0x2ebd, 0x6ed, 0x2ebd, 0x724, 0x2f2f4, 0x2ebd, 0x724, 0x2ebd, 0x74f, 
        0x2f31f, 0x2ebd, 0x74f, 0x2ebd, 0x761, 0x2f3a0, 0x2ebd, 0x7d0, 0x2ebd, 0x826, 
        0x2f4a4, 0x2ebd, 0x8d4, 0x2ebd, 0x8f5, 0x2f550, 0x2ebd, 0x980, 0x2ebd, 0x996, 
        0x2f59f, 0x2ebd, 0x9cf, 0x2ebd, 0xa05, 0x2f5e4, 0x2ebd, 0xa14, 0x2ebd, 0xa66, 
        0x2f65e, 0x2ebd, 0xa8e, 0x2ebd, 0xb26, 0x2f6f6, 0x2ebd, 0xb26, 0x2ebd, 0xb71, 
        0x2f741, 0x2ebd, 0xb71, 0x2ebd, 0xba2, 0x2f772, 0x2ebd, 0xba2, 0x2ebd, 0xbe7, 
        0x2f7e2, 0x2ebd, 0xc12, 0x2ebd, 0xc17, 0x2f7e2, 0x2ebd, 0xc1f, 0x2ebd, 0xc67, 
        0x2f7e7, 0x2ebd, 0xc17, 0x2ebd, 0xc1c, 0x2f7e7, 0x2ebd, 0xc1f, 0x2ebd, 0xc67, 
        0x2f83b, 0x2ebd, 0xc6b, 0x2ebd, 0xca6, 0x2f876, 0x2ebd, 0xca6, 0x2ebd, 0xcb6, 
        0x2f887, 0x2ebd, 0xcb7, 0x2ebd, 0xd39, 0x2f909, 0x2ebd, 0xd39, 0x2ebd, 0xd93, 
        0x2fa31, 0x2ebd, 0xe61, 0x2ebd, 0xe85, 0x2fa55, 0x2ebd, 0xe85, 0x2ebd, 0xec4, 
        0x2fabe, 0x2ebd, 0xeee, 0x2ebd, 0xf0d, 0x2fabe, 0x2ebd, 0xf13, 0x2ebd, 0xf33, 
        0x2fb3b, 0x2ebd, 0xf6b, 0x2ebd, 0xfa9, 0x2fb79, 0x2ebd, 0xfa9, 0x2ebd, 0xfd7, 
        0x2fba7, 0x2ebd, 0xfd7, 0x2ebd, 0xfe0, 0x2fba7, 0x2ebd, 0xfe6, 0x2ebd, 0x103c, 
        0x2fbb0, 0x2ebd, 0xfe0, 0x2ebd, 0x103c, 0x2fc28, 0x2ebd, 0x1058, 0x2ebd, 0x107d, 
        0x2fc4d, 0x2ebd, 0x107d, 0x2ebd, 0x108c, 0x2fc5c, 0x2ebd, 0x108c, 0x2ebd, 0x1093, 
        0x2fc5c, 0x2ebd, 0x1098, 0x2ebd, 0x10c2, 0x2fc63, 0x2ebd, 0x1093, 0x2ebd, 0x10c2, 
        0x2fd4d, 0x2ebd, 0x117d, 0x2ebd, 0x1191,     };
    for (int i=0; i<sizeof(marks)/sizeof(marks[0]); i+=2)
        if (seg == marks[i] && ofs == marks[i+1])
            return 0;

    for (int i=0; i<sizeof(map)/sizeof(map[0]); i+=5)
        if (seg * 16 + ofs >= map[i+1]*16 + map[i+2] && seg * 16 + ofs < map[i+3]*16 + map[i+4])
            return map[i];
    return 0;
}

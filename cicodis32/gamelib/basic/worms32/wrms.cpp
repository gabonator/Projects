#include "cico32.h"


void sub_196010();
void sub_19602a();
void sub_196049();
void sub_196528();
void sub_196688();
void sub_1968c6();
void sub_1969ec();
void sub_196a3e();
void sub_196afc();
void sub_196b5f();
void sub_196b8d();
void sub_196c52();
void sub_196ca9();
void sub_196d9a();
void sub_196e87();
void sub_196f97();
void sub_197034();
void sub_1970f5();
void sub_19731d();
void sub_197391();
void sub_1973e5();
void sub_197664();
void sub_1977cd();
void sub_197910();
void sub_197b3b();
void sub_197c71();
void sub_197d77();
void sub_197f05();
void sub_197f7a();
void sub_1980de();
void sub_1980f9();
void sub_198147();
void sub_19818b();
void sub_19823d();
void sub_1982da();
void sub_1982e5();
void sub_198554();
void sub_198725();
void sub_19878d();
void sub_198b0e();
void sub_198cd4();
void sub_198cff();
void sub_198efd();
void sub_198f64();
void sub_199062();
void sub_199163();
void sub_1992d0();
void sub_19934d();
void sub_199435();
void sub_1994a3();
void sub_199775();
void sub_1997d1();
void sub_19982d();
void sub_199889();
void sub_199917();
void sub_199993();
void sub_1999e9();
void sub_199ab8();
void sub_199ae8();
void sub_199c0e();
void sub_199dd1();
void sub_199f56();
void sub_19a0dc();
void sub_19a217();
void sub_19a2ac();
void sub_19a337();
void sub_19a526();
void sub_19a640();
void sub_19a69d();
void sub_19a6d2();
void sub_19a865();
void sub_19abcd();
void sub_19ac27();
void sub_19ac48();
void sub_19af26();
void sub_19af3f();
void sub_19af54();
void sub_19af98();
void sub_19afcd();
void sub_19aff6();
void sub_19b091();
void sub_19b153();
void sub_19b1d2();
void sub_19b1f5();
void sub_19b200();
void sub_19b2ba();
void sub_19b31e();
void sub_19b33a();
void sub_19b38b();
void sub_19b431();
void sub_19b55e();
void sub_19b588();
void sub_19b5c8();
void sub_19b66a();
void sub_19b679();
void sub_19b766();
void sub_19b794();
void sub_19b80e();
void sub_19b8ca();
void sub_19bdd9();
void sub_19c58a();
void sub_19c7ca();
void sub_19c91e();
void sub_19ca9b();
void sub_19cb51();
void sub_19cb74();
void sub_19cbc0();
void sub_19cc15();
void sub_19ccf4();
void sub_19cd59();
void sub_19cdc5();
void sub_19cde3();
void sub_19ce21();
void sub_19ce55();
void sub_19ceb7();
void sub_19cf11();
void sub_19cf9d();
void sub_19d0f3();
void sub_19d1d6();
void sub_19d338();
void sub_19d389();
void sub_19d416();
void sub_19d4cb();
void sub_19d55b();
void sub_19d5f1();
void sub_19d86c();
void sub_19dad1();
void sub_19dc9c();
void sub_19dceb();
void sub_19dd20();
void sub_19de2c();
void sub_19de6a();
void sub_19dfc7();
void sub_19e865();
void sub_19e8ec();
void sub_19e906();
void sub_19e929();
void sub_19e96d();
void sub_19e997();
void sub_19e9d5();
void sub_19eabf();
void sub_19ead2();
void sub_19eb13();
void sub_19eb2c();
void sub_19eb4c();
void sub_19eb60();
void sub_19eb98();
void sub_19ebc0();
void sub_19ebd9();
void sub_19ec33();
void sub_19ec53();
void sub_19ec81();
void sub_19ec95();
void sub_19ecf9();
void sub_19ed3a();
void sub_19ed7f();
void sub_19edc0();
void sub_19ede7();
void sub_19ede8();
void sub_19ee35();
void sub_19ee93();
void sub_19eeac();
void sub_19eed3();
void sub_19eefa();
void sub_19f50a();
void sub_19f612();
void sub_19f8bd();
void sub_19fa00();
void sub_19fb74();
void sub_19fd16();
void sub_19fdd1();
void sub_19ffe1();
void sub_1a0111();
void sub_1a01b1();
void sub_1a0265();
void sub_1a08f5();
void sub_1a0a8f();
void sub_1a0ac5();
void sub_1a0ae9();
void sub_1a0b1f();
void sub_1a0b6b();
void sub_1a0bb0();
void sub_1a1150();
void sub_1a178b();
void sub_1a19aa();
void sub_1a1ab7();
void sub_1a1c1b();
void sub_1a21af();
void sub_1a2223();
void sub_1a2467();
void sub_1a2510();
void sub_1a28a1();
void sub_1a2cc8();
void sub_1a3029();
void sub_1a31e0();
void sub_1a3223();
void sub_1a33f1();
void sub_1a3484();
void sub_1a3503();
void sub_1a35e4();
void sub_1a3660();
void sub_1a3924();
void sub_1a39f0();
void sub_1a3dab();
void sub_1a3fb3();
void sub_1a40e4();
void sub_1a40f3();
void sub_1a413d();
void sub_1a4196();
void sub_1a41bf();
void sub_1a41d7();
void sub_1a41da();
void sub_1a41ee();
void sub_1a4206();
void sub_1a4210();
void sub_1a4261();
void sub_1a426e();
void sub_1a4288();
void sub_1a4408();
void sub_1a4432();
void sub_1a448f();
void sub_1a44d2();
void sub_1a44ff();
void sub_1a45ae();
void sub_1a45e9();
void sub_1a4626();
void sub_1a46ed();
void sub_1a4760();
void sub_1a47d9();
void sub_1a484f();
void sub_1a488e();
void sub_1a4932();
void sub_1a4983();
void sub_1a499a();
void sub_1a49c6();
void sub_1a4a08();
void sub_1a4a30();
void sub_1a4b85();
void sub_1a4c10();
void sub_1a4c45();
void sub_1a4c9b();
void sub_1a4dc6();
void sub_1a4ebf();
void sub_1a4f9d();
void sub_1a501b();
void sub_1a5262();
void sub_1a541a();
void sub_1a543c();
void sub_1a5460();
void sub_1a5541();
void sub_1a55b1();
void sub_1a56f7();
void sub_1a5723();
void sub_1a5767();
void sub_1a5862();
void sub_1a591a();
void sub_1a5973();
void sub_1a5a09();
void sub_1a5a79();
void sub_1a5aa6();
void sub_1a5af8();
void sub_1a5b7a();
void sub_1a5bab();
void sub_1a5c69();
void sub_1a5d2f();
void sub_1a5d8b();
void sub_1a5e0f();
void sub_1a5eec();
void sub_1a5f40();
void sub_1a5f9f();
void sub_1a60a8();
void sub_1a60fb();
void sub_1a6163();
void sub_1a619d();
void sub_1a626e();
void sub_1a62b7();
void sub_1a63ad();
void sub_1a63f0();
void sub_1a645e();
void sub_1a64a0();
void sub_1a66c0();
void sub_1a671d();
void sub_1a675c();
void sub_1a679f();
void sub_1a6813();
void sub_1a68a3();
void sub_1a6a30();
void sub_1a6aa9();
void sub_1a6ae3();
void sub_1a6b49();
void sub_1a6b97();
void sub_1a6bd1();
void sub_1a6cdc();
void sub_1a6d43();
void sub_1a6dd0();
void sub_1a6de0();
void sub_1a6e11();
void sub_1a6ea9();
void sub_1a6f7e();
void sub_1a6fee();
void sub_1a705e();
void sub_1a710d();
void sub_1a7176();
void sub_1a71d2();
void sub_1a7205();
void sub_1a725c();
void sub_1a73f7();
void sub_1a7497();
void sub_1a7548();
void sub_1a7582();
void sub_1a75c5();
void sub_1a761d();
void sub_1a7657();
void sub_1a76bf();
void sub_1a7af5();
void sub_1a7bba();
void sub_1a7ca1();
void sub_1a7d1f();
void sub_1a7d4b();
void sub_1a7dac();
void sub_1a7de6();
void sub_1a7e16();
void sub_1a7f44();
void sub_1a7f75();
void sub_1a7fb4();
void sub_1a8011();
void sub_1a8178();
void sub_1a83f1();
void sub_1a84f3();
void sub_1a8545();
void sub_1a86f4();
void sub_1a87d4();
void sub_1a881e();
void sub_1a88d5();
void sub_1a8984();
void sub_1a89de();
void sub_1a8b51();
void sub_1a8d71();
void sub_1a8fd7();
void sub_1a9122();
void sub_1a92b5();
void sub_1a937c();
void sub_1a953d();
void sub_1a9702();
void sub_1a972c();
void sub_1a9969();
void sub_1a999d();
void sub_1a9b45();
void sub_1a9b6a();
void sub_1a9caa();
void sub_1a9cc8();
void sub_1a9cfc();
void sub_1a9d32();
void sub_1a9ef6();
void sub_1a9f6e();
void sub_1aa241();
void sub_1aa2cb();
void sub_1aa365();
void sub_1aa4d6();
void sub_1aa617();
void sub_1aa6f5();
void sub_1aa739();
void sub_1aa77b();
void sub_1aa7bd();
void sub_1aa7e9();
void sub_1aa9c8();
void sub_1aaaf1();
void sub_1aac35();
void sub_1aac47();
void sub_1aac75();
void sub_1aad07();
void sub_1aae8f();
void sub_1aaeb4();
void sub_1aaf5d();
void sub_1ab048();
void sub_1ab0bd();
void sub_1ab1a0();
void sub_1ab28b();
void sub_1ab3b0();
void sub_1ab4d5();
void sub_1ab614();
void sub_1ab7bc();
void sub_1abac7();
void sub_1abc5e();
void sub_1abc81();
void sub_1abcdb();
void sub_1abd3c();
void sub_1abdc2();
void sub_1abe6f();
void sub_1ac076();
void sub_1ac0ac();
void sub_1ac0e6();
void sub_1ac14b();
void sub_1ac6c2();
void sub_1acf41();
void sub_1acf85();
void sub_1acfbe();
void sub_1ad023();
void sub_1ad0a9();
void sub_1ad60c();
void sub_1ad6ac();
void sub_1adb5e();
void sub_1add0c();
void sub_1addbd();
void sub_1aded4();
void sub_1ae085();
void sub_1ae150();
void sub_1ae178();
void sub_1ae440();
void sub_1ae4cd();
void sub_1aeb5f();
void sub_1aebd1();
void sub_1aecd8();
void sub_1af1f8();
void sub_1af790();
void sub_1af8ad();
void sub_1af9a5();
void sub_1afa94();
void sub_1afb99();
void sub_1afc31();
void sub_1afcc3();
void sub_1afe37();
void sub_1aff0f();
void sub_1affa8();
void sub_1b010b();
void sub_1b01ef();
void sub_1b02ce();
void sub_1b03ad();
void sub_1b0578();
void sub_1b06e9();
void sub_1b08a8();
void sub_1b0956();
void sub_1b09c0();
void sub_1b0ce8();
void sub_1b0d5d();
void sub_1b0f94();
void sub_1b106c();
void sub_1b1153();
void sub_1b13ae();
void sub_1b1477();
void sub_1b1589();
void sub_1b162d();
void sub_1b1722();
void sub_1b1884();
void sub_1b199d();
void sub_1b1b53();
void sub_1b1bcf();
void sub_1b1c2f();
void sub_1b1c89();
void sub_1b1dfc();
void sub_1b1ed1();
void sub_1b2062();
void sub_1b2097();
void sub_1b2507();
void sub_1b2706();
void sub_1b2c74();
void sub_1b32d4();
void sub_1b331f();
void sub_1b348a();
void sub_1b3780();
void sub_1b396c();
void sub_1b39a9();
void sub_1b3a39();
void sub_1b3e6c();
void sub_1b403a();
void sub_1b43e8();
void sub_1b47fd();
void sub_1b483f();
void sub_1b742d();
void sub_1b7a0e();
void sub_1b7a70();
void sub_1b7ace();
void sub_1b7b0e();
void sub_1b7b4c();
void sub_1b7b8f();
void sub_1b7bb4();
void sub_1b7de6();
void sub_1b7e2c();
void sub_1b7e84();
void sub_1b7f05();
void sub_1b7f2d();
void sub_1b7f5b();
void sub_1b7fe1();
void sub_1b8023();
void sub_1b8061();
void sub_1b8158();
void sub_1b819a();
void sub_1b8222();
void sub_1b8406();
void sub_1b8571();
void sub_1b85c3();
void sub_1b85ea();
void sub_1b86db();
void sub_1b87da();
void sub_1b883f();
void sub_1b8896();
void sub_1b88e9();
void sub_1b8929();
void sub_1b89c2();
void sub_1b8a03();
void sub_1b8c22();
void sub_1b8cbe();
void sub_1b8fa1();
void sub_1b9045();
void sub_1b9118();
void sub_1b923b();
void sub_1b92e3();
void sub_1b939a();
void sub_1b93d9();
void sub_1b9489();
void sub_1b95d0();
void sub_1b9691();
void sub_1b969f();
void sub_1b976b();
void sub_1b97ac();
void sub_1b9817();
void sub_1b988f();
void sub_1b9b4a();
void sub_1b9c1d();
void sub_1b9c93();
void sub_1b9df4();
void sub_1b9e65();
void sub_1b9ebd();
void sub_1b9ef6();
void sub_1b9f2c();
void sub_1b9f73();
void sub_1ba305();
void sub_1ba31d();
void sub_1ba3f2();
void sub_1ba491();
void sub_1ba4b5();
void sub_1ba52c();
void sub_1ba547();
void sub_1bae66();
void sub_1bb45a();
void sub_1bc02f();
void sub_1bce74();
void sub_1bdba0();
void sub_1c05c4();
void sub_1c4758();
void sub_1c4a7b();
void sub_1c4d1e();
void sub_1c4d61();
void sub_1c4e46();
void sub_1c4e75();
void sub_1c4ef3();
void sub_1c6386();
void sub_1c79f6();
void sub_1c7aaf();
void sub_1c7b60();
void sub_1c7c02();
void sub_1c7c1f();
void sub_1c7c4c();
void sub_1c7cc4();
void sub_1c7edd();
void sub_1c7f24();
void sub_1c7f2e();
void sub_1c7f51();
void sub_1c7f69();
void sub_1c7f7f();
void sub_1c7fa7();
void sub_1c7fdb();
void sub_1c8010();
void sub_1c8047();
void sub_1c80b3();
void sub_1c8167();
void sub_1c822f();
void sub_1c824a();
void sub_1c82e0();
void sub_1c8322();
void sub_1c841e();
void sub_1c844e();
void sub_1c847d();
void sub_1c8492();
void sub_1c849e();
void sub_1c8507();
void sub_1c8590();
void sub_1c875a();
void sub_1c897a();
void sub_1c8995();
void sub_1c899d();
void sub_1c89b1();
void sub_1c8a0b();
void sub_1c8a2a();
void sub_1c8bb1();
void sub_1c8c94();
void sub_1c8cf2();
void sub_1c8d0b();
void sub_1c8dce();
void sub_1c8f22();
void sub_1c8f72();
void sub_1c8fbd();
void sub_1c900d();
void sub_1c9028();
void sub_1c9058();
void sub_1c9123();
void sub_1c9140();
void sub_1c918d();
void sub_1c928c();
void sub_1c92c7();
void sub_1c9307();
void sub_1c9318();
void sub_1c939d();
void sub_1c93b0();
void sub_1c93d3();
void sub_1c940a();
void sub_1c9634();
void sub_1c96dc();
void sub_1c9733();
void sub_1c9764();
void sub_1c9823();
void sub_1c9864();
void sub_1c9875();
void sub_1c987b();
void sub_1c98ad();
void sub_1c98b2();
void sub_1c9929();
void sub_1c9a00();
void sub_1c9c7c();
void sub_1c9d20();
void sub_1c9d48();
void sub_1c9d9f();
void sub_1c9dd1();
void sub_1c9e15();
void sub_1c9e7c();
void sub_1c9f24();
void sub_1ca02f();
void sub_1ca06e();
void sub_1ca1cf();
void sub_1ca243();
void sub_1ca291();
void sub_1ca364();
void sub_1ca413();
void sub_1ca557();
void sub_1ca5ce();
void sub_1ca5d2();
void sub_1ca60a();
void sub_1ca9b0();
void sub_1ca9eb();
void sub_1caad0();
void sub_1caaf8();
void sub_1cadab();
void sub_1caddb();
void sub_1caf1a();
void sub_1caf2d();
void sub_1caf53();
void sub_1cb069();
void sub_1cb1ea();
void sub_1cb1f3();
void sub_1ce56a();
void sub_1ce68e();
void sub_1ce6b5();
void sub_1ce936();
void sub_1cea69();
void sub_1ceac4();
void sub_1ceae8();
void sub_1ceb0b();
void sub_1ceb6c();
void sub_1cec47();
void sub_1cec4e();
void sub_1cf097();
void sub_1cf0af();
void sub_1cf0b5();
void sub_1cf0bb();
void sub_1cf0d9();
void sub_1cf12e();
void sub_1cf150();
void sub_1cf168();
void sub_1cf243();
void sub_1cf2bf();
void sub_1cf2e3();
void sub_1cf312();
void sub_1cf330();
void sub_1cf378();
void sub_1cf51b();
void sub_1cfb4f();
void sub_1cfb91();
void sub_1cfbdb();
void sub_1cfc1b();
void sub_1cfc64();
void sub_1cfc7f();
void sub_1d0188();

void sub_196010() // 0160:196010 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x0000068a;
    edi = 0x0039be08;
    esi = 0x0039d832;
    for (; cx != 0; --cx) movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19602a() // 0160:19602a +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x0000068a;
    edi = 0x0039d832;
    esi = 0x0039be08;
    for (; cx != 0; --cx) movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    sub_1aac35();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_196049() // 0160:196049 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0x00000200;
    edi = 0x00001356;
    edx = 0;
    ebx = 0;
    ecx = 0;
    eax = 0;
    memoryASet32(ds, 0x39ef7a, edx);
    memoryASet32(ds, 0x39ef7e, edx);
    memoryASet32(ds, 0x1dc0c4, edx);
    memoryASet32(ds, 0x39ef82, edx);
    memoryASet32(ds, 0x39bde0, ebx);
    memoryASet32(ds, 0x39bdf8, ebx);
    memoryASet32(ds, 0x39f248, ebx);
    memoryASet32(ds, 0x39f250, ebx);
    memoryASet32(ds, 0x39f24c, ebx);
    memoryASet32(ds, 0x39f254, ebx);
    memoryASet32(ds, 0x39bdf4, esi);
    memoryASet32(ds, 0x39bdf0, esi);
    memoryASet32(ds, 0x39bde8, ebx);
    memoryASet32(ds, 0x39bde4, ebx);
    memoryASet32(ds, 0x39be00, esi);
    memoryASet32(ds, 0x39be04, esi);
    memoryASet32(ds, 0x39bdec, ebx);
    memoryASet32(ds, 0x39bdfc, ebx);
    memoryASet32(ds, 0x39bdc0, ebx);
    memoryASet32(ds, 0x39bdd8, ebx);
    memoryASet32(ds, 0x39bdc8, ebx);
    memoryASet32(ds, 0x39ef88, ebx);
    memoryASet32(ds, 0x39ef8c, ebx);
    memoryASet32(ds, 0x39f238, ebx);
    memoryASet32(ds, 0x39ef90, ebx);
    memoryASet32(ds, 0x39ef94, edi);
    memoryASet32(ds, 0x39ef98, ebx);
    memoryASet32(ds, 0x39ef9c, ebx);
    memoryASet32(ds, 0x39efa4, ebx);
    memoryASet32(ds, 0x39efa8, ebx);
    memoryASet32(ds, 0x39efb0, ebx);
    memoryASet32(ds, 0x39efb4, ebx);
    memoryASet32(ds, 0x39efb8, ebx);
    memoryASet32(ds, 0x39efc4, ecx);
    memoryASet32(ds, 0x39efc8, ecx);
    memoryASet32(ds, 0x39efcc, ecx);
    memoryASet32(ds, 0x39efd0, ecx);
    memoryASet32(ds, 0x39efd4, ecx);
    memoryASet32(ds, 0x39efe0, ecx);
    memoryASet32(ds, 0x39efe8, ecx);
    memoryASet32(ds, 0x39eff4, ecx);
    memoryASet32(ds, 0x39f010, ecx);
    memoryASet32(ds, 0x39f014, eax);
    memoryASet32(ds, 0x39f018, eax);
    edx = 0x0000ffff;
    esi = 0x00000010;
    ebx = 0x000001f4;
    edi = 0x00000001;
    eax = memoryAGet32(ds, 0x39f01c);
    memoryASet16(ds, 0x39ef86, dx);
    memoryASet32(ds, 0x39efac, esi);
    memoryASet32(ds, 0x39efc0, ebx);
    memoryASet32(ds, 0x39efd8, esi);
    memoryASet32(ds, 0x39efdc, esi);
    edx = 0x00000096;
    memoryASet32(ds, 0x39effc, edi);
    memoryASet32(ds, 0x39efa0, edx);
    memoryASet32(ds, 0x39efbc, edx);
    edx = esi;
    esi = 0x000000e6;
    memoryASet32(ds, 0x39efec, edx);
    memoryASet32(ds, 0x39eff0, edx);
    memoryASet32(ds, 0x39efe4, esi);
    edx = 0;
    esi = 0x00000513;
    memoryASet32(ds, 0x39f258, edx);
    memoryASet32(ds, 0x39f230, edx);
    memoryASet32(ds, 0x39f000, edx);
    memoryASet32(ds, 0x39f004, edx);
    memoryASet32(ds, 0x39f008, edx);
    memoryASet32(ds, 0x39f00c, edx);
    memoryASet32(ds, 0x39eff8, esi);
    memoryASet(ds, eax, 0x00);
    esi = 0x00010000;
    memoryASet32(ds, 0x39f020, edx);
    memoryASet32(ds, 0x39f024, edx);
    memoryASet32(ds, 0x39f028, edx);
    memoryASet32(ds, 0x39f02c, edx);
    memoryASet32(ds, 0x39f030, ecx);
    memoryASet32(ds, 0x39f23c, esi);
    memoryASet32(ds, 0x39f240, edx);
    memoryASet32(ds, 0x39f244, edx);
    memoryASet32(ds, 0x39f034, edx);
    memoryASet32(ds, 0x39f038, edx);
    memoryASet32(ds, 0x39f03c, edx);
    eax = 0x00000004;
    memoryASet32(ds, 0x39f040, ecx);
    memoryASet32(ds, 0x39f048, edx);
    memoryASet32(ds, 0x39f04c, edx);
    memoryASet32(ds, 0x39f050, edx);
    memoryASet32(ds, 0x39f054, edx);
    memoryASet32(ds, 0x39f058, edx);
    memoryASet32(ds, 0x39f064, edx);
    memoryASet32(ds, 0x39f068, edx);
    memoryASet32(ds, 0x39f120, edi);
    esi = 0;
    ecx = 0x00000096;
    edx = 0x00000040;
    memoryASet32(ds, 0x39f044, esi);
    memoryASet32(ds, 0x39f060, esi);
    memoryASet32(ds, 0x39f06c, eax);
    memoryASet32(ds, 0x39f074, esi);
    memoryASet32(ds, 0x39f07c, esi);
    memoryASet32(ds, 0x39f080, esi);
    memoryASet32(ds, 0x39f084, esi);
    memoryASet32(ds, 0x39f05c, ecx);
    memoryASet32(ds, 0x39f070, edx);
    eax = 0;
    ecx = 0x0000003d;
    memoryASet32(ds, 0x39f088, eax);
    memoryASet32(ds, 0x39f08c, eax);
    memoryASet32(ds, 0x39f090, eax);
    memoryASet32(ds, 0x39f094, eax);
    memoryASet32(ds, 0x39f098, eax);
    memoryASet32(ds, 0x39f09c, eax);
    memoryASet32(ds, 0x39f0a0, eax);
    memoryASet32(ds, 0x39f0a4, eax);
    memoryASet32(ds, 0x39f0a8, eax);
    memoryASet32(ds, 0x39f0ac, eax);
    memoryASet32(ds, 0x39f234, eax);
    memoryASet32(ds, 0x39f0b0, eax);
    memoryASet32(ds, 0x39f0b4, eax);
    memoryASet32(ds, 0x39f0b8, eax);
    memoryASet32(ds, 0x39f0bc, eax);
    memoryASet32(ds, 0x39f0c0, eax);
    memoryASet32(ds, 0x39f0c4, eax);
    memoryASet32(ds, 0x39f0c8, eax);
    memoryASet32(ds, 0x39f0cc, eax);
    memoryASet32(ds, 0x39f0d0, eax);
    memoryASet32(ds, 0x39f0d4, eax);
    memoryASet32(ds, 0x39f0d8, eax);
    memoryASet32(ds, 0x39f0dc, eax);
    memoryASet32(ds, 0x39f0e0, eax);
    memoryASet32(ds, 0x39f0e4, eax);
    memoryASet32(ds, 0x39f0e8, eax);
    memoryASet32(ds, 0x39f22c, eax);
    memoryASet32(ds, 0x39f0ec, eax);
    memoryASet32(ds, 0x39f0f0, eax);
    memoryASet32(ds, 0x39f0f4, eax);
    memoryASet32(ds, 0x39f0f8, eax);
    memoryASet32(ds, 0x39f0fc, eax);
    memoryASet32(ds, 0x39f110, eax);
    memoryASet32(ds, 0x39f114, eax);
    memoryASet32(ds, 0x39f118, eax);
    memoryASet32(ds, 0x39f11c, eax);
    memoryASet32(ds, 0x39f124, eax);
    memoryASet32(ds, 0x39f128, eax);
    memoryASet32(ds, 0x39f12c, eax);
    memoryASet32(ds, 0x39f130, eax);
    memoryASet32(ds, 0x39f134, eax);
    memoryASet32(ds, 0x39f138, eax);
    memoryASet32(ds, 0x39f13c, eax);
    memoryASet32(ds, 0x39f140, eax);
    memoryASet32(ds, 0x39f144, eax);
    memoryASet32(ds, 0x39f148, eax);
    memoryASet32(ds, 0x39f14c, eax);
    memoryASet32(ds, 0x39f150, eax);
    memoryASet32(ds, 0x39f154, eax);
    memoryASet32(ds, 0x39f158, eax);
    memoryASet32(ds, 0x39f15c, eax);
    memoryASet32(ds, 0x39f160, eax);
    memoryASet32(ds, 0x39f164, eax);
    memoryASet32(ds, 0x39f168, eax);
    memoryASet32(ds, 0x39f16c, eax);
    memoryASet32(ds, 0x39f170, eax);
    memoryASet32(ds, 0x39f174, eax);
    memoryASet32(ds, 0x39f078, ecx);
    ebp = 0x00000010;
    edi = 0x00000003;
    memoryASet32(ds, 0x39f178, eax);
    memoryASet32(ds, 0x39f17c, eax);
    memoryASet32(ds, 0x39f180, eax);
    memoryASet32(ds, 0x39f184, eax);
    memoryASet32(ds, 0x39f188, eax);
    memoryASet32(ds, 0x39f18c, eax);
    memoryASet32(ds, 0x39f190, eax);
    memoryASet32(ds, 0x39f194, eax);
    memoryASet32(ds, 0x39f198, eax);
    memoryASet32(ds, 0x39f19c, eax);
    memoryASet32(ds, 0x39f1a0, eax);
    memoryASet32(ds, 0x39f1a4, eax);
    memoryASet32(ds, 0x39f1a8, eax);
    memoryASet32(ds, 0x39f1ac, eax);
    memoryASet32(ds, 0x39f1b0, eax);
    memoryASet32(ds, 0x39f1b4, eax);
    memoryASet32(ds, 0x39f1b8, eax);
    memoryASet32(ds, 0x39f1bc, eax);
    memoryASet32(ds, 0x39f1c0, eax);
    memoryASet32(ds, 0x39f1c8, esi);
    memoryASet32(ds, 0x39f1d0, esi);
    memoryASet32(ds, 0x39f1d4, esi);
    memoryASet32(ds, 0x39f1d8, esi);
    memoryASet32(ds, 0x39f1dc, esi);
    memoryASet32(ds, 0x39f1e0, esi);
    memoryASet32(ds, 0x39f1e4, esi);
    memoryASet32(ds, 0x39f1ec, esi);
    memoryASet32(ds, 0x39f1f0, esi);
    memoryASet32(ds, 0x39f1f4, esi);
    memoryASet32(ds, 0x39f1fc, esi);
    memoryASet32(ds, 0x39f210, esi);
    memoryASet32(ds, 0x39f218, esi);
    memoryASet32(ds, 0x39f21c, esi);
    memoryASet32(ds, 0x39f224, esi);
    memoryASet32(ds, 0x39f228, esi);
    ebx = 0;
    eax = 0xffffffff;
    memoryASet32(ds, 0x39f1cc, ebx);
    memoryASet32(ds, 0x39f1e8, ebx);
    memoryASet32(ds, 0x39f1f8, ebp);
    memoryASet32(ds, 0x39f214, ebx);
    memoryASet32(ds, 0x39f100, edi);
    memoryASet32(ds, 0x39f104, edi);
    memoryASet32(ds, 0x39f108, edi);
    memoryASet32(ds, 0x39f10c, edi);
    memoryASet32(ds, 0x39f220, ebx);
    memoryASet32(ds, 0x39f1c4, eax);
    goto loc_196658;
    // gap 344 bytes
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_196528() // 0160:196528 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = memoryAGet32(ds, 0x39bdd8);
    ebx = 0;
loc_196539: // 0160:196539
    ah = 0;
    edx = 0;
    ecx = 0;
    memoryASet(ds, ebx + 3783080, ah);
    eax = 0;
    dl = memoryAGet(ds, ebx + 3783082);
    al = memoryAGet(ds, ebx + 3783081);
    edx = edx + edx*4;
    eax += eax;
    cl = memoryAGet(ds, ebx + 3783083);
    edx += eax;
    edx += ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<2) & 0x80000000) & stop("xxx");
    edx <<= 3;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x03);
    if (ebp > 0x00000009)
        goto loc_196646;
    edx = eax * 0x000000e0;
    edi = eax * 0x000000f0;
    esi = eax * 0x000000c0;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx <<= 8;
    memoryASet32(ds, esp + 4, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, esp, eax);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    indirectJump(cs, memoryAGet32(cs, stop("GetOpAddress"))); return; // 0160:1965d2;
    // gap 108 bytes
loc_196646: // 0160:196646
    ebx += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x000002c0)
        goto loc_196539;
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_196688() // 0160:196688 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x39bdc8);
    if (edx == 0x00000003)
        goto loc_19669f;
    if (edx == 0x00000002)
        goto loc_19669f;
    if (edx != 0x00000009)
        goto loc_1966cc;
loc_19669f: // 0160:19669f
    edx = 0x002af668;
    eax = 0x001d1004;
    sub_19b431();
    edx = 0x003731a8;
    eax = 0x001d100f;
    sub_19b431();
    edx = 0x003875a8;
    eax = 0x001d1020;
    sub_19b431();
loc_1966cc: // 0160:1966cc
    eax = memoryAGet32(ds, 0x39bdd8);
    memoryASet32(ds, 0x39bdc8, eax);
    if (eax > 0x00000009)
        goto loc_196864;
    indirectJump(cs, memoryAGet32(cs, stop("GetOpAddress"))); return; // 0160:1966df;
    // gap 381 bytes
loc_196864: // 0160:196864
    ah = 0;
    esi = memoryAGet32(ds, 0x1dc030);
    memoryASet(ds, 0x39b9a8, ah);
    memoryASet(ds, 0x39b9a9, ah);
    memoryASet(ds, 0x39b9aa, ah);
    memoryASet(ds, 0x39b9ab, ah);
    if (!esi)
        goto loc_1968a3;
    eax = 0;
loc_19688a: // 0160:19688a
    eax++;
    dl = memoryAGet(ds, eax + 3783079);
    memoryASet(ds, eax + 1967623, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_19688a;
    sub_196528();
loc_1968a3: // 0160:1968a3
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1968c6() // 0160:1968c6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = 0x0039b9a8;
    eax = 0x001d106b;
    sub_19b431();
    edx = 0x003731a8;
    eax = 0x001d11d7;
    sub_19b431();
    edx = 0x003875a8;
    eax = 0x001d11e8;
    sub_19b431();
    edx = 0x002af668;
    eax = 0x001d1004;
    sub_19b431();
    edx = 0x0026e868;
    eax = 0x001d11f9;
    sub_19b431();
    edx = 0x00211fc8;
    eax = 0x001d1209;
    sub_19b431();
    edx = 0x0026c068;
    eax = 0x001d1219;
    sub_19b431();
    edx = 0x002ae768;
    eax = 0x001d1229;
    sub_19b431();
    edx = 0x002aa868;
    eax = 0x001d123c;
    sub_19b431();
    edx = 0x002686a8;
    eax = 0x001d124d;
    sub_19b431();
    edx = 0x002695a8;
    eax = 0x001d125d;
    ebx = 0x00000008;
    sub_19b431();
    edx = 0x002197c8;
    eax = 0x001d126d;
    esi = 0x00000001;
    sub_19b431();
    edx = 0x003a85e8;
    eax = 0x001d127d;
    ecx = 0;
    sub_19b431();
    edx = 0x00000007;
    memoryASet32(ds, 0x1df628, ebx);
    memoryASet32(ds, 0x1df62c, ecx);
    memoryASet32(ds, 0x1df630, esi);
    memoryASet32(ds, 0x1df634, ecx);
    memoryASet32(ds, 0x1df624, ecx);
    memoryASet32(ds, 0x1df5c0, edx);
    bl = 0;
    sub_1a41d7();
    memoryASet(ds, 0x39b9ab, bl);
    dl = 0;
    ah = 0;
    memoryASet(ds, 0x39b9a9, dl);
    dh = 0;
    memoryASet(ds, 0x39b9a8, ah);
    memoryASet(ds, 0x39b9aa, dh);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1969ec() // 0160:1969ec +long
{
    esp -= 4;
    push32(ebx);
    push32(ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792134, ebx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792054, ebx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792030);
    ebp = 0x00000001;
    eax -= 0x00004000;
    memoryASet32(ds, 0x39efa4, ebp);
    memoryASet32(ds, 0x39efa0, ebx);
    memoryASet32(ds, 0x39efa8, eax);
    ebp = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_196a3e() // 0160:196a3e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if (memoryAGet32(ds, 0x39efa0) != 0x00000000)
        goto loc_196af7;
    if ((int32_t)memoryAGet32(ds, 0x39efa8) <= (int32_t)0xffff6000)
        goto loc_196af7;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792134) != 0x00000000)
        goto loc_196a7b;
    if (memoryAGet32(ds, 0x1dc030) == 0x00000000)
        goto loc_196a9b;
loc_196a7b: // 0160:196a7b
    ebp = memoryAGet32(ds, 0x39efa4);
    ebp -= 0x00000055;
    eax = memoryAGet32(ds, 0x39efa8);
    memoryASet32(ds, 0x39efa4, ebp);
    if (stop("postCondition"))
        goto loc_196a9b;
    edx = 0;
    memoryASet32(ds, 0x39efa0, edx);
loc_196a9b: // 0160:196a9b
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, 0x39efa4);
    ebx = memoryAGet32(ds, 0x39efa8);
    ecx = memoryAGet32(ds, 0x39efa4);
    ebx += eax;
    eax = memoryAGet32(ds, 0x39f078);
    ecx += eax;
    memoryASet32(ds, 0x39efa8, ebx);
    memoryASet32(ds, 0x39efa4, ecx);
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, edx + 3792030))
        goto loc_196af7;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    eax <<= 3;
    ebp = eax;
    memoryASet32(ds, 0x39efa4, eax);
    ebp = -ebp;
    memoryASet32(ds, 0x39efa4, ebp);
    eax = memoryAGet32(ds, edx + 3792030);
    memoryASet32(ds, 0x39efa8, eax);
loc_196af7: // 0160:196af7
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_196afc() // 0160:196afc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x39efa0) != 0x00000000)
        goto loc_196b5a;
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3792026) == 0x00000000)
        goto loc_196b5a;
    eax = memoryAGet32(ds, 0x39efa8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax + -38;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000010);
    ecx = 0x00000010;
    edx = eax + -8;
    ebx = esi;
    eax = 0x002992d8;
    sub_19cb74();
loc_196b5a: // 0160:196b5a
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_196b5f() // 0160:196b5f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000007);
    ecx = 0x000000a1;
    ebx = 0x0000002c;
    push32(0x00000014);
    edx = 0x002c69a8;
    eax = 0x0029a6c8;
    sub_19cc15();
    stop("stack_below", "0160:196b84");
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_196b8d() // 0160:196b8d +long
{
    esp -= 4;
    goto loc_196b8d;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1326 bytes
loc_196b8d: // 0160:196b8d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x39ef94);
    edx = eax;
    esi = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = eax;
    if (stop("postCondition"))
        goto loc_196bac;
    esi ^= eax;
loc_196bac: // 0160:196bac
    if (memoryAGet32(ds, 0x1df5ac) != 0x00000046)
        goto loc_196bc2;
    if (memoryAGet32(ds, 0x1dc030) == 0x00000000)
        goto loc_196658;
loc_196bc2: // 0160:196bc2
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x39ef90, eax);
    eax = memoryAGet32(ds, 0x1dc030);
    eax &= 0x0000000f;
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_196658;
    ebx = 0x0000000a;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi = memoryAGet32(ds, 0x1dc0a0);
    edi -= 0x00000028;
    ebp = edi;
    ebp <<= 2;
    ebp += edi;
    edi = 0x002c69b8;
    ebp <<= 6;
    ecx = 0x0000000f;
    edi += ebp;
    ebx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x0026e958;
    edi = 0x0000000a;
    sub_1c4e46();
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebp += 0x002c69c0;
    ecx = 0x0000000f;
    eax = edx;
    ebx = 0x00000008;
    eax <<= 3;
    edx = ebp;
    eax += 0x0026e958;
    sub_1c4e46();
    goto loc_196658;
}
void sub_196c52() // 0160:196c52 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = edx;
    esi = ebx;
    edx = eax + -32;
    eax = edx;
    eax <<= 2;
    eax += edx;
    esi = ebx + eax;
    eax = esi + 5;
    ebp = 0;
    memoryASet32(ds, esp, eax);
loc_196c72: // 0160:196c72
    ecx = memoryAGet32(ds, esp);
    edx = edi;
    eax = esi;
loc_196c79: // 0160:196c79
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_196c79;
    edx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    esi += 0x00000128;
    edx += 0x00000128;
    ebp++;
    memoryASet32(ds, esp, edx);
    if ((int32_t)ebp < (int32_t)0x00000006)
        goto loc_196c72;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_196ca9() // 0160:196ca9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    push32(eax);
    esi = edx;
    edx = 0;
    memoryASet32(ds, esp + 8, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 4;
    eax -= edx;
    edx = 0x002695a8;
    eax <<= 4;
    edx += eax;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    ebp = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    ebx = 0x00204bc8;
    eax <<= 8;
    ebx += eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ecx = 0x00000064;
    eax += ebx;
    edi = 0;
    ebp = eax + 1940;
loc_196d29: // 0160:196d29
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = edx + 48;
    if (eax != 0x00000030)
        goto loc_196d59;
    if (memoryAGet32(ds, esp + 8) != 0x00000000)
        goto loc_196d59;
    if ((int32_t)edi >= (int32_t)0x00000002)
        goto loc_196d59;
    eax = 0x00000020;
    goto loc_196d5d;
loc_196d59: // 0160:196d59
    memoryASet32(ds, esp + 8, memoryAGet32(ds, esp + 8) + 1);
loc_196d5d: // 0160:196d5d
    ebx = memoryAGet32(ds, esp + 4);
    edx = ebp;
    sub_196c52();
    ebx = 0x0000000a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi++;
    ebp += 0x00000005;
    ecx = eax;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_196d29;
    eax = memoryAGet32(ds, esp) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, eax + 3792094, edx);
    esp += 0x0000000c;
    goto loc_198141;
    // gap 5031 bytes
loc_198141: // 0160:198141
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_196d9a() // 0160:196d9a +long
{
    esp -= 4;
    goto loc_196d9a;
loc_196655: // 0160:196655
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1851 bytes
loc_196d9a: // 0160:196d9a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 4;
    eax -= edx;
    edx = 0x002695a8;
    eax <<= 4;
    edx += eax;
    ebp = 0x00000003;
    memoryASet32(ds, esp, edx);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edx = eax;
    eax <<= 4;
    ebx = 0x00204bc8;
    eax -= edx;
    edx = esi;
    eax <<= 8;
    edx = sar32(edx, 0x1f);
    ebx += eax;
    eax = esi;
    idiv32(ebp);
    esi = esi * 0x000000ac;
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ecx = 0x00000064;
    eax += ebx;
    edi = 0;
    ebp = eax + 1920;
loc_196e1d: // 0160:196e1d
    eax = memoryAGet32(ds, esi + 3792102);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = edx + 48;
    if (eax != 0x00000030)
        goto loc_196e51;
    if (memoryAGet32(ds, esp + 4) != 0x00000000)
        goto loc_196e51;
    if ((int32_t)edi >= (int32_t)0x00000002)
        goto loc_196e51;
    eax = 0x00000020;
    goto loc_196e55;
loc_196e51: // 0160:196e51
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
loc_196e55: // 0160:196e55
    ebx = memoryAGet32(ds, esp);
    edx = ebp;
    sub_196c52();
    ebx = 0x0000000a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi++;
    ebp += 0x00000005;
    ecx = eax;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_196e1d;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3792090, eax);
    goto loc_196655;
}
void sub_196e87() // 0160:196e87 +long
{
    esp -= 4;
    goto loc_196e87;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2088 bytes
loc_196e87: // 0160:196e87
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = 0;
    ebp = 0;
loc_196e94: // 0160:196e94
    eax = 0x0000000f;
    ecx = edi + eax;
    goto loc_196ea0;
loc_196e9e: // 0160:196e9e
    ecx--;
    eax--;
loc_196ea0: // 0160:196ea0
    esi = memoryAGet(ds, ecx + 1949936);
    if (esi == 0x00000020)
        goto loc_196e9e;
    ebp += 0x000000ac;
    eax++;
    edi += 0x00000010;
    memoryASet32(ss, ebp + 3791914, eax);
    if (edi != 0x00000100)
        goto loc_196e94;
    dl = 0x80;
    eax = 0;
loc_196ec8: // 0160:196ec8
    eax++;
    memoryASet(ds, eax + 2116551, dl);
    if ((int32_t)eax < (int32_t)0x00001c20)
        goto loc_196ec8;
    edx = 0x00000010;
    ebp = 0;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 4, ebp);
loc_196ee4: // 0160:196ee4
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax = eax * 0x000006f0;
    edi = 0x002695a8;
    edx = ebp;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    edi += eax;
    eax = ebp;
    idiv32(ecx);
    eax = eax * 0x00000f00;
    esi = 0x00000003;
    edx = ebp;
    ecx = 0x00204bc8;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = ebp;
    idiv32(esi);
    edx = edx * 0x00000064;
    ebx = ebp;
    ebx <<= 4;
    eax = memoryAGet32(ds, esp);
    esi = ecx + edx;
    memoryASet32(ds, esp + 8, eax);
    ecx = ebx;
loc_196f3d: // 0160:196f3d
    ebx = edi;
    eax = 0;
    edx = esi;
    al = memoryAGet(ds, ecx + 1949936);
    ecx++;
    sub_196c52();
    eax = memoryAGet32(ds, esp + 8);
    esi += 0x00000005;
    if (ecx != eax)
        goto loc_196f3d;
    eax = memoryAGet32(ds, esp + 4);
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_196f6e;
    eax = ebp;
    sub_196d9a();
loc_196f6e: // 0160:196f6e
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ebp++;
    ecx += 0x00000010;
    esi += 0x000000ac;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)ebp < (int32_t)0x00000010)
        goto loc_196ee4;
    esp += 0x0000000c;
    goto loc_196658;
}
void sub_196f97() // 0160:196f97 +long
{
    esp -= 4;
    goto loc_196f97;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2360 bytes
loc_196f97: // 0160:196f97
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    dl = 0x80;
    eax = 0;
loc_196fa4: // 0160:196fa4
    eax++;
    memoryASet(ds, eax + 2139591, dl);
    if ((int32_t)eax < (int32_t)0x00000780)
        goto loc_196fa4;
    ebx = 0x00000010;
    ecx = 0x0020a5c8;
    edx = 0;
    esi = 0x002695a8;
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
loc_196fd2: // 0160:196fd2
    ecx = memoryAGet32(ds, esp + 12);
    edi = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    ebp = memoryAGet32(ds, esp + 8);
    ecx <<= 4;
loc_196fe4: // 0160:196fe4
    ebx = edi;
    eax = 0;
    edx = esi;
    al = memoryAGet(ds, ecx + 1950193);
    ecx++;
    sub_196c52();
    esi += 0x00000005;
    if (ecx != ebp)
        goto loc_196fe4;
    edi = memoryAGet32(ds, esp + 8);
    ebp = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esp + 12);
    edi += 0x00000010;
    ebp += 0x00000050;
    eax += 0x000006f0;
    edx++;
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp, ebp);
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 12, edx);
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_196fd2;
    esp += 0x00000010;
    goto loc_196658;
}
void sub_197034() // 0160:197034 +long
{
    esp -= 4;
    goto loc_197034;
loc_196658: // 0160:196658
    ebp = pop32();
    stop("stack_below", "0160:196658");
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 2517 bytes
loc_197034: // 0160:197034
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000012;
    esi = eax + -6;
    push32(0x00000006);
    edx = memoryAGet32(ds, 0x1dc232);
    eax = 0x0020a5c8;
    push32(edx);
    ecx = esi;
    edx = 0x002c69a8;
    sub_19cc15();
    push32(0x00000140);
    push32(0x00000140);
    edx = 0x002c69a8;
    push32(0x00000006);
    ebx = memoryAGet32(ds, 0x1dc236);
    ecx = memoryAGet32(ds, 0x1dc236);
    push32(ebx);
    ebx = 0x00000130;
    eax = 0x0020a618;
    ebx -= ecx;
    ecx = esi;
    sub_19cc15();
    stop("stack_below", "0160:197094");
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000012;
    edx = 0x002c69a8;
    push32(0x00000006);
    edi = memoryAGet32(ds, 0x1dc23a);
    esi += 0x00000015;
    push32(edi);
    eax = 0x0020a668;
    ecx = esi;
    sub_19cc15();
    stop("stack_below", "0160:1970c0");
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000130;
    edx = 0x002c69a8;
    push32(0x00000006);
    ebp = memoryAGet32(ds, 0x1dc23e);
    eax = 0x0020a6b8;
    push32(ebp);
    ecx = esi;
    ebx -= ebp;
    sub_19cc15();
    goto loc_196658;
}
void sub_1970f5() // 0160:1970f5 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = eax;
    esi = edx;
    memoryASet32(ds, esp + 4, ebx);
    ebp = ecx;
    memoryASet32(ds, esp + 8, edx);
    edx = 0;
    memoryASet32(ds, esp, edx);
loc_19710e: // 0160:19710e
    edi += memoryAGet32(ds, esp + 28);
    if ((int32_t)(esi & esi) <= 0)
        goto loc_1971f5;
    if (edi >= 0x000003c0)
        goto loc_1971f5;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax + eax;
    ax = memoryAGet16(ds, edx + ebx + 2332680);
    ebx = 0;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, 0x39ef86);
    ebx &= eax;
    eax = esi * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= ebx;
    if (!eax)
        goto loc_1971f5;
    ebx = esi * 0x000003c0;
    ecx = edx;
    ebx += edi;
loc_19718a: // 0160:19718a
    if ((int32_t)(esi & esi) <= 0)
        goto loc_197274;
    if (edi >= 0x000003c0)
        goto loc_197274;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ax = memoryAGet16(ds, ecx + eax + 2332680);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_197274;
    if ((int32_t)(esi & esi) <= 0)
        goto loc_197274;
    ebx -= 0x000003c0;
    esi--;
    goto loc_19718a;
loc_1971f5: // 0160:1971f5
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_19720b: // 0160:19720b
    if ((int32_t)(esi & esi) <= 0)
        goto loc_197255;
    if (edi >= 0x000003c0)
        goto loc_197255;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 2332680);
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_19725c;
loc_197255: // 0160:197255
    eax = 0x00000001;
    goto loc_19725e;
loc_19725c: // 0160:19725c
    eax = 0;
loc_19725e: // 0160:19725e
    if (!eax)
        goto loc_197273;
    if ((int32_t)esi >= (int32_t)0x00000190)
        goto loc_197273;
    ebx += 0x000003c0;
    esi++;
    goto loc_19720b;
loc_197273: // 0160:197273
    esi--;
loc_197274: // 0160:197274
    ebx = memoryAGet32(ds, esp);
    ebx++;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_19710e;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, eax, edi);
    memoryASet32(ss, ebp, esi);
    ebx = esi + -4;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1972fc;
    if (edi >= 0x000003c0)
        goto loc_1972fc;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = edi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1972fc;
    eax = 0xfffdffff;
    goto loc_197314;
loc_1972fc: // 0160:1972fc
    edi = memoryAGet32(ds, esp + 8);
    edx = esi;
    edx -= edi;
    edx <<= 16;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
loc_197314: // 0160:197314
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_19731d() // 0160:19731d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(ebp);
    ecx = eax;
    ebx = edx;
    esi = edx + 320;
loc_19732b: // 0160:19732b
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax)
        goto loc_197338;
    eax = 0x00000020;
loc_197338: // 0160:197338
    eax <<= 3;
    edx = ebx;
    eax -= 0x00000100;
    ecx++;
    eax += 0x002686a8;
    ebx += 0x00000008;
    sub_1c79f6();
    if (ebx != esi)
        goto loc_19732b;
    ecx = memoryAGet32(ds, 0x1dfa0c);
    edx = 0;
    ebx ^= esi;
    memoryASet32(ds, 0x39bddc, edx);
    memoryASet32(ds, 0x39bdcc, ebx);
    if (!ecx)
        goto loc_19737a;
    memoryASet32(ds, 0x39bdd4, 0x00000019);
    goto loc_197384;
loc_19737a: // 0160:19737a
    memoryASet32(ds, 0x39bdd4, 0x00000032);
loc_197384: // 0160:197384
    ebp = 0;
    memoryASet32(ds, 0x39bdc4, ebp);
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197391() // 0160:197391 +long
{
    esp -= 4;
    push32(esi);
    esi = eax;
    edx = memoryAGet32(ds, 0x1dd226);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    memoryASet32(ds, stop("GetOpAddress"), esi);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx + 1;
    memoryASet32(ds, 0x1dd226, ebx);
    memoryASet32(ds, stop("GetOpAddress"), ecx);
    eax = memoryAGet32(ds, 0x1dd226);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1dd226, edx);
    memoryASet32(ds, 0x1dd22a, memoryAGet32(ds, 0x1dd22a) + 1);
    esi = pop32();
    esp += 4;
}
void sub_1973e5() // 0160:1973e5 +long
{
    esp -= 4;
    goto loc_1973e5;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3462 bytes
loc_1973e5: // 0160:1973e5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = memoryAGet32(ds, 0x1dd22e);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebp = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, esp + 12, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx + 1;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd22e, ebx);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, 0x1dd22e);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1dd22e, edx);
    edx = memoryAGet32(ds, 0x1dd232);
    edx++;
    ebx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, 0x1dd232, edx);
    if (ebx != 0x001d269d)
        goto loc_1974cb;
    edi = ebp;
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792086);
    eax = 0x00000028;
    edx += 0x00000008;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 4;
    edx = eax;
    eax = ebx;
    ebx += 0x00000028;
loc_197486: // 0160:197486
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_197486;
    eax ^= ebx;
    ebx = memoryAGet32(ds, esp + 12);
    ebx += edx;
loc_197496: // 0160:197496
    cl = memoryAGet(ds, eax + 1910653);
    eax++;
    memoryASet(ds, ebx, cl);
    ebx++;
    if ((int32_t)eax < (int32_t)0x00000009)
        goto loc_197496;
    eax = memoryAGet32(ds, esp + 12);
    ebx = edi;
    ecx = 0;
    eax += edx;
    esi = ebp * 0x000000ac;
    goto loc_1974c3;
loc_1974b7: // 0160:1974b7
    eax++;
    dl = memoryAGet(ds, ebx + 1949936);
    ebx++;
    ecx++;
    memoryASet(ds, eax + 7, dl);
loc_1974c3: // 0160:1974c3
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esi + 3792086))
        goto loc_1974b7;
loc_1974cb: // 0160:1974cb
    if (memoryAGet32(ds, esp + 12) != 0x001d26c6)
        goto loc_19755d;
    eax = ebp;
    eax <<= 4;
    memoryASet32(ds, esp + 4, eax);
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792086);
    eax = 0x00000028;
    edx += 0x0000000e;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx = eax + 40;
loc_19750a: // 0160:19750a
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_19750a;
    ebx = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, esp + 4);
    ecx = 0;
    ebx += edi;
    esi = ebp * 0x000000ac;
    goto loc_197531;
loc_197526: // 0160:197526
    dl = memoryAGet(ds, eax + 1949936);
    eax++;
    ecx++;
    memoryASet(ds, ebx, dl);
    ebx++;
loc_197531: // 0160:197531
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esi + 3792086))
        goto loc_197526;
    ebx = memoryAGet32(ds, esp + 12);
    eax = 0;
    ebx += edi;
    esi = ebp * 0x000000ac;
loc_197547: // 0160:197547
    ebx++;
    ecx = memoryAGet32(ds, esi + 3792086);
    dl = memoryAGet(ds, eax + 1910694);
    eax++;
    memoryASet(ds, ecx + ebx, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_197547;
loc_19755d: // 0160:19755d
    if (memoryAGet32(ds, esp + 12) != 0x001d26ef)
        goto loc_197646;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    edx <<= 2;
    esi = eax;
    eax = memoryAGet32(ds, edx + 1950258);
    edx = eax;
    ebx = 0x00000005;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = 0x00000028;
    eax += 0x00000016;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 12);
    esi <<= 4;
    ebx = eax + 40;
loc_1975b4: // 0160:1975b4
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_1975b4;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = memoryAGet32(ds, esp + 8);
    edi = 0;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx <<= 2;
    ecx += eax;
    goto loc_1975e9;
loc_1975de: // 0160:1975de
    al = memoryAGet(ds, esi + 1950193);
    esi++;
    edi++;
    memoryASet(ds, ecx, al);
    ecx++;
loc_1975e9: // 0160:1975e9
    eax = memoryAGet32(ds, ebx + 1950258);
    edx = eax;
    memoryASet32(ds, esp + 16, 0x00000005);
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    if ((int32_t)edi < (int32_t)eax)
        goto loc_1975de;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = memoryAGet32(ds, esp + 8);
    edi = 0x00000005;
    ebx = 0;
    ecx = eax;
    edx = memoryAGet32(ds, esp + 12);
    ecx <<= 2;
    esi += edx;
loc_197629: // 0160:197629
    eax = memoryAGet32(ds, ecx + 1950258);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    dl = memoryAGet(ds, ebx + 1910735);
    ebx++;
    memoryASet(ds, esi + eax, dl);
    esi++;
    if ((int32_t)ebx < (int32_t)0x00000016)
        goto loc_197629;
loc_197646: // 0160:197646
    edx = 0x002032c8;
    eax = memoryAGet32(ds, esp + 12);
    sub_19731d();
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x39bdd4, eax);
    esp += 0x00000014;
    goto loc_196658;
}
void sub_197664() // 0160:197664 +long
{
    esp -= 4;
    goto loc_197664;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4101 bytes
loc_197664: // 0160:197664
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x1dd22a);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x1dd232))
        goto loc_19769a;
    if (memoryAGet32(ds, 0x39bdc4) == 0x00000002)
        goto loc_197689;
    if (memoryAGet32(ds, 0x1dd236) != 0x00000000)
        goto loc_19769a;
loc_197689: // 0160:197689
    memoryASet32(ds, 0x1dd236, 0x00000001);
    sub_1973e5();
    goto loc_1976f5;
loc_19769a: // 0160:19769a
    if (memoryAGet32(ds, 0x39bdc4) != 0x00000002)
        goto loc_1976f5;
    edi = memoryAGet32(ds, 0x1dfc80);
    if (!edi)
        goto loc_1976ef;
    eax = 0;
    memoryASet32(ds, 0x1dd236, eax);
    eax = memoryAGet32(ds, 0x39bdd0);
    edx = eax;
    ebx = 0x00000010;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x39bdd0, edx);
    edx++;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x39bdd0, edx);
    edx = 0x002032c8;
    sub_19731d();
    memoryASet32(ds, 0x39bdd4, 0x00000064);
    goto loc_1976f5;
loc_1976ef: // 0160:1976ef
    memoryASet32(ds, 0x1dd236, edi);
loc_1976f5: // 0160:1976f5
    if (memoryAGet32(ds, 0x39bdd4) != 0xffffffff)
        goto loc_197706;
    esi = 0;
    memoryASet32(ds, 0x1dd236, esi);
loc_197706: // 0160:197706
    if (memoryAGet32(ds, 0x1dd236) == 0x00000000)
        goto loc_197722;
    if (memoryAGet32(ds, 0x39bdd4) == 0xffffffff)
        goto loc_197722;
    memoryASet32(ds, 0x39f230, 0x00000032);
loc_197722: // 0160:197722
    edx = memoryAGet32(ds, 0x39bdc4);
    if (edx != 0x00000001)
        goto loc_197741;
    ebx = memoryAGet32(ds, 0x39bdd4);
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_197741;
    ecx = ebx;
    ecx -= edx;
    memoryASet32(ds, 0x39bdd4, ecx);
loc_197741: // 0160:197741
    if (memoryAGet32(ds, 0x39bdd4) == 0x00000000)
        goto loc_197783;
    if (memoryAGet32(ds, 0x39bdc4) != 0x00000000)
        goto loc_197783;
    ebp = memoryAGet32(ds, 0x39bddc);
    ebp += 0x00000100;
    memoryASet32(ds, 0x39bddc, ebp);
    if ((int32_t)ebp <= (int32_t)0x00001400)
        goto loc_197783;
    edx = 0x00001400;
    ebx = 0x00000001;
    memoryASet32(ds, 0x39bddc, edx);
    memoryASet32(ds, 0x39bdc4, ebx);
loc_197783: // 0160:197783
    ecx = memoryAGet32(ds, 0x39bdd4);
    if (ecx)
        goto loc_196658;
    if (memoryAGet32(ds, 0x39bdc4) == 0x00000000)
        goto loc_196658;
    edi = memoryAGet32(ds, 0x39bddc);
    edi -= 0x00000100;
    memoryASet32(ds, 0x39bddc, edi);
    if (stop("postCondition"))
        goto loc_196658;
    eax = 0x00000002;
    memoryASet32(ds, 0x39bddc, ecx);
    memoryASet32(ds, 0x39bdc4, eax);
    goto loc_196658;
}
void sub_1977cd() // 0160:1977cd +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x39efac);
    if (eax == memoryAGet32(ds, 0x39efec))
        goto loc_1978a0;
    if (eax == 0x00000011)
        goto loc_1978a0;
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_1978a0;
    eax = memoryAGet32(ds, 0x39efd8);
    memoryASet32(ds, 0x39efec, eax);
    eax = memoryAGet32(ds, 0x39efdc);
    edx = memoryAGet32(ds, 0x39efd8);
    eax -= 0x00000010;
    edx -= 0x00000010;
    memoryASet32(ds, esp + 4, eax);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    ebx = 0x00000086;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x00000095)
        goto loc_197849;
    esi = 0x00000095;
loc_197849: // 0160:197849
    eax = 0;
    edi += 0x0000ea65;
    memoryASet32(ds, esp, eax);
loc_197854: // 0160:197854
    ebx = memoryAGet32(ds, esp + 4);
    eax = ebx + edi;
    edx = ebx + ebp;
    goto loc_19786b;
loc_197860: // 0160:197860
    cl = memoryAGet(ds, edx + 1920);
    edx++;
    ebx++;
    memoryASet(ds, eax, cl);
    eax++;
loc_19786b: // 0160:19786b
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_197860;
    ebx = esi;
    eax = esi + edi;
    edx = esi + ebp;
    goto loc_197880;
loc_197879: // 0160:197879
    ebx++;
    cl = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, eax, cl);
    eax++;
loc_197880: // 0160:197880
    if ((int32_t)ebx < (int32_t)0x00000095)
        goto loc_197879;
    edx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    edx++;
    ebp += 0x00000140;
    memoryASet32(ds, esp, edx);
    if ((int32_t)edx < (int32_t)0x00000006)
        goto loc_197854;
loc_1978a0: // 0160:1978a0
    esp += 0x00000008;
    goto loc_198141;
    // gap 2201 bytes
loc_198141: // 0160:198141
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197910() // 0160:197910 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    ebp = memoryAGet32(ds, esp + 40);
    esi = eax;
    edi = edx;
    memoryASet32(ds, esp + 16, ecx);
    ecx = memoryAGet32(ds, esp + 48);
    eax = memoryAGet32(ds, esp + 44);
    edx = 0x00000064;
    eax += eax;
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 20));
    edx = memoryAGet32(ds, esp);
    stop("imul edx * eax");
    memoryASet32(ds, esp + 44, edx);
    eax = memoryAGet32(ds, esi);
    edx = memoryAGet32(ds, edi);
    if (eax == edx)
        goto loc_197a2c;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_19796f;
    eax = memoryAGet32(ds, esp + 44);
    edx = memoryAGet32(ds, esi);
    edx += eax;
    memoryASet32(ds, esi, edx);
    eax = edx;
    edx = memoryAGet32(ds, edi);
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_197983;
    goto loc_197981;
loc_19796f: // 0160:19796f
    eax = memoryAGet32(ds, esp + 44);
    edx = memoryAGet32(ds, esi);
    edx -= eax;
    memoryASet32(ds, esi, edx);
    eax = edx;
    edx = memoryAGet32(ds, edi);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_197983;
loc_197981: // 0160:197981
    memoryASet32(ds, esi, edx);
loc_197983: // 0160:197983
    memoryASet32(ds, 0x39f230, 0x00000032);
    eax = memoryAGet32(ds, esi);
    esi = eax;
    esi <<= 5;
    esi += eax;
    esi <<= 2;
    esi += eax;
    ecx <<= 2;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    esi = 0x00000085;
    esi -= eax;
    if (ebx > 0x00000005)
        goto loc_197a2c;
    eax = 0x002aa868;
    eax += esi;
    edi = 0x00000085;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = 0x002aa903;
    eax += esi;
    ecx = ebp;
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx <<= 3;
    eax += 0x0000009b;
    edi -= esi;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx -= ebp;
    eax += 0x00000120;
    edx += edi;
    eax -= esi;
    indirectJump(cs, memoryAGet32(cs, stop("GetOpAddress"))); return; // 0160:1979f9;
    // gap 43 bytes
loc_197a2c: // 0160:197a2c
    esp += 0x00000018;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_197b3b() // 0160:197b3b +long
{
    esp -= 4;
    goto loc_197b3b;
loc_196659: // 0160:196659
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5340 bytes
loc_197b3b: // 0160:197b3b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ecx = 0x000002b0;
    ebx = 0x00000810;
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x1dc058, edx);
    memoryASet32(ds, 0x1dc064, edx);
    memoryASet32(ds, 0x1dc070, edx);
    memoryASet32(ds, 0x1dc07c, edx);
    edx = 0x00000560;
loc_197b6b: // 0160:197b6b
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_197b88;
    edi = memoryAGet32(ds, 0x1dc058);
    esi = memoryAGet32(ds, eax + 3792102);
    edi += esi;
    memoryASet32(ds, 0x1dc058, edi);
loc_197b88: // 0160:197b88
    if (memoryAGet32(ds, ecx + 3792026) == 0x00000000)
        goto loc_197ba5;
    edi = memoryAGet32(ds, 0x1dc064);
    esi = memoryAGet32(ds, ecx + 3792102);
    edi += esi;
    memoryASet32(ds, 0x1dc064, edi);
loc_197ba5: // 0160:197ba5
    if (memoryAGet32(ds, edx + 3792026) == 0x00000000)
        goto loc_197bc2;
    edi = memoryAGet32(ds, 0x1dc070);
    esi = memoryAGet32(ds, edx + 3792102);
    edi += esi;
    memoryASet32(ds, 0x1dc070, edi);
loc_197bc2: // 0160:197bc2
    if (memoryAGet32(ds, ebx + 3792026) == 0x00000000)
        goto loc_197bdf;
    edi = memoryAGet32(ds, 0x1dc07c);
    esi = memoryAGet32(ds, ebx + 3792102);
    edi += esi;
    memoryASet32(ds, 0x1dc07c, edi);
loc_197bdf: // 0160:197bdf
    eax += 0x000000ac;
    ecx += 0x000000ac;
    edx += 0x000000ac;
    ebx += 0x000000ac;
    if (eax != 0x000002b0)
        goto loc_197b6b;
    edi = memoryAGet32(ds, 0x1dc058);
    if (!edi)
        goto loc_197c1a;
    if ((int32_t)edi >= (int32_t)0x0000000a)
        goto loc_197c1a;
    memoryASet32(ds, 0x1dc058, 0x0000000a);
loc_197c1a: // 0160:197c1a
    edx = memoryAGet32(ds, 0x1dc064);
    if (!edx)
        goto loc_197c33;
    if ((int32_t)edx >= (int32_t)0x0000000a)
        goto loc_197c33;
    memoryASet32(ds, 0x1dc064, 0x0000000a);
loc_197c33: // 0160:197c33
    esi = memoryAGet32(ds, 0x1dc070);
    if (!esi)
        goto loc_197c4c;
    if ((int32_t)esi >= (int32_t)0x0000000a)
        goto loc_197c4c;
    memoryASet32(ds, 0x1dc070, 0x0000000a);
loc_197c4c: // 0160:197c4c
    eax = memoryAGet32(ds, 0x1dc07c);
    if (!eax)
        goto loc_196659;
    if ((int32_t)eax >= (int32_t)0x0000000a)
        goto loc_196659;
    memoryASet32(ds, 0x1dc07c, 0x0000000a);
    goto loc_196659;
}
void sub_197c71() // 0160:197c71 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    ebp = edx;
    edi = memoryAGet32(ds, 0x39f238);
    edx = memoryAGet32(ds, 0x1dd23a);
    eax = memoryAGet32(ds, 0x39f238);
    edi -= edx;
    memoryASet32(ds, 0x1dd23a, eax);
    if ((int32_t)edi <= (int32_t)0x00000004)
        goto loc_197c9e;
    edi = 0x00000004;
    goto loc_197ca7;
loc_197c9e: // 0160:197c9e
    if (edi)
        goto loc_197ca7;
    edi = 0x00000001;
loc_197ca7: // 0160:197ca7
    if (memoryAGet32(ds, 0x1dc034) != 0x00000002)
        goto loc_197cea;
    ecx = memoryAGet32(ds, 0x1dc044);
    push32(ecx);
    push32(edi);
    edx = 0x001dc058;
    eax = 0x001dc054;
    push32(ebp);
    ebx = 0;
    ecx = esi;
    sub_197910();
    eax = memoryAGet32(ds, 0x1dc048);
    push32(eax);
    push32(edi);
    ebx = 0x00000001;
    edx = 0x001dc064;
    push32(ebp);
    ecx = esi;
    eax = 0x001dc060;
    sub_197910();
    stop("stack_below", "0160:197ce5");
loc_197cea: // 0160:197cea
    if ((int32_t)memoryAGet32(ds, 0x1dc034) < (int32_t)0x00000003)
        goto loc_198141;
    ebx = memoryAGet32(ds, 0x1dc044);
    push32(ebx);
    push32(edi);
    edx = 0x001dc058;
    eax = 0x001dc054;
    push32(ebp);
    ecx = esi;
    ebx = 0x00000002;
    sub_197910();
    ecx = memoryAGet32(ds, 0x1dc048);
    push32(ecx);
    push32(edi);
    ebx = 0x00000004;
    edx = 0x001dc064;
    push32(ebp);
    eax = 0x001dc060;
    ecx = esi;
    sub_197910();
    stop("stack_below", "0160:197d30");
    eax = memoryAGet32(ds, 0x1dc04c);
    push32(eax);
    push32(edi);
    ebx = 0x00000003;
    edx = 0x001dc070;
    push32(ebp);
    ecx = esi;
    eax = 0x001dc06c;
    sub_197910();
    stop("stack_below", "0160:197d4e");
    edx = memoryAGet32(ds, 0x1dc050);
    push32(edx);
    push32(edi);
    ebx = 0x00000005;
    eax = 0x001dc078;
    push32(ebp);
    ecx = esi;
    edx = 0x001dc07c;
    sub_197910();
    goto loc_198141;
    // gap 970 bytes
loc_198141: // 0160:198141
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197d77() // 0160:197d77 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    push32(eax);
    edi = edx;
    if (memoryAGet32(ds, 0x39ef7e) == 0x00000000)
        goto loc_197dc5;
    if (memoryAGet32(ds, 0x1dc028) == 0x00000000)
        goto loc_197d9e;
    ecx = 0;
    memoryASet32(ds, 0x39efcc, ecx);
    goto loc_197db2;
loc_197d9e: // 0160:197d9e
    edx = 0x00000010;
    eax = 0xfffffff0;
    sub_1b3e6c();
    memoryASet32(ds, 0x39efcc, eax);
loc_197db2: // 0160:197db2
    esi = 0xfffffe70;
    ebp = 0;
    memoryASet32(ds, 0x39eff0, esi);
    memoryASet32(ds, 0x39ef7e, ebp);
loc_197dc5: // 0160:197dc5
    eax = memoryAGet32(ds, 0x39efcc);
    if (eax == memoryAGet32(ds, 0x39eff0))
        goto loc_197efd;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_197ded;
    if ((int32_t)memoryAGet32(ds, 0x39efd0) > (int32_t)0x00000000)
        goto loc_197ded;
    memoryASet32(ds, 0x39efd0, 0xffffffff);
loc_197ded: // 0160:197ded
    if ((int32_t)memoryAGet32(ds, 0x39efcc) >= (int32_t)0x00000000)
        goto loc_197e07;
    if ((int32_t)memoryAGet32(ds, 0x39efd0) < (int32_t)0x00000000)
        goto loc_197e07;
    edx = 0;
    memoryASet32(ds, 0x39efd0, edx);
loc_197e07: // 0160:197e07
    eax = memoryAGet32(ds, 0x39efd0);
    memoryASet32(ds, 0x39eff0, eax);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    ebp = memoryAGet32(ds, 0x39efd4);
    edi += 0x0000dc00;
    esi = eax;
    if (stop("postCondition"))
        goto loc_197e62;
    esi = -esi;
    if ((int32_t)esi <= (int32_t)0x0000003d)
        goto loc_197e4a;
    esi = 0x0000003d;
loc_197e4a: // 0160:197e4a
    eax = 0x0000003d;
    edi += 0x000000a5;
    eax -= esi;
    edx = 0;
    esi = eax;
    eax = 0x00000780;
    goto loc_197e7c;
loc_197e62: // 0160:197e62
    if ((int32_t)eax <= (int32_t)0x0000003a)
        goto loc_197e6c;
    esi = 0x0000003a;
loc_197e6c: // 0160:197e6c
    edx = 0x000007ba;
    eax = 0x0000003a;
    edi += 0x000000ff;
loc_197e7c: // 0160:197e7c
    ebx = 0;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebx);
    edx += ecx;
    eax += ecx;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, eax);
loc_197e91: // 0160:197e91
    eax = memoryAGet32(ds, esp + 8);
    ebx = ebp;
    edx = edi + ebp;
    eax += ebp;
    goto loc_197ea5;
loc_197e9e: // 0160:197e9e
    ebx++;
    cl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, cl);
    edx++;
loc_197ea5: // 0160:197ea5
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_197e9e;
    edx = memoryAGet32(ds, esp + 12);
    ebx = esi;
    eax = esi + edi;
    edx += esi;
    goto loc_197ebd;
loc_197eb6: // 0160:197eb6
    ebx++;
    cl = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, eax, cl);
    eax++;
loc_197ebd: // 0160:197ebd
    if ((int32_t)ebx < (int32_t)0x0000003a)
        goto loc_197eb6;
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 4);
    edi += 0x00000140;
    ebx += 0x00000140;
    ecx += 0x00000140;
    eax += 0x00000140;
    edx++;
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 12, ecx);
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 4, edx);
    if ((int32_t)edx < (int32_t)0x00000006)
        goto loc_197e91;
loc_197efd: // 0160:197efd
    esp += 0x00000010;
    goto loc_198141;
    // gap 572 bytes
loc_198141: // 0160:198141
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_197f05() // 0160:197f05 +long
{
    esp -= 4;
    goto loc_197f05;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2352 bytes
loc_196f8f: // 0160:196f8f
    esp += 0x0000000c;
    goto loc_196658;
    // gap 3950 bytes
loc_197f05: // 0160:197f05
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edx = 0;
    ebx = 0x00000010;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, ebx);
loc_197f1c: // 0160:197f1c
    edi = memoryAGet32(ds, esp + 4) * 0x00000140;
    esi = 0;
    eax = edi + 15;
    ebp = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 8, eax);
loc_197f30: // 0160:197f30
    ecx = esi;
    ecx <<= 4;
    edx = memoryAGet32(ds, esp + 8);
    eax = edi + ecx;
    edx += ecx;
    ecx += ebp;
loc_197f40: // 0160:197f40
    eax++;
    bl = memoryAGet(ds, edx + 2549864);
    edx--;
    memoryASet(ds, eax + 2987431, bl);
    if (eax != ecx)
        goto loc_197f40;
    esi++;
    if ((int32_t)esi < (int32_t)0x00000014)
        goto loc_197f30;
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx += 0x00000140;
    esi++;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)esi < (int32_t)0x00000300)
        goto loc_197f1c;
    goto loc_196f8f;
}
void sub_197f7a() // 0160:197f7a +long
{
    esp -= 4;
    goto loc_197f7a;
loc_196655: // 0160:196655
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6427 bytes
loc_197f7a: // 0160:197f7a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    eax = memoryAGet32(ds, 0x3a7470);
    eax -= memoryAGet32(ds, 0x1dc01c);
    if (stop("postCondition"))
        goto loc_197f97;
    if ((int32_t)eax <= (int32_t)0x00000032)
        goto loc_197f99;
loc_197f97: // 0160:197f97
    eax = 0;
loc_197f99: // 0160:197f99
    edx = memoryAGet32(ds, 0x3a7470);
    ebx = memoryAGet32(ds, 0x1dc028);
    memoryASet32(ds, 0x1dc01c, edx);
    if (ebx)
        goto loc_197fb8;
    if (memoryAGet32(ds, 0x1dc030) == 0x00000000)
        goto loc_197fd7;
loc_197fb8: // 0160:197fb8
    edx = memoryAGet32(ds, 0x1dc018);
    edx += eax;
    memoryASet32(ds, 0x1dc018, edx);
    if ((int32_t)edx <= (int32_t)0x00000028)
        goto loc_197fef;
    memoryASet32(ds, 0x1dc018, 0x00000028);
    goto loc_197fef;
loc_197fd7: // 0160:197fd7
    esi = memoryAGet32(ds, 0x1dc018);
    esi -= eax;
    memoryASet32(ds, 0x1dc018, esi);
    if (stop("postCondition"))
        goto loc_197fef;
    memoryASet32(ds, 0x1dc018, ebx);
loc_197fef: // 0160:197fef
    eax = memoryAGet32(ds, 0x39f244);
    edx = eax;
    ebx = 0x00000005;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, 0x1dc018);
    edx += eax;
    eax = 0x00000010;
    eax -= edx;
    edx = eax;
    eax += 0x00000002;
    sub_1a937c();
    eax = edx;
    sub_19a0dc();
    eax = edx;
    ebp = 0x001e0a08;
    sub_197034();
    if (stop("postCondition"))
        goto loc_198049;
    edx = -edx;
    eax = edx;
    eax <<= 3;
    eax += edx;
    esi = 0x002c69b8;
    eax <<= 5;
    memoryASet32(ds, esp + 4, esi);
    ebp += eax;
    goto loc_198061;
loc_198049: // 0160:198049
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    eax += 0x002c69a8;
    eax += 0x00000010;
    edx = 0;
    memoryASet32(ds, esp + 4, eax);
loc_198061: // 0160:198061
    edi = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp, edx);
    esi = ebp + 132;
    edi += 0x00000084;
    goto loc_1980d3;
loc_198076: // 0160:198076
    edx = memoryAGet32(ds, esp + 4);
    eax = ebp;
    ecx = esi;
loc_19807e: // 0160:19807e
    ebx = memoryAGet32(ds, eax);
    memoryASet32(ds, edx, ebx);
    edx += 0x00000004;
    ebx = memoryAGet32(ds, eax + 154);
    eax += 0x00000004;
    memoryASet32(ds, edx + 150, ebx);
    if (eax != ecx)
        goto loc_19807e;
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp);
    ebp += 0x00000120;
    ax = memoryAGet16(ds, esi);
    edx += 0x00000140;
    esi += 0x00000120;
    ebx++;
    memoryASet16(ds, edi, ax);
    edi += 0x00000140;
    memoryASet32(ds, esp + 4, edx);
    ax = memoryAGet16(ds, esi + -134);
    memoryASet32(ds, esp, ebx);
    memoryASet16(ds, edi + -166, ax);
loc_1980d3: // 0160:1980d3
    if ((int32_t)memoryAGet32(ds, esp) < (int32_t)0x0000000e)
        goto loc_198076;
    goto loc_196655;
}
void sub_1980de() // 0160:1980de +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1980e1: // 0160:1980e1
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 2539620);
    memoryASet32(ds, eax + 2964388, edx);
    if ((int32_t)eax < (int32_t)0x00002800)
        goto loc_1980e1;
    edx = pop32();
    esp += 4;
}
void sub_1980f9() // 0160:1980f9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    ebp = eax + 149;
    memoryASet32(ds, esp, edx);
loc_198110: // 0160:198110
    edx = edi;
    eax = esi;
    ecx = ebp;
loc_198116: // 0160:198116
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_198116;
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    ebp += 0x00000140;
    ebx++;
    esi += 0x00000140;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000006)
        goto loc_198110;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_198147() // 0160:198147 +long
{
    esp -= 4;
    goto loc_198147;
loc_19813e: // 0160:19813e
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_198147: // 0160:198147
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    ebp = eax + 58;
    memoryASet32(ds, esp, edx);
loc_19815b: // 0160:19815b
    edx = edi;
    eax = esi;
    ecx = ebp;
loc_198161: // 0160:198161
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_198161;
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    ebp += 0x00000140;
    ebx++;
    esi += 0x00000140;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000006)
        goto loc_19815b;
    goto loc_19813e;
}
void sub_19818b() // 0160:19818b +long
{
    esp -= 4;
    goto loc_19818b;
loc_196659: // 0160:196659
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6956 bytes
loc_19818b: // 0160:19818b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x39bde0) != 0x00000000)
        goto loc_1981be;
    edx = 0x000aea65;
    eax = 0x002ae768;
    sub_1980f9();
    edx = 0x000adca5;
    eax = 0x002ae768;
    sub_198147();
    edx = 0x000adcff;
    goto loc_1981e1;
loc_1981be: // 0160:1981be
    edx = 0x002d540d;
    eax = 0x002ae768;
    sub_1980f9();
    edx = 0x002d464d;
    eax = 0x002ae768;
    sub_198147();
    edx = 0x002d46a7;
loc_1981e1: // 0160:1981e1
    eax = 0x002ae768;
    sub_198147();
    ebx = 0x00000010;
    ecx = 0x00000002;
    esi = 0x00000001;
    edi = 0;
    memoryASet32(ds, 0x39efac, ebx);
    memoryASet32(ds, 0x39efd8, ebx);
    memoryASet32(ds, 0x39efdc, ebx);
    memoryASet32(ds, 0x39ef7e, edi);
    memoryASet32(ds, 0x39efcc, edi);
    memoryASet32(ds, 0x39efd0, edi);
    memoryASet32(ds, 0x39efd4, edi);
    memoryASet32(ds, 0x39eff0, edi);
    memoryASet32(ds, 0x1d366c, ecx);
    memoryASet32(ds, 0x1d3670, esi);
    goto loc_196659;
}
void sub_19823d() // 0160:19823d +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39bde0) == 0x00000000)
        goto loc_19829e;
    if (memoryAGet32(ds, 0x1dc024) != 0x00000000)
        goto loc_198260;
    memoryASet32(ds, 0x1dc024, 0x00000001);
    sub_19b679();
loc_198260: // 0160:198260
    edx = 0x000a0000;
    eax = 0x002c69a8;
    sub_1c4d1e();
    edx = 0x000a4000;
    eax = 0x002c69a8;
    sub_1c4d1e();
    edx = 0x000a8000;
    eax = 0x002c69a8;
    sub_1c4d1e();
    edx = 0x000ac000;
    eax = 0x002c69a8;
    sub_1c4d1e();
    goto loc_1982d2;
loc_19829e: // 0160:19829e
    if (memoryAGet32(ds, 0x1dc024) != 0x00000000)
        goto loc_1982c3;
    ecx = 0x00000001;
    eax = 0x00000013;
    memoryASet32(ds, 0x1dc024, ecx);
    sub_19b80e();
    eax = 0;
    sub_1a413d();
loc_1982c3: // 0160:1982c3
    edx = 0x000a0000;
    eax = 0x002c69a8;
    sub_19cb51();
loc_1982d2: // 0160:1982d2
    sub_19b794();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1982da() // 0160:1982da +long
{
    esp -= 4;
    memoryASet32(ds, 0x39f09c, edx);
    goto loc_19e865;
    // gap 19634 bytes
loc_19cf97: // 0160:19cf97
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6344 bytes
loc_19e865: // 0160:19e865
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = memoryAGet32(ds, 0x39ef9c);
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 2;
    edx = memoryAGet32(ds, 0x39f09c);
    esi += ebx;
    eax += memoryAGet32(ds, edx*4 + 0x1dc242);
    ebx = edx + esi;
    ebx <<= 2;
    edx = eax + 1;
    edi = memoryAGet32(ds, ebx + 3795258);
    ecx = eax + 2;
    if (edi)
        goto loc_19e8ad;
    memoryASet(ds, eax, 0x28);
    memoryASet(ds, edx, 0x30);
    memoryASet(ds, ecx, 0x29);
    goto loc_19cf97;
loc_19e8ad: // 0160:19e8ad
    if (edi != 0xffffffff)
        goto loc_19e8c0;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, edx, 0x20);
    memoryASet(ds, ecx, 0x20);
    goto loc_19cf97;
loc_19e8c0: // 0160:19e8c0
    memoryASet(ds, eax, 0x28);
    eax = edx;
    edx = memoryAGet32(ds, 0x39f09c);
    edx += esi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    if ((int32_t)edx <= (int32_t)0x00000009)
        goto loc_19e8de;
    edx = 0x00000009;
loc_19e8de: // 0160:19e8de
    dl += 0x30;
    memoryASet(ds, eax, dl);
    eax++;
    memoryASet(ds, eax, 0x29);
    goto loc_19cf97;
}
void sub_1982e5() // 0160:1982e5 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1982e8: // 0160:1982e8
    eax++;
    dl = memoryAGet(ds, eax + 1911841);
    memoryASet(ds, eax + 1910857, dl);
    dl = memoryAGet(ds, eax + 1911882);
    memoryASet(ds, eax + 1910898, dl);
    dl = memoryAGet(ds, eax + 1911923);
    memoryASet(ds, eax + 1910939, dl);
    dl = memoryAGet(ds, eax + 1911964);
    memoryASet(ds, eax + 1910980, dl);
    dl = memoryAGet(ds, eax + 1912005);
    memoryASet(ds, eax + 1911021, dl);
    dl = memoryAGet(ds, eax + 1912046);
    memoryASet(ds, eax + 1911062, dl);
    dl = memoryAGet(ds, eax + 1912087);
    memoryASet(ds, eax + 1911103, dl);
    dl = memoryAGet(ds, eax + 1912128);
    memoryASet(ds, eax + 1911144, dl);
    dl = memoryAGet(ds, eax + 1912169);
    memoryASet(ds, eax + 1911185, dl);
    dl = memoryAGet(ds, eax + 1912210);
    memoryASet(ds, eax + 1911226, dl);
    dl = memoryAGet(ds, eax + 1912251);
    memoryASet(ds, eax + 1911267, dl);
    dl = memoryAGet(ds, eax + 1912292);
    memoryASet(ds, eax + 1911308, dl);
    dl = memoryAGet(ds, eax + 1912333);
    memoryASet(ds, eax + 1911349, dl);
    dl = memoryAGet(ds, eax + 1912374);
    memoryASet(ds, eax + 1911390, dl);
    dl = memoryAGet(ds, eax + 1912415);
    memoryASet(ds, eax + 1911431, dl);
    dl = memoryAGet(ds, eax + 1912456);
    memoryASet(ds, eax + 1911472, dl);
    dl = memoryAGet(ds, eax + 1912497);
    memoryASet(ds, eax + 1911513, dl);
    dl = memoryAGet(ds, eax + 1912538);
    memoryASet(ds, eax + 1911554, dl);
    dl = memoryAGet(ds, eax + 1912579);
    memoryASet(ds, eax + 1911595, dl);
    dl = memoryAGet(ds, eax + 1912620);
    memoryASet(ds, eax + 1911636, dl);
    dl = memoryAGet(ds, eax + 1912661);
    memoryASet(ds, eax + 1911677, dl);
    dl = memoryAGet(ds, eax + 1912702);
    memoryASet(ds, eax + 1911718, dl);
    dl = memoryAGet(ds, eax + 1912743);
    memoryASet(ds, eax + 1911759, dl);
    dl = memoryAGet(ds, eax + 1912784);
    memoryASet(ds, eax + 1911800, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_1982e8;
    eax = 0x001d284a;
    edx = 0;
    sub_1982da();
    edx = 0x00000002;
    eax = 0x001d2873;
    sub_1982da();
    edx = 0x00000004;
    eax = 0x001d289c;
    sub_1982da();
    edx = 0x00000008;
    eax = 0x001d28c5;
    sub_1982da();
    edx = 0x0000000c;
    eax = 0x001d28ee;
    sub_1982da();
    edx = 0x0000000d;
    eax = 0x001d2917;
    sub_1982da();
    edx = 0x0000000b;
    eax = 0x001d2940;
    sub_1982da();
    edx = 0x00000006;
    eax = 0x001d2969;
    sub_1982da();
    edx = 0x00000011;
    eax = 0x001d2992;
    sub_1982da();
    edx = 0x00000007;
    eax = 0x001d29bb;
    sub_1982da();
    edx = 0x00000003;
    eax = 0x001d29e4;
    sub_1982da();
    edx = 0x00000014;
    eax = 0x001d2a0d;
    sub_1982da();
    edx = 0x0000000a;
    eax = 0x001d2a36;
    sub_1982da();
    edx = 0x00000005;
    eax = 0x001d2a5f;
    sub_1982da();
    edx = 0x00000010;
    eax = 0x001d2a88;
    sub_1982da();
    edx = 0x00000001;
    eax = 0x001d2ab1;
    sub_1982da();
    edx = 0x00000012;
    eax = 0x001d2ada;
    sub_1982da();
    edx = 0x00000009;
    eax = 0x001d2b03;
    sub_1982da();
    edx = 0x0000000f;
    eax = 0x001d2b2c;
    sub_1982da();
    edx = 0x0000000e;
    eax = 0x001d2b55;
    sub_1982da();
    edx = 0x00000013;
    eax = 0x001d2bf9;
    sub_1982da();
    edx = 0;
    memoryASet32(ds, 0x39f09c, edx);
    edx = pop32();
    esp += 4;
}
void sub_198554() // 0160:198554 +long
{
    esp -= 4;
    goto loc_198554;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7925 bytes
loc_198554: // 0160:198554
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    sub_1a4196();
    eax = 0;
    ebp = 0x00000001;
    sub_1a4408();
    sub_198cff();
    ebx = 0;
    sub_19d1d6();
    memoryASet32(ds, 0x1dd24e, ebx);
    memoryASet32(ds, 0x39bdb8, ebx);
    sub_198cd4();
    eax = memoryAGet32(ds, 0x39eff8);
    memoryASet32(ds, 0x1dd540, ebx);
    memoryASet32(ds, 0x39efb8, ebx);
    memoryASet32(ds, 0x39effc, ebp);
    memoryASet32(ds, 0x39eff4, ebp);
    memoryASet32(ds, 0x39efe8, ebx);
    memoryASet32(ds, 0x39f230, ebx);
    memoryASet32(ds, 0x39f258, ebx);
    memoryASet32(ds, 0x39ef98, ebx);
    memoryASet32(ds, 0x39ef9c, ebx);
    ebx = 0x00000010;
    memoryASet32(ds, 0x39ef94, eax);
    eax = 0x00000280;
    memoryASet32(ds, 0x1dc0b0, ebx);
    memoryASet32(ds, 0x1dc0ac, eax);
    sub_198b0e();
    eax = edx;
    sub_1aa617();
    sub_1a881e();
    ecx = memoryAGet32(ds, 0x39bdd8);
    if (ecx == ebp)
        goto loc_198604;
    if (ecx == 0x00000006)
        goto loc_198604;
    if (ecx != 0x00000009)
        goto loc_198610;
loc_198604: // 0160:198604
    memoryASet32(ds, 0x39efe4, 0x000000f8);
    goto loc_19861a;
loc_198610: // 0160:198610
    memoryASet32(ds, 0x39efe4, 0x000000e6);
loc_19861a: // 0160:19861a
    eax = memoryAGet32(ds, 0x1dc044);
    eax <<= 2;
    memoryASet32(ds, 0x1dc054, eax);
    eax = memoryAGet32(ds, 0x1dc048);
    eax <<= 2;
    edx = 0;
    memoryASet32(ds, 0x1dc060, eax);
    eax = memoryAGet32(ds, 0x1dc04c);
    memoryASet32(ds, 0x1dc058, edx);
    eax <<= 2;
    memoryASet32(ds, 0x1dc064, edx);
    memoryASet32(ds, 0x1dc06c, eax);
    eax = memoryAGet32(ds, 0x1dc050);
    memoryASet32(ds, 0x1dc070, edx);
    eax <<= 2;
    memoryASet32(ds, 0x1dc07c, edx);
    memoryASet32(ds, 0x1dc078, eax);
    eax = 0;
loc_19866a: // 0160:19866a
    eax++;
    dl = memoryAGet(ds, eax + 2795623);
    memoryASet(ds, eax + 1968647, dl);
    if ((int32_t)eax < (int32_t)0x00000fc0)
        goto loc_19866a;
    sub_1982e5();
    edx = 0x00000120;
    eax = 0x001e0a08;
    edi = 0x00000500;
    ebp = 0x000003a0;
    ecx = 0x00020000;
    esi = 0x00000001;
    sub_197c71();
    sub_197f7a();
    sub_1980de();
    sub_19818b();
    ebx = 0;
    memoryASet32(ds, 0x39f248, edi);
    memoryASet32(ds, 0x39f24c, ebp);
    memoryASet32(ds, 0x39f250, edi);
    memoryASet32(ds, 0x39f254, ebp);
    sub_19823d();
    sub_197b3b();
    edi = 0xffff6000;
    ebp = memoryAGet32(ds, 0x1dc0c8);
    memoryASet32(ds, 0x39ef7a, ebx);
    memoryASet32(ds, 0x39f23c, ecx);
    memoryASet32(ds, 0x39efa0, esi);
    memoryASet32(ds, 0x39efa8, edi);
    if (!ebp)
        goto loc_198707;
    sub_199889();
    goto loc_19870c;
loc_198707: // 0160:198707
    sub_199993();
loc_19870c: // 0160:19870c
    sub_199775();
    sub_1997d1();
    sub_19982d();
    sub_1a4261();
    goto loc_196658;
}
void sub_198725() // 0160:198725 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ah = 0x20;
    ebx = 0;
loc_19872d: // 0160:19872d
    ebx++;
    memoryASet(ds, ebx + 1910801, ah);
    if ((int32_t)ebx < (int32_t)0x0000000e)
        goto loc_19872d;
    ebx = 0;
loc_19873b: // 0160:19873b
    edx = 0x00000009;
    eax = 0;
    ebx++;
    sub_1a9cc8();
    al += 0x30;
    memoryASet(ds, ebx + 1910801, al);
    if ((int32_t)ebx < (int32_t)0x0000000a)
        goto loc_19873b;
    edx = 0x00000005;
    ebx = 0x00000024;
    eax = 0;
    cl = 0x20;
    sub_1a9cc8();
    esi = eax;
    edx = eax;
    ebx -= esi;
    eax = 0;
    esi = ebx;
    goto loc_19877c;
loc_198774: // 0160:198774
    ebx++;
    eax++;
    memoryASet(ds, ebx + 1910775, cl);
loc_19877c: // 0160:19877c
    if ((int32_t)eax < (int32_t)edx)
        goto loc_198774;
    ch = 0;
    memoryASet(ds, esi + 1910776, ch);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19878d() // 0160:19878d +long
{
    esp -= 4;
    goto loc_19878d;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8494 bytes
loc_19878d: // 0160:19878d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39efc4) == 0x00000000)
        goto loc_196658;
    ebx = 0;
    sub_19b200();
    bl = al;
    if ((int32_t)ebx < (int32_t)0x00000030)
        goto loc_1987b3;
    if ((int32_t)ebx <= (int32_t)0x00000039)
        goto loc_1987c7;
loc_1987b3: // 0160:1987b3
    if ((int32_t)ebx < (int32_t)0x00000041)
        goto loc_1987bd;
    if ((int32_t)ebx <= (int32_t)0x0000005a)
        goto loc_1987c7;
loc_1987bd: // 0160:1987bd
    if (ebx == 0x00000001)
        goto loc_1987c7;
    if (ebx != 0x00000020)
        goto loc_198804;
loc_1987c7: // 0160:1987c7
    if (ebx == 0x00000001)
        goto loc_1987f5;
    if ((int32_t)memoryAGet32(ds, 0x39efc8) < (int32_t)0x0000000a)
        goto loc_1987df;
    memoryASet32(ds, 0x39efc8, 0x00000009);
loc_1987df: // 0160:1987df
    eax = memoryAGet32(ds, 0x39efc8);
    memoryASet(ds, eax + 1910802, bl);
    if ((int32_t)eax >= (int32_t)0x0000000a)
        goto loc_1987f5;
    eax++;
    memoryASet32(ds, 0x39efc8, eax);
loc_1987f5: // 0160:1987f5
    edx = 0x002032c8;
    eax = 0x001d27f8;
    sub_19731d();
loc_198804: // 0160:198804
    if (ebx != 0x00000008)
        goto loc_198849;
    edi = memoryAGet32(ds, 0x39efc8);
    if (!edi)
        goto loc_198849;
    if (edi != 0x00000009)
        goto loc_198828;
    al = memoryAGet(ds, edi + 1910802);
    eax &= 0x000000ff;
    if (eax != 0x00000020)
        goto loc_19882e;
loc_198828: // 0160:198828
    memoryASet32(ds, 0x39efc8, memoryAGet32(ds, 0x39efc8) - 1);
loc_19882e: // 0160:19882e
    eax = memoryAGet32(ds, 0x39efc8);
    memoryASet(ds, eax + 1910802, 0x20);
    edx = 0x002032c8;
    eax = 0x001d27f8;
    sub_19731d();
loc_198849: // 0160:198849
    if (ebx != 0x0000000a)
        goto loc_198ae8;
    ebx = 0xffffffff;
    esi = 0x00000001;
    edx = 0;
    eax = memoryAGet32(ds, 0x39efc8);
    memoryASet32(ds, 0x1dc094, edx);
    memoryASet32(ds, 0x1dd25e, ebx);
    memoryASet32(ds, 0x39efc4, edx);
    dh = 0;
    memoryASet32(ds, 0x1dc0c0, esi);
    memoryASet(ds, eax + 1910802, dh);
    memoryASet(ds, eax + 1910843, dh);
    sub_198cff();
    eax = 0x001d2812;
    edx = 0x001d2812;
    sub_1a9cfc();
    memoryASet32(ds, 0x1dc084, eax);
    eax = 0x001d1290;
    sub_1c7b60();
    if (eax)
        goto loc_1988ba;
    memoryASet32(ds, 0x1dd25e, eax);
    goto loc_198a68;
loc_1988ba: // 0160:1988ba
    edx = 0x001d2812;
    eax = 0x001d1297;
    sub_1c7b60();
    if (eax)
        goto loc_1988dc;
    memoryASet32(ds, 0x1dd25e, 0x00000002);
    goto loc_198a68;
loc_1988dc: // 0160:1988dc
    edx = 0x001d2812;
    eax = 0x001d129c;
    sub_1c7b60();
    if (eax)
        goto loc_1988fa;
    memoryASet32(ds, 0x1dd25e, esi);
    goto loc_198a68;
loc_1988fa: // 0160:1988fa
    edx = 0x001d2812;
    eax = 0x001d12a3;
    sub_1c7b60();
    if (eax)
        goto loc_19891c;
    memoryASet32(ds, 0x1dd25e, 0x00000004);
    goto loc_198a68;
loc_19891c: // 0160:19891c
    edx = 0x001d2812;
    eax = 0x001d12aa;
    sub_1c7b60();
    if (eax)
        goto loc_19893e;
    memoryASet32(ds, 0x1dd25e, 0x00000003);
    goto loc_198a68;
loc_19893e: // 0160:19893e
    edx = 0x001d2812;
    eax = 0x001d12b0;
    sub_1c7b60();
    if (eax)
        goto loc_198960;
    memoryASet32(ds, 0x1dd25e, 0x00000005);
    goto loc_198a68;
loc_198960: // 0160:198960
    edx = 0x001d2812;
    eax = 0x001d12b6;
    sub_1c7b60();
    if (eax)
        goto loc_198982;
    memoryASet32(ds, 0x1dd25e, 0x00000006);
    goto loc_198a68;
loc_198982: // 0160:198982
    edx = 0x001d2812;
    eax = 0x001d12bc;
    sub_1c7b60();
    if (eax)
        goto loc_1989a4;
    memoryASet32(ds, 0x1dd25e, 0x00000007);
    goto loc_198a68;
loc_1989a4: // 0160:1989a4
    edx = 0x001d2812;
    eax = 0x001d12c4;
    sub_1c7b60();
    if (eax)
        goto loc_1989c6;
    memoryASet32(ds, 0x1dd25e, 0x00000008);
    goto loc_198a68;
loc_1989c6: // 0160:1989c6
    edx = 0x001d2812;
    eax = 0x001d12c9;
    sub_1c7b60();
    if (eax)
        goto loc_1989e8;
    memoryASet32(ds, 0x1dd25e, 0x00000009);
    goto loc_198a68;
loc_1989e8: // 0160:1989e8
    edx = 0x001d2812;
    eax = 0x001d12cf;
    sub_1c7b60();
    if (eax)
        goto loc_198a0e;
    ebp = 0x00000003;
    memoryASet32(ds, 0x1dc08c, esi);
    memoryASet32(ds, 0x1dd25e, ebp);
    goto loc_198a68;
loc_198a0e: // 0160:198a0e
    edx = 0x001d2812;
    eax = 0x001d12d3;
    sub_1c7b60();
    if (eax)
        goto loc_198a2e;
    memoryASet32(ds, 0x1dd25e, ebx);
    sub_198725();
    goto loc_198a59;
loc_198a2e: // 0160:198a2e
    edx = 0x001d2812;
    eax = 0x001d12d7;
    sub_1c7b60();
    if (eax)
        goto loc_198a68;
loc_198a41: // 0160:198a41
    eax++;
    dl = memoryAGet(ds, eax + 3784107);
    memoryASet(ds, eax + 1910801, dl);
    memoryASet(ds, eax + 1910842, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_198a41;
loc_198a59: // 0160:198a59
    eax = 0x001d2812;
    sub_1a9cfc();
    memoryASet32(ds, 0x1dc084, eax);
loc_198a68: // 0160:198a68
    if (memoryAGet32(ds, 0x1dd25e) != 0xffffffff)
        goto loc_198ad6;
    bh = 0x20;
    eax = 0;
loc_198a75: // 0160:198a75
    eax++;
    memoryASet(ds, eax + 1910842, bh);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_198a75;
    eax = 0;
loc_198a83: // 0160:198a83
    eax++;
    dl = memoryAGet(ds, eax + 1910801);
    memoryASet(ds, eax + 1910842, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_198a83;
    eax = memoryAGet32(ds, 0x1dc084);
    sub_198554();
    if (memoryAGet32(ds, 0x1dd25a) == 0x00000000)
        goto loc_198aad;
    sub_19934d();
loc_198aad: // 0160:198aad
    memoryASet32(ds, 0x39ef94, 0x00000225);
    eax = memoryAGet32(ds, 0x3a7470);
    edx = 0x00000001;
    memoryASet32(ds, 0x39f238, eax);
    ebx = 0;
    memoryASet32(ds, 0x39f234, edx);
    memoryASet32(ds, 0x39f1ac, ebx);
    goto loc_198ae0;
loc_198ad6: // 0160:198ad6
    memoryASet32(ds, 0x1dc088, 0x00000001);
loc_198ae0: // 0160:198ae0
    ecx = 0;
    memoryASet32(ds, 0x1dc0c0, ecx);
loc_198ae8: // 0160:198ae8
    esi = 0x00001400;
    edi = 0x00000064;
    ebp = 0x00000001;
    memoryASet32(ds, 0x39bddc, esi);
    memoryASet32(ds, 0x39bdd4, edi);
    memoryASet32(ds, 0x39bdc4, ebp);
    goto loc_196658;
}
void sub_198b0e() // 0160:198b0e +long
{
    esp -= 4;
    goto loc_198b0e;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9391 bytes
loc_198b0e: // 0160:198b0e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = 0;
    ebx = 0;
    esi = 0;
loc_198b1a: // 0160:198b1a
    edx = 0x0026e868;
    memoryASet32(ds, ebx + 3792166, edx);
    ebp = 0x00000001;
    memoryASet32(ds, ebx + 3792170, edx);
    memoryASet32(ds, ebx + 3792026, ebp);
    eax = 0x00000032;
    memoryASet32(ds, ebx + 3792034, ebp);
    memoryASet32(ds, ebx + 3792114, eax);
    edx = 0x0000000a;
    ebp = 0x00000004;
    memoryASet32(ds, ebx + 3792038, edx);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx += 0x000000ac;
    memoryASet32(ds, ebx + 3791830, esi);
    memoryASet32(ds, ebx + 3791834, esi);
    memoryASet32(ds, ebx + 3791838, esi);
    memoryASet32(ds, ebx + 3791858, esi);
    memoryASet32(ds, ebx + 3791986, esi);
    memoryASet32(ds, ebx + 3791990, esi);
    memoryASet32(ds, ebx + 3791870, esi);
    memoryASet32(ds, ebx + 3791878, esi);
    memoryASet32(ds, ebx + 3791882, esi);
    memoryASet32(ds, ebx + 3791890, esi);
    memoryASet32(ds, ebx + 3791898, esi);
    memoryASet32(ds, ebx + 3791910, esi);
    memoryASet32(ds, ebx + 3791846, esi);
    memoryASet32(ds, ebx + 3791906, esi);
    memoryASet32(ds, ebx + 3791934, esi);
    memoryASet32(ds, ebx + 3791938, esi);
    memoryASet32(ds, ebx + 3791886, esi);
    memoryASet32(ds, ebx + 3791926, esi);
    memoryASet32(ds, ebx + 3791954, esi);
    memoryASet32(ds, ebx + 3791962, esi);
    memoryASet32(ds, ebx + 3791958, esi);
    memoryASet32(ds, ebx + 3791974, esi);
    memoryASet32(ds, ebx + 3791978, esi);
    edi = 0x00000100;
    memoryASet32(ds, ebx + 3791982, esi);
    memoryASet32(ds, ebx + 3791850, edi);
    edi = 0xffffffff;
    memoryASet32(ds, ebx + 3791902, ebp);
    memoryASet32(ds, ebx + 3791946, edi);
    eax = memoryAGet32(ds, eax*4 + 0x1dc044);
    edx = 0x00000010;
    memoryASet32(ds, ebx + 3791930, eax);
    ebp = 0x00000096;
    memoryASet32(ds, ebx + 3791950, edx);
    eax = 0x00000001;
    memoryASet32(ds, ebx + 3791966, ebp);
    ecx += eax;
    memoryASet32(ds, ebx + 3791970, eax);
    if ((int32_t)ecx < (int32_t)edx)
        goto loc_198b1a;
    edx = memoryAGet32(ds, 0x1dc034);
    memoryASet32(ds, 0x39efbc, ebp);
    memoryASet32(ds, 0x39f0b8, eax);
    ecx = 0;
    eax = 0x00000003;
    memoryASet32(ds, 0x1dd528, ecx);
    memoryASet32(ds, 0x1dd52c, ecx);
    memoryASet32(ds, 0x1dd530, ecx);
    edx--;
    memoryASet32(ds, 0x39f100, eax);
    memoryASet32(ds, 0x39f104, eax);
    ebx = eax;
    memoryASet32(ds, 0x39f108, eax);
    memoryASet32(ds, 0x39f10c, eax);
    eax = 0;
    memoryASet32(ds, 0x1dd534, ecx);
    sub_1a9cc8();
    eax--;
    eax &= ebx;
    memoryASet32(ds, 0x39ef9c, eax);
    sub_19d4cb();
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792074, ecx);
    eax = 0x001d284a;
    memoryASet32(ds, 0x39f09c, ecx);
    memoryASet32(ds, 0x39f0a0, eax);
    sub_196e87();
    sub_196f97();
    goto loc_196658;
}
void sub_198cd4() // 0160:198cd4 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_198cd7: // 0160:198cd7
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 1963468);
    memoryASet32(ds, eax + 3795254, edx);
    memoryASet32(ds, eax + 3795338, edx);
    memoryASet32(ds, eax + 3795422, edx);
    memoryASet32(ds, eax + 3795506, edx);
    if (eax != 0x00000054)
        goto loc_198cd7;
    edx = pop32();
    esp += 4;
}
void sub_198cff() // 0160:198cff +long
{
    esp -= 4;
    goto loc_198cff;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9888 bytes
loc_198cff: // 0160:198cff
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_19d1d6();
    edx = 0xffffffff;
    ecx = 0x00000010;
    edi = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0x1dd53c, edx);
    sub_1aa6f5();
    edx = 0x00000064;
    memoryASet32(ds, 0x1dd246, ebx);
    memoryASet32(ds, 0x39f1f8, ecx);
    memoryASet32(ds, 0x1dd23a, ebx);
    memoryASet32(ds, 0x39effc, edi);
    memoryASet32(ds, 0x39eff4, edi);
    memoryASet32(ds, 0x39f230, ebx);
    memoryASet32(ds, 0x1dc040, edx);
    sub_1aa7bd();
    sub_198b0e();
    sub_197f05();
    dl = 0x80;
    eax = 0;
loc_198d68: // 0160:198d68
    eax++;
    memoryASet(ds, eax + 2103751, dl);
    if ((int32_t)eax < (int32_t)0x00003200)
        goto loc_198d68;
    ebx = 0x00050000;
    edx = 0x00000005;
    memoryASet32(ds, 0x39bdbc, ebx);
    sub_197664();
    sub_19b794();
    sub_19b5c8();
    eax = memoryAGet32(ds, 0x39bdf4);
    ecx = 0;
    memoryASet32(ds, 0x39be00, eax);
    eax = memoryAGet32(ds, 0x39bdf0);
    memoryASet32(ds, 0x39f1dc, ecx);
    memoryASet32(ds, 0x39be04, eax);
    eax = 0x00000002;
    memoryASet32(ds, 0x39f0a4, ecx);
    sub_1a9cc8();
    edx = 0x00000001;
    memoryASet32(ds, 0x3be660, eax);
    memoryASet32(ds, 0x1dfad4, ecx);
    memoryASet32(ds, 0x39f0a4, ecx);
    memoryASet32(ds, 0x39f0a8, ecx);
    memoryASet32(ds, 0x39f0b8, edx);
    eax = 0;
loc_198de5: // 0160:198de5
    eax += 0x00000004;
    ebx = 0;
    memoryASet32(ds, eax + 3797516, ebx);
    if (eax != 0x00000010)
        goto loc_198de5;
    eax = 0;
loc_198df7: // 0160:198df7
    eax += 0x00000018;
    ecx = 0;
    memoryASet32(ds, eax + 3790874, ecx);
    if (eax != 0x000000f0)
        goto loc_198df7;
    eax = 0;
loc_198e0b: // 0160:198e0b
    eax += 0x00000024;
    esi = 0;
    memoryASet32(ds, eax + 3794718, esi);
    if (eax != 0x00000120)
        goto loc_198e0b;
    memoryASet32(ds, 0x39e886, esi);
    eax = 0;
loc_198e25: // 0160:198e25
    eax += 0x00000020;
    ebp = 0;
    memoryASet32(ds, eax + 3795562, ebp);
    if (eax != 0x00000400)
        goto loc_198e25;
    eax = 0;
loc_198e39: // 0160:198e39
    eax += 0x00000024;
    edx = 0;
    memoryASet32(ds, eax + 3795114, edx);
    if (eax != 0x0000006c)
        goto loc_198e39;
    eax = 0;
loc_198e4b: // 0160:198e4b
    eax += 0x00000004;
    ebx = 0;
    memoryASet32(ds, eax + 2524676, ebx);
    if (eax != 0x00000020)
        goto loc_198e4b;
    eax = 0;
loc_198e5d: // 0160:198e5d
    eax += 0x00000004;
    ecx = 0;
    memoryASet32(ds, eax + 3925068, ecx);
    if (eax != 0x00000020)
        goto loc_198e5d;
    eax = 0;
loc_198e6f: // 0160:198e6f
    eax += 0x00000018;
    esi = 0;
    memoryASet32(ds, eax + 3921976, esi);
    if (eax != 0x00000c00)
        goto loc_198e6f;
    memoryASet32(ds, 0x39ee8a, esi);
    eax = 0;
loc_198e89: // 0160:198e89
    eax += 0x00000024;
    ebp = 0;
    memoryASet32(ds, eax + 3791102, ebp);
    memoryASet32(ds, eax + 3791118, ebp);
    memoryASet32(ds, eax + 3791122, ebp);
    if (eax != 0x00000360)
        goto loc_198e89;
    eax = 0;
loc_198ea9: // 0160:198ea9
    eax += 0x00000012;
    ecx = 0;
    memoryASet32(ds, eax + 2152374, ecx);
    if (eax != 0x00004800)
        goto loc_198ea9;
    sub_198cd4();
    esi = 0x00000041;
    edi = 0x00000042;
    ebp = 0x00000043;
    edx = 0x00000044;
    eax = 0;
loc_198ed6: // 0160:198ed6
    eax += 0x00000010;
    memoryASet32(ds, eax + 2524696, esi);
    memoryASet32(ds, eax + 2524700, edi);
    memoryASet32(ds, eax + 2524704, ebp);
    memoryASet32(ds, eax + 2524708, edx);
    if (eax != 0x00000080)
        goto loc_198ed6;
    goto loc_196658;
}
void sub_198efd() // 0160:198efd +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x39efac);
    edx = memoryAGet32(ds, 0x39efd8);
    if (eax == edx)
        goto loc_198f35;
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_198f23;
    edi = edx + -2;
    memoryASet32(ds, 0x39efd8, edi);
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_198f35;
    goto loc_198f30;
loc_198f23: // 0160:198f23
    ecx = edx + 2;
    memoryASet32(ds, 0x39efd8, ecx);
    if ((int32_t)ecx <= (int32_t)eax)
        goto loc_198f35;
loc_198f30: // 0160:198f30
    memoryASet32(ds, 0x39efd8, eax);
loc_198f35: // 0160:198f35
    eax = memoryAGet32(ds, 0x39efcc);
    edx = memoryAGet32(ds, 0x39efd0);
    if (eax == edx)
        goto loc_198f5f;
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_198f56;
    esi = edx + -1;
    memoryASet32(ds, 0x39efd0, esi);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_198f56: // 0160:198f56
    ecx = edx + 1;
    memoryASet32(ds, 0x39efd0, ecx);
loc_198f5f: // 0160:198f5f
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_198f64() // 0160:198f64 +long
{
    esp -= 4;
    goto loc_198f64;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10501 bytes
loc_198f64: // 0160:198f64
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_198fd9;
    if (memoryAGet32(ds, 0x1dc030) != 0x00000000)
        goto loc_198fd9;
    if (memoryAGet32(ds, 0x1dd246) != 0x00000000)
        goto loc_198fd9;
    if (memoryAGet(ds, 0x3a729e) == 0x00)
        goto loc_198fb1;
    if (memoryAGet32(ds, 0x39f23c) != 0x00010000)
        goto loc_198fb1;
    if (memoryAGet32(ds, 0x39ef7a) != 0x00000000)
        goto loc_198fb1;
    memoryASet32(ds, 0x39ef7a, 0x00000001);
loc_198fb1: // 0160:198fb1
    if (memoryAGet(ds, 0x3a729e) == 0x00)
        goto loc_198fd9;
    if (memoryAGet32(ds, 0x39f23c) != 0x00020000)
        goto loc_198fd9;
    if (memoryAGet32(ds, 0x39ef7a) != 0x00000000)
        goto loc_198fd9;
    memoryASet32(ds, 0x39ef7a, 0x00000002);
loc_198fd9: // 0160:198fd9
    ecx = memoryAGet32(ds, 0x39ef7a);
    if (!ecx)
        goto loc_196658;
    if (ecx != 0x00000001)
        goto loc_19901b;
    ebx = memoryAGet32(ds, 0x39f23c);
    ebx += 0x00000600;
    memoryASet32(ds, 0x39f23c, ebx);
    if ((int32_t)ebx < (int32_t)0x00020000)
        goto loc_199047;
    esi = 0;
    edi = 0x00020000;
    memoryASet32(ds, 0x39ef7a, esi);
    memoryASet32(ds, 0x39f23c, edi);
    goto loc_199047;
loc_19901b: // 0160:19901b
    edi = memoryAGet32(ds, 0x39f23c);
    edi -= 0x00000600;
    memoryASet32(ds, 0x39f23c, edi);
    if ((int32_t)edi > (int32_t)0x00010000)
        goto loc_199047;
    eax = 0;
    edx = 0x00010000;
    memoryASet32(ds, 0x39ef7a, eax);
    memoryASet32(ds, 0x39f23c, edx);
loc_199047: // 0160:199047
    if (memoryAGet(ds, 0x3a729e) != 0x00)
        goto loc_199055;
    sub_19d0f3();
loc_199055: // 0160:199055
    ebp = 0;
    memoryASet32(ds, 0x39efa0, ebp);
    goto loc_196658;
}
void sub_199062() // 0160:199062 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1dd23e);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x1dd23e, edx);
    ebx &= 0x0000003f;
    ecx = memoryAGet32(ds, 0x1df8d0);
    memoryASet32(ds, 0x1dd23e, ebx);
    if (stop("postCondition"))
        goto loc_1990ea;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_1990ea;
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_1990be;
    push32(0x00000140);
    push32(0x00000140);
    eax = 0x0026e868;
    push32(0x00000008);
    ecx = 0x00000064;
    ebx = 0x00000088;
    push32(0x00000030);
    edx = 0x002c69a8;
    eax += 0x00003d10;
    goto loc_1990e5;
loc_1990be: // 0160:1990be
    push32(0x00000140);
    push32(0x00000140);
    eax = 0x0026e868;
    push32(0x00000008);
    ecx = 0x00000064;
    ebx = 0x00000088;
    push32(0x00000030);
    edx = 0x002c69a8;
    eax += 0x00004710;
loc_1990e5: // 0160:1990e5
    sub_19cc15();
    stop("stack_below", "0160:1990e5");
loc_1990ea: // 0160:1990ea
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_199163() // 0160:199163 +long
{
    esp -= 4;
    goto loc_199163;
loc_196659: // 0160:196659
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11012 bytes
loc_199163: // 0160:199163
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x1dc0e4);
    if (!edx)
        goto loc_1991a4;
    ebx = edx + -1;
    memoryASet32(ds, 0x1dc0e4, ebx);
    if (ebx)
        goto loc_1991a4;
    eax = memoryAGet32(ds, 0x39f0a0);
    esi = 0xffffffff;
    sub_19e906();
    edi = memoryAGet32(ds, 0x1dfc80);
    memoryASet32(ds, 0x1dc0b8, esi);
    if (edi)
        goto loc_1991a4;
    memoryASet32(ds, 0x39bdd4, esi);
loc_1991a4: // 0160:1991a4
    if (memoryAGet32(ds, 0x39effc) == 0x00000000)
        goto loc_196659;
    if (memoryAGet32(ds, 0x39efc4) != 0x00000000)
        goto loc_196659;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_196659;
    if (memoryAGet32(ds, 0x1dfc80) != 0x00000000)
        goto loc_196659;
    esi = memoryAGet32(ds, 0x1dd24a);
    if (!esi)
        goto loc_1991eb;
    edi = esi + -1;
    memoryASet32(ds, 0x1dd24a, edi);
loc_1991eb: // 0160:1991eb
    if (memoryAGet32(ds, 0x1dd246) == 0x00000000)
        goto loc_1991fe;
    memoryASet32(ds, 0x39bdd4, 0x00000032);
loc_1991fe: // 0160:1991fe
    if (memoryAGet(ds, 0x3a7285) == 0x00)
        goto loc_196659;
    if (memoryAGet32(ds, 0x1dd24a) != 0x00000000)
        goto loc_196659;
    memoryASet(ds, 0x1dd246, memoryAGet(ds, 0x1dd246) ^ 0x01);
    ebx = 0x0000000c;
    ecx = memoryAGet32(ds, 0x1dd246);
    memoryASet32(ds, 0x1dd24a, ebx);
    if (ecx)
        goto loc_199261;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792134, 0x00000001);
    eax = 0x001d264b;
    sub_19e906();
    memoryASet32(ds, 0x1dc0e4, 0x00000032);
    goto loc_196659;
loc_199261: // 0160:199261
    esi = 0;
    dh = 0x20;
    memoryASet32(ds, 0x1dc0e4, esi);
    sub_1969ec();
    eax = 0;
loc_199272: // 0160:199272
    eax++;
    memoryASet(ds, eax + 1910312, dh);
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_199272;
    edx = memoryAGet32(ds, 0x39ef98);
    ecx = memoryAGet32(ds, 0x39ef98);
    eax = 0;
    edx <<= 4;
    ebx = ecx * 0x000000ac;
    goto loc_1992a5;
loc_199297: // 0160:199297
    eax++;
    cl = memoryAGet(ds, edx + 1949936);
    edx++;
    memoryASet(ds, eax + 1910312, cl);
loc_1992a5: // 0160:1992a5
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, ebx + 3792086))
        goto loc_199297;
    eax = 0;
loc_1992af: // 0160:1992af
    eax++;
    dl = memoryAGet(ds, eax + 1910842);
    memoryASet(ds, eax + 1910334, dl);
    if ((int32_t)eax < (int32_t)0x0000000a)
        goto loc_1992af;
    eax = 0x001d2622;
    sub_19e906();
    goto loc_196659;
}
void sub_1992d0() // 0160:1992d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1dd24e);
    if (!edx)
        goto loc_19930f;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19930f;
    eax = edx;
    eax &= 0x00000007;
    eax++;
    memoryASet32(ds, 0x1dd24e, eax);
    if ((int32_t)eax <= (int32_t)0x00000003)
        goto loc_19930f;
    ecx = 0x00000012;
    ebx = 0x00000010;
    edx = 0x002c78b0;
    eax = 0x002722d8;
    sub_1c4e46();
loc_19930f: // 0160:19930f
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19934d() // 0160:19934d +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x1dd25a, edx);
    memoryASet32(ds, 0x1dd262, ecx);
    ecx = 0x0000000a;
loc_199368: // 0160:199368
    if (memoryAGet32(ds, 0x1dd25a) == 0x00000000)
        goto loc_19941c;
    edi = memoryAGet32(ds, 0x1dd262);
    if ((int32_t)edi >= (int32_t)0x00000080)
        goto loc_19941c;
    if ((int32_t)edi >= (int32_t)0x00000040)
        goto loc_199393;
    sub_198725();
    goto loc_1993e4;
loc_199393: // 0160:199393
    edx = 0;
    dl = memoryAGet(ds, 0x1d2812);
    edx -= 0x0000002d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x1d2812, dl);
    edx = 0;
    dl = memoryAGet(ds, 0x1d2813);
    edx -= 0x00000029;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x1d2813, dl);
    edx = 0;
    dl = memoryAGet(ds, 0x1d2814);
    edx -= 0x0000002d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x1d2814, dl);
loc_1993e4: // 0160:1993e4
    eax = 0x001d2812;
    sub_1a9cfc();
    memoryASet32(ds, 0x1dc084, eax);
    eax = 0;
loc_1993f5: // 0160:1993f5
    eax++;
    dl = memoryAGet(ds, eax + 1910801);
    memoryASet(ds, eax + 1910842, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_1993f5;
    eax = memoryAGet32(ds, 0x1dc084);
    sub_198554();
    memoryASet32(ds, 0x1dd262, memoryAGet32(ds, 0x1dd262) + 1);
    goto loc_199368;
loc_19941c: // 0160:19941c
    if (memoryAGet32(ds, 0x1dc08c) == 0x00000000)
        goto loc_199431;
    eax = 0;
    memoryASet32(ds, 0x1dd25e, eax);
    memoryASet32(ds, 0x1dc08c, eax);
loc_199431: // 0160:199431
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_199435() // 0160:199435 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x0000002d;
    eax = 0;
    sub_1a9cc8();
    dl = 0x20;
    ecx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = 0;
loc_19944f: // 0160:19944f
    eax++;
    memoryASet(ds, eax + 1913384, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_19944f;
    eax = ecx;
    ebx = 0;
loc_19945f: // 0160:19945f
    if (memoryAGet(ds, eax) == 0x00)
        goto loc_199468;
    eax++;
    ebx++;
    goto loc_19945f;
loc_199468: // 0160:199468
    edx = 0x00000028;
    edx -= ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax = ecx;
    ecx += ebx;
    goto loc_19948a;
loc_199480: // 0160:199480
    edx++;
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx + 1913384, bl);
loc_19948a: // 0160:19948a
    if (eax != ecx)
        goto loc_199480;
    ebx = 0x000000c8;
    eax = 0x001d3229;
    edx = 0;
    sub_19e8ec();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1994a3() // 0160:1994a3 +long
{
    esp -= 4;
    goto loc_1994a3;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11844 bytes
loc_1994a3: // 0160:1994a3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1dc020) == 0x00000000)
        goto loc_1994e2;
    edi = 0x000000b0;
    ebx = 0;
    ebp = memoryAGet32(ds, 0x1df8d0);
    memoryASet32(ds, 0x1dc020, ebx);
    memoryASet32(ds, 0x1dc09c, ebx);
    memoryASet32(ds, 0x1dc0bc, ebx);
    memoryASet32(ds, 0x1dc0a0, edi);
    if (stop("postCondition"))
        goto loc_1994e2;
    eax = 0;
    sub_1bb45a();
loc_1994e2: // 0160:1994e2
    if (memoryAGet32(ds, 0x1dc030) == 0x00000000)
        goto loc_196658;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_196658;
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_199557;
    if (memoryAGet32(ds, 0x39efc4) != 0x00000000)
        goto loc_199557;
    sub_19b1f5();
    edi = 0x00000001;
    eax = 0x0000001a;
    dl = 0x20;
    memoryASet32(ds, 0x1dc094, edi);
    memoryASet32(ds, 0x39efc4, edi);
loc_19952b: // 0160:19952b
    eax++;
    memoryASet(ds, eax + 1910775, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_19952b;
    dh = 0x3f;
    eax = 0x001d27f8;
    memoryASet(ds, 0x1d2812, dh);
    edx = 0x002032c8;
    sub_19731d();
    eax = 0;
    memoryASet32(ds, 0x39efc8, eax);
    goto loc_1995b4;
loc_199557: // 0160:199557
    if (memoryAGet32(ds, 0x39efc4) != 0x00000000)
        goto loc_199589;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_199589;
    if ((int32_t)memoryAGet32(ds, 0x1df8d0) < (int32_t)0x00000000)
        goto loc_199589;
    eax = 0x001d2821;
    esi = 0x00000001;
    sub_19e929();
    memoryASet32(ds, 0x39bdd4, esi);
    goto loc_1995b4;
loc_199589: // 0160:199589
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_1995a5;
    ebx = 0x00000063;
    memoryASet32(ds, 0x39ef94, ebx);
    memoryASet32(ds, 0x1dc030, ebx);
    goto loc_1995b4;
loc_1995a5: // 0160:1995a5
    eax = 0x00000225;
    memoryASet32(ds, 0x39ef94, eax);
    memoryASet32(ds, 0x1dc030, eax);
loc_1995b4: // 0160:1995b4
    if (memoryAGet(ds, 0x3a72b9) != 0x00)
        goto loc_1995d3;
    if (memoryAGet32(ds, 0x39bde4) != 0x00000000)
        goto loc_1995d3;
    if (memoryAGet32(ds, 0x1dc088) == 0x00000000)
        goto loc_199697;
loc_1995d3: // 0160:1995d3
    ecx = memoryAGet32(ds, 0x39efc4);
    if (ecx)
        goto loc_199697;
    memoryASet32(ds, 0x1dc088, ecx);
    sub_198725();
    eax = 0x001d2812;
    sub_1a9cfc();
    ebx = eax;
    eax = 0;
loc_1995fa: // 0160:1995fa
    eax++;
    dl = memoryAGet(ds, eax + 1910801);
    memoryASet(ds, eax + 1910842, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_1995fa;
    edi = 0x00000001;
    ebp = memoryAGet32(ds, 0x1dc0ec);
    memoryASet32(ds, 0x1dc0c0, edi);
    if (ebp)
        goto loc_199626;
    sub_19a337();
loc_199626: // 0160:199626
    if ((int32_t)memoryAGet32(ds, 0x1dd25e) >= (int32_t)0x00000000)
        goto loc_19963f;
    eax = ebx;
    sub_198554();
    if (memoryAGet32(ds, 0x1dd25a) == 0x00000000)
        goto loc_199644;
loc_19963f: // 0160:19963f
    sub_19934d();
loc_199644: // 0160:199644
    ebx = 0;
    ecx = memoryAGet32(ds, 0x1dfc80);
    memoryASet32(ds, 0x1dc0c0, ebx);
    if (!ecx)
        goto loc_199669;
    ebp = 0x00000063;
    memoryASet32(ds, 0x39ef94, ebp);
    memoryASet32(ds, 0x1dc030, ebp);
    goto loc_19967a;
loc_199669: // 0160:199669
    esi = 0x00000225;
    memoryASet32(ds, 0x39ef94, esi);
    memoryASet32(ds, 0x1dc030, esi);
loc_19967a: // 0160:19967a
    edx = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0x39f234, edx);
    memoryASet32(ds, 0x39f1ac, ebx);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x39f238, eax);
loc_199697: // 0160:199697
    if (memoryAGet32(ds, 0x39efc4) != 0x00000000)
        goto loc_196658;
    esi = memoryAGet32(ds, 0x1dc030);
    esi--;
    memoryASet32(ds, 0x1dc030, esi);
    if (!esi)
        goto loc_1996c9;
    if (memoryAGet32(ds, 0x39bde8) != 0x00000000)
        goto loc_1996c9;
    if (memoryAGet(ds, 0x3a72b7) == 0x00)
        goto loc_196658;
loc_1996c9: // 0160:1996c9
    eax = memoryAGet32(ds, 0x39bdd8);
    eax += 0x00000002;
    sub_1bb45a();
    eax = memoryAGet32(ds, 0x3a7470);
    ebx = 0x00000064;
    ecx = 0x00000002;
    esi = 0x00000001;
    memoryASet32(ds, 0x39f238, eax);
    edx = 0;
    eax = 0x00000001;
    memoryASet32(ds, 0x1dc030, edx);
    memoryASet32(ds, 0x39f1ac, ebx);
    memoryASet32(ds, 0x39ef7e, eax);
    eax = memoryAGet32(ds, 0x39eff8);
    memoryASet32(ds, 0x39ef7a, ecx);
    memoryASet32(ds, 0x39ef94, eax);
    eax = 0x001e0608;
    ebx = 0x00000032;
    sub_1a426e();
    memoryASet32(ds, 0x39bdd4, esi);
    memoryASet32(ds, 0x39bdc4, esi);
    sub_199435();
    eax = 0x001d269d;
    edx = memoryAGet32(ds, 0x39ef98);
    sub_19e8ec();
    eax = 0;
loc_199749: // 0160:199749
    eax++;
    dl = memoryAGet(ds, eax + 1910801);
    memoryASet(ds, eax + 3784107, dl);
    if ((int32_t)eax < (int32_t)0x0000000c)
        goto loc_199749;
    ebp = 0x00000019;
    eax = 0x0000015e;
    memoryASet32(ds, 0x39bda8, ebp);
    memoryASet32(ds, 0x1dc0e4, eax);
    goto loc_196658;
}
void sub_199775() // 0160:199775 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792146) == 0x00000000)
        goto loc_199790;
    edx = 0x00000019;
    goto loc_199795;
loc_199790: // 0160:199790
    edx = 0x0000001c;
loc_199795: // 0160:199795
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd2ca, edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd2ce, edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd2d2, edx);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd2da, eax);
    edx = pop32();
    esp += 4;
}
void sub_1997d1() // 0160:1997d1 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792150) == 0x00000000)
        goto loc_1997ec;
    edx = 0x00000018;
    goto loc_1997f1;
loc_1997ec: // 0160:1997ec
    edx = 0x0000001b;
loc_1997f1: // 0160:1997f1
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd2a2, edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd2a6, edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd2aa, edx);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd2b2, eax);
    edx = pop32();
    esp += 4;
}
void sub_19982d() // 0160:19982d +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792154) == 0x00000000)
        goto loc_199848;
    edx = 0x0000001a;
    goto loc_19984d;
loc_199848: // 0160:199848
    edx = 0x0000001d;
loc_19984d: // 0160:19984d
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd31a, edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd31e, edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd322, edx);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1dd32a, eax);
    edx = pop32();
    esp += 4;
}
void sub_199889() // 0160:199889 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = 0x00000001;
    eax = 0;
loc_199893: // 0160:199893
    eax += 0x000000ac;
    memoryASet32(ds, eax + 3791974, edx);
    memoryASet32(ds, eax + 3791978, edx);
    memoryASet32(ds, eax + 3791982, edx);
    if (eax != 0x00000ac0)
        goto loc_199893;
    sub_1997d1();
    sub_199775();
    sub_19982d();
    if (memoryAGet32(ds, 0x1dc0c8) != 0x00000000)
        goto loc_1998d3;
    eax = 0x001d3023;
    sub_19e929();
loc_1998d3: // 0160:1998d3
    edi = 0x00000001;
    ebp = 0xffffffff;
    memoryASet32(ds, 0x1dc0c8, edi);
    memoryASet32(ds, 0x39e98a, ebp);
    memoryASet32(ds, 0x39e9de, ebp);
    memoryASet32(ds, 0x39ea32, ebp);
    memoryASet32(ds, 0x39ea86, ebp);
    memoryASet32(ds, 0x39e986, ebp);
    memoryASet32(ds, 0x39e9da, ebp);
    memoryASet32(ds, 0x39ea2e, ebp);
    memoryASet32(ds, 0x39ea82, ebp);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_199917() // 0160:199917 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    eax = memoryAGet32(ds, 0x39ef9c);
    ecx = eax;
    edx = 0x00000001;
    ecx <<= 2;
    esi = memoryAGet32(ds, 0x1dfc80);
    ecx += eax;
    ebx = 0;
    ecx <<= 2;
    memoryASet32(ds, 0x1dfc80, edx);
    ecx += eax;
    eax = 0;
    goto loc_199961;
loc_199943: // 0160:199943
    edx = memoryAGet32(ds, eax + 1954422);
    edx += ecx;
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_19995d;
    indirectCall(cs, memoryAGet32(ds, eax + 1954410)); // 0160:199955;
    goto loc_199988;
loc_19995d: // 0160:19995d
    eax += 0x00000014;
    ebx++;
loc_199961: // 0160:199961
    if ((int32_t)eax < (int32_t)0x0000017c)
        goto loc_199943;
    if (ebx != 0x00000013)
        goto loc_199988;
    sub_19eeac();
    ebx = 0x0000003d;
    ecx = 0x001d2ba7;
    memoryASet32(ds, 0x39f09c, ebx);
    memoryASet32(ds, 0x39f0a0, ecx);
loc_199988: // 0160:199988
    memoryASet32(ds, 0x1dfc80, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_199993() // 0160:199993 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    eax = 0;
loc_199997: // 0160:199997
    eax += 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3791974, edx);
    memoryASet32(ds, eax + 3791978, edx);
    memoryASet32(ds, eax + 3791982, edx);
    if (eax != 0x00000ac0)
        goto loc_199997;
    sub_1997d1();
    sub_199775();
    sub_19982d();
    if (memoryAGet32(ds, 0x1dc0c8) == 0x00000000)
        goto loc_1999de;
    eax = 0x001d304c;
    sub_19e929();
    sub_199917();
loc_1999de: // 0160:1999de
    edi = 0;
    memoryASet32(ds, 0x1dc0c8, edi);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1999e9() // 0160:1999e9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1dc098);
    if (edx)
        goto loc_199a81;
    eax = memoryAGet32(ds, 0x3a7470);
    esi = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x1dd4be, eax);
    eax = esi * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1dc0a4, edx);
    memoryASet32(ds, 0x1dc0a8, edx);
    memoryASet32(ds, 0x1dc0b4, edx);
    memoryASet32(ds, 0x1dc0e4, edx);
    memoryASet32(ds, 0x1dc098, ebp);
    memoryASet32(ds, 0x1dc0bc, ebp);
    memoryASet32(ds, 0x39bdc4, ebp);
    esi = 0xffffffff;
    memoryASet32(ds, eax + 3792082, edx);
    eax = 0xfffffffe;
    memoryASet32(ds, 0x39f234, ebp);
    memoryASet32(ds, 0x1dc0b8, esi);
    memoryASet32(ds, 0x39f098, edx);
    memoryASet32(ds, 0x39f004, edx);
    memoryASet32(ds, 0x39bdd4, esi);
    esi = 0x00001400;
    memoryASet32(ds, 0x1dc09c, eax);
    memoryASet32(ds, 0x39bddc, esi);
    goto loc_199a97;
loc_199a81: // 0160:199a81
    ebx = 0x00000002;
    ecx = 0x00000001;
    memoryASet32(ds, 0x1dc09c, ebx);
    memoryASet32(ds, 0x1dc0a8, ecx);
loc_199a97: // 0160:199a97
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000001e;
    sub_1b9c1d();
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_199ab8() // 0160:199ab8 +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    edx = 0;
    ebp = 0x000000b0;
    memoryASet32(ds, 0x1dc0e4, edx);
    memoryASet32(ds, 0x1dc09c, edx);
    memoryASet32(ds, 0x1dc098, edx);
    memoryASet32(ds, 0x1dc0bc, edx);
    memoryASet32(ds, 0x1dc0a8, edx);
    memoryASet32(ds, 0x1dc0a0, ebp);
    ebp = pop32();
    edx = pop32();
    esp += 4;
}
void sub_199ae8() // 0160:199ae8 +long
{
    esp -= 4;
    goto loc_199ae8;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13449 bytes
loc_199ae8: // 0160:199ae8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1dc0a4);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x1dc0b8);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 1954414);
    edx = memoryAGet32(ds, eax + 1954422);
    if (stop("postCondition"))
        goto loc_199b31;
    if (edx != 0xffffffff)
        goto loc_196658;
    if (stop("postCondition"))
        goto loc_196658;
loc_199b31: // 0160:199b31
    if (edx == 0xffffffff)
        goto loc_199b58;
    ebx = memoryAGet32(ds, 0x39ef9c);
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 2;
    eax += ebx;
    eax += edx;
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_196658;
loc_199b58: // 0160:199b58
    ebp = 0x00000002;
    edx = 0x00000032;
    ecx = 0x00000010;
    esi = 0x00000001;
    edi = 0;
    ah = 0;
    memoryASet32(ds, 0x1dc0e4, edi);
    memoryASet32(ds, 0x1dc09c, ebp);
    memoryASet32(ds, 0x1dc098, edi);
    memoryASet32(ds, 0x39f1ac, edx);
    memoryASet32(ds, 0x1dc0a8, edi);
    memoryASet32(ds, 0x39efac, ecx);
    memoryASet(ds, 0x3a72a5, ah);
    memoryASet32(ds, 0x39bdec, esi);
    ebp = memoryAGet32(ds, 0x1dc028);
    memoryASet32(ds, 0x39bde8, esi);
    if (!ebp)
        goto loc_199bb7;
    sub_19eabf();
    goto loc_199bee;
loc_199bb7: // 0160:199bb7
    edx = memoryAGet32(ds, 0x1dc0a4);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x1dc0b8);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 1954414) < (int32_t)0x00000000)
        goto loc_199bee;
    indirectCall(cs, memoryAGet32(ds, eax + 1954410)); // 0160:199be2;
    memoryASet32(ds, 0x39f0bc, edi);
loc_199bee: // 0160:199bee
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000001e;
    sub_1b9c1d();
    goto loc_196658;
}
void sub_199c0e() // 0160:199c0e +long
{
    esp -= 4;
    goto loc_199c0e;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13743 bytes
loc_199c0e: // 0160:199c0e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    eax -= memoryAGet32(ds, 0x1dd4be);
    edx = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1dd4be, edx);
    if (eax)
        goto loc_199c34;
    eax = 0x00000001;
loc_199c34: // 0160:199c34
    stop("imul eax * memoryAGet32(ds, 0x1dc09c)");
    ecx = memoryAGet32(ds, 0x1dc0a0);
    ecx += eax;
    memoryASet32(ds, 0x1dc0a0, ecx);
    if ((int32_t)ecx >= (int32_t)0x00000084)
        goto loc_199c64;
    edi = 0;
    ebp = 0x00000084;
    memoryASet32(ds, 0x1dc09c, edi);
    memoryASet32(ds, 0x1dc0a0, ebp);
loc_199c64: // 0160:199c64
    if ((int32_t)memoryAGet32(ds, 0x1dc0a0) <= (int32_t)0x000000b0)
        goto loc_199d2f;
    edx = 0x000000b0;
    ebx = memoryAGet32(ds, 0x1dc0a8);
    memoryASet32(ds, 0x1dc0a0, edx);
    if (!ebx)
        goto loc_199cb7;
    if (memoryAGet32(ds, 0x39ef94) == 0x00000000)
        goto loc_199cb7;
    eax = memoryAGet32(ds, 0x1dc0a4);
    eax++;
    eax &= 0x00000001;
    edx = 0xffffffff;
    memoryASet32(ds, 0x1dc0a4, eax);
    eax = 0xfffffffe;
    memoryASet32(ds, 0x1dc0b8, edx);
    memoryASet32(ds, 0x1dc09c, eax);
    goto loc_199d2f;
loc_199cb7: // 0160:199cb7
    esi = 0;
    ebp = memoryAGet32(ds, 0x39ef94);
    memoryASet32(ds, 0x1dc09c, esi);
    memoryASet32(ds, 0x1dc0bc, esi);
    if (ebp)
        goto loc_199d2f;
    ebx = 0x00000032;
    eax = 0x001d2674;
    edi = 0x00000032;
    memoryASet32(ds, 0x1dc098, esi);
    memoryASet32(ds, 0x1dc0a8, esi);
    memoryASet32(ds, 0x1dc0a4, esi);
    edx = 0;
    memoryASet32(ds, 0x39eff4, esi);
    sub_19e8ec();
    esi = 0x00000001;
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f230, edi);
    memoryASet32(ds, 0x39f0bc, esi);
    memoryASet32(ds, 0x39f19c, esi);
    sub_19ce55();
    edx = eax;
    eax = 0x0000002d;
    sub_1b9c1d();
loc_199d2f: // 0160:199d2f
    eax = memoryAGet32(ds, 0x1dd4c2);
    eax++;
    eax &= 0x0000000f;
    memoryASet32(ds, 0x1dd4c2, eax);
    eax = memoryAGet32(ds, 0x1dc0a4);
    edi = 0x00000010;
    ebp = eax;
    esi = eax;
    ebp <<= 2;
    esi <<= 4;
    ebp -= eax;
    esi -= eax;
    ebp <<= 2;
    esi <<= 4;
loc_199d5b: // 0160:199d5b
    if ((int32_t)memoryAGet32(ds, esi + 1954414) < (int32_t)0x00000000)
        goto loc_199dbd;
    edx = memoryAGet32(ds, 0x1dc0a4) * 0x0000000c;
    edx += memoryAGet32(ds, 0x1dc0b4);
    eax = 0;
    if (ebp != edx)
        goto loc_199d8e;
    if (memoryAGet32(ds, 0x1dc09c) != 0x00000000)
        goto loc_199d8e;
    if ((int32_t)memoryAGet32(ds, 0x1dd4c2) >= (int32_t)0x00000008)
        goto loc_199d8e;
    eax = 0x00003c00;
loc_199d8e: // 0160:199d8e
    push32(0x00000140);
    edx = 0x00211fc8;
    push32(0x00000140);
    ecx = memoryAGet32(ds, 0x1dc0a0);
    ebx = memoryAGet32(ds, esi + 1954414);
    push32(0x00000018);
    edx += ebx;
    ebx = edi;
    push32(0x00000018);
    eax += edx;
    edx = 0x002c69a8;
    sub_19cc15();
loc_199dbd: // 0160:199dbd
    esi += 0x00000014;
    edi += 0x00000018;
    ebp++;
    if ((int32_t)edi < (int32_t)0x00000130)
        goto loc_199d5b;
    goto loc_196658;
}
void sub_199dd1() // 0160:199dd1 +long
{
    esp -= 4;
    goto loc_199dd1;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14194 bytes
loc_199dd1: // 0160:199dd1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if ((int32_t)memoryAGet32(ds, 0x1dc0ac) >= (int32_t)0x00000040)
        goto loc_199dea;
    memoryASet32(ds, 0x1dc0ac, 0x00000040);
loc_199dea: // 0160:199dea
    if ((int32_t)memoryAGet32(ds, 0x1dc0ac) <= (int32_t)0x000004a0)
        goto loc_199e00;
    memoryASet32(ds, 0x1dc0ac, 0x000004a0);
loc_199e00: // 0160:199e00
    if ((int32_t)memoryAGet32(ds, 0x1dc0b0) >= (int32_t)0x00000000)
        goto loc_199e11;
    ebp = 0;
    memoryASet32(ds, 0x1dc0b0, ebp);
loc_199e11: // 0160:199e11
    if ((int32_t)memoryAGet32(ds, 0x1dc0b0) <= (int32_t)0x00000048)
        goto loc_199e24;
    memoryASet32(ds, 0x1dc0b0, 0x00000048);
loc_199e24: // 0160:199e24
    eax = memoryAGet32(ds, 0x1dc0ac);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax = memoryAGet32(ds, 0x1dc0b0);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = memoryAGet32(ds, 0x1dc0a0);
    ebx = 0;
    edi = memoryAGet32(ds, 0x1dc028);
    memoryASet32(ds, 0x39bdb8, ebx);
    ecx += eax;
    if (edi)
        goto loc_199e83;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000d);
    edx = 0x002c69a8;
    push32(0x00000010);
    eax = 0x002992a8;
    ebx = esi;
    sub_19cc15();
loc_199e83: // 0160:199e83
    edx = esi + -16;
    ecx = 0x00000018;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebp = memoryAGet32(ds, 0x1dc0b8);
    memoryASet32(ds, 0x1dc0b4, eax);
    if (eax != ebp)
        goto loc_199eae;
    if (memoryAGet32(ds, 0x1dc040) == 0x00000000)
        goto loc_199f3a;
loc_199eae: // 0160:199eae
    eax = memoryAGet32(ds, 0x1dc0b4);
    edx = memoryAGet32(ds, 0x1dc0a4);
    memoryASet32(ds, 0x1dc0b8, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x1dc0b4);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 1954418) != 0x00000000)
        goto loc_199f04;
    ebx = memoryAGet32(ds, eax + 1954422);
    if (ebx == 0xffffffff)
        goto loc_199f04;
    eax = memoryAGet32(ds, eax + 1954406);
    memoryASet32(ds, 0x39f09c, ebx);
    memoryASet32(ds, 0x39f0a0, eax);
    sub_19e865();
loc_199f04: // 0160:199f04
    edx = memoryAGet32(ds, 0x1dc0a4);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x1dc0b4);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    ecx = 0xffffffff;
    sub_19e929();
    memoryASet32(ds, 0x39bdd4, ecx);
loc_199f3a: // 0160:199f3a
    esi = memoryAGet32(ds, 0x1dc040);
    if (!esi)
        goto loc_196658;
    edi = esi + -1;
    memoryASet32(ds, 0x1dc040, edi);
    goto loc_196658;
}
void sub_199f56() // 0160:199f56 +long
{
    bool temp_cond0;

    esp -= 4;
    goto loc_199f56;
loc_196659: // 0160:196659
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14583 bytes
loc_199f56: // 0160:199f56
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x39ef98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = memoryAGet32(ds, 0x39bda8);
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    if (!edx)
        goto loc_199f87;
    ecx = edx + -1;
    memoryASet32(ds, 0x39bda8, ecx);
loc_199f87: // 0160:199f87
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_196659;
    if (memoryAGet32(ds, 0x1dd246) != 0x00000000)
        goto loc_196659;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792022);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    temp_cond0 = stop("preCondition");
    temp_cond0 = stop("preCondition");
    stop("disassembly failed at 160:199fbb setg al");
    edx = memoryAGet32(ds, 0x39bde4);
    eax &= 0x000000ff;
    if (!edx)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x39bda8) != 0x00000000)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x1dc030) != 0x00000000)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x1dc09c) != 0x00000000)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x1dd550) == 0x00000003)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x39f1bc) != 0x00000000)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x39f1b4) != 0x00000000)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x39efac) != 0x00000010)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x1dfc80) != 0x00000000)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x1dfbc8) != 0x00000000)
        goto loc_19a075;
    if (ebx != 0x00000003)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x39f060) == 0x00000002)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x39f040) != 0x00000000)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x39f044) != 0x00000000)
        goto loc_19a075;
    if (eax)
        goto loc_19a075;
    if (memoryAGet32(ds, 0x39f04c) != 0x00000000)
        goto loc_19a075;
    sub_1999e9();
loc_19a075: // 0160:19a075
    if (memoryAGet32(ds, 0x1dc098) != 0x00000000)
        goto loc_19a087;
    if (memoryAGet32(ds, 0x1dc09c) == 0x00000000)
        goto loc_19a08c;
loc_19a087: // 0160:19a087
    sub_199c0e();
loc_19a08c: // 0160:19a08c
    if (memoryAGet32(ds, 0x1dc0a0) != 0x00000084)
        goto loc_196659;
    sub_199dd1();
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_19a0b8;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19a0b8;
    sub_199ae8();
loc_19a0b8: // 0160:19a0b8
    esi = memoryAGet32(ds, 0x39ef94);
    if (esi)
        goto loc_196659;
    edi = 0x00000002;
    memoryASet32(ds, 0x1dc098, esi);
    memoryASet32(ds, 0x1dc09c, edi);
    goto loc_196659;
}
void sub_19a0dc() // 0160:19a0dc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    edx = memoryAGet32(ds, 0x1dc034);
    if (edx != 0x00000002)
        goto loc_19a148;
    if (memoryAGet32(ds, 0x1dc05c) == 0x00000000)
        goto loc_19a117;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000f);
    ecx = eax;
    ebx = edx;
    push32(0x0000000d);
    edx = 0x002c69a8;
    eax = 0x002a4578;
    sub_19cc15();
loc_19a117: // 0160:19a117
    if (memoryAGet32(ds, 0x1dc068) == 0x00000000)
        goto loc_19a212;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000f);
    ebx = 0x00000131;
    edx = 0x002c69a8;
    push32(0x0000000d);
    eax = 0x002a4578;
    ecx = esi;
    goto loc_19a20d;
loc_19a148: // 0160:19a148
    if ((int32_t)edx < (int32_t)0x00000003)
        goto loc_19a212;
    if (memoryAGet32(ds, 0x1dc05c) == 0x00000000)
        goto loc_19a17f;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000007;
    ecx = eax + -1;
    push32(0x00000008);
    edx = 0x002c69a8;
    eax = 0x002a4588;
    sub_19cc15();
loc_19a17f: // 0160:19a17f
    if (memoryAGet32(ds, 0x1dc074) == 0x00000000)
        goto loc_19a1ad;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000007;
    edx = 0x002c69a8;
    push32(0x00000008);
    eax = 0x002a4588;
    ecx = esi + 7;
    sub_19cc15();
loc_19a1ad: // 0160:19a1ad
    if (memoryAGet32(ds, 0x1dc068) == 0x00000000)
        goto loc_19a1db;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000131;
    edx = 0x002c69a8;
    push32(0x00000008);
    eax = 0x002a4588;
    ecx = esi + -1;
    sub_19cc15();
loc_19a1db: // 0160:19a1db
    if (memoryAGet32(ds, 0x1dc034) != 0x00000004)
        goto loc_19a212;
    if (memoryAGet32(ds, 0x1dc080) == 0x00000000)
        goto loc_19a212;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000131;
    edx = 0x002c69a8;
    push32(0x00000008);
    eax = 0x002a4588;
    ecx = esi + 7;
loc_19a20d: // 0160:19a20d
    sub_19cc15();
loc_19a212: // 0160:19a212
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a217() // 0160:19a217 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if ((int32_t)memoryAGet32(ds, 0x1df8d0) < (int32_t)0x00000000)
        goto loc_19a2a8;
    if (memoryAGet32(ds, 0x1dc0c0) != 0x00000000)
        goto loc_19a27e;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x00000049;
    push32(0x00000080);
    edx = 0x002c69a8;
    eax = 0x0029d528;
    sub_19cc15();
    stop("stack_below", "0160:19a255");
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x000000c9;
    push32(0x0000002e);
    edx = 0x002c69a8;
    eax = 0x002a9548;
    goto loc_19a2a3;
loc_19a27e: // 0160:19a27e
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x0000004c;
    push32(0x000000a8);
    edx = 0x002c69a8;
    eax = 0x002a8ad8;
loc_19a2a3: // 0160:19a2a3
    sub_19cc15();
    stop("stack_below", "0160:19a2a3");
loc_19a2a8: // 0160:19a2a8
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a2ac() // 0160:19a2ac +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1dd4c6);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x1dd4c6, edx);
    ebx &= 0x0000003f;
    ecx = memoryAGet32(ds, 0x1dfc80);
    memoryASet32(ds, 0x1dd4c6, ebx);
    if (!ecx)
        goto loc_19a333;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19a333;
    if (memoryAGet32(ds, 0x1dc03c) != 0x00000000)
        goto loc_19a333;
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_19a30c;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x00000020;
    ebx = 0x00000090;
    push32(0x00000020);
    edx = 0x002c69a8;
    eax = 0x00273978;
    goto loc_19a32e;
loc_19a30c: // 0160:19a30c
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x00000020;
    ebx = 0x00000090;
    push32(0x00000020);
    edx = 0x002c69a8;
    eax = 0x00274378;
loc_19a32e: // 0160:19a32e
    sub_19cc15();
    stop("stack_below", "0160:19a32e");
loc_19a333: // 0160:19a333
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a337() // 0160:19a337 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    memoryASet32(ds, 0x1dc0e8, 0x00000001);
    sub_19c7ca();
    sub_196afc();
    sub_1aebd1();
    sub_1b08a8();
    sub_1afe37();
    sub_1abdc2();
    sub_1b199d();
    sub_1ac0e6();
    sub_1abe6f();
    sub_1ac076();
    sub_1b32d4();
    sub_1a3fb3();
    sub_1b1c89();
    sub_1aeb5f();
    sub_1b0ce8();
    sub_1b0f94();
    sub_1ad60c();
    sub_1b13ae();
    sub_19cbc0();
    if (memoryAGet32(ds, 0x39f0bc) != 0x00000000)
        goto loc_19a3c3;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19a3c3;
    if ((int32_t)memoryAGet32(ds, 0x1df8d0) < (int32_t)0x00000000)
        goto loc_19a3c3;
    sub_196b8d();
loc_19a3c3: // 0160:19a3c3
    sub_199f56();
    sub_1b2507();
    sub_197f7a();
    if (memoryAGet32(ds, 0x39bdc4) == 0x00000002)
        goto loc_19a418;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19a418;
    if (memoryAGet32(ds, 0x1dc09c) != 0x00000000)
        goto loc_19a418;
    eax = memoryAGet32(ds, 0x39bddc);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 7;
    edx = 0x002d2f28;
    eax += 0x002019c8;
    sub_1c4ef3();
loc_19a418: // 0160:19a418
    if (memoryAGet32(ds, 0x1dc030) == 0x00000000)
        goto loc_19a42f;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19a42f;
    sub_19a217();
loc_19a42f: // 0160:19a42f
    if (memoryAGet32(ds, 0x1dc030) != 0x00000000)
        goto loc_19a447;
    edx = 0x00000120;
    eax = 0x001e0a08;
    sub_197c71();
loc_19a447: // 0160:19a447
    sub_1992d0();
    sub_19a2ac();
    sub_19b5c8();
    sub_1a972c();
    sub_196b5f();
    if (memoryAGet32(ds, 0x1dd246) == 0x00000000)
        goto loc_19a46e;
    sub_199062();
loc_19a46e: // 0160:19a46e
    sub_1a4288();
    if (memoryAGet32(ds, 0x39bde0) == 0x00000000)
        goto loc_19a4ed;
    edx = 0x002c69a8;
    eax = 0x002ae808;
    ebx = 0x000000f0;
    sub_197d77();
    edx = memoryAGet32(ds, 0x39bdf8);
    eax = 0x002d45a8;
    edx += 0x000a3700;
    sub_1c4d61();
    edx = 0x002c69a8;
    eax = 0x002ae768;
    ebx = 0x000000f0;
    sub_1977cd();
    edx = memoryAGet32(ds, 0x39bdf8);
    eax = 0x002d5368;
    edx += 0x000a3a70;
    sub_1c4d61();
    edx = memoryAGet32(ds, 0x39bdf8);
    eax = 0x002c69a8;
    edx += 0x000a0000;
    sub_1c4a7b();
    sub_19b766();
    goto loc_19a51a;
loc_19a4ed: // 0160:19a4ed
    edx = 0x000a0000;
    eax = 0x002ae808;
    sub_197d77();
    edx = 0x000a0000;
    eax = 0x002ae768;
    sub_1977cd();
    edx = 0x000a0000;
    eax = 0x002c69a8;
    sub_1c4758();
loc_19a51a: // 0160:19a51a
    ebp = 0;
    memoryASet32(ds, 0x1dc0e8, ebp);
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a526() // 0160:19a526 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    ebx = edx;
    if (memoryAGet32(ds, 0x39bde0) == 0x00000000)
        goto loc_19a567;
    edx = 0x000a0000;
    eax = ebx;
    sub_1c4a7b();
    edx = 0x000a4000;
    eax = ebx;
    sub_1c4a7b();
    edx = 0x000a8000;
    eax = ebx;
    sub_1c4a7b();
    edx = 0x000ac000;
    eax = ebx;
    sub_1c4a7b();
    goto loc_19a573;
loc_19a567: // 0160:19a567
    edx = 0x000a0000;
    eax = ebx;
    sub_19cb51();
loc_19a573: // 0160:19a573
    ebx = 0x00000100;
    eax = 0x000000ff;
    memoryASet32(ds, 0x1df658, ebx);
    sub_1a4408();
    if (!ecx)
        goto loc_19a5ae;
    edx = 0;
loc_19a58e: // 0160:19a58e
    edx++;
    sub_1a40f3();
    if ((int32_t)edx < (int32_t)0x00000096)
        goto loc_19a58e;
    ecx = 0x00000100;
    eax = 0;
    memoryASet32(ds, 0x1df658, ecx);
    sub_1a4408();
loc_19a5ae: // 0160:19a5ae
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a640() // 0160:19a640 +long
{
    esp -= 4;
    push32(edx);
    edx = 0x002c69a8;
    eax = 0x001d1308;
    sub_19b431();
    edx = 0x0039b9a8;
    eax = 0x001d131c;
    sub_19b431();
    edx = 0x002c69a8;
    eax = 0x00000001;
    sub_19a526();
    edx = 0x002c69a8;
    eax = 0x001d1330;
    sub_19b431();
    edx = 0x0039b9a8;
    eax = 0x001d1344;
    sub_19b431();
    edx = 0x002c69a8;
    eax = 0x00000001;
    sub_19a526();
    edx = pop32();
    esp += 4;
}
void sub_19a69d() // 0160:19a69d +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_19a6a0: // 0160:19a6a0
    edx++;
    sub_1a40f3();
    if ((int32_t)edx < (int32_t)0x00000019)
        goto loc_19a6a0;
    eax = 0;
loc_19a6ad: // 0160:19a6ad
    eax++;
    dl = 0;
    memoryASet(ds, eax + 3913767, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_19a6ad;
    edx = 0;
    memoryASet32(ds, 0x39f238, edx);
    memoryASet32(ds, 0x3a7470, edx);
    sub_19a640();
    edx = pop32();
    esp += 4;
}
void sub_19a6d2() // 0160:19a6d2 +long
{
    esp -= 4;
    goto loc_19a6d2;
loc_198141: // 0160:198141
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9611 bytes
loc_19a6d2: // 0160:19a6d2
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1dc0bc) == 0x00000000)
        goto loc_19a716;
    eax = memoryAGet32(ds, 0x39bdf4);
    ebx = memoryAGet32(ds, 0x39be00);
    ecx = memoryAGet32(ds, 0x1dc0ac);
    eax -= ebx;
    esi = memoryAGet32(ds, 0x39be04);
    ecx += eax;
    eax = memoryAGet32(ds, 0x39bdf0);
    edi = memoryAGet32(ds, 0x1dc0b0);
    eax -= esi;
    edi += eax;
    memoryASet32(ds, 0x1dc0ac, ecx);
    memoryASet32(ds, 0x1dc0b0, edi);
loc_19a716: // 0160:19a716
    if (memoryAGet32(ds, 0x39f004) == 0x00000000)
        goto loc_198141;
    if (memoryAGet32(ds, 0x39f0bc) != 0x00000000)
        goto loc_198141;
    eax = memoryAGet32(ds, 0x39bdf4);
    eax -= memoryAGet32(ds, 0x39be00);
    ebx = memoryAGet32(ds, 0x39f008);
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x39be04);
    ebx += eax;
    eax = memoryAGet32(ds, 0x39bdf0);
    eax -= ecx;
    esi = memoryAGet32(ds, 0x39f00c);
    eax <<= 2;
    esi += eax;
    memoryASet32(ds, 0x39f008, ebx);
    memoryASet32(ds, 0x39f00c, esi);
    if (stop("postCondition"))
        goto loc_19a776;
    ebp = 0;
    memoryASet32(ds, 0x39f008, ebp);
loc_19a776: // 0160:19a776
    if ((int32_t)memoryAGet32(ds, 0x39f008) <= (int32_t)0x00000ed4)
        goto loc_19a78c;
    memoryASet32(ds, 0x39f008, 0x00000ed4);
loc_19a78c: // 0160:19a78c
    if ((int32_t)memoryAGet32(ds, 0x39f00c) >= (int32_t)0x00000020)
        goto loc_19a79f;
    memoryASet32(ds, 0x39f00c, 0x00000020);
loc_19a79f: // 0160:19a79f
    if ((int32_t)memoryAGet32(ds, 0x39f00c) <= (int32_t)0x00000600)
        goto loc_19a7b5;
    memoryASet32(ds, 0x39f00c, 0x00000600);
loc_19a7b5: // 0160:19a7b5
    if (memoryAGet32(ds, 0x39f098) == 0x00000000)
        goto loc_198141;
    if ((int32_t)memoryAGet32(ds, 0x39f00c) >= (int32_t)0x000000a8)
        goto loc_19a7d8;
    memoryASet32(ds, 0x39f00c, 0x000000a8);
loc_19a7d8: // 0160:19a7d8
    eax = memoryAGet32(ds, 0x39f008);
    eax -= memoryAGet32(ds, 0x39f248);
    if ((int32_t)eax <= (int32_t)0x00000480)
        goto loc_19a7f9;
    eax = memoryAGet32(ds, 0x39f008);
    eax -= 0x00000480;
    memoryASet32(ds, 0x39f248, eax);
loc_19a7f9: // 0160:19a7f9
    eax = memoryAGet32(ds, 0x39f008);
    eax -= memoryAGet32(ds, 0x39f248);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_19a81a;
    eax = memoryAGet32(ds, 0x39f008);
    eax -= 0x00000080;
    memoryASet32(ds, 0x39f248, eax);
loc_19a81a: // 0160:19a81a
    eax = memoryAGet32(ds, 0x39f00c);
    eax -= memoryAGet32(ds, 0x39f24c);
    if ((int32_t)eax <= (int32_t)0x00000220)
        goto loc_19a83b;
    eax = memoryAGet32(ds, 0x39f00c);
    eax -= 0x00000220;
    memoryASet32(ds, 0x39f24c, eax);
loc_19a83b: // 0160:19a83b
    eax = memoryAGet32(ds, 0x39f00c);
    eax -= memoryAGet32(ds, 0x39f24c);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_198141;
    eax = memoryAGet32(ds, 0x39f00c);
    eax -= 0x00000080;
    memoryASet32(ds, 0x39f24c, eax);
    goto loc_198141;
}
void sub_19a865() // 0160:19a865 +long
{
    esp -= 4;
    goto loc_19a865;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16902 bytes
loc_19a865: // 0160:19a865
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = 0x00078000;
    ebp = 0x00032000;
    edx = memoryAGet32(ds, 0x1dc028);
    esi = 0;
    ecx = 0;
    if (edx)
        goto loc_196658;
    if (memoryAGet32(ds, 0x1dc030) != 0x00000000)
        goto loc_196658;
    eax = memoryAGet32(ds, 0x39be00);
    eax -= memoryAGet32(ds, 0x39bdf4);
    eax <<= 3;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000040)
        goto loc_19a8c4;
    eax = memoryAGet32(ds, 0x39be04);
    eax -= memoryAGet32(ds, 0x39bdf0);
    eax <<= 3;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000040)
        goto loc_19a8ce;
loc_19a8c4: // 0160:19a8c4
    memoryASet32(ds, 0x1dfa20, 0x00000064);
loc_19a8ce: // 0160:19a8ce
    edx = memoryAGet32(ds, 0x1dfa20);
    if (!edx)
        goto loc_19a8e1;
    ebx = edx + -1;
    memoryASet32(ds, 0x1dfa20, ebx);
loc_19a8e1: // 0160:19a8e1
    if (memoryAGet32(ds, 0x1df630) == 0x00000000)
        goto loc_196658;
    if (memoryAGet32(ds, 0x1dfa20) != 0x00000000)
        goto loc_196658;
    ebx = 0;
loc_19a8fd: // 0160:19a8fd
    if (memoryAGet32(ds, ebx + 3792018) != 0x00000000)
        goto loc_19a92a;
    eax = memoryAGet32(ds, ebx + 3792022);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_19a92a;
    if (memoryAGet32(ds, ebx + 3792058) != 0x00000000)
        goto loc_19a92a;
    if (memoryAGet32(ds, ebx + 3792006) != 0x0000000a)
        goto loc_19a931;
loc_19a92a: // 0160:19a92a
    eax = 0x00000001;
    goto loc_19a933;
loc_19a931: // 0160:19a931
    eax = 0;
loc_19a933: // 0160:19a933
    edx = memoryAGet32(ds, ebx + 3792026);
    if (!edx)
        goto loc_19a96b;
    if (!eax)
        goto loc_19a96b;
    if ((int32_t)edi <= (int32_t)edx)
        goto loc_19a947;
    edi = edx;
loc_19a947: // 0160:19a947
    edx = memoryAGet32(ds, ebx + 3792026);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_19a953;
    esi = edx;
loc_19a953: // 0160:19a953
    eax = memoryAGet32(ds, ebx + 3792030);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_19a95f;
    ebp = eax;
loc_19a95f: // 0160:19a95f
    edx = memoryAGet32(ds, ebx + 3792030);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_19a96b;
    ecx = edx;
loc_19a96b: // 0160:19a96b
    ebx += 0x000000ac;
    if (ebx != 0x00000ac0)
        goto loc_19a8fd;
    eax = memoryAGet32(ds, 0x39ee8a);
    ebx = 0;
    if (!eax)
        goto loc_19a9db;
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_19a98a;
    edi = eax;
loc_19a98a: // 0160:19a98a
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    edx = memoryAGet32(ds, eax + 3796618);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_19a9a5;
    esi = edx;
loc_19a9a5: // 0160:19a9a5
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    edx = memoryAGet32(ds, eax + 3796622);
    if ((int32_t)ebp <= (int32_t)edx)
        goto loc_19a9c0;
    ebp = edx;
loc_19a9c0: // 0160:19a9c0
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 3796622);
    if ((int32_t)ecx >= (int32_t)ebx)
        goto loc_19a9db;
    ecx = ebx;
loc_19a9db: // 0160:19a9db
    ebx = 0;
loc_19a9dd: // 0160:19a9dd
    if (memoryAGet32(ds, ebx + 3791138) == 0x00000000)
        goto loc_19aa67;
    eax = memoryAGet32(ds, ebx + 3791154);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if (eax & 0xfffffe00)
        goto loc_19aa0e;
    eax = memoryAGet32(ds, ebx + 3791158);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if (!(eax & 0xfffffe00))
        goto loc_19aa15;
loc_19aa0e: // 0160:19aa0e
    eax = 0x00000001;
    goto loc_19aa17;
loc_19aa15: // 0160:19aa15
    eax = 0;
loc_19aa17: // 0160:19aa17
    if (eax)
        goto loc_19aa24;
    if ((int32_t)memoryAGet32(ds, ebx + 3791170) <= (int32_t)0x00000000)
        goto loc_19aa67;
loc_19aa24: // 0160:19aa24
    if (memoryAGet32(ds, ebx + 3791170) != 0x00000000)
        goto loc_19aa37;
    memoryASet32(ds, ebx + 3791170, 0x00000007);
loc_19aa37: // 0160:19aa37
    eax = memoryAGet32(ds, ebx + 3791138);
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_19aa43;
    edi = eax;
loc_19aa43: // 0160:19aa43
    edx = memoryAGet32(ds, ebx + 3791138);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_19aa4f;
    esi = edx;
loc_19aa4f: // 0160:19aa4f
    eax = memoryAGet32(ds, ebx + 3791142);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_19aa5b;
    ebp = eax;
loc_19aa5b: // 0160:19aa5b
    edx = memoryAGet32(ds, ebx + 3791142);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_19aa67;
    ecx = edx;
loc_19aa67: // 0160:19aa67
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_19a9dd;
    ebx = 0;
loc_19aa78: // 0160:19aa78
    eax = memoryAGet32(ds, ebx + 3790906);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if (eax & 0xffffff00)
        goto loc_19aa9c;
    eax = memoryAGet32(ds, ebx + 3790910);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if (!(eax & 0xffffff00))
        goto loc_19aaa3;
loc_19aa9c: // 0160:19aa9c
    eax = 0x00000001;
    goto loc_19aaa5;
loc_19aaa3: // 0160:19aaa3
    eax = 0;
loc_19aaa5: // 0160:19aaa5
    edx = memoryAGet32(ds, ebx + 3790898);
    if (!edx)
        goto loc_19aadd;
    if (!eax)
        goto loc_19aadd;
    if ((int32_t)edi <= (int32_t)edx)
        goto loc_19aab9;
    edi = edx;
loc_19aab9: // 0160:19aab9
    edx = memoryAGet32(ds, ebx + 3790898);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_19aac5;
    esi = edx;
loc_19aac5: // 0160:19aac5
    eax = memoryAGet32(ds, ebx + 3790902);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_19aad1;
    ebp = eax;
loc_19aad1: // 0160:19aad1
    edx = memoryAGet32(ds, ebx + 3790902);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_19aadd;
    ecx = edx;
loc_19aadd: // 0160:19aadd
    ebx += 0x00000018;
    if (ebx != 0x000000f0)
        goto loc_19aa78;
    if ((int32_t)edi > (int32_t)esi)
        goto loc_196658;
    if ((int32_t)ebp > (int32_t)ecx)
        goto loc_196658;
    edx = edi + esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    edx = ecx + ebp;
    memoryASet32(ds, 0x39f248, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001a0;
    memoryASet32(ds, 0x39f24c, eax);
    goto loc_196658;
}
void sub_19abcd() // 0160:19abcd +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    eax = 0;
loc_19abd1: // 0160:19abd1
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_19ac00;
    if (memoryAGet32(ds, eax + 3792126) != 0x00000000)
        goto loc_19ac00;
    edx = memoryAGet32(ds, eax + 3792102);
    edx -= memoryAGet32(ds, eax + 3792106);
    if ((int32_t)(edx & edx) <= 0)
        goto loc_19ac00;
    edx = memoryAGet32(ds, eax + 3792102);
    edx--;
    memoryASet32(ds, eax + 3792106, edx);
loc_19ac00: // 0160:19ac00
    eax += 0x000000ac;
    if (eax != 0x00000ac0)
        goto loc_19abd1;
    sub_1a3924();
    esi = 0;
    sub_197b3b();
    memoryASet32(ds, 0x39f22c, esi);
    memoryASet32(ds, 0x1dc038, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_19ac27() // 0160:19ac27 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
    sub_1c7c1f();
    edx = eax;
    edx &= 0x0000ffff;
    eax <<= 16;
    eax |= edx;
    sub_1a9caa();
    sub_198725();
    edx = pop32();
    esp += 4;
}
void sub_19ac48() // 0160:19ac48 +long
{
    esp -= 4;
    goto loc_19ac48;
loc_196658: // 0160:196658
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17897 bytes
loc_19ac48: // 0160:19ac48
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_196049();
    sub_19ac27();
    sub_19b588(); //gabo skip!
    edx = memoryAGet32(ds, 0x1df5c0);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    eax += 0x00001388;
    sub_1b9c93();
    eax = 0x00000013;
    sub_19b80e(); // gabo skip video set?
    eax = 0;
    edx = 0x00000001;
    sub_1a413d();
    sub_19b66a();
    sub_19b153();
    sub_19b2ba();
    sub_198cff();
    sub_19a69d();  /// splash
    sub_1968c6();
    sub_198cff();
    memoryASet32(ds, 0x1dc030, edx);
    memoryASet32(ds, 0x39bde8, edx);
    memoryASet32(ds, 0x1dc020, edx);
    memoryASet32(ds, 0x3a7470, edx);
    ebp = 0x00000028;
    eax = 0x00000100;
    edi = 0;
    ebx = 0x00000046;
    memoryASet32(ds, 0x39f238, edi);
    memoryASet32(ds, 0x1dc018, ebp);
    memoryASet32(ds, 0x1df658, eax);
    edx = 0;
loc_19acf1: // 0160:19acf1
    sub_1a41bf();
    if (eax)
        goto loc_19af08;
    if (dl == memoryAGet(ds, 0x3a73a4))
        goto loc_19ad12;
    if (dl != memoryAGet(ds, 0x3a7399))
        goto loc_19af08;
loc_19ad12: // 0160:19ad12
    eax = memoryAGet32(ds, 0x39f238);
loc_19ad17: // 0160:19ad17
    sync();
    if (eax == memoryAGet32(ds, 0x3a7470))
        goto loc_19ad17;
    sub_199163();
    if (edx == memoryAGet32(ds, 0x1dc020))
        goto loc_19ad51;
    edi = 0x00000001;
    eax = 0x00000019;
    memoryASet32(ds, 0x1dc030, edi);
    memoryASet32(ds, 0x39bda8, eax);
    eax = memoryAGet32(ds, 0x1dc084);
    memoryASet32(ds, 0x39bde4, edi);
    sub_1994a3();
loc_19ad51: // 0160:19ad51
    eax = memoryAGet32(ds, 0x39f238);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x3a7470))
        goto loc_19ad68;
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x39f238, eax);
loc_19ad68: // 0160:19ad68
    eax = memoryAGet32(ds, 0x39f238);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3a7470))
        goto loc_19ad7a;
    sub_19af26();
loc_19ad7a: // 0160:19ad7a
    eax = memoryAGet32(ds, 0x39f238);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3a7470))
        goto loc_19aee4;
    ecx = memoryAGet32(ds, 0x1dd246);
    if (edx != ecx)
        goto loc_19aeca;
    esi = memoryAGet32(ds, 0x1dc028);
    if (ecx != esi)
        goto loc_19aeca;
    edi = memoryAGet32(ds, 0x39f230);
    if (esi == edi)
        goto loc_19adba;
    ebp = edi + -1;
    memoryASet32(ds, 0x39f230, ebp);
loc_19adba: // 0160:19adba
    if (edx == memoryAGet32(ds, 0x39ef94))
        goto loc_19adf6;
    ecx = memoryAGet32(ds, 0x39f0bc);
    if (edx != ecx)
        goto loc_19adf6;
    esi = memoryAGet32(ds, 0x39f0a8);
    if (ecx != esi)
        goto loc_19adf6;
    edi = memoryAGet32(ds, 0x1dc028);
    if (esi != edi)
        goto loc_19adf6;
    if (ebx == memoryAGet32(ds, 0x1df5ac))
        goto loc_19adf6;
    if (edi != memoryAGet32(ds, 0x39f1ac))
        goto loc_19adf6;
    memoryASet32(ds, 0x39ef94, memoryAGet32(ds, 0x39ef94) - 1);
loc_19adf6: // 0160:19adf6
    if (ebx != memoryAGet32(ds, 0x1df5ac))
        goto loc_19ae14;
    if (edx == memoryAGet32(ds, 0x1dc030))
        goto loc_19ae14;
    if (edx != memoryAGet32(ds, 0x1dc028))
        goto loc_19ae14;
    memoryASet32(ds, 0x39ef94, memoryAGet32(ds, 0x39ef94) - 1);
loc_19ae14: // 0160:19ae14
    ecx = memoryAGet32(ds, 0x39efa0);
    if (edx == ecx)
        goto loc_19ae27;
    esi = ecx + -1;
    memoryASet32(ds, 0x39efa0, esi);
loc_19ae27: // 0160:19ae27
    sub_1a6cdc();
    sub_1ab4d5();
    sub_19ca9b();
    sub_1b7bb4();
    sub_19a865();
    sub_19c91e();
    sub_197664();
    if (edx != memoryAGet32(ds, 0x39efc4))
        goto loc_19ae57;
    sub_1a0265();
loc_19ae57: // 0160:19ae57
    sub_1a39f0();
    sub_1a1150();
    sub_1b09c0();
    sub_1b03ad();
    sub_196a3e();
    sub_1ae4cd();
    sub_1b1884();
    sub_1ac0ac();
    sub_1ad0a9();
    sub_1b1153();
    sub_1b0d5d();
    sub_1b1c2f();
    sub_198efd();
    sub_1b2507();
    sub_1b396c();
    sub_1b2c74();
    if (edx != memoryAGet32(ds, 0x39efc4))
        goto loc_19aeb4;
    sub_198f64();
loc_19aeb4: // 0160:19aeb4
    sub_19dad1();
    eax = memoryAGet32(ds, 0x1dc084);
    sub_1994a3();
    sub_19a6d2();
    goto loc_19aed4;
loc_19aeca: // 0160:19aeca
    sub_198f64();
    sub_197664();
loc_19aed4: // 0160:19aed4
    sub_19af3f();
    memoryASet32(ds, 0x39f238, memoryAGet32(ds, 0x39f238) + 1);
    goto loc_19ad7a;
loc_19aee4: // 0160:19aee4
    sub_19a337();
    if (edx == memoryAGet32(ds, 0x1dc038))
        goto loc_19aefe;
    if (edx != memoryAGet32(ds, 0x1dc028))
        goto loc_19aefe;
    sub_19abcd();
loc_19aefe: // 0160:19aefe
    sub_19878d();
    goto loc_19acf1;
loc_19af08: // 0160:19af08
    eax = 0x00000003;
    sub_19b80e();
    sub_19b31e();
    sub_19b1d2();
    sub_1b9df4();
    goto loc_196658;
}
void sub_19af26() // 0160:19af26 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_19af29: // 0160:19af29
    eax++;
    dl = memoryAGet(ds, eax + 3830635);
    memoryASet(ds, eax + 3830379, dl);
    if ((int32_t)eax < (int32_t)0x00000100)
        goto loc_19af29;
    edx = pop32();
    esp += 4;
}
void sub_19af3f() // 0160:19af3f +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x39be00);
    memoryASet32(ds, 0x39bdf4, eax);
    eax = memoryAGet32(ds, 0x39be04);
    memoryASet32(ds, 0x39bdf0, eax);
    esp += 4;
}
void sub_19af54() // 0160:19af54 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, eax);
    ebx = 0;
    bl = memoryAGet(ds, edx);
    edx++;
    edi = ebx;
    ecx = ebx;
    edi >>= 7;
    ecx >>= 5;
    ebx &= 0x0000001f;
    memoryASet32(ds, eax, edx);
    edi &= 0x00000001;
    ecx &= 0x00000003;
loc_19af75: // 0160:19af75
    ecx--;
    if (ecx == 0xffffffff)
        goto loc_19af8a;
    edx = memoryAGet32(ds, eax);
    ebx <<= 8;
    esi = memoryAGet(ds, edx);
    edx++;
    ebx += esi;
    memoryASet32(ds, eax, edx);
    goto loc_19af75;
loc_19af8a: // 0160:19af8a
    eax = edi;
    ebx++;
    eax <<= 31;
    eax |= ebx;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19af98() // 0160:19af98 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, eax);
    ecx = 0;
    cl = memoryAGet(ds, edx);
    ebx = ecx;
    edx++;
    ebx >>= 6;
    ecx &= 0x0000003f;
    memoryASet32(ds, eax, edx);
    ebx &= 0x00000003;
loc_19afb0: // 0160:19afb0
    ebx--;
    if (ebx == 0xffffffff)
        goto loc_19afc5;
    edx = memoryAGet32(ds, eax);
    ecx <<= 8;
    esi = memoryAGet(ds, edx);
    edx++;
    ecx += esi;
    memoryASet32(ds, eax, edx);
    goto loc_19afb0;
loc_19afc5: // 0160:19afc5
    eax = ecx + 1;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19afcd() // 0160:19afcd +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    ebx = edx;
    edx = 0;
    ecx = eax + ebx;
    goto loc_19afed;
loc_19afda: // 0160:19afda
    ebx = edx;
    ebx >>= 31;
    edx += edx;
    ebx &= 0x00000001;
    ebx |= edx;
    edx = 0;
    dl = memoryAGet(ds, eax);
    eax++;
    edx ^= ebx;
loc_19afed: // 0160:19afed
    if (eax < ecx)
        goto loc_19afda;
    eax = edx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19aff6() // 0160:19aff6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    esi = edx;
    ebp = memoryAGet32(ds, eax + 4);
    memoryASet(ds, eax + 4, 0x00);
    ebx = memoryAGet32(ds, esp);
    edi = memoryAGet32(ds, eax + 8);
    ebx += 0x0000000c;
    esi = edx + edi;
    memoryASet32(ds, esp, ebx);
loc_19b014: // 0160:19b014
    if (edx >= esi)
        goto loc_19b05e;
    eax = esp;
    sub_19af54();
    ebx = eax;
    if (!(eax & 0x80000000))
        goto loc_19b049;
    eax = esp;
    ecx = edx;
    sub_19af98();
    ecx -= eax;
    ebx &= 0x7fffffff;
    eax = ecx;
loc_19b03b: // 0160:19b03b
    ebx--;
    if (ebx == 0xffffffff)
        goto loc_19b014;
    cl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, cl);
    edx++;
    goto loc_19b03b;
loc_19b049: // 0160:19b049
    if (!eax)
        goto loc_19b014;
    ebx = memoryAGet32(ds, esp);
    ecx = ebx + 1; // enty 160:1ca5d7
    memoryASet32(ds, esp, ecx); // 160:19b059 "0160:0019B059"

    bl = memoryAGet(ds, ebx);
    

    eax--;

    memoryASet(ds, edx, bl);
    edx++;
    goto loc_19b049;
loc_19b05e: // 0160:19b05e
    eax = esi;
    edx = edi;
    eax -= edi;
    sub_19afcd();
    if (eax == ebp)
        goto loc_19b086;
    push32(eax);
    push32(ebp);
    push32(0x001d1358);
    sub_1c7f2e();
    esp += 0x0000000c;
    eax = 0x00000001;
    sub_1c7f51();
loc_19b086: // 0160:19b086
    eax = edi;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_19b091() // 0160:19b091 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = 0x00000036;
    eax = 0x00000043;
    sub_1c7f7f();
    edx = ebx;
    eax = 0x00000040;
    edx &= 0x000000ff;
    sub_1c7f7f();
    edx = ebx;
    edx = sar32(edx, 0x08);
    eax = 0x00000040;
    edx &= 0x000000ff;
    sub_1c7f7f();
    flagsFromReg32(pop32());
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b153() // 0160:19b153 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    memoryASet32(ds, 0x3a7484, 0x0000b1c7);
    ebx = 0;
    memoryASet32(ds, 0x3a7478, ebx);
    memoryASet32(ds, 0x3a7488, 0x00004111);
    memoryASet32(ds, 0x3a747c, ebx);
    edi = 0x0019b0d1;
    memoryASet16(ds, 0x3a749c, cs);
    memoryASet32(ds, 0x3a7498, edi);
    memoryASet32(ds, 0x3a7474, ebx);
    memoryASet32(ds, 0x3a7470, ebx);
    eax = 0x00000008;
    sub_1c7fa7();
    cx = memoryAGet16(ds, 0x3a749c);
    ebx = memoryAGet32(ds, 0x3a7498);
    memoryASet32(ds, 0x3a749e, eax);
    eax = 0x00000008;
    memoryASet16(ds, 0x3a74a2, dx);
    sub_1c7fdb();
    eax = 0x000040a2;
    sub_19b091();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b1d2() // 0160:19b1d2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    eax = 0x00000008;
    cx = memoryAGet16(ds, 0x3a74a2);
    ebx = memoryAGet32(ds, 0x3a749e);
    sub_1c7fdb();
    eax = 0;
    sub_19b091();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b1f5() // 0160:19b1f5 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x3a746c);
    memoryASet32(ds, 0x3a7480, eax);
    esp += 4;
}
void sub_19b200() // 0160:19b200 +long
{
    esp -= 4;
    push32(edx);
    al = 0;
    edx = memoryAGet32(ds, 0x3a746c);
    if (edx == memoryAGet32(ds, 0x3a7480))
        goto loc_19b222;
    eax = memoryAGet32(ds, 0x3a746c);
    memoryASet32(ds, 0x3a746c, memoryAGet32(ds, 0x3a746c) + 1);
    al = memoryAGet(ds, eax + 3797596);
loc_19b222: // 0160:19b222
    memoryASet32(ds, 0x3a746c, memoryAGet32(ds, 0x3a746c) & 0x0000000f);
    edx = pop32();
    esp += 4;
}
void sub_19b2ba() // 0160:19b2ba +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x00000100;
    eax = 0x003a736c;
    edx = 0;
    sub_1c8010();
    edx = 0;
    memoryASet32(ds, 0x3a7480, edx);
    memoryASet32(ds, 0x3a746c, edx);
    ecx = 0x0019b22b;
    eax = 0x00000009;
    memoryASet16(ds, 0x3a7490, cs);
    memoryASet32(ds, 0x3a748c, ecx);
    sub_1c7fa7();
    cx = memoryAGet16(ds, 0x3a7490);
    ebx = memoryAGet32(ds, 0x3a748c);
    memoryASet32(ds, 0x3a7492, eax);
    eax = 0x00000009;
    memoryASet16(ds, 0x3a7496, dx);
    sub_1c7fdb();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b31e() // 0160:19b31e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    eax = 0x00000009;
    cx = memoryAGet16(ds, 0x3a7496);
    ebx = memoryAGet32(ds, 0x3a7492);
    sub_1c7fdb();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b33a() // 0160:19b33a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    edx = 0x001d1381;
    sub_1c824a();
    ecx = eax;
    if (eax)
        goto loc_19b367;
    push32(ebx);
    push32(0x001d1384);
    sub_1c7f2e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1c7f51();
loc_19b367: // 0160:19b367
    ebx = 0x00000002;
    eax = ecx;
    edx = 0;
    sub_1c8322();
    eax = ecx;
    sub_1c841e();
    ebx = eax;
    eax = ecx;
    sub_1c844e();
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b38b() // 0160:19b38b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x0000000c;
    ebx = eax;
    sub_19b33a();
    edx = 0x001d1381;
    memoryASet32(ds, esp + 8, eax);
    eax = ebx;
    sub_1c824a();
    esi = eax;
    if (eax)
        goto loc_19b3c7;
    push32(ebx);
    push32(0x001d139b);
    sub_1c7f2e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1c7f51();
loc_19b3c7: // 0160:19b3c7
    eax = esi;
    ebx = 0;
    edx = 0;
    sub_1c8322();
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000004;
    eax = esp;
    sub_1c8590();
    ah = 0;
    edx = 0x001d13b2;
    memoryASet(ds, esp + 4, ah);
    eax = esp;
    sub_1c875a();
    if (eax)
        goto loc_19b41e;
    edx = 0x00000008;
    eax = esi;
    ebx = 0;
    sub_1c8322();
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000004;
    eax = esp + 8;
    sub_1c8590();
loc_19b41e: // 0160:19b41e
    eax = esi;
    sub_1c844e();
    eax = memoryAGet32(ds, esp + 8);
    esp += 0x0000000c;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b431() // 0160:19b431 +long
{
    esp -= 4;
    goto loc_19b431;
loc_19b08b: // 0160:19b08b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 928 bytes
loc_19b431: // 0160:19b431
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    edi = edx;
    sub_19b38b();
    ebp = eax;
    eax = ebx;
    sub_19b33a();
    esi = eax;
    if (ebp != eax)
        goto loc_19b493;
    edx = 0x001d1381;
    eax = ebx;
    sub_1c824a();
    ebp = eax;
    if (eax)
        goto loc_19b478;
    push32(ebx);
    push32(0x001d13b7);
    sub_1c7f2e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1c7f51();
loc_19b478: // 0160:19b478
    ebx = 0x00000001;
    ecx = ebp;
    edx = esi;
    eax = edi;
    sub_1c8590();
    esi = eax;
    eax = ebp;
    sub_1c844e();
    goto loc_19b505;
loc_19b493: // 0160:19b493
    edx = 0x001d1381;
    eax = ebx;
    sub_1c824a();
    ebp = eax;
    if (eax)
        goto loc_19b4bd;
    push32(ebx);
    push32(0x001d13b7);
    sub_1c7f2e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1c7f51();
loc_19b4bd: // 0160:19b4bd
    if (esi <= 0x00008000)
        goto loc_19b4dd;
    push32(ebx);
    push32(0x001d13ce);
    sub_1c7f2e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1c7f51();
loc_19b4dd: // 0160:19b4dd
    ebx = 0x00000001;
    eax = 0x0039f26c;
    ecx = ebp;
    edx = esi;
    sub_1c8590();
    esi = eax;
    eax = ebp;
    edx = edi;
    sub_1c844e();
    eax = 0x0039f26c;
    sub_19aff6();
loc_19b505: // 0160:19b505
    eax = esi;
    goto loc_19b08b;
}
void sub_19b55e() // 0160:19b55e +long
{
    esp -= 4;
    push32(ebx);
    esp -= 0x0000001c;
    ebx = 0x00000004;
    memoryASet16(ds, esp + 8, ax);
    memoryASet16(ds, esp + 12, dx);
    edx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, bx);
    ebx = esp;
    sub_1c897a();
    esp += 0x0000001c;
    ebx = pop32();
    esp += 4;
}
void sub_19b588() // 0160:19b588 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    ebx = esp;
    edx = 0;
    eax = 0x00000033;
    memoryASet16(ds, esp, dx);
    edx = esp;
    sub_1c897a();
    edx = 0;
    dx = memoryAGet16(ds, esp);
    if (edx)
        goto loc_19b5c2;
    push32(0x001d1404);
    sub_1c7f2e();
    esp += 0x00000004;
    eax = 0x00000002;
    sub_1c7f51();
loc_19b5c2: // 0160:19b5c2
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b5c8() // 0160:19b5c8 +long
{
    esp -= 4;
    goto loc_19b5c8;
loc_19b5c2: // 0160:19b5c2
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19b5c8: // 0160:19b5c8
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000003;
    ebx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, dx);
    edx = esp;
    sub_1c897a();
    eax = memoryAGet32(ds, 0x39bdf4);
    memoryASet32(ds, 0x39be00, eax);
    eax = memoryAGet32(ds, 0x39bdf0);
    memoryASet32(ds, 0x39be04, eax);
    eax = memoryAGet32(ds, 0x39bde8);
    memoryASet32(ds, 0x39bdec, eax);
    eax = memoryAGet32(ds, 0x39bde4);
    memoryASet32(ds, 0x39bdfc, eax);
    eax = 0;
    ax = memoryAGet16(ds, esp + 8);
    memoryASet32(ds, 0x39bdf4, eax);
    eax = 0;
    ax = memoryAGet16(ds, esp + 12);
    memoryASet32(ds, 0x39bdf0, eax);
    eax = memoryAGet32(ds, esp + 4);
    ah = 0;
    al &= 0x01;
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x39bde8, eax);
    eax = memoryAGet32(ds, esp + 4);
    ah = 0;
    al &= 0x02;
    eax &= 0x0000ffff;
    edx = 0x00000200;
    memoryASet32(ds, 0x39bde4, eax);
    eax = edx;
    sub_19b55e();
    edx = 0x00000200;
    memoryASet32(ds, 0x39be00, edx);
    memoryASet32(ds, 0x39be04, edx);
    goto loc_19b5c2;
}
void sub_19b66a() // 0160:19b66a +long
{
    esp -= 4;
loc_19b66a: // 0160:19b66a
    eax = 0x000003da;
    sub_1c8995();
    if (!(al & 0x08))
        goto loc_19b66a;
    esp += 4;
}
void sub_19b679() // 0160:19b679 +long
{
    esp -= 4;
    push32(edx);
    edx = 0x00000005;
    eax = 0x000003ce;
    sub_1c7f7f();
    eax = 0x000003cf;
    sub_1c8995();
    edx = eax;
    eax = 0x000003cf;
    edx &= 0x000000ef;
    sub_1c7f7f();
    edx = 0x00000006;
    eax = 0x000003ce;
    sub_1c7f7f();
    eax = 0x000003cf;
    sub_1c8995();
    edx = eax;
    eax = 0x000003cf;
    edx &= 0x000000fd;
    sub_1c7f7f();
    edx = 0x00000004;
    eax = 0x000003c4;
    sub_1c7f7f();
    eax = 0x000003c5;
    sub_1c8995();
    eax &= 0x000000f7;
    al |= 0x04;
    edx = eax;
    eax = 0x000003c5;
    sub_1c7f7f();
    edx = 0x00000014;
    eax = 0x000003d4;
    sub_1c7f7f();
    eax = 0x000003d5;
    sub_1c8995();
    edx = eax;
    eax = 0x000003d5;
    edx &= 0x000000bf;
    sub_1c7f7f();
    edx = 0x00000017;
    eax = 0x000003d4;
    sub_1c7f7f();
    eax = 0x000003d5;
    sub_1c8995();
    al |= 0x40;
    edx = eax;
    eax = 0x000003d5;
    sub_1c7f7f();
    eax = 0;
loc_19b750: // 0160:19b750
    eax += 0x00000004;
    memoryASet32(ds, eax + 655356, 0x00000000);
    if ((int32_t)eax < (int32_t)0x0000fa00)
        goto loc_19b750;
    edx = pop32();
    esp += 4;
}
void sub_19b766() // 0160:19b766 +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x39bdf8);
    eax = 0x000003d4;
    edx += 0x0000000c;
    sub_1c899d();
    edx = memoryAGet32(ds, 0x39bdf8);
    edx += 0x00004000;
    edx &= 0x0000ffff;
    memoryASet32(ds, 0x39bdf8, edx);
    edx = pop32();
    esp += 4;
}
void sub_19b794() // 0160:19b794 +long
{
    esp -= 4;
    goto loc_19b794;
loc_19af92: // 0160:19af92
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2044 bytes
loc_19b794: // 0160:19b794
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x0000001c;
    edx = 0x0000001c;
    ebx = 0x00000004;
    eax = 0x00000033;
    ecx = 0x00000007;
    edi = 0x00000400;
    memoryASet16(ds, esp, dx);
    memoryASet16(ds, esp + 4, bx);
    ebx = esp;
    edx = esp;
    esi = 0;
    sub_1c897a();
    ebx = esp;
    edx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, cx);
    memoryASet16(ds, esp + 8, si);
    memoryASet16(ds, esp + 12, di);
    sub_1c897a();
    eax = 0x00000008;
    ebx = esp;
    edx = esp;
    memoryASet16(ds, esp + 8, si);
    memoryASet16(ds, esp, ax);
    eax = 0x00000033;
    memoryASet16(ds, esp + 12, di);
    sub_1c897a();
    esp += 0x0000001c;
    goto loc_19af92;
}
void sub_19b80e() // 0160:19b80e +long
{
    esp -= 4;
    goto loc_19b80e;
loc_19b5c2: // 0160:19b5c2
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 582 bytes
loc_19b80e: // 0160:19b80e
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    ebx = esp;
    ah = 0;
    edx = esp;
    memoryASet(ds, esp + 1, ah);
    memoryASet(ds, esp, al);
    eax = 0x00000010;
    sub_1c897a();
    goto loc_19b5c2;
}
void sub_19b8ca() // 0160:19b8ca +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000060;
    push32(eax);
    ebx = edx;
    edx = 0x000003c0;
    ecx = 0x00000144;
    edi = 0x00000140;
    ebp = 0x00000084;
    memoryASet32(ds, esp + 52, edx);
    memoryASet32(ds, esp + 12, ecx);
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp + 56, edi);
    memoryASet32(ds, esp + 88, ebp);
    ecx = 0x00000003;
    eax = memoryAGet32(ds, 0x3a7470);
    edx = memoryAGet32(ds, 0x3a7470);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax &= 0x00000007;
    edx = ebx;
    memoryASet32(ds, esp + 76, eax);
    eax = edx;
    eax <<= 4;
    edi = 0x003155a8;
    eax -= edx;
    ecx = 0x00000006;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    edi += eax;
    eax = ebx;
    idiv32(ecx);
    edx = eax;
    eax <<= 2;
    ebp = 0x002c69a8;
    eax += edx;
    esi = 0x00000178;
    eax <<= 4;
    esi -= ebx;
    eax += edx;
    edx = 0x003731a8;
    eax <<= 2;
    esi -= 0x00000018;
    edx += eax;
    ecx = 0x00389ba0;
    memoryASet32(ds, esp + 16, edx);
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_19b973;
    esi = 0x000000a8;
loc_19b973: // 0160:19b973
    eax = memoryAGet32(ds, esp);
    edx = eax;
    ebx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(eax);
    eax = memoryAGet32(ds, esp + 4);
    eax = sar32(eax, 0x00000001);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    push32(eax);
    push32(esi);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 24);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    edx = memoryAGet32(ds, esp + 80);
    push32(edx);
    push32(ebp);
    push32(ecx);
    ebx = memoryAGet32(ds, esp + 56);
    push32(ebx);
    push32(edi);
    sub_1bdba0();
    esp += 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    stop("imul eax * esi");
    edi += eax;
    eax = memoryAGet32(ds, esp + 12);
    stop("imul eax * esi");
    ecx = memoryAGet32(ds, esp + 16);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 56);
    stop("imul eax * esi");
    ebp += eax;
    eax = 0x000000a8;
    eax -= esi;
    edx = memoryAGet32(ds, esp);
    esi = eax;
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 76);
    memoryASet32(ds, esp + 96, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    edx = 0x002af668;
    edx += eax;
    eax = memoryAGet32(ds, esp + 76);
    eax += 0x00000002;
    memoryASet32(ds, esp + 16, ecx);
    eax &= 0x00000007;
    memoryASet32(ds, esp + 68, edx);
    memoryASet32(ds, esp + 76, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19ba40;
    eax = 0x00000008;
    goto loc_19ba42;
loc_19ba40: // 0160:19ba40
    eax = esi;
loc_19ba42: // 0160:19ba42
    edx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x00000001);
    push32(edx);
    edx = memoryAGet32(ds, esp + 100);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 8);
    push32(ebx);
    push32(eax);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 32);
    push32(eax);
    edx = memoryAGet32(ds, esp + 112);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 80);
    push32(ebx);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 52);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(edi);
    sub_1bdba0();
    esp += 0x00000030;
    edx = memoryAGet32(ds, esp + 52);
    eax = memoryAGet32(ds, esp + 56);
    edx <<= 3;
    eax <<= 3;
    memoryASet32(ds, esp + 32, edx);
    memoryASet32(ds, esp + 20, eax);
    edi += edx;
    ebp += eax;
    eax = memoryAGet32(ds, esp + 88);
    edx = 0x00004a40;
    eax <<= 3;
    memoryASet32(ds, esp + 84, edx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 28, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx * 0x00000000;
    eax <<= 3;
    memoryASet32(ds, esp + 24, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 4;
    ebx += eax;
    esi -= 0x00000008;
    memoryASet32(ds, esp + 64, ebx);
    goto loc_19bb79;
loc_19bada: // 0160:19bada
    memoryASet32(ds, esp + 48, eax);
    eax = memoryAGet32(ds, esp + 96);
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 96, eax);
    eax = memoryAGet32(ds, esp + 84);
    eax += ebx;
    memoryASet32(ds, esp + 76, ecx);
    memoryASet32(ds, esp + 68, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19bb18;
    edx = 0x00000008;
    goto loc_19bb1a;
loc_19bb18: // 0160:19bb18
    edx = esi;
loc_19bb1a: // 0160:19bb1a
    ecx = memoryAGet32(ds, esp + 92);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 100);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 8);
    push32(ebx);
    push32(edx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 80);
    push32(ebx);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 84);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(edi);
    sub_1bdba0();
    esp += 0x00000030;
    esi -= 0x00000008;
    edx = memoryAGet32(ds, esp + 32);
    ebx = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esp + 84);
    eax = memoryAGet32(ds, esp + 24);
    ecx += 0x00004a40;
    edi += edx;
    edx = memoryAGet32(ds, esp + 64);
    ebp += ebx;
    edx += eax;
    memoryASet32(ds, esp + 84, ecx);
    memoryASet32(ds, esp + 64, edx);
loc_19bb79: // 0160:19bb79
    ebx = memoryAGet32(ds, esp + 76) * 0x00000948;
    ecx = memoryAGet32(ds, esp + 76);
    edx = memoryAGet32(ds, esp + 28);
    ecx += 0x00000002;
    eax = memoryAGet32(ds, esp + 68);
    ecx &= 0x00000007;
    eax += edx;
    edx = memoryAGet32(ds, esp + 84);
    ebx += 0x002af668;
    if (edx != 0x0000dec0)
        goto loc_19bada;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 96);
    edx <<= 8;
    memoryASet32(ds, esp + 92, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebx += 0x0000dec0;
    memoryASet32(ds, esp + 72, ecx);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 80, ebx);
    memoryASet32(ds, esp + 96, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19bbeb;
    eax = 0x00000008;
    goto loc_19bbed;
loc_19bbeb: // 0160:19bbeb
    eax = esi;
loc_19bbed: // 0160:19bbed
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 4);
    push32(ecx);
    edx = memoryAGet32(ds, esp + 104);
    push32(edx);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 72);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 108);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 76);
    push32(eax);
    push32(ecx);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 44);
    push32(ebx);
    push32(edi);
    ecx = memoryAGet32(ds, esp + 124);
    push32(ecx);
    sub_1bdba0();
    esp += 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    eax <<= 3;
    edi += eax;
    eax = memoryAGet32(ds, esp + 56);
    eax <<= 3;
    ebp += eax;
    eax = memoryAGet32(ds, esp + 88);
    edx = memoryAGet32(ds, esp + 80);
    eax <<= 3;
    edx += eax;
    eax = memoryAGet32(ds, esp + 96);
    memoryASet32(ds, esp + 8, edx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 92, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 96, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    eax += 0x002af668;
    eax += 0x0000dec0;
    memoryASet32(ds, esp + 80, eax);
    eax = memoryAGet32(ds, esp + 72);
    eax += 0x00000002;
    eax &= 0x00000007;
    esi -= 0x00000008;
    memoryASet32(ds, esp + 72, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19bcb2;
    eax = 0x00000008;
    goto loc_19bcb4;
loc_19bcb2: // 0160:19bcb2
    eax = esi;
loc_19bcb4: // 0160:19bcb4
    edx = memoryAGet32(ds, esp);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 96);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 104);
    push32(ecx);
    push32(eax);
    eax = memoryAGet32(ds, esp + 72);
    push32(eax);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 112);
    push32(ebx);
    push32(ebx);
    push32(ebp);
    push32(edi);
    eax = memoryAGet32(ds, esp + 48);
    push32(eax);
    edx = memoryAGet32(ds, esp + 124);
    push32(edx);
    esi -= 0x00000008;
    sub_1bdba0();
    esp += 0x00000030;
    ebx = 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    edx = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, esp + 60, ebx);
    eax <<= 3;
    edx <<= 3;
    memoryASet32(ds, esp + 44, eax);
    edi += eax;
    eax = memoryAGet32(ds, esp + 88);
    memoryASet32(ds, esp + 40, edx);
    eax <<= 3;
    ebp += edx;
    memoryASet32(ds, esp + 36, eax);
loc_19bd18: // 0160:19bd18
    if ((int32_t)(esi & esi) <= 0)
        goto loc_19bdd0;
    ebx = memoryAGet32(ds, esp + 80);
    ecx = memoryAGet32(ds, esp + 36);
    eax = memoryAGet32(ds, esp + 96);
    ebx += ecx;
    ecx = memoryAGet32(ds, esp + 92);
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 60);
    edx = eax + 24;
    memoryASet32(ds, esp + 60, edx);
    eax += 0x00000100;
    edx = memoryAGet32(ds, esp);
    stop("imul edx * eax");
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 96, eax);
    eax = edx * 0x00000948;
    eax += 0x002af668;
    eax += 0x00012900;
    memoryASet32(ds, esp + 80, eax);
    eax = edx + 2;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 72, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19bd8e;
    edx = 0x00000008;
    goto loc_19bd90;
loc_19bd8e: // 0160:19bd8e
    edx = esi;
loc_19bd90: // 0160:19bd90
    push32(ecx);
    ecx = memoryAGet32(ds, esp + 96);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 104);
    push32(eax);
    push32(edx);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 112);
    push32(eax);
    push32(eax);
    push32(ebp);
    push32(edi);
    push32(ebx);
    ebx = memoryAGet32(ds, esp + 124);
    push32(ebx);
    sub_1bdba0();
    esp += 0x00000030;
    esi -= 0x00000008;
    ecx = memoryAGet32(ds, esp + 44);
    eax = memoryAGet32(ds, esp + 40);
    edi += ecx;
    ebp += eax;
    goto loc_19bd18;
loc_19bdd0: // 0160:19bdd0
    esp += 0x00000064;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_19bdd9() // 0160:19bdd9 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000090;
    push32(eax);
    ecx = edx;
    memoryASet32(ds, esp + 80, ebx);
    edx = 0x000003c0;
    ebx = 0x00000144;
    ebp = 0x00000084;
    memoryASet32(ds, esp + 96, edx);
    memoryASet32(ds, esp + 44, ebx);
    edx = ecx;
    memoryASet32(ds, esp + 12, ebx);
    eax = edx;
    memoryASet32(ds, esp + 124, ebp);
    eax <<= 4;
    ebp = 0x003155a8;
    eax -= edx;
    ebx = 0x00000006;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    ebp += eax;
    eax = ecx;
    idiv32(ebx);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 4;
    eax += edx;
    edx = 0x003731a8;
    eax <<= 2;
    edx += eax;
    memoryASet32(ds, esp + 16, 0x00389ba0);
    eax = 0x00000178;
    eax -= ecx;
    eax -= 0x00000018;
    memoryASet32(ds, esp + 48, eax);
    eax <<= 16;
    memoryASet32(ds, esp + 64, edx);
    edx = eax;
    ebx = memoryAGet32(ds, esp + 80);
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, esp + 128, 0x00000140);
    edi = 0x002c69a8;
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_19be84;
    esi = 0x000000a8;
loc_19be84: // 0160:19be84
    eax = memoryAGet32(ds, 0x39f23c);
    stop("imul eax * esi");
    ebx = 0x00000009;
    edx = ecx;
    eax = sar32(eax, 0x10);
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 144, eax);
    eax = ecx;
    idiv32(ebx);
    ecx = memoryAGet32(ds, esp + 144);
    ebx = eax;
    ecx += eax;
    memoryASet32(ds, esp + 144, 0x00000003);
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 144));
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, eax);
    if ((int32_t)ecx >= (int32_t)0x000000c8)
        goto loc_19bf55;
    edx = memoryAGet32(ds, esp + 20);
    push32(edx);
    push32(eax);
    ecx = memoryAGet32(ds, esp + 8);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 92);
    push32(eax);
    push32(esi);
    edx = memoryAGet32(ds, esp + 148);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 36);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 128);
    push32(eax);
    push32(edi);
    edx = memoryAGet32(ds, esp + 56);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 108);
    push32(ebx);
    push32(ebp);
    sub_1c05c4();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 48);
    stop("imul eax * memoryAGet32(ds, esp + 96)");
    edx = memoryAGet32(ds, esp + 44);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 48);
    stop("imul eax * edx");
    ebx = memoryAGet32(ds, esp + 64);
    ebx += eax;
    eax = memoryAGet32(ds, esp + 128);
    stop("imul eax * esi");
    edi += eax;
    eax = 0x000000a8;
    eax -= esi;
    memoryASet32(ds, esp + 64, ebx);
    goto loc_19c078;
loc_19bf55: // 0160:19bf55
    eax = 0x000000c8;
    eax -= ebx;
    memoryASet32(ds, esp + 4, eax);
    eax <<= 16;
    edx = eax;
    ebx = memoryAGet32(ds, 0x39f23c);
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = memoryAGet32(ds, esp + 20);
    push32(ecx);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 28);
    push32(eax);
    edx = memoryAGet32(ds, esp + 8);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 24);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    edx = memoryAGet32(ds, esp + 36);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 72);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 128);
    push32(ecx);
    push32(edi);
    eax = memoryAGet32(ds, esp + 56);
    push32(eax);
    edx = memoryAGet32(ds, esp + 108);
    push32(edx);
    push32(ebp);
    sub_1c05c4();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 4);
    stop("imul eax * memoryAGet32(ds, esp + 96)");
    ecx = memoryAGet32(ds, esp + 44);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 4);
    stop("imul eax * ecx");
    edx = memoryAGet32(ds, esp + 64);
    ebx = memoryAGet32(ds, esp + 128);
    edx += eax;
    eax = memoryAGet32(ds, esp + 8);
    stop("imul eax * ebx");
    ecx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, esp + 64, edx);
    esi -= ecx;
    edx = memoryAGet32(ds, esp + 48);
    ecx = memoryAGet32(ds, esp + 20);
    edi += eax;
    eax = memoryAGet32(ds, esp + 4);
    push32(ecx);
    edx -= eax;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, esp + 52, edx);
    push32(eax);
    edx = memoryAGet32(ds, esp + 8);
    ebx = 0;
    push32(edx);
    memoryASet32(ds, esp + 56, ebx);
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    push32(esi);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    push32(0x00000000);
    edx = memoryAGet32(ds, esp + 128);
    push32(edx);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 56);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 108);
    push32(ecx);
    push32(ebp);
    sub_1c05c4();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 48);
    stop("imul eax * memoryAGet32(ds, esp + 96)");
    ebx = memoryAGet32(ds, esp + 48);
    ebp += eax;
    eax = ebx * 0x00000000;
    ecx = memoryAGet32(ds, esp + 64);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 128);
    stop("imul eax * esi");
    edi += eax;
    esi += memoryAGet32(ds, esp + 8);
    eax = 0x000000a8;
    eax -= esi;
    memoryASet32(ds, esp + 64, ecx);
loc_19c078: // 0160:19c078
    esi = eax;
    eax = 0x00080000;
    edx = eax;
    ecx = memoryAGet32(ds, esp + 80);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 140, eax);
    eax = memoryAGet32(ds, 0x3a7470);
    eax = sar32(eax, 0x02);
    eax &= 0x00000007;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 104, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 104);
    memoryASet32(ds, esp + 136, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    edx = 0x002af668;
    edx += eax;
    eax = memoryAGet32(ds, esp + 104);
    eax += 0x00000002;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 104, eax);
    eax = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 92, edx);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_19c108;
    memoryASet32(ds, esp + 40, eax);
    goto loc_19c10c;
loc_19c108: // 0160:19c108
    memoryASet32(ds, esp + 40, esi);
loc_19c10c: // 0160:19c10c
    eax = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x00000001);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 140);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 8);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 92);
    edx = memoryAGet32(ds, esp + 152);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 56);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 68);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 152);
    push32(eax);
    edx = memoryAGet32(ds, esp + 128);
    push32(edx);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 104);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 136);
    push32(ecx);
    push32(ebp);
    sub_1c05c4();
    esp += 0x00000034;
    edx = memoryAGet32(ds, esp + 40);
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, esp + 128);
    //stop("imul edx * memoryAGet32(ds, esp + 128)");
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    memoryASet32(ds, esp + 56, eax);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 124);
    eax <<= 3;
    edi += edx;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 72, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    memoryASet32(ds, esp + 68, eax);
    eax = edx;
    edx = edx * 0x00000000;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 4;
    ecx = 0x00004a40;
    goto loc_19c28c;
loc_19c1bb: // 0160:19c1bb
    memoryASet32(ds, esp + 76, eax);
    eax = memoryAGet32(ds, esp + 136);
    memoryASet32(ds, esp + 132, eax);
    eax = memoryAGet32(ds, esp + 84);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 136, eax);
    eax = memoryAGet32(ds, esp + 120);
    eax += ebx;
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 104, ecx);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_19c207;
    memoryASet32(ds, esp + 112, eax);
    goto loc_19c20b;
loc_19c207: // 0160:19c207
    memoryASet32(ds, esp + 112, esi);
loc_19c20b: // 0160:19c20b
    ebx = memoryAGet32(ds, esp + 132);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 140);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 128);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 128);
    push32(ebx);
    push32(edi);
    ecx = memoryAGet32(ds, esp + 116);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 136);
    push32(eax);
    push32(ebp);
    sub_1c05c4();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 112);
    stop("imul eax * memoryAGet32(ds, esp + 128)");
    edx = memoryAGet32(ds, esp + 56);
    ecx = memoryAGet32(ds, esp + 120);
    ebp += edx;
    edx = memoryAGet32(ds, esp + 84);
    edi += eax;
    eax = memoryAGet32(ds, esp + 68);
    ecx += 0x00004a40;
loc_19c28c: // 0160:19c28c
    edx += eax;
    memoryASet32(ds, esp + 120, ecx);
    memoryASet32(ds, esp + 84, edx);
    ebx = memoryAGet32(ds, esp + 104) * 0x00000948;
    ecx = memoryAGet32(ds, esp + 104);
    eax = memoryAGet32(ds, esp + 92);
    ecx += 0x00000002;
    edx = memoryAGet32(ds, esp + 72);
    ecx &= 0x00000007;
    eax += edx;
    edx = memoryAGet32(ds, esp + 120);
    ebx += 0x002af668;
    if (edx != 0x0000dec0)
        goto loc_19c1bb;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 136);
    edx <<= 8;
    memoryASet32(ds, esp + 132, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebx += 0x0000dec0;
    memoryASet32(ds, esp + 100, ecx);
    memoryASet32(ds, esp + 108, ebx);
    eax &= 0x0000007f;
    ebx = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 136, eax);
    if ((int32_t)esi < (int32_t)ebx)
        goto loc_19c316;
    memoryASet32(ds, esp + 36, ebx);
    goto loc_19c31a;
loc_19c316: // 0160:19c316
    memoryASet32(ds, esp + 36, esi);
loc_19c31a: // 0160:19c31a
    eax = memoryAGet32(ds, esp + 132);
    push32(eax);
    edx = memoryAGet32(ds, esp + 4);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 144);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    esi -= ecx;
    ecx = memoryAGet32(ds, esp + 92);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 52);
    push32(eax);
    edx = memoryAGet32(ds, esp + 148);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 124);
    push32(ecx);
    push32(ebx);
    push32(edi);
    edx = memoryAGet32(ds, esp + 68);
    push32(edx);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 156);
    push32(ebx);
    sub_1c05c4();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    ecx = memoryAGet32(ds, esp + 128);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 36);
    stop("imul eax * ecx");
    edi += eax;
    eax = memoryAGet32(ds, esp + 124);
    edx = memoryAGet32(ds, esp + 108);
    eax <<= 3;
    edx += eax;
    memoryASet32(ds, esp + 28, edx);
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 136);
    edx <<= 8;
    memoryASet32(ds, esp + 132, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 100);
    memoryASet32(ds, esp + 136, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    eax += 0x002af668;
    eax += 0x0000dec0;
    memoryASet32(ds, esp + 108, eax);
    eax = memoryAGet32(ds, esp + 100);
    eax += 0x00000002;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 100, eax);
    eax = memoryAGet32(ds, esp + 140);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_19c406;
    memoryASet32(ds, esp + 32, eax);
    goto loc_19c40a;
loc_19c406: // 0160:19c406
    memoryASet32(ds, esp + 32, esi);
loc_19c40a: // 0160:19c40a
    ebx = memoryAGet32(ds, esp);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 136);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 144);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 48);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 120);
    push32(eax);
    edx = memoryAGet32(ds, esp + 152);
    push32(edx);
    push32(edx);
    push32(edi);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 156);
    push32(eax);
    sub_1c05c4();
    esp += 0x00000034;
    edx = memoryAGet32(ds, esp + 32);
    stop("imul edx * memoryAGet32(ds, esp + 128)");
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    memoryASet32(ds, esp + 60, eax);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 124);
    ecx = 0x00000030;
    eax <<= 3;
    memoryASet32(ds, esp + 88, ecx);
    memoryASet32(ds, esp + 52, eax);
    edi += edx;
loc_19c48d: // 0160:19c48d
    if ((int32_t)(esi & esi) <= 0)
        goto loc_19c57f;
    ecx = memoryAGet32(ds, esp + 108);
    ebx = memoryAGet32(ds, esp + 52);
    eax = memoryAGet32(ds, esp + 136);
    ecx += ebx;
    ebx = memoryAGet32(ds, esp + 132);
    memoryASet32(ds, esp + 132, eax);
    eax = memoryAGet32(ds, esp + 88);
    edx = eax + 24;
    memoryASet32(ds, esp + 88, edx);
    eax += 0x00000100;
    edx = memoryAGet32(ds, esp);
    stop("imul edx * eax");
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 100);
    memoryASet32(ds, esp + 136, eax);
    eax = edx * 0x00000948;
    eax += 0x002af668;
    eax += 0x00012900;
    memoryASet32(ds, esp + 108, eax);
    eax = edx + 2;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 100, eax);
    eax = memoryAGet32(ds, esp + 140);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_19c514;
    memoryASet32(ds, esp + 116, eax);
    goto loc_19c518;
loc_19c514: // 0160:19c514
    memoryASet32(ds, esp + 116, esi);
loc_19c518: // 0160:19c518
    push32(ebx);
    ebx = memoryAGet32(ds, esp + 136);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 144);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 132);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    edx = memoryAGet32(ds, esp + 120);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 152);
    push32(ebx);
    push32(ebx);
    push32(edi);
    push32(ebp);
    push32(ecx);
    edx = memoryAGet32(ds, esp + 156);
    push32(edx);
    sub_1c05c4();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 116);
    stop("imul eax * memoryAGet32(ds, esp + 128)");
    ebp += memoryAGet32(ds, esp + 60);
    edi += eax;
    goto loc_19c48d;
loc_19c57f: // 0160:19c57f
    esp += 0x00000094;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_19c58a() // 0160:19c58a +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = memoryAGet32(ds, esp + 24);
    esi = memoryAGet32(ds, esp + 28);
    ebp = eax;
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, 0x39f240);
    eax = memoryAGet32(ds, 0x39f244);
    ebx -= edx;
    edx = memoryAGet32(ds, 0x39f23c);
    ecx -= eax;
    if (edx != 0x00010000)
        goto loc_19c691;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_19c5fd;
    eax = ebx + edi;
    if ((int32_t)eax >= (int32_t)0x00000140)
        goto loc_19c5fd;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_19c5fd;
    eax = ecx + esi;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_19c5fd;
    edx = memoryAGet32(ds, esp + 4);
    edx += ebx;
    ebx = ecx;
    ebx <<= 2;
    ebx += ecx;
    eax = ebp;
    ebx <<= 6;
    ecx = esi;
    edx += ebx;
    ebx = edi;
loc_19c5f3: // 0160:19c5f3
    sub_1c4e46();
    goto loc_19c7c1;
loc_19c5fd: // 0160:19c5fd
    eax = ebx + edi;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_19c7c1;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_19c7c1;
    edx = ecx + esi;
    if ((int32_t)(edx & edx) <= 0)
        goto loc_19c7c1;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_19c7c1;
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_19c639;
    eax -= 0x00000140;
    edi -= eax;
loc_19c639: // 0160:19c639
    eax = ecx + esi;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_19c64a;
    eax -= 0x000000a8;
    esi -= eax;
loc_19c64a: // 0160:19c64a
    if (stop("postCondition"))
        goto loc_19c658;
    eax = ebx;
    edi += ebx;
    eax = -eax;
    ebx = 0;
    ebp += eax;
loc_19c658: // 0160:19c658
    if (stop("postCondition"))
        goto loc_19c674;
    eax = ecx;
    eax = -eax;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    eax += edx;
    esi += ecx;
    eax <<= 6;
    ecx = 0;
    ebp += eax;
loc_19c674: // 0160:19c674
    eax = ecx;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    edx += ebx;
    eax += ecx;
    ebx = edi;
    eax <<= 6;
    ecx = esi;
    edx += eax;
    eax = ebp;
    goto loc_19c5f3;
loc_19c691: // 0160:19c691
    edx = ebx;
    edx <<= 16;
    ebx = memoryAGet32(ds, 0x39f23c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = ecx;
    ebx = eax;
    edx <<= 16;
    ecx = memoryAGet32(ds, 0x39f23c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = edi;
    ecx = eax;
    edx <<= 16;
    edi = memoryAGet32(ds, 0x39f23c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edx = esi;
    edi = eax;
    edx <<= 16;
    esi = memoryAGet32(ds, 0x39f23c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = eax;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_19c714;
    eax = ebx + edi;
    if ((int32_t)eax >= (int32_t)0x00000140)
        goto loc_19c714;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_19c714;
    eax = ecx + esi;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_19c714;
    eax = memoryAGet32(ds, esp + 4);
    eax += ebx;
    ebx = ecx;
    edx = memoryAGet32(ds, 0x39f23c);
    ebx <<= 2;
    push32(edx);
    goto loc_19c7ae;
loc_19c714: // 0160:19c714
    eax = ebx + edi;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_19c7c1;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_19c7c1;
    edx = ecx + esi;
    if ((int32_t)(edx & edx) <= 0)
        goto loc_19c7c1;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_19c7c1;
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_19c750;
    eax -= 0x00000140;
    edi -= eax;
loc_19c750: // 0160:19c750
    eax = ecx + esi;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_19c761;
    eax -= 0x000000a8;
    esi -= eax;
loc_19c761: // 0160:19c761
    if (stop("postCondition"))
        goto loc_19c778;
    eax = memoryAGet32(ds, 0x39f23c);
    stop("imul eax * ebx");
    eax = sar32(eax, 0x10);
    edi += ebx;
    eax = -eax;
    ebx = 0;
    ebp += eax;
loc_19c778: // 0160:19c778
    if (stop("postCondition"))
        goto loc_19c79d;
    eax = memoryAGet32(ds, 0x39f23c);
    stop("imul eax * ecx");
    eax = sar32(eax, 0x10);
    eax = -eax;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    eax += edx;
    esi += ecx;
    eax <<= 6;
    ecx = 0;
    ebp += eax;
loc_19c79d: // 0160:19c79d
    eax = memoryAGet32(ds, 0x39f23c);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    eax += ebx;
    ebx = ecx;
    ebx <<= 2;
loc_19c7ae: // 0160:19c7ae
    ebx += ecx;
    push32(esi);
    ebx <<= 6;
    push32(edi);
    eax += ebx;
    push32(eax);
    push32(ebp);
    sub_1c4e75();
    esp += 0x00000014;
loc_19c7c1: // 0160:19c7c1
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_19c7ca() // 0160:19c7ca +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if ((int32_t)memoryAGet32(ds, 0x39f23c) >= (int32_t)0x00000001)
        goto loc_19c7e2;
    memoryASet32(ds, 0x39f23c, 0x00000001);
loc_19c7e2: // 0160:19c7e2
    if ((int32_t)memoryAGet32(ds, 0x39f23c) <= (int32_t)0x00020000)
        goto loc_19c7f8;
    memoryASet32(ds, 0x39f23c, 0x00020000);
loc_19c7f8: // 0160:19c7f8
    eax = memoryAGet32(ds, 0x39f250);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    eax = memoryAGet32(ds, 0x39f08c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx += eax;
    eax = memoryAGet32(ds, 0x39f254);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39f088);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebx + eax;
    esi = edx + 84;
    edx = memoryAGet32(ds, 0x39f23c);
    ebx = ecx + 160;
    eax = edx;
    ecx = edx;
    eax <<= 2;
    ecx <<= 2;
    eax += edx;
    ecx += edx;
    eax <<= 2;
    ecx <<= 5;
    eax += edx;
    ecx = sar32(ecx, 0x10);
    eax <<= 2;
    edx = esi;
    ebx -= ecx;
    eax = sar32(eax, 0x10);
    ecx = ebx;
    edx -= eax;
    if (stop("postCondition"))
        goto loc_19c885;
    ecx ^= ebx;
loc_19c885: // 0160:19c885
    if (stop("postCondition"))
        goto loc_19c88b;
    edx = 0;
loc_19c88b: // 0160:19c88b
    ebx = memoryAGet32(ds, 0x39f23c);
    eax = ebx;
    eax <<= 2;
    esi = ebx;
    eax += ebx;
    esi <<= 2;
    eax <<= 2;
    esi += ebx;
    eax += ebx;
    esi <<= 6;
    eax <<= 3;
    esi = sar32(esi, 0x10);
    eax = sar32(eax, 0x10);
    edi = ecx + esi;
    eax += edx;
    if ((int32_t)edi <= (int32_t)0x000003bf)
        goto loc_19c8c4;
    ecx = 0x000003be;
    ecx -= esi;
loc_19c8c4: // 0160:19c8c4
    if ((int32_t)eax <= (int32_t)0x0000018f)
        goto loc_19c8ea;
    edx = memoryAGet32(ds, 0x39f23c);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    edx = 0x0000018e;
    eax = sar32(eax, 0x10);
    edx -= eax;
loc_19c8ea: // 0160:19c8ea
    edi = memoryAGet32(ds, 0x39f23c);
    memoryASet32(ds, 0x39f240, ecx);
    memoryASet32(ds, 0x39f244, edx);
    if (edi != 0x00010000)
        goto loc_19c910;
    eax = ecx;
    sub_19b8ca();
    goto loc_19ca95;
loc_19c910: // 0160:19c910
    ebx = edi;
    eax = ecx;
    sub_19bdd9();
    goto loc_19ca95;
    // gap 375 bytes
loc_19ca95: // 0160:19ca95
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c91e() // 0160:19c91e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1dc028) == 0x00000000)
        goto loc_19c955;
    if (memoryAGet32(ds, 0x39effc) != 0x00000000)
        goto loc_19ca94;
    edi = 0x00000500;
    ebp = 0x000003a0;
    memoryASet32(ds, 0x39f248, edi);
    memoryASet32(ds, 0x39f24c, ebp);
    goto loc_19ca2a;
loc_19c955: // 0160:19c955
    if (memoryAGet32(ds, 0x39f258) != 0x00000000)
        goto loc_19c9aa;
    if (memoryAGet32(ds, 0x39f004) != 0x00000000)
        goto loc_19c9aa;
    if (memoryAGet32(ds, 0x1dc098) != 0x00000000)
        goto loc_19c9aa;
    eax = memoryAGet32(ds, 0x39bdf4);
    eax -= memoryAGet32(ds, 0x39be00);
    edx = memoryAGet32(ds, 0x39f248);
    eax <<= 3;
    ecx = memoryAGet32(ds, 0x39be04);
    edx += eax;
    eax = memoryAGet32(ds, 0x39bdf0);
    eax -= ecx;
    esi = memoryAGet32(ds, 0x39f24c);
    eax <<= 3;
    esi += eax;
    memoryASet32(ds, 0x39f248, edx);
    memoryASet32(ds, 0x39f24c, esi);
loc_19c9aa: // 0160:19c9aa
    eax = memoryAGet32(ds, 0x39f250);
    eax -= memoryAGet32(ds, 0x39f248);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ebp = memoryAGet32(ds, 0x39f24c);
    ecx = eax;
    eax = memoryAGet32(ds, 0x39f254);
    eax -= ebp;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_19c9dc;
    eax = 0;
    memoryASet32(ds, 0x39f258, eax);
loc_19c9dc: // 0160:19c9dc
    if ((int32_t)memoryAGet32(ds, 0x39f248) < (int32_t)0x00000a00)
        goto loc_19c9f2;
    memoryASet32(ds, 0x39f248, 0x00000a00);
loc_19c9f2: // 0160:19c9f2
    if ((int32_t)memoryAGet32(ds, 0x39f248) >= (int32_t)0x00000000)
        goto loc_19ca03;
    edi = 0;
    memoryASet32(ds, 0x39f248, edi);
loc_19ca03: // 0160:19ca03
    if ((int32_t)memoryAGet32(ds, 0x39f24c) < (int32_t)0x000003a0)
        goto loc_19ca19;
    memoryASet32(ds, 0x39f24c, 0x000003a0);
loc_19ca19: // 0160:19ca19
    if ((int32_t)memoryAGet32(ds, 0x39f24c) >= (int32_t)0x00000000)
        goto loc_19ca2a;
    ecx = 0;
    memoryASet32(ds, 0x39f24c, ecx);
loc_19ca2a: // 0160:19ca2a
    if (memoryAGet32(ds, 0x39f258) != 0x00000000)
        goto loc_19ca38;
    ebx = 0x00000003;
loc_19ca38: // 0160:19ca38
    if (memoryAGet32(ds, 0x39f258) != 0x00000001)
        goto loc_19ca46;
    ebx = 0x00000002;
loc_19ca46: // 0160:19ca46
    if (memoryAGet32(ds, 0x39f258) != 0x00000002)
        goto loc_19ca54;
    ebx = 0x00000006;
loc_19ca54: // 0160:19ca54
    if (memoryAGet32(ds, 0x39f258) != 0x00000003)
        goto loc_19ca62;
    ebx = 0x00000004;
loc_19ca62: // 0160:19ca62
    eax = memoryAGet32(ds, 0x39f248);
    edi = memoryAGet32(ds, 0x39f250);
    cl = bl;
    eax -= edi;
    eax = sar32(eax, cl);
    edx = memoryAGet32(ds, 0x39f254);
    ebp = edi + eax;
    eax = memoryAGet32(ds, 0x39f24c);
    eax -= edx;
    eax = sar32(eax, cl);
    ebx = edx + eax;
    memoryASet32(ds, 0x39f250, ebp);
    memoryASet32(ds, 0x39f254, ebx);
loc_19ca94: // 0160:19ca94
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ca9b() // 0160:19ca9b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39f084) == 0x00000000)
        goto loc_19cb4d;
    eax = memoryAGet32(ds, 0x39f090);
    eax += 0x00000020;
    eax &= 0x000000ff;
    ebx = memoryAGet32(ds, 0x39f084);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    stop("imul edx * ebx");
    memoryASet32(ds, 0x39f090, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x39f088, eax);
    eax = memoryAGet32(ds, 0x39f084);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = memoryAGet32(ds, 0x39f090);
    ebx = ecx + 80;
    ebx &= 0x000000ff;
    ebx <<= 2;
    edx = memoryAGet32(ds, ebx + 1915924);
    stop("imul edx * eax");
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x39f08c, eax);
    if (ecx)
        goto loc_19cb4d;
    edx = memoryAGet32(ds, 0x39f084);
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx <<= 5;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x39f084, eax);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_19cb4d;
    memoryASet32(ds, 0x39f084, ecx);
loc_19cb4d: // 0160:19cb4d
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19cb51() // 0160:19cb51 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    edx += 0x0000f9fc;
    eax += 0x0000f9fc;
    ecx -= 0x00000004;
loc_19cb63: // 0160:19cb63
    ebx = memoryAGet32(ds, eax);
    eax -= 0x00000004;
    memoryASet32(ds, edx, ebx);
    edx -= 0x00000004;
    if (eax != ecx)
        goto loc_19cb63;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19cb74() // 0160:19cb74 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    edx = memoryAGet32(ds, 0x39bdc0);
    eax = edx;
    eax <<= 2;
    eax += edx;
    memoryASet32(ds, stop("GetOpAddress"), esi);
    edx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, stop("GetOpAddress"), edi);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, 0x39bdc0);
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    edx++;
    memoryASet32(ds, stop("GetOpAddress"), ecx);
    memoryASet32(ds, 0x39bdc0, edx);
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_19cbc0() // 0160:19cbc0 +long
{
    esp -= 4;
    goto loc_19cbc0;
loc_19ca94: // 0160:19ca94
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 293 bytes
loc_19cbc0: // 0160:19cbc0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
loc_19cbc6: // 0160:19cbc6
    edx = memoryAGet32(ds, 0x39bdc0);
    if ((int32_t)(edx & edx) <= 0)
        goto loc_19cc08;
    ebx = edx + -1;
    memoryASet32(ds, 0x39bdc0, ebx);
    eax = ebx * 0x00000014;
    esi = memoryAGet32(ds, eax + 2147288);
    edx = 0x002c69a8;
    push32(esi);
    edi = memoryAGet32(ds, eax + 2147284);
    ecx = memoryAGet32(ds, eax + 2147280);
    push32(edi);
    ebx = memoryAGet32(ds, eax + 2147276);
    eax = memoryAGet32(ds, eax + 2147272);
    sub_19c58a();
    goto loc_19cbc6;
loc_19cc08: // 0160:19cc08
    ebp = 0;
    memoryASet32(ds, 0x39bdc0, ebp);
    goto loc_19ca94;
}
void sub_19cc15() // 0160:19cc15 +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, esp + 28);
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_19cc49;
    esi = ebx + edi;
    if ((int32_t)esi >= (int32_t)0x00000140)
        goto loc_19cc49;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_19cc49;
    esi = ecx + edx;
    if ((int32_t)esi < (int32_t)0x000000a8)
        goto loc_19ccc4;
loc_19cc49: // 0160:19cc49
    esi = ebx + edi;
    if ((int32_t)(esi & esi) <= 0)
        goto loc_19cceb;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_19cceb;
    ebp = ecx + edx;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_19cceb;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_19cceb;
    if ((int32_t)esi <= (int32_t)0x00000140)
        goto loc_19cc87;
    esi -= 0x00000140;
    edi -= esi;
loc_19cc87: // 0160:19cc87
    esi = ecx + edx;
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_19cc9a;
    esi -= 0x000000a8;
    edx -= esi;
loc_19cc9a: // 0160:19cc9a
    if (stop("postCondition"))
        goto loc_19cca8;
    esi = ebx;
    edi += ebx;
    esi = -esi;
    ebx = 0;
    eax += esi;
loc_19cca8: // 0160:19cca8
    if (stop("postCondition"))
        goto loc_19ccc4;
    esi = ecx;
    esi = -esi;
    memoryASet32(ds, esp, esi);
    ebp = memoryAGet32(ds, esp);
    esi <<= 2;
    esi += ebp;
    edx += ecx;
    esi <<= 6;
    ecx = 0;
    eax += esi;
loc_19ccc4: // 0160:19ccc4
    esi = memoryAGet32(ds, esp + 36);
    push32(esi);
    esi = memoryAGet32(ds, esp + 8);
    esi += ebx;
    ebx = ecx;
    ebx <<= 2;
    ebp = memoryAGet32(ds, esp + 36);
    ebx += ecx;
    push32(ebp);
    ebx <<= 6;
    ecx = edx;
    esi += ebx;
    ebx = edi;
    edx = esi;
    sub_19ccf4();
loc_19cceb: // 0160:19cceb
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
}
void sub_19ccf4() // 0160:19ccf4 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esp -= 0x0000000c;
    edi = eax;
    memoryASet32(ds, esp + 4, edx);
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    edx = 0;
    memoryASet32(ds, esp + 8, edx);
    goto loc_19cd48;
loc_19cd0c: // 0160:19cd0c
    edx = memoryAGet32(ds, esp + 4);
    eax = edi;
    ebx = 0;
    goto loc_19cd27;
loc_19cd16: // 0160:19cd16
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx == 0x00000080)
        goto loc_19cd24;
    memoryASet(ds, edx, cl);
loc_19cd24: // 0160:19cd24
    eax++;
    edx++;
    ebx++;
loc_19cd27: // 0160:19cd27
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_19cd16;
    ecx = memoryAGet32(ds, esp + 24);
    eax = memoryAGet32(ds, esp + 28);
    ebx = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 4);
    ebx++;
    edx += eax;
    edi += ecx;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
loc_19cd48: // 0160:19cd48
    eax = memoryAGet32(ds, esp + 8);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp))
        goto loc_19cd0c;
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_19cd59() // 0160:19cd59 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    edx = 0;
    edi = 0xffffffff;
    memoryASet32(ds, 0x39f1e0, edx);
    memoryASet32(ds, 0x39f1d0, edx);
    memoryASet32(ds, 0x39f1d4, edx);
    memoryASet32(ds, 0x39f1c0, edx);
    memoryASet32(ds, 0x39f1c4, edi);
    memoryASet32(ds, 0x39f1cc, edx);
    memoryASet32(ds, 0x39f1c8, edx);
    memoryASet32(ds, 0x39f1e8, edx);
    memoryASet32(ds, 0x39f1ec, edx);
    memoryASet32(ds, 0x39f1e4, edx);
    memoryASet32(ds, 0x39f1d8, edx);
    memoryASet32(ds, 0x39f1f0, edx);
    memoryASet32(ds, 0x1df9fc, edx);
    memoryASet32(ds, 0x1dfa00, edx);
    memoryASet32(ds, 0x1dfa04, edi);
    memoryASet32(ds, 0x39f1f4, edx);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_19cdc5() // 0160:19cdc5 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792050) != 0x00000000)
        goto loc_19cde2;
    memoryASet32(ds, eax + 3792050, 0xffffffff);
loc_19cde2: // 0160:19cde2
    esp += 4;
    return;
}
void sub_19cde3() // 0160:19cde3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    if (memoryAGet32(ds, 0x1dd548) == 0x00000000)
        goto loc_19ce1d;
    ebx = 0x00000032;
    ecx = 0x00000002;
    eax = memoryAGet32(ds, 0x1dd544);
    esi = 0;
    memoryASet32(ds, 0x39f230, ebx);
    memoryASet32(ds, 0x1dd550, ecx);
    memoryASet32(ds, 0x1dd54c, eax);
    memoryASet32(ds, 0x1dd544, esi);
    memoryASet32(ds, 0x1dc0c4, esi);
loc_19ce1d: // 0160:19ce1d
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ce21() // 0160:19ce21 +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    if (memoryAGet32(ds, 0x1dc02c) == 0x00000000)
        goto loc_19ce52;
    ebx = memoryAGet32(ds, 0x1dfc80);
    if (ebx)
        goto loc_19ce52;
    esi = 0x00000001;
    memoryASet32(ds, 0x1dd544, ebx);
    memoryASet32(ds, 0x1dd550, esi);
    memoryASet32(ds, 0x1dd548, esi);
    sub_1aae8f();
loc_19ce52: // 0160:19ce52
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ce55() // 0160:19ce55 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax * 0x000000ac;
    eax = memoryAGet32(ds, edx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39f250);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx -= eax;
    eax = ebx;
    if (stop("postCondition"))
        goto loc_19ce8e;
    eax ^= ebx;
loc_19ce8e: // 0160:19ce8e
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_19ce9a;
    eax = 0x00000140;
loc_19ce9a: // 0160:19ce9a
    edx = 0x00000140;
    edx -= eax;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x00000140;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ceb7() // 0160:19ceb7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39f250);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= ecx;
    if (stop("postCondition"))
        goto loc_19cee7;
    eax = 0;
loc_19cee7: // 0160:19cee7
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_19cef3;
    eax = 0x00000140;
loc_19cef3: // 0160:19cef3
    edx = 0x00000140;
    edx -= eax;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x00000140;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19cf11() // 0160:19cf11 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = 0;
    edi = 0x000002b0;
    memoryASet32(ds, esp, esi);
    goto loc_19cf8b;
loc_19cf26: // 0160:19cf26
    eax = memoryAGet32(ds, esp);
    ecx = esi;
    ebx = edi;
    edx = 0;
    ecx <<= 2;
    goto loc_19cf41;
loc_19cf34: // 0160:19cf34
    ebp = memoryAGet32(ds, eax + 3792102);
    eax += 0x000000ac;
    edx += ebp;
loc_19cf41: // 0160:19cf41
    if (eax != ebx)
        goto loc_19cf34;
    if (edx)
        goto loc_19cf78;
    if (memoryAGet32(ds, ecx + 3797520) != 0x00000000)
        goto loc_19cf78;
    edx = 0x00000001;
    ebx = 0x00000032;
    eax = 0x001d26ef;
    memoryASet32(ds, ecx + 3797520, edx);
    edx = ecx;
    sub_19e8ec();
    memoryASet32(ds, 0x39f230, 0x00000032);
loc_19cf78: // 0160:19cf78
    ecx = memoryAGet32(ds, esp);
    edi += 0x000002b0;
    ecx += 0x000002b0;
    esi++;
    memoryASet32(ds, esp, ecx);
loc_19cf8b: // 0160:19cf8b
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, 0x1dc034))
        goto loc_19cf26;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19cf9d() // 0160:19cf9d +long
{
    esp -= 4;
    goto loc_19cf9d;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19cf9d: // 0160:19cf9d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    eax = eax * 0x000000ac;
    memoryASet32(ds, 0x39f13c, 0x00000001);
    if (memoryAGet32(ds, eax + 3792026) <= 0x00078000)
        goto loc_19cfd6;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000002a;
    goto loc_19d02f;
loc_19cfd6: // 0160:19cfd6
    if ((int32_t)memoryAGet32(ds, eax + 3792030) <= (int32_t)0x0002fc00)
        goto loc_19d03e;
    edi = memoryAGet32(ds, 0x39bdd8);
    if (edi != 0x00000002)
        goto loc_19d002;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000041;
    goto loc_19d02f;
loc_19d002: // 0160:19d002
    if (edi != 0x00000003)
        goto loc_19d01c;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000040;
    goto loc_19d02f;
loc_19d01c: // 0160:19d01c
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000000e;
loc_19d02f: // 0160:19d02f
    sub_1b9c1d();
    memoryASet32(ds, 0x39f1e0, 0x00000001);
loc_19d03e: // 0160:19d03e
    if (cl & 0x03)
        goto loc_19d04d;
    memoryASet32(ds, 0x39f1cc, 0x00000001);
loc_19d04d: // 0160:19d04d
    eax = ecx * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 3792042, esi);
    memoryASet32(ds, eax + 3792018, esi);
    memoryASet32(ds, eax + 3792022, esi);
    memoryASet32(ds, eax + 3792026, esi);
    memoryASet32(ds, eax + 3792102, esi);
    memoryASet32(ds, eax + 3792106, esi);
    memoryASet32(ds, eax + 3792110, esi);
    memoryASet32(ds, eax + 3792058, esi);
    eax = 0x00000010;
    edx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39efac, eax);
    if (ecx != edx)
        goto loc_19d0b0;
    ebx = memoryAGet32(ds, 0x39eff4);
    ebx--;
    memoryASet32(ds, 0x39eff4, ebx);
    if (stop("postCondition"))
        goto loc_19d0b0;
    memoryASet32(ds, 0x39eff4, esi);
loc_19d0b0: // 0160:19d0b0
    eax = ecx * 0x000000ac;
    ebp = 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 3792074, ebp);
    edi = 0x00000032;
    memoryASet32(ds, eax + 3792006, edx);
    ebx = edi;
    memoryASet32(ds, eax + 3792002, edx);
    eax = 0x001d26c6;
    memoryASet32(ds, 0x39f020, edx);
    edx = ecx;
    memoryASet32(ds, 0x39f230, edi);
    sub_19e8ec();
    goto loc_19cf96;
}
void sub_19d0f3() // 0160:19d0f3 +long
{
    esp -= 4;
    goto loc_19d0f3;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 342 bytes
loc_19d0f3: // 0160:19d0f3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    memoryASet32(ds, 0x39f248, eax);
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001c0;
    ebx = memoryAGet32(ds, 0x39f248);
    memoryASet32(ds, 0x39f24c, eax);
    if (stop("postCondition"))
        goto loc_19d155;
    ecx = 0;
    memoryASet32(ds, 0x39f248, ecx);
loc_19d155: // 0160:19d155
    if ((int32_t)memoryAGet32(ds, 0x39f24c) >= (int32_t)0x00000000)
        goto loc_19d166;
    edi = 0;
    memoryASet32(ds, 0x39f24c, edi);
loc_19d166: // 0160:19d166
    if ((int32_t)memoryAGet32(ds, 0x39f248) <= (int32_t)0x00000a00)
        goto loc_19d17c;
    memoryASet32(ds, 0x39f248, 0x00000a00);
loc_19d17c: // 0160:19d17c
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792054, ebx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    esi = 0x00000001;
    eax = memoryAGet32(ds, eax + 3792030);
    ebp = memoryAGet32(ds, 0x39f0a8);
    eax -= 0x00004000;
    memoryASet32(ds, 0x39efa4, esi);
    memoryASet32(ds, 0x39efa0, esi);
    memoryASet32(ds, 0x39efa8, eax);
    if (!ebp)
        goto loc_19cf96;
    eax = memoryAGet32(ds, 0x39eff8);
    memoryASet32(ds, 0x39ef94, eax);
    goto loc_19cf96;
}
void sub_19d1d6() // 0160:19d1d6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    ecx = 0x00000004;
    ebp = 0x00000001;
    esi = 0x00000010;
    edx = memoryAGet32(ds, 0x39f09c);
    sub_199ab8();
    sub_1982e5();
    memoryASet32(ds, 0x39f09c, edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x1dd554, edx);
    memoryASet32(ds, 0x39f040, edx);
    memoryASet32(ds, 0x39f044, edx);
    memoryASet32(ds, 0x1df9e0, edx);
    memoryASet32(ds, 0x1dfa20, edx);
    memoryASet32(ds, 0x39f188, edx);
    sub_1b2062();
    memoryASet32(ds, 0x39f13c, edx);
    memoryASet32(ds, 0x39f180, edx);
    memoryASet32(ds, 0x39f194, edx);
    memoryASet32(ds, 0x39f0f0, edx);
    memoryASet32(ds, 0x39f22c, edx);
    memoryASet32(ds, 0x39f0f4, edx);
    memoryASet32(ds, 0x39f0e8, edx);
    memoryASet32(ds, 0x39f1a0, edx);
    memoryASet32(ds, 0x39f1b4, ebx);
    memoryASet32(ds, 0x39f1b8, ebx);
    memoryASet32(ds, 0x39f050, ebx);
    memoryASet32(ds, 0x39f054, ebx);
    memoryASet32(ds, 0x39f19c, ebx);
    memoryASet32(ds, 0x39f0f8, ebx);
    memoryASet32(ds, 0x39f12c, ebx);
    memoryASet32(ds, 0x39f144, ebx);
    memoryASet32(ds, 0x39f148, ebx);
    memoryASet32(ds, 0x39f14c, ebx);
    memoryASet32(ds, 0x39f150, ebx);
    memoryASet32(ds, 0x39f154, ebx);
    memoryASet32(ds, 0x39f158, ebx);
    memoryASet32(ds, 0x39f15c, ebx);
    memoryASet32(ds, 0x39f160, ebx);
    memoryASet32(ds, 0x39f164, ebx);
    memoryASet32(ds, 0x39f168, ebx);
    memoryASet32(ds, 0x39f16c, ebx);
    memoryASet32(ds, 0x39f170, ebx);
    memoryASet32(ds, 0x39f174, ebx);
    memoryASet32(ds, 0x39f07c, ebx);
    memoryASet32(ds, 0x39f098, ebx);
    memoryASet32(ds, 0x39f094, ecx);
    memoryASet32(ds, 0x39f004, ebx);
    memoryASet32(ds, 0x39f258, ebx);
    memoryASet32(ds, 0x39eff4, ebp);
    memoryASet32(ds, 0x39ef7e, ebp);
    memoryASet32(ds, 0x39f0bc, ebx);
    memoryASet32(ds, 0x39f1bc, ebx);
    memoryASet32(ds, 0x39f120, ebx);
    edx = 0x00000032;
    memoryASet32(ds, 0x39efac, esi);
    memoryASet32(ds, 0x39f1ac, edx);
    sub_19cd59();
    memoryASet32(ds, 0x39f1a4, ebx);
    sub_1aa6f5();
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19d338() // 0160:19d338 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax <<= 2;
    ecx = eax + 4;
    eax = eax * 0x000000ac;
    edx = 0;
    ecx = ecx * 0x000000ac;
    goto loc_19d37b;
loc_19d351: // 0160:19d351
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_19d376;
    if (memoryAGet32(ds, eax + 3792126) != 0x00000000)
        goto loc_19d376;
    ebx = memoryAGet32(ds, eax + 3792102);
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, eax + 3792106))
        goto loc_19d376;
    edx = 0x00000001;
loc_19d376: // 0160:19d376
    eax += 0x000000ac;
loc_19d37b: // 0160:19d37b
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_19d383;
    if (!edx)
        goto loc_19d351;
loc_19d383: // 0160:19d383
    eax = edx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19d389() // 0160:19d389 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
    sub_19d338();
    memoryASet32(ds, 0x39f1fc, eax);
    if (!eax)
        goto loc_19d3a2;
    edx = 0;
    memoryASet32(ds, 0x1dd538, edx);
loc_19d3a2: // 0160:19d3a2
    eax = 0x00000001;
    sub_19d338();
    memoryASet32(ds, 0x39f1fc, memoryAGet32(ds, 0x39f1fc) + eax);
    if (!eax)
        goto loc_19d3c0;
    memoryASet32(ds, 0x1dd538, 0x00000001);
loc_19d3c0: // 0160:19d3c0
    eax = 0x00000002;
    sub_19d338();
    memoryASet32(ds, 0x39f1fc, memoryAGet32(ds, 0x39f1fc) + eax);
    if (!eax)
        goto loc_19d3de;
    memoryASet32(ds, 0x1dd538, 0x00000002);
loc_19d3de: // 0160:19d3de
    eax = 0x00000003;
    sub_19d338();
    memoryASet32(ds, 0x39f1fc, memoryAGet32(ds, 0x39f1fc) + eax);
    if (!eax)
        goto loc_19d3fc;
    memoryASet32(ds, 0x1dd538, 0x00000003);
loc_19d3fc: // 0160:19d3fc
    if ((int32_t)memoryAGet32(ds, 0x39f1fc) > (int32_t)0x00000001)
        goto loc_19d414;
    memoryASet32(ds, 0x1dd540, 0x00000001);
    sub_19cde3();
loc_19d414: // 0160:19d414
    edx = pop32();
    esp += 4;
}
void sub_19d416() // 0160:19d416 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = 0;
    sub_19d338();
    memoryASet32(ds, 0x39f1fc, eax);
    if (!eax)
        goto loc_19d431;
    edx = 0;
    memoryASet32(ds, 0x1dd538, edx);
loc_19d431: // 0160:19d431
    eax = 0x00000001;
    sub_19d338();
    memoryASet32(ds, 0x39f1fc, memoryAGet32(ds, 0x39f1fc) + eax);
    if (!eax)
        goto loc_19d44f;
    memoryASet32(ds, 0x1dd538, 0x00000001);
loc_19d44f: // 0160:19d44f
    eax = 0x00000002;
    sub_19d338();
    memoryASet32(ds, 0x39f1fc, memoryAGet32(ds, 0x39f1fc) + eax);
    if (!eax)
        goto loc_19d46d;
    memoryASet32(ds, 0x1dd538, 0x00000002);
loc_19d46d: // 0160:19d46d
    eax = 0x00000003;
    sub_19d338();
    memoryASet32(ds, 0x39f1fc, memoryAGet32(ds, 0x39f1fc) + eax);
    if (!eax)
        goto loc_19d48b;
    memoryASet32(ds, 0x1dd538, 0x00000003);
loc_19d48b: // 0160:19d48b
    if ((int32_t)memoryAGet32(ds, 0x39f1fc) > (int32_t)0x00000001)
        goto loc_19d4c7;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x39effc, ebx);
    memoryASet32(ds, 0x39f234, ecx);
    memoryASet32(ds, eax + 3792062, ebx);
    eax = 0x00000032;
    memoryASet32(ds, 0x39f1ac, ebx);
    memoryASet32(ds, 0x39f230, eax);
loc_19d4c7: // 0160:19d4c7
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19d4cb() // 0160:19d4cb +long
{
    esp -= 4;
    goto loc_19d4cb;
loc_19cf97: // 0160:19cf97
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1326 bytes
loc_19d4cb: // 0160:19d4cb
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000008;
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x39ef9c);
    edi = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, eax);
    goto loc_19d538;
loc_19d4e8: // 0160:19d4e8
    eax = memoryAGet32(ds, esp);
    eax++;
    eax &= 0x00000003;
    ecx = eax;
    ebx = 0;
    ecx <<= 2;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, ecx + 3797248);
    goto loc_19d532;
loc_19d501: // 0160:19d501
    edx++;
    edx &= 0x00000003;
    esi = edx + ecx;
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_19d531;
    if (memoryAGet32(ds, eax + 3792126) != 0x00000000)
        goto loc_19d531;
    ebx = 0x00000004;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, ecx + 3797248, edx);
    edi = ebx;
loc_19d531: // 0160:19d531
    ebx++;
loc_19d532: // 0160:19d532
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_19d501;
    edi++;
loc_19d538: // 0160:19d538
    if ((int32_t)edi < (int32_t)0x00000004)
        goto loc_19d4e8;
    ebx = memoryAGet32(ds, esp + 4);
    if ((int32_t)ebx<0)
        goto loc_19d553;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x39ef98, ebx);
    memoryASet32(ds, 0x39ef9c, eax);
loc_19d553: // 0160:19d553
    esp += 0x00000008;
    goto loc_19cf97;
}
void sub_19d55b() // 0160:19d55b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000001;
    ebx = 0x001d288c;
    ecx = memoryAGet32(ds, 0x1dfc80);
    eax = memoryAGet32(ds, 0x39f0b8);
    memoryASet32(ds, 0x1dfc80, edx);
    edx = 0x001d2873;
    sub_19e997();
    ebx = 0x0000000f;
    edx = 0x001d2873;
    eax = memoryAGet32(ds, 0x39efbc);
    sub_19e96d();
    ebx = 0x001d2a00;
    edx = 0x001d29e4;
    eax = memoryAGet32(ds, 0x39f0b8);
    sub_19e997();
    ebx = 0x00000012;
    edx = 0x001d29e4;
    eax = memoryAGet32(ds, 0x39efbc);
    sub_19e96d();
    ebx = 0x001d2a29;
    edx = 0x001d2a0d;
    eax = memoryAGet32(ds, 0x39f0b8);
    sub_19e997();
    ebx = 0x00000012;
    edx = 0x001d2a0d;
    eax = memoryAGet32(ds, 0x39efbc);
    sub_19e96d();
    memoryASet32(ds, 0x1dfc80, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19d5f1() // 0160:19d5f1 +long
{
    esp -= 4;
    goto loc_19d5f1;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1620 bytes
loc_19d5f1: // 0160:19d5f1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x39ef98);
    sub_19d1d6();
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, 0x39f0a4);
    edx++;
    ecx = 0;
    memoryASet32(ds, 0x39f0a4, edx);
    memoryASet32(ds, eax + 3792018, ecx);
    memoryASet32(ds, eax + 3792022, ecx);
    memoryASet32(ds, eax + 3792070, ecx);
    memoryASet32(ds, eax + 3792158, ecx);
    memoryASet32(ds, eax + 3792162, ecx);
    memoryASet32(ds, eax + 3792042, ecx);
    memoryASet32(ds, eax + 3792082, ecx);
    memoryASet32(ds, eax + 3792006, ecx);
    memoryASet32(ds, eax + 3792002, ecx);
    esi = 0;
    memoryASet32(ds, eax + 3792010, ecx);
    memoryASet32(ds, eax + 3792106, esi);
    memoryASet32(ds, eax + 3792134, esi);
    memoryASet32(ds, eax + 3792122, 0x00000001);
    if (memoryAGet32(ds, 0x39f09c) != 0x00000012)
        goto loc_19d67e;
    memoryASet32(ds, 0x39f09c, 0x00000005);
loc_19d67e: // 0160:19d67e
    if (memoryAGet32(ds, 0x39f09c) != 0x00000013)
        goto loc_19d691;
    memoryASet32(ds, 0x39f09c, 0x00000009);
loc_19d691: // 0160:19d691
    if (memoryAGet32(ds, 0x39f09c) != 0x00000014)
        goto loc_19d6a4;
    memoryASet32(ds, 0x39f09c, 0x00000003);
loc_19d6a4: // 0160:19d6a4
    edx = memoryAGet32(ds, 0x39ef9c);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebp = memoryAGet32(ds, 0x39f09c);
    eax += edx;
    eax += ebp;
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_19d700;
    eax = ebx * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 3792074);
    if (ecx == 0x0000002b)
        goto loc_19d700;
    if (ecx == 0x0000000b)
        goto loc_19d700;
    if (ecx == 0x00000033)
        goto loc_19d700;
    if (ecx == 0x00000026)
        goto loc_19d700;
    if (ecx == 0x00000016)
        goto loc_19d700;
    if (ecx == 0x0000001f)
        goto loc_19d700;
    if (ecx == 0x00000034)
        goto loc_19d700;
    if (memoryAGet32(ds, 0x39f0ec) == 0x00000000)
        goto loc_19d71a;
loc_19d700: // 0160:19d700
    eax = ebx * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, 0x39f0ec, ebp);
    memoryASet32(ds, eax + 3792074, ebp);
    memoryASet32(ds, 0x39f09c, ebp);
loc_19d71a: // 0160:19d71a
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, 0x39f09c);
    esi = 0x00000004;
    memoryASet32(ds, eax + 3792078, edx);
    edi = 0x00000001;
    memoryASet32(ds, eax + 3792074, esi);
    memoryASet32(ds, eax + 3792122, edi);
    edx = memoryAGet32(ds, 0x39efb8);
    memoryASet32(ds, eax + 3792130, edx);
    edx = memoryAGet32(ds, 0x39efbc);
    memoryASet32(ds, eax + 3792138, edx);
    edx = memoryAGet32(ds, 0x39f0b8);
    memoryASet32(ds, eax + 3792142, edx);
    sub_19d4cb();
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792130);
    memoryASet32(ds, 0x39efb8, edx);
    edx = memoryAGet32(ds, eax + 3792138);
    memoryASet32(ds, 0x39efbc, edx);
    eax = memoryAGet32(ds, eax + 3792142);
    memoryASet32(ds, 0x39f0b8, eax);
    sub_19d55b();
    sub_199775();
    sub_1997d1();
    sub_19982d();
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    memoryASet32(ds, 0x39f008, eax);
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = 0x00000032;
    eax <<= 2;
    edx = 0x00000003;
    memoryASet32(ds, 0x39f00c, eax);
    sub_19d0f3();
    eax = 0x001d269d;
    memoryASet32(ds, 0x39f258, edx);
    edx = memoryAGet32(ds, 0x39ef98);
    sub_19e8ec();
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, 0x39f1a8, edi);
    edx = memoryAGet32(ds, edx + 3792078);
    eax = edx;
    eax <<= 2;
    esi = 0;
    eax += edx;
    ebx = edi;
    edi = 0x0000004b;
    indirectCall(cs, memoryAGet32(ds, stop("GetOpAddress"))); // 0160:19d837;
    memoryASet32(ds, 0x39f1a8, esi);
    memoryASet32(ds, 0x1dc040, edi);
    sub_1b7b8f();
    if (eax != ebx)
        goto loc_19cf96;
    memoryASet32(ds, 0x39f1ac, esi);
    memoryASet32(ds, 0x39f234, eax);
    memoryASet32(ds, 0x1dd554, eax);
    goto loc_19cf96;
}
void sub_19d86c() // 0160:19d86c +long
{
    esp -= 4;
    goto loc_19d86c;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2255 bytes
loc_19d86c: // 0160:19d86c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x39ef9c);
    esi = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, eax);
    goto loc_19d8d4;
loc_19d88a: // 0160:19d88a
    eax = memoryAGet32(ds, esp);
    eax++;
    eax &= 0x00000003;
    edi = eax;
    edx = 0;
    edi <<= 2;
    memoryASet32(ds, esp, eax);
    ebx = memoryAGet32(ds, edi + 3797248);
    goto loc_19d8ce;
loc_19d8a3: // 0160:19d8a3
    ebx++;
    ebx &= 0x00000003;
    ecx = ebx + edi;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_19d8cd;
    if (memoryAGet32(ds, eax + 3792126) != 0x00000000)
        goto loc_19d8cd;
    edx = 0x00000004;
    memoryASet32(ds, esp + 4, ecx);
    esi = edx;
loc_19d8cd: // 0160:19d8cd
    edx++;
loc_19d8ce: // 0160:19d8ce
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_19d8a3;
    esi++;
loc_19d8d4: // 0160:19d8d4
    if ((int32_t)esi < (int32_t)0x00000004)
        goto loc_19d88a;
    ecx = memoryAGet32(ds, esp + 4);
    if (stop("postCondition"))
        goto loc_19d8e3;
    ebx = ecx;
loc_19d8e3: // 0160:19d8e3
    esi = 0;
    edi = memoryAGet32(ds, 0x1dd540);
    memoryASet32(ds, 0x39f004, esi);
    if (edi)
        goto loc_19d90c;
    if (memoryAGet32(ds, 0x1dd548) == 0x00000000)
        goto loc_19d90c;
    if (memoryAGet32(ds, 0x39f22c) != 0x00000000)
        goto loc_19d90c;
    sub_19d389();
loc_19d90c: // 0160:19d90c
    if (memoryAGet32(ds, 0x1dc02c) == 0x00000000)
        goto loc_19d950;
    if ((int32_t)memoryAGet32(ds, 0x1dd544) < (int32_t)0x00000002)
        goto loc_19d950;
    if (memoryAGet32(ds, 0x1dd548) == 0x00000000)
        goto loc_19d950;
    if ((int32_t)memoryAGet32(ds, 0x1dd550) >= (int32_t)0x00000003)
        goto loc_19d950;
    if (memoryAGet32(ds, 0x39f22c) != 0x00000000)
        goto loc_19d950;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19d950;
    if (memoryAGet32(ds, 0x1dd540) != 0x00000000)
        goto loc_19d950;
    sub_19cde3();
loc_19d950: // 0160:19d950
    ecx = memoryAGet32(ds, 0x39f230);
    if (ecx)
        goto loc_19d965;
    memoryASet32(ds, 0x1dc0c4, ecx);
    sub_1a3924();
loc_19d965: // 0160:19d965
    if (memoryAGet32(ds, 0x39f230) != 0x00000000)
        goto loc_19d973;
    sub_197b3b();
loc_19d973: // 0160:19d973
    ebp = memoryAGet32(ds, 0x39f230);
    if (ebp)
        goto loc_19d9cf;
    if (memoryAGet32(ds, 0x39f1b4) != 0x00000001)
        goto loc_19d9cf;
    if (memoryAGet32(ds, 0x39ef94) == 0x00000000)
        goto loc_19d9cf;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_19d9cf;
    edi = 0x00000001;
    edx = 0x00000032;
    memoryASet32(ds, 0x1dd544, ebp);
    memoryASet32(ds, 0x39f0bc, ebp);
    memoryASet32(ds, 0x39f22c, ebp);
    memoryASet32(ds, 0x39eff4, edi);
    memoryASet32(ds, 0x39f230, edx);
    sub_19dc9c();
loc_19d9cf: // 0160:19d9cf
    if (memoryAGet32(ds, 0x39f230) != 0x00000000)
        goto loc_19d9dd;
    sub_19cf11();
loc_19d9dd: // 0160:19d9dd
    if (memoryAGet32(ds, 0x39effc) == 0x00000000)
        goto loc_19dac9;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_19dac9;
    if (memoryAGet32(ds, 0x1dd550) == 0x00000002)
        goto loc_19da05;
    sub_19d416();
loc_19da05: // 0160:19da05
    if (memoryAGet32(ds, 0x39f230) != 0x00000000)
        goto loc_19dac9;
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_19da28;
    sub_1a6de0();
    if ((int32_t)(eax & eax) <= 0)
        goto loc_19dac9;
loc_19da28: // 0160:19da28
    eax = memoryAGet32(ds, 0x39f250);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = ebx * 0x000000ac;
    esi = eax + 160;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, 0x39f254);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx -= esi;
    esi = eax + 84;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul ecx * ecx");
    eax -= esi;
    stop("imul eax * eax");
    ecx += eax;
    if ((int32_t)ecx <= (int32_t)0x00010000)
        goto loc_19daa3;
    if (memoryAGet32(ds, 0x39f23c) == 0x00010000)
        goto loc_19daaa;
loc_19daa3: // 0160:19daa3
    sub_19d5f1();
    goto loc_19dab4;
loc_19daaa: // 0160:19daaa
    memoryASet32(ds, 0x39f0ac, 0x00000001);
loc_19dab4: // 0160:19dab4
    ebp = 0x00000001;
    eax = memoryAGet32(ds, 0x39eff8);
    memoryASet32(ds, 0x39f0a8, ebp);
    memoryASet32(ds, 0x39ef94, eax);
loc_19dac9: // 0160:19dac9
    esp += 0x00000008;
    goto loc_19cf96;
}
void sub_19dad1() // 0160:19dad1 +long
{
    esp -= 4;
    goto loc_19dad1;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2868 bytes
loc_19dad1: // 0160:19dad1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1dd53c);
    if ((int32_t)(edx & edx) <= 0)
        goto loc_19db24;
    ebx = edx + -1;
    memoryASet32(ds, 0x1dd53c, ebx);
    if (ebx)
        goto loc_19db24;
    edx = memoryAGet32(ds, 0x1dd538);
    if (memoryAGet32(ds, stop("GetOpAddress")) != 0x00000000)
        goto loc_19db24;
    edi = 0xffffffff;
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x1dd53c, edi);
    sub_19ce55();
    edx = eax;
    eax = 0x0000003d;
    sub_1b9c1d();
loc_19db24: // 0160:19db24
    ebp = memoryAGet32(ds, 0x39f1b0);
    if (!ebp)
        goto loc_19db76;
    eax = ebp + -1;
    memoryASet32(ds, 0x39f1b0, eax);
    if (eax)
        goto loc_19db76;
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ecx = 0x00000001;
    memoryASet32(ds, 0x39eff4, eax);
    memoryASet32(ds, 0x39f234, ecx);
    memoryASet32(ds, edx + 3792062, eax);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792082, ebx);
    memoryASet32(ds, 0x39f230, 0x00000032);
loc_19db76: // 0160:19db76
    ecx = memoryAGet32(ds, 0x39f1ac);
    if (!ecx)
        goto loc_19db93;
    esi = ecx + -1;
    memoryASet32(ds, 0x39f1ac, esi);
    if (esi)
        goto loc_19db93;
    memoryASet32(ds, 0x39f234, esi);
loc_19db93: // 0160:19db93
    if (memoryAGet32(ds, 0x1dd550) != 0x00000003)
        goto loc_19dbb3;
    eax = memoryAGet32(ds, 0x1dd544);
    if (eax != memoryAGet32(ds, 0x1dd54c))
        goto loc_19dbb3;
    memoryASet32(ds, 0x1dd550, 0x00000004);
loc_19dbb3: // 0160:19dbb3
    if (memoryAGet32(ds, 0x39f0a8) == 0x00000000)
        goto loc_19dc0f;
    esi = memoryAGet32(ds, 0x39f0ac);
    if (esi)
        goto loc_19dc0f;
    eax = memoryAGet32(ds, 0x39eff8);
    ebp = memoryAGet32(ds, 0x39f250);
    edx = memoryAGet32(ds, 0x39f24c);
    ebx = memoryAGet32(ds, 0x39f254);
    memoryASet32(ds, 0x39ef94, eax);
    eax = memoryAGet32(ds, 0x39f248);
    edx -= ebx;
    eax -= ebp;
    edi = 0x00000001;
    eax += edx;
    memoryASet32(ds, 0x39f234, edi);
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_19dc0f;
    memoryASet32(ds, 0x39f0a8, esi);
    memoryASet32(ds, 0x39f1ac, 0x00000032);
loc_19dc0f: // 0160:19dc0f
    if (memoryAGet32(ds, 0x39f0ac) == 0x00000000)
        goto loc_19cf96;
    ebp = 0x00000001;
    eax = 0x00000002;
    edx = memoryAGet32(ds, 0x39f0a8);
    memoryASet32(ds, 0x39f234, ebp);
    edx += 0x00000010;
    memoryASet32(ds, 0x39f258, eax);
    memoryASet32(ds, 0x39f0a8, edx);
    if ((int32_t)edx < (int32_t)0x00000801)
        goto loc_19dc68;
    esi = 0;
    eax = 0x00000032;
    memoryASet32(ds, 0x39f0a8, esi);
    memoryASet32(ds, 0x39f258, esi);
    memoryASet32(ds, 0x39f0ac, esi);
    memoryASet32(ds, 0x39f1ac, eax);
    goto loc_19dc72;
loc_19dc68: // 0160:19dc68
    if (edx != 0x00000011)
        goto loc_19dc72;
    sub_19d5f1();
loc_19dc72: // 0160:19dc72
    edx = memoryAGet32(ds, 0x39f0a8);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    edx += edx;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax += 0x00010000;
    memoryASet32(ds, 0x39f23c, eax);
    goto loc_19cf96;
}
void sub_19dc9c() // 0160:19dc9c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    memoryASet32(ds, 0x39f248, eax);
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001c0;
    memoryASet32(ds, 0x39f24c, eax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19dceb() // 0160:19dceb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x39ef9c);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax += memoryAGet32(ds, 0x39f09c);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 3795258);
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_19dd1c;
    ecx = ebx + -1;
    memoryASet32(ds, eax + 3795258, ecx);
loc_19dd1c: // 0160:19dd1c
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19dd20() // 0160:19dd20 +long
{
    esp -= 4;
    goto loc_19dd20;
loc_19cf97: // 0160:19cf97
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3459 bytes
loc_19dd20: // 0160:19dd20
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x39f230);
    if (edx)
        goto loc_19de0c;
    esi = 0x00000001;
    edi = memoryAGet32(ds, 0x39f1a4);
    memoryASet32(ds, 0x39f0ec, esi);
    if (edi != esi)
        goto loc_19dd6c;
    memoryASet32(ds, 0x39eff4, edx);
    memoryASet32(ds, 0x39f234, esi);
    ecx = 0;
    edx = 0x00000032;
    memoryASet32(ds, 0x39f1ac, ecx);
    memoryASet32(ds, 0x39f230, edx);
    goto loc_19ddec;
loc_19dd6c: // 0160:19dd6c
    if (edi != 0x00000002)
        goto loc_19ddec;
    eax = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39eff4, edx);
    edx = 0x00000032;
    al &= 0xfc;
    memoryASet32(ds, 0x39f230, edx);
    edx = eax * 0x000000ac;
    memoryASet32(ds, 0x39f234, esi);
    memoryASet32(ds, edx + 3792126, esi);
    edx = eax + esi;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3792126, esi);
    edx = eax + edi;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3792126, esi);
    memoryASet32(ds, eax + 3792126, esi);
    eax = memoryAGet32(ds, 0x39ef98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax += 0x00000031;
    memoryASet(ds, 0x1d30a0, al);
    eax = 0x001d308f;
    sub_19e906();
loc_19ddec: // 0160:19ddec
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000032;
    sub_1b9c1d();
    goto loc_19cf97;
loc_19de0c: // 0160:19de0c
    ebx = 0x00000010;
    ecx = 0;
    ah = 0;
    memoryASet32(ds, 0x39efac, ebx);
    memoryASet32(ds, 0x39f120, ecx);
    memoryASet(ds, 0x3a72a5, ah);
    goto loc_19cf97;
}
void sub_19de2c() // 0160:19de2c +long
{
    esp -= 4;
    push32(edx);
    sub_19dceb();
    eax = memoryAGet32(ds, 0x39f0a0);
    sub_19e865();
    edx = memoryAGet32(ds, 0x39ef9c);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax += memoryAGet32(ds, 0x39f09c);
    if ((int32_t)memoryAGet32(ds, stop("GetOpAddress")) < (int32_t)0x00000000)
        goto loc_19de68;
    eax = memoryAGet32(ds, 0x39f0a0);
    sub_19e906();
loc_19de68: // 0160:19de68
    edx = pop32();
    esp += 4;
}
void sub_19de6a() // 0160:19de6a +long
{
    esp -= 4;
    goto loc_19de6a;
loc_19cf93: // 0160:19cf93
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3789 bytes
loc_19de6a: // 0160:19de6a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0;
    memoryASet16(ds, 0x39ef86, dx);
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = 0;
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3792050);
    ecx -= 0x00000004;
    eax += eax;
    esi = memoryAGet32(ds, ebx + 3792050);
    ecx += eax;
    if (stop("postCondition"))
        goto loc_19deb5;
    ecx--;
loc_19deb5: // 0160:19deb5
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, edx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= 0x0000000d;
    esi = ecx;
    ebx = eax;
    eax += 0x00000009;
    ecx += 0x00000009;
    memoryASet32(ds, esp, eax);
loc_19dee2: // 0160:19dee2
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_19df46;
    if (esi >= 0x000003c0)
        goto loc_19df46;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = esi;
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet16(ss, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    ebp &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, esi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_19df46;
    eax = 0x00000001;
    goto loc_19df48;
loc_19df46: // 0160:19df46
    eax = 0;
loc_19df48: // 0160:19df48
    edi |= eax;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_19dfae;
    if (ecx >= 0x000003c0)
        goto loc_19dfae;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet16(ss, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    ebp &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_19dfae;
    eax = 0x00000001;
    goto loc_19dfb0;
loc_19dfae: // 0160:19dfae
    eax = 0;
loc_19dfb0: // 0160:19dfb0
    esi++;
    ebx++;
    edi |= eax;
    eax = memoryAGet32(ds, esp);
    ecx--;
    if (ebx != eax)
        goto loc_19dee2;
    eax = edi;
    goto loc_19cf93;
}
void sub_19dfc7() // 0160:19dfc7 +long
{
    esp -= 4;
    goto loc_19dfc7;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4138 bytes
loc_19dfc7: // 0160:19dfc7
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x39ef98);
    edx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, edx + 3792074);
    if (eax < 0x00000022)
        goto loc_19e065;
    if (eax <= 0x00000022)
        goto loc_19e604;
    if (eax < 0x00000033)
        goto loc_19e02f;
    if (eax <= 0x00000033)
        goto loc_19e3d4;
    if (eax < 0x00000036)
        goto loc_19e021;
    if (eax <= 0x00000036)
        goto loc_19e18e;
    if (eax < 0x00000038)
        goto loc_19cf96;
    if (eax <= 0x00000038)
        goto loc_19e70f;
    if (eax == 0x0000003e)
        goto loc_19e79b;
    goto loc_19cf96;
loc_19e021: // 0160:19e021
    if (eax == 0x00000034)
        goto loc_19e653;
    goto loc_19cf96;
loc_19e02f: // 0160:19e02f
    if (eax < 0x00000027)
        goto loc_19e057;
    if (eax <= 0x00000027)
        goto loc_19e2be;
    if (eax < 0x0000002b)
        goto loc_19cf96;
    if (eax <= 0x0000002b)
        goto loc_19e68f;
    if (eax == 0x0000002f)
        goto loc_19e32e;
    goto loc_19cf96;
loc_19e057: // 0160:19e057
    if (eax == 0x00000024)
        goto loc_19e15e;
    goto loc_19cf96;
loc_19e065: // 0160:19e065
    if (eax < 0x0000000b)
        goto loc_19e0a6;
    if (eax <= 0x0000000b)
        goto loc_19e392;
    if (eax < 0x00000014)
        goto loc_19e098;
    if (eax <= 0x00000014)
        goto loc_19e4f6;
    if (eax < 0x00000019)
        goto loc_19cf96;
    if (eax <= 0x00000019)
        goto loc_19e561;
    if (eax == 0x0000001f)
        goto loc_19e5ac;
    goto loc_19cf96;
loc_19e098: // 0160:19e098
    if (eax == 0x00000010)
        goto loc_19e44f;
    goto loc_19cf96;
loc_19e0a6: // 0160:19e0a6
    if (eax < 0x00000004)
        goto loc_19e0bb;
    if (eax <= 0x00000004)
        goto loc_19e126;
    if (eax == 0x00000006)
        goto loc_19e227;
    goto loc_19cf96;
loc_19e0bb: // 0160:19e0bb
    if (eax)
        goto loc_19cf96;
    if (memoryAGet32(ds, 0x39e742) != 0x00000000)
        goto loc_19cf96;
    eax = ebx * 0x000000ac;
    edx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792010);
    memoryASet32(ds, edx + 3792006, eax);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = 0;
    ecx = 0x0000002b;
    memoryASet32(ds, eax + 3792002, edx);
    sub_19de2c();
    sub_19ce21();
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
loc_19e113: // 0160:19e113
    sub_19ce55();
    edx = eax;
    eax = ecx;
loc_19e11c: // 0160:19e11c
    sub_1b9c1d();
    goto loc_19cf96;
loc_19e126: // 0160:19e126
    esi = memoryAGet32(ds, 0x39e886);
    if (esi)
        goto loc_19cf96;
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x00000005);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792002, esi);
loc_19e154: // 0160:19e154
    sub_19de2c();
    goto loc_19e85b;
loc_19e15e: // 0160:19e15e
    ebp = memoryAGet32(ds, 0x39e886);
    if (ebp)
        goto loc_19cf96;
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x00000025);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792002, ebp);
    goto loc_19e154;
loc_19e18e: // 0160:19e18e
    memoryASet32(ds, edx + 3792006, 0x00000037);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 3792002, esi);
    sub_19de2c();
    edx = memoryAGet32(ds, 0x39ef9c);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    edi = memoryAGet32(ds, 0x39f09c);
    eax += edx;
    eax += edi;
    if (memoryAGet32(ds, stop("GetOpAddress")) != 0x00000000)
        goto loc_19e85b;
    eax = memoryAGet32(ds, 0x39ef98);
    al &= 0xfc;
    edx = eax * 0x000000ac;
    memoryASet32(ds, edx + 3792150, esi);
    edx = eax + 1;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3792150, esi);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3792150, esi);
    ebp = 0x00000096;
    memoryASet32(ds, eax + 3792150, esi);
    memoryASet32(ds, 0x39efbc, ebp);
    goto loc_19e85b;
loc_19e227: // 0160:19e227
    ebp = memoryAGet32(ds, 0x39e742);
    if (ebp)
        goto loc_19cf96;
    edx = ebx * 0x000000ac;
    memoryASet32(ds, 0x39efac, 0x00000011);
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3792010);
    memoryASet32(ds, eax + 3792006, edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792002, ebp);
    eax = memoryAGet32(ds, 0x39f1b8);
    memoryASet32(ds, 0x1dd544, ebp);
    if (eax)
        goto loc_19e285;
    memoryASet32(ds, 0x39f1b8, 0x00000001);
    sub_19de2c();
loc_19e285: // 0160:19e285
    sub_19ce21();
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x39ef98);
    ecx = memoryAGet32(ds, 0x39f1b4);
    memoryASet32(ds, 0x39f1bc, ebx);
    ecx += ebx;
    ebx = 0x000000ff;
    memoryASet32(ds, 0x39f1b4, ecx);
    sub_19ce55();
    edx = eax;
    eax = 0x0000000c;
    goto loc_19e11c;
loc_19e2be: // 0160:19e2be
    if (memoryAGet32(ds, 0x39e742) != 0x00000000)
        goto loc_19cf96;
    eax = ebx * 0x000000ac;
    ebp = 0x00000010;
    memoryASet32(ds, 0x39efac, ebp);
    edx = memoryAGet32(ds, eax + 3792010);
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 3792006, edx);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x39ef98);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = ecx * 0x000000ac;
    edx <<= 4;
    edx += ebp;
    esi = 0x00000054;
    memoryASet32(ds, eax + 3792002, edx);
    edi = 0x000001f4;
    memoryASet32(ds, 0x39f04c, esi);
    memoryASet32(ds, 0x39efc0, edi);
    goto loc_19e154;
loc_19e32e: // 0160:19e32e
    if (memoryAGet32(ds, 0x39e742) != 0x00000000)
        goto loc_19cf96;
    ebp = 0x00000010;
    memoryASet32(ds, 0x39efac, ebp);
    eax = memoryAGet32(ds, edx + 3792010);
    memoryASet32(ds, edx + 3792006, eax);
    edx = eax;
    eax <<= 2;
    eax -= edx;
    ebx = memoryAGet32(ds, 0x39ef98);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = ebx * 0x000000ac;
    edx <<= 4;
    edx += ebp;
    ecx = 0x00000048;
    memoryASet32(ds, eax + 3792002, edx);
    esi = 0x000001f4;
    memoryASet32(ds, 0x39f04c, ecx);
    memoryASet32(ds, 0x39efc0, esi);
    goto loc_19e154;
loc_19e392: // 0160:19e392
    if (memoryAGet32(ds, 0x39e886) != 0x00000000)
        goto loc_19cf96;
    eax = 0x0000000b;
    ecx = 0x00000010;
    esi = 0x00000001;
    sub_1ac14b();
    memoryASet32(ds, 0x39efac, ecx);
    memoryASet32(ds, 0x39f1bc, esi);
    sub_19de2c();
    sub_19ce21();
    memoryASet32(ds, 0x39f0f8, esi);
    goto loc_19cf96;
loc_19e3d4: // 0160:19e3d4
    if (memoryAGet32(ds, 0x39efac) == 0x00000010)
        goto loc_19cf96;
    eax = ebx;
    sub_19ce55();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000026;
    sub_1b9c1d();
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, 0x39f1b0, 0x000000fa);
    edx = memoryAGet32(ds, eax + 3792030);
    ecx = 0x00000001;
    edx -= 0x00000200;
    eax = memoryAGet32(ds, eax + 3792034);
    ebx = 0x00000010;
    sub_1b0956();
    memoryASet32(ds, 0x39efac, ebx);
    memoryASet32(ds, 0x39f1bc, ecx);
    sub_19de2c();
    sub_19ce21();
    memoryASet32(ds, 0x39f0f8, ecx);
    goto loc_19cf96;
loc_19e44f: // 0160:19e44f
    sub_19de2c();
    sub_19ce21();
    eax = 0x00000001;
    edi = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f1a0, eax);
    memoryASet32(ds, 0x39f120, eax);
    eax = edi * 0x000000ac;
    dl = 0x01;
    ebx = 0x00000015;
    ecx = 0;
    memoryASet(ds, 0x3a72a5, dl);
    memoryASet32(ds, 0x39f000, ebx);
    edx = 0x00000011;
    memoryASet32(ds, 0x39f184, ecx);
    memoryASet32(ds, 0x39efac, edx);
    memoryASet32(ds, eax + 3792002, ecx);
    eax = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)eax <= (int32_t)0x00000010)
        goto loc_19e4c3;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x00000013);
    goto loc_19cf96;
loc_19e4c3: // 0160:19e4c3
    if ((int32_t)eax >= (int32_t)0xfffffff0)
        goto loc_19e4e1;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x00000012);
    goto loc_19cf96;
loc_19e4e1: // 0160:19e4e1
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, edx);
    goto loc_19cf96;
loc_19e4f6: // 0160:19e4f6
    sub_19de2c();
    sub_19ce21();
    memoryASet(ds, 0x3a72a5, 0x01);
    eax = 0x00000015;
    ecx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f000, eax);
    eax = ecx * 0x000000ac;
    edi = 0x00000001;
    ebp = 0x00000011;
    esi = 0x00000015;
    edx = 0;
    memoryASet32(ds, 0x39f1a0, edi);
    memoryASet32(ds, 0x39efac, ebp);
    memoryASet32(ds, 0x39f184, edx);
    memoryASet32(ds, 0x39f120, edi);
    memoryASet32(ds, eax + 3792006, esi);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792002, edx);
    goto loc_19cf96;
loc_19e561: // 0160:19e561
    memoryASet32(ds, 0x39f0fc, 0x00000001);
    sub_19de2c();
    sub_19ce21();
    eax = 0x00000011;
    edx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39efac, eax);
    eax = edx * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792002, ebx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x0000001a);
    goto loc_19cf96;
loc_19e5ac: // 0160:19e5ac
    sub_19de2c();
    sub_19ce21();
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    esi = 0x00000011;
    ebp = 0;
    memoryASet32(ds, 0x39efac, esi);
    memoryASet32(ds, eax + 3792002, ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = 0x00000020;
    ecx = 0x00000001;
    memoryASet32(ds, eax + 3792006, ebx);
    memoryASet32(ds, 0x39f1a0, ecx);
    memoryASet32(ds, 0x39f034, ebp);
    memoryASet32(ds, 0x39f038, ebp);
    goto loc_19cf96;
loc_19e604: // 0160:19e604
    sub_19de2c();
    sub_19ce21();
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edi = 0x00000011;
    edx = 0;
    memoryASet32(ds, 0x39efac, edi);
    memoryASet32(ds, eax + 3792002, edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x00000023);
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x39ef98);
    ecx = 0x00000016;
    goto loc_19e113;
loc_19e653: // 0160:19e653
    sub_19ce21();
    eax = 0x00000011;
    edx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39efac, eax);
    eax = edx * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792002, ebx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x00000035);
    goto loc_19cf96;
loc_19e68f: // 0160:19e68f
    edi = memoryAGet32(ds, 0x39e742);
    if (edi)
        goto loc_19cf96;
    sub_19de2c();
    sub_19ce21();
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792010);
    memoryASet32(ds, eax + 3792006, edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792002, edi);
    edx = memoryAGet32(ds, 0x39efac);
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x39f06c, 0x00000004);
    memoryASet32(ds, 0x39f074, edi);
    memoryASet32(ds, 0x39f070, eax);
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000002b;
    goto loc_19e11c;
loc_19e70f: // 0160:19e70f
    if (memoryAGet32(ds, 0x1df9f8) != 0x00000000)
        goto loc_19e783;
    sub_19de6a();
    if (eax)
        goto loc_19e783;
    edi = 0x00000001;
    ebp = 0x00000010;
    eax = 0x00000038;
    memoryASet32(ds, 0x39f060, edi);
    memoryASet32(ds, 0x39efac, ebp);
    sub_1ad6ac();
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f230, eax);
    eax = edx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792026);
    memoryASet32(ds, 0x39f0c0, edx);
    eax = memoryAGet32(ds, eax + 3792030);
    eax -= 0x00000800;
    memoryASet32(ds, 0x39f0c8, edx);
    memoryASet32(ds, 0x39f0c4, eax);
    memoryASet32(ds, 0x39f0cc, eax);
    goto loc_19cf96;
loc_19e783: // 0160:19e783
    ecx = 0x00000010;
    esi = 0;
    memoryASet32(ds, 0x39efac, ecx);
    memoryASet32(ds, 0x39f0bc, esi);
    goto loc_19cf96;
loc_19e79b: // 0160:19e79b
    esi = 0x00000001;
    eax = ebx;
    ebp = 0x00000010;
    sub_19ce55();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000026;
    ecx = 0;
    sub_1b9c1d();
    sub_1b2706();
    memoryASet32(ds, 0x39eff4, ecx);
    memoryASet32(ds, 0x39f234, esi);
    memoryASet32(ds, 0x39f1ac, ecx);
    memoryASet32(ds, 0x39efac, ebp);
    memoryASet32(ds, 0x39f0f8, esi);
    memoryASet32(ds, 0x39f0bc, esi);
    sub_19de2c();
    edx = memoryAGet32(ds, 0x39ef9c);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, 0x39f09c);
    eax += edx;
    eax += ebx;
    stop("disassembly failed at 160:19e80f sete al");
    eax &= 0x000000ff;
    if (!eax)
        goto loc_19e85b;
    eax = memoryAGet32(ds, 0x39ef98);
    al &= 0xfc;
    edx = eax * 0x000000ac;
    esi = 0;
    memoryASet32(ds, edx + 3792154, esi);
    edx = eax + 1;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3792154, esi);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3792154, esi);
    memoryASet32(ds, eax + 3792154, esi);
loc_19e85b: // 0160:19e85b
    sub_19ce21();
    goto loc_19cf96;
}
void sub_19e865() // 0160:19e865 +long
{
    esp -= 4;
    goto loc_19e865;
loc_19cf97: // 0160:19cf97
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6344 bytes
loc_19e865: // 0160:19e865
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = memoryAGet32(ds, 0x39ef9c);
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 2;
    edx = memoryAGet32(ds, 0x39f09c);
    esi += ebx;
    eax += memoryAGet32(ds, stop("GetOpAddress"));
    ebx = edx + esi;
    ebx <<= 2;
    edx = eax + 1;
    edi = memoryAGet32(ds, ebx + 3795258);
    ecx = eax + 2;
    if (edi)
        goto loc_19e8ad;
    memoryASet(ds, eax, 0x28);
    memoryASet(ds, edx, 0x30);
    memoryASet(ds, ecx, 0x29);
    goto loc_19cf97;
loc_19e8ad: // 0160:19e8ad
    if (edi != 0xffffffff)
        goto loc_19e8c0;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, edx, 0x20);
    memoryASet(ds, ecx, 0x20);
    goto loc_19cf97;
loc_19e8c0: // 0160:19e8c0
    memoryASet(ds, eax, 0x28);
    eax = edx;
    edx = memoryAGet32(ds, 0x39f09c);
    edx += esi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    if ((int32_t)edx <= (int32_t)0x00000009)
        goto loc_19e8de;
    edx = 0x00000009;
loc_19e8de: // 0160:19e8de
    dl += 0x30;
    memoryASet(ds, eax, dl);
    eax++;
    memoryASet(ds, eax, 0x29);
    goto loc_19cf97;
}
void sub_19e8ec() // 0160:19e8ec +long
{
    esp -= 4;
    push32(ecx);
    if (memoryAGet32(ds, 0x1dfc80) != 0x00000000)
        goto loc_19e904;
    ecx = ebx;
    ebx = edx;
    edx = 0x002032c8;
    sub_197391();
loc_19e904: // 0160:19e904
    ecx = pop32();
    esp += 4;
}
void sub_19e906() // 0160:19e906 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x1dfc80) != 0x00000000)
        goto loc_19e926;
    edx = 0x002032c8;
    ebx = 0x000000c8;
    sub_19731d();
    memoryASet32(ds, 0x39bdd4, ebx);
loc_19e926: // 0160:19e926
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e929() // 0160:19e929 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_19e93d;
    if (eax != 0x001d2821)
        goto loc_19e968;
loc_19e93d: // 0160:19e93d
    edx = 0x002032c8;
    ebx = 0x00001400;
    ecx = 0x00000190;
    esi = 0x00000001;
    sub_19731d();
    memoryASet32(ds, 0x39bddc, ebx);
    memoryASet32(ds, 0x39bdd4, ecx);
    memoryASet32(ds, 0x39bdc4, esi);
loc_19e968: // 0160:19e968
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e96d() // 0160:19e96d +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    edx = eax;
    edi = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    eax += 0x00000030;
    memoryASet(ds, esi + ebx, al);
    eax = esi;
    sub_19e929();
    memoryASet32(ds, 0x39efbc, ecx);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19e997() // 0160:19e997 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
    edx = ebx;
    if (!eax)
        goto loc_19e9b6;
    eax = 0;
loc_19e9a5: // 0160:19e9a5
    bl = memoryAGet(ds, eax + 1912949);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if ((int32_t)eax >= (int32_t)0x0000000c)
        goto loc_19e9c5;
    goto loc_19e9a5;
loc_19e9b6: // 0160:19e9b6
    bl = memoryAGet(ds, eax + 1912962);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if ((int32_t)eax < (int32_t)0x0000000c)
        goto loc_19e9b6;
loc_19e9c5: // 0160:19e9c5
    eax = esi;
    sub_19e929();
    memoryASet32(ds, 0x39f0b8, ecx);
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19e9d5() // 0160:19e9d5 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (edx == 0x0000003f)
        goto loc_19e9e7;
    edi = 0;
    memoryASet32(ds, 0x39f064, edi);
loc_19e9e7: // 0160:19e9e7
    if (edx == 0x00000038)
        goto loc_19e9f4;
    ebp = 0;
    memoryASet32(ds, 0x39f060, ebp);
loc_19e9f4: // 0160:19e9f4
    eax = 0;
    edi = 0;
    memoryASet32(ds, 0x39f0ec, eax);
    memoryASet32(ds, 0x39f1a4, eax);
    memoryASet32(ds, 0x39f004, eax);
    memoryASet32(ds, 0x39f098, eax);
    memoryASet32(ds, 0x39f258, edi);
    memoryASet32(ds, 0x39f020, edi);
    memoryASet32(ds, 0x39f0b0, edi);
    eax = 0x000003c0;
    edi = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f050, eax);
    eax = edi * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, 0x39efe8, ebp);
    memoryASet32(ds, 0x39eff4, ebp);
    memoryASet32(ds, eax + 3792114, esi);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792074, edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792122, 0x00000001);
    if (stop("postCondition"))
        goto loc_19ea86;
    memoryASet32(ds, 0x39f09c, ebx);
    eax = ecx;
    memoryASet32(ds, 0x39f0a0, ecx);
    sub_19e865();
loc_19ea86: // 0160:19ea86
    if (memoryAGet32(ds, 0x39f1a8) != 0x00000000)
        goto loc_19eaad;
    if (memoryAGet32(ds, 0x1dfc80) != 0x00000000)
        goto loc_19eaad;
    eax = ecx;
    sub_19e906();
    memoryASet32(ds, 0x39bdd4, 0xffffffff);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_19eaad: // 0160:19eaad
    ebx = 0xffffffff;
    eax = ecx;
    edx = 0;
    sub_19e8ec();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_19eabf() // 0160:19eabf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d284a;
    eax = 0x00000032;
    ebx = 0;
    edx = 0;
    goto loc_19eb43;
    // gap 113 bytes
loc_19eb43: // 0160:19eb43
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ead2() // 0160:19ead2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x001d288c;
    edx = 0x001d2873;
    eax = memoryAGet32(ds, 0x39f0b8);
    sub_19e997();
    ebx = 0x0000000f;
    edx = 0x001d2873;
    eax = memoryAGet32(ds, 0x39efbc);
    ecx = 0x001d2873;
    sub_19e96d();
    ebx = 0x00000002;
    edx = 0x00000004;
    eax = 0x00000032;
    goto loc_19eb43;
    // gap 48 bytes
loc_19eb43: // 0160:19eb43
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19eb13() // 0160:19eb13 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d289c;
    ebx = 0x00000004;
    edx = 0x00000006;
    eax = 0x00000019;
    goto loc_19eb43;
    // gap 23 bytes
loc_19eb43: // 0160:19eb43
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19eb2c() // 0160:19eb2c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d28c5;
    ebx = 0x00000008;
    edx = 0x0000000b;
    eax = 0x0000004b;
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19eb4c() // 0160:19eb4c +long
{
    esp -= 4;
    goto loc_19eb4c;
loc_19eb3e: // 0160:19eb3e
    eax = 0x0000004b;
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19eb4c: // 0160:19eb4c
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2bf9;
    ebx = 0x00000013;
    edx = 0x0000003e;
    goto loc_19eb3e;
}
void sub_19eb60() // 0160:19eb60 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792154) == 0x00000000)
        goto loc_19eb7f;
    sub_19eb4c();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19eb7f: // 0160:19eb7f
    ecx = 0x001d2b03;
    ebx = 0x00000009;
    edx = 0x00000033;
    eax = 0x0000004b;
    goto loc_19ec4a;
    // gap 178 bytes
loc_19ec4a: // 0160:19ec4a
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19eb98() // 0160:19eb98 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d28ee;
    ebx = 0x0000000c;
    edx = 0x00000010;
    eax = 0x0000000f;
    sub_19e9d5();
    edx = 0;
    memoryASet32(ds, 0x39efb8, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ebc0() // 0160:19ebc0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2917;
    ebx = 0x0000000d;
    edx = 0x00000014;
    eax = 0x0000000f;
    goto loc_19ec4a;
    // gap 113 bytes
loc_19ec4a: // 0160:19ec4a
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ebd9() // 0160:19ebd9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2940;
    ebx = 0x0000000b;
    edx = 0x00000016;
    eax = 0;
    sub_19e9d5();
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x39f250);
    ecx = 0;
    eax += 0x00000280;
    memoryASet32(ds, 0x39f004, edx);
    memoryASet32(ds, 0x39f0b0, edx);
    memoryASet32(ds, 0x39f008, eax);
    eax = memoryAGet32(ds, 0x39f254);
    memoryASet32(ds, 0x39f040, ecx);
    eax += 0x00000140;
    memoryASet32(ds, 0x39f044, ecx);
    memoryASet32(ds, 0x39f00c, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ec33() // 0160:19ec33 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2969;
    ebx = 0x00000006;
    edx = 0x00000019;
    eax = 0x0000001e;
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ec53() // 0160:19ec53 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2992;
    ebx = 0x00000011;
    edx = 0x0000001f;
    eax = 0x00000032;
    sub_19e9d5();
    edx = 0;
    memoryASet32(ds, 0x39f034, edx);
    memoryASet32(ds, 0x39f038, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ec81() // 0160:19ec81 +long
{
    esp -= 4;
    goto loc_19ec81;
loc_19ec45: // 0160:19ec45
    eax = 0x0000001e;
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 46 bytes
loc_19ec81: // 0160:19ec81
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d29bb;
    ebx = 0x00000007;
    edx = 0x00000022;
    goto loc_19ec45;
}
void sub_19ec95() // 0160:19ec95 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792150) == 0x00000000)
        goto loc_19ecb4;
    sub_19ecf9();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19ecb4: // 0160:19ecb4
    ebx = 0x001d2a00;
    edx = 0x001d29e4;
    eax = memoryAGet32(ds, 0x39f0b8);
    sub_19e997();
    ebx = 0x00000012;
    edx = 0x001d29e4;
    eax = memoryAGet32(ds, 0x39efbc);
    ecx = 0x001d29e4;
    sub_19e96d();
    ebx = 0x00000003;
    edx = 0x00000024;
    eax = 0x0000001e;
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ecf9() // 0160:19ecf9 +long
{
    esp -= 4;
    goto loc_19ecf9;
loc_19ecf0: // 0160:19ecf0
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19ecf9: // 0160:19ecf9
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x001d2a29;
    edx = 0x001d2a0d;
    eax = memoryAGet32(ds, 0x39f0b8);
    sub_19e997();
    ebx = 0x00000012;
    edx = 0x001d2a0d;
    eax = memoryAGet32(ds, 0x39efbc);
    ecx = 0x001d2a0d;
    sub_19e96d();
    ebx = 0x00000014;
    edx = 0x00000036;
    eax = 0x00000032;
    goto loc_19ecf0;
}
void sub_19ed3a() // 0160:19ed3a +long
{
    esp -= 4;
    goto loc_19ed3a;
loc_19ec2a: // 0160:19ec2a
    memoryASet32(ds, 0x39f00c, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 263 bytes
loc_19ed3a: // 0160:19ed3a
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2a36;
    ebx = 0x0000000a;
    edx = 0x00000026;
    eax = 0x0000001e;
    sub_19e9d5();
    eax = memoryAGet32(ds, 0x39f250);
    eax += 0x00000280;
    memoryASet32(ds, 0x39f008, eax);
    eax = memoryAGet32(ds, 0x39f254);
    edx = 0x00000001;
    eax += 0x00000140;
    memoryASet32(ds, 0x39f004, edx);
    goto loc_19ec2a;
}
void sub_19ed7f() // 0160:19ed7f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792146) == 0x00000000)
        goto loc_19ed9e;
    sub_19edc0();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19ed9e: // 0160:19ed9e
    ecx = 0x001d2a5f;
    ebx = 0x00000005;
    edx = 0x00000027;
    eax = ebx;
    sub_19e9d5();
    ecx = 0;
    memoryASet32(ds, 0x39f07c, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19edc0() // 0160:19edc0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2ada;
    ebx = 0x00000012;
    edx = 0x0000002f;
    eax = 0x00000005;
    sub_19e9d5();
    edx = 0;
    memoryASet32(ds, 0x39f07c, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ede7() // 0160:19ede7 +long
{
    esp -= 4;
    esp += 4;
}
void sub_19ede8() // 0160:19ede8 +long
{
    esp -= 4;
    goto loc_19ede8;
loc_19ec2a: // 0160:19ec2a
    memoryASet32(ds, 0x39f00c, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 437 bytes
loc_19ede8: // 0160:19ede8
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2ab1;
    ebx = 0x00000001;
    edx = 0x0000002b;
    eax = 0x00000032;
    sub_19e9d5();
    eax = memoryAGet32(ds, 0x39f250);
    edx = 0x00000001;
    eax += 0x00000280;
    ebx = 0;
    memoryASet32(ds, 0x39f008, eax);
    eax = memoryAGet32(ds, 0x39f254);
    memoryASet32(ds, 0x39f004, edx);
    eax += 0x00000150;
    memoryASet32(ds, 0x39f050, ebx);
    goto loc_19ec2a;
}
void sub_19ee35() // 0160:19ee35 +long
{
    esp -= 4;
    goto loc_19ee35;
loc_19ec2a: // 0160:19ec2a
    memoryASet32(ds, 0x39f00c, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 514 bytes
loc_19ee35: // 0160:19ee35
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000004;
    ecx = 0x001d2a88;
    ebx = 0x00000010;
    memoryASet32(ds, 0x39f094, edx);
    sub_19cdc5();
    edx = 0x00000014;
    eax = 0;
    sub_19e9d5();
    eax = memoryAGet32(ds, 0x39f250);
    ebx = 0x00000001;
    eax += 0x00000280;
    memoryASet32(ds, 0x39f004, ebx);
    memoryASet32(ds, 0x39f008, eax);
    eax = memoryAGet32(ds, 0x39f254);
    memoryASet32(ds, 0x39f098, ebx);
    eax += 0x00000150;
    memoryASet32(ds, 0x39f0ec, ebx);
    goto loc_19ec2a;
}
void sub_19ee93() // 0160:19ee93 +long
{
    esp -= 4;
    goto loc_19ee93;
loc_19ecf0: // 0160:19ecf0
    sub_19e9d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 410 bytes
loc_19ee93: // 0160:19ee93
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2b7e;
    ebx = 0xffffffff;
    edx = 0x00000034;
    eax = 0;
    goto loc_19ecf0;
}
void sub_19eeac() // 0160:19eeac +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2ba7;
    ebx = 0xffffffff;
    edx = 0x0000003d;
    eax = 0;
    sub_19e9d5();
    memoryASet32(ds, 0x39f1a4, 0x00000001);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19eed3() // 0160:19eed3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d2bd0;
    ebx = 0xffffffff;
    edx = 0x0000003d;
    eax = 0;
    sub_19e9d5();
    memoryASet32(ds, 0x39f1a4, 0x00000002);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19eefa() // 0160:19eefa +long
{
    esp -= 4;
    goto loc_19eefa;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8029 bytes
loc_19eefa: // 0160:19eefa
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, 0x39f124, edx);
    if (memoryAGet32(ds, eax + 3792074) != 0x00000004)
        goto loc_19efe7;
    if (memoryAGet(ds, 0x3a726e) == 0x00)
        goto loc_19ef3c;
    ebx = 0x0000000f;
    edx = 0x001d2873;
    eax = 0x00000032;
    sub_19e96d();
loc_19ef3c: // 0160:19ef3c
    if (memoryAGet(ds, 0x3a726f) == 0x00)
        goto loc_19ef59;
    ebx = 0x0000000f;
    edx = 0x001d2873;
    eax = 0x00000064;
    sub_19e96d();
loc_19ef59: // 0160:19ef59
    if (memoryAGet(ds, 0x3a7270) == 0x00)
        goto loc_19ef76;
    ebx = 0x0000000f;
    edx = 0x001d2873;
    eax = 0x00000096;
    sub_19e96d();
loc_19ef76: // 0160:19ef76
    if (memoryAGet(ds, 0x3a7271) == 0x00)
        goto loc_19ef93;
    ebx = 0x0000000f;
    edx = 0x001d2873;
    eax = 0x000000c8;
    sub_19e96d();
loc_19ef93: // 0160:19ef93
    if (memoryAGet(ds, 0x3a7272) == 0x00)
        goto loc_19efb0;
    ebx = 0x0000000f;
    edx = 0x001d2873;
    eax = 0x000000fa;
    sub_19e96d();
loc_19efb0: // 0160:19efb0
    if (memoryAGet(ds, 0x3a7278) == 0x00)
        goto loc_19efcd;
    ebx = 0x001d288c;
    edx = 0x001d2873;
    eax = 0x00000001;
    sub_19e997();
loc_19efcd: // 0160:19efcd
    if (memoryAGet(ds, 0x3a7279) == 0x00)
        goto loc_19efe7;
    ebx = 0x001d288c;
    edx = 0x001d2873;
    eax = 0;
    sub_19e997();
loc_19efe7: // 0160:19efe7
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000024)
        goto loc_19f0c6;
    if (memoryAGet(ds, 0x3a726e) == 0x00)
        goto loc_19f01b;
    ebx = 0x00000012;
    edx = 0x001d29e4;
    eax = 0x00000032;
    sub_19e96d();
loc_19f01b: // 0160:19f01b
    if (memoryAGet(ds, 0x3a726f) == 0x00)
        goto loc_19f038;
    ebx = 0x00000012;
    edx = 0x001d29e4;
    eax = 0x00000064;
    sub_19e96d();
loc_19f038: // 0160:19f038
    if (memoryAGet(ds, 0x3a7270) == 0x00)
        goto loc_19f055;
    ebx = 0x00000012;
    edx = 0x001d29e4;
    eax = 0x00000096;
    sub_19e96d();
loc_19f055: // 0160:19f055
    if (memoryAGet(ds, 0x3a7271) == 0x00)
        goto loc_19f072;
    ebx = 0x00000012;
    edx = 0x001d29e4;
    eax = 0x000000c8;
    sub_19e96d();
loc_19f072: // 0160:19f072
    if (memoryAGet(ds, 0x3a7272) == 0x00)
        goto loc_19f08f;
    ebx = 0x00000012;
    edx = 0x001d29e4;
    eax = 0x000000fa;
    sub_19e96d();
loc_19f08f: // 0160:19f08f
    if (memoryAGet(ds, 0x3a7278) == 0x00)
        goto loc_19f0ac;
    ebx = 0x001d2a00;
    edx = 0x001d29e4;
    eax = 0x00000001;
    sub_19e997();
loc_19f0ac: // 0160:19f0ac
    if (memoryAGet(ds, 0x3a7279) == 0x00)
        goto loc_19f0c6;
    ebx = 0x001d2a00;
    edx = 0x001d29e4;
    eax = 0;
    sub_19e997();
loc_19f0c6: // 0160:19f0c6
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000036)
        goto loc_19f1a5;
    if (memoryAGet(ds, 0x3a726e) == 0x00)
        goto loc_19f0fa;
    ebx = 0x00000012;
    edx = 0x001d2a0d;
    eax = 0x00000032;
    sub_19e96d();
loc_19f0fa: // 0160:19f0fa
    if (memoryAGet(ds, 0x3a726f) == 0x00)
        goto loc_19f117;
    ebx = 0x00000012;
    edx = 0x001d2a0d;
    eax = 0x00000064;
    sub_19e96d();
loc_19f117: // 0160:19f117
    if (memoryAGet(ds, 0x3a7270) == 0x00)
        goto loc_19f134;
    ebx = 0x00000012;
    edx = 0x001d2a0d;
    eax = 0x00000096;
    sub_19e96d();
loc_19f134: // 0160:19f134
    if (memoryAGet(ds, 0x3a7271) == 0x00)
        goto loc_19f151;
    ebx = 0x00000012;
    edx = 0x001d2a0d;
    eax = 0x000000c8;
    sub_19e96d();
loc_19f151: // 0160:19f151
    if (memoryAGet(ds, 0x3a7272) == 0x00)
        goto loc_19f16e;
    ebx = 0x00000012;
    edx = 0x001d2a0d;
    eax = 0x000000fa;
    sub_19e96d();
loc_19f16e: // 0160:19f16e
    if (memoryAGet(ds, 0x3a7278) == 0x00)
        goto loc_19f18b;
    ebx = 0x001d2a29;
    edx = 0x001d2a0d;
    eax = 0x00000001;
    sub_19e997();
loc_19f18b: // 0160:19f18b
    if (memoryAGet(ds, 0x3a7279) == 0x00)
        goto loc_19f1a5;
    ebx = 0x001d2a29;
    edx = 0x001d2a0d;
    eax = 0;
    sub_19e997();
loc_19f1a5: // 0160:19f1a5
    if (memoryAGet(ds, 0x3a72a7) == 0x00)
        goto loc_19f1f2;
    ebx = 0x0000003b;
    ecx = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, ebx);
    if (ecx == ebx)
        goto loc_19f1f2;
    if (ebx != memoryAGet32(ds, 0x39f12c))
        goto loc_19f1d2;
    memoryASet(ds, 0x39f144, memoryAGet(ds, 0x39f144) ^ 0x01);
loc_19f1d2: // 0160:19f1d2
    eax = memoryAGet32(ds, 0x39f124);
    edi = memoryAGet32(ds, 0x39f144);
    memoryASet32(ds, 0x39f12c, eax);
    if (edi)
        goto loc_19f1ed;
    sub_19eabf();
    goto loc_19f1f2;
loc_19f1ed: // 0160:19f1ed
    sub_19ede8();
loc_19f1f2: // 0160:19f1f2
    if (memoryAGet(ds, 0x3a72a8) == 0x00)
        goto loc_19f23e;
    ebp = 0x0000003c;
    eax = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, ebp);
    if (eax == ebp)
        goto loc_19f23e;
    if (ebp != memoryAGet32(ds, 0x39f12c))
        goto loc_19f21e;
    memoryASet(ds, 0x39f148, memoryAGet(ds, 0x39f148) ^ 0x01);
loc_19f21e: // 0160:19f21e
    eax = memoryAGet32(ds, 0x39f124);
    ebx = memoryAGet32(ds, 0x39f148);
    memoryASet32(ds, 0x39f12c, eax);
    if (ebx)
        goto loc_19f239;
    sub_19ead2();
    goto loc_19f23e;
loc_19f239: // 0160:19f239
    sub_19ec95();
loc_19f23e: // 0160:19f23e
    if (memoryAGet(ds, 0x3a72a9) == 0x00)
        goto loc_19f28b;
    ecx = 0x0000003d;
    esi = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, ecx);
    if (esi == ecx)
        goto loc_19f28b;
    if (ecx != memoryAGet32(ds, 0x39f12c))
        goto loc_19f26b;
    memoryASet(ds, 0x39f14c, memoryAGet(ds, 0x39f14c) ^ 0x01);
loc_19f26b: // 0160:19f26b
    eax = memoryAGet32(ds, 0x39f124);
    ebp = memoryAGet32(ds, 0x39f14c);
    memoryASet32(ds, 0x39f12c, eax);
    if (ebp)
        goto loc_19f286;
    sub_19eb13();
    goto loc_19f28b;
loc_19f286: // 0160:19f286
    sub_19ed7f();
loc_19f28b: // 0160:19f28b
    if (memoryAGet(ds, 0x3a72aa) == 0x00)
        goto loc_19f2d7;
    eax = 0x0000003e;
    edx = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, eax);
    if (edx == eax)
        goto loc_19f2d7;
    if (eax != memoryAGet32(ds, 0x39f12c))
        goto loc_19f2b7;
    memoryASet(ds, 0x39f150, memoryAGet(ds, 0x39f150) ^ 0x01);
loc_19f2b7: // 0160:19f2b7
    eax = memoryAGet32(ds, 0x39f124);
    ecx = memoryAGet32(ds, 0x39f150);
    memoryASet32(ds, 0x39f12c, eax);
    if (ecx)
        goto loc_19f2d2;
    sub_19ec33();
    goto loc_19f2d7;
loc_19f2d2: // 0160:19f2d2
    sub_19ec81();
loc_19f2d7: // 0160:19f2d7
    if (memoryAGet(ds, 0x3a72ab) == 0x00)
        goto loc_19f323;
    esi = 0x0000003f;
    edi = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, esi);
    if (edi == esi)
        goto loc_19f323;
    if (esi != memoryAGet32(ds, 0x39f12c))
        goto loc_19f304;
    memoryASet(ds, 0x39f154, memoryAGet(ds, 0x39f154) ^ 0x01);
loc_19f304: // 0160:19f304
    eax = memoryAGet32(ds, 0x39f124);
    memoryASet32(ds, 0x39f12c, eax);
    if (memoryAGet32(ds, 0x39f154) != 0x00000000)
        goto loc_19f31e;
    sub_19eb2c();
    goto loc_19f323;
loc_19f31e: // 0160:19f31e
    sub_19eb60();
loc_19f323: // 0160:19f323
    if (memoryAGet(ds, 0x3a72ac) == 0x00)
        goto loc_19f370;
    edx = 0x00000040;
    ebx = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, edx);
    if (ebx == edx)
        goto loc_19f370;
    if (edx != memoryAGet32(ds, 0x39f12c))
        goto loc_19f350;
    memoryASet(ds, 0x39f158, memoryAGet(ds, 0x39f158) ^ 0x01);
loc_19f350: // 0160:19f350
    eax = memoryAGet32(ds, 0x39f124);
    esi = memoryAGet32(ds, 0x39f158);
    memoryASet32(ds, 0x39f12c, eax);
    if (esi)
        goto loc_19f36b;
    sub_19ed3a();
    goto loc_19f370;
loc_19f36b: // 0160:19f36b
    sub_19ebd9();
loc_19f370: // 0160:19f370
    if (memoryAGet(ds, 0x3a72ad) == 0x00)
        goto loc_19f3bd;
    edi = 0x00000041;
    ebp = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, edi);
    if (ebp == edi)
        goto loc_19f3bd;
    if (edi != memoryAGet32(ds, 0x39f12c))
        goto loc_19f39d;
    memoryASet(ds, 0x39f15c, memoryAGet(ds, 0x39f15c) ^ 0x01);
loc_19f39d: // 0160:19f39d
    eax = memoryAGet32(ds, 0x39f124);
    edx = memoryAGet32(ds, 0x39f15c);
    memoryASet32(ds, 0x39f12c, eax);
    if (edx)
        goto loc_19f3b8;
    sub_19eb98();
    goto loc_19f3bd;
loc_19f3b8: // 0160:19f3b8
    sub_19ebc0();
loc_19f3bd: // 0160:19f3bd
    if (memoryAGet(ds, 0x3a72ae) == 0x00)
        goto loc_19f3fc;
    ebx = 0x00000042;
    ecx = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, ebx);
    if (ecx == ebx)
        goto loc_19f3fc;
    if (ebx != memoryAGet32(ds, 0x39f12c))
        goto loc_19f3ea;
    memoryASet(ds, 0x39f160, memoryAGet(ds, 0x39f160) ^ 0x01);
loc_19f3ea: // 0160:19f3ea
    eax = memoryAGet32(ds, 0x39f124);
    edi = memoryAGet32(ds, 0x39f160);
    memoryASet32(ds, 0x39f12c, eax);
loc_19f3fc: // 0160:19f3fc
    if (memoryAGet(ds, 0x3a72af) == 0x00)
        goto loc_19f448;
    ebp = 0x00000043;
    eax = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, ebp);
    if (eax == ebp)
        goto loc_19f448;
    if (ebp != memoryAGet32(ds, 0x39f12c))
        goto loc_19f428;
    memoryASet(ds, 0x39f164, memoryAGet(ds, 0x39f164) ^ 0x01);
loc_19f428: // 0160:19f428
    eax = memoryAGet32(ds, 0x39f124);
    ebx = memoryAGet32(ds, 0x39f164);
    memoryASet32(ds, 0x39f12c, eax);
    if (ebx)
        goto loc_19f443;
    sub_19ee35();
    goto loc_19f448;
loc_19f443: // 0160:19f443
    sub_19eeac();
loc_19f448: // 0160:19f448
    if (memoryAGet(ds, 0x3a72b0) == 0x00)
        goto loc_19f495;
    ecx = 0x00000044;
    esi = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, ecx);
    if (esi == ecx)
        goto loc_19f495;
    if (ecx != memoryAGet32(ds, 0x39f12c))
        goto loc_19f475;
    memoryASet(ds, 0x39f168, memoryAGet(ds, 0x39f168) ^ 0x01);
loc_19f475: // 0160:19f475
    eax = memoryAGet32(ds, 0x39f124);
    ebp = memoryAGet32(ds, 0x39f168);
    memoryASet32(ds, 0x39f12c, eax);
    if (ebp)
        goto loc_19f490;
    sub_19ec53();
    goto loc_19f495;
loc_19f490: // 0160:19f490
    sub_19eed3();
loc_19f495: // 0160:19f495
    if (memoryAGet(ds, 0x3a72c3) == 0x00)
        goto loc_19f4d0;
    eax = 0x00000057;
    edx = memoryAGet32(ds, 0x39f128);
    memoryASet32(ds, 0x39f124, eax);
    if (edx == eax)
        goto loc_19f4d0;
    if (eax != memoryAGet32(ds, 0x39f12c))
        goto loc_19f4c1;
    memoryASet(ds, 0x39f170, memoryAGet(ds, 0x39f170) ^ 0x01);
loc_19f4c1: // 0160:19f4c1
    eax = memoryAGet32(ds, 0x39f124);
    memoryASet32(ds, 0x39f12c, eax);
    sub_19ee93();
loc_19f4d0: // 0160:19f4d0
    edx = memoryAGet32(ds, 0x39ef9c);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x39f09c);
    eax += edx;
    eax += ecx;
    esi = memoryAGet32(ds, stop("GetOpAddress"));
    if (esi)
        goto loc_19f4fb;
    memoryASet32(ds, 0x39f004, esi);
loc_19f4fb: // 0160:19f4fb
    eax = memoryAGet32(ds, 0x39f124);
    memoryASet32(ds, 0x39f128, eax);
    goto loc_19cf96;
}
void sub_19f50a() // 0160:19f50a +long
{
    esp -= 4;
    goto loc_19f50a;
loc_19cf97: // 0160:19cf97
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3685 bytes
loc_19de02: // 0160:19de02
    sub_1b9c1d();
    goto loc_19cf97;
    // gap 5886 bytes
loc_19f50a: // 0160:19f50a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    ecx = eax * 0x000000ac;
    memoryASet32(ds, 0x39efe8, 0x00000001);
    if (memoryAGet32(ds, ecx + 3792062) != 0x00000042)
        goto loc_19cf97;
    eax = memoryAGet32(ds, ecx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, ecx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_1aac75();
    if (eax)
        goto loc_19f5a4;
    eax = memoryAGet32(ds, ecx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -8;
    eax = memoryAGet32(ds, ecx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_1aac75();
    if (eax)
        goto loc_19f5a4;
    memoryASet32(ds, ecx + 3792030, memoryAGet32(ds, ecx + 3792030) - 0x00000800);
loc_19f5a4: // 0160:19f5a4
    ecx = esi * 0x000000ac;
    if (memoryAGet32(ds, ecx + 3792050) != 0x00000000)
        goto loc_19f5bd;
    memoryASet32(ds, ecx + 3792050, 0xffffffff);
loc_19f5bd: // 0160:19f5bd
    ecx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 3792050);
    memoryASet32(ds, ecx + 3792054, eax);
    eax = eax * 0x000001e6;
    ebx = 0xfffffc01;
    edi = 0x00000001;
    memoryASet32(ds, ecx + 3792022, ebx);
    edx = edi;
    memoryASet32(ds, ecx + 3792018, eax);
    eax = esi;
    memoryASet32(ds, ecx + 3792066, edi);
    sub_19ce55();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1a9cc8();
    eax += 0x00000020;
    edx = ecx;
    goto loc_19de02;
}
void sub_19f612() // 0160:19f612 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ebp = eax;
    memoryASet32(ds, esp + 12, edx);
    ebx = edx * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, ebx + 3792050);
    esi = eax;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_19f664;
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_19f66c;
loc_19f664: // 0160:19f664
    memoryASet32(ds, esp + 20, 0xffffffff);
loc_19f66c: // 0160:19f66c
    cl = memoryAGet(ds, esp + 12);
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x39ef86, ax);
    eax = 0;
    edx = esi;
    ax = memoryAGet16(ds, 0x39ef86);
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 24, eax);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    ebx = 0x00239808;
    eax -= edx;
    edx = edi;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    ebx += eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 20);
    ecx = eax + eax;
    edx <<= 2;
    eax = ebx + ecx;
    memoryASet32(ds, esp, edx);
    dx = memoryAGet16(ds, edx + eax);
    edx &= 0x0000ffff;
    ax = memoryAGet16(ds, eax);
    eax &= 0x0000ffff;
    ebx = memoryAGet32(ds, esp + 24);
    eax |= edx;
    edx = esi + -8;
    ebx &= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    eax += 0x00239808;
    eax += ecx;
    eax += memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, eax);
    edx = memoryAGet32(ds, esp + 24);
    eax &= 0x0000ffff;
    eax &= edx;
    ebx |= eax;
    if (!ebx)
        goto loc_19f8b2;
    ecx = 0;
loc_19f71d: // 0160:19f71d
    if (bl & 0x01)
        goto loc_19f72e;
    eax = ecx;
    ecx++;
    if ((int32_t)eax >= (int32_t)0x00000010)
        goto loc_19f72e;
    ebx = sar32(ebx, 0x00000001);
    goto loc_19f71d;
loc_19f72e: // 0160:19f72e
    edx = 0;
    ebx = memoryAGet32(ds, esp + 12);
    memoryASet16(ds, 0x39ef86, dx);
    edx = ebx * 0x000000ac;
    eax = ecx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3792050);
    ebx = memoryAGet32(ds, eax + 3792050);
    if (edx == ebx)
        goto loc_19f76a;
    if (ebx)
        goto loc_19f83f;
    if (memoryAGet32(ds, esp + 20) != 0xffffffff)
        goto loc_19f83f;
loc_19f76a: // 0160:19f76a
    eax = esi + -3;
    memoryASet32(ds, esp + 16, eax);
    if ((int32_t)(eax & eax) <= 0)
        goto loc_19f818;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792050);
    ebx <<= 2;
    ebx += edi;
    if (ebx >= 0x000003c0)
        goto loc_19f818;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax <<= 6;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = 0;
    dx = memoryAGet16(ds, 0x39ef86);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    ebx = memoryAGet32(ds, esp + 4);
    eax &= 0x000000ff;
    eax |= ebx;
    if (eax)
        goto loc_19f81f;
loc_19f818: // 0160:19f818
    eax = 0x00000001;
    goto loc_19f821;
loc_19f81f: // 0160:19f81f
    eax = 0;
loc_19f821: // 0160:19f821
    if (!eax)
        goto loc_19f83f;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    edx = esi;
    edx <<= 9;
    ebp = 0xffff0000;
    memoryASet32(ds, eax + 3792030, edx);
    goto loc_19f861;
loc_19f83f: // 0160:19f83f
    ecx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    if ((int32_t)eax > (int32_t)esi)
        goto loc_19f861;
    ebp = 0xfffdffff;
loc_19f861: // 0160:19f861
    eax = memoryAGet32(ds, esp + 24);
    ebx = esi;
    edx = edi;
    memoryASet16(ds, 0x39ef86, ax);
    eax = memoryAGet32(ds, esp + 12);
    sub_1aac75();
    if (!eax)
        goto loc_19f8b2;
    if ((int32_t)ebp <= (int32_t)0xfffe0000)
        goto loc_19f8b2;
    eax = memoryAGet32(ds, esp + 12);
    ebx = esi + -8;
    edx = edi;
    sub_1aac75();
    if (eax)
        goto loc_19f8b2;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    esi -= 0x00000004;
    esi <<= 9;
    edx = 0;
    memoryASet32(ds, eax + 3792030, esi);
    memoryASet32(ds, eax + 3792022, edx);
loc_19f8b2: // 0160:19f8b2
    eax = ebp;
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19f8bd() // 0160:19f8bd +long
{
    esp -= 4;
    goto loc_19f8bd;
loc_19f8b7: // 0160:19f8b7
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19f8bd: // 0160:19f8bd
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edi = edx;
    if (memoryAGet32(ds, 0x39eff4) != 0x00000000)
        goto loc_19f8ec;
    eax = eax * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792074);
    if (ebx == 0x0000000b)
        goto loc_19f8ec;
    if (ebx != 0x00000033)
        goto loc_19f9f8;
loc_19f8ec: // 0160:19f8ec
    ebx = esi * 0x000000ac;
    memoryASet32(ds, 0x39efe8, 0x00000001);
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = esp + 4;
    push32(edi);
    edx = esp + 4;
    ebx = eax;
    push32(edx);
    eax = esi;
    edx = ebp;
    sub_1aac47();
    ebx = memoryAGet32(ds, 0x39ef98);
    edx = eax;
    if (esi != ebx)
        goto loc_19f94e;
    edx = ebx;
    sub_19f612();
    edx = eax;
loc_19f94e: // 0160:19f94e
    if ((int32_t)edx > (int32_t)0xfffe0000)
        goto loc_19f964;
    eax = esi * 0x000000ac;
    if (edi == memoryAGet32(ds, eax + 3792050))
        goto loc_19f9d2;
loc_19f964: // 0160:19f964
    eax = esi * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792050);
    memoryASet32(ds, eax + 3792054, ebx);
    if (edi == ebx)
        goto loc_19f984;
    memoryASet32(ds, 0x39f114, 0x00000004);
loc_19f984: // 0160:19f984
    ebx = esi * 0x000000ac;
    ecx = memoryAGet32(ds, 0x39f114);
    if (!ecx)
        goto loc_19f9a7;
    ebp = ecx + -1;
    eax = 0;
    memoryASet32(ds, 0x39f114, ebp);
    memoryASet32(ds, ebx + 3792002, eax);
    goto loc_19f9bc;
loc_19f9a7: // 0160:19f9a7
    eax = edi;
    eax <<= 2;
    eax -= edi;
    eax <<= 2;
    eax -= edi;
    eax <<= 4;
    memoryASet32(ds, ebx + 3792042, eax);
loc_19f9bc: // 0160:19f9bc
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 3792082, 0x00000001);
    memoryASet32(ds, eax + 3792050, edi);
loc_19f9d2: // 0160:19f9d2
    if ((int32_t)edx > (int32_t)0xfffe0000)
        goto loc_19f9f8;
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3792026);
    memoryASet32(ds, esi + 3792034, eax);
    eax = memoryAGet32(ds, esi + 3792030);
    memoryASet32(ds, esi + 3792038, eax);
loc_19f9f8: // 0160:19f9f8
    esp += 0x00000008;
    goto loc_19f8b7;
}
void sub_19fa00() // 0160:19fa00 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39f02c);
    if (!edx)
        goto loc_19fa17;
    ebx = edx + -1;
    memoryASet32(ds, 0x39f02c, ebx);
loc_19fa17: // 0160:19fa17
    if (memoryAGet32(ds, 0x39f02c) != 0x00000000)
        goto loc_19fb6f;
    if (memoryAGet32(ds, 0x39f04c) != 0x00000000)
        goto loc_19fb6f;
    edi = memoryAGet32(ds, 0x39efac);
    if (edi != 0x00000010)
        goto loc_19fb6f;
    if (memoryAGet32(ds, 0x39f004) != 0x00000000)
        goto loc_19fb6f;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792074);
    if (!ebx)
        goto loc_19fa91;
    if (ebx == 0x00000004)
        goto loc_19fa91;
    if (ebx == 0x00000024)
        goto loc_19fa91;
    if (ebx == 0x00000036)
        goto loc_19fa91;
    if (ebx == edi)
        goto loc_19fa91;
    if (ebx == 0x00000027)
        goto loc_19fa91;
    if (ebx == 0x0000002f)
        goto loc_19fa91;
    if (ebx == 0x0000002b)
        goto loc_19fa91;
    if (ebx == 0x00000006)
        goto loc_19fa91;
    if (ebx != 0x00000038)
        goto loc_19fb6f;
loc_19fa91: // 0160:19fa91
    ah = memoryAGet(ds, 0x3a72b4);
    edx = 0;
    if (!ah)
        goto loc_19fad1;
    ebp = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)ebp >= (int32_t)0x00000040)
        goto loc_19fad1;
    edx = 0x00000001;
    ebx = edx + ebp;
    memoryASet32(ds, 0x39efe8, edx);
    memoryASet32(ds, 0x39efb8, ebx);
    sub_19cdc5();
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792122, edx);
loc_19fad1: // 0160:19fad1
    if (memoryAGet(ds, 0x3a72bc) == 0x00)
        goto loc_19fb13;
    edi = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)edi <= (int32_t)0xffffffc0)
        goto loc_19fb13;
    ebp = 0x00000001;
    eax = edi;
    eax -= ebp;
    memoryASet32(ds, 0x39efe8, ebp);
    memoryASet32(ds, 0x39efb8, eax);
    sub_19cdc5();
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = 0xffffffff;
    memoryASet32(ds, eax + 3792122, ebp);
loc_19fb13: // 0160:19fb13
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000010)
        goto loc_19fb6f;
    memoryASet32(ds, 0x39f02c, 0x00000008);
    if ((int32_t)(edx & edx) <= 0)
        goto loc_19fb4f;
    eax = memoryAGet32(ds, 0x39efb8);
    ebx = eax + -1;
    memoryASet32(ds, 0x39efb8, ebx);
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_19fb4f;
    eax = ebx + 32;
    memoryASet32(ds, 0x39efb8, eax);
loc_19fb4f: // 0160:19fb4f
    if (stop("postCondition"))
        goto loc_19fb6f;
    eax = memoryAGet32(ds, 0x39efb8);
    edx = eax + 1;
    memoryASet32(ds, 0x39efb8, edx);
    if ((int32_t)eax <= (int32_t)0xffffffe0)
        goto loc_19fb6f;
    edx -= 0x00000020;
    memoryASet32(ds, 0x39efb8, edx);
loc_19fb6f: // 0160:19fb6f
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19fb74() // 0160:19fb74 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39f000) == 0x00000000)
        goto loc_19fd10;
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_19fba2;
    if (memoryAGet32(ds, 0x39f120) != 0x00000000)
        goto loc_19fba2;
    memoryASet32(ds, 0x39f184, 0x00000001);
loc_19fba2: // 0160:19fba2
    esi = memoryAGet32(ds, 0x39f000);
    if (esi != 0x00000001)
        goto loc_19fd10;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792122, esi);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000014)
        goto loc_19fc11;
    ebp = 0;
    memoryASet32(ds, eax + 3792006, ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792002, ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792158, ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792162, ebp);
    goto loc_19fc8f;
loc_19fc11: // 0160:19fc11
    edx = memoryAGet32(ds, eax + 3792006);
    edx += 0x00000029;
    memoryASet32(ds, eax + 3792006, edx);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3792006);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax <<= 4;
    memoryASet32(ds, edx + 3792002, eax);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3792006);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, edx + 3792158, eax);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3792006);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, edx + 3792162, eax);
loc_19fc8f: // 0160:19fc8f
    eax = 0x00000010;
    esi = 0x00000032;
    edi = memoryAGet32(ds, 0x39f028);
    edx = 0;
    memoryASet32(ds, 0x39efac, eax);
    memoryASet32(ds, 0x39f000, edx);
    memoryASet32(ds, 0x39f024, edx);
    memoryASet32(ds, 0x39eff4, edx);
    memoryASet32(ds, 0x39f230, esi);
    if (!edi)
        goto loc_19fd10;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000014)
        goto loc_19fd02;
    memoryASet32(ds, eax + 3792030, memoryAGet32(ds, eax + 3792030) - 0x00000200);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792050);
    ebp = memoryAGet32(ds, eax + 3792026);
    edx <<= 10;
    ebp += edx;
    memoryASet32(ds, eax + 3792026, ebp);
    goto loc_19fd10;
loc_19fd02: // 0160:19fd02
    if (stop("postCondition"))
        goto loc_19fd10;
    memoryASet32(ds, eax + 3792030, memoryAGet32(ds, eax + 3792030) - 0x00000600);
loc_19fd10: // 0160:19fd10
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19fd16() // 0160:19fd16 +long
{
    esp -= 4;
    goto loc_19fd16;
loc_19cf97: // 0160:19cf97
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11641 bytes
loc_19fd16: // 0160:19fd16
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x39f008);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax + -2;
    eax = memoryAGet32(ds, 0x39f00c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax + -2;
    esi = 0;
    ebx = edi;
    edi += 0x00000008;
    goto loc_19fdc2;
loc_19fd51: // 0160:19fd51
    if (stop("postCondition"))
        goto loc_19fdc0;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_19fdbc;
    if (ecx >= 0x000003c0)
        goto loc_19fdbc;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    eax += esi;
    esi = 0;
    si = memoryAGet16(ds, eax + 2332680);
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    esi &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_19fdbc;
    eax = 0x00000001;
    goto loc_19fdbe;
loc_19fdbc: // 0160:19fdbc
    eax = 0;
loc_19fdbe: // 0160:19fdbe
    esi = eax;
loc_19fdc0: // 0160:19fdc0
    ecx++;
    ebx++;
loc_19fdc2: // 0160:19fdc2
    if ((int32_t)ebx >= (int32_t)edi)
        goto loc_19fdca;
    if (!esi)
        goto loc_19fd51;
loc_19fdca: // 0160:19fdca
    eax = esi;
    goto loc_19cf97;
}
void sub_19fdd1() // 0160:19fdd1 +long
{
    esp -= 4;
    goto loc_19fdd1;
loc_19d332: // 0160:19d332
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10905 bytes
loc_19fdd1: // 0160:19fdd1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39f040);
    if (!edx)
        goto loc_19fe23;
    ebx = edx + -1;
    memoryASet32(ds, 0x39f040, ebx);
    if (ebx)
        goto loc_19fe03;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x00000017);
    goto loc_19fe23;
loc_19fe03: // 0160:19fe03
    if (ebx != 0x0000000c)
        goto loc_19fe23;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000012;
    sub_1b9c1d();
loc_19fe23: // 0160:19fe23
    eax = memoryAGet32(ds, 0x39f044);
    if (!eax)
        goto loc_19fe8d;
    edx = eax + -1;
    memoryASet32(ds, 0x39f044, edx);
    if (edx)
        goto loc_19fe8d;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, 0x00000018);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792022, 0x00000300);
    ebx = 0x000000ff;
    memoryASet32(ds, 0x39eff4, edx);
    edx = 0x00000640;
    eax = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f230, edx);
    sub_19ce55();
    edx = eax;
    eax = 0x00000012;
    sub_1b9c1d();
loc_19fe8d: // 0160:19fe8d
    if (memoryAGet32(ds, 0x39f0f8) != 0x00000000)
        goto loc_19d332;
    eax = memoryAGet32(ds, 0x39ef98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x39f09c);
    eax += edx;
    eax += ecx;
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_19d332;
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_19d332;
    ebp = memoryAGet32(ds, 0x39bdec);
    if (ebp)
        goto loc_19d332;
    if (memoryAGet32(ds, 0x1dc0bc) != 0x00000000)
        goto loc_19d332;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000016)
        goto loc_19d332;
    sub_19fd16();
    if (eax)
        goto loc_19d332;
    ecx = 0x00000001;
    memoryASet32(ds, 0x39f0f8, ecx);
    sub_19dc9c();
    sub_19ce21();
    sub_19cdc5();
    eax = 0x000001f4;
    edx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39efc0, eax);
    eax = edx * 0x000000ac;
    esi = 0x00000011;
    ebx = 0;
    memoryASet32(ds, 0x39efac, esi);
    memoryASet32(ds, 0x39f0bc, ecx);
    memoryASet32(ds, 0x39f004, ebp);
    memoryASet32(ds, eax + 3792002, ebx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792006, ebx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792134, 0x00000001);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ecx = 0x0000004b;
    memoryASet32(ds, eax + 3792002, ebx);
    memoryASet32(ds, 0x39f040, ecx);
    sub_19dceb();
    eax = memoryAGet32(ds, 0x39f0a0);
    sub_19e865();
    eax = memoryAGet32(ds, 0x39f0a0);
    sub_19e906();
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000031;
    sub_1b9c1d();
    goto loc_19d332;
}
void sub_19ffe1() // 0160:19ffe1 +long
{
    esp -= 4;
    goto loc_19ffe1;
loc_19d332: // 0160:19d332
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11433 bytes
loc_19ffe1: // 0160:19ffe1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39f048);
    if (!edx)
        goto loc_1a0008;
    ebx = edx + -1;
    memoryASet32(ds, 0x39f048, ebx);
    if (ebx)
        goto loc_1a0008;
    memoryASet32(ds, 0x1cdff4, ebx);
    sub_1abd3c();
loc_1a0008: // 0160:1a0008
    if (memoryAGet32(ds, 0x39f0f8) != 0x00000000)
        goto loc_19d332;
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_19d332;
    if (memoryAGet32(ds, 0x39bdec) != 0x00000000)
        goto loc_19d332;
    if (memoryAGet32(ds, 0x1dc0bc) != 0x00000000)
        goto loc_19d332;
    ebx = memoryAGet32(ds, 0x39ef98);
    eax = ebx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000026)
        goto loc_19d332;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    esi = memoryAGet32(ds, 0x39f09c);
    eax += edx;
    eax += esi;
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_19d332;
    ebp = 0x00000001;
    eax = ebx;
    ebx = 0x000000ff;
    memoryASet32(ds, 0x39f0f8, ebp);
    sub_19ce55();
    edx = eax;
    eax = 0x00000042;
    sub_1b9c1d();
    sub_19cdc5();
    memoryASet32(ds, 0x39f0bc, ebp);
    memoryASet32(ds, 0x39f048, ebp);
    memoryASet32(ds, 0x39f0f4, ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ecx = 0x000001f4;
    edx = 0x00000010;
    memoryASet32(ds, 0x39efc0, ecx);
    ebx = 0;
    memoryASet32(ds, 0x39efac, edx);
    memoryASet32(ds, 0x39f004, ebx);
    memoryASet32(ds, eax + 3792002, ebx);
    sub_19dceb();
    eax = memoryAGet32(ds, 0x39f0a0);
    sub_19e865();
    eax = memoryAGet32(ds, 0x39f0a0);
    sub_19e906();
    sub_19ce21();
    goto loc_19d332;
}
void sub_1a0111() // 0160:1a0111 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a01ad;
    ebx = memoryAGet32(ds, 0x39bdec);
    if (ebx)
        goto loc_1a01ad;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x0000002b)
        goto loc_1a01ad;
    if (memoryAGet32(ds, 0x39f004) == 0x00000000)
        goto loc_1a01ad;
    sub_19dc9c();
    sub_19cdc5();
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x39f008);
    memoryASet32(ds, 0x39f058, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, 0x39f050, eax);
    eax = memoryAGet32(ds, 0x39f00c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = 0x00000010;
    memoryASet32(ds, 0x39f004, ebx);
    memoryASet32(ds, 0x39efac, ebp);
    eax -= 0x00000002;
    edx = 0x000001f4;
    memoryASet32(ds, 0x39f054, eax);
    memoryASet32(ds, 0x39efc0, edx);
loc_1a01ad: // 0160:1a01ad
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a01b1() // 0160:1a01b1 +long
{
    esp -= 4;
    goto loc_1a01b1;
loc_19fd10: // 0160:19fd10
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1179 bytes
loc_1a01b1: // 0160:1a01b1
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39f198);
    edx++;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x39f198, edx);
    if (edx)
        goto loc_1a01ef;
    eax = 0;
loc_1a01d5: // 0160:1a01d5
    eax += 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3791926, edx);
    if (eax == 0x00000ac0)
        goto loc_1a0256;
    goto loc_1a01d5;
loc_1a01ef: // 0160:1a01ef
    if (edx != 0x00000001)
        goto loc_1a0238;
    edi = 0x00000001;
    eax = 0;
loc_1a01fb: // 0160:1a01fb
    eax += 0x000000ac;
    memoryASet32(ds, eax + 3791926, edi);
    if (eax != 0x00000ac0)
        goto loc_1a01fb;
    eax = memoryAGet32(ds, 0x39ef98);
    al &= 0xfc;
    edx = eax + 4;
    eax = eax * 0x000000ac;
    edx = edx * 0x000000ac;
    goto loc_1a0232;
loc_1a0225: // 0160:1a0225
    eax += 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 3791926, ebp);
loc_1a0232: // 0160:1a0232
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1a0256;
    goto loc_1a0225;
loc_1a0238: // 0160:1a0238
    if (edx != 0x00000002)
        goto loc_1a0256;
    esi = 0x00000001;
    eax = 0;
loc_1a0244: // 0160:1a0244
    eax += 0x000000ac;
    memoryASet32(ds, eax + 3791926, esi);
    if (eax != 0x00000ac0)
        goto loc_1a0244;
loc_1a0256: // 0160:1a0256
    memoryASet32(ds, 0x39f230, 0x0000000c);
    goto loc_19fd10;
}
void sub_1a0265() // 0160:1a0265 +long
{
    esp -= 4;
    goto loc_1a0265;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13000 bytes
loc_1a0265: // 0160:1a0265
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39ef94) != 0x00000000)
        goto loc_1a0286;
    if (memoryAGet32(ds, 0x39f230) != 0x00000000)
        goto loc_1a0286;
    if (memoryAGet32(ds, 0x39f19c) != 0x00000000)
        goto loc_1a0298;
loc_1a0286: // 0160:1a0286
    if (memoryAGet32(ds, 0x39eff4) != 0x00000000)
        goto loc_1a029d;
    if (memoryAGet32(ds, 0x39f230) != 0x00000000)
        goto loc_1a029d;
loc_1a0298: // 0160:1a0298
    sub_19d86c();
loc_1a029d: // 0160:1a029d
    eax = memoryAGet32(ds, 0x39ef94);
    if (!eax)
        goto loc_1a02e1;
    if ((int32_t)eax > (int32_t)0x0000012c)
        goto loc_1a02e1;
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_1a02e1;
    if (memoryAGet32(ds, 0x39f0bc) != 0x00000000)
        goto loc_1a02e1;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000001e;
    sub_1b9c1d();
loc_1a02e1: // 0160:1a02e1
    ecx = memoryAGet32(ds, 0x39ef98);
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792062) == 0x00000000)
        goto loc_1a02fd;
    eax = ecx;
    sub_19f50a();
loc_1a02fd: // 0160:1a02fd
    ebp = memoryAGet32(ds, 0x39f234);
    if (ebp)
        goto loc_1a08de;
    memoryASet32(ds, 0x39efe8, ebp);
    if (memoryAGet32(ds, 0x39ef94) != 0x00000000)
        goto loc_1a0384;
    if (memoryAGet32(ds, 0x39f230) != 0x00000000)
        goto loc_1a0384;
    edx = memoryAGet32(ds, 0x39f19c);
    if (edx)
        goto loc_1a0384;
    ebx = 0x00000001;
    eax = 0x001d2674;
    memoryASet32(ds, 0x39f0bc, ebx);
    esi = ebx;
    memoryASet32(ds, 0x39f234, ebx);
    ebx = 0x00000032;
    ebp = 0x00000032;
    sub_19e8ec();
    ebx = 0x000000ff;
    memoryASet32(ds, 0x39f230, ebp);
    eax = esi;
    edx = 0;
    memoryASet32(ds, 0x39f19c, eax);
    eax = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f098, edx);
    sub_19ce55();
    edx = eax;
    eax = 0x0000002d;
    sub_1b9c1d();
loc_1a0384: // 0160:1a0384
    if (memoryAGet32(ds, 0x1df5ac) != 0x00000046)
        goto loc_1a0397;
    memoryASet32(ds, 0x39ef94, 0x00000ddd);
loc_1a0397: // 0160:1a0397
    sub_19fb74();
    sub_19fdd1();
    sub_19ffe1();
    sub_1a0111();
    if (memoryAGet32(ds, 0x39f064) != 0x00000001)
        goto loc_1a03b9;
    sub_1b348a();
loc_1a03b9: // 0160:1a03b9
    if (memoryAGet(ds, 0x3a72bf) == 0x00)
        goto loc_1a03d0;
    if (memoryAGet32(ds, 0x39f230) != 0x00000000)
        goto loc_1a03d0;
    sub_1a01b1();
loc_1a03d0: // 0160:1a03d0
    if (memoryAGet(ds, 0x3a72a5) != 0x00)
        goto loc_1a03e1;
    edx = 0;
    memoryASet32(ds, 0x39f120, edx);
loc_1a03e1: // 0160:1a03e1
    if (memoryAGet(ds, 0x3a729a) == 0x00)
        goto loc_1a03ef;
    sub_19dc9c();
loc_1a03ef: // 0160:1a03ef
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792006);
    if (ebx == 0x0000000f)
        goto loc_1a0415;
    if (ebx)
        goto loc_1a0895;
    if (memoryAGet32(ds, eax + 3792062) != 0x00000000)
        goto loc_1a0895;
loc_1a0415: // 0160:1a0415
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_1a0467;
    if ((int32_t)memoryAGet32(ds, 0x39ef94) <= (int32_t)0x00000096)
        goto loc_1a0467;
    eax = memoryAGet32(ds, 0x39efc0);
    edx = eax + -1;
    memoryASet32(ds, 0x39efc0, edx);
    if (stop("postCondition"))
        goto loc_1a0467;
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792062);
    if (ebx)
        goto loc_1a0467;
    esi = 0x0000000f;
    memoryASet32(ds, eax + 3792002, ebx);
    memoryASet32(ds, eax + 3792006, esi);
    memoryASet32(ds, 0x39efc0, 0x000001f4);
loc_1a0467: // 0160:1a0467
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_1a047e;
    if (memoryAGet32(ds, 0x39f1a4) == 0x00000000)
        goto loc_1a047e;
    sub_19dd20();
loc_1a047e: // 0160:1a047e
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_1a048c;
    sub_19cdc5();
loc_1a048c: // 0160:1a048c
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_1a0693;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792050) == 0x00000000)
        goto loc_1a0693;
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_1a0693;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax <<= 2;
    eax += esi;
    eax <<= 2;
    ebp = memoryAGet32(ds, 0x39f09c);
    eax += esi;
    eax += ebp;
    if (memoryAGet32(ds, stop("GetOpAddress")) != 0x00000000)
        goto loc_1a04f3;
    if (memoryAGet32(ds, 0x39f1b8) == 0x00000000)
        goto loc_1a0693;
loc_1a04f3: // 0160:1a04f3
    if (memoryAGet32(ds, 0x39f098) != 0x00000000)
        goto loc_1a0693;
    if ((int32_t)memoryAGet32(ds, 0x39ef94) <= (int32_t)0x00000002)
        goto loc_1a0693;
    if (memoryAGet32(ds, 0x39f040) != 0x00000000)
        goto loc_1a0693;
    if (memoryAGet32(ds, 0x39f044) != 0x00000000)
        goto loc_1a0693;
    esi = ecx * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3792022);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1a0693;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, eax + 3792122, ebp);
    memoryASet32(ds, 0x39f120, ebp);
    memoryASet32(ds, 0x39f0bc, ebp);
    if (memoryAGet32(ds, esi + 3792074) != 0x0000002b)
        goto loc_1a05a6;
    esi = memoryAGet32(ds, 0x39f050);
    if (!esi)
        goto loc_1a059b;
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x39efac);
    memoryASet32(ds, 0x39efe8, ebp);
    edx += 0x00000002;
    memoryASet32(ds, 0x39f230, eax);
    memoryASet32(ds, 0x39efac, edx);
    goto loc_1a0693;
loc_1a059b: // 0160:1a059b
    memoryASet32(ds, 0x39f0bc, esi);
    goto loc_1a0693;
loc_1a05a6: // 0160:1a05a6
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x39efac);
    memoryASet32(ds, 0x39efe8, ebp);
    memoryASet32(ds, 0x39f230, eax);
    if (edx != 0x00000010)
        goto loc_1a062c;
    ebx = memoryAGet32(ds, esi + 3792074);
    if (!ebx)
        goto loc_1a05e3;
    if (ebx == 0x0000002b)
        goto loc_1a05e3;
    if (ebx == 0x00000004)
        goto loc_1a05e3;
    if (ebx == 0x00000024)
        goto loc_1a05e3;
    if (ebx != 0x00000036)
        goto loc_1a062c;
loc_1a05e3: // 0160:1a05e3
    edx = 0x00000002;
    eax = 0;
    sub_1a9cc8();
    if (eax < 0x00000001)
        goto loc_1a05fd;
    if (eax <= 0x00000001)
        goto loc_1a0608;
    if (eax == 0x00000002)
        goto loc_1a060f;
    goto loc_1a0614;
loc_1a05fd: // 0160:1a05fd
    if (eax)
        goto loc_1a0614;
    edi = 0x00000033;
    goto loc_1a0614;
loc_1a0608: // 0160:1a0608
    edi = 0x00000016;
    goto loc_1a0614;
loc_1a060f: // 0160:1a060f
    edi = 0x0000003a;
loc_1a0614: // 0160:1a0614
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = edi;
    sub_1b9c1d();
loc_1a062c: // 0160:1a062c
    eax = ecx * 0x000000ac;
    memoryASet32(ds, 0x39efac, memoryAGet32(ds, 0x39efac) + 0x00000002);
    edi = memoryAGet32(ds, eax + 3792074);
    if (edi == 0x00000006)
        goto loc_1a0680;
    if (edi == 0x00000022)
        goto loc_1a0680;
    if (edi == 0x00000019)
        goto loc_1a0680;
    if (edi == 0x0000001f)
        goto loc_1a0680;
    if (edi == 0x0000000b)
        goto loc_1a0680;
    if (edi == 0x00000033)
        goto loc_1a0680;
    if (edi == 0x0000002f)
        goto loc_1a0680;
    if (edi == 0x00000034)
        goto loc_1a0680;
    if (edi == 0x00000010)
        goto loc_1a0680;
    if (edi == 0x00000014)
        goto loc_1a0680;
    if (edi == 0x00000038)
        goto loc_1a0680;
    if (edi == 0x0000003e)
        goto loc_1a0680;
    if (edi != 0x00000027)
        goto loc_1a0693;
loc_1a0680: // 0160:1a0680
    ebx = 0x00000011;
    ah = 0;
    memoryASet32(ds, 0x39efac, ebx);
    memoryASet(ds, 0x3a72a5, ah);
loc_1a0693: // 0160:1a0693
    if (memoryAGet32(ds, 0x39f064) == 0x00000000)
        goto loc_1a06b8;
    eax = 0x00000010;
    bl = 0;
    edx = 0;
    memoryASet32(ds, 0x39efac, eax);
    memoryASet(ds, 0x3a72a5, bl);
    memoryASet32(ds, 0x39f0bc, edx);
    goto loc_1a06ec;
loc_1a06b8: // 0160:1a06b8
    if (memoryAGet32(ds, 0x39f0f8) != 0x00000000)
        goto loc_1a06d3;
    if (memoryAGet32(ds, 0x39efac) == 0x00000010)
        goto loc_1a06d3;
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_1a06df;
loc_1a06d3: // 0160:1a06d3
    if ((int32_t)memoryAGet32(ds, 0x39efac) <= (int32_t)0x00000096)
        goto loc_1a06ec;
loc_1a06df: // 0160:1a06df
    dh = 0;
    sub_19dfc7();
    memoryASet(ds, 0x3a7288, dh);
loc_1a06ec: // 0160:1a06ec
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_1a0711;
    sub_19fa00();
    if (memoryAGet32(ds, 0x39f1bc) != 0x00000000)
        goto loc_1a0711;
    if (memoryAGet32(ds, 0x39efac) != 0x00000010)
        goto loc_1a0711;
    sub_19eefa();
loc_1a0711: // 0160:1a0711
    eax = ecx * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 3792042, ebp);
    bh = memoryAGet(ds, 0x3a72b7);
    memoryASet32(ds, eax + 3792082, ebp);
    if (bh)
        goto loc_1a0738;
    if (memoryAGet(ds, 0x3a72b9) == 0x00)
        goto loc_1a0742;
loc_1a0738: // 0160:1a0738
    memoryASet32(ds, 0x39f118, 0x00000001);
loc_1a0742: // 0160:1a0742
    eax = ecx * 0x000000ac;
    esi = memoryAGet32(ds, eax + 3792022);
    if ((int32_t)esi > (int32_t)0x00000200)
        goto loc_1a0895;
    if (stop("postCondition"))
        goto loc_1a0895;
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_1a0895;
    if (memoryAGet32(ds, 0x39ef94) == 0x00000000)
        goto loc_1a0895;
    if (memoryAGet32(ds, 0x39f120) != 0x00000000)
        goto loc_1a0895;
    if (memoryAGet32(ds, 0x39f040) != 0x00000000)
        goto loc_1a0895;
    if (memoryAGet32(ds, 0x39f044) != 0x00000000)
        goto loc_1a0895;
    if (memoryAGet32(ds, 0x39f004) != 0x00000000)
        goto loc_1a0895;
    if (memoryAGet(ds, 0x3a72b7) == 0x00)
        goto loc_1a07ce;
    if (memoryAGet32(ds, eax + 3792062) != 0x00000000)
        goto loc_1a07ce;
    edx = 0xffffffff;
    eax = ecx;
    sub_19f8bd();
loc_1a07ce: // 0160:1a07ce
    if (memoryAGet(ds, 0x3a72b9) == 0x00)
        goto loc_1a07f2;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792062) != 0x00000000)
        goto loc_1a07f2;
    edx = 0x00000001;
    eax = ecx;
    sub_19f8bd();
loc_1a07f2: // 0160:1a07f2
    if (memoryAGet(ds, 0x3a7288) == 0x00)
        goto loc_1a088c;
    esi = ecx * 0x000000ac;
    edi = memoryAGet32(ds, esi + 3792022);
    if (edi)
        goto loc_1a088c;
    ebp = memoryAGet32(ds, esi + 3792062);
    if (ebp)
        goto loc_1a088c;
    if (memoryAGet32(ds, esi + 3792058) != 0x00000000)
        goto loc_1a088c;
    eax = memoryAGet32(ds, esi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + 1;
    eax = memoryAGet32(ds, esi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = ecx;
    sub_1aac75();
    if (!eax)
        goto loc_1a088c;
    if (memoryAGet(ds, 0x3a72a5) != 0x00)
        goto loc_1a088c;
    edx = 0x00000001;
    memoryASet32(ds, 0x39f11c, edi);
    edi = 0x00000092;
    memoryASet32(ds, 0x39efe8, edx);
    memoryASet32(ds, esi + 3792062, edi);
    memoryASet32(ds, esi + 3792042, ebp);
    sub_19cdc5();
loc_1a088c: // 0160:1a088c
    memoryASet16(ds, 0x39ef86, 0xffff);
loc_1a0895: // 0160:1a0895
    if (memoryAGet32(ds, 0x39efe8) == 0x00000000)
        goto loc_19cf96;
    ecx = ecx * 0x000000ac;
    edx = 0x00000001;
    ebx = 0x000001f4;
    memoryASet32(ds, ecx + 3792134, edx);
    memoryASet32(ds, 0x39efc0, ebx);
    if (memoryAGet32(ds, ecx + 3792006) != 0x0000000f)
        goto loc_19cf96;
    edi = 0;
    memoryASet32(ds, ecx + 3792006, edi);
    memoryASet32(ds, ecx + 3792002, edi);
    goto loc_19cf96;
loc_1a08de: // 0160:1a08de
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792082, ebx);
    goto loc_19cf96;
}
void sub_1a08f5() // 0160:1a08f5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(eax);
    edx = memoryAGet32(ds, 0x39f020);
    esi = 0;
    if (edx)
        goto loc_1a0a85;
    ebx = eax * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3792058) == 0x00000000)
        goto loc_1a0a85;
    if (memoryAGet32(ds, ebx + 3792018) == 0x00000000)
        goto loc_1a0a85;
    cl = memoryAGet(ds, esp);
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x39ef86, ax);
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    ecx = 0x00239808;
    eax <<= 6;
    ecx += eax;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0;
    eax += eax;
    edx = 0;
    eax += ecx;
    dx = memoryAGet16(ds, 0x39ef86);
    ecx = 0;
    bx = memoryAGet16(ds, eax);
    cx = memoryAGet16(ds, eax + -4);
    ebx &= edx;
    ecx &= edx;
    ecx |= ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + -3840);
    ebx &= edx;
    ax = memoryAGet16(ds, eax + 4);
    ebx |= ecx;
    eax &= 0x0000ffff;
    edx &= eax;
    edx |= ebx;
    if (!edx)
        goto loc_1a0a85;
    eax = 0;
loc_1a09c8: // 0160:1a09c8
    if (dl & 0x01)
        goto loc_1a09d9;
    ebx = eax;
    eax++;
    if ((int32_t)ebx >= (int32_t)0x00000010)
        goto loc_1a09d9;
    edx = sar32(edx, 0x00000001);
    goto loc_1a09c8;
loc_1a09d9: // 0160:1a09d9
    edx = eax * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3792018);
    esi = 0x00000001;
    if (ebx)
        goto loc_1a0a85;
    if (memoryAGet32(ds, edx + 3792022) != 0x00000000)
        goto loc_1a0a85;
    if (memoryAGet32(ds, edx + 3792006) != 0x00000000)
        goto loc_1a0a85;
    ebx = memoryAGet32(ds, esp) * 0x000000ac;
    ecx = memoryAGet32(ds, ebx + 3792018);
    memoryASet32(ds, edx + 3792018, ecx);
    memoryASet32(ds, edx + 3792058, esi);
    ecx = 0;
    memoryASet32(ds, edx + 3792022, ecx);
    memoryASet32(ds, edx + 3792062, ecx);
    if ((int32_t)memoryAGet32(ds, ebx + 3792018) <= (int32_t)0x00000000)
        goto loc_1a0a44;
    memoryASet32(ds, edx + 3792050, esi);
    goto loc_1a0a4e;
loc_1a0a44: // 0160:1a0a44
    memoryASet32(ds, edx + 3792050, 0xffffffff);
loc_1a0a4e: // 0160:1a0a4e
    eax = eax * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792050);
    memoryASet32(ds, eax + 3792054, edx);
    eax = memoryAGet32(ds, esp);
    edx = 0x00000002;
    sub_19ce55();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1a9cc8();
    eax += 0x00000006;
    edx = ecx;
    sub_1b9c1d();
loc_1a0a85: // 0160:1a0a85
    eax = esi;
    esp += 0x00000004;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1a0a8f() // 0160:1a0a8f +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    eax = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3792066, edx);
    ecx = 0x00000001;
    memoryASet32(ds, eax + 3792002, edx);
    memoryASet32(ds, eax + 3792122, ecx);
    memoryASet32(ds, eax + 3792006, edx);
    memoryASet32(ds, eax + 3792062, edx);
    memoryASet32(ds, eax + 3792018, edx);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a0ac5() // 0160:1a0ac5 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = eax * 0x000000ac;
    edx = 0x0000001e;
    ebx = 0;
    memoryASet32(ds, eax + 3792006, edx);
    memoryASet32(ds, eax + 3792002, ebx);
    memoryASet32(ds, eax + 3792018, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a0ae9() // 0160:1a0ae9 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    eax = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3792058, edx);
    memoryASet32(ds, eax + 3792018, edx);
    memoryASet32(ds, eax + 3792022, edx);
    edi = 0x0000000c;
    memoryASet32(ds, eax + 3792046, edx);
    memoryASet32(ds, eax + 3792006, edi);
    memoryASet32(ds, eax + 3792002, edx);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a0b1f() // 0160:1a0b1f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    edx = eax;
    eax = eax * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792018, ebx);
    memoryASet32(ds, eax + 3792022, ebx);
    edi = 0x0000000e;
    memoryASet32(ds, eax + 3792062, ebx);
    memoryASet32(ds, eax + 3792006, edi);
    memoryASet32(ds, eax + 3792002, ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000019;
    sub_1b9c1d();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a0b6b() // 0160:1a0b6b +long
{
    esp -= 4;
    goto loc_1a0b6b;
loc_1a0b62: // 0160:1a0b62
    sub_1b9c1d();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a0b6b: // 0160:1a0b6b
    push32(ebx);
    push32(edx);
    push32(edi);
    edx = eax;
    eax = eax * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792018, ebx);
    memoryASet32(ds, eax + 3792022, ebx);
    edi = 0x0000000d;
    memoryASet32(ds, eax + 3792058, ebx);
    memoryASet32(ds, eax + 3792006, edi);
    memoryASet32(ds, eax + 3792002, ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000014;
    goto loc_1a0b62;
}
void sub_1a0bb0() // 0160:1a0bb0 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    esi = eax;
    memoryASet32(ds, esp + 4, edx);
    edi = ebx;
    ebp = ecx;
    edx = 0;
    sub_1a08f5();
    memoryASet32(ds, esp + 12, edx);
    edx = 0;
    ecx -= 0x00000008;
    memoryASet16(ds, 0x39ef86, dx);
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1a0c77;
    if (ebx >= 0x000003c0)
        goto loc_1a0c77;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1a0c77;
    eax = esi * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792022);
    if (stop("postCondition"))
        goto loc_1a0c77;
    if (memoryAGet32(ds, 0x39f0fc) != 0x00000000)
        goto loc_1a0c35;
    edx = ebx;
    edx = -edx;
    memoryASet32(ds, eax + 3792022, edx);
loc_1a0c35: // 0160:1a0c35
    eax = esi * 0x000000ac;
    stop("disassembly failed at 160:1a0c42 setg al");
    eax &= 0x000000ff;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if (!eax)
        goto loc_1a0c77;
    eax = esi;
    edx = 0x00000002;
    sub_19ce55();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1a9cc8();
    eax += 0x00000003;
    edx = ecx;
    sub_1b9c1d();
loc_1a0c77: // 0160:1a0c77
    ecx = ebp + -4;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1a0d00;
    eax = edi + -3;
    memoryASet32(ds, esp + 8, eax);
    if (eax >= 0x000003c0)
        goto loc_1a0d00;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    ebx = ecx;
    ebx <<= 4;
    eax = 0;
    ebx -= ecx;
    ax = memoryAGet16(ds, 0x39ef86);
    ebx <<= 6;
    edx &= eax;
    al = memoryAGet(ds, edi + ebx + 3233189);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1a0d00;
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792018) < (int32_t)0x00000000)
        goto loc_1a0d8f;
loc_1a0d00: // 0160:1a0d00
    ecx = ebp + -4;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1a0df9;
    eax = edi + 4;
    memoryASet32(ds, esp, eax);
    if (eax >= 0x000003c0)
        goto loc_1a0df9;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    ax = memoryAGet16(ds, stop("GetOpAddress"));
    ebx = ecx;
    eax &= 0x0000ffff;
    ebx <<= 4;
    edx = 0;
    ebx -= ecx;
    dx = memoryAGet16(ds, 0x39ef86);
    ebx <<= 6;
    edx &= eax;
    al = memoryAGet(ds, edi + ebx + 3233196);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1a0df9;
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792018) <= (int32_t)0x00000000)
        goto loc_1a0df9;
loc_1a0d8f: // 0160:1a0d8f
    memoryASet32(ds, esp + 12, 0x00000001);
    ebx = esi * 0x000000ac;
    edx = memoryAGet32(ds, ebx + 3792018);
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 3792018, eax);
    edx = edi;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx <<= 9;
    eax &= 0x000001ff;
    eax |= edx;
    ecx = memoryAGet32(ds, ebx + 3792058);
    memoryASet32(ds, ebx + 3792026, eax);
    if (!ecx)
        goto loc_1a0df9;
    eax = memoryAGet32(ds, ebx + 3792050);
    eax = -eax;
    memoryASet32(ds, ebx + 3792050, eax);
    memoryASet32(ds, ebx + 3792054, eax);
loc_1a0df9: // 0160:1a0df9
    if (memoryAGet32(ds, esp + 4) == 0x00000000)
        goto loc_1a0fa9;
    eax = esi * 0x000000ac;
    edx = 0x00000001;
    ebx = memoryAGet32(ds, eax + 3792062);
    memoryASet32(ds, esp + 12, edx);
    if (!ebx)
        goto loc_1a0e30;
    if ((int32_t)memoryAGet32(ds, eax + 3792022) <= (int32_t)0x00000600)
        goto loc_1a0e30;
    eax = esi;
    sub_1a0b1f();
loc_1a0e30: // 0160:1a0e30
    ebx = esi * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3792058) == 0x00000000)
        goto loc_1a0f6c;
    if ((int32_t)memoryAGet32(ds, ebx + 3792050) <= (int32_t)0x00000000)
        goto loc_1a0e6e;
    eax = memoryAGet32(ds, ebx + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= 0x0000000d;
    ecx = memoryAGet32(ds, ebx + 3792158);
    ebx = eax;
    ebx -= ecx;
    goto loc_1a0e8c;
loc_1a0e6e: // 0160:1a0e6e
    eax = memoryAGet32(ds, ebx + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, ebx + 3792158);
    eax -= 0x00000003;
    ebx += eax;
loc_1a0e8c: // 0160:1a0e8c
    eax = esi * 0x000000ac;
    memoryASet32(ds, esp + 16, eax);
    edx = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, edx + 3792038);
    eax = memoryAGet32(ds, eax + 3792038);
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x00000140);
    ecx = memoryAGet32(ds, ecx + 3792162);
    eax -= 0x0000000c;
    push32(0x00000010);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 28);
    push32(0x00000010);
    edx = 0x003155a8;
    eax = memoryAGet32(ds, eax + 3792166);
    sub_1afa94();
    stop("stack_below", "0160:1a0edd");
    eax = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, eax + 3792018);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1a0f11;
    eax = memoryAGet32(ds, esp + 16);
    if ((int32_t)memoryAGet32(ds, eax + 3792022) <= (int32_t)0x00000700)
        goto loc_1a0f11;
    eax = esi;
    sub_1a0b6b();
    goto loc_1a0f6c;
loc_1a0f11: // 0160:1a0f11
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792022) <= (int32_t)0x00000200)
        goto loc_1a0f47;
    eax = esi;
    edx = 0x00000002;
    sub_19ce55();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1a9cc8();
    eax += 0x00000003;
    edx = ecx;
    sub_1b9c1d();
loc_1a0f47: // 0160:1a0f47
    ecx = memoryAGet32(ds, 0x39bdd8);
    if (ecx == 0x00000001)
        goto loc_1a0f5c;
    if (ecx == 0x00000006)
        goto loc_1a0f5c;
    if (ecx != 0x00000009)
        goto loc_1a0f6c;
loc_1a0f5c: // 0160:1a0f5c
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 3792070, 0x00000001);
loc_1a0f6c: // 0160:1a0f6c
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792006) != 0x0000001d)
        goto loc_1a0f82;
    eax = esi;
    sub_1a0ac5();
loc_1a0f82: // 0160:1a0f82
    eax = esi * 0x000000ac;
    ebx = ebp;
    edx = memoryAGet32(ds, eax + 3792030);
    ebx <<= 9;
    edx &= 0x000001ff;
    edx |= ebx;
    memoryASet32(ds, eax + 3792030, edx);
    edx = 0;
    memoryASet32(ds, eax + 3792022, edx);
loc_1a0fa9: // 0160:1a0fa9
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792062) == 0x00000000)
        goto loc_1a1001;
    if (memoryAGet32(ds, eax + 3792018) == 0x00000000)
        goto loc_1a0fca;
    if (memoryAGet32(ds, eax + 3792022) != 0x00000000)
        goto loc_1a0fd0;
loc_1a0fca: // 0160:1a0fca
    memoryASet32(ds, 0x39f11c, memoryAGet32(ds, 0x39f11c) + 1);
loc_1a0fd0: // 0160:1a0fd0
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792018);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000380)
        goto loc_1a0ff1;
    if (memoryAGet32(ds, ebx + 3792022) == 0x00000000)
        goto loc_1a0ffa;
loc_1a0ff1: // 0160:1a0ff1
    if ((int32_t)memoryAGet32(ds, 0x39f11c) <= (int32_t)0x00000004)
        goto loc_1a1001;
loc_1a0ffa: // 0160:1a0ffa
    eax = esi;
    sub_1a0a8f();
loc_1a1001: // 0160:1a1001
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792058) == 0x00000000)
        goto loc_1a1118;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1a107e;
    if (edi >= 0x000003c0)
        goto loc_1a107e;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    edx = edi;
    ebx <<= 4;
    edx = sar32(edx, 0x1f);
    ebx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    eax += eax;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + 2332680);
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    ebx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= ebx;
    if (eax)
        goto loc_1a10eb;
loc_1a107e: // 0160:1a107e
    ebp++;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1a10e4;
    if (edi >= 0x000003c0)
        goto loc_1a10e4;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    edx = edi;
    ebx <<= 4;
    edx = sar32(edx, 0x1f);
    ebx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1a10eb;
loc_1a10e4: // 0160:1a10e4
    if (memoryAGet32(ds, esp + 12) == 0x00000000)
        goto loc_1a1118;
loc_1a10eb: // 0160:1a10eb
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792018);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_1a1118;
    eax = memoryAGet32(ds, ebx + 3792022);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_1a1118;
    eax = esi;
    sub_1a0ae9();
loc_1a1118: // 0160:1a1118
    esi = esi * 0x000000ac;
    if (memoryAGet32(ds, esi + 3792022) != 0x00000000)
        goto loc_1a1149;
    edi = memoryAGet32(ds, 0x39efe4);
    edx = memoryAGet32(ds, esi + 3792018);
    stop("imul edx * edi");
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, esi + 3792018, eax);
loc_1a1149: // 0160:1a1149
    esp += 0x00000014;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1a1150() // 0160:1a1150 +long
{
    esp -= 4;
    goto loc_1a1150;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16819 bytes
loc_1a1150: // 0160:1a1150
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    edx = 0;
    memoryASet16(ds, 0x39ef86, dx);
    edx = memoryAGet32(ds, 0x39f110);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x39f110, edx);
    ebx &= 0x0000000f;
    ecx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f110, ebx);
    esi = ebx;
    if (ebx == ecx)
        goto loc_1a1227;
    ebx = ebx * 0x000000ac;
    edi = memoryAGet32(ds, ebx + 3792026);
    if (!edi)
        goto loc_1a1227;
    if (memoryAGet32(ds, ebx + 3792058) != 0x00000000)
        goto loc_1a1227;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1a1201;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1a1201;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    if (eax)
        goto loc_1a1208;
loc_1a1201: // 0160:1a1201
    eax = 0x00000001;
    goto loc_1a120a;
loc_1a1208: // 0160:1a1208
    eax = 0;
loc_1a120a: // 0160:1a120a
    if (!eax)
        goto loc_1a1227;
    eax = memoryAGet32(ds, 0x39f110) * 0x000000ac;
    memoryASet32(ds, eax + 3792022, memoryAGet32(ds, eax + 3792022) + 0x00000200);
    goto loc_1a1334;
loc_1a1227: // 0160:1a1227
    eax = memoryAGet32(ds, 0x39ef98);
    if (esi != eax)
        goto loc_1a1334;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_1a1334;
    if (memoryAGet32(ds, eax + 3792058) != 0x00000000)
        goto loc_1a1334;
    if (memoryAGet32(ds, eax + 3792022) != 0x00000000)
        goto loc_1a1334;
    if (memoryAGet32(ds, eax + 3792082) != 0x00000000)
        goto loc_1a1334;
    if (memoryAGet32(ds, eax + 3792062) != 0x00000000)
        goto loc_1a1334;
    ebx = memoryAGet32(ds, 0x39f110) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1a1313;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1a1313;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    edx = ebx;
    esi <<= 4;
    edx = sar32(edx, 0x1f);
    esi -= eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1a131a;
loc_1a1313: // 0160:1a1313
    eax = 0x00000001;
    goto loc_1a131c;
loc_1a131a: // 0160:1a131a
    eax = 0;
loc_1a131c: // 0160:1a131c
    if (!eax)
        goto loc_1a1334;
    eax = memoryAGet32(ds, 0x39f110) * 0x000000ac;
    memoryASet32(ds, eax + 3792022, memoryAGet32(ds, eax + 3792022) + 0x00000080);
loc_1a1334: // 0160:1a1334
    edi = 0;
    esi = 0;
loc_1a1338: // 0160:1a1338
    if (memoryAGet32(ds, esi + 3792026) == 0x00000000)
        goto loc_1a1773;
    if (memoryAGet32(ds, esi + 3792018) != 0x00000000)
        goto loc_1a137f;
    if (memoryAGet32(ds, esi + 3792022) != 0x00000000)
        goto loc_1a137f;
    if (memoryAGet32(ds, esi + 3792042) != 0x00000000)
        goto loc_1a137f;
    if (memoryAGet32(ds, esi + 3792006) != 0x00000000)
        goto loc_1a137f;
    if (memoryAGet32(ds, esi + 3792066) != 0x00000000)
        goto loc_1a137f;
    if (memoryAGet32(ds, esi + 3792058) == 0x00000000)
        goto loc_1a1773;
loc_1a137f: // 0160:1a137f
    if (memoryAGet32(ds, esi + 3792042) != 0x00000000)
        goto loc_1a13a3;
    if (memoryAGet32(ds, esi + 3792018) != 0x00000000)
        goto loc_1a13a3;
    if (memoryAGet32(ds, esi + 3792058) != 0x00000000)
        goto loc_1a13a3;
    if (memoryAGet32(ds, esi + 3792006) == 0x00000000)
        goto loc_1a13ad;
loc_1a13a3: // 0160:1a13a3
    memoryASet32(ds, esi + 3792098, 0x00000001);
loc_1a13ad: // 0160:1a13ad
    eax = memoryAGet32(ds, esi + 3792042);
    edx = memoryAGet32(ds, esi + 3792026);
    ebx = 0;
    edx += eax;
    memoryASet32(ds, esi + 3792042, ebx);
    memoryASet32(ds, esi + 3792026, edx);
    if (edi != memoryAGet32(ds, 0x39ef98))
        goto loc_1a14b6;
    if (memoryAGet32(ds, 0x39f000) == 0x00000000)
        goto loc_1a14b6;
    if (memoryAGet32(ds, esi + 3792074) != 0x00000014)
        goto loc_1a14b6;
    eax = memoryAGet32(ds, esi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 5;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1a1479;
    eax = memoryAGet32(ds, esi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1a1479;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ax = memoryAGet16(ss, stop("GetOpAddress"));
    ecx = ecx * 0x000003c0;
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1a1480;
loc_1a1479: // 0160:1a1479
    eax = 0x00000001;
    goto loc_1a1482;
loc_1a1480: // 0160:1a1480
    eax = 0;
loc_1a1482: // 0160:1a1482
    if (!eax)
        goto loc_1a14b6;
    ebx = memoryAGet32(ds, 0x39f194);
    ecx = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebx++;
    memoryASet32(ds, 0x39f194, ebx);
    if (edx)
        goto loc_1a14ac;
    eax = edi;
    sub_1a21af();
loc_1a14ac: // 0160:1a14ac
    memoryASet32(ds, esi + 3792030, memoryAGet32(ds, esi + 3792030) + 0x00000400);
loc_1a14b6: // 0160:1a14b6
    if (edi != memoryAGet32(ds, 0x39ef98))
        goto loc_1a14f2;
    if (memoryAGet32(ds, 0x39f000) != 0x00000000)
        goto loc_1a1773;
    if (memoryAGet32(ds, 0x39f044) != 0x00000000)
        goto loc_1a1773;
    if (memoryAGet32(ds, esi + 3792006) == 0x00000018)
        goto loc_1a1773;
    if (memoryAGet32(ds, 0x39f020) != 0x00000000)
        goto loc_1a1773;
loc_1a14f2: // 0160:1a14f2
    eax = memoryAGet32(ds, esi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 8, eax);
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_1a156c;
    ebx = eax;
    eax = eax * 0x000003c0;
    ebp = memoryAGet32(ds, esp + 12);
    edx = esi;
    ebx <<= 9;
    eax += ebp;
loc_1a1538: // 0160:1a1538
    ecx = 0;
    cl = memoryAGet(ds, eax + 3233192);
    if (ecx == 0x00000080)
        goto loc_1a156c;
    ecx = memoryAGet32(ds, esp + 8);
    eax -= 0x000003c0;
    ebx -= 0x00000200;
    ebp = 0;
    memoryASet32(ds, edx + 3792030, ebx);
    ecx--;
    memoryASet32(ds, edx + 3792022, ebp);
    memoryASet32(ds, esp + 8, ecx);
    goto loc_1a1538;
loc_1a156c: // 0160:1a156c
    eax = memoryAGet32(ds, esi + 3792018);
    edx = memoryAGet32(ds, esi + 3792026);
    ecx = memoryAGet32(ds, esi + 3792030);
    edx += eax;
    eax = memoryAGet32(ds, esi + 3792022);
    memoryASet32(ds, esi + 3792026, edx);
    ecx += eax;
    memoryASet32(ds, esi + 3792030, ecx);
    ecx = 0;
    ebp = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, 0x39ef86, cx);
    ecx = ebp + 1;
    ebx = memoryAGet32(ds, esp + 12);
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1a15e8;
    if (ebx >= 0x000003c0)
        goto loc_1a15e8;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ecx = ecx * 0x000003c0;
    eax = ebx;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    if (eax)
        goto loc_1a15ef;
loc_1a15e8: // 0160:1a15e8
    eax = 0x00000001;
    goto loc_1a15f1;
loc_1a15ef: // 0160:1a15ef
    eax = 0;
loc_1a15f1: // 0160:1a15f1
    if (eax)
        goto loc_1a15fc;
    if ((int32_t)memoryAGet32(ds, esp + 8) >= (int32_t)0x00000008)
        goto loc_1a1607;
loc_1a15fc: // 0160:1a15fc
    eax = memoryAGet32(ds, 0x39f078);
    memoryASet32(ds, esi + 3792022, memoryAGet32(ds, esi + 3792022) + eax);
loc_1a1607: // 0160:1a1607
    eax = memoryAGet32(ds, esi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, 0x39f020);
    memoryASet32(ds, esp + 8, eax);
    if (ecx)
        goto loc_1a1698;
    if (edi != memoryAGet32(ds, 0x39ef98))
        goto loc_1a1672;
    if (memoryAGet32(ds, esi + 3792062) == 0x00000000)
        goto loc_1a1672;
    if ((int32_t)memoryAGet32(ds, esi + 3792022) >= (int32_t)0x00000000)
        goto loc_1a1672;
    eax = esp;
    push32(eax);
    eax = esp + 8;
    edx = esp + 12;
    push32(eax);
    ecx = ebp;
    eax = esp + 20;
    sub_1ab7bc();
    goto loc_1a168c;
loc_1a1672: // 0160:1a1672
    eax = esp;
    push32(eax);
    eax = esp + 8;
    push32(eax);
    edx = esp + 20;
    ecx = ebx;
    push32(ebp);
    ebx = esp + 20;
    eax = edi;
    sub_1aad07();
loc_1a168c: // 0160:1a168c
    ebp = eax;
    eax = 0;
    memoryASet16(ds, 0x39ef86, ax);
    goto loc_1a16b1;
loc_1a1698: // 0160:1a1698
    eax = esp;
    push32(eax);
    eax = esp + 8;
    edx = esp + 12;
    push32(eax);
    ecx = ebp;
    eax = esp + 20;
    sub_1ab7bc();
    ebp = eax;
loc_1a16b1: // 0160:1a16b1
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x00000008)
        goto loc_1a16e3;
    if (edi != memoryAGet32(ds, 0x39ef98))
        goto loc_1a16d2;
    if (memoryAGet32(ds, 0x39f0f0) == 0x00000000)
        goto loc_1a16d2;
    if ((int32_t)memoryAGet32(ds, esi + 3792022) < (int32_t)0x00000000)
        goto loc_1a16e3;
loc_1a16d2: // 0160:1a16d2
    ecx = memoryAGet32(ds, esp + 8);
    ebx = memoryAGet32(ds, esp + 12);
    edx = ebp;
    eax = edi;
    sub_1a0bb0();
loc_1a16e3: // 0160:1a16e3
    if ((int32_t)memoryAGet32(ds, esi + 3792062) <= (int32_t)0x00000041)
        goto loc_1a1701;
    eax = memoryAGet32(ds, esp + 8);
    edx = 0;
    eax <<= 9;
    memoryASet32(ds, esi + 3792022, edx);
    memoryASet32(ds, esi + 3792030, eax);
loc_1a1701: // 0160:1a1701
    if ((int32_t)memoryAGet32(ds, esi + 3792022) <= (int32_t)0x00000800)
        goto loc_1a1736;
    if (edi != memoryAGet32(ds, 0x39ef98))
        goto loc_1a1723;
    eax = memoryAGet32(ds, 0x39f188);
    if (eax)
        goto loc_1a1723;
    memoryASet32(ds, 0x39eff4, eax);
loc_1a1723: // 0160:1a1723
    ebx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, esi + 3792058, ebx);
    memoryASet32(ds, esi + 3792062, ecx);
loc_1a1736: // 0160:1a1736
    if (edi != memoryAGet32(ds, 0x39ef98))
        goto loc_1a174a;
    if (!ebp)
        goto loc_1a174a;
    edx = 0;
    memoryASet32(ds, 0x39f188, edx);
loc_1a174a: // 0160:1a174a
    ebx = memoryAGet32(ds, esi + 3792026);
    if (stop("postCondition"))
        goto loc_1a1766;
    if ((int32_t)ebx > (int32_t)0x00078000)
        goto loc_1a1766;
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x0000017e)
        goto loc_1a1773;
loc_1a1766: // 0160:1a1766
    memoryASet32(ds, 0x1dd544, memoryAGet32(ds, 0x1dd544) + 1);
    eax = edi;
    sub_19cf9d();
loc_1a1773: // 0160:1a1773
    edi++;
    esi += 0x000000ac;
    if ((int32_t)edi < (int32_t)0x00000010)
        goto loc_1a1338;
    esp += 0x00000010;
    goto loc_19cf96;
}
void sub_1a178b() // 0160:1a178b +long
{
    esp -= 4;
    goto loc_1a178b;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18414 bytes
loc_1a178b: // 0160:1a178b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792006) != 0x0000000a)
        goto loc_1a1820;
    if ((int32_t)memoryAGet32(ds, eax + 3792050) <= (int32_t)0x00000000)
        goto loc_1a17b6;
    esi = 0xfffffff8;
    goto loc_1a17bb;
loc_1a17b6: // 0160:1a17b6
    esi = 0x00000002;
loc_1a17bb: // 0160:1a17bb
    edi = ebp * 0x000000ac;
    push32(0x0000000a);
    eax = esi + 12;
    ecx = 0x0000001e;
    eax <<= 9;
    ebx = memoryAGet32(ds, edi + 3792026);
    edx = memoryAGet32(ds, edi + 3792030);
    ebx -= eax;
    edx -= 0x00003000;
    eax = ebx;
    ebx = 0x00000019;
    sub_1abac7();
    ecx = memoryAGet32(ds, edi + 3792026);
    if (ecx >= 0x00078000)
        goto loc_1a1812;
    eax = memoryAGet32(ds, edi + 3792030);
    if ((int32_t)eax >= (int32_t)0x0002fc00)
        goto loc_1a1812;
    edx = eax;
    eax = ecx;
    sub_1b106c();
loc_1a1812: // 0160:1a1812
    eax = ebp * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3792026, edx);
loc_1a1820: // 0160:1a1820
    eax = ebp * 0x000000ac;
    memoryASet32(ds, eax + 3792122, 0x00000002);
    if (memoryAGet32(ds, 0x39f000) == 0x00000000)
        goto loc_1a18ec;
    edi = memoryAGet32(ds, eax + 3792074);
    if (edi == 0x00000010)
        goto loc_1a1851;
    if (edi != 0x00000014)
        goto loc_1a18ec;
loc_1a1851: // 0160:1a1851
    if (memoryAGet32(ds, 0x39f184) == 0x00000000)
        goto loc_1a1866;
    memoryASet32(ds, 0x39f000, 0x00000001);
    goto loc_1a186c;
loc_1a1866: // 0160:1a1866
    memoryASet32(ds, 0x39f000, memoryAGet32(ds, 0x39f000) - 1);
loc_1a186c: // 0160:1a186c
    eax = ebp * 0x000000ac;
    esi = memoryAGet32(ds, eax + 3792006);
    edi = esi;
    edi <<= 2;
    edi -= esi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    edx += 0x00000006;
    edx <<= 4;
    memoryASet32(ds, eax + 3792002, edx);
    edi = memoryAGet32(ds, eax + 3792030);
    edi += memoryAGet32(ds, 0x39f028);
    edx = memoryAGet32(ds, eax + 3792050);
    memoryASet32(ds, eax + 3792030, edi);
    if (edx != 0x00000001)
        goto loc_1a18bd;
    edx = memoryAGet32(ds, 0x39f024);
    memoryASet32(ds, eax + 3792026, memoryAGet32(ds, eax + 3792026) + edx);
    goto loc_1a18c9;
loc_1a18bd: // 0160:1a18bd
    edx = memoryAGet32(ds, 0x39f024);
    memoryASet32(ds, eax + 3792026, memoryAGet32(ds, eax + 3792026) - edx);
loc_1a18c9: // 0160:1a18c9
    ebp = ebp * 0x000000ac;
    eax = memoryAGet32(ss, ebp + 3792026);
    memoryASet32(ss, ebp + 3792034, eax);
    eax = memoryAGet32(ss, ebp + 3792030);
    memoryASet32(ss, ebp + 3792038, eax);
    goto loc_1a19a3;
loc_1a18ec: // 0160:1a18ec
    eax = ebp * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792006);
    if ((int32_t)ebx < (int32_t)0x00000019)
        goto loc_1a195e;
    if ((int32_t)ebx > (int32_t)0x0000001d)
        goto loc_1a195e;
    if ((int32_t)memoryAGet32(ds, eax + 3792022) >= (int32_t)0xffffff9a)
        goto loc_1a1910;
    esi = 0x0000001b;
loc_1a1910: // 0160:1a1910
    eax = ebp * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792022);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000066)
        goto loc_1a192b;
    esi = 0x0000001c;
loc_1a192b: // 0160:1a192b
    eax = ebp * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792022) <= (int32_t)0x00000066)
        goto loc_1a193f;
    esi = 0x0000001d;
loc_1a193f: // 0160:1a193f
    ebp = ebp * 0x000000ac;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax <<= 4;
    memoryASet32(ss, ebp + 3792006, esi);
    goto loc_1a199d;
loc_1a195e: // 0160:1a195e
    ebp = ebp * 0x000000ac;
    esi = 0;
    memoryASet32(ss, ebp + 3792006, esi);
    esi = memoryAGet32(ss, ebp + 3792074);
    eax = esi;
    eax <<= 2;
    eax -= esi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ss, ebp + 3792158, edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ss, ebp + 3792162, edx);
    eax <<= 4;
loc_1a199d: // 0160:1a199d
    memoryASet32(ss, ebp + 3792002, eax);
loc_1a19a3: // 0160:1a19a3
    eax = esi;
    goto loc_19cf96;
}
void sub_1a19aa() // 0160:1a19aa +long
{
    esp -= 4;
    goto loc_1a19aa;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18957 bytes
loc_1a19aa: // 0160:1a19aa
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax * 0x000000ac;
    memoryASet32(ds, 0x39f230, 0x00000032);
    if (memoryAGet32(ds, ebx + 3792058) == 0x00000000)
        goto loc_1a1a5c;
    esi = 0;
    edi = memoryAGet32(ds, ebx + 3792070);
    memoryASet32(ds, ebx + 3792062, esi);
    if (!edi)
        goto loc_1a1a1e;
    eax = memoryAGet32(ds, ebx + 3792002);
    eax += 0x00000002;
    eax &= 0x0000003f;
    edx = eax;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 3792002, eax);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    ecx = 0xfffffffc;
    esi = 0xfffffffe;
    memoryASet32(ds, ebx + 3792158, ecx);
    memoryASet32(ds, ebx + 3792162, esi);
    eax += 0x00000137;
    goto loc_19cf96;
loc_1a1a1e: // 0160:1a1a1e
    eax = memoryAGet32(ds, ebx + 3792002);
    eax += 0x00000004;
    eax &= 0x0000007f;
    edx = eax;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 3792002, eax);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    memoryASet32(ds, ebx + 3792158, 0xfffffffc);
    edx = 0xfffffffe;
    eax += 0x0000012f;
    memoryASet32(ds, ebx + 3792162, edx);
    goto loc_19cf96;
loc_1a1a5c: // 0160:1a1a5c
    esi = memoryAGet32(ds, ebx + 3792062);
    esi -= 0x00000004;
    memoryASet32(ds, ebx + 3792062, esi);
    if ((int32_t)esi > (int32_t)0x00000001)
        goto loc_1a1a79;
    ebp = esi + 64;
    memoryASet32(ds, ebx + 3792062, ebp);
loc_1a1a79: // 0160:1a1a79
    ebx = eax * 0x000000ac;
    edx = memoryAGet32(ds, ebx + 3792062);
    edx--;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = 0x00000009;
    edx -= eax;
    ecx = 0;
    eax = edx + 530;
    memoryASet32(ds, ebx + 3792162, ecx);
    memoryASet32(ds, ebx + 3792158, 0xfffffffd);
    goto loc_19cf96;
}
void sub_1a1ab7() // 0160:1a1ab7 +long
{
    esp -= 4;
    goto loc_1a1ab7;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19226 bytes
loc_1a1ab7: // 0160:1a1ab7
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    edx = ebx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3792074);
    eax = 0;
    if (edx < 0x00000010)
        goto loc_1a1afb;
    if (edx <= 0x00000010)
        goto loc_1a1bdf;
    if (edx < 0x0000002b)
        goto loc_1a1aed;
    if (edx <= 0x0000002b)
        goto loc_1a1b36;
    if (edx == 0x0000002f)
        goto loc_1a1bba;
    goto loc_19cf96;
loc_1a1aed: // 0160:1a1aed
    if (edx == 0x00000027)
        goto loc_1a1b92;
    goto loc_19cf96;
loc_1a1afb: // 0160:1a1afb
    if (stop("postCondition"))
        goto loc_1a1b09;
    if (edx == 0x00000006)
        goto loc_1a1b64;
    goto loc_19cf96;
loc_1a1b09: // 0160:1a1b09
    eax = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)eax <= (int32_t)0x00000010)
        goto loc_1a1b1d;
    eax = 0x00000003;
    goto loc_1a1c0a;
loc_1a1b1d: // 0160:1a1b1d
    if ((int32_t)eax >= (int32_t)0xfffffff0)
        goto loc_1a1b2c;
    eax = 0x00000002;
    goto loc_1a1c0a;
loc_1a1b2c: // 0160:1a1b2c
    eax = 0x00000001;
    goto loc_1a1c0a;
loc_1a1b36: // 0160:1a1b36
    esi = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)esi <= (int32_t)0x00000010)
        goto loc_1a1b4b;
    eax = 0x0000002e;
    goto loc_1a1c0a;
loc_1a1b4b: // 0160:1a1b4b
    if ((int32_t)esi >= (int32_t)0xfffffff0)
        goto loc_1a1b5a;
    eax = 0x0000002d;
    goto loc_1a1c0a;
loc_1a1b5a: // 0160:1a1b5a
    eax = 0x0000002c;
    goto loc_1a1c0a;
loc_1a1b64: // 0160:1a1b64
    edi = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)edi <= (int32_t)0x00000010)
        goto loc_1a1b79;
    eax = 0x00000009;
    goto loc_1a1c0a;
loc_1a1b79: // 0160:1a1b79
    if ((int32_t)edi >= (int32_t)0xfffffff0)
        goto loc_1a1b88;
    eax = 0x00000008;
    goto loc_1a1c0a;
loc_1a1b88: // 0160:1a1b88
    eax = 0x00000007;
    goto loc_1a1c0a;
loc_1a1b92: // 0160:1a1b92
    ebp = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)ebp <= (int32_t)0x00000010)
        goto loc_1a1ba7;
    eax = 0x0000002a;
    goto loc_1a1c0a;
loc_1a1ba7: // 0160:1a1ba7
    if ((int32_t)ebp >= (int32_t)0xfffffff0)
        goto loc_1a1bb3;
    eax = 0x00000029;
    goto loc_1a1c0a;
loc_1a1bb3: // 0160:1a1bb3
    eax = 0x00000028;
    goto loc_1a1c0a;
loc_1a1bba: // 0160:1a1bba
    edx = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)edx <= (int32_t)0x00000010)
        goto loc_1a1bcc;
    eax = 0x00000032;
    goto loc_1a1c0a;
loc_1a1bcc: // 0160:1a1bcc
    if ((int32_t)edx >= (int32_t)0xfffffff0)
        goto loc_1a1bd8;
    eax = 0x00000031;
    goto loc_1a1c0a;
loc_1a1bd8: // 0160:1a1bd8
    eax = 0x00000030;
    goto loc_1a1c0a;
loc_1a1bdf: // 0160:1a1bdf
    edx = memoryAGet32(ds, 0x39f024);
    eax = 0x00000011;
    if (!edx)
        goto loc_1a1c0a;
    ecx = memoryAGet32(ds, 0x39efb8);
    if ((int32_t)ecx <= (int32_t)0x00000010)
        goto loc_1a1c00;
    eax = 0x00000013;
    goto loc_1a1c0a;
loc_1a1c00: // 0160:1a1c00
    if ((int32_t)ecx >= (int32_t)0xfffffff0)
        goto loc_1a1c0a;
    eax = 0x00000012;
loc_1a1c0a: // 0160:1a1c0a
    ebx = ebx * 0x000000ac;
    memoryASet32(ds, ebx + 3792010, eax);
    goto loc_19cf96;
}
void sub_1a1c1b() // 0160:1a1c1b +long
{
    esp -= 4;
    goto loc_1a1c1b;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19582 bytes
loc_1a1c1b: // 0160:1a1c1b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    esi = memoryAGet32(ds, 0x39ef98);
    eax = esi * 0x000000ac;
    if (ecx < 0x00000023)
        goto loc_1a1ca2;
    if (ecx <= 0x00000023)
        goto loc_1a2034;
    if (ecx < 0x0000002f)
        goto loc_1a1c7b;
    if (ecx <= 0x0000002f)
        goto loc_1a1e03;
    if (ecx < 0x00000037)
        goto loc_1a1c6d;
    if (ecx <= 0x00000037)
        goto loc_1a1d6b;
    if (ecx < 0x00000040)
        goto loc_19cf96;
    if (ecx <= 0x00000040)
        goto loc_1a214e;
    if (ecx == 0x00000041)
        goto loc_1a2186;
    goto loc_19cf96;
loc_1a1c6d: // 0160:1a1c6d
    if (ecx == 0x00000035)
        goto loc_1a2060;
    goto loc_19cf96;
loc_1a1c7b: // 0160:1a1c7b
    if (ecx < 0x00000027)
        goto loc_1a1c94;
    if (ecx <= 0x00000027)
        goto loc_1a1e03;
    if (ecx < 0x0000002c)
        goto loc_19cf96;
    goto loc_1a1db0;
loc_1a1c94: // 0160:1a1c94
    if (ecx == 0x00000025)
        goto loc_1a1d39;
    goto loc_19cf96;
loc_1a1ca2: // 0160:1a1ca2
    if (ecx < 0x00000016)
        goto loc_1a1cd4;
    if (ecx <= 0x00000016)
        goto loc_1a1e34;
    if (ecx < 0x00000020)
        goto loc_1a1cc6;
    if (ecx <= 0x00000020)
        goto loc_1a1f8c;
    if (ecx == 0x00000021)
        goto loc_1a1fd7;
    goto loc_19cf96;
loc_1a1cc6: // 0160:1a1cc6
    if (ecx == 0x0000001a)
        goto loc_1a1ed5;
    goto loc_19cf96;
loc_1a1cd4: // 0160:1a1cd4
    if (ecx < 0x00000005)
        goto loc_1a1cf2;
    if (ecx <= 0x00000005)
        goto loc_1a1d09;
    if (ecx < 0x00000007)
        goto loc_19cf96;
    if (ecx <= 0x00000009)
        goto loc_1a1dea;
    goto loc_19cf96;
loc_1a1cf2: // 0160:1a1cf2
    if (ecx < 0x00000001)
        goto loc_19cf96;
    if (ecx <= 0x00000003)
        goto loc_1a1d9d;
    goto loc_19cf96;
loc_1a1d09: // 0160:1a1d09
    eax = 0x00000004;
    edi = 0x00000010;
    ebp = 0x00000032;
    sub_1ac14b();
    eax = memoryAGet32(ds, 0x39eff4);
    memoryASet32(ds, 0x39efac, edi);
    eax--;
    memoryASet32(ds, 0x39f230, ebp);
    memoryASet32(ds, 0x39eff4, eax);
    goto loc_19cf96;
loc_1a1d39: // 0160:1a1d39
    eax = 0x00000024;
    ebx = 0x00000010;
    ecx = 0x00000032;
    sub_1ac14b();
loc_1a1d4d: // 0160:1a1d4d
    esi = memoryAGet32(ds, 0x39eff4);
    memoryASet32(ds, 0x39efac, ebx);
    esi--;
loc_1a1d5a: // 0160:1a1d5a
    memoryASet32(ds, 0x39f230, ecx);
    memoryASet32(ds, 0x39eff4, esi);
    goto loc_19cf96;
loc_1a1d6b: // 0160:1a1d6b
    eax = 0x00000036;
    edx = 0x00000010;
    ebx = 0x00000032;
    sub_1ac14b();
loc_1a1d7f: // 0160:1a1d7f
    ecx = memoryAGet32(ds, 0x39eff4);
    memoryASet32(ds, 0x39efac, edx);
    ecx--;
    memoryASet32(ds, 0x39f230, ebx);
    memoryASet32(ds, 0x39eff4, ecx);
    goto loc_19cf96;
loc_1a1d9d: // 0160:1a1d9d
    edx = 0x00000010;
    eax = 0;
    ebx = 0x00000032;
    sub_1ad6ac();
    goto loc_1a1d7f;
loc_1a1db0: // 0160:1a1db0
    eax = 0x00000002;
    ecx = 0x00000010;
    esi = 0x00000032;
    sub_1ad6ac();
    ebx = 0;
    edi = memoryAGet32(ds, 0x39eff4);
    memoryASet32(ds, 0x39f004, ebx);
    memoryASet32(ds, 0x39efac, ecx);
    edi--;
    memoryASet32(ds, 0x39f230, esi);
    memoryASet32(ds, 0x39eff4, edi);
    goto loc_19cf96;
loc_1a1dea: // 0160:1a1dea
    eax = 0x00000001;
    ebx = 0x00000010;
    ecx = 0x00000032;
    sub_1ad6ac();
    goto loc_1a1d4d;
loc_1a1e03: // 0160:1a1e03
    eax = 0x00000001;
    ebp = 0x00000010;
    sub_1ad6ac();
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x39eff4);
    memoryASet32(ds, 0x39efac, ebp);
    edx--;
    memoryASet32(ds, 0x39f230, eax);
    memoryASet32(ds, 0x39eff4, edx);
    goto loc_19cf96;
loc_1a1e34: // 0160:1a1e34
    eax = memoryAGet32(ds, 0x39f008);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax + 4;
    eax = esi * 0x000000ac;
    memoryASet32(ds, 0x39efac, 0x00000010);
    edx <<= 9;
    memoryASet32(ds, eax + 3792026, edx);
    eax = memoryAGet32(ds, 0x39f00c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax + 2;
    eax = esi * 0x000000ac;
    edx <<= 9;
    memoryASet32(ds, eax + 3792030, edx);
    eax = esi * 0x000000ac;
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792026);
    memoryASet32(ds, edx + 3792034, eax);
    eax = esi * 0x000000ac;
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792030);
    edx = 0x00000032;
    memoryASet32(ds, esi + 3792038, eax);
    sub_19dc9c();
    eax = 0x0000004b;
    memoryASet32(ds, 0x39f230, edx);
    memoryASet32(ds, 0x39f044, eax);
    goto loc_19cf96;
loc_1a1ed5: // 0160:1a1ed5
    eax = esi;
    edx = esi * 0x000000ac;
    edi = 0x00000010;
    ebp = 0;
    memoryASet32(ds, 0x39efac, edi);
    sub_1a2467();
    eax = 0x00000001;
    memoryASet32(ds, 0x39f190, ebp);
    memoryASet32(ds, 0x39f0f0, eax);
    eax = memoryAGet32(ds, edx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = esi * 0x000000ac;
    ebx = eax + -4;
    eax = memoryAGet32(ds, edx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_1aac75();
    if (eax)
        goto loc_1a1f4b;
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 3792030, memoryAGet32(ds, eax + 3792030) - 0x00000800);
loc_1a1f4b: // 0160:1a1f4b
    eax = esi * 0x000000ac;
    ebx = 0xfffffa01;
    ecx = 0x00000032;
    edi = 0;
    memoryASet32(ds, eax + 3792022, ebx);
    ebx = 0x000000ff;
    memoryASet32(ds, 0x39f230, ecx);
    eax = esi;
    memoryASet32(ds, 0x39eff4, edi);
    sub_19ce55();
    edx = eax;
    eax = 0x00000034;
loc_1a1f82: // 0160:1a1f82
    sub_1b9c1d();
    goto loc_19cf96;
loc_1a1f8c: // 0160:1a1f8c
    eax = esi * 0x000000ac;
    esi = esi * 0x000000ac;
    ecx = 0x00000001;
    edi = 0x00000021;
    memoryASet32(ds, 0x39f020, ecx);
    ebp = 0;
    memoryASet32(ds, eax + 3792006, edi);
    memoryASet32(ds, esi + 3792002, ebp);
    if (memoryAGet32(ds, 0x39f034) != 0x00000000)
        goto loc_1a1fcb;
    memoryASet32(ds, 0x39f034, ecx);
    memoryASet32(ds, 0x39f038, ebp);
loc_1a1fcb: // 0160:1a1fcb
    ecx = 0x00000032;
    esi = 0;
    goto loc_1a1d5a;
loc_1a1fd7: // 0160:1a1fd7
    if (memoryAGet32(ds, eax + 3792018) != 0x00000000)
        goto loc_1a1ff8;
    eax = esi;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000025;
    sub_1b9c1d();
loc_1a1ff8: // 0160:1a1ff8
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3792050);
    eax <<= 12;
    memoryASet32(ds, esi + 3792018, eax);
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax <<= 4;
    ebx = 0x00000032;
    memoryASet32(ds, esi + 3792002, eax);
    memoryASet32(ds, 0x39f230, ebx);
    goto loc_19cf96;
loc_1a2034: // 0160:1a2034
    eax = 0x00000022;
    edi = 0x00000010;
    sub_1ad6ac();
    ebp = 0;
    eax = 0x00000032;
    memoryASet32(ds, 0x39efac, edi);
    memoryASet32(ds, 0x39eff4, ebp);
    memoryASet32(ds, 0x39f230, eax);
    goto loc_19cf96;
loc_1a2060: // 0160:1a2060
    edi = 0x00000010;
    edx = 0x00000032;
    ebp = 0;
    memoryASet32(ds, 0x39efac, edi);
    memoryASet32(ds, 0x39eff4, ebp);
    memoryASet32(ds, 0x39f230, edx);
    ebx = memoryAGet32(ds, eax + 3792050);
    edx = 0xfffff400;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1a2092;
    edx = 0x00000a00;
loc_1a2092: // 0160:1a2092
    esi = esi * 0x000000ac;
    ecx = 0x00002400;
    ebx = 0x00001000;
    eax = memoryAGet32(ds, esi + 3792030);
    edi = memoryAGet32(ds, esi + 3792026);
    eax -= 0x00000800;
    edi += edx;
    edx = eax;
    eax = edi;
    sub_1addbd();
    if (!eax)
        goto loc_19cf96;
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792058, 0x00000001);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3792002, edx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edx = memoryAGet32(ds, esi + 3792050);
    memoryASet32(ds, eax + 3792050, edx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edx <<= 9;
    memoryASet32(ds, eax + 3792018, edx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edi = 0;
    memoryASet32(ds, eax + 3792022, edi);
    eax = memoryAGet32(ds, 0x39ef98);
    edx = 0x00000002;
    sub_19ce55();
    ecx = eax;
    eax = 0;
    ebx = 0x00000040;
    sub_1a9cc8();
    eax += 0x00000003;
    edx = ecx;
    goto loc_1a1f82;
loc_1a214e: // 0160:1a214e
    edi = 0x00000041;
    ebp = 0;
    memoryASet32(ds, eax + 3792006, edi);
    memoryASet32(ds, eax + 3792002, ebp);
    memoryASet32(ds, 0x39f230, 0x00000032);
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000002e;
    goto loc_1a1f82;
loc_1a2186: // 0160:1a2186
    edx = 0x00000003;
    ebx = 0;
    memoryASet32(ds, 0x39f064, edx);
    memoryASet32(ds, eax + 3792006, ebx);
    esi = 0x00000032;
    memoryASet32(ds, eax + 3792002, ebx);
    memoryASet32(ds, 0x39f230, esi);
    goto loc_19cf96;
}
void sub_1a21af() // 0160:1a21af +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3792038);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 3792050);
    ecx = eax + -3;
    if (edx != 0x00000001)
        goto loc_1a21f9;
    eax = 0x002a4558;
    esi -= 0x00000002;
    goto loc_1a2201;
loc_1a21f9: // 0160:1a21f9
    eax = 0x0030f298;
    esi -= 0x0000000e;
loc_1a2201: // 0160:1a2201
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000008);
    edx = 0x003155a8;
    push32(0x00000010);
    ecx -= 0x00000002;
    ebx = esi;
    sub_1afa94();
    esi = pop32();
    stop("stack_below", "0160:1a221e");
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1a2223() // 0160:1a2223 +long
{
    esp -= 4;
    goto loc_1a2223;
loc_19f8b7: // 0160:19f8b7
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10598 bytes
loc_1a2223: // 0160:1a2223
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    memoryASet32(ds, esp, edx);
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3792038);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 3792050);
    ebp = eax;
    if (edx != 0x00000001)
        goto loc_1a2272;
    eax = 0x00000002;
    goto loc_1a2277;
loc_1a2272: // 0160:1a2272
    eax = 0xfffffffc;
loc_1a2277: // 0160:1a2277
    ecx = 0x00001400;
    edx = ebp;
    eax += edi;
    edx <<= 9;
    eax <<= 9;
    ebx = ecx;
    sub_1addbd();
    if (!eax)
        goto loc_1a2335;
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792058, 0x00000001);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792002, ebx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792030, memoryAGet32(ds, eax + 3792030) - 0x00000200);
    edx = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3792026);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax + 3792026))
        goto loc_1a22f8;
    edx = 0xffffffff;
    goto loc_1a22fd;
loc_1a22f8: // 0160:1a22f8
    edx = 0x00000001;
loc_1a22fd: // 0160:1a22fd
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x39efe0);
    edx = eax;
    eax = ecx * 0x000000ac;
    edx <<= 8;
    memoryASet32(ds, eax + 3792018, edx);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, 0x39efe0);
    edx = memoryAGet32(ds, edx + 3792114);
    sub_1a31e0();
loc_1a2335: // 0160:1a2335
    edx = 0;
    memoryASet32(ds, 0x39f024, edx);
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = esi * 0x000000ac;
    edx += 0x00000006;
    edx <<= 4;
    if (edx != memoryAGet32(ds, eax + 3792002))
        goto loc_1a244d;
    ebx = ebp + 4;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1a23f0;
    if (edi >= 0x000003c0)
        goto loc_1a23f0;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = edi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    ax = memoryAGet16(ds, stop("GetOpAddress"));
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1a23f0;
    eax = esi;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000035;
    sub_1b9c1d();
loc_1a23f0: // 0160:1a23f0
    ecx = 0x00000600;
    eax = esi;
    ebx = ebp + 10;
    edx = edi + 8;
    memoryASet32(ds, 0x39f028, ecx);
    sub_1a21af();
    eax = esi;
    sub_1aac75();
    ebx = eax;
    eax = esi * 0x000000ac;
    if (ebx)
        goto loc_1a2445;
    edx = memoryAGet32(ds, 0x39f078);
    edi = memoryAGet32(ds, eax + 3792022);
    ebx = memoryAGet32(ds, eax + 3792030);
    edi += edx;
    ebx += edi;
    memoryASet32(ds, eax + 3792022, edi);
    memoryASet32(ds, eax + 3792030, ebx);
    memoryASet32(ds, eax + 3792038, ebx);
    goto loc_1a244d;
loc_1a2445: // 0160:1a2445
    esi = 0;
    memoryASet32(ds, eax + 3792022, esi);
loc_1a244d: // 0160:1a244d
    if ((int32_t)ebp <= (int32_t)0x00000178)
        goto loc_1a245f;
    memoryASet32(ds, 0x39f000, 0x00000001);
loc_1a245f: // 0160:1a245f
    esp += 0x00000004;
    goto loc_19f8b7;
}
void sub_1a2467() // 0160:1a2467 +long
{
    esp -= 4;
    goto loc_1a2467;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 21706 bytes
loc_1a2467: // 0160:1a2467
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax * 0x000000ac;
    if (memoryAGet32(ds, edx + 3792050) != 0x00000001)
        goto loc_1a2488;
    esi = 0x002a4598;
    edi = 0xfffffffc;
    goto loc_1a2492;
loc_1a2488: // 0160:1a2488
    esi = 0x0030f2d8;
    edi = 0xfffffff4;
loc_1a2492: // 0160:1a2492
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi += eax;
    eax = memoryAGet32(ds, ebx + 3792038);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, 0x39f190);
    ecx = eax + -15;
    if (ebp)
        goto loc_1a24f2;
    if ((int32_t)memoryAGet32(ds, ebx + 3792022) >= (int32_t)0x00000000)
        goto loc_1a24f2;
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000000e);
    edx = 0x003155a8;
    push32(0x00000010);
    ebx = edi;
    eax = esi;
    sub_1afa94();
loc_1a24f2: // 0160:1a24f2
    edx = memoryAGet32(ds, 0x39f190);
    edx++;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x39f190, edx);
    goto loc_19cf96;
}
void sub_1a2510() // 0160:1a2510 +long
{
    esp -= 4;
    goto loc_1a2510;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18406 bytes
loc_1a1783: // 0160:1a1783
    esp += 0x00000010;
    goto loc_19cf96;
    // gap 3461 bytes
loc_1a2510: // 0160:1a2510
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ebp = eax;
    edi = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = 0;
    memoryASet16(ds, 0x39ef86, dx);
    eax = memoryAGet32(ds, edi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, edi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp, 0x002a47e8);
    eax -= 0x00000006;
    ecx = memoryAGet32(ds, edi + 3792050);
    memoryASet32(ds, esp + 12, eax);
    if (ecx != 0xffffffff)
        goto loc_1a2576;
    esi -= 0x0000000c;
    goto loc_1a257e;
loc_1a2576: // 0160:1a2576
    memoryASet32(ds, esp + 4, 0x00000008);
loc_1a257e: // 0160:1a257e
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    ecx = 0x00001400;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, eax + 3792050);
    ebx = esi + 5;
    eax <<= 3;
    edx += 0x00000002;
    eax += ebx;
    edx <<= 9;
    eax <<= 9;
    ebx = ecx;
    sub_1addbd();
    if (!eax)
        goto loc_1a266b;
    ebx = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3792058) != 0x00000000)
        goto loc_1a266b;
    ecx = 0x00000001;
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, ebx + 3792058, ecx);
    eax = memoryAGet32(ds, eax + 3792050);
    edi = eax;
    edi <<= 2;
    edx = memoryAGet32(ds, 0x39efe0);
    edi -= eax;
    eax = edx * 0x000000ac;
    edi <<= 9;
    memoryASet32(ds, eax + 3792018, edi);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792022, 0xfffff600);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, edx + 3792050);
    memoryASet32(ds, eax + 3792050, edx);
    ebx = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, ebx + 3792030, memoryAGet32(ds, ebx + 3792030) - 0x00000200);
    edx = 0x0000001e;
    eax = memoryAGet32(ds, 0x39efe0);
    sub_1a31e0();
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x00000080;
    sub_19ce55();
    edx = eax;
    eax = 0x0000000b;
    sub_1b9c1d();
loc_1a266b: // 0160:1a266b
    if (memoryAGet32(ds, 0x39f034) == 0x00000000)
        goto loc_1a27a5;
    memoryASet32(ds, 0x39f038, memoryAGet32(ds, 0x39f038) + 1);
    ecx = memoryAGet32(ds, esp + 12);
    ecx += 0x00000006;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1a2787;
    ebx = memoryAGet32(ds, esp + 4);
    ebx += esi;
    if (ebx >= 0x000003c0)
        goto loc_1a2787;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ebx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    edi = ecx;
    eax = 0;
    edi <<= 4;
    ax = memoryAGet16(ds, 0x39ef86);
    edi -= ecx;
    eax &= edx;
    edi <<= 6;
    edx = 0;
    dl = memoryAGet(ds, edi + ebx + 3233192);
    stop("setne");
    edx &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1a2787;
    if ((int32_t)memoryAGet32(ds, 0x39f034) <= (int32_t)0x00000000)
        goto loc_1a2710;
    memoryASet32(ds, 0x39f034, 0x00000002);
loc_1a2710: // 0160:1a2710
    if ((int32_t)memoryAGet32(ds, 0x39f034) <= (int32_t)0x00000000)
        goto loc_1a2726;
    if ((int32_t)memoryAGet32(ds, 0x39f038) <= (int32_t)0x00000019)
        goto loc_1a27a5;
loc_1a2726: // 0160:1a2726
    edi = ebp * 0x000000ac;
    push32(0x00000000);
    ecx = 0x00000032;
    ebx = 0x00000026;
    edx = memoryAGet32(ds, edi + 3792030);
    eax = memoryAGet32(ds, edi + 3792026);
    edx -= 0x00004000;
    eax -= 0x00003000;
    sub_1abac7();
    edx = 0;
    memoryASet32(ds, 0x39f034, edx);
    memoryASet32(ds, 0x39f020, edx);
    memoryASet32(ds, edi + 3792026, edx);
    memoryASet32(ds, edi + 3792102, edx);
    ebx = 0x00000010;
    memoryASet32(ds, edi + 3792106, edx);
    memoryASet32(ds, 0x39efac, ebx);
    memoryASet32(ds, 0x39eff4, edx);
    goto loc_1a27a5;
loc_1a2787: // 0160:1a2787
    edi = memoryAGet32(ds, 0x39f034);
    if (edi != 0x00000002)
        goto loc_1a27a5;
    if ((int32_t)memoryAGet32(ds, 0x39f038) <= (int32_t)0x00000019)
        goto loc_1a27a5;
    edx = edi;
    edx = -edx;
    memoryASet32(ds, 0x39f034, edx);
loc_1a27a5: // 0160:1a27a5
    ebx = ebp * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    eax = esi;
    ecx = memoryAGet32(ds, ebx + 3792022);
    ebx = memoryAGet32(ds, ebx + 3792018);
    sub_1ab614();
    if ((int32_t)(esi & esi) <= 0)
        goto loc_1a27f5;
    if ((int32_t)esi >= (int32_t)0x000003b8)
        goto loc_1a27f5;
    push32(0x000003c0);
    push32(0x00000140);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x0000000a);
    edx = 0x003155a8;
    eax = memoryAGet32(ds, esp + 12);
    push32(0x0000000e);
    ebx = esi;
    ecx -= 0x00000002;
    sub_1afa94();
    goto loc_1a2838;
loc_1a27f5: // 0160:1a27f5
    if (stop("postCondition"))
        goto loc_1a2821;
    push32(0x000003c0);
    push32(0x00000140);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x0000000a);
    ebx = 0xfffffffe;
    edx = 0x003155a8;
    push32(0x0000000e);
    eax = memoryAGet32(ds, esp + 16);
    ecx -= 0x00000002;
    sub_1afa94();
loc_1a2821: // 0160:1a2821
    eax = ebp * 0x000000ac;
    memoryASet32(ds, eax + 3792026, 0x00078200);
    eax = ebp;
    sub_19cf9d();
loc_1a2838: // 0160:1a2838
    memoryASet16(ds, 0x39ef86, 0xffff);
    goto loc_1a1783;
}
void sub_1a28a1() // 0160:1a28a1 +long
{
    esp -= 4;
    goto loc_1a28a1;
loc_19f8b7: // 0160:19f8b7
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 12260 bytes
loc_1a28a1: // 0160:1a28a1
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000020;
    esi = eax;
    memoryASet32(ds, esp + 8, edx);
    ecx = eax * 0x000000ac;
    edx = 0xfffffffd;
    ebx = memoryAGet32(ds, 0x39ef94);
    edi = 0;
    ebx++;
    memoryASet32(ds, esp + 16, edx);
    memoryASet32(ds, 0x39ef94, ebx);
    memoryASet32(ds, esp + 28, edi);
    ecx = memoryAGet32(ds, ecx + 3792050);
    memoryASet32(ds, 0x39f028, edi);
    if (ecx != 0x00000001)
        goto loc_1a28fa;
    ebx = 0x002a46e8;
    edi = 0xfffffffe;
    ebp = 0x00000006;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, ebp);
    goto loc_1a2910;
loc_1a28fa: // 0160:1a28fa
    eax = 0x0030f428;
    edi = 0xfffffff2;
    edx = 0xfffffffa;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp, edx);
loc_1a2910: // 0160:1a2910
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, edx + 3792002);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    eax -= memoryAGet32(ds, stop("GetOpAddress"));
    eax <<= 4;
    ebp = eax + -96;
    if (ecx != 0x00000001)
        goto loc_1a295a;
    edx = 0x00000007;
    ebx = 0x00000009;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
    goto loc_1a296c;
loc_1a295a: // 0160:1a295a
    ebx = 0x00000005;
    eax = 0x00000009;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp + 20, eax);
loc_1a296c: // 0160:1a296c
    if (ecx != 0x00000001)
        goto loc_1a29a8;
    if ((int32_t)memoryAGet32(ds, 0x39efb8) > (int32_t)0xfffffff0)
        goto loc_1a29a8;
    edx = 0x00000400;
    ebx = 0x00000002;
    ebp += 0x00000050;
    eax = 0;
    edi += ecx;
    memoryASet32(ds, 0x39f028, edx);
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x00000005;
    ebx = 0x0000000a;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
loc_1a29a8: // 0160:1a29a8
    if (ecx != 0x00000001)
        goto loc_1a29ee;
    if ((int32_t)memoryAGet32(ds, 0x39efb8) < (int32_t)0x00000010)
        goto loc_1a29ee;
    edx = 0xfffffc00;
    ebx = 0xffffffff;
    eax = 0xfffffff8;
    ebp += 0x000000a0;
    edi -= 0x00000003;
    memoryASet32(ds, 0x39f028, edx);
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x0000000a;
    ebx = 0x0000000d;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
loc_1a29ee: // 0160:1a29ee
    if (ecx != 0xffffffff)
        goto loc_1a2a2f;
    if ((int32_t)memoryAGet32(ds, 0x39efb8) < (int32_t)0x00000010)
        goto loc_1a2a2f;
    edx = 0xfffffc00;
    eax = 0xfffffff8;
    ebx = 0x0000000b;
    memoryASet32(ds, esp + 28, ecx);
    ebp += 0x000000a0;
    edi += 0x00000003;
    memoryASet32(ds, 0x39f028, edx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x00000002;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 24, edx);
loc_1a2a2f: // 0160:1a2a2f
    if (ecx != 0xffffffff)
        goto loc_1a2a6c;
    if ((int32_t)memoryAGet32(ds, 0x39efb8) > (int32_t)0xfffffff0)
        goto loc_1a2a6c;
    eax = 0x00000400;
    edx = 0x00000002;
    ecx = 0x00000008;
    ebp += 0x00000050;
    edi--;
    ebx = 0;
    memoryASet32(ds, 0x39f028, eax);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 16, ebx);
    eax = 0x0000000b;
    memoryASet32(ds, esp + 24, ecx);
    memoryASet32(ds, esp + 20, eax);
loc_1a2a6c: // 0160:1a2a6c
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3792038);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 16);
    ebx = 0x00000600;
    edx += eax;
    eax = memoryAGet32(ds, esp);
    edx <<= 9;
    eax += ecx;
    ecx = 0x00001400;
    eax <<= 9;
    sub_1addbd();
    if (!eax)
        goto loc_1a2ba6;
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792058, 0x00000001);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792002, ebx);
    ebx = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, ebx + 3792030, memoryAGet32(ds, ebx + 3792030) - 0x00000200);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792026);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, edx + 3792026))
        goto loc_1a2b25;
    edx = 0xffffffff;
    goto loc_1a2b2a;
loc_1a2b25: // 0160:1a2b25
    edx = 0x00000001;
loc_1a2b2a: // 0160:1a2b2a
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    ebx <<= 8;
    memoryASet32(ds, eax + 3792018, ebx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792050, edx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792022, 0xfffffe80);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792114);
    eax = memoryAGet32(ds, 0x39efe0);
    sub_1a31e0();
    eax = esi;
    edx = 0x00000002;
    sub_19ce55();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1a9cc8();
    eax += 0x00000003;
    edx = ecx;
    sub_1b9c1d();
loc_1a2ba6: // 0160:1a2ba6
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax += 0x00000006;
    eax <<= 4;
    if (eax != memoryAGet32(ds, edx + 3792002))
        goto loc_1a2be4;
    eax = esi;
    ebx = 0x00000020;
    sub_19ce55();
    edx = eax;
    eax = 0x0000002c;
    sub_1b9c1d();
loc_1a2be4: // 0160:1a2be4
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    ebx = esi * 0x000000ac;
    eax += 0x00000006;
    eax <<= 4;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, ebx + 3792002))
        goto loc_1a2cc0;
    if (memoryAGet(ds, ebx + 3792002) & 0x0f)
        goto loc_1a2cc0;
    memoryASet32(ds, 0x39f024, 0x00000600);
    eax = memoryAGet32(ds, ebx + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax += edi;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, ebx + 3792038);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000000d);
    push32(0x00000010);
    edi = memoryAGet32(ds, esp + 44);
    ebx = memoryAGet32(ds, esp + 28);
    eax -= 0x0000000b;
    edx = 0x003155a8;
    edi += eax;
    eax = memoryAGet32(ds, esp + 20);
    ecx = edi;
    eax += ebp;
    sub_1afa94();
    eax = memoryAGet32(ds, esp + 24);
    ebp = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 28);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 12, ebp);
    edi += eax;
    if (edx)
        goto loc_1a2c9d;
    edi += 0x00000004;
loc_1a2c9d: // 0160:1a2c9d
    edx = memoryAGet32(ds, esp + 12);
    ebx = edi;
    eax = esi;
    sub_1aac75();
    if (!eax)
        goto loc_1a2cb6;
    if ((int32_t)edi <= (int32_t)0x0000017e)
        goto loc_1a2cc0;
loc_1a2cb6: // 0160:1a2cb6
    memoryASet32(ds, 0x39f000, 0x00000001);
loc_1a2cc0: // 0160:1a2cc0
    esp += 0x00000020;
    goto loc_19f8b7;
}
void sub_1a2cc8() // 0160:1a2cc8 +long
{
    esp -= 4;
    goto loc_1a2cc8;
loc_19f8b7: // 0160:19f8b7
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13323 bytes
loc_1a2cc8: // 0160:1a2cc8
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    esi = edx;
    edx = memoryAGet32(ds, 0x39ef98);
    if (eax != edx)
        goto loc_1a2cee;
    if (edx != edx)
        goto loc_1a2cf8;
    eax = edx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792006) == 0x00000000)
        goto loc_1a2cf8;
loc_1a2cee: // 0160:1a2cee
    memoryASet32(ds, 0x39f230, 0x00000032);
loc_1a2cf8: // 0160:1a2cf8
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000010)
        goto loc_1a2d22;
    if (memoryAGet32(ds, 0x39f000) == 0x00000000)
        goto loc_1a2d22;
    if (memoryAGet32(ds, eax + 3792002) == 0x00000000)
        goto loc_1a2d22;
    edx = esi;
    eax = ecx;
    sub_1a28a1();
loc_1a2d22: // 0160:1a2d22
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000014)
        goto loc_1a2d43;
    if (memoryAGet32(ds, 0x39f000) == 0x00000000)
        goto loc_1a2d43;
    edx = esi;
    eax = ecx;
    sub_1a2223();
loc_1a2d43: // 0160:1a2d43
    if (memoryAGet32(ds, 0x39f0f0) == 0x00000000)
        goto loc_1a2d66;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792022) == 0x00000000)
        goto loc_1a2d66;
    eax = ecx;
    sub_1a2467();
loc_1a2d66: // 0160:1a2d66
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x0000001f)
        goto loc_1a2d85;
    if (memoryAGet32(ds, 0x39f020) == 0x00000000)
        goto loc_1a2d85;
    eax = ecx;
    sub_1a2510();
loc_1a2d85: // 0160:1a2d85
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 3792006) != 0x0000000d)
        goto loc_1a2dca;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax += 0x0000001c;
    edi = memoryAGet32(ds, edx + 3792002);
    eax <<= 4;
    if (eax != edi)
        goto loc_1a2dca;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000000a;
    sub_1b9c1d();
loc_1a2dca: // 0160:1a2dca
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 3792006) != 0x00000019)
        goto loc_1a2e0f;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax += 0x00000006;
    ebx = memoryAGet32(ds, edx + 3792002);
    eax <<= 4;
    if (eax != ebx)
        goto loc_1a2e0f;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000034;
    sub_1b9c1d();
loc_1a2e0f: // 0160:1a2e0f
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 3792006) != 0x0000000f)
        goto loc_1a2ea5;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax += 0x00000005;
    ebp = memoryAGet32(ds, edx + 3792002);
    eax <<= 4;
    if (eax != ebp)
        goto loc_1a2ea5;
    eax = memoryAGet32(ds, 0x39ef94);
    if ((int32_t)eax <= (int32_t)0x000001f4)
        goto loc_1a2e86;
    edx = 0x00000001;
    eax = 0;
    sub_1a9cc8();
    if (eax)
        goto loc_1a2e71;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000001c;
    goto loc_1a2ea0;
loc_1a2e71: // 0160:1a2e71
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000030;
    goto loc_1a2ea0;
loc_1a2e86: // 0160:1a2e86
    if ((int32_t)eax <= (int32_t)0x00000096)
        goto loc_1a2ea5;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000022;
loc_1a2ea0: // 0160:1a2ea0
    sub_1b9c1d();
loc_1a2ea5: // 0160:1a2ea5
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792006) != 0x00000000)
        goto loc_1a2f06;
    ebx = memoryAGet32(ds, eax + 3792074);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    ebp = memoryAGet32(ds, eax + 3792002);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    ebx = memoryAGet32(ds, eax + 3792074);
    ebp += edx;
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    ebx = memoryAGet32(ds, eax + 3792074);
    memoryASet32(ds, eax + 3792158, edx);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    memoryASet32(ds, eax + 3792002, ebp);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    goto loc_1a2f34;
loc_1a2f06: // 0160:1a2f06
    edx = esi;
    edx <<= 2;
    edx -= esi;
    edi = memoryAGet32(ds, eax + 3792002);
    edi += memoryAGet32(ds, stop("GetOpAddress"));
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, eax + 3792002, edi);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, eax + 3792158, ebx);
loc_1a2f34: // 0160:1a2f34
    memoryASet32(ds, eax + 3792162, edx);
    edx = ecx * 0x000000ac;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax <<= 3;
    if ((int32_t)memoryAGet32(ds, eax + 1950614) <= (int32_t)0x00000000)
        goto loc_1a2f8d;
    eax = memoryAGet32(ds, eax + 1950606);
    ebp = memoryAGet32(ds, edx + 3792002);
    eax <<= 4;
    if ((int32_t)eax <= (int32_t)ebp)
        goto loc_1a2f6c;
    memoryASet32(ds, edx + 3792002, eax);
loc_1a2f6c: // 0160:1a2f6c
    eax = esi;
    eax <<= 2;
    eax -= esi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = ecx * 0x000000ac;
    edx <<= 4;
    if ((int32_t)edx > (int32_t)memoryAGet32(ds, eax + 3792002))
        goto loc_1a2fdc;
    goto loc_1a2fd3;
loc_1a2f8d: // 0160:1a2f8d
    ebx = memoryAGet32(ds, eax + 1950610);
    edi = memoryAGet32(ds, edx + 3792002);
    ebx <<= 4;
    if ((int32_t)ebx <= (int32_t)edi)
        goto loc_1a2faf;
    eax = memoryAGet32(ds, eax + 1950606);
    eax <<= 4;
    memoryASet32(ds, edx + 3792002, eax);
loc_1a2faf: // 0160:1a2faf
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792002);
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    ebx -= 0x00000004;
    eax <<= 4;
    if ((int32_t)ebx > (int32_t)eax)
        goto loc_1a2fdc;
loc_1a2fd3: // 0160:1a2fd3
    eax = ecx;
    sub_1a178b();
    esi = eax;
loc_1a2fdc: // 0160:1a2fdc
    ecx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 3792002);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edi = memoryAGet32(ds, ecx + 3792002);
    eax <<= 4;
    if ((int32_t)eax > (int32_t)edi)
        goto loc_1a3022;
    if (memoryAGet32(ds, 0x39efac) == 0x00000010)
        goto loc_1a3022;
    eax = esi;
    sub_1a1c1b();
loc_1a3022: // 0160:1a3022
    eax = edx;
    goto loc_19f8b7;
}
void sub_1a3029() // 0160:1a3029 +long
{
    esp -= 4;
    goto loc_1a3029;
loc_19f8b7: // 0160:19f8b7
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14188 bytes
loc_1a3029: // 0160:1a3029
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = eax;
    esi = eax * 0x000000ac;
    ebp = memoryAGet32(ds, esi + 3792074);
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    ebx = memoryAGet32(ds, esi + 3792082);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    stop("imul edx * ebx");
    ecx = memoryAGet32(ds, esi + 3792002);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    ecx += edx;
    eax <<= 4;
    memoryASet32(ds, esi + 3792002, ecx);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1a3078;
    memoryASet32(ds, esi + 3792002, eax);
loc_1a3078: // 0160:1a3078
    edx = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax <<= 3;
    ecx = memoryAGet32(ds, eax + 1950610);
    ecx <<= 4;
    if ((int32_t)ecx > (int32_t)memoryAGet32(ds, edx + 3792002))
        goto loc_1a30a8;
    eax = memoryAGet32(ds, eax + 1950606);
    eax <<= 4;
    memoryASet32(ds, edx + 3792002, eax);
loc_1a30a8: // 0160:1a30a8
    esi = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax <<= 4;
    if (eax != memoryAGet32(ds, esi + 3792002))
        goto loc_1a30df;
    eax = memoryAGet32(ds, esi + 3792026);
    memoryASet32(ds, esi + 3792034, eax);
    eax = memoryAGet32(ds, esi + 3792030);
    memoryASet32(ds, esi + 3792038, eax);
loc_1a30df: // 0160:1a30df
    esi = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax <<= 4;
    if (eax == memoryAGet32(ds, esi + 3792002))
        goto loc_1a310c;
    eax = memoryAGet32(ds, esi + 3792050);
    if (eax == memoryAGet32(ds, esi + 3792054))
        goto loc_1a315f;
loc_1a310c: // 0160:1a310c
    esi = edi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esi + 3792050);
    ecx = esp + 4;
    push32(edx);
    edx = esp + 4;
    ebx = eax;
    push32(edx);
    eax = edi;
    edx = memoryAGet32(ds, esp + 16);
    sub_1aac47();
    memoryASet32(ds, esi + 3792046, eax);
loc_1a315f: // 0160:1a315f
    esi = edi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3792002);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    ecx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, esi + 3792158, ecx);
    memoryASet32(ds, esi + 3792162, eax);
    if (edi != memoryAGet32(ds, 0x39ef98))
        goto loc_1a31d6;
    ebp = memoryAGet32(ds, 0x39f030);
    edx += ebp;
    if (ebp != 0x00000005)
        goto loc_1a31b9;
    ebx = eax + 3;
    memoryASet32(ds, esi + 3792162, ebx);
loc_1a31b9: // 0160:1a31b9
    if (memoryAGet32(ds, 0x39f030) != 0x0000000a)
        goto loc_1a31ce;
    edi = edi * 0x000000ac;
    memoryASet32(ds, edi + 3792162, memoryAGet32(ds, edi + 3792162) - 1);
loc_1a31ce: // 0160:1a31ce
    edi = 0;
    memoryASet32(ds, 0x39f030, edi);
loc_1a31d6: // 0160:1a31d6
    eax = edx;
    esp += 0x0000000c;
    goto loc_19f8b7;
}
void sub_1a31e0() // 0160:1a31e0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edi);
    eax = eax * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3792106);
    ebx += edx;
    memoryASet32(ds, eax + 3792106, ebx);
    if (memoryAGet32(ds, 0x39f22c) == 0x00000000)
        goto loc_1a3220;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, eax + 3792102))
        goto loc_1a3220;
    edi = 0;
    memoryASet32(ds, eax + 3792102, edi);
    edx = 0x00000001;
    memoryASet32(ds, eax + 3792106, edi);
    memoryASet32(ds, eax + 3792098, edx);
loc_1a3220: // 0160:1a3220
    edi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a3223() // 0160:1a3223 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = edx;
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edi = memoryAGet32(ds, edx + 3792050);
    ebx = 0xffffee00;
    if ((int32_t)(edi & edi) <= 0)
        goto loc_1a3247;
    ebx = 0x00000800;
loc_1a3247: // 0160:1a3247
    edx = ecx + -2048;
    eax += ebx;
    ecx = 0x00004000;
    ebx = 0x00001000;
    sub_1addbd();
    if (!eax)
        goto loc_1a33ec;
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792058, 0x00000001);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792050);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x39efe0);
    edx = eax;
    eax = ecx * 0x000000ac;
    edx <<= 8;
    memoryASet32(ds, eax + 3792018, edx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792022, 0xfffffc00);
    ebx = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edx = 0;
    memoryASet16(ds, 0x39ef86, dx);
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -2;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1a332a;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1a332a;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    if (eax)
        goto loc_1a333e;
loc_1a332a: // 0160:1a332a
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792030, memoryAGet32(ds, eax + 3792030) - 0x00000400);
loc_1a333e: // 0160:1a333e
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet16(ds, 0x39ef86, 0xffff);
    eax = memoryAGet32(ds, eax + 3792050);
    memoryASet32(ds, edx + 3792050, eax);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, 0x39f01c, 0x002718d8);
    edx = memoryAGet32(ds, eax + 3792026);
    memoryASet32(ds, 0x39f010, edx);
    if ((int32_t)memoryAGet32(ds, eax + 3792050) > (int32_t)0x00000000)
        goto loc_1a339a;
    memoryASet32(ds, 0x39f010, memoryAGet32(ds, 0x39f010) - 0x00001c00);
loc_1a339a: // 0160:1a339a
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792030);
    esi = 0x00000001;
    edx += 0x00000e00;
    memoryASet32(ds, 0x39f018, esi);
    memoryASet32(ds, 0x39f014, edx);
    edx = memoryAGet32(ds, eax + 3792114);
    eax = memoryAGet32(ds, 0x39efe0);
    sub_1a31e0();
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000000b;
    sub_1b9c1d();
loc_1a33ec: // 0160:1a33ec
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a33f1() // 0160:1a33f1 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    ebx = eax;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792062) != 0x00000000)
        goto loc_1a3417;
    if (memoryAGet32(ds, eax + 3792006) != 0x00000000)
        goto loc_1a3417;
    if (memoryAGet32(ds, eax + 3792058) == 0x00000000)
        goto loc_1a344b;
loc_1a3417: // 0160:1a3417
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792026);
    memoryASet32(ds, eax + 3792034, edx);
    edx = memoryAGet32(ds, eax + 3792030);
    edi = memoryAGet32(ds, eax + 3792006);
    memoryASet32(ds, eax + 3792038, edx);
    if (edi != 0x0000001b)
        goto loc_1a344b;
    eax = memoryAGet32(ds, eax + 3792026);
    sub_1a3223();
loc_1a344b: // 0160:1a344b
    if (memoryAGet32(ds, 0x39f020) == 0x00000000)
        goto loc_1a3480;
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792018);
    ebx = memoryAGet32(ds, eax + 3792026);
    ebx += edx;
    memoryASet32(ds, eax + 3792026, ebx);
    edx = memoryAGet32(ds, eax + 3792030);
    memoryASet32(ds, eax + 3792034, ebx);
    memoryASet32(ds, eax + 3792038, edx);
loc_1a3480: // 0160:1a3480
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a3484() // 0160:1a3484 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x39f03c);
    if (!edx)
        goto loc_1a34a6;
    ebx = 0x00000032;
    ecx = edx + -1;
    memoryASet32(ds, 0x39f230, ebx);
    memoryASet32(ds, 0x39f03c, ecx);
loc_1a34a6: // 0160:1a34a6
    ecx = 0x00000032;
    ebx = 0x00000001;
    edx = 0;
    goto loc_1a34f9;
loc_1a34b4: // 0160:1a34b4
    eax = edx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_1a34f8;
    if (memoryAGet32(ds, eax + 3792006) != 0x0000000a)
        goto loc_1a34e9;
    sub_19cd59();
    esi = 0x00000080;
    edx = 0x00000010;
    memoryASet32(ds, 0x39f230, ecx);
    memoryASet32(ds, 0x39f03c, esi);
    goto loc_1a34f8;
loc_1a34e9: // 0160:1a34e9
    if (memoryAGet32(ds, eax + 3792102) != 0x00000000)
        goto loc_1a34f8;
    memoryASet32(ds, eax + 3792122, ebx);
loc_1a34f8: // 0160:1a34f8
    edx++;
loc_1a34f9: // 0160:1a34f9
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1a34b4;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a3503() // 0160:1a3503 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x1df9fc);
    edx = memoryAGet32(ds, 0x39f1dc);
    ebx--;
    if (edx)
        goto loc_1a3537;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax == memoryAGet32(ds, 0x39ef9c))
        goto loc_1a3537;
    memoryASet32(ds, 0x39f1dc, 0x00000001);
loc_1a3537: // 0160:1a3537
    if (ebx != memoryAGet32(ds, 0x39ef98))
        goto loc_1a3549;
    memoryASet32(ds, 0x39f1d0, 0x00000001);
loc_1a3549: // 0160:1a3549
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x39ef9c))
        goto loc_1a356c;
    memoryASet32(ds, 0x39f1d4, 0x00000001);
    goto loc_1a35a8;
loc_1a356c: // 0160:1a356c
    edx = 0x00000001;
    eax = 0;
    sub_1a9cc8();
    if (eax)
        goto loc_1a3586;
    memoryASet32(ds, 0x39f1e4, 0x00000001);
loc_1a3586: // 0160:1a3586
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, 0x1dfa00);
    if (edx != memoryAGet32(ds, eax + 3792114))
        goto loc_1a35a8;
    memoryASet32(ds, 0x39f1c8, 0x00000001);
loc_1a35a8: // 0160:1a35a8
    if (ebx != memoryAGet32(ds, 0x39f1f8))
        goto loc_1a35ca;
    edx = 0x00000001;
    eax = 0;
    sub_1a9cc8();
    if (eax)
        goto loc_1a35ca;
    memoryASet32(ds, 0x39f1f4, 0x00000001);
loc_1a35ca: // 0160:1a35ca
    memoryASet32(ds, 0x39f1f8, ebx);
    ebx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, ebx + 3792118, eax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a35e4() // 0160:1a35e4 +long
{
    esp -= 4;
    goto loc_1a35e4;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 26183 bytes
loc_1a35e4: // 0160:1a35e4
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x39ef98);
    eax = eax * 0x000000ac;
    ecx = 0;
    edx = memoryAGet32(ds, eax + 3792106);
    ebx = memoryAGet32(ds, eax + 3792102);
    memoryASet32(ds, 0x3a74e4, ecx);
    if ((int32_t)edx <= (int32_t)ebx)
        goto loc_1a3611;
    esi = ebx;
    goto loc_1a3613;
loc_1a3611: // 0160:1a3611
    esi = edx;
loc_1a3613: // 0160:1a3613
    ebp = memoryAGet32(ds, 0x39ef98);
    edx = 0;
    eax = 0;
loc_1a361d: // 0160:1a361d
    if (memoryAGet32(ds, eax + 3792026) == 0x00000000)
        goto loc_1a363e;
    if (edx == ebp)
        goto loc_1a363e;
    ebx = memoryAGet32(ds, eax + 3792106);
    edi = memoryAGet32(ds, eax + 3792102);
    if ((int32_t)ebx <= (int32_t)edi)
        goto loc_1a363c;
    ebx = edi;
loc_1a363c: // 0160:1a363c
    ecx += ebx;
loc_1a363e: // 0160:1a363e
    edx++;
    eax += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1a361d;
    if ((int32_t)ecx <= (int32_t)esi)
        goto loc_19cf96;
    memoryASet32(ds, 0x3a74e4, 0x00000001);
    goto loc_19cf96;
}
void sub_1a3660() // 0160:1a3660 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if ((int32_t)memoryAGet32(ds, 0x1df9fc) <= (int32_t)0x00000000)
        goto loc_1a3672;
    sub_1a3503();
loc_1a3672: // 0160:1a3672
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 3792074);
    if (ecx == 0x00000026)
        goto loc_1a369b;
    if (ecx == 0x00000024)
        goto loc_1a369b;
    if (ecx == 0x00000036)
        goto loc_1a369b;
    if (ecx == 0x0000002f)
        goto loc_1a369b;
    if (ecx != 0x00000027)
        goto loc_1a36af;
loc_1a369b: // 0160:1a369b
    ebx = 0;
    memoryASet32(ds, 0x39f1ec, ebx);
    memoryASet32(ds, 0x39f1c8, ebx);
    memoryASet32(ds, 0x39f1c0, ebx);
loc_1a36af: // 0160:1a36af
    if (memoryAGet32(ds, 0x39f13c) == 0x00000000)
        goto loc_1a36d2;
    ebp = 0;
    memoryASet32(ds, 0x39f1c0, ebp);
    memoryASet32(ds, 0x39f1e4, ebp);
    memoryASet32(ds, 0x39f1f4, ebp);
    memoryASet32(ds, 0x39f1c8, ebp);
loc_1a36d2: // 0160:1a36d2
    if (memoryAGet32(ds, 0x39f1dc) != 0x00000001)
        goto loc_1a3706;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000003c;
    ecx = 0xffffffff;
    sub_1b9c1d();
    memoryASet32(ds, 0x39f1dc, ecx);
    goto loc_1a391a;
loc_1a3706: // 0160:1a3706
    if (memoryAGet32(ds, 0x39f1d0) == 0x00000000)
        goto loc_1a3733;
    if (memoryAGet32(ds, 0x3a74e4) != 0x00000000)
        goto loc_1a3733;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000000f;
    goto loc_1a3915;
loc_1a3733: // 0160:1a3733
    if (memoryAGet32(ds, 0x39f1d4) == 0x00000000)
        goto loc_1a3789;
    eax = memoryAGet32(ds, 0x39f1d0);
    if (eax)
        goto loc_1a3789;
    edx = 0x00000001;
    sub_1a9cc8();
    if (eax)
        goto loc_1a376e;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000002;
    goto loc_1a3915;
loc_1a376e: // 0160:1a376e
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000013;
    goto loc_1a3915;
loc_1a3789: // 0160:1a3789
    if (memoryAGet32(ds, 0x39f1c0) == 0x00000000)
        goto loc_1a37ad;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000036;
    goto loc_1a3915;
loc_1a37ad: // 0160:1a37ad
    if (memoryAGet32(ds, 0x39f1cc) == 0x00000000)
        goto loc_1a37d1;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000026;
    goto loc_1a3915;
loc_1a37d1: // 0160:1a37d1
    if (memoryAGet32(ds, 0x39f1c8) == 0x00000000)
        goto loc_1a37f5;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000009;
    goto loc_1a3915;
loc_1a37f5: // 0160:1a37f5
    if (memoryAGet32(ds, 0x39f1f0) == 0x00000000)
        goto loc_1a3816;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0;
    goto loc_1a3915;
loc_1a3816: // 0160:1a3816
    if (memoryAGet32(ds, 0x39f1e0) == 0x00000000)
        goto loc_1a383a;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000039;
    goto loc_1a3915;
loc_1a383a: // 0160:1a383a
    if (memoryAGet32(ds, 0x39f1f4) == 0x00000000)
        goto loc_1a385e;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000027;
    goto loc_1a3915;
loc_1a385e: // 0160:1a385e
    eax = memoryAGet32(ds, 0x39f1e8);
    if (!eax)
        goto loc_1a3882;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000018;
    goto loc_1a3915;
loc_1a3882: // 0160:1a3882
    if (memoryAGet32(ds, 0x39f1ec) != 0x00000001)
        goto loc_1a38a6;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000029;
    goto loc_1a3915;
loc_1a38a6: // 0160:1a38a6
    if (memoryAGet32(ds, 0x39f1e4) == 0x00000000)
        goto loc_1a391a;
    edx = 0x00000002;
    sub_1a9cc8();
    ecx = eax;
    if (eax)
        goto loc_1a38da;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000001b;
    sub_1b9c1d();
loc_1a38da: // 0160:1a38da
    if (ecx != 0x00000001)
        goto loc_1a38fa;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000023;
    sub_1b9c1d();
loc_1a38fa: // 0160:1a38fa
    if (ecx != 0x00000002)
        goto loc_1a391a;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000024;
loc_1a3915: // 0160:1a3915
    sub_1b9c1d();
loc_1a391a: // 0160:1a391a
    sub_19cd59();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a3924() // 0160:1a3924 +long
{
    esp -= 4;
    goto loc_1a3924;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 27015 bytes
loc_1a3924: // 0160:1a3924
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a35e4();
    ecx = 0;
    ebx = 0;
loc_1a3933: // 0160:1a3933
    esi = 0;
    edi = memoryAGet32(ds, ebx + 3792106);
    memoryASet32(ds, ebx + 3792098, esi);
    if (!edi)
        goto loc_1a39b4;
    ebp = memoryAGet32(ds, ebx + 3792102);
    edx = edi;
    if ((int32_t)edi < (int32_t)ebp)
        goto loc_1a3966;
    edi = 0x00000001;
    memoryASet32(ds, ebx + 3792102, esi);
    edx = ebp;
    memoryASet32(ds, 0x39f13c, edi);
    goto loc_1a3970;
loc_1a3966: // 0160:1a3966
    eax = ebp;
    eax -= edi;
    memoryASet32(ds, ebx + 3792102, eax);
loc_1a3970: // 0160:1a3970
    ebp = 0;
    eax = ecx;
    memoryASet32(ds, ebx + 3792106, ebp);
    sub_196d9a();
    memoryASet32(ds, ebx + 3792110, 0x00009600);
    eax = ecx;
    sub_196ca9();
    memoryASet32(ds, 0x39f230, 0x00000032);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, stop("GetOpAddress"), 0x00000001);
loc_1a39b4: // 0160:1a39b4
    ecx++;
    ebx += 0x000000ac;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1a3933;
    if (memoryAGet32(ds, 0x39f22c) != 0x00000000)
        goto loc_1a39d2;
    sub_1a3660();
loc_1a39d2: // 0160:1a39d2
    edi = 0;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1dd24e, edi);
    memoryASet32(ds, 0x39f22c, ebp);
    memoryASet32(ds, 0x39f1a0, edi);
    goto loc_19cf96;
}
void sub_1a39f0() // 0160:1a39f0 +long
{
    esp -= 4;
    goto loc_1a39f0;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 27219 bytes
loc_1a39f0: // 0160:1a39f0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39f180);
    ebx = memoryAGet32(ds, 0x39f140);
    if (!edx)
        goto loc_1a3a55;
    ecx = edx + -1;
    memoryASet32(ds, 0x39f180, ecx);
    if (ecx)
        goto loc_1a3a55;
    sub_19cd59();
    edx = 0x00000001;
    eax = 0;
    sub_1a9cc8();
    if (eax)
        goto loc_1a3a3d;
    eax = ebx;
    sub_19ce55();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000001;
    goto loc_1a3a50;
loc_1a3a3d: // 0160:1a3a3d
    eax = ebx;
    sub_19ce55();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x0000002f;
loc_1a3a50: // 0160:1a3a50
    sub_1b9c1d();
loc_1a3a55: // 0160:1a3a55
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebp = memoryAGet32(ds, eax + 3792082);
    if (!ebp)
        goto loc_1a3aa1;
    if ((int32_t)memoryAGet32(ds, eax + 3792046) <= (int32_t)0x00004000)
        goto loc_1a3a7f;
    memoryASet32(ds, 0x39f030, 0x00000005);
loc_1a3a7f: // 0160:1a3a7f
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792046) >= (int32_t)0xffffc000)
        goto loc_1a3aa7;
    memoryASet32(ds, 0x39f030, 0x0000000a);
    goto loc_1a3aa7;
loc_1a3aa1: // 0160:1a3aa1
    memoryASet32(ds, 0x39f030, ebp);
loc_1a3aa7: // 0160:1a3aa7
    sub_1a3484();
    esi = 0;
    ecx = 0;
loc_1a3ab0: // 0160:1a3ab0
    if (memoryAGet32(ds, ecx + 3792026) == 0x00000000)
        goto loc_1a3d96;
    if (memoryAGet32(ds, ecx + 3792018) != 0x00000000)
        goto loc_1a3b12;
    if (memoryAGet32(ds, ecx + 3792006) != 0x00000000)
        goto loc_1a3b12;
    if (memoryAGet32(ds, ecx + 3792062) != 0x00000000)
        goto loc_1a3b12;
    if (memoryAGet32(ds, ecx + 3792058) != 0x00000000)
        goto loc_1a3b12;
    if (memoryAGet32(ds, ecx + 3792082) != 0x00000000)
        goto loc_1a3b12;
    if (memoryAGet32(ds, ecx + 3792022) != 0x00000000)
        goto loc_1a3b12;
    if (memoryAGet32(ds, ecx + 3792122) != 0x00000000)
        goto loc_1a3b12;
    if (memoryAGet32(ds, ecx + 3792002) != 0x00000000)
        goto loc_1a3b12;
    if (memoryAGet32(ds, ecx + 3792110) == 0x00000000)
        goto loc_1a3d96;
loc_1a3b12: // 0160:1a3b12
    ebp = memoryAGet32(ds, ecx + 3792122);
    if (!ebp)
        goto loc_1a3b25;
    eax = ebp + -1;
    memoryASet32(ds, ecx + 3792122, eax);
loc_1a3b25: // 0160:1a3b25
    if (memoryAGet32(ds, ecx + 3792110) == 0x00000000)
        goto loc_1a3b8f;
    if (memoryAGet32(ds, ecx + 3792042) != 0x00000000)
        goto loc_1a3b8f;
    if (memoryAGet32(ds, ecx + 3792018) != 0x00000000)
        goto loc_1a3b8f;
    if (memoryAGet32(ds, ecx + 3792058) != 0x00000000)
        goto loc_1a3b8f;
    if (memoryAGet32(ds, 0x39f044) != 0x00000000)
        goto loc_1a3b8f;
    edx = memoryAGet32(ds, ecx + 3792006);
    if (edx == 0x0000000f)
        goto loc_1a3b61;
    if (edx)
        goto loc_1a3b8f;
loc_1a3b61: // 0160:1a3b61
    memoryASet32(ds, 0x39f230, 0x00000032);
    ebp = memoryAGet32(ds, ecx + 3792110);
    ebp -= 0x00000170;
    memoryASet32(ds, ecx + 3792110, ebp);
    if (stop("postCondition"))
        goto loc_1a3b8f;
    edx = 0;
    memoryASet32(ds, ecx + 3792110, edx);
    memoryASet32(ds, ecx + 3792098, edx);
loc_1a3b8f: // 0160:1a3b8f
    if (memoryAGet32(ds, ecx + 3792102) != 0x00000000)
        goto loc_1a3bfa;
    ebp = memoryAGet32(ds, ecx + 3792006);
    if (ebp)
        goto loc_1a3bfa;
    if (memoryAGet32(ds, ecx + 3792018) != 0x00000000)
        goto loc_1a3bfa;
    if (memoryAGet32(ds, ecx + 3792110) != 0x00000000)
        goto loc_1a3bfa;
    if (memoryAGet32(ds, 0x39f03c) != 0x00000000)
        goto loc_1a3bfa;
    edi = 0x0000000a;
    eax = 0x00000080;
    memoryASet32(ds, ecx + 3792002, ebp);
    ebx = 0x00000032;
    memoryASet32(ds, ecx + 3792006, edi);
    edx = esi;
    memoryASet32(ds, 0x39f03c, eax);
    eax = 0x001d26c6;
    sub_19e8ec();
    edx = 0x00000030;
    memoryASet32(ds, 0x39f140, esi);
    memoryASet32(ds, 0x39f180, edx);
loc_1a3bfa: // 0160:1a3bfa
    if (memoryAGet32(ds, ecx + 3792062) != 0x00000000)
        goto loc_1a3c2b;
    if ((int32_t)memoryAGet32(ds, ecx + 3792022) <= (int32_t)0x00000300)
        goto loc_1a3c2b;
    if (memoryAGet32(ds, ecx + 3792058) != 0x00000000)
        goto loc_1a3c2b;
    if (memoryAGet32(ds, ecx + 3792006) != 0x00000000)
        goto loc_1a3c2b;
    memoryASet32(ds, ecx + 3792062, 0x00000040);
loc_1a3c2b: // 0160:1a3c2b
    ebx = memoryAGet32(ds, ecx + 3792062);
    if (ebx)
        goto loc_1a3c3e;
    if (memoryAGet32(ds, ecx + 3792058) == 0x00000000)
        goto loc_1a3c4c;
loc_1a3c3e: // 0160:1a3c3e
    eax = esi;
    sub_1a19aa();
    ebx = eax;
    goto loc_1a3d36;
loc_1a3c4c: // 0160:1a3c4c
    eax = memoryAGet32(ds, ecx + 3792006);
    if (eax)
        goto loc_1a3c7d;
    if (memoryAGet32(ds, ecx + 3792082) != 0x00000000)
        goto loc_1a3c7d;
    edx = memoryAGet32(ds, ecx + 3792026);
    memoryASet32(ds, ecx + 3792002, ebx);
    memoryASet32(ds, ecx + 3792034, edx);
    edx = memoryAGet32(ds, ecx + 3792030);
    memoryASet32(ds, ecx + 3792038, edx);
loc_1a3c7d: // 0160:1a3c7d
    if (memoryAGet32(ds, ecx + 3792018) != 0x00000000)
        goto loc_1a3c9a;
    if (memoryAGet32(ds, ecx + 3792042) != 0x00000000)
        goto loc_1a3c9a;
    if (eax)
        goto loc_1a3c9a;
    eax = esi;
    sub_1a1ab7();
loc_1a3c9a: // 0160:1a3c9a
    if (!eax)
        goto loc_1a3ca9;
    edx = eax;
    eax = esi;
    sub_1a2cc8();
    goto loc_1a3cb2;
loc_1a3ca9: // 0160:1a3ca9
    edx = eax;
    eax = esi;
    sub_1a3029();
loc_1a3cb2: // 0160:1a3cb2
    ebx = eax;
    if (esi != memoryAGet32(ds, 0x39ef98))
        goto loc_1a3d36;
    if (memoryAGet32(ds, 0x39f0e8) == 0x00000000)
        goto loc_1a3cea;
    edx = memoryAGet32(ds, ecx + 3792006);
    if (edx)
        goto loc_1a3cea;
    if (memoryAGet32(ds, ecx + 3792074) == 0x00000006)
        goto loc_1a3cea;
    memoryASet32(ds, ecx + 3792158, edx);
    ebx = 0;
    memoryASet32(ds, ecx + 3792162, edx);
loc_1a3cea: // 0160:1a3cea
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_1a3d36;
    if (memoryAGet32(ds, 0x39ef94) == 0x00000000)
        goto loc_1a3d36;
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_1a3d36;
    if (memoryAGet32(ds, ecx + 3792006) != 0x00000000)
        goto loc_1a3d36;
    eax = memoryAGet32(ds, ecx + 3792074);
    if (eax == 0x00000004)
        goto loc_1a3d1e;
    if (eax != 0x00000024)
        goto loc_1a3d36;
loc_1a3d1e: // 0160:1a3d1e
    ebx = 0;
    edi = 0xfffffffd;
    memoryASet32(ds, ecx + 3792158, ebx);
    memoryASet32(ds, ecx + 3792162, edi);
    ebx = 0x000001f4;
loc_1a3d36: // 0160:1a3d36
    eax = esi;
    edi = 0x00000014;
    sub_1a33f1();
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edi = eax * 0x00001400;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    ebx = 0x00000014;
    idiv32(ebx);
    edx <<= 4;
    ebp = memoryAGet32(ds, ecx + 3792050);
    ebx = edi + edx;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1a3d76;
    eax = 0x0026e868;
    goto loc_1a3d7b;
loc_1a3d76: // 0160:1a3d76
    eax = 0x002d95a8;
loc_1a3d7b: // 0160:1a3d7b
    eax += ebx;
    memoryASet32(ds, ecx + 3792166, eax);
    eax = esi;
    ebx += 0x0026e868;
    sub_1aaaf1();
    memoryASet32(ds, ecx + 3792170, ebx);
loc_1a3d96: // 0160:1a3d96
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1a3ab0;
    goto loc_19cf96;
}
void sub_1a3dab() // 0160:1a3dab +long
{
    esp -= 4;
    goto loc_1a3dab;
loc_19cf96: // 0160:19cf96
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    stop("stack_below", "0160:19cf9a");
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 28174 bytes
loc_1a3dab: // 0160:1a3dab
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    edx = eax * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3792110);
    if (!ebx)
        goto loc_1a3e90;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000004b;
    ecx -= eax;
    if ((int32_t)ecx <= (int32_t)0x00000028)
        goto loc_1a3dea;
    ecx = 0x00000028;
loc_1a3dea: // 0160:1a3dea
    edi = esi * 0x000000ac;
    eax = memoryAGet32(ds, edi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = 0x00000003;
    eax -= ecx;
    ecx = memoryAGet32(ds, edi + 3792094);
    eax -= 0x0000000e;
    edx -= ecx;
    memoryASet32(ds, esp, eax);
    eax = edx;
    eax <<= 2;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    eax = memoryAGet32(ds, edi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx += 0x00000007;
    ebp = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    ebp -= ebx;
    ebx = 0x00000003;
    idiv32(ebx);
    edx = eax;
    eax <<= 4;
    ecx = 0x0020535c;
    eax -= edx;
    edx = esi;
    eax <<= 8;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = esi;
    idiv32(ebx);
    edi = edx;
    edi <<= 2;
    edi -= edx;
    edi <<= 3;
    edi += edx;
    push32(0x00000006);
    edi <<= 2;
    ebx = memoryAGet32(ds, esp + 4);
    eax = ecx + edi;
    edx = ebp;
    ecx = 0x0000000f;
    sub_19cb74();
loc_1a3e90: // 0160:1a3e90
    edi = esi * 0x000000ac;
    eax = memoryAGet32(ds, edi + 3792086);
    ecx = eax;
    ecx <<= 2;
    ecx += eax;
    eax = memoryAGet32(ds, edi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -20;
    eax = memoryAGet32(ds, edi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = esi;
    ebp -= eax;
    eax = 0x00000003;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 8, eax);
    eax = esi;
    idiv32(memoryAGet32(ds, esp + 8));
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 8;
    memoryASet32(ds, esp, eax);
    eax = 0x00204bc8;
    edx = memoryAGet32(ds, esp);
    eax += edx;
    memoryASet32(ds, esp + 4, eax);
    edx = esi;
    eax = 0x00000003;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 8, eax);
    eax = esi;
    esi = memoryAGet32(ds, esp + 8);
    idiv32(esi);
    esi = edx;
    esi <<= 2;
    esi -= edx;
    esi <<= 3;
    push32(0x00000006);
    esi += edx;
    eax = memoryAGet32(ds, esp + 8);
    esi <<= 2;
    edx = ebp;
    eax += esi;
    sub_19cb74();
    eax = memoryAGet32(ds, edi + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, edi + 3792090);
    edx = 0x00000003;
    ebx = eax + -14;
    edx -= ebp;
    eax = edx;
    eax <<= 2;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    eax = memoryAGet32(ds, edi + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx + 7;
    eax -= edx;
    ecx = memoryAGet32(ds, esp);
    edx = eax;
    eax = 0x00205348;
    push32(0x00000006);
    eax += ecx;
    ecx = 0x0000000f;
    eax += esi;
    sub_19cb74();
    esp += 0x0000000c;
    goto loc_19cf96;
}
void sub_1a3fb3() // 0160:1a3fb3 +long
{
    esp -= 4;
    goto loc_1a3fb3;
loc_19cf93: // 0160:19cf93
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 28694 bytes
loc_1a3fb3: // 0160:1a3fb3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = 0;
    esi = 0;
loc_1a3fc0: // 0160:1a3fc0
    if (memoryAGet32(ds, esi + 3792026) == 0x00000000)
        goto loc_1a4076;
    if (memoryAGet32(ds, esi + 3792098) != 0x00000000)
        goto loc_1a3fe9;
    if (memoryAGet32(ds, 0x39f23c) != 0x00010000)
        goto loc_1a3fe9;
    eax = edi;
    sub_1a3dab();
loc_1a3fe9: // 0160:1a3fe9
    eax = memoryAGet32(ds, esi + 3792050);
    ebp = memoryAGet32(ds, esi + 3792170);
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1a4006;
    ebx = 0x00000003;
    ebx -= memoryAGet32(ds, esi + 3792158);
    goto loc_1a401b;
loc_1a4006: // 0160:1a4006
    ebx = memoryAGet32(ds, esi + 3792158);
    ebp -= 0x0026e868;
    ebx += 0x0000000d;
    ebp += 0x002d95a8;
loc_1a401b: // 0160:1a401b
    eax = memoryAGet32(ds, esi + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= ebx;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esi + 3792038);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, esi + 3792162);
    eax -= 0x0000000c;
    ecx = memoryAGet32(ds, 0x39ef98);
    ebx += eax;
    if (edi != ecx)
        goto loc_1a4064;
    if (memoryAGet32(ds, 0x39f044) != 0x00000000)
        goto loc_1a4076;
loc_1a4064: // 0160:1a4064
    push32(0x00000010);
    ecx = 0x00000010;
    edx = memoryAGet32(ds, esp + 4);
    eax = ebp;
    sub_19cb74();
loc_1a4076: // 0160:1a4076
    edi++;
    esi += 0x000000ac;
    if ((int32_t)edi < (int32_t)0x00000010)
        goto loc_1a3fc0;
    goto loc_19cf93;
}
void sub_1a40e4() // 0160:1a40e4 +long
{
    esp -= 4;
loc_1a40e4: // 0160:1a40e4
    eax = 0x000003da;
    sub_1c8995();
    if (al & 0x08)
        goto loc_1a40e4;
    esp += 4;
}
void sub_1a40f3() // 0160:1a40f3 +long
{
    esp -= 4;
    goto loc_1a40f3;
loc_1a40d5: // 0160:1a40d5
    eax = 0x000003da;
    sub_1c8995();
    if (!(al & 0x08))
        goto loc_1a40d5;
    esp += 4;
    return;
    // gap 15 bytes
loc_1a40f3: // 0160:1a40f3
    sub_1a40e4();
    goto loc_1a40d5;
}
void sub_1a413d() // 0160:1a413d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    sub_1a40f3();
    eax = 0x000003c8;
    edx = 0;
    sub_1c7f7f();
    if (ecx)
        goto loc_1a4170;
    ebx = 0;
loc_1a4159: // 0160:1a4159
    eax = 0x000003c9;
    edx = 0;
    ebx++;
    sub_1c7f7f();
    if ((int32_t)ebx >= (int32_t)0x00000300)
        goto loc_1a4192;
    goto loc_1a4159;
loc_1a4170: // 0160:1a4170
    ebx = 0;
loc_1a4172: // 0160:1a4172
    if (!(bl & 0x03))
        goto loc_1a4188;
    edx = 0;
    dl = memoryAGet(ds, ecx);
    eax = 0x000003c9;
    edx = sar32(edx, 0x02);
    sub_1c7f7f();
loc_1a4188: // 0160:1a4188
    ebx++;
    ecx++;
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1a4172;
loc_1a4192: // 0160:1a4192
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4196() // 0160:1a4196 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00001001;
    eax = 0x00000010;
    ebx = 0;
    memoryASet16(ds, esp, dx);
    memoryASet16(ds, esp + 4, bx);
    ebx = esp;
    edx = esp;
    sub_1c897a();
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a41bf() // 0160:1a41bf +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x1df650) != 0x00000000)
        goto loc_1a41d7;
    if (memoryAGet32(ds, 0x1df660) == 0x00000000)
        goto loc_1a41d7;
    eax = 0x00000001;
    esp += 4;
    return;
loc_1a41d7: // 0160:1a41d7
    eax = 0;
    esp += 4;
}
void sub_1a41d7() // 0160:1a41d7 +long
{
    esp -= 4;
    eax = 0;
    esp += 4;
}
void sub_1a41da() // 0160:1a41da +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df65c, edx);
    memoryASet32(ds, 0x1df654, eax);
    edx = pop32();
    esp += 4;
}
void sub_1a41ee() // 0160:1a41ee +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x3a7470);
    edx = 0x00000050;
    memoryASet32(ds, 0x1df65c, eax);
    memoryASet32(ds, 0x1df654, edx);
    edx = pop32();
    esp += 4;
}
void sub_1a4206() // 0160:1a4206 +long
{
    esp -= 4;
    goto loc_1a4206;
loc_1a41f9: // 0160:1a41f9
    memoryASet32(ds, 0x1df65c, eax);
    memoryASet32(ds, 0x1df654, edx);
    edx = pop32();
    esp += 4;
    return;
loc_1a4206: // 0160:1a4206
    push32(edx);
    eax = memoryAGet32(ds, 0x3a7470);
    edx = 0;
    goto loc_1a41f9;
}
void sub_1a4210() // 0160:1a4210 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    eax = 0;
loc_1a4216: // 0160:1a4216
    eax++;
    dl = memoryAGet(ds, eax + 3913767);
    memoryASet(ds, eax + 3783079, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1a4216;
    memoryASet32(ds, 0x1df650, 0x000000ff);
    eax = memoryAGet32(ds, 0x3a7470);
    ebx = 0x00000100;
    esi = 0x00000001;
    memoryASet32(ds, 0x1df65c, eax);
    ecx = 0;
    memoryASet32(ds, 0x1df658, ebx);
    memoryASet32(ds, 0x1df654, ecx);
    memoryASet32(ds, 0x1df660, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4261() // 0160:1a4261 +long
{
    esp -= 4;
    goto loc_1a4261;
loc_1a41f9: // 0160:1a41f9
    memoryASet32(ds, 0x1df65c, eax);
    memoryASet32(ds, 0x1df654, edx);
    edx = pop32();
    esp += 4;
    return;
    // gap 91 bytes
loc_1a4261: // 0160:1a4261
    push32(edx);
    eax = memoryAGet32(ds, 0x3a7470);
    edx = 0x000000ff;
    goto loc_1a41f9;
}
void sub_1a426e() // 0160:1a426e +long
{
    esp -= 4;
    push32(edx);
    memoryASet32(ds, 0x1df64c, eax);
    edx = 0;
    eax = 0x000000ff;
    memoryASet32(ds, 0x1df650, edx);
    sub_1a41da();
    edx = pop32();
    esp += 4;
}
void sub_1a4288() // 0160:1a4288 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    memoryASet32(ds, 0x1df664, edx);
    edx = memoryAGet32(ds, 0x3a7470);
    ebx = memoryAGet32(ds, 0x1df65c);
    edx -= ebx;
    eax = edx;
    eax <<= 3;
    edx += eax;
    edx <<= 5;
    ebx = 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax < 0)
        goto loc_1a42c5;
    if ((int32_t)eax <= (int32_t)0x000000c8)
        goto loc_1a42d3;
loc_1a42c5: // 0160:1a42c5
    eax = 0;
    edx = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df65c, edx);
loc_1a42d3: // 0160:1a42d3
    if (!eax)
        goto loc_1a4dbf;
    edx = memoryAGet32(ds, 0x1df650);
    ecx = memoryAGet32(ds, 0x1df654);
    if (edx == ecx)
        goto loc_1a4dbf;
    edx = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df65c, edx);
    edx = memoryAGet32(ds, 0x1df650);
    if (edx == ecx)
        goto loc_1a43bf;
    if ((int32_t)edx <= (int32_t)ecx)
        goto loc_1a431b;
    ebx = edx;
    ebx -= eax;
    memoryASet32(ds, 0x1df650, ebx);
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_1a432e;
    goto loc_1a4328;
loc_1a431b: // 0160:1a431b
    ebp = edx + eax;
    memoryASet32(ds, 0x1df650, ebp);
    if ((int32_t)ebp <= (int32_t)ecx)
        goto loc_1a432e;
loc_1a4328: // 0160:1a4328
    memoryASet32(ds, 0x1df650, ecx);
loc_1a432e: // 0160:1a432e
    ecx = memoryAGet32(ds, 0x1df658);
    esi = memoryAGet32(ds, 0x1df64c);
    ecx <<= 2;
    if (esi)
        goto loc_1a436f;
    esi = 0x000000ff;
    ebp = memoryAGet32(ds, 0x1df650);
    ebx = 0;
    goto loc_1a4369;
loc_1a4350: // 0160:1a4350
    edx = 0;
    dl = memoryAGet(ds, ebx + 3783080);
    edx = (int32_t)edx * (int32_t)ebp;
//    stop("imul edx * ebp");
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx++;
    memoryASet(ds, ebx + 3913767, al);
loc_1a4369: // 0160:1a4369
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_1a43ab;
    goto loc_1a4350;
loc_1a436f: // 0160:1a436f
    esi = ecx;
    ebx = 0;
    goto loc_1a43a7;
loc_1a4375: // 0160:1a4375
    eax = memoryAGet32(ds, 0x1df64c);
    edx = 0;
    ecx = 0;
    dl = memoryAGet(ds, ebx + eax);
    cl = memoryAGet(ds, ebx + 3783080);
    edi = memoryAGet32(ds, 0x1df650);
    edx -= ecx;
    stop("imul edx * edi");
    edi = 0x000000ff;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx++;
    eax += ecx;
    memoryASet(ds, ebx + 3913767, al);
loc_1a43a7: // 0160:1a43a7
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1a4375;
loc_1a43ab: // 0160:1a43ab
    memoryASet32(ds, 0x1df664, 0x00000001);
    eax = 0x003bb828;
    sub_1a413d();
loc_1a43bf: // 0160:1a43bf
    eax = memoryAGet32(ds, 0x1df650);
    if (eax != memoryAGet32(ds, 0x1df654))
        goto loc_1a4dbf;
    if (memoryAGet32(ds, 0x1df64c) == 0x00000000)
        goto loc_1a43f0;
    ebx = 0;
loc_1a43db: // 0160:1a43db
    ebx++;
    al = memoryAGet(ds, ebx + 3913767);
    memoryASet(ds, ebx + 3783079, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1a43db;
loc_1a43f0: // 0160:1a43f0
    ecx = 0x000000b0;
    esi = 0;
    memoryASet32(ds, 0x1df658, ecx);
    memoryASet32(ds, 0x1df64c, esi);
    goto loc_1a4dbf;
    // gap 2487 bytes
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4408() // 0160:1a4408 +long
{
    esp -= 4;
    goto loc_1a4408;
loc_1a4286: // 0160:1a4286
    edx = pop32();
    esp += 4;
    return;
    // gap 384 bytes
loc_1a4408: // 0160:1a4408
    push32(edx);
    edx = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df65c, edx);
    memoryASet32(ds, 0x1df654, eax);
loc_1a441a: // 0160:1a441a
    sync();
    eax = memoryAGet32(ds, 0x1df650);
    if (eax == memoryAGet32(ds, 0x1df654))
        goto loc_1a4286;
    sub_1a4288();
    goto loc_1a441a;
}
void sub_1a4432() // 0160:1a4432 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    eax = 0;
loc_1a4439: // 0160:1a4439
    eax++;
    dl = memoryAGet(ds, eax + 3913767);
    memoryASet(ds, eax + 3834343, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1a4439;
    esi = 0x0000001f;
    ebp = esi;
loc_1a4454: // 0160:1a4454
    ecx = esi;
    ebx = 0;
loc_1a4458: // 0160:1a4458
    edx = 0;
    dl = memoryAGet(ds, ebx + 3834344);
    stop("imul edx * ecx");
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx++;
    memoryASet(ds, ebx + 3913767, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1a4458;
    eax = 0x003bb828;
    esi--;
    sub_1a413d();
    if (esi != 0xffffffff)
        goto loc_1a4454;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a448f() // 0160:1a448f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = 0;
    esi = 0x0000001f;
loc_1a449a: // 0160:1a449a
    ebx = 0;
loc_1a449c: // 0160:1a449c
    edx = 0;
    dl = memoryAGet(ds, ebx + 3834344);
    stop("imul edx * ecx");
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx++;
    memoryASet(ds, ebx + 3913767, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1a449c;
    eax = 0x003bb828;
    ecx++;
    sub_1a413d();
    if ((int32_t)ecx < (int32_t)0x00000020)
        goto loc_1a449a;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a44d2() // 0160:1a44d2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    bl = al;
    edx = 0;
    goto loc_1a44dd;
loc_1a44dc: // 0160:1a44dc
    edx++;
loc_1a44dd: // 0160:1a44dd
    edi = 0x001df678;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    if (edx >= ecx)
        goto loc_1a44f8;
    if (bl != memoryAGet(ds, edx + 1963640))
        goto loc_1a44dc;
loc_1a44f8: // 0160:1a44f8
    eax = edx;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a44ff() // 0160:1a44ff +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = eax;
    esi = edx;
    edx = memoryAGet32(ds, 0x1df6b7);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 8;
    memoryASet32(ds, esp, eax);
    goto loc_1a45a0;
loc_1a4528: // 0160:1a4528
    eax = 0;
    al = memoryAGet(ds, esi);
    if (eax == 0x00000020)
        goto loc_1a459c;
    if (eax != 0x0000005f)
        goto loc_1a4549;
    eax = 0x0000002d;
    sub_1a44d2();
    ebx = eax;
    eax = 0x00000500;
    goto loc_1a4552;
loc_1a4549: // 0160:1a4549
    sub_1a44d2();
    ebx = eax;
    eax = 0;
loc_1a4552: // 0160:1a4552
    if ((int32_t)ebx >= (int32_t)0x00000040)
        goto loc_1a459c;
    edx = ebx;
    ebp = edi + eax;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000) & stop("xxx");
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    eax = eax * 0x00000c80;
    edx = ebx;
    ecx = 0x003a85e8;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = ebx;
    ebx = 0x00000020;
    idiv32(ebx);
    eax = edx * 0x0000000a;
    edx = memoryAGet32(ds, esp);
    eax += ecx;
    ebx = 0x0000000a;
    eax += edx;
    ecx = 0;
    edx = ebp;
    sub_1c7aaf();
loc_1a459c: // 0160:1a459c
    edi += 0x0000000a;
    esi++;
loc_1a45a0: // 0160:1a45a0
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1a4528;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a45ae() // 0160:1a45ae +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edi);
    ebx = eax;
    edi = edx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    ecx += eax;
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 6;
    ecx += ecx;
    eax += 0x003ae628;
    ecx >>= 1;
    eax += 0x000000a0;
    eax -= ecx;
    sub_1a44ff();
    edi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a45e9() // 0160:1a45e9 +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    ecx = eax;
    eax = edx;
    edx = ebx;
    ebx = eax;
    eax <<= 2;
    eax += ebx;
    eax <<= 6;
    eax += 0x003ae628;
    edi = edx;
    ebx = eax + ecx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    eax += eax;
    eax >>= 1;
    ebx -= eax;
    eax = ebx;
    sub_1a44ff();
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a4626() // 0160:1a4626 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    ebp = edx;
    memoryASet32(ds, esp, ebx);
    ebx = ecx;
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_1a46e6;
    if (stop("postCondition"))
        goto loc_1a466f;
    ebp = eax;
    ebp <<= 2;
    ebp += eax;
    ebp <<= 2;
    edi = memoryAGet32(ss, ebp + 3833592);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    edx <<= 2;
    edx += ecx;
    edx += edx;
    ebp = memoryAGet32(ss, ebp + 3833576);
    edx >>= 1;
    ebp += edx;
loc_1a466f: // 0160:1a466f
    if ((int32_t)memoryAGet32(ds, esp) >= (int32_t)0x00000000)
        goto loc_1a4686;
    edx = esi;
    edx <<= 2;
    edx += esi;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, esp, eax);
loc_1a4686: // 0160:1a4686
    edi = ebx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    edx <<= 2;
    edx += ecx;
    edx += edx;
    edx >>= 1;
    ebp -= edx;
    edx = esi;
    edx <<= 2;
    edx += esi;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, stop("GetOpAddress"), ebp);
    edi = ebx;
    memoryASet32(ds, stop("GetOpAddress"), eax);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    eax += eax;
    ecx = 0x0000000a;
    memoryASet32(ds, stop("GetOpAddress"), eax);
    memoryASet32(ds, stop("GetOpAddress"), ecx);
loc_1a46e6: // 0160:1a46e6
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1a46ed() // 0160:1a46ed +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    ebx = edx;
    edi = edx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    ecx <<= 2;
    ecx += edx;
    edx = esi;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    ecx += ecx;
    eax += 0x003ae628;
    ecx >>= 1;
    eax += 0x000000a0;
    edx = ebx;
    eax -= ecx;
    sub_1a44ff();
    edx = memoryAGet32(ds, 0x3bc04c);
    edx &= 0x0000001f;
    memoryASet32(ds, 0x3bc04c, edx);
    if ((int32_t)edx >= (int32_t)0x0000001f)
        goto loc_1a4748;
    edi = edx + 1;
    memoryASet32(ds, 0x3bc04c, edi);
loc_1a4748: // 0160:1a4748
    edx = 0x000000a0;
    eax = memoryAGet32(ds, 0x3bc04c);
    ecx = ebx;
    ebx = esi;
    sub_1a4626();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4760() // 0160:1a4760 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    esi = edx;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    eax += 0x003ae628;
    eax += ebp;
    edi = ebx;
    memoryASet32(ds, esp, eax);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    eax += eax;
    edx = memoryAGet32(ds, esp);
    eax >>= 1;
    edx -= eax;
    eax = edx;
    edx = ebx;
    sub_1a44ff();
    edx = memoryAGet32(ds, 0x3bc04c);
    edx &= 0x0000001f;
    memoryASet32(ds, 0x3bc04c, edx);
    if ((int32_t)edx >= (int32_t)0x0000001f)
        goto loc_1a47c1;
    edi = edx + 1;
    memoryASet32(ds, 0x3bc04c, edi);
loc_1a47c1: // 0160:1a47c1
    eax = memoryAGet32(ds, 0x3bc04c);
    ecx = ebx;
    edx = ebp;
    ebx = esi;
    sub_1a4626();
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a47d9() // 0160:1a47d9 +long
{
    esp -= 4;
    goto loc_1a47d9;
loc_1a45a8: // 0160:1a45a8
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 555 bytes
loc_1a47d9: // 0160:1a47d9
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    ebx = edx;
    edx = 0;
    memoryASet32(ds, 0x39bdb8, edx);
    edx = memoryAGet32(ds, 0x3bc04c);
    edi = edx;
    edi <<= 2;
    esi = 0x00000001;
    edi += edx;
    eax = 0x00000014;
    edi <<= 2;
    goto loc_1a4842;
loc_1a4806: // 0160:1a4806
    ebp = memoryAGet32(ds, eax + 3833576);
    if ((int32_t)ecx <= (int32_t)ebp)
        goto loc_1a483e;
    edx = ebp;
    edx += memoryAGet32(ds, eax + 3833584);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_1a483e;
    edx = memoryAGet32(ds, eax + 3833580);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1a483e;
    edx += memoryAGet32(ds, eax + 3833588);
    if ((int32_t)ebx >= (int32_t)edx)
        goto loc_1a483e;
    eax = 0x00000001;
    edx = esi;
    memoryASet32(ds, 0x39bdb8, eax);
    goto loc_1a4848;
loc_1a483e: // 0160:1a483e
    eax += 0x00000014;
    esi++;
loc_1a4842: // 0160:1a4842
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_1a4806;
    edx = 0;
loc_1a4848: // 0160:1a4848
    eax = edx;
    goto loc_1a45a8;
}
void sub_1a484f() // 0160:1a484f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (!eax)
        goto loc_1a488a;
    edx = eax;
    eax <<= 2;
    edx += eax;
    edx <<= 2;
    ebx = memoryAGet32(ds, edx + 3833580);
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    ecx = memoryAGet32(ds, edx + 3833592);
    eax <<= 6;
    ebx = memoryAGet32(ds, edx + 3833576);
    eax += 0x003ae628;
    edx = ecx;
    eax += ebx;
    sub_1a44ff();
loc_1a488a: // 0160:1a488a
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a488e() // 0160:1a488e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    if (!eax)
        goto loc_1a492a;
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 3833580);
    edx = ebx;
    edx <<= 2;
    ebp = 0x002197c8;
    edx += ebx;
    memoryASet32(ds, esp, eax);
    edx <<= 6;
    ebx = memoryAGet32(ds, eax + 3833576);
    ebp += edx;
    edx += 0x003ae628;
    ebp += ebx;
    edi = ebx + edx;
    ecx = memoryAGet32(ds, eax + 3833584);
    esi = edi;
    edx = 0;
    esi &= 0x00000003;
    memoryASet32(ds, esp + 4, edx);
    edi -= esi;
    ebp -= esi;
    esi += ecx;
    goto loc_1a491b;
loc_1a48ed: // 0160:1a48ed
    edx = edi;
    eax = ebp;
    ebx = 0;
    goto loc_1a4902;
loc_1a48f5: // 0160:1a48f5
    ebx += 0x00000004;
    ecx = memoryAGet32(ds, eax);
    eax += 0x00000004;
    memoryASet32(ds, edx, ecx);
    edx += 0x00000004;
loc_1a4902: // 0160:1a4902
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1a48f5;
    ecx = memoryAGet32(ds, esp + 4);
    ebp += 0x00000140;
    ecx++;
    edi += 0x00000140;
    memoryASet32(ds, esp + 4, ecx);
loc_1a491b: // 0160:1a491b
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, edx + 3833588))
        goto loc_1a48ed;
loc_1a492a: // 0160:1a492a
    esp += 0x00000008;
    goto loc_1a4dbf;
    // gap 1165 bytes
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4932() // 0160:1a4932 +long
{
    esp -= 4;
    push32(ebx);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (!eax)
        goto loc_1a497f;
    eax <<= 2;
    if (!edx)
        goto loc_1a494a;
    memoryASet32(ds, eax + 3834216, memoryAGet32(ds, eax + 3834216) + 1);
    goto loc_1a4950;
loc_1a494a: // 0160:1a494a
    memoryASet32(ds, eax + 3834216, memoryAGet32(ds, eax + 3834216) - 1);
loc_1a4950: // 0160:1a4950
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_1a4978;
    edi = 0x00000001;
    eax = ebx;
    ebp = 0;
    memoryASet32(ds, 0x1df6b7, edi);
    sub_1a484f();
    memoryASet32(ds, 0x1df6b7, ebp);
    ebp = pop32();
    edi = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a4978: // 0160:1a4978
    eax = ebx;
    sub_1a484f();
loc_1a497f: // 0160:1a497f
    ebp = pop32();
    edi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4983() // 0160:1a4983 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1a4986: // 0160:1a4986
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 3834212, edx);
    if (eax != 0x00000080)
        goto loc_1a4986;
    edx = pop32();
    esp += 4;
}
void sub_1a499a() // 0160:1a499a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = memoryAGet32(ds, 0x1df6bb);
    if (eax == edx)
        goto loc_1a49c3;
    eax = edx;
    edx = 0;
    sub_1a4932();
    edx = 0x00000001;
    eax = ebx;
    sub_1a4932();
    memoryASet32(ds, 0x1df6bb, ebx);
loc_1a49c3: // 0160:1a49c3
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a49c6() // 0160:1a49c6 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    edx = eax;
    if (!eax)
        goto loc_1a4a05;
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_1a49f9;
    memoryASet32(ds, 0x1df6b7, 0x00000001);
    sub_1a488e();
    eax = edx;
    esi = 0;
    sub_1a484f();
    memoryASet32(ds, 0x1df6b7, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_1a49f9: // 0160:1a49f9
    sub_1a488e();
    eax = edx;
    sub_1a484f();
loc_1a4a05: // 0160:1a4a05
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a4a08() // 0160:1a4a08 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = 0;
loc_1a4a0d: // 0160:1a4a0d
    if (memoryAGet32(ds, eax + 1959502) == 0x00000000)
        goto loc_1a4a17;
    edx++;
loc_1a4a17: // 0160:1a4a17
    eax += 0x000000aa;
    if (eax != 0x00000aa0)
        goto loc_1a4a0d;
    stop("disassembly failed at 160:1a4a26 setge al");
    eax &= 0x000000ff;
    edx = pop32();
    esp += 4;
}
void sub_1a4a30() // 0160:1a4a30 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = 0x00000001;
    edx = 0;
    ecx = 0;
    ah = 0;
    memoryASet32(ds, 0x1dd246, edx);
    memoryASet32(ds, 0x39ef7a, ebx);
    memoryASet32(ds, 0x1dc094, edx);
    memoryASet32(ds, 0x39efc4, edx);
    memoryASet(ds, 0x3a73a5, ah);
    dl = 0;
    memoryASet(ds, 0x3a72a5, dl);
    sub_19818b();
    memoryASet32(ds, 0x39ef7e, ebx);
    memoryASet32(ds, 0x39effc, ecx);
    memoryASet32(ds, 0x1dfc80, ecx);
    sub_1a9969();
    edx = 0;
    ebx = 0x001d1cfe;
    eax = 0x000000a0;
    memoryASet32(ds, 0x3bc04c, ecx);
    sub_1a45e9();
    ebx = 0x001d1d0d;
    edx = 0x0000000c;
    eax = 0x000000a0;
    sub_1a45e9();
    sub_1a4a08();
    if (!eax)
        goto loc_1a4ad9;
    esi = 0x000000a0;
    edi = 0x00000042;
    edx = 0x001d1d22;
    eax = 0x0000003c;
    memoryASet32(ds, 0x1df640, esi);
    memoryASet32(ds, 0x1df644, edi);
    goto loc_1a4af9;
loc_1a4ad9: // 0160:1a4ad9
    ebx = 0x000000a0;
    ecx = 0x0000004e;
    edx = 0x001d1d2c;
    eax = 0x0000003c;
    memoryASet32(ds, 0x1df640, ebx);
    memoryASet32(ds, 0x1df644, ecx);
loc_1a4af9: // 0160:1a4af9
    sub_1a46ed();
    edx = 0x001d1d2e;
    eax = 0x00000048;
    sub_1a46ed();
    edx = 0x001d1d39;
    eax = 0x00000090;
    sub_1a46ed();
    edx = 0x001d1d45;
    eax = 0x00000054;
    sub_1a46ed();
    edx = 0x001d1d52;
    eax = 0x0000006c;
    sub_1a46ed();
    edx = 0x001d1d5a;
    eax = 0x00000060;
    ebp = 0x00000001;
    sub_1a46ed();
    eax = 0x000000a8;
    edx = 0xffffff58;
    memoryASet32(ds, 0x1df6c3, ebp);
    memoryASet32(ds, 0x1df670, ebp);
    memoryASet32(ds, 0x1df668, eax);
    memoryASet32(ds, 0x1df66c, edx);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    eax = ebp;
    sub_1bb45a();
    goto loc_1a4dbf;
    // gap 570 bytes
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4b85() // 0160:1a4b85 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a9969();
    eax = 0x0000004e;
    ebx = 0x001d1d75;
    edx = 0;
    ecx = 0x00000060;
    memoryASet32(ds, 0x3bc04c, edx);
    edx = 0x001d1d68;
    esi = 0x00000002;
    sub_1a45ae();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x000000a8;
    sub_1a4760();
    ebx = 0x001d1d79;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0xffffff58;
    sub_1a4760();
    ebx = 0x000000b0;
    eax = 0x00000001;
    memoryASet32(ds, 0x1df644, ecx);
    memoryASet32(ds, 0x1df6c3, esi);
    memoryASet32(ds, 0x1df668, edi);
    memoryASet32(ds, 0x1df66c, ebp);
    memoryASet32(ds, 0x1df640, ebx);
    goto loc_1a5969;
    // gap 431 bytes
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2979 bytes
loc_1a5969: // 0160:1a5969
    memoryASet32(ds, 0x1df670, eax);
    goto loc_1a5d7c;
    // gap 1033 bytes
loc_1a5d7c: // 0160:1a5d7c
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
}
void sub_1a4c10() // 0160:1a4c10 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1a4c13: // 0160:1a4c13
    eax += 0x00000018;
    edx = 0;
    memoryASet32(ds, eax + 1962908, edx);
    memoryASet32(ds, eax + 1962912, edx);
    memoryASet32(ds, eax + 1962916, edx);
    memoryASet32(ds, eax + 1962920, edx);
    memoryASet32(ds, eax + 1962924, edx);
    memoryASet32(ds, eax + 1962928, edx);
    if (eax != 0x00000180)
        goto loc_1a4c13;
    edx = pop32();
    esp += 4;
}
void sub_1a4c45() // 0160:1a4c45 +long
{
    esp -= 4;
    goto loc_1a4c45;
loc_1a47d5: // 0160:1a47d5
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
    // gap 1132 bytes
loc_1a4c45: // 0160:1a4c45
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    ecx = edx;
    if (stop("postCondition"))
        goto loc_1a4c52;
    ecx = -ecx;
loc_1a4c52: // 0160:1a4c52
    ebx--;
    if (ecx)
        goto loc_1a4c5e;
    eax = ebx;
    ebx--;
    memoryASet(ds, esi + eax, 0x30);
loc_1a4c5e: // 0160:1a4c5e
    edi = 0x0000000a;
loc_1a4c63: // 0160:1a4c63
    if (!ecx)
        goto loc_1a4c8a;
    if (stop("postCondition"))
        goto loc_1a4c8a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    eax = ebx;
    dl += 0x30;
    memoryASet(ds, esi + eax, dl);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx--;
    ecx = eax;
    goto loc_1a4c63;
loc_1a4c8a: // 0160:1a4c8a
    if (stop("postCondition"))
        goto loc_1a47d5;
    eax = ebx;
    ebx--;
    memoryASet(ds, esi + eax, 0x20);
    goto loc_1a4c8a;
}
void sub_1a4c9b() // 0160:1a4c9b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0;
    edi = 0;
    ebp = 0;
    memoryASet32(ds, esp, edx);
loc_1a4cad: // 0160:1a4cad
    edx = memoryAGet32(ds, esp);
    ecx = ebp;
    eax = 0;
loc_1a4cb4: // 0160:1a4cb4
    esi = memoryAGet32(ds, ecx + 1963806);
    bl = memoryAGet(ds, edx + 1959372);
    memoryASet(ds, esi + eax, bl);
    eax++;
    edx++;
    if ((int32_t)eax < (int32_t)0x00000008)
        goto loc_1a4cb4;
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 1963806);
    edx = memoryAGet32(ds, edi + 1962932);
    eax += 0x00000009;
    sub_1a4c45();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 1963806);
    edx = memoryAGet32(ds, edi + 1962936);
    eax += 0x0000000d;
    sub_1a4c45();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 1963806);
    edx = memoryAGet32(ds, edi + 1962944);
    eax += 0x00000011;
    sub_1a4c45();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 1963806);
    edx = memoryAGet32(ds, edi + 1962948);
    eax += 0x00000015;
    sub_1a4c45();
    esi = memoryAGet32(ds, edi + 1962944);
    eax = memoryAGet32(ds, edi + 1962948);
    ebx = 0x00000004;
    esi -= eax;
    eax = memoryAGet32(ds, ecx + 1963806);
    edx = esi;
    eax += 0x00000019;
    sub_1a4c45();
    eax = 0x00000019;
    edx = memoryAGet32(ds, ecx + 1963806);
    edx += eax;
    dl = memoryAGet(ds, edx + 1);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_1a4d71;
    eax = 0x0000001a;
loc_1a4d71: // 0160:1a4d71
    edx = memoryAGet32(ss, ebp + 1963806);
    dl = memoryAGet(ds, edx + eax + 1);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_1a4d87;
    eax++;
loc_1a4d87: // 0160:1a4d87
    if ((int32_t)(esi & esi) <= 0)
        goto loc_1a4d95;
    edx = memoryAGet32(ss, ebp + 1963806);
    memoryASet(ds, edx + eax, 0x2b);
loc_1a4d95: // 0160:1a4d95
    if (stop("postCondition"))
        goto loc_1a4da1;
    edx = memoryAGet32(ss, ebp + 1963806);
    memoryASet(ds, edx + eax, 0x2d);
loc_1a4da1: // 0160:1a4da1
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000018;
    ebx += 0x000000aa;
    ebp += 0x00000004;
    memoryASet32(ds, esp, ebx);
    if (ebp != 0x00000040)
        goto loc_1a4cad;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4dc6() // 0160:1a4dc6 +long
{
    esp -= 4;
    goto loc_1a4dc6;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a4dc6: // 0160:1a4dc6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    eax = 0;
loc_1a4dd0: // 0160:1a4dd0
    memoryASet32(ds, eax + 3833512, edx);
    edx++;
    eax += 0x00000004;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1a4dd0;
    esi = 0x00000001;
    edi = 0;
    ebp = 0;
loc_1a4de8: // 0160:1a4de8
    if (!esi)
        goto loc_1a4dbf;
    edi++;
    if ((int32_t)edi >= (int32_t)0x00000100)
        goto loc_1a4dbf;
    esi = ebp;
    eax = ebp;
loc_1a4df9: // 0160:1a4df9
    edx = memoryAGet32(ds, eax + 3833516) * 0x00000018;
    ebx = memoryAGet32(ds, eax + 3833512) * 0x00000018;
    ebx = memoryAGet32(ds, ebx + 1962952);
    if ((int32_t)ebx >= (int32_t)memoryAGet32(ds, edx + 1962952))
        goto loc_1a4e21;
    if (ebp != memoryAGet32(ds, edx + 1962932))
        goto loc_1a4e91;
loc_1a4e21: // 0160:1a4e21
    edx = memoryAGet32(ds, eax + 3833512) * 0x00000018;
    if (ebp != memoryAGet32(ds, edx + 1962932))
        goto loc_1a4e3f;
    edx = memoryAGet32(ds, eax + 3833516) * 0x00000018;
    if (ebp != memoryAGet32(ds, edx + 1962932))
        goto loc_1a4e91;
loc_1a4e3f: // 0160:1a4e3f
    edx = memoryAGet32(ds, eax + 3833516) * 0x00000018;
    ebx = memoryAGet32(ds, eax + 3833512) * 0x00000018;
    ecx = memoryAGet32(ds, ebx + 1962952);
    if (ecx != memoryAGet32(ds, edx + 1962952))
        goto loc_1a4e6f;
    ebx = memoryAGet32(ds, ebx + 1962932);
    ecx = memoryAGet32(ds, edx + 1962932);
    if ((int32_t)ebx <= (int32_t)ecx)
        goto loc_1a4e6f;
    if (ebp != ecx)
        goto loc_1a4e91;
loc_1a4e6f: // 0160:1a4e6f
    ebx = memoryAGet32(ds, eax + 3833516) * 0x000000aa;
    edx = memoryAGet32(ds, eax + 3833512) * 0x000000aa;
    edx = memoryAGet32(ds, edx + 1959502);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, ebx + 1959502))
        goto loc_1a4eae;
loc_1a4e91: // 0160:1a4e91
    edx = memoryAGet32(ds, eax + 3833516);
    ebx = memoryAGet32(ds, eax + 3833512);
    memoryASet32(ds, eax + 3833512, edx);
    esi = 0x00000001;
    memoryASet32(ds, eax + 3833516, ebx);
loc_1a4eae: // 0160:1a4eae
    eax += 0x00000004;
    if ((int32_t)eax >= (int32_t)0x0000003c)
        goto loc_1a4de8;
    goto loc_1a4df9;
}
void sub_1a4ebf() // 0160:1a4ebf +long
{
    esp -= 4;
    goto loc_1a4ebf;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 249 bytes
loc_1a4ebf: // 0160:1a4ebf
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    sub_1a9969();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x3bc04c, edx);
    edx = 0x001d1d7c;
    edi = 0x0000002a;
    sub_1a45ae();
    edx = 0x001d1d95;
    eax = 0x00000018;
    esi = 0;
    sub_1a45ae();
loc_1a4ef3: // 0160:1a4ef3
    ecx = memoryAGet32(ds, 0x3bc044);
    ecx <<= 3;
    ecx += esi;
    ecx <<= 2;
    ecx = memoryAGet32(ds, ecx + 3833512);
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    if ((int32_t)esi >= (int32_t)0x00000002)
        goto loc_1a4f22;
    eax = ecx * 0x000000aa;
    if (memoryAGet32(ds, eax + 1959502) != 0x00000000)
        goto loc_1a4f27;
loc_1a4f22: // 0160:1a4f22
    ebx = 0x001d1d2c;
loc_1a4f27: // 0160:1a4f27
    eax = 0x000000a0;
    edx = edi;
    sub_1a4760();
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x3bc040);
    edi += 0x0000000c;
    eax <<= cl;
    esi++;
    if (!(eax & edx))
        goto loc_1a4f54;
    edx = 0x00000001;
    eax = esi;
    sub_1a4932();
loc_1a4f54: // 0160:1a4f54
    if ((int32_t)esi < (int32_t)0x00000008)
        goto loc_1a4ef3;
    ebx = 0x001d1db3;
    edx = 0x00000096;
    eax = 0x00000118;
    sub_1a4760();
    ebx = 0x001d1db8;
    edx = 0x00000096;
    eax = 0x000000c8;
    sub_1a4760();
    if ((int32_t)memoryAGet32(ds, 0x3bc03c) >= (int32_t)0x00000002)
        goto loc_1a4dc0;
    eax = 0x0000000a;
    sub_1a488e();
    goto loc_1a4dc0;
}
void sub_1a4f9d() // 0160:1a4f9d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0x00000118;
    edi = 0x0000009c;
    ebp = 0x0000000a;
    edx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x3bc044, edx);
    memoryASet32(ds, 0x3bc040, edx);
    memoryASet32(ds, 0x3bc03c, edx);
    memoryASet32(ds, 0x1df640, esi);
    memoryASet32(ds, 0x1df644, edi);
    sub_1a4dc6();
    sub_1a4c9b();
    sub_1a4ebf();
    sub_1a4983();
    eax = 0x000000a8;
    edx = 0xffffff58;
    memoryASet32(ds, 0x1df6c3, ebp);
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df668, eax);
    memoryASet32(ds, 0x1df66c, edx);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a501b() // 0160:1a501b +long
{
    esp -= 4;
    goto loc_1a501b;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 597 bytes
loc_1a501b: // 0160:1a501b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx)
        goto loc_1a5038;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a5257;
loc_1a5038: // 0160:1a5038
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a5048;
    edi = 0x00000001;
    goto loc_1a504d;
loc_1a5048: // 0160:1a5048
    edi = 0xffffffff;
loc_1a504d: // 0160:1a504d
    esi = memoryAGet32(ds, 0x3a7470);
    esi -= memoryAGet32(ds, 0x1df6c7);
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1a5132;
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, eax);
    ebx = 0;
loc_1a506e: // 0160:1a506e
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    edx = eax;
    eax = ebx + 1;
    if (edx != eax)
        goto loc_1a5128;
    ecx = memoryAGet32(ds, 0x3bc044);
    ecx <<= 3;
    ecx += ebx;
    ecx = memoryAGet32(ds, stop("GetOpAddress"));
    edx = ecx * 0x000000aa;
    if (memoryAGet32(ds, edx + 1959502) == 0x00000000)
        goto loc_1a5128;
    edx = 0x00000001;
    edx <<= cl;
    ecx = edx;
    edx = memoryAGet32(ds, 0x3bc040);
    ebp = memoryAGet32(ds, 0x3bc040);
    edx ^= ecx;
    if (!(ecx & ebp))
        goto loc_1a50e2;
    ecx = memoryAGet32(ds, 0x3bc03c);
    memoryASet32(ds, 0x3bc040, edx);
    ecx--;
    edx = 0;
    memoryASet32(ds, 0x3bc03c, ecx);
    goto loc_1a5104;
loc_1a50e2: // 0160:1a50e2
    ecx = memoryAGet32(ds, 0x3bc03c);
    if ((int32_t)ecx >= (int32_t)memoryAGet32(ds, 0x1df5b0))
        goto loc_1a5109;
    memoryASet32(ds, 0x3bc040, edx);
    edx = ecx + 1;
    memoryASet32(ds, 0x3bc03c, edx);
    edx = 0x00000001;
loc_1a5104: // 0160:1a5104
    sub_1a4932();
loc_1a5109: // 0160:1a5109
    if ((int32_t)memoryAGet32(ds, 0x3bc03c) <= (int32_t)0x00000001)
        goto loc_1a511e;
    eax = 0x0000000a;
    sub_1a484f();
    goto loc_1a5128;
loc_1a511e: // 0160:1a511e
    eax = 0x0000000a;
    sub_1a488e();
loc_1a5128: // 0160:1a5128
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000002)
        goto loc_1a506e;
loc_1a5132: // 0160:1a5132
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000009)
        goto loc_1a5159;
    eax = 0;
    edx = 0x00000001;
    memoryASet32(ds, 0x1df670, eax);
    memoryASet32(ds, 0x1df6c3, edx);
loc_1a5159: // 0160:1a5159
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x0000000a)
        goto loc_1a51a8;
    if ((int32_t)memoryAGet32(ds, 0x3bc03c) <= (int32_t)0x00000001)
        goto loc_1a51a8;
    eax = 0xffffffff;
    ebx = 0x000000ff;
    ecx = 0;
    edx = 0x00000080;
    memoryASet32(ds, 0x1dfc80, ecx);
    memoryASet32(ds, 0x1df670, ecx);
    memoryASet32(ds, 0x1df6c3, eax);
    sub_1a4206();
    eax = 0x0000001a;
    sub_1b9c1d();
loc_1a51a8: // 0160:1a51a8
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1a5224;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x0000000b)
        goto loc_1a5224;
    edx = memoryAGet32(ds, 0x1df594);
    edx += edi;
    memoryASet32(ds, 0x1df594, edx);
    if ((int32_t)edx <= (int32_t)0x00000001)
        goto loc_1a51e1;
    ecx = 0;
    memoryASet32(ds, 0x1df594, ecx);
loc_1a51e1: // 0160:1a51e1
    if ((int32_t)memoryAGet32(ds, 0x1df594) >= (int32_t)0x00000000)
        goto loc_1a51f4;
    memoryASet32(ds, 0x1df594, 0x00000001);
loc_1a51f4: // 0160:1a51f4
    eax = memoryAGet32(ds, 0x1df594);
    if (stop("postCondition"))
        goto loc_1a5204;
    if (eax == 0x00000001)
        goto loc_1a5210;
    goto loc_1a521a;
loc_1a5204: // 0160:1a5204
    memoryASet32(ds, 0x3a7fd4, 0x001d1dbe);
    goto loc_1a521a;
loc_1a5210: // 0160:1a5210
    memoryASet32(ds, 0x3a7fd4, 0x001d1dc7);
loc_1a521a: // 0160:1a521a
    eax = 0x0000000b;
    sub_1a49c6();
loc_1a5224: // 0160:1a5224
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1a4dbf;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x0000000c)
        goto loc_1a4dbf;
    memoryASet(ds, 0x3bc044, memoryAGet(ds, 0x3bc044) ^ 0x01);
    sub_1a4ebf();
    goto loc_1a4dbf;
loc_1a5257: // 0160:1a5257
    memoryASet32(ds, 0x1df6c7, edx);
    goto loc_1a4dbf;
}
void sub_1a5262() // 0160:1a5262 +long
{
    esp -= 4;
    goto loc_1a5262;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1180 bytes
loc_1a5262: // 0160:1a5262
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000020;
    edx = 0;
    ebx = 0x00000010;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, ebx);
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, edx);
loc_1a5281: // 0160:1a5281
    eax = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, eax + 1963742);
    if (stop("postCondition"))
        goto loc_1a5386;
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_1a52aa;
    edx = memoryAGet32(ds, esp + 12);
    edi = 0;
    memoryASet32(ds, edx + 1963758, edi);
    goto loc_1a52bb;
loc_1a52aa: // 0160:1a52aa
    ecx = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, ecx + 1963758, edx);
loc_1a52bb: // 0160:1a52bb
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = eax * 0x000000aa;
    ecx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp + 24, eax);
    eax = memoryAGet32(ds, esp + 4);
    edi = memoryAGet32(ds, esp + 8);
    eax <<= 6;
    esi = 0;
    memoryASet32(ds, esp + 20, eax);
    eax = 0x00000040;
    memoryASet32(ds, ecx + 1963774, edx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 20);
    ebp = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 16, eax);
loc_1a52fc: // 0160:1a52fc
    if ((int32_t)esi >= (int32_t)0x00000008)
        goto loc_1a530f;
    al = memoryAGet(ss, ebp + 1959372);
    memoryASet(ds, edi + 1950193, al);
    goto loc_1a5316;
loc_1a530f: // 0160:1a530f
    memoryASet(ds, edi + 1950193, 0x20);
loc_1a5316: // 0160:1a5316
    eax = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esp + 24);
    eax += esi;
    edx = esi + 18;
    ebx = memoryAGet32(ds, esp + 28);
    edx += ecx;
    ecx = memoryAGet32(ds, esp + 16);
    ecx += ebx;
loc_1a532f: // 0160:1a532f
    eax += 0x00000010;
    bl = memoryAGet(ds, edx + 1959372);
    edx += 0x00000012;
    memoryASet(ds, eax + 1949920, bl);
    if (eax != ecx)
        goto loc_1a532f;
    ebx = memoryAGet32(ds, esp + 28);
    edi++;
    ebp++;
    ebx++;
    esi++;
    memoryASet32(ds, esp + 28, ebx);
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1a52fc;
    edx = 0x00000007;
    eax = memoryAGet32(ds, esp + 8);
    eax += edx;
    goto loc_1a5365;
loc_1a5363: // 0160:1a5363
    eax--;
    edx--;
loc_1a5365: // 0160:1a5365
    if ((int32_t)(edx & edx) <= 0)
        goto loc_1a5376;
    ecx = 0;
    cl = memoryAGet(ds, eax + 1950193);
    if (ecx == 0x00000020)
        goto loc_1a5363;
loc_1a5376: // 0160:1a5376
    edx++;
    eax = memoryAGet32(ds, esp + 12);
    edx = edx + edx*4;
    memoryASet32(ds, eax + 1950258, edx);
    goto loc_1a53d7;
loc_1a5386: // 0160:1a5386
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00000003;
    esi = memoryAGet32(ds, esp + 8);
    edi = memoryAGet32(ds, esp);
    memoryASet32(ds, eax + 1963758, ecx);
    eax = memoryAGet32(ds, esp + 4);
    dl = 0x20;
    eax <<= 6;
loc_1a53a5: // 0160:1a53a5
    eax++;
    memoryASet(ds, eax + 1949935, dl);
    memoryASet(ds, eax + 1949951, dl);
    esi++;
    memoryASet(ds, eax + 1949967, dl);
    memoryASet(ds, esi + 1950192, dl);
    memoryASet(ds, eax + 1949983, dl);
    if (esi != edi)
        goto loc_1a53a5;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, eax + 1950258, 0x00000005);
loc_1a53d7: // 0160:1a53d7
    edi = memoryAGet32(ds, esp);
    ebp = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 4);
    edi += 0x00000010;
    ebp += 0x00000010;
    eax += 0x00000004;
    edx++;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 8, ebp);
    memoryASet32(ds, esp + 12, eax);
    memoryASet32(ds, esp + 4, edx);
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_1a5281;
    sub_196e87();
    sub_196f97();
    esp += 0x00000020;
    goto loc_1a4dbf;
}
void sub_1a541a() // 0160:1a541a +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = ebx;
    ebx = 0;
    goto loc_1a5430;
loc_1a5422: // 0160:1a5422
    cl = memoryAGet(ds, eax);
    if (cl == memoryAGet(ds, edx))
        goto loc_1a542d;
    eax = 0;
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1a542d: // 0160:1a542d
    edx++;
    eax++;
    ebx++;
loc_1a5430: // 0160:1a5430
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1a5422;
    eax = 0x00000001;
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a543c() // 0160:1a543c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = edx;
    edx = 0;
    goto loc_1a5454;
loc_1a5444: // 0160:1a5444
    ebx = 0;
    bl = memoryAGet(ds, eax);
    if (ebx == 0x00000020)
        goto loc_1a5452;
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a5452: // 0160:1a5452
    eax++;
    edx++;
loc_1a5454: // 0160:1a5454
    if ((int32_t)edx < (int32_t)ecx)
        goto loc_1a5444;
    eax = 0x00000001;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5460() // 0160:1a5460 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    edi = eax;
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 20, ebx);
    if (!ebx)
        goto loc_1a547c;
    ebp = 0x00000010;
    goto loc_1a5481;
loc_1a547c: // 0160:1a547c
    ebp = 0x00000008;
loc_1a5481: // 0160:1a5481
    edx = ebp;
    eax = edi;
    sub_1a543c();
    if (eax)
        goto loc_1a5537;
    if (memoryAGet32(ds, esp + 20) == 0x00000000)
        goto loc_1a54ad;
    eax = 0x00000001;
    edx = 0x00000005;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 16, edx);
    goto loc_1a54ba;
loc_1a54ad: // 0160:1a54ad
    esi = 0x00000001;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 16, esi);
loc_1a54ba: // 0160:1a54ba
    memoryASet32(ds, esp + 8, 0x001de5cc);
    ecx = memoryAGet32(ds, esp + 4);
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    ebx = 0;
    eax += eax;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp, eax);
    goto loc_1a5530;
loc_1a54da: // 0160:1a54da
    esi = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    esi += eax;
    goto loc_1a5513;
loc_1a54e9: // 0160:1a54e9
    eax = memoryAGet32(ds, esp + 24);
    if (eax != memoryAGet32(ds, esp + 12))
        goto loc_1a54f9;
    if (ecx == memoryAGet32(ds, esp + 20))
        goto loc_1a550f;
loc_1a54f9: // 0160:1a54f9
    ebx = ebp;
    edx = esi;
    eax = edi;
    sub_1a541a();
    if (!eax)
        goto loc_1a550f;
    eax = 0x00000001;
    goto loc_1a5539;
loc_1a550f: // 0160:1a550f
    esi += 0x00000012;
    ecx++;
loc_1a5513: // 0160:1a5513
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_1a54e9;
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 24);
    ebx += 0x000000aa;
    ecx++;
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 24, ecx);
loc_1a5530: // 0160:1a5530
    if ((int32_t)memoryAGet32(ds, esp + 24) < (int32_t)0x00000010)
        goto loc_1a54da;
loc_1a5537: // 0160:1a5537
    eax = 0;
loc_1a5539: // 0160:1a5539
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a5541() // 0160:1a5541 +long
{
    esp -= 4;
    goto loc_1a5541;
loc_1a492a: // 0160:1a492a
    esp += 0x00000008;
    goto loc_1a4dbf;
    // gap 1165 bytes
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1915 bytes
loc_1a5541: // 0160:1a5541
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = 0;
    memoryASet32(ds, esp, ebp);
    memoryASet32(ds, esp + 4, ebp);
loc_1a5553: // 0160:1a5553
    if (!ebp)
        goto loc_1a555e;
    ecx = 0x00000010;
    goto loc_1a5563;
loc_1a555e: // 0160:1a555e
    ecx = 0x00000008;
loc_1a5563: // 0160:1a5563
    edi = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    eax = 0;
    goto loc_1a558e;
loc_1a556e: // 0160:1a556e
    edx = memoryAGet32(ds, 0x3bc048) * 0x000000aa;
    edx += edi;
    ebx = edx + eax;
    eax++;
    edx = memoryAGet32(ds, esi + 1963874);
    bl = memoryAGet(ds, ebx + 1959372);
    memoryASet(ds, edx + eax + 12, bl);
loc_1a558e: // 0160:1a558e
    if ((int32_t)eax < (int32_t)ecx)
        goto loc_1a556e;
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ebp++;
    ecx += 0x00000004;
    esi += 0x00000012;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)ebp < (int32_t)0x00000005)
        goto loc_1a5553;
    goto loc_1a492a;
}
void sub_1a55b1() // 0160:1a55b1 +long
{
    esp -= 4;
    goto loc_1a55b1;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2027 bytes
loc_1a55b1: // 0160:1a55b1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = 0;
    ebp = 0;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 16, edx);
loc_1a55ca: // 0160:1a55ca
    if (memoryAGet32(ds, esp + 12) == 0x00000000)
        goto loc_1a55d8;
    ecx = 0x00000010;
    goto loc_1a55dd;
loc_1a55d8: // 0160:1a55d8
    ecx = 0x00000008;
loc_1a55dd: // 0160:1a55dd
    edx = memoryAGet32(ds, esp + 16);
    edi = memoryAGet32(ds, 0x3bc048);
    memoryASet32(ds, esp + 4, edx);
    edx = edi * 0x000000aa;
    esi = ebp;
    memoryASet32(ds, esp, edx);
    edi = edx;
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
    edi += edx;
    goto loc_1a5614;
loc_1a5602: // 0160:1a5602
    eax++;
    edx = memoryAGet32(ds, esi + 1963874);
    dl = memoryAGet(ds, edx + eax + 12);
    memoryASet(ds, edi + eax + 1959371, dl);
loc_1a5614: // 0160:1a5614
    if ((int32_t)eax < (int32_t)ecx)
        goto loc_1a5602;
    eax = 0x001de5cc;
    ebx = memoryAGet32(ds, esp);
    edi = memoryAGet32(ds, esp + 4);
    eax += ebx;
    edx = ecx;
    eax += edi;
    sub_1a543c();
    ebx = memoryAGet32(ds, 0x3bc048);
    edx = eax;
    eax = ebx * 0x000000aa;
    stop("disassembly failed at 160:1a563f sete dl");
    edx &= 0x000000ff;
    memoryASet32(ds, esi + eax + 1959502, edx);
    eax += ebp;
    ecx = memoryAGet32(ds, eax + 1959502);
    if (ecx)
        goto loc_1a5676;
    memoryASet32(ds, eax + 1959522, ecx);
    ebx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, eax + 1959462, ecx);
    ebx++;
    memoryASet32(ds, eax + 1959482, ecx);
    memoryASet32(ds, esp + 8, ebx);
loc_1a5676: // 0160:1a5676
    esi = memoryAGet32(ds, esp + 16);
    edi = memoryAGet32(ds, esp + 12);
    ebp += 0x00000004;
    esi += 0x00000012;
    edi++;
    memoryASet32(ds, esp + 16, esi);
    memoryASet32(ds, esp + 12, edi);
    if ((int32_t)edi < (int32_t)0x00000005)
        goto loc_1a55ca;
    edx = memoryAGet32(ds, 0x3bc048);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    eax += edx;
    if ((int32_t)memoryAGet32(ds, esp + 8) < (int32_t)0x00000004)
        goto loc_1a56bd;
    ecx = 0;
    memoryASet32(ds, eax + 1959502, ecx);
    goto loc_1a56ef;
loc_1a56bd: // 0160:1a56bd
    edx = 0x00000008;
    eax += 0x001de5cc;
    sub_1a543c();
    if (eax)
        goto loc_1a56ef;
    edx = memoryAGet32(ds, 0x3bc048);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    memoryASet32(ds, edx + eax + 1959502, 0x00000001);
loc_1a56ef: // 0160:1a56ef
    esp += 0x00000014;
    goto loc_1a4dbf;
}
void sub_1a56f7() // 0160:1a56f7 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x3bc038) != 0x00000000)
        goto loc_1a5720;
    ebx = 0x001d1dd0;
    edx = 0x0000009c;
    eax = 0x000000a0;
    sub_1a45e9();
    memoryASet32(ds, 0x3bc038, 0x00000001);
loc_1a5720: // 0160:1a5720
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5723() // 0160:1a5723 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x3bc038) == 0x00000000)
        goto loc_1a5763;
    ecx = 0x002197c8;
    edx = 0x003ae628;
    ecx += 0x0000c300;
    edx += 0x0000c300;
    eax = ecx;
    ecx += 0x00000c80;
loc_1a574d: // 0160:1a574d
    ebx = memoryAGet32(ds, eax);
    eax += 0x00000004;
    memoryASet32(ds, edx, ebx);
    edx += 0x00000004;
    if (eax != ecx)
        goto loc_1a574d;
    ebx = 0;
    memoryASet32(ds, 0x3bc038, ebx);
loc_1a5763: // 0160:1a5763
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5767() // 0160:1a5767 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1a4c9b();
    edx = 0;
    esi = 0x00000048;
    memoryASet32(ds, 0x3bc038, edx);
    sub_1a5541();
    sub_1a9969();
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, 0x1df762);
    memoryASet32(ds, 0x3bc04c, edx);
    edx = 0x0000000c;
    ecx = 0x00000004;
    sub_1a4760();
loc_1a57a7: // 0160:1a57a7
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 1963874);
    sub_1a4760();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000014)
        goto loc_1a57a7;
    ebx = memoryAGet32(ds, 0x3bc048);
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    edx = 0x00000024;
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    sub_1a4760();
    ebx = 0x001d1de4;
    edx = 0x00000090;
    eax = 0x00000037;
    sub_1a4760();
    ebx = 0x001d1de9;
    edx = 0x00000084;
    eax = 0x00000037;
    sub_1a4760();
    ebx = 0x001d1db3;
    edx = 0x0000008a;
    eax = 0x00000109;
    sub_1a4760();
    edx = memoryAGet32(ds, 0x3bc048);
    ebx = 0x00000003;
    eax = 0x001df6da;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    sub_1a4c45();
    ebx = 0x001df6d3;
    edx = 0x00000030;
    eax = 0x000000a0;
    sub_1a4760();
    ebx = 0x001d1dee;
    edx = 0x0000008a;
    goto loc_1a5b6b;
    // gap 777 bytes
loc_1a5b6b: // 0160:1a5b6b
    eax = 0x000000a0;
    sub_1a4760();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5862() // 0160:1a5862 +long
{
    esp -= 4;
    goto loc_1a5862;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2716 bytes
loc_1a5862: // 0160:1a5862
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x3bc048);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    ebp = eax;
    ebp <<= 4;
    ebp += eax;
    edi = ebp + 16;
    esi = 0;
    ebx = ebp;
    cl = 0x20;
loc_1a5887: // 0160:1a5887
    eax = esi * 0x00000012;
    edx = edi;
    eax += ebp;
loc_1a588e: // 0160:1a588e
    eax++;
    memoryASet(ds, eax + 1959371, cl);
    if (eax != edx)
        goto loc_1a588e;
    ebx += 0x00000004;
    edx = 0;
    memoryASet32(ds, ebx + 1959518, edx);
    memoryASet32(ds, ebx + 1959458, edx);
    edi += 0x00000012;
    memoryASet32(ds, ebx + 1959478, edx);
    esi++;
    memoryASet32(ds, ebx + 1959498, edx);
    if ((int32_t)esi < (int32_t)0x00000005)
        goto loc_1a5887;
    edx = memoryAGet32(ds, 0x3bc048);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = 0;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    eax = memoryAGet32(ds, 0x3bc048);
    edx = 0x00000003;
    ebx = 0x00000064;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    goto loc_1a4dbf;
}
void sub_1a591a() // 0160:1a591a +long
{
    esp -= 4;
    goto loc_1a591a;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2900 bytes
loc_1a591a: // 0160:1a591a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x00000109;
    ebx = 0x00000090;
    esi = 0x00000003;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    ecx = 0;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    memoryASet32(ds, 0x1df6cb, ecx);
    sub_1a5767();
    eax = 0x00000001;
    memoryASet32(ds, 0x1df6c3, esi);
    memoryASet32(ds, 0x1df668, edi);
    memoryASet32(ds, 0x1df66c, ebp);
    memoryASet32(ds, 0x1df670, eax);
    goto loc_1a5d7c;
    // gap 1033 bytes
loc_1a5d7c: // 0160:1a5d7c
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
}
void sub_1a5973() // 0160:1a5973 +long
{
    esp -= 4;
    goto loc_1a5973;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2989 bytes
loc_1a5973: // 0160:1a5973
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = 0x001d1d75;
    edx = 0;
    ecx = 0x000000b0;
    memoryASet32(ds, 0x1dc094, edx);
    sub_1a9969();
    eax = 0x0000004e;
    memoryASet32(ds, 0x3bc04c, edx);
    edx = 0x001d1df4;
    esi = 0x00000060;
    sub_1a45ae();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x0000000f;
    sub_1a4760();
    ebx = 0x001d1d79;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0x000000a8;
    sub_1a4760();
    eax = 0xffffff58;
    edx = 0x00000001;
    memoryASet32(ds, 0x1df640, ecx);
    memoryASet32(ds, 0x1df644, esi);
    memoryASet32(ds, 0x1df6c3, edi);
    memoryASet32(ds, 0x1df668, ebp);
    memoryASet32(ds, 0x1df66c, eax);
    memoryASet32(ds, 0x1df670, edx);
    goto loc_1a5d7c;
    // gap 883 bytes
loc_1a5d7c: // 0160:1a5d7c
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
}
void sub_1a5a09() // 0160:1a5a09 +long
{
    esp -= 4;
    goto loc_1a5a09;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3139 bytes
loc_1a5a09: // 0160:1a5a09
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a4dc0;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a5a48;
    sub_1a5862();
    ebx = 0;
    ecx = 0x00000003;
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, ecx);
loc_1a5a48: // 0160:1a5a48
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000002)
        goto loc_1a4dc0;
    esi = 0;
    edi = 0x00000003;
    memoryASet32(ds, 0x1df670, esi);
    memoryASet32(ds, 0x1df6c3, edi);
    goto loc_1a4dc0;
}
void sub_1a5a79() // 0160:1a5a79 +long
{
    esp -= 4;
    push32(ebx);
    if (stop("postCondition"))
        goto loc_1a5a8b;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, eax + 1, 0x4f);
    memoryASet(ds, eax + 2, 0x4e);
    ebx = pop32();
    esp += 4;
    return;
loc_1a5a8b: // 0160:1a5a8b
    if (edx)
        goto loc_1a5a9a;
    memoryASet(ds, eax, 0x4f);
    memoryASet(ds, eax + 1, 0x46);
    memoryASet(ds, eax + 2, 0x46);
    ebx = pop32();
    esp += 4;
    return;
loc_1a5a9a: // 0160:1a5a9a
    ebx = 0x00000003;
    sub_1a4c45();
    ebx = pop32();
    esp += 4;
}
void sub_1a5aa6() // 0160:1a5aa6 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x1dd55c);
    edx = eax;
    if (!ebx)
        goto loc_1a5ada;
    if (eax < 0x00000005)
        goto loc_1a5ac2;
    if (eax <= 0x00000005)
        goto loc_1a5ace;
    if (eax == 0x00000009)
        goto loc_1a5ad5;
    goto loc_1a5ada;
loc_1a5ac2: // 0160:1a5ac2
    if (eax != 0x00000003)
        goto loc_1a5ada;
    edx = 0x00000014;
    goto loc_1a5ada;
loc_1a5ace: // 0160:1a5ace
    edx = 0x00000012;
    goto loc_1a5ada;
loc_1a5ad5: // 0160:1a5ad5
    edx = 0x00000013;
loc_1a5ada: // 0160:1a5ada
    if ((int32_t)eax >= (int32_t)0x00000012)
        goto loc_1a5af5;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax += 0x0000000b;
    sub_1a5a79();
loc_1a5af5: // 0160:1a5af5
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5af8() // 0160:1a5af8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1a9969();
    ebx = 0x001d1e00;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000018;
    sub_1a45e9();
    edx = 0;
    ecx = 0;
    memoryASet32(ds, 0x3bc04c, edx);
loc_1a5b21: // 0160:1a5b21
    if ((int32_t)ecx >= (int32_t)0x00000012)
        goto loc_1a5b61;
    eax = ecx;
    sub_1a5aa6();
    edx = esi;
    eax = 0x00000050;
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    ecx++;
    sub_1a4760();
    eax = ecx;
    sub_1a5aa6();
    edx = esi;
    eax = 0x000000f0;
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    sub_1a4760();
    ecx++;
    esi += 0x0000000c;
    goto loc_1a5b21;
loc_1a5b61: // 0160:1a5b61
    ebx = 0x001d1db3;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5b7a() // 0160:1a5b7a +long
{
    esp -= 4;
    push32(ebx);
    if (memoryAGet32(ds, 0x1dd55c) == 0x00000000)
        goto loc_1a5ba9;
    ebx = 0x00000001;
    eax = 0;
loc_1a5b8b: // 0160:1a5b8b
    eax += 0x000000ac;
    memoryASet32(ds, eax + 3791974, ebx);
    memoryASet32(ds, eax + 3791978, ebx);
    memoryASet32(ds, eax + 3791982, ebx);
    if (eax != 0x00000ac0)
        goto loc_1a5b8b;
loc_1a5ba9: // 0160:1a5ba9
    ebx = pop32();
    esp += 4;
}
void sub_1a5bab() // 0160:1a5bab +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1a5bae: // 0160:1a5bae
    eax += 0x00000054;
    edx = memoryAGet32(ds, 0x1df620);
    memoryASet32(ds, eax + 3795254, edx);
    edx = memoryAGet32(ds, 0x1df618);
    memoryASet32(ds, eax + 3795246, edx);
    edx = memoryAGet32(ds, 0x1df61c);
    memoryASet32(ds, eax + 3795250, edx);
    if (eax != 0x00000150)
        goto loc_1a5bae;
    edx = pop32();
    esp += 4;
}
void sub_1a5c69() // 0160:1a5c69 +long
{
    esp -= 4;
    goto loc_1a5c69;
loc_1a5bde: // 0160:1a5bde
    sub_199993();
    eax = memoryAGet32(ds, 0x1df620);
    ebx = 0;
    memoryASet32(ds, 0x1df800, eax);
    eax = memoryAGet32(ds, 0x1df618);
    memoryASet32(ds, 0x1df620, ebx);
    memoryASet32(ds, 0x1df804, eax);
    eax = memoryAGet32(ds, 0x1df61c);
    memoryASet32(ds, 0x1df618, ebx);
    memoryASet32(ds, 0x1df808, eax);
    memoryASet32(ds, 0x1df61c, ebx);
    sub_1a5bab();
    eax = 0;
loc_1a5c1c: // 0160:1a5c1c
    edx = memoryAGet32(ds, 0x1df782);
    bl = memoryAGet(ds, eax + 1963999);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x1df78a);
    bl = memoryAGet(ds, eax + 1963977);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x1df79a);
    bl = memoryAGet(ds, eax + 1964021);
    memoryASet(ds, edx + eax, bl);
    eax++;
    if ((int32_t)eax < (int32_t)0x0000000b)
        goto loc_1a5c1c;
loc_1a5c4f: // 0160:1a5c4f
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000006)
        goto loc_1a5c66;
    if (memoryAGet32(ds, 0x1dc028) == 0x00000000)
        goto loc_1a5c66;
    sub_1a5af8();
loc_1a5c66: // 0160:1a5c66
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a5c69: // 0160:1a5c69
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000006)
        goto loc_1a5c7b;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_1a5c96;
loc_1a5c7b: // 0160:1a5c7b
    if (memoryAGet32(ds, 0x1dc030) != 0x00000000)
        goto loc_1a5cab;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_1a5cab;
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000000)
        goto loc_1a5cab;
loc_1a5c96: // 0160:1a5c96
    sub_1a41d7();
    if (eax < 0x00000001)
        goto loc_1a5cab;
    if (eax <= 0x00000001)
        goto loc_1a5cac;
    if (eax == 0x00000002)
        goto loc_1a5d2b;
loc_1a5cab: // 0160:1a5cab
    esp += 4;
    return;
loc_1a5cac: // 0160:1a5cac
    eax = 0x00000001;
loc_1a5cb1: // 0160:1a5cb1
    push32(ebx);
    push32(edx);
    if (eax == memoryAGet32(ds, 0x1dd55c))
        goto loc_1a5c66;
    memoryASet32(ds, 0x1dd55c, eax);
    if (!eax)
        goto loc_1a5bde;
    sub_199889();
    eax = memoryAGet32(ds, 0x1df800);
    memoryASet32(ds, 0x1df620, eax);
    eax = memoryAGet32(ds, 0x1df804);
    memoryASet32(ds, 0x1df618, eax);
    eax = memoryAGet32(ds, 0x1df808);
    memoryASet32(ds, 0x1df61c, eax);
    sub_1a5bab();
    eax = 0;
loc_1a5cf2: // 0160:1a5cf2
    edx = memoryAGet32(ds, 0x1df782);
    bl = memoryAGet(ds, eax + 1963988);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x1df78a);
    bl = memoryAGet(ds, eax + 1963966);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x1df79a);
    bl = memoryAGet(ds, eax + 1964010);
    memoryASet(ds, edx + eax, bl);
    eax++;
    if ((int32_t)eax >= (int32_t)0x0000000b)
        goto loc_1a5c4f;
    goto loc_1a5cf2;
loc_1a5d2b: // 0160:1a5d2b
    eax = 0;
    goto loc_1a5cb1;
}
void sub_1a5d2f() // 0160:1a5d2f +long
{
    esp -= 4;
    goto loc_1a5d2f;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3945 bytes
loc_1a5d2f: // 0160:1a5d2f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000006;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a5af8();
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
}
void sub_1a5d8b() // 0160:1a5d8b +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx)
        goto loc_1a5da1;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a5de7;
loc_1a5da1: // 0160:1a5da1
    eax = memoryAGet32(ds, 0x3a7470);
    eax -= memoryAGet32(ds, 0x1df6c7);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a5dbb;
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, eax);
loc_1a5dbb: // 0160:1a5dbb
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000013)
        goto loc_1a5ded;
    edi = 0;
    ebp = 0x00000004;
    memoryASet32(ds, 0x1df670, edi);
    memoryASet32(ds, 0x1df6c3, ebp);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_1a5de7: // 0160:1a5de7
    memoryASet32(ds, 0x1df6c7, edx);
loc_1a5ded: // 0160:1a5ded
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a5e0f() // 0160:1a5e0f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (eax > 0x00000006)
        goto loc_1a5ee8;
    esi = eax;
    esi <<= 2;
    indirectJump(cs, memoryAGet32(cs, esi + 1727987)); return; // 0160:1a5e20;
    // gap 193 bytes
loc_1a5ee8: // 0160:1a5ee8
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5eec() // 0160:1a5eec +long
{
    esp -= 4;
    goto loc_1a5eec;
loc_1a5b61: // 0160:1a5b61
    ebx = 0x001d1db3;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 882 bytes
loc_1a5eec: // 0160:1a5eec
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1a9969();
    edx = 0x001d1e10;
    eax = 0x0000000c;
    sub_1a45ae();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x3bc04c, edx);
loc_1a5f10: // 0160:1a5f10
    eax = ecx;
    sub_1a5e0f();
    eax = ecx;
    eax = eax * 0x0000000c;
    ebx = memoryAGet32(ds, esi + 1964080);
    edx = eax + 48;
    esi += 0x00000004;
    eax = 0x000000a0;
    ecx++;
    sub_1a4760();
    if ((int32_t)ecx < (int32_t)0x00000007)
        goto loc_1a5f10;
    goto loc_1a5b61;
}
void sub_1a5f40() // 0160:1a5f40 +long
{
    esp -= 4;
    goto loc_1a5f40;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4022 bytes
loc_1a5d7c: // 0160:1a5d7c
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 437 bytes
loc_1a5f40: // 0160:1a5f40
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    esi = 0x00000001;
    edi = 0x00000007;
    ebp = 0x000000a8;
    ecx = 0;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    memoryASet32(ds, 0x3bc030, ecx);
    memoryASet32(ds, 0x3bc02c, esi);
    sub_1a5eec();
    eax = 0xffffff58;
    memoryASet32(ds, 0x1df6c3, edi);
    memoryASet32(ds, 0x1df668, ebp);
    memoryASet32(ds, 0x1df670, esi);
    memoryASet32(ds, 0x1df66c, eax);
    goto loc_1a5d7c;
}
void sub_1a5f9f() // 0160:1a5f9f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx)
        goto loc_1a5fbb;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a609c;
loc_1a5fbb: // 0160:1a5fbb
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a5fcb;
    ecx = 0x00000001;
    goto loc_1a5fd0;
loc_1a5fcb: // 0160:1a5fcb
    ecx = 0xffffffff;
loc_1a5fd0: // 0160:1a5fd0
    eax = memoryAGet32(ds, 0x3a7470);
    eax -= memoryAGet32(ds, 0x1df6c7);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a5fec;
    edx = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, edx);
loc_1a5fec: // 0160:1a5fec
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a6069;
    ebx = 0;
loc_1a5ff7: // 0160:1a5ff7
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0xf640);
    sub_1a47d9();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_1a6063;
    if (ebx != 0x00000004)
        goto loc_1a6054;
    ebp = memoryAGet32(ds, 0x1df5c0);
    ebp += ecx;
    memoryASet32(ds, 0x1df5c0, ebp);
    if (stop("postCondition"))
        goto loc_1a602f;
    memoryASet32(ds, 0x1df5c0, 0x0000000a);
loc_1a602f: // 0160:1a602f
    if ((int32_t)memoryAGet32(ds, 0x1df5c0) <= (int32_t)0x0000000a)
        goto loc_1a6040;
    edi = 0;
    memoryASet32(ds, 0x1df5c0, edi);
loc_1a6040: // 0160:1a6040
    eax = memoryAGet32(ds, 0x1df5c0) * 0x000003e8;
    eax += 0x00001388;
    sub_1b9691();
loc_1a6054: // 0160:1a6054
    eax = ebx;
    sub_1a5e0f();
    eax = ebx + 1;
    sub_1a49c6();
loc_1a6063: // 0160:1a6063
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000007)
        goto loc_1a5ff7;
loc_1a6069: // 0160:1a6069
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000008)
        goto loc_1a60a2;
    eax = 0x00000001;
    edx = 0x00000004;
    sub_1bb45a();
    eax = 0;
    memoryASet32(ds, 0x1df6c3, edx);
    memoryASet32(ds, 0x1df670, eax);
    goto loc_1a60a2;
loc_1a609c: // 0160:1a609c
    memoryASet32(ds, 0x1df6c7, edx);
loc_1a60a2: // 0160:1a60a2
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a60a8() // 0160:1a60a8 +long
{
    esp -= 4;
    push32(edx);
    if (eax != 0x00000001)
        goto loc_1a60f9;
    edx = memoryAGet32(ds, 0x39bde0);
    eax <<= 2;
    if (!edx)
        goto loc_1a60db;
    edx = memoryAGet32(ds, eax + 1964108);
    memoryASet(ds, edx + 24, 0x20);
    edx = memoryAGet32(ds, eax + 1964108);
    memoryASet(ds, edx + 25, 0x4f);
    eax = memoryAGet32(ds, eax + 1964108);
    memoryASet(ds, eax + 26, 0x4e);
    edx = pop32();
    esp += 4;
    return;
loc_1a60db: // 0160:1a60db
    edx = memoryAGet32(ds, eax + 1964108);
    memoryASet(ds, edx + 24, 0x4f);
    edx = memoryAGet32(ds, eax + 1964108);
    memoryASet(ds, edx + 25, 0x46);
    eax = memoryAGet32(ds, eax + 1964108);
    memoryASet(ds, eax + 26, 0x46);
loc_1a60f9: // 0160:1a60f9
    edx = pop32();
    esp += 4;
}
void sub_1a60fb() // 0160:1a60fb +long
{
    esp -= 4;
    goto loc_1a60fb;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4917 bytes
loc_1a60fb: // 0160:1a60fb
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    sub_1a9969();
    edx = 0x001d1e1f;
    eax = 0x0000000c;
    edi = 0x00000030;
    sub_1a45ae();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x3bc04c, edx);
loc_1a6125: // 0160:1a6125
    eax = ecx;
    sub_1a60a8();
    edx = edi;
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, esi + 1964108);
    esi += 0x00000004;
    sub_1a4760();
    ecx++;
    edi += 0x00000018;
    if ((int32_t)ecx < (int32_t)0x00000002)
        goto loc_1a6125;
    ebx = 0x001d1db3;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    goto loc_1a4dc0;
}
void sub_1a6163() // 0160:1a6163 +long
{
    esp -= 4;
    goto loc_1a6163;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3998 bytes
loc_1a5d64: // 0160:1a5d64
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 984 bytes
loc_1a6163: // 0160:1a6163
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000009;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a60fb();
    goto loc_1a5d64;
}
void sub_1a619d() // 0160:1a619d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx)
        goto loc_1a61b8;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a6263;
loc_1a61b8: // 0160:1a61b8
    eax = memoryAGet32(ds, 0x3a7470);
    eax -= memoryAGet32(ds, 0x1df6c7);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a61d4;
    edx = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, edx);
loc_1a61d4: // 0160:1a61d4
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a6237;
    ebx = 0;
loc_1a61db: // 0160:1a61db
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_1a6231;
    if (ebx != 0x00000001)
        goto loc_1a6222;
    ah = memoryAGet(ds, 0x39bde0);
    ah ^= 0x01;
    edi = 0;
    memoryASet(ds, 0x39bde0, ah);
    sub_1a4432();
    eax = memoryAGet32(ds, 0x39bde0);
    memoryASet32(ds, 0x1dc024, edi);
    sub_19823d();
    sub_1a448f();
loc_1a6222: // 0160:1a6222
    eax = ebx;
    sub_1a60a8();
    eax = ebx + 1;
    sub_1a49c6();
loc_1a6231: // 0160:1a6231
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000002)
        goto loc_1a61db;
loc_1a6237: // 0160:1a6237
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000003)
        goto loc_1a6269;
    ebp = 0;
    eax = 0x00000004;
    memoryASet32(ds, 0x1df670, ebp);
    memoryASet32(ds, 0x1df6c3, eax);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a6263: // 0160:1a6263
    memoryASet32(ds, 0x1df6c7, edx);
loc_1a6269: // 0160:1a6269
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a626e() // 0160:1a626e +long
{
    esp -= 4;
    goto loc_1a626e;
loc_1a5b61: // 0160:1a5b61
    ebx = 0x001d1db3;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1780 bytes
loc_1a626e: // 0160:1a626e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1a9969();
    edx = 0x001d1e2e;
    eax = 0x0000000c;
    esi = 0x00000048;
    sub_1a45ae();
    edx = 0;
    ecx = 0;
    memoryASet32(ds, 0x3bc04c, edx);
loc_1a6295: // 0160:1a6295
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 1964116);
    sub_1a4760();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x0000000c)
        goto loc_1a6295;
    goto loc_1a5b61;
}
void sub_1a62b7() // 0160:1a62b7 +long
{
    esp -= 4;
    goto loc_1a62b7;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3998 bytes
loc_1a5d64: // 0160:1a5d64
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 1324 bytes
loc_1a62b7: // 0160:1a62b7
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x0000000c;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a626e();
    goto loc_1a5d64;
}
void sub_1a63ad() // 0160:1a63ad +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx)
        goto loc_1a63c2;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a63e7;
loc_1a63c2: // 0160:1a63c2
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000004)
        goto loc_1a63ed;
    esi = 0;
    memoryASet32(ds, 0x1df6c3, eax);
    memoryASet32(ds, 0x1df670, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_1a63e7: // 0160:1a63e7
    memoryASet32(ds, 0x1df6c7, edx);
loc_1a63ed: // 0160:1a63ed
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a63f0() // 0160:1a63f0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_1a9969();
    edx = 0;
    eax = memoryAGet32(ds, 0x1df874);
    memoryASet32(ds, 0x3bc04c, edx);
    if (eax < 0x00000001)
        goto loc_1a6412;
    if (eax <= 0x00000001)
        goto loc_1a641d;
    if (eax == 0x00000002)
        goto loc_1a6424;
    goto loc_1a6433;
loc_1a6412: // 0160:1a6412
    if (eax)
        goto loc_1a6433;
    edx = 0x001d1e44;
    goto loc_1a6429;
loc_1a641d: // 0160:1a641d
    edx = 0x001d1e51;
    goto loc_1a6429;
loc_1a6424: // 0160:1a6424
    edx = 0x001d1e5e;
loc_1a6429: // 0160:1a6429
    eax = 0x0000004e;
    sub_1a45ae();
loc_1a6433: // 0160:1a6433
    ebx = 0x001d1d75;
    edx = 0x0000005a;
    eax = 0x00000090;
    sub_1a4760();
    ebx = 0x001d1d79;
    edx = 0x0000005a;
    eax = 0x000000b0;
    sub_1a4760();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a645e() // 0160:1a645e +long
{
    esp -= 4;
    goto loc_1a645e;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2961 bytes
loc_1a5957: // 0160:1a5957
    memoryASet32(ds, 0x1df6c3, esi);
    memoryASet32(ds, 0x1df668, edi);
    memoryASet32(ds, 0x1df66c, ebp);
    memoryASet32(ds, 0x1df670, eax);
    goto loc_1a5d7c;
    // gap 1033 bytes
loc_1a5d7c: // 0160:1a5d7c
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 1747 bytes
loc_1a645e: // 0160:1a645e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a63f0();
    ebx = 0x000000b0;
    ecx = 0x00000060;
    esi = 0x0000000e;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    edx = 0;
    eax = 0x00000001;
    memoryASet32(ds, 0x1df878, edx);
    memoryASet32(ds, 0x1df640, ebx);
    memoryASet32(ds, 0x1df644, ecx);
    goto loc_1a5957;
}
void sub_1a64a0() // 0160:1a64a0 +long
{
    esp -= 4;
    goto loc_1a64a0;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2345 bytes
loc_1a56ef: // 0160:1a56ef
    esp += 0x00000014;
    goto loc_1a4dbf;
    // gap 3497 bytes
loc_1a64a0: // 0160:1a64a0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edi = 0;
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp + 12, edi);
loc_1a64b3: // 0160:1a64b3
    esi = 0x00000001;
    ebp = memoryAGet32(ds, esp + 12);
    ebx = memoryAGet32(ds, esp + 8);
    ecx = edi;
    ebx += 0x00000004;
    ecx <<= 3;
loc_1a64c8: // 0160:1a64c8
    eax = ebp;
    eax |= esi;
    memoryASet32(ds, ecx + 3832872, eax);
    if (memoryAGet32(ds, ebx + 1959522) == 0x00000000)
        goto loc_1a6516;
    eax = memoryAGet32(ds, ebx + 1959462);
    edx = eax * 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, ebx + 1959522));
    eax <<= 16;
    edx = memoryAGet32(ds, ebx + 1959462);
    eax |= edx;
    memoryASet32(ds, ecx + 3832876, eax);
    if ((int32_t)eax <= (int32_t)0x270f0000)
        goto loc_1a6520;
    eax = edx;
    eax |= 0x270f0000;
    memoryASet32(ds, ecx + 3832876, eax);
    goto loc_1a6520;
loc_1a6516: // 0160:1a6516
    memoryASet32(ds, ecx + 3832876, 0xf0000001);
loc_1a6520: // 0160:1a6520
    ecx += 0x00000008;
    edi++;
    esi++;
    ebx += 0x00000004;
    if ((int32_t)esi < (int32_t)0x00000005)
        goto loc_1a64c8;
    edx = memoryAGet32(ds, esp + 14);
    edx++;
    ecx = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, esp + 14, dx);
    ecx += 0x000000aa;
    esi = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp + 8, ecx);
    if (esi != 0x00140000)
        goto loc_1a64b3;
    ebx = 0x00000001;
loc_1a655a: // 0160:1a655a
    if (!edi)
        goto loc_1a65a0;
    edi = 0;
    eax = 0;
loc_1a6562: // 0160:1a6562
    edx = memoryAGet32(ds, eax + 3832876);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax + 3832884))
        goto loc_1a6594;
    edi = esp;
    esi = eax + 3832872;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = eax + 3832872;
    esi = eax + 3832880;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    esi = esp;
    edi = eax + 3832880;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = ebx;
loc_1a6594: // 0160:1a6594
    eax += 0x00000008;
    if ((int32_t)eax >= (int32_t)0x00000278)
        goto loc_1a655a;
    goto loc_1a6562;
loc_1a65a0: // 0160:1a65a0
    memoryASet32(ds, esp + 16, edi);
    ebp = 0;
loc_1a65a6: // 0160:1a65a6
    if (memoryAGet32(ss, ebp + 3832876) == 0xf0000001)
        goto loc_1a6669;
    ecx = memoryAGet32(ss, ebp + 3832872);
    ecx = sar32(ecx, 0x10);
    ecx = ecx * 0x000000aa;
    esi = memoryAGet32(ss, ebp + 3832872);
    esi &= 0x0000ffff;
    esi = esi * 0x00000012;
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
    ebx = ecx;
    esi += ecx;
loc_1a65de: // 0160:1a65de
    edi = memoryAGet32(ds, edx + 1964160);
    cl = memoryAGet(ds, esi + 1959372);
    memoryASet(ds, edi + eax, cl);
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_1a6602;
    edi = memoryAGet32(ds, edx + 1964160);
    cl = memoryAGet(ds, ebx + 1959372);
    memoryASet(ds, edi + eax + 17, cl);
loc_1a6602: // 0160:1a6602
    ebx++;
    eax++;
    esi++;
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_1a65de;
    ebx = 0x00000005;
    eax = memoryAGet32(ss, ebp + 3832876);
    ecx = memoryAGet32(ds, edx + 1964160);
    eax = sar32(eax, 0x10);
    ecx += 0x00000019;
    edx = eax;
    eax = ecx;
    sub_1a4c45();
    eax = 0x00000019;
    ebx = memoryAGet32(ds, esp + 16);
loc_1a6633: // 0160:1a6633
    edx = memoryAGet32(ds, ebx + 1964160);
    dl = memoryAGet(ds, edx + eax);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_1a664f;
    if ((int32_t)eax >= (int32_t)0x0000001e)
        goto loc_1a664f;
    eax++;
    goto loc_1a6633;
loc_1a664f: // 0160:1a664f
    if ((int32_t)memoryAGet32(ss, ebp + 3832876) >= (int32_t)0x00000000)
        goto loc_1a66a4;
    edx = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, edx + 1964160);
    memoryASet(ds, edx + eax + -1, 0x2d);
    goto loc_1a66a4;
loc_1a6669: // 0160:1a6669
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
loc_1a666f: // 0160:1a666f
    ebx = memoryAGet32(ds, edx + 1964160);
    memoryASet(ds, ebx + eax, 0x2d);
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_1a6689;
    ebx = memoryAGet32(ds, edx + 1964160);
    memoryASet(ds, ebx + eax + 17, 0x2d);
loc_1a6689: // 0160:1a6689
    eax++;
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_1a666f;
    eax = memoryAGet32(ds, edx + 1964160);
    ebx = 0x00000005;
    eax += 0x00000019;
    edx = 0;
    sub_1a4c45();
loc_1a66a4: // 0160:1a66a4
    esi = memoryAGet32(ds, esp + 16);
    esi += 0x00000004;
    ebp += 0x00000008;
    memoryASet32(ds, esp + 16, esi);
    if (esi != 0x00000020)
        goto loc_1a65a6;
    goto loc_1a56ef;
}
void sub_1a66c0() // 0160:1a66c0 +long
{
    esp -= 4;
    goto loc_1a66c0;
loc_1a5b61: // 0160:1a5b61
    ebx = 0x001d1db3;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2886 bytes
loc_1a66c0: // 0160:1a66c0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1a9969();
    ebx = 0x001d1e6e;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x0000002a;
    memoryASet32(ds, 0x3bc04c, edx);
    sub_1a45e9();
    ebx = 0x001d1e7d;
    edx = 0x00000018;
    eax = 0x000000a0;
    ecx = 0;
    sub_1a45e9();
loc_1a66fb: // 0160:1a66fb
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 1964160);
    sub_1a45e9();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000020)
        goto loc_1a66fb;
    goto loc_1a5b61;
}
void sub_1a671d() // 0160:1a671d +long
{
    esp -= 4;
    goto loc_1a671d;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3998 bytes
loc_1a5d64: // 0160:1a5d64
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 2450 bytes
loc_1a671d: // 0160:1a671d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000010;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a64a0();
    sub_1a66c0();
    goto loc_1a5d64;
}
void sub_1a675c() // 0160:1a675c +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx)
        goto loc_1a6771;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a6796;
loc_1a6771: // 0160:1a6771
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a679c;
    esi = 0;
    memoryASet32(ds, 0x1df6c3, eax);
    memoryASet32(ds, 0x1df670, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_1a6796: // 0160:1a6796
    memoryASet32(ds, 0x1df6c7, edx);
loc_1a679c: // 0160:1a679c
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a679f() // 0160:1a679f +long
{
    esp -= 4;
    goto loc_1a679f;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2956 bytes
loc_1a5952: // 0160:1a5952
    eax = 0x00000001;
    memoryASet32(ds, 0x1df6c3, esi);
    memoryASet32(ds, 0x1df668, edi);
    memoryASet32(ds, 0x1df66c, ebp);
    memoryASet32(ds, 0x1df670, eax);
    goto loc_1a5d7c;
    // gap 1033 bytes
loc_1a5d7c: // 0160:1a5d7c
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 2580 bytes
loc_1a679f: // 0160:1a679f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000b0;
    ebx = 0x00000060;
    esi = 0x00000008;
    ecx = 0;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a9969();
    edx = 0x001d1e9c;
    eax = 0x0000004e;
    ebx = 0x001d1d75;
    memoryASet32(ds, 0x3bc04c, ecx);
    sub_1a45ae();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x000000a8;
    sub_1a4760();
    ebx = 0x001d1d79;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0xffffff58;
    sub_1a4760();
    goto loc_1a5952;
}
void sub_1a6813() // 0160:1a6813 +long
{
    esp -= 4;
    goto loc_1a6813;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3234 bytes
loc_1a5a68: // 0160:1a5a68
    memoryASet32(ds, 0x1df670, esi);
    memoryASet32(ds, 0x1df6c3, edi);
    goto loc_1a4dc0;
    // gap 3482 bytes
loc_1a6813: // 0160:1a6813
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a4dc0;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a6852;
    sub_1a4c10();
    ebx = 0;
    ecx = 0x00000005;
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, ecx);
loc_1a6852: // 0160:1a6852
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000002)
        goto loc_1a4dc0;
    esi = 0;
    edi = 0x00000005;
    goto loc_1a5a68;
}
void sub_1a68a3() // 0160:1a68a3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if (eax > 0x0000000a)
        goto loc_1a6a2b;
    eax <<= 2;
    indirectJump(cs, memoryAGet32(cs, eax + 1730679)); return; // 0160:1a68b3;
    // gap 369 bytes
loc_1a6a2b: // 0160:1a6a2b
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6a30() // 0160:1a6a30 +long
{
    esp -= 4;
    goto loc_1a6a30;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5006 bytes
loc_1a6154: // 0160:1a6154
    eax = 0x000000a0;
    sub_1a4760();
    goto loc_1a4dc0;
    // gap 2253 bytes
loc_1a6a30: // 0160:1a6a30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    sub_1a9969();
    ebx = 0x001d1eb9;
    eax = 0x000000a0;
    edx = 0;
    edi = 0xfffffff4;
    sub_1a45e9();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x3bc04c, edx);
loc_1a6a5c: // 0160:1a6a5c
    eax = ecx;
    sub_1a68a3();
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_1a6a70;
    eax = ecx * 0x0000000c;
    eax += 0x0000000f;
    goto loc_1a6a7c;
loc_1a6a70: // 0160:1a6a70
    if (ecx != 0x00000008)
        goto loc_1a6a79;
    eax = 0x0000008c;
    goto loc_1a6a7c;
loc_1a6a79: // 0160:1a6a79
    eax = edi + 15;
loc_1a6a7c: // 0160:1a6a7c
    edx = eax;
    edi += 0x0000000c;
    ebx = memoryAGet32(ds, esi + 1964192);
    esi += 0x00000004;
    eax = 0x000000a0;
    ecx++;
    sub_1a4760();
    if ((int32_t)ecx < (int32_t)0x0000000b)
        goto loc_1a6a5c;
    ebx = 0x001d1db3;
    edx = 0x0000009d;
    goto loc_1a6154;
}
void sub_1a6aa9() // 0160:1a6aa9 +long
{
    esp -= 4;
    goto loc_1a6aa9;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3998 bytes
loc_1a5d64: // 0160:1a5d64
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 3358 bytes
loc_1a6aa9: // 0160:1a6aa9
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x000000a3;
    ecx = 0x00000005;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a6a30();
    goto loc_1a5d64;
}
void sub_1a6ae3() // 0160:1a6ae3 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx)
        goto loc_1a6af9;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a6b3f;
loc_1a6af9: // 0160:1a6af9
    eax = memoryAGet32(ds, 0x3a7470);
    eax -= memoryAGet32(ds, 0x1df6c7);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a6b13;
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, eax);
loc_1a6b13: // 0160:1a6b13
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x0000000c)
        goto loc_1a6b45;
    edi = 0;
    ebp = 0x00000004;
    memoryASet32(ds, 0x1df670, edi);
    memoryASet32(ds, 0x1df6c3, ebp);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_1a6b3f: // 0160:1a6b3f
    memoryASet32(ds, 0x1df6c7, edx);
loc_1a6b45: // 0160:1a6b45
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a6b49() // 0160:1a6b49 +long
{
    esp -= 4;
    goto loc_1a6b49;
loc_1a5b61: // 0160:1a5b61
    ebx = 0x001d1db3;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4047 bytes
loc_1a6b49: // 0160:1a6b49
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1a9969();
    ebx = 0x001d1ec7;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000030;
    memoryASet32(ds, 0x3bc04c, edx);
    edx = 0x0000000c;
    ecx = 0;
    sub_1a45e9();
loc_1a6b75: // 0160:1a6b75
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 1964128);
    sub_1a4760();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000014)
        goto loc_1a6b75;
    goto loc_1a5b61;
}
void sub_1a6b97() // 0160:1a6b97 +long
{
    esp -= 4;
    goto loc_1a6b97;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3998 bytes
loc_1a5d64: // 0160:1a5d64
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 3596 bytes
loc_1a6b97: // 0160:1a6b97
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000004;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a6b49();
    goto loc_1a5d64;
}
void sub_1a6bd1() // 0160:1a6bd1 +long
{
    esp -= 4;
    goto loc_1a6bd1;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7691 bytes
loc_1a6bd1: // 0160:1a6bd1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a4dbf;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a6c0c;
    ebx = 0;
    ecx = 0x00000005;
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, ecx);
loc_1a6c0c: // 0160:1a6c0c
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000002)
        goto loc_1a6c34;
    esi = 0;
    edi = 0x00000006;
    memoryASet32(ds, 0x1df670, esi);
    memoryASet32(ds, 0x1df6c3, edi);
loc_1a6c34: // 0160:1a6c34
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000003)
        goto loc_1a6c5b;
    ebp = 0;
    eax = 0x0000000c;
    memoryASet32(ds, 0x1df670, ebp);
    memoryASet32(ds, 0x1df6c3, eax);
loc_1a6c5b: // 0160:1a6c5b
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000004)
        goto loc_1a6c83;
    edx = 0;
    ebx = 0x00000007;
    memoryASet32(ds, 0x1df670, edx);
    memoryASet32(ds, 0x1df6c3, ebx);
loc_1a6c83: // 0160:1a6c83
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000005)
        goto loc_1a6cab;
    ecx = 0;
    esi = 0x00000009;
    memoryASet32(ds, 0x1df670, ecx);
    memoryASet32(ds, 0x1df6c3, esi);
loc_1a6cab: // 0160:1a6cab
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000006)
        goto loc_1a4dbf;
    edi = 0;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df670, edi);
    memoryASet32(ds, 0x1df6c3, ebp);
    goto loc_1a4dbf;
}
void sub_1a6cdc() // 0160:1a6cdc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_1a6d3e;
    if (memoryAGet32(ds, 0x1dc030) != 0x00000000)
        goto loc_1a6d3e;
    if (memoryAGet32(ds, 0x1dd246) != 0x00000000)
        goto loc_1a6d3e;
    if (memoryAGet32(ds, 0x39effc) == 0x00000000)
        goto loc_1a6d3e;
    edi = memoryAGet32(ds, 0x1df8d0);
    if (stop("postCondition"))
        goto loc_1a6d3e;
    if ((int32_t)memoryAGet32(ds, 0x1df5a8) >= (int32_t)0x00000023)
        goto loc_1a6d24;
    if (!edi)
        goto loc_1a6d24;
    edx = edi + -1;
    memoryASet32(ds, 0x1df8d0, edx);
loc_1a6d24: // 0160:1a6d24
    ebx = memoryAGet32(ds, 0x1df8d4);
    ecx = memoryAGet32(ds, 0x1df8cc);
    ebx++;
    ecx++;
    memoryASet32(ds, 0x1df8d4, ebx);
    memoryASet32(ds, 0x1df8cc, ecx);
loc_1a6d3e: // 0160:1a6d3e
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6d43() // 0160:1a6d43 +long
{
    esp -= 4;
    goto loc_1a6d43;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8061 bytes
loc_1a6d43: // 0160:1a6d43
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_1a6d8e;
    ebx = 0x00001770;
    ecx = memoryAGet32(ds, 0x1dc0cc);
    memoryASet32(ds, 0x1df8d0, ebx);
    if (ecx)
        goto loc_1a6d9e;
    edx = 0x00000005;
    eax = 0;
    sub_1a9cc8();
    if (eax)
        goto loc_1a6d9e;
    esi = 0x000036b0;
    edi = 0x00000001;
    memoryASet32(ds, 0x1df8d0, esi);
    memoryASet32(ds, 0x1dc0cc, edi);
    goto loc_1a6d9e;
loc_1a6d8e: // 0160:1a6d8e
    eax = memoryAGet32(ds, 0x1df5a8);
    eax = eax * 0x00000bb8;
    memoryASet32(ds, 0x1df8d0, eax);
loc_1a6d9e: // 0160:1a6d9e
    if (memoryAGet32(ds, 0x1df75e) == 0x00000000)
        goto loc_1a6db1;
    memoryASet32(ds, 0x1df8d0, 0x00003a98);
loc_1a6db1: // 0160:1a6db1
    ebx = memoryAGet32(ds, 0x1df8d0);
    edx = 0;
    ebx += 0x000000fa;
    memoryASet32(ds, 0x1df8d4, edx);
    memoryASet32(ds, 0x1df8d0, ebx);
    goto loc_1a4dc0;
}
void sub_1a6dd0() // 0160:1a6dd0 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x1df8cc, edx);
    sub_1a6d43();
    edx = pop32();
    esp += 4;
}
void sub_1a6de0() // 0160:1a6de0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x1df8d0);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    flags.zero = !(eax & eax);
    stop("disassembly failed at 160:1a6df5 sete al");
    eax &= 0x000000ff;
    memoryASet32(ds, 0x1df8d8, eax);
    eax = memoryAGet32(ds, 0x1df8d0);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6e11() // 0160:1a6e11 +long
{
    esp -= 4;
    goto loc_1a6e11;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8267 bytes
loc_1a6e11: // 0160:1a6e11
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, 0x1df8d4);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ecx = 0x0000003c;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    idiv32(ecx);
    esi = 0x0000003c;
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = 0x00000002;
    eax = 0x001df90c;
    esi = edx;
    edx = ecx;
    sub_1a4c45();
    ebx = 0;
    bl = memoryAGet(ds, 0x1df90c);
    if (ebx != 0x00000020)
        goto loc_1a6e6e;
    memoryASet(ds, 0x1df90c, 0x30);
loc_1a6e6e: // 0160:1a6e6e
    ebx = 0x00000002;
    eax = 0x001df90f;
    edx = esi;
    sub_1a4c45();
    ebx = 0;
    bl = memoryAGet(ds, 0x1df90f);
    if (ebx != 0x00000020)
        goto loc_1a6e93;
    memoryASet(ds, 0x1df90f, 0x30);
loc_1a6e93: // 0160:1a6e93
    ebx = 0x001df8ff;
    eax = 0x000000a0;
    edx = edi;
    sub_1a45e9();
    goto loc_1a4dc0;
}
void sub_1a6ea9() // 0160:1a6ea9 +long
{
    esp -= 4;
    goto loc_1a6ea9;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8409 bytes
loc_1a6e9f: // 0160:1a6e9f
    sub_1a45e9();
    goto loc_1a4dc0;
loc_1a6ea9: // 0160:1a6ea9
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ecx = eax;
    eax = memoryAGet32(ds, 0x1df8cc);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    esi = 0x0000003c;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    idiv32(esi);
    edi = 0x0000003c;
    esi = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx = 0x00000002;
    eax = 0x001df91c;
    edi = edx;
    edx = esi;
    sub_1a4c45();
    edx = 0;
    dl = memoryAGet(ds, 0x1df91c);
    if (edx != 0x00000020)
        goto loc_1a6f06;
    memoryASet(ds, 0x1df91c, 0x30);
loc_1a6f06: // 0160:1a6f06
    ebx = 0x00000002;
    eax = 0x001df91f;
    edx = edi;
    sub_1a4c45();
    edx = 0;
    dl = memoryAGet(ds, 0x1df91f);
    if (edx != 0x00000020)
        goto loc_1a6f2b;
    memoryASet(ds, 0x1df91f, 0x30);
loc_1a6f2b: // 0160:1a6f2b
    ebx = 0x00000002;
    eax = 0x001df923;
    edx = memoryAGet32(ds, 0x1df912);
    sub_1a4c45();
    edx = 0;
    dl = memoryAGet(ds, 0x1df923);
    if (edx != 0x00000020)
        goto loc_1a6f54;
    memoryASet(ds, 0x1df923, 0x30);
loc_1a6f54: // 0160:1a6f54
    if ((int32_t)memoryAGet32(ds, 0x1df912) <= (int32_t)0x00000001)
        goto loc_1a6f66;
    memoryASet(ds, 0x1df92b, 0x53);
    goto loc_1a6f6d;
loc_1a6f66: // 0160:1a6f66
    memoryASet(ds, 0x1df92b, 0x20);
loc_1a6f6d: // 0160:1a6f6d
    ebx = 0x001df916;
    eax = 0x000000a0;
    edx = ecx;
    goto loc_1a6e9f;
}
void sub_1a6f7e() // 0160:1a6f7e +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_1a9969();
    edx = 0;
    eax = 0x00000030;
    memoryASet32(ds, 0x3bc04c, edx);
    edx = 0x001d1ed5;
    sub_1a45ae();
    if (memoryAGet32(ds, 0x1df8d8) == 0x00000000)
        goto loc_1a6fb4;
    edx = 0x001d1ee1;
    eax = 0x0000003c;
    sub_1a45ae();
loc_1a6fb4: // 0160:1a6fb4
    eax = 0x00000054;
    sub_1a6e11();
    if (memoryAGet32(ds, 0x1df5b4) == 0x00000000)
        goto loc_1a6fd7;
    if (memoryAGet32(ds, 0x1df75e) != 0x00000000)
        goto loc_1a6fd7;
    ebx = 0x001d1ef2;
    goto loc_1a6fdc;
loc_1a6fd7: // 0160:1a6fd7
    ebx = 0x001d1f04;
loc_1a6fdc: // 0160:1a6fdc
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6fee() // 0160:1a6fee +long
{
    esp -= 4;
    goto loc_1a6fee;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8744 bytes
loc_1a6fee: // 0160:1a6fee
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000014;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a6f7e();
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    memoryASet32(ds, 0x39effc, ebp);
    ebx = 0;
    memoryASet32(ds, 0x39f234, ebp);
    memoryASet32(ds, 0x39f1ac, ebx);
    goto loc_1a4dbf;
}
void sub_1a705e() // 0160:1a705e +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a7109;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a7109;
    if (memoryAGet32(ds, 0x1df5b4) == 0x00000000)
        goto loc_1a70e6;
    ecx = memoryAGet32(ds, 0x1df75e);
    if (ecx)
        goto loc_1a70e6;
    edx = memoryAGet32(ds, 0x1df8d4);
    memoryASet32(ds, 0x1dc038, eax);
    memoryASet32(ds, 0x1df75e, eax);
    memoryASet32(ds, 0x39effc, eax);
    sub_1a6d43();
    eax = 0xfffffffd;
    esi = memoryAGet32(ds, 0x1df8d4);
    memoryASet32(ds, 0x1df8d8, ecx);
    memoryASet32(ds, 0x1df670, ecx);
    esi += edx;
    memoryASet32(ds, 0x1df6c3, eax);
    memoryASet32(ds, 0x1df8d4, esi);
    sub_19dc9c();
    sub_1a4261();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1a70e6: // 0160:1a70e6
    esi = 0;
    eax = 0xfffffffe;
    memoryASet32(ds, 0x39effc, esi);
    memoryASet32(ds, 0x1dfc80, esi);
    memoryASet32(ds, 0x1df670, esi);
    memoryASet32(ds, 0x1df6c3, eax);
    sub_1a4206();
loc_1a7109: // 0160:1a7109
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a710d() // 0160:1a710d +long
{
    esp -= 4;
    goto loc_1a710d;
loc_1a6fdc: // 0160:1a6fdc
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 287 bytes
loc_1a710d: // 0160:1a710d
    push32(ebx);
    push32(edx);
    sub_1a9969();
    ebx = 0x001d1f13;
    edx = 0x0000000c;
    eax = 0x000000a0;
    sub_1a45e9();
    ebx = 0x001d1ef2;
    edx = 0;
    eax = 0x000000a0;
    memoryASet32(ds, 0x3bc04c, edx);
    edx = 0x00000030;
    sub_1a4760();
    ebx = 0x001d1f21;
    edx = 0x00000048;
    eax = 0x000000a0;
    sub_1a4760();
    ebx = 0x001d1f31;
    edx = 0x00000060;
    eax = 0x000000a0;
    sub_1a4760();
    ebx = 0x001d1f3d;
    goto loc_1a6fdc;
}
void sub_1a7176() // 0160:1a7176 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x000000b0;
    eax = memoryAGet32(ds, 0x1dc0a0);
    ebx = 0;
    memoryASet32(ds, 0x1df92e, eax);
    eax = memoryAGet32(ds, 0x1dc09c);
    memoryASet32(ds, 0x1dc0a0, edx);
    memoryASet32(ds, 0x1df932, eax);
    eax = memoryAGet32(ds, 0x1dc098);
    memoryASet32(ds, 0x1dc09c, ebx);
    memoryASet32(ds, 0x1df936, eax);
    eax = memoryAGet32(ds, 0x1dc0bc);
    memoryASet32(ds, 0x1dc098, ebx);
    memoryASet32(ds, 0x1df93a, eax);
    eax = memoryAGet32(ds, 0x1dc0a8);
    memoryASet32(ds, 0x1dc0bc, ebx);
    memoryASet32(ds, 0x1df93e, eax);
    memoryASet32(ds, 0x1dc0a8, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a71d2() // 0160:1a71d2 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x1df92e);
    memoryASet32(ds, 0x1dc0a0, eax);
    eax = memoryAGet32(ds, 0x1df932);
    memoryASet32(ds, 0x1dc09c, eax);
    eax = memoryAGet32(ds, 0x1df936);
    memoryASet32(ds, 0x1dc098, eax);
    eax = memoryAGet32(ds, 0x1df93a);
    memoryASet32(ds, 0x1dc0bc, eax);
    eax = memoryAGet32(ds, 0x1df93e);
    memoryASet32(ds, 0x1dc0a8, eax);
    esp += 4;
}
void sub_1a7205() // 0160:1a7205 +long
{
    esp -= 4;
    goto loc_1a7205;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3128 bytes
loc_1a59fe: // 0160:1a59fe
    memoryASet32(ds, 0x1df670, edx);
    goto loc_1a5d7c;
    // gap 883 bytes
loc_1a5d7c: // 0160:1a5d7c
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 5242 bytes
loc_1a7205: // 0160:1a7205
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x00000001;
    ebx = 0x000000a0;
    ecx = 0x00000066;
    esi = 0x0000001e;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    memoryASet32(ds, 0x1dd246, edx);
    sub_1a7176();
    memoryASet32(ds, 0x1df640, ebx);
    memoryASet32(ds, 0x1df644, ecx);
    sub_1a710d();
    memoryASet32(ds, 0x1df6c3, esi);
    memoryASet32(ds, 0x1df668, edi);
    memoryASet32(ds, 0x1df66c, ebp);
    goto loc_1a59fe;
}
void sub_1a725c() // 0160:1a725c +long
{
    esp -= 4;
    goto loc_1a725c;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9366 bytes
loc_1a725c: // 0160:1a725c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a4dbf;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a72fa;
    ebx = 0x00000032;
    edx = memoryAGet32(ds, 0x1df8d4);
    ecx = eax;
    memoryASet32(ds, 0x1dc038, eax);
    esi = 0;
    eax = memoryAGet32(ds, 0x1df942);
    memoryASet32(ds, 0x1dc0e4, ebx);
    memoryASet32(ds, 0x1dd246, esi);
    edi = ecx;
    memoryASet32(ds, 0x39effc, ecx);
    memoryASet32(ds, 0x39f004, eax);
    memoryASet32(ds, 0x1df75e, edi);
    sub_1a6d43();
    eax = memoryAGet32(ds, 0x1df8d4);
    memoryASet32(ds, 0x1df8d8, esi);
    memoryASet32(ds, 0x1df670, esi);
    eax += edx;
    esi = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x1df8d4, eax);
    eax = esi * 0x000000ac;
    memoryASet32(ds, 0x1df6c3, 0xfffffffd);
    memoryASet32(ds, eax + 3792134, edi);
    sub_1a4261();
loc_1a72fa: // 0160:1a72fa
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000002)
        goto loc_1a7333;
    ebp = 0;
    ebx = 0xfffffffe;
    memoryASet32(ds, 0x1dd246, ebp);
    memoryASet32(ds, 0x1dfc80, ebp);
    memoryASet32(ds, 0x1df670, ebp);
    memoryASet32(ds, 0x1df6c3, ebx);
    sub_1a4206();
loc_1a7333: // 0160:1a7333
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000003)
        goto loc_1a739c;
    eax = memoryAGet32(ds, 0x1df942);
    memoryASet32(ds, 0x39f004, eax);
    eax = 0xfffffffd;
    edx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x1df6c3, eax);
    eax = edx * 0x000000ac;
    ecx = 0x00000032;
    edi = 0x00000001;
    esi = 0;
    memoryASet32(ds, 0x1dc0e4, ecx);
    memoryASet32(ds, 0x1dd246, esi);
    memoryASet32(ds, 0x39effc, edi);
    memoryASet32(ds, 0x1df670, esi);
    memoryASet32(ds, eax + 3792134, edi);
    sub_1a71d2();
    sub_1a4261();
loc_1a739c: // 0160:1a739c
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000004)
        goto loc_1a4dbf;
    ecx = 0x00000001;
    esi = 0;
    memoryASet32(ds, 0x39ef7a, ecx);
    memoryASet32(ds, 0x39effc, esi);
    memoryASet32(ds, 0x1df670, esi);
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1dd246, esi);
    memoryASet32(ds, 0x1dd550, esi);
    memoryASet32(ds, 0x1dfa14, esi);
    memoryASet32(ds, 0x1dfa0c, esi);
    memoryASet32(ds, 0x1dfa18, esi);
    goto loc_1a4dbf;
}
void sub_1a73f7() // 0160:1a73f7 +long
{
    esp -= 4;
    goto loc_1a73f7;
loc_1a45a8: // 0160:1a45a8
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 11849 bytes
loc_1a73f7: // 0160:1a73f7
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000034;
    push32(eax);
    ebp = edx;
    ecx = 0x00000006;
    edi = esp + 4;
    esi = 0x001a408b;
    for (; cx != 0; --cx) movsd<ES_EDI, DS_ESI>();
    ecx = 0x00000006;
    edi = esp + 28;
    esi = 0x001a40a3;
    for (; cx != 0; --cx) movsd<ES_EDI, DS_ESI>();
    if (edx != 0x00000048)
        goto loc_1a742d;
    edi = esp + 28;
    goto loc_1a7431;
loc_1a742d: // 0160:1a742d
    edi = esp + 4;
loc_1a7431: // 0160:1a7431
    edx = 0;
    esi = 0;
    memoryASet32(ds, esp + 52, edx);
loc_1a7439: // 0160:1a7439
    cl = memoryAGet(ds, esp + 52);
    eax = 0x00000001;
    edx = memoryAGet32(ds, esp);
    eax <<= cl;
    if (!(eax & edx))
        goto loc_1a747c;
    ecx = memoryAGet32(ds, esi + 1963742);
    if (stop("postCondition"))
        goto loc_1a747c;
    ecx = ecx * 0x000000aa;
    edx = edi;
    eax = ecx;
    ecx += 0x00000008;
loc_1a7462: // 0160:1a7462
    bl = memoryAGet(ds, eax + 1959372);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_1a7462;
    edx = edi;
    eax = ebp;
    sub_1a45ae();
    ebp += 0x0000000c;
loc_1a747c: // 0160:1a747c
    ebx = memoryAGet32(ds, esp + 52);
    ebx++;
    esi += 0x00000004;
    memoryASet32(ds, esp + 52, ebx);
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_1a7439;
    eax = ebp;
    esp += 0x00000038;
    goto loc_1a45a8;
}
void sub_1a7497() // 0160:1a7497 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    sub_1a9969();
    ebx = 0x00000002;
    edx = 0;
    eax = 0x001df8fc;
    memoryASet32(ds, 0x3bc04c, edx);
    edx = memoryAGet32(ds, 0x1df912);
    sub_1a4c45();
    edx = 0;
    dl = memoryAGet(ds, 0x1df8fc);
    if (edx != 0x00000020)
        goto loc_1a74d2;
    memoryASet(ds, 0x1df8fc, 0x30);
loc_1a74d2: // 0160:1a74d2
    ebx = 0x00000002;
    eax = 0x001df8e2;
    edx = memoryAGet32(ds, 0x1df912);
    sub_1a4c45();
    edx = 0;
    dl = memoryAGet(ds, 0x1df8e2);
    if (edx != 0x00000020)
        goto loc_1a74fb;
    memoryASet(ds, 0x1df8e2, 0x30);
loc_1a74fb: // 0160:1a74fb
    if (memoryAGet32(ds, 0x1df8d8) == 0x00000000)
        goto loc_1a750b;
    edx = 0x001df8dc;
    goto loc_1a7510;
loc_1a750b: // 0160:1a750b
    edx = 0x001df8f6;
loc_1a7510: // 0160:1a7510
    eax = 0x00000018;
    sub_1a45ae();
    eax = 0x00000030;
    edx = 0x00000054;
    sub_1a6e11();
    eax = ecx;
    ebx = 0x001d1f04;
    sub_1a73f7();
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7548() // 0160:1a7548 +long
{
    esp -= 4;
    goto loc_1a7548;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3998 bytes
loc_1a5d64: // 0160:1a5d64
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 6077 bytes
loc_1a7548: // 0160:1a7548
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000015;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a7497();
    goto loc_1a5d64;
}
void sub_1a7582() // 0160:1a7582 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a75c1;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a75c1;
    ebx = 0;
    esi = 0xfffffffe;
    memoryASet32(ds, 0x1dfc80, ebx);
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, esi);
    sub_1a4206();
loc_1a75c1: // 0160:1a75c1
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a75c5() // 0160:1a75c5 +long
{
    esp -= 4;
    goto loc_1a75c5;
loc_1a7535: // 0160:1a7535
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a4760();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 125 bytes
loc_1a75c5: // 0160:1a75c5
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    sub_1a9969();
    edx = 0;
    ecx = memoryAGet32(ds, 0x1df8d8);
    memoryASet32(ds, 0x3bc04c, edx);
    if (!ecx)
        goto loc_1a75f1;
    if ((int32_t)memoryAGet32(ds, 0x1df946) <= (int32_t)0x00000001)
        goto loc_1a75f1;
    edx = 0x001d1f4f;
    goto loc_1a75f6;
loc_1a75f1: // 0160:1a75f1
    edx = 0x001d1f6b;
loc_1a75f6: // 0160:1a75f6
    eax = 0;
    sub_1a45ae();
    eax = 0x00000024;
    edx = 0x00000048;
    sub_1a6ea9();
    eax = ebx;
    sub_1a73f7();
    ebx = 0x001d1f78;
    goto loc_1a7535;
}
void sub_1a761d() // 0160:1a761d +long
{
    esp -= 4;
    goto loc_1a761d;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3998 bytes
loc_1a5d64: // 0160:1a5d64
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 6290 bytes
loc_1a761d: // 0160:1a761d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000016;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a75c5();
    goto loc_1a5d64;
}
void sub_1a7657() // 0160:1a7657 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a768b;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a768b;
    ebx = 0;
    ecx = 0x00000017;
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, ecx);
loc_1a768b: // 0160:1a768b
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a76bf() // 0160:1a76bf +long
{
    esp -= 4;
    goto loc_1a76bf;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10489 bytes
loc_1a76bf: // 0160:1a76bf
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000084;
    edi = 0x7fffffff;
    esi = 0x001a40bb;
    edx = 0;
    ebx = 0;
    ebp = 0;
    memoryASet32(ds, esp + 116, edx);
    memoryASet32(ds, esp + 112, edx);
    memoryASet32(ds, esp + 104, edx);
    memoryASet32(ds, esp + 108, edi);
    memoryASet32(ds, esp + 84, edx);
    edi = esp + 20;
    memoryASet32(ds, esp + 72, edx);
    memoryASet32(ds, esp + 80, edx);
    movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    memoryASet32(ds, esp + 76, edx);
    eax = memoryAGet32(ds, 0x1dc034);
    esi = 0;
    eax <<= 2;
    edi = 0;
    memoryASet32(ds, esp + 44, eax);
    goto loc_1a7857;
loc_1a7718: // 0160:1a7718
    if (memoryAGet32(ds, ebx + 3832128) == 0x00000000)
        goto loc_1a784d;
    if (memoryAGet32(ds, ebx + 3832148) == 0x00000000)
        goto loc_1a784d;
    eax = memoryAGet32(ds, ebx + 3832140);
    eax -= memoryAGet32(ds, ebx + 3832136);
    eax <<= 16;
    eax += memoryAGet32(ds, ebx + 3832140);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 116))
        goto loc_1a7755;
    memoryASet32(ds, esp + 84, esi);
    memoryASet32(ds, esp + 116, eax);
loc_1a7755: // 0160:1a7755
    eax = 0x00000001;
    edx = memoryAGet32(ds, edi + 3792126);
    eax -= edx;
    memoryASet32(ds, esp + 32, eax);
    eax = memoryAGet32(ds, ebx + 3832140);
    edx = memoryAGet32(ds, esp + 32);
    eax <<= 8;
    eax |= edx;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, esp + 108))
        goto loc_1a7783;
    memoryASet32(ds, esp + 76, esi);
    memoryASet32(ds, esp + 108, eax);
loc_1a7783: // 0160:1a7783
    eax = memoryAGet32(ds, ebx + 3832132);
    edx = memoryAGet32(ds, ebx + 3832140);
    eax <<= 16;
    eax += edx;
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 112))
        goto loc_1a77a2;
    memoryASet32(ds, esp + 72, esi);
    memoryASet32(ds, esp + 112, eax);
loc_1a77a2: // 0160:1a77a2
    eax = memoryAGet32(ds, ebx + 3832108);
    edx = memoryAGet32(ds, ebx + 3832140);
    eax <<= 16;
    eax += edx;
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 104))
        goto loc_1a77c1;
    memoryASet32(ds, esp + 80, esi);
    memoryASet32(ds, esp + 104, eax);
loc_1a77c1: // 0160:1a77c1
    eax = memoryAGet32(ds, ebx + 3832112);
    edx = 0x0000ffff;
    eax <<= 16;
    edx -= memoryAGet32(ds, ebx + 3832140);
    eax += edx;
    if ((int32_t)eax < (int32_t)ebp)
        goto loc_1a77dd;
    ebp = eax;
loc_1a77dd: // 0160:1a77dd
    if (memoryAGet32(ds, 0x1df594) != 0x00000000)
        goto loc_1a784d;
    if (memoryAGet32(ds, 0x1dfc80) != 0x00000000)
        goto loc_1a784d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax = memoryAGet32(ds, stop("GetOpAddress")) * 0x000000aa;
    memoryASet32(ds, esp + 128, 0x00000004);
    memoryASet32(ds, esp + 32, eax);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 128));
    eax = memoryAGet32(ds, esp + 32);
    edx <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, ebx + 3832144);
    memoryASet32(ds, eax + 1959486, memoryAGet32(ds, eax + 1959486) + edx);
    edx = memoryAGet32(ds, ebx + 3832108);
    memoryASet32(ds, eax + 1959466, memoryAGet32(ds, eax + 1959466) + edx);
    memoryASet32(ds, eax + 1959526, memoryAGet32(ds, eax + 1959526) + 1);
loc_1a784d: // 0160:1a784d
    edi += 0x000000ac;
    ebx += 0x00000030;
    esi++;
loc_1a7857: // 0160:1a7857
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, esp + 44))
        goto loc_1a7718;
    edx = 0;
    memoryASet32(ds, esp + 120, edx);
    edx = memoryAGet32(ds, esp + 84);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 52, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 80);
    memoryASet32(ds, esp + 64, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 76);
    memoryASet32(ds, esp + 36, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    memoryASet32(ds, esp + 68, eax);
    eax = memoryAGet32(ds, esp + 84);
    eax <<= 4;
    ebx = 0x00000018;
    memoryASet32(ds, esp + 60, eax);
    eax = memoryAGet32(ds, esp + 72);
    edi = 0x00000024;
    eax <<= 4;
    esi = 0;
    memoryASet32(ds, esp + 48, eax);
    eax = memoryAGet32(ds, esp + 80);
    memoryASet32(ds, esp + 92, ebx);
    eax <<= 4;
    memoryASet32(ds, esp + 96, esi);
    memoryASet32(ds, esp + 40, eax);
    eax = edx;
    memoryASet32(ds, esp + 88, edi);
    eax <<= 4;
    memoryASet32(ds, esp + 100, esi);
    memoryASet32(ds, esp + 56, eax);
loc_1a78f5: // 0160:1a78f5
    edx = memoryAGet32(ds, esp + 96);
    edi = memoryAGet32(ds, esp + 56);
    ebx = memoryAGet32(ds, esp + 40);
    esi = memoryAGet32(ds, esp + 48);
    ebp = 0;
    eax = 0;
    memoryASet32(ds, esp + 124, ebp);
    memoryASet32(ds, esp + 28, edx);
    edx = memoryAGet32(ds, esp + 60);
loc_1a7915: // 0160:1a7915
    if (memoryAGet32(ds, esp + 120) > 0x00000003)
        goto loc_1a796e;
    ebp = memoryAGet32(ds, esp + 28);
    indirectJump(cs, memoryAGet32(cs, ebp + 1734287)); return; // 0160:1a7920;
    // gap 71 bytes
loc_1a796e: // 0160:1a796e
    if (ecx == 0x00000020)
        goto loc_1a7977;
    memoryASet32(ds, esp + 124, eax);
loc_1a7977: // 0160:1a7977
    edi++;
    ebx++;
    eax++;
    esi++;
    edx++;
    memoryASet(ds, esp + eax + -1, cl);
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_1a7915;
    eax = memoryAGet32(ds, esp + 124);
    dl = 0;
    memoryASet(ds, esp + eax + 1, dl);
    eax = 0;
    edx = memoryAGet32(ds, esp + 120);
    memoryASet32(ds, esp + 124, eax);
    if (edx > 0x00000003)
        goto loc_1a7a40;
    eax = memoryAGet32(ds, esp + 28);
    indirectJump(cs, memoryAGet32(cs, eax + 1734303)); return; // 0160:1a79a6;
    // gap 147 bytes
loc_1a7a40: // 0160:1a7a40
    if (memoryAGet32(ds, esp + 124) == 0x00000000)
        goto loc_1a7acd;
    if (memoryAGet32(ds, esp + 120) > 0x00000003)
        goto loc_1a7a84;
    eax = memoryAGet32(ds, esp + 92);
    eax += memoryAGet32(ds, esp + 100);
    edx = memoryAGet32(ds, esp + 96);
    indirectJump(cs, memoryAGet32(cs, edx + 1734319)); return; // 0160:1a7a5e;
    // gap 31 bytes
loc_1a7a84: // 0160:1a7a84
    esi = memoryAGet32(ds, esp + 88);
    ebx = memoryAGet32(ds, esp + 100);
    eax = 0x0000005a;
    edi = memoryAGet32(ds, esp + 88);
    ebp = memoryAGet32(ds, esp + 100);
    edi += 0x00000018;
    esi += ebx;
    ebx = esp;
    edx = esi;
    ebp += 0x00000006;
    sub_1a45e9();
    memoryASet32(ds, esp + 88, edi);
    memoryASet32(ds, esp + 100, ebp);
    ebx = esp + 20;
    edx = esi;
    esi = memoryAGet32(ds, esp + 92);
    eax = 0x00000104;
    esi += 0x00000018;
    sub_1a45e9();
    memoryASet32(ds, esp + 92, esi);
loc_1a7acd: // 0160:1a7acd
    ebx = memoryAGet32(ds, esp + 96);
    esi = memoryAGet32(ds, esp + 120);
    ebx += 0x00000004;
    esi++;
    memoryASet32(ds, esp + 96, ebx);
    memoryASet32(ds, esp + 120, esi);
    if ((int32_t)esi < (int32_t)0x00000004)
        goto loc_1a78f5;
    esp += 0x00000084;
    goto loc_1a4dbf;
}
void sub_1a7af5() // 0160:1a7af5 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_1a9969();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x3bc04c, edx);
    edx = 0x001d1f78;
    sub_1a45ae();
    sub_1a76bf();
    if (memoryAGet32(ds, 0x1df952) != 0x00000000)
        goto loc_1a7b4f;
    if (memoryAGet32(ds, 0x1df956) != 0x00000000)
        goto loc_1a7b4f;
    ebx = 0x001d1db3;
    edx = 0x00000090;
    eax = 0x0000010a;
    sub_1a4760();
    ebx = 0x001d1fc3;
    edx = 0x00000090;
    eax = 0x00000072;
    sub_1a4760();
loc_1a7b4f: // 0160:1a7b4f
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7bba() // 0160:1a7bba +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x1df956);
    if (!edx)
        goto loc_1a7c0d;
    edi = edx + -1;
    memoryASet32(ds, 0x1df956, edi);
    if (edi)
        goto loc_1a7beb;
    ebx = 0x00000001;
    memoryASet32(ds, 0x1df670, edi);
    memoryASet32(ds, 0x1df6c3, ebx);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a7beb: // 0160:1a7beb
    if ((int32_t)edi <= (int32_t)0x00000047)
        goto loc_1a7c9c;
    sub_1a7af5();
    edx = 0x001d1fcf;
loc_1a7bfe: // 0160:1a7bfe
    eax = 0x00000090;
    sub_1a45ae();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a7c0d: // 0160:1a7c0d
    ebx = memoryAGet32(ds, 0x1df952);
    if (!ebx)
        goto loc_1a7c4b;
    edx = ebx + -1;
    memoryASet32(ds, 0x1df952, edx);
    if (edx)
        goto loc_1a7c3f;
    sub_1a41d7();
    esi = 0x00000001;
    memoryASet32(ds, 0x1df670, edx);
    memoryASet32(ds, 0x1df6c3, esi);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a7c3f: // 0160:1a7c3f
    sub_1a7af5();
    edx = 0x001d1fde;
    goto loc_1a7bfe;
loc_1a7c4b: // 0160:1a7c4b
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a7c9c;
    if (memoryAGet32(ds, 0x1df94e) != 0x00000000)
        goto loc_1a7c7d;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a7c7d;
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, eax);
loc_1a7c7d: // 0160:1a7c7d
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000002)
        goto loc_1a7c9c;
    memoryASet32(ds, 0x1df952, 0x00000004);
loc_1a7c9c: // 0160:1a7c9c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7ca1() // 0160:1a7ca1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    cl = al;
    ebx = eax;
    edx = 0;
    cl++;
    ebx <<= 2;
    goto loc_1a7cb6;
loc_1a7cb1: // 0160:1a7cb1
    ch += cl;
    edx++;
    memoryASet(ds, eax, ch);
loc_1a7cb6: // 0160:1a7cb6
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1a7cc9;
    eax = memoryAGet32(ds, ebx + 1964378);
    eax += edx;
    ch = memoryAGet(ds, eax);
    if (ch)
        goto loc_1a7cb1;
loc_1a7cc9: // 0160:1a7cc9
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7d1f() // 0160:1a7d1f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    cl = al;
    ebx = eax;
    edx = 0;
    cl++;
    ebx <<= 2;
    goto loc_1a7d34;
loc_1a7d2f: // 0160:1a7d2f
    ch -= cl;
    edx++;
    memoryASet(ds, eax, ch);
loc_1a7d34: // 0160:1a7d34
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1a7d47;
    eax = memoryAGet32(ds, ebx + 1964378);
    eax += edx;
    ch = memoryAGet(ds, eax);
    if (ch)
        goto loc_1a7d2f;
loc_1a7d47: // 0160:1a7d47
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7d4b() // 0160:1a7d4b +long
{
    esp -= 4;
    goto loc_1a7d4b;
loc_1a5b6b: // 0160:1a5b6b
    eax = 0x000000a0;
    sub_1a4760();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8657 bytes
loc_1a7d4b: // 0160:1a7d4b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1a9969();
    ebx = 0x001d1ff0;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000012;
    sub_1a45e9();
    ecx = 0;
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x3bc04c, edx);
loc_1a7d76: // 0160:1a7d76
    eax = ebx;
    sub_1a7d1f();
    eax = esi;
    edx = memoryAGet32(ds, ecx + 1964378);
    sub_1a45ae();
    eax = ebx;
    ecx += 0x00000004;
    sub_1a7ca1();
    ebx++;
    esi += 0x0000000c;
    if ((int32_t)ebx < (int32_t)0x0000000b)
        goto loc_1a7d76;
    ebx = 0x001d1db3;
    edx = 0x00000096;
    goto loc_1a5b6b;
}
void sub_1a7dac() // 0160:1a7dac +long
{
    esp -= 4;
    goto loc_1a7dac;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3998 bytes
loc_1a5d64: // 0160:1a5d64
    memoryASet32(ds, 0x1df6c3, ecx);
    memoryASet32(ds, 0x1df668, esi);
    memoryASet32(ds, 0x1df66c, edi);
    memoryASet32(ds, 0x1df670, ebp);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a4dbf;
    // gap 8225 bytes
loc_1a7dac: // 0160:1a7dac
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x0000009c;
    ecx = 0x0000000b;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    sub_1a7d4b();
    goto loc_1a5d64;
}
void sub_1a7de6() // 0160:1a7de6 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a7e13;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a7e13;
    ebx = 0;
    memoryASet32(ds, 0x1df6c3, eax);
    memoryASet32(ds, 0x1df670, ebx);
loc_1a7e13: // 0160:1a7e13
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7e16() // 0160:1a7e16 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    edx = 0x00000010;
    memoryASet32(ds, 0x1df6cb, eax);
    memoryASet32(ds, 0x3bc028, edx);
    if ((int32_t)eax < (int32_t)0x00000001)
        goto loc_1a7e5f;
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_1a7e5f;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    edx += 0x0000000d;
    memoryASet32(ds, 0x3bc034, edx);
    if (eax != 0x00000001)
        goto loc_1a7e53;
    memoryASet32(ds, 0x3bc028, 0x00000008);
loc_1a7e53: // 0160:1a7e53
    memoryASet32(ds, 0x1dc094, 0x00000001);
    goto loc_1a7e6d;
loc_1a7e5f: // 0160:1a7e5f
    ebx = 0;
    memoryASet32(ds, 0x1df6cb, ebx);
    memoryASet32(ds, 0x1dc094, ebx);
loc_1a7e6d: // 0160:1a7e6d
    ebp = memoryAGet32(ds, 0x1df6cb);
    if (!ebp)
        goto loc_1a7ef1;
    eax = memoryAGet32(ds, 0x3bc028);
    eax--;
    memoryASet32(ds, 0x1df6cf, eax);
loc_1a7e86: // 0160:1a7e86
    eax = memoryAGet32(ds, 0x3bc034);
    edx = memoryAGet32(ds, 0x1df6cf);
    eax += edx;
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
    if (eax != 0x00000020)
        goto loc_1a7eae;
    if (stop("postCondition"))
        goto loc_1a7eae;
    ebp = edx + -1;
    memoryASet32(ds, 0x1df6cf, ebp);
    goto loc_1a7e86;
loc_1a7eae: // 0160:1a7eae
    ecx = memoryAGet32(ds, 0x1df6cf);
    eax = memoryAGet32(ds, 0x3bc034);
    ecx++;
    eax += ecx;
    memoryASet32(ds, 0x1df6cf, ecx);
    memoryASet(ds, eax, 0x5f);
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x1df6cb);
    sub_1a4932();
    eax = memoryAGet32(ds, 0x1df6cb);
    sub_1a49c6();
    eax = memoryAGet32(ds, 0x3bc034);
    eax += memoryAGet32(ds, 0x1df6cf);
    memoryASet(ds, eax, 0x20);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a7ef1: // 0160:1a7ef1
    memoryASet32(ds, 0x1dc094, ebp);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7f44() // 0160:1a7f44 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x1df6cb) == 0x00000000)
        goto loc_1a7f72;
    sub_1a55b1();
    eax = memoryAGet32(ds, 0x1df6cb);
    edx = 0;
    sub_1a4932();
    eax = memoryAGet32(ds, 0x1df6cb);
    ebx = 0;
    sub_1a49c6();
    memoryASet32(ds, 0x1df6cb, ebx);
loc_1a7f72: // 0160:1a7f72
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7f75() // 0160:1a7f75 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1df6cb);
    if (!edx)
        goto loc_1a7fac;
    ebx = edx + -1;
    eax = memoryAGet32(ds, 0x3bc034);
    edx = memoryAGet32(ds, 0x3bc048);
    sub_1a5460();
    if (!eax)
        goto loc_1a7fa2;
    sub_1a56f7();
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a7fa2: // 0160:1a7fa2
    sub_1a5723();
    sub_1a7f44();
loc_1a7fac: // 0160:1a7fac
    eax = 0x00000001;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7fb4() // 0160:1a7fb4 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1df6cb);
    if (!edx)
        goto loc_1a800e;
    ebx = edx + -1;
    eax = memoryAGet32(ds, 0x3bc034);
    edx = memoryAGet32(ds, 0x3bc048);
    sub_1a5460();
    if (!eax)
        goto loc_1a7fdf;
    sub_1a56f7();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a7fdf: // 0160:1a7fdf
    sub_1a55b1();
    eax = memoryAGet32(ds, 0x1df6cb);
    edx = 0;
    sub_1a4932();
    eax = memoryAGet32(ds, 0x1df6cb);
    sub_1a49c6();
    ebx = memoryAGet32(ds, 0x1df6cb);
    ebx++;
    eax = ebx;
    memoryASet32(ds, 0x1df6cb, ebx);
    sub_1a7e16();
loc_1a800e: // 0160:1a800e
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a8011() // 0160:1a8011 +long
{
    esp -= 4;
    goto loc_1a8011;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 12875 bytes
loc_1a8011: // 0160:1a8011
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1df6cb) == 0x00000000)
        goto loc_1a4dbf;
    ebx = memoryAGet32(ds, 0x1df986);
    if (!ebx)
        goto loc_1a803c;
    ecx = ebx + -1;
    memoryASet32(ds, 0x1df986, ecx);
    goto loc_1a4dbf;
loc_1a803c: // 0160:1a803c
    sub_19b200();
    bl = al;
    if (!al)
        goto loc_1a8116;
    edx = 0;
    dl = al;
    if ((int32_t)edx < (int32_t)0x00000020)
        goto loc_1a8091;
    if ((int32_t)edx > (int32_t)0x0000005a)
        goto loc_1a8091;
    edx = memoryAGet32(ds, 0x1df6cf);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, 0x3bc028))
        goto loc_1a8091;
    edx = memoryAGet32(ds, 0x3bc034);
    edx += memoryAGet32(ds, 0x1df6cf);
    memoryASet(ds, edx, al);
    ebp = 0x00000001;
    eax = memoryAGet32(ds, 0x1df6cf);
    eax += ebp;
    memoryASet32(ds, 0x1df98a, ebp);
    memoryASet32(ds, 0x1df6cf, eax);
    sub_1a5723();
loc_1a8091: // 0160:1a8091
    eax = 0;
    al = bl;
    if (eax != 0x00000008)
        goto loc_1a80f7;
    edx = memoryAGet32(ds, 0x1df6cf);
    if (!edx)
        goto loc_1a80f7;
    eax = memoryAGet32(ds, 0x3bc034);
    ecx = edx + -1;
    eax += ecx;
    memoryASet32(ds, 0x1df6cf, ecx);
    memoryASet(ds, eax, 0x20);
    if (memoryAGet(ds, 0x3a7396) != 0x00)
        goto loc_1a80c9;
    if (memoryAGet(ds, 0x3a73a2) == 0x00)
        goto loc_1a80e8;
loc_1a80c9: // 0160:1a80c9
    edi = memoryAGet32(ds, 0x1df6cf);
    if (!edi)
        goto loc_1a80e8;
    eax = memoryAGet32(ds, 0x3bc034);
    ebp = edi + -1;
    eax += ebp;
    memoryASet32(ds, 0x1df6cf, ebp);
    memoryASet(ds, eax, 0x20);
    goto loc_1a80c9;
loc_1a80e8: // 0160:1a80e8
    memoryASet32(ds, 0x1df98a, 0x00000001);
    sub_1a5723();
loc_1a80f7: // 0160:1a80f7
    eax = 0;
    al = bl;
    if (eax != 0x0000000a)
        goto loc_1a8116;
    esi = 0x00000001;
    memoryASet32(ds, 0x1dc094, esi);
    sub_1a7fb4();
    memoryASet32(ds, 0x1df98a, esi);
loc_1a8116: // 0160:1a8116
    if (memoryAGet32(ds, 0x1df6cb) == 0x00000000)
        goto loc_1a4dbf;
    if (memoryAGet32(ds, 0x1df98a) == 0x00000000)
        goto loc_1a4dbf;
    edx = memoryAGet32(ds, 0x1df6cf);
    eax = memoryAGet32(ds, 0x3bc034);
    memoryASet(ds, edx + eax, 0x5f);
    eax = memoryAGet32(ds, 0x1df6cb);
    sub_1a49c6();
    eax = memoryAGet32(ds, 0x3bc034);
    memoryASet(ds, edx + eax, 0x20);
    goto loc_1a4dbf;
}
void sub_1a8178() // 0160:1a8178 +long
{
    esp -= 4;
    goto loc_1a8178;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13234 bytes
loc_1a8178: // 0160:1a8178
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x3a7470);
    edx = memoryAGet32(ds, 0x1df6c7);
    eax -= edx;
    edx = eax;
    sub_1a8011();
    ebx = memoryAGet32(ds, 0x39bde8);
    if (ebx)
        goto loc_1a81a8;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a83e6;
loc_1a81a8: // 0160:1a81a8
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a81b8;
    edi = 0x00000001;
    goto loc_1a81bd;
loc_1a81b8: // 0160:1a81b8
    edi = 0xffffffff;
loc_1a81bd: // 0160:1a81bd
    if ((int32_t)edx <= (int32_t)0x00000023)
        goto loc_1a83b8;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    edx = eax;
    esi = eax;
    if ((int32_t)eax >= (int32_t)0x00000006)
        goto loc_1a820f;
    if (eax == memoryAGet32(ds, 0x1df6cb))
        goto loc_1a820f;
    sub_1a7f75();
    if (!eax)
        goto loc_1a820f;
    sub_19b1f5();
    eax = edx;
    sub_1a7e16();
    if (memoryAGet32(ds, 0x1df6cb) == 0x00000000)
        goto loc_1a820f;
    memoryASet32(ds, 0x1dc094, 0x00000001);
loc_1a820f: // 0160:1a820f
    if (esi != 0x00000006)
        goto loc_1a82ac;
    eax = memoryAGet32(ds, 0x3bc048);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 1962772);
    ebx += edi;
    ecx = ebx;
    ecx &= 0x00000001;
    memoryASet32(ds, eax + 1962772, ecx);
    if (!ecx)
        goto loc_1a823f;
    memoryASet32(ds, eax + 1962772, 0x00000003);
loc_1a823f: // 0160:1a823f
    eax = memoryAGet32(ds, 0x3bc048);
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 1962772) <= (int32_t)0x00000003)
        goto loc_1a8258;
    ecx = 0;
    memoryASet32(ds, eax + 1962772, ecx);
loc_1a8258: // 0160:1a8258
    eax = memoryAGet32(ds, 0x3bc048);
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 1962772) >= (int32_t)0x00000000)
        goto loc_1a8273;
    memoryASet32(ds, eax + 1962772, 0x00000003);
loc_1a8273: // 0160:1a8273
    ecx = memoryAGet32(ds, 0x3bc048);
    ebx = 0xffffffff;
    ecx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = 0x00000006;
    edx = ebx;
    ecx = memoryAGet32(ds, stop("GetOpAddress"));
    sub_1a4626();
    eax = 0x00000006;
    sub_1a49c6();
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, eax);
loc_1a82ac: // 0160:1a82ac
    if (esi != 0x00000007)
        goto loc_1a82de;
    sub_1a7f75();
    if (!eax)
        goto loc_1a82de;
    eax = memoryAGet32(ds, 0x3bc048);
    eax--;
    eax &= 0x00000001;
    memoryASet32(ds, 0x3bc048, eax);
    sub_1a5767();
    eax = esi;
    sub_1a49c6();
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, eax);
loc_1a82de: // 0160:1a82de
    if (esi != 0x00000008)
        goto loc_1a8310;
    sub_1a7f75();
    if (!eax)
        goto loc_1a8310;
    eax = memoryAGet32(ds, 0x3bc048);
    eax++;
    eax &= 0x00000001;
    memoryASet32(ds, 0x3bc048, eax);
    sub_1a5767();
    eax = esi;
    sub_1a49c6();
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, eax);
loc_1a8310: // 0160:1a8310
    if (esi != 0x0000000a)
        goto loc_1a8398;
    eax = edi;
    eax <<= 2;
    edx = memoryAGet32(ds, 0x3bc048);
    eax -= edi;
    edx <<= 2;
    eax <<= 3;
    ebx = memoryAGet32(ds, edx + 1962852);
    eax += edi;
    ebx += eax;
    memoryASet32(ds, edx + 1962852, ebx);
    if ((int32_t)ebx <= (int32_t)0x000001f4)
        goto loc_1a834e;
    memoryASet32(ds, edx + 1962852, 0x0000004b);
loc_1a834e: // 0160:1a834e
    eax = memoryAGet32(ds, 0x3bc048);
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 1962852) >= (int32_t)0x0000004b)
        goto loc_1a8369;
    memoryASet32(ds, eax + 1962852, 0x000001f4);
loc_1a8369: // 0160:1a8369
    eax = memoryAGet32(ds, 0x3bc048);
    ebx = 0x00000003;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = 0x001df6da;
    sub_1a4c45();
    eax = 0x0000000a;
    sub_1a49c6();
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, eax);
loc_1a8398: // 0160:1a8398
    if (esi != 0x0000000b)
        goto loc_1a83b8;
    sub_1a5862();
    sub_1a5767();
    eax = esi;
    sub_1a49c6();
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df6c7, eax);
loc_1a83b8: // 0160:1a83b8
    if (esi != 0x00000009)
        goto loc_1a4dc0;
    sub_1a7f75();
    if (!eax)
        goto loc_1a4dc0;
    ebx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, ecx);
    goto loc_1a4dc0;
loc_1a83e6: // 0160:1a83e6
    memoryASet32(ds, 0x1df6c7, ebx);
    goto loc_1a4dc0;
}
void sub_1a83f1() // 0160:1a83f1 +long
{
    esp -= 4;
    goto loc_1a83f1;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7941 bytes
loc_1a6ccb: // 0160:1a6ccb
    memoryASet32(ds, 0x1df670, edi);
    memoryASet32(ds, 0x1df6c3, ebp);
    goto loc_1a4dbf;
    // gap 5909 bytes
loc_1a83f1: // 0160:1a83f1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a4dbf;
    sub_1a4a08();
    if (!eax)
        goto loc_1a8435;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a8435;
    ebx = 0;
    ecx = 0x0000000a;
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, ecx);
loc_1a8435: // 0160:1a8435
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000002)
        goto loc_1a845d;
    esi = 0;
    edi = 0x00000003;
    memoryASet32(ds, 0x1df670, esi);
    memoryASet32(ds, 0x1df6c3, edi);
loc_1a845d: // 0160:1a845d
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000003)
        goto loc_1a8484;
    ebp = 0;
    eax = 0x00000002;
    memoryASet32(ds, 0x1df670, ebp);
    memoryASet32(ds, 0x1df6c3, eax);
loc_1a8484: // 0160:1a8484
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000004)
        goto loc_1a84a6;
    edx = 0;
    memoryASet32(ds, 0x1df6c3, eax);
    memoryASet32(ds, 0x1df670, edx);
loc_1a84a6: // 0160:1a84a6
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000005)
        goto loc_1a84ce;
    ecx = 0;
    esi = 0x0000000b;
    memoryASet32(ds, 0x1df670, ecx);
    memoryASet32(ds, 0x1df6c3, esi);
loc_1a84ce: // 0160:1a84ce
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000006)
        goto loc_1a4dbf;
    edi = 0;
    ebp = 0x00000010;
    goto loc_1a6ccb;
}
void sub_1a84f3() // 0160:1a84f3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39bde8) == 0x00000000)
        goto loc_1a8541;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000001)
        goto loc_1a8519;
    sub_1a4210();
loc_1a8519: // 0160:1a8519
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    if (eax != 0x00000002)
        goto loc_1a8541;
    ebx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x1df670, ebx);
    memoryASet32(ds, 0x1df6c3, ecx);
loc_1a8541: // 0160:1a8541
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a8545() // 0160:1a8545 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x1df660) != 0x00000000)
        goto loc_1a86f0;
    edx = memoryAGet32(ds, 0x1df644);
    eax = memoryAGet32(ds, 0x1df640);
    sub_1a47d9();
    ebx = memoryAGet32(ds, 0x1df6c3);
    edx = eax;
    if (ebx != 0x0000000a)
        goto loc_1a857b;
    if ((int32_t)eax > (int32_t)0x00000008)
        goto loc_1a857b;
    if (eax)
        goto loc_1a85aa;
loc_1a857b: // 0160:1a857b
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000003)
        goto loc_1a858d;
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_1a858d;
    if (eax)
        goto loc_1a85aa;
loc_1a858d: // 0160:1a858d
    esi = memoryAGet32(ds, 0x1df6c3);
    if (esi != 0x0000000a)
        goto loc_1a85a5;
    if (eax != esi)
        goto loc_1a85a5;
    if ((int32_t)memoryAGet32(ds, 0x3bc03c) <= (int32_t)0x00000001)
        goto loc_1a85aa;
loc_1a85a5: // 0160:1a85a5
    sub_1a499a();
loc_1a85aa: // 0160:1a85aa
    eax = memoryAGet32(ds, 0x1df6c3);
    if (eax < 0x0000000a)
        goto loc_1a861d;
    if (eax <= 0x0000000a)
        goto loc_1a869a;
    if (eax < 0x00000010)
        goto loc_1a85fa;
    if (eax <= 0x00000010)
        goto loc_1a86be;
    if (eax < 0x00000016)
        goto loc_1a85e6;
    if (eax <= 0x00000016)
        goto loc_1a86d9;
    if (eax <= 0x00000017)
        goto loc_1a86e2;
    if (eax == 0x0000001e)
        goto loc_1a86eb;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a85e6: // 0160:1a85e6
    if (eax < 0x00000014)
        goto loc_1a86f0;
    if (eax <= 0x00000014)
        goto loc_1a86c7;
    goto loc_1a86d0;
loc_1a85fa: // 0160:1a85fa
    if (eax < 0x0000000c)
        goto loc_1a86a3;
    if (eax <= 0x0000000c)
        goto loc_1a86ac;
    if (eax < 0x0000000e)
        goto loc_1a86f0;
    if (eax <= 0x0000000e)
        goto loc_1a86f0;
    goto loc_1a86b5;
loc_1a861d: // 0160:1a861d
    if (eax < 0x00000005)
        goto loc_1a8632;
    if (eax <= 0x00000005)
        goto loc_1a866d;
    if (eax < 0x00000007)
        goto loc_1a8676;
    if (eax <= 0x00000007)
        goto loc_1a867f;
    if (eax <= 0x00000008)
        goto loc_1a8688;
    goto loc_1a8691;
loc_1a8632: // 0160:1a8632
    if (eax < 0x00000002)
        goto loc_1a8640;
    if (eax <= 0x00000002)
        goto loc_1a8652;
    if (eax <= 0x00000003)
        goto loc_1a865b;
    goto loc_1a8664;
loc_1a8640: // 0160:1a8640
    if (eax != 0x00000001)
        goto loc_1a86f0;
    sub_1a83f1();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a8652: // 0160:1a8652
    sub_1a84f3();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a865b: // 0160:1a865b
    sub_1a8178();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a8664: // 0160:1a8664
    sub_1a6bd1();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a866d: // 0160:1a866d
    sub_1a6ae3();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a8676: // 0160:1a8676
    sub_1a5d8b();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a867f: // 0160:1a867f
    sub_1a5f9f();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a8688: // 0160:1a8688
    sub_1a6813();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a8691: // 0160:1a8691
    sub_1a619d();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a869a: // 0160:1a869a
    sub_1a501b();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86a3: // 0160:1a86a3
    sub_1a7de6();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86ac: // 0160:1a86ac
    sub_1a63ad();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86b5: // 0160:1a86b5
    sub_1a5a09();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86be: // 0160:1a86be
    sub_1a675c();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86c7: // 0160:1a86c7
    sub_1a705e();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86d0: // 0160:1a86d0
    sub_1a7582();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86d9: // 0160:1a86d9
    sub_1a7657();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86e2: // 0160:1a86e2
    sub_1a7bba();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a86eb: // 0160:1a86eb
    sub_1a725c();
loc_1a86f0: // 0160:1a86f0
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a86f4() // 0160:1a86f4 +long
{
    esp -= 4;
    goto loc_1a86f4;
loc_1a60a2: // 0160:1a60a2
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6826 bytes
loc_1a7b52: // 0160:1a7b52
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = 0x00000078;
    ebx = 0x00000096;
    edi = 0x00000017;
    ebp = 0x000000a8;
    ecx = 0;
    memoryASet32(ds, 0x1df640, edx);
    memoryASet32(ds, 0x1df644, ebx);
    memoryASet32(ds, 0x1df956, ecx);
    memoryASet32(ds, 0x1df952, ecx);
    sub_1a7af5();
    eax = 0xffffff58;
    edx = 0x00000001;
    memoryASet32(ds, 0x1df6c3, edi);
    memoryASet32(ds, 0x1df668, ebp);
    memoryASet32(ds, 0x1df66c, eax);
    memoryASet32(ds, 0x1df670, edx);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, eax);
    goto loc_1a60a2;
    // gap 2874 bytes
loc_1a86f4: // 0160:1a86f4
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000001)
        goto loc_1a8702;
    sub_1a4a30();
loc_1a8702: // 0160:1a8702
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000002)
        goto loc_1a8710;
    sub_1a4b85();
loc_1a8710: // 0160:1a8710
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000003)
        goto loc_1a871e;
    sub_1a591a();
loc_1a871e: // 0160:1a871e
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000004)
        goto loc_1a872c;
    sub_1a6b97();
loc_1a872c: // 0160:1a872c
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000005)
        goto loc_1a873a;
    sub_1a6aa9();
loc_1a873a: // 0160:1a873a
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000006)
        goto loc_1a8748;
    sub_1a5d2f();
loc_1a8748: // 0160:1a8748
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000007)
        goto loc_1a8756;
    sub_1a5f40();
loc_1a8756: // 0160:1a8756
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000008)
        goto loc_1a8764;
    sub_1a679f();
loc_1a8764: // 0160:1a8764
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000009)
        goto loc_1a8772;
    sub_1a6163();
loc_1a8772: // 0160:1a8772
    if (memoryAGet32(ds, 0x1df6c3) != 0x0000000a)
        goto loc_1a8780;
    sub_1a4f9d();
loc_1a8780: // 0160:1a8780
    if (memoryAGet32(ds, 0x1df6c3) != 0x0000000b)
        goto loc_1a878e;
    sub_1a7dac();
loc_1a878e: // 0160:1a878e
    if (memoryAGet32(ds, 0x1df6c3) != 0x0000000c)
        goto loc_1a879c;
    sub_1a62b7();
loc_1a879c: // 0160:1a879c
    if (memoryAGet32(ds, 0x1df6c3) != 0x0000000e)
        goto loc_1a87aa;
    sub_1a645e();
loc_1a87aa: // 0160:1a87aa
    if (memoryAGet32(ds, 0x1df6c3) != 0x0000000f)
        goto loc_1a87b8;
    sub_1a5973();
loc_1a87b8: // 0160:1a87b8
    if (memoryAGet32(ds, 0x1df6c3) != 0x00000010)
        goto loc_1a87c6;
    sub_1a671d();
loc_1a87c6: // 0160:1a87c6
    if (memoryAGet32(ds, 0x1df6c3) == 0x00000017)
        goto loc_1a7b52;
    esp += 4;
}
void sub_1a87d4() // 0160:1a87d4 +long
{
    esp -= 4;
    goto loc_1a87d4;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14862 bytes
loc_1a87d4: // 0160:1a87d4
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = 0;
    ebp = 0;
loc_1a87de: // 0160:1a87de
    esi = edi;
    esi <<= 2;
    ebx = ebp;
    ecx = memoryAGet32(ds, esi + 1963774);
    edx = 0;
    memoryASet32(ds, esi + 1949764, ecx);
loc_1a87f3: // 0160:1a87f3
    eax = esi + edx;
    memoryASet32(ds, ebx + 3792102, ecx);
    sub_196d9a();
    edx++;
    ebx += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_1a87f3;
    edi++;
    ebp += 0x000002b0;
    if ((int32_t)edi < (int32_t)0x00000004)
        goto loc_1a87de;
    goto loc_1a4dbf;
}
void sub_1a881e() // 0160:1a881e +long
{
    esp -= 4;
    goto loc_1a881e;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14936 bytes
loc_1a881e: // 0160:1a881e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a5b7a();
    sub_1a87d4();
    ebp = 0;
    edi = 0;
loc_1a8832: // 0160:1a8832
    edx = edi * 0x000000ac;
    ebx = edi * 0x00000030;
    ecx = memoryAGet32(ds, 0x1dc034);
    eax = edx;
    if ((int32_t)ebp < (int32_t)ecx)
        goto loc_1a8869;
    ecx = edx + 688;
loc_1a884d: // 0160:1a884d
    eax += 0x000000ac;
    esi = 0;
    ebx += 0x00000030;
    memoryASet32(ds, eax + 3791854, esi);
    memoryASet32(ds, ebx + 3832080, esi);
    if (eax == ecx)
        goto loc_1a88c3;
    goto loc_1a884d;
loc_1a8869: // 0160:1a8869
    esi = memoryAGet32(ds, edi + 1963742) * 0x000000aa;
    edx = ebx;
    ebx = esi;
    esi += 0x00000010;
loc_1a887a: // 0160:1a887a
    ecx = memoryAGet32(ds, ebx + 1959506);
    if (!ecx)
        goto loc_1a889c;
    memoryASet32(ds, edx + 3832128, 0x00000001);
    ecx = memoryAGet32(ds, eax + 3792102);
    memoryASet32(ds, edx + 3832104, ecx);
    goto loc_1a88b4;
loc_1a889c: // 0160:1a889c
    memoryASet32(ds, eax + 3792026, ecx);
    memoryASet32(ds, eax + 3792018, ecx);
    memoryASet32(ds, eax + 3792022, ecx);
    memoryASet32(ds, edx + 3832128, ecx);
loc_1a88b4: // 0160:1a88b4
    edx += 0x00000030;
    ebx += 0x00000004;
    eax += 0x000000ac;
    if (ebx != esi)
        goto loc_1a887a;
loc_1a88c3: // 0160:1a88c3
    ebp++;
    edi += 0x00000004;
    if ((int32_t)ebp < (int32_t)0x00000004)
        goto loc_1a8832;
    goto loc_1a4dbf;
}
void sub_1a88d5() // 0160:1a88d5 +long
{
    esp -= 4;
    goto loc_1a88d5;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 15119 bytes
loc_1a88d5: // 0160:1a88d5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x1df5ac);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    edx = 0;
    eax <<= 3;
    memoryASet32(ds, 0x1df99e, edx);
    eax += ebx;
    memoryASet32(ds, 0x1df75e, edx);
    eax += eax;
    ebx = 0;
    memoryASet32(ds, 0x39eff8, eax);
    goto loc_1a8921;
loc_1a8906: // 0160:1a8906
    edx = 0x00007fff;
    eax = 0;
    sub_1b3e6c();
    ecx = memoryAGet32(ds, 0x1dc084);
    ecx += eax;
    ebx++;
    memoryASet32(ds, 0x1dc084, ecx);
loc_1a8921: // 0160:1a8921
    edx = 0x0000000a;
    eax = 0x00000005;
    sub_1b3e6c();
    if ((int32_t)ebx < (int32_t)eax)
        goto loc_1a8906;
    esi = 0x00000001;
    edi = 0xffffffff;
    edx = 0;
    memoryASet32(ds, 0x39effc, esi);
    memoryASet32(ds, 0x1dfbc4, edi);
    ebp = esi;
    memoryASet32(ds, 0x1dc020, esi);
    memoryASet32(ds, 0x1df996, edi);
    memoryASet32(ds, 0x1df99a, edx);
    memoryASet32(ds, 0x1df9a2, edx);
    sub_1a6d43();
    esi = memoryAGet32(ds, 0x1df912);
    esi += ebp;
    memoryASet32(ds, 0x1df8d8, edx);
    memoryASet32(ds, 0x1df912, esi);
    goto loc_1a4dbf;
}
void sub_1a8984() // 0160:1a8984 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = 0;
    ebx = 0x00000001;
    edx = 0;
loc_1a898f: // 0160:1a898f
    eax += 0x00000030;
    memoryASet32(ds, eax + 3832080, ebx);
    memoryASet32(ds, eax + 3832060, edx);
    memoryASet32(ds, eax + 3832084, edx);
    memoryASet32(ds, eax + 3832092, edx);
    memoryASet32(ds, eax + 3832088, edx);
    memoryASet32(ds, eax + 3832064, edx);
    memoryASet32(ds, eax + 3832068, edx);
    memoryASet32(ds, eax + 3832072, edx);
    memoryASet32(ds, eax + 3832076, edx);
    memoryASet32(ds, eax + 3832096, edx);
    memoryASet32(ds, eax + 3832100, edx);
    if (eax != 0x00000300)
        goto loc_1a898f;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a89de() // 0160:1a89de +long
{
    esp -= 4;
    goto loc_1a89de;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 15384 bytes
loc_1a89de: // 0160:1a89de
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    push32(eax);
    edi = eax;
    edi <<= 2;
    edi -= eax;
    edi <<= 4;
    ebx = eax;
    eax = memoryAGet32(ds, edi + 3832108);
    memoryASet32(ds, esp + 4, eax);
    eax = ebx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = 0;
    ecx = 0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, 0x1dc034);
    ebp = edi;
    eax <<= 2;
    ebx = 0;
    memoryASet32(ds, esp + 8, eax);
    goto loc_1a8af1;
loc_1a8a2a: // 0160:1a8a2a
    if (memoryAGet32(ds, ebx + 3832128) != 0x00000001)
        goto loc_1a8ae7;
    eax = memoryAGet32(ds, ebx + 3832104);
    if (eax == memoryAGet32(ds, ecx + 3792102))
        goto loc_1a8ae7;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax == memoryAGet32(ds, esp + 12))
        goto loc_1a8a78;
    memoryASet32(ds, edi + 3832116, memoryAGet32(ds, edi + 3832116) + 1);
    edx = memoryAGet32(ds, ecx + 3792102);
    eax = memoryAGet32(ds, ebx + 3832104);
    eax -= edx;
    memoryASet32(ds, edi + 3832140, memoryAGet32(ds, edi + 3832140) + eax);
loc_1a8a78: // 0160:1a8a78
    eax = memoryAGet32(ds, ebx + 3832104);
    eax -= memoryAGet32(ds, ecx + 3792102);
    edx = memoryAGet32(ds, ebx + 3832136);
    edx += eax;
    eax = memoryAGet32(ds, ebx + 3832112);
    memoryASet32(ds, ebx + 3832136, edx);
    eax++;
    edx = memoryAGet32(ds, ecx + 3792102);
    memoryASet32(ds, ebx + 3832112, eax);
    if (edx)
        goto loc_1a8adb;
    edx = esi;
    eax = 0x00000002;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 3832128, eax);
    eax = esi;
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, ebx + 3832144, memoryAGet32(ds, ebx + 3832144) + 1);
    if (eax == memoryAGet32(ds, esp + 12))
        goto loc_1a8ad5;
    memoryASet32(ss, ebp + 3832108, memoryAGet32(ss, ebp + 3832108) + 1);
loc_1a8ad5: // 0160:1a8ad5
    memoryASet32(ds, ebx + 3832120, memoryAGet32(ds, ebx + 3832120) + 1);
loc_1a8adb: // 0160:1a8adb
    eax = memoryAGet32(ds, ecx + 3792102);
    memoryASet32(ds, ebx + 3832104, eax);
loc_1a8ae7: // 0160:1a8ae7
    ebx += 0x00000030;
    ecx += 0x000000ac;
    esi++;
loc_1a8af1: // 0160:1a8af1
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1a8a2a;
    ebx = memoryAGet32(ds, esp + 4);
    eax = memoryAGet32(ds, edi + 3832108);
    eax -= ebx;
    ecx = memoryAGet32(ds, edi + 3832132);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1a8b1b;
    memoryASet32(ds, edi + 3832132, eax);
loc_1a8b1b: // 0160:1a8b1b
    ebx = memoryAGet32(ds, esp);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 4;
    ebx = memoryAGet32(ds, 0x1df9a2);
    ecx = memoryAGet32(ds, eax + 3832124);
    esi = memoryAGet32(ds, eax + 3832148);
    ecx += ebx;
    esi++;
    memoryASet32(ds, eax + 3832124, ecx);
    memoryASet32(ds, eax + 3832148, esi);
    esp += 0x00000010;
    goto loc_1a4dbf;
}
void sub_1a8b51() // 0160:1a8b51 +long
{
    esp -= 4;
    goto loc_1a8b51;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 15755 bytes
loc_1a8b51: // 0160:1a8b51
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    ebx = memoryAGet32(ds, 0x1dfc80);
    memoryASet32(ds, 0x1df912, edx);
    if (!ebx)
        goto loc_1a8b7d;
    edx = 0x00000004;
    eax = 0x00000002;
    sub_1a9cc8();
    memoryASet32(ds, 0x3bc03c, eax);
loc_1a8b7d: // 0160:1a8b7d
    esi = 0xffffffff;
    eax = memoryAGet32(ds, 0x3bc03c);
    ecx = 0;
    memoryASet32(ds, 0x1dc034, eax);
    memoryASet32(ds, 0x1dc080, ecx);
    memoryASet32(ds, 0x1dc074, ecx);
    memoryASet32(ds, 0x1dc068, ecx);
    memoryASet32(ds, 0x1dc05c, ecx);
    sub_1a8984();
    eax = 0;
loc_1a8bad: // 0160:1a8bad
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 1963738, esi);
    memoryASet32(ds, eax + 3832052, edx);
    memoryASet32(ds, eax + 3832068, edx);
    memoryASet32(ds, eax + 3832036, edx);
    if (eax != 0x00000010)
        goto loc_1a8bad;
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_1a8c09;
    edx = 0x00000003;
    eax = 0;
    sub_1a9cc8();
    ebx = memoryAGet32(ds, 0x1dc034);
    edx = eax;
    ebx <<= 2;
    eax = 0;
    goto loc_1a8c03;
loc_1a8bf3: // 0160:1a8bf3
    esi = edx + 16;
    eax += 0x00000004;
    edx++;
    memoryASet32(ds, eax + 1963738, esi);
    edx &= 0x00000003;
loc_1a8c03: // 0160:1a8c03
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_1a8c43;
    goto loc_1a8bf3;
loc_1a8c09: // 0160:1a8c09
    ebp = 0x00000001;
    edi = memoryAGet32(ds, 0x1dc034);
    eax = 0;
    esi = 0;
    edi <<= 2;
    goto loc_1a8c3f;
loc_1a8c1d: // 0160:1a8c1d
    cl = al;
    ebx = ebp;
    ebx <<= cl;
    ecx = memoryAGet32(ds, 0x3bc040);
    edx = eax + 1;
    if (ebx & ecx)
        goto loc_1a8c34;
    eax = edx;
    goto loc_1a8c1d;
loc_1a8c34: // 0160:1a8c34
    memoryASet32(ds, esi + 1963742, eax);
    esi += 0x00000004;
    eax = edx;
loc_1a8c3f: // 0160:1a8c3f
    if ((int32_t)esi < (int32_t)edi)
        goto loc_1a8c1d;
loc_1a8c43: // 0160:1a8c43
    sub_1a5262();
    sub_1a6dd0();
    sub_1a88d5();
    goto loc_1a4dbf;
}
void sub_1a8d71() // 0160:1a8d71 +long
{
    esp -= 4;
    goto loc_1a8d71;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16299 bytes
loc_1a8d71: // 0160:1a8d71
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1df6c3) != 0xfffffff5)
        goto loc_1a8de5;
    eax = memoryAGet32(ds, 0x1df650);
    if (eax != memoryAGet32(ds, 0x1df654))
        goto loc_1a8de5;
    ecx = 0x00000001;
    esi = 0;
    memoryASet32(ds, 0x1dc028, ecx);
    memoryASet32(ds, 0x1dd550, esi);
    sub_1a9b45();
    eax = memoryAGet32(ds, 0x39f234);
    memoryASet32(ds, 0x1dfc80, esi);
    memoryASet32(ds, 0x39effc, esi);
    memoryASet32(ds, 0x1df9a6, eax);
    eax = memoryAGet32(ds, 0x39f1ac);
    memoryASet32(ds, 0x39f234, ecx);
    memoryASet32(ds, 0x1df9aa, eax);
    memoryASet32(ds, 0x39f1ac, esi);
    sub_1a4a30();
    sub_1a41ee();
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df9ae, eax);
loc_1a8de5: // 0160:1a8de5
    if (memoryAGet32(ds, 0x1df6c3) != 0xfffffff6)
        goto loc_1a8f0e;
    if ((int32_t)memoryAGet32(ds, 0x1df66c) < (int32_t)0x000000a8)
        goto loc_1a8f0e;
    eax = memoryAGet32(ds, 0x1df650);
    if (eax != memoryAGet32(ds, 0x1df654))
        goto loc_1a8f0e;
    ebx = 0;
    esi = 0x00000400;
    ecx = 0;
loc_1a8e1c: // 0160:1a8e1c
    if ((int32_t)ebx >= (int32_t)0x0000000c)
        goto loc_1a8ee8;
    if ((int32_t)ebx >= (int32_t)0x0000000a)
        goto loc_1a8e30;
    al = bl;
    al += 0x30;
    goto loc_1a8e34;
loc_1a8e30: // 0160:1a8e30
    al = bl;
    al += 0x37;
loc_1a8e34: // 0160:1a8e34
    edx = 0x002c69a8;
    memoryASet(ds, 0x1df9be, al);
    memoryASet(ds, 0x1df9d0, al);
    eax = 0x001df9b2;
    sub_19b431();
    edx = 0x0039b9a8;
    eax = 0x001df9c4;
    sub_19b431();
    eax = 0x000002c0;
loc_1a8e61: // 0160:1a8e61
    eax++;
    dl = memoryAGet(ds, eax + 3831015);
    memoryASet(ds, eax + 3783079, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1a8e61;
    sub_196b5f();
    if (ecx == memoryAGet32(ds, 0x39bde0))
        goto loc_1a8e9f;
    edx = memoryAGet32(ds, 0x39bdf8);
    eax = 0x002c69a8;
    edx += 0x000a0000;
    sub_1c4a7b();
    sub_19b766();
    goto loc_1a8eae;
loc_1a8e9f: // 0160:1a8e9f
    edx = 0x000a0000;
    eax = 0x002c69a8;
    sub_1c4758();
loc_1a8eae: // 0160:1a8eae
    eax = 0x000000ff;
    sub_1a4408();
    eax = memoryAGet32(ds, 0x3a7470);
    eax += 0x000000c8;
loc_1a8ec2: // 0160:1a8ec2
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x3a7470))
        goto loc_1a8edb;
    if (cl == memoryAGet(ds, 0x3a736d))
        goto loc_1a8ec2;
    ebx = esi;
    eax = memoryAGet32(ds, 0x3a7470);
    goto loc_1a8ec2;
loc_1a8edb: // 0160:1a8edb
    eax = ecx;
    sub_1a4408();
    ebx++;
    goto loc_1a8e1c;
loc_1a8ee8: // 0160:1a8ee8
    eax = 0;
loc_1a8eea: // 0160:1a8eea
    eax++;
    dl = memoryAGet(ds, eax + 3831015);
    memoryASet(ds, eax + 3783079, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1a8eea;
    edi = 0xfffffff5;
    sub_1a4261();
    memoryASet32(ds, 0x1df6c3, edi);
loc_1a8f0e: // 0160:1a8f0e
    ebx = memoryAGet32(ds, 0x1df6c3);
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1a4dbf;
    ecx = memoryAGet32(ds, 0x1dd550);
    if (ecx == 0x00000002)
        goto loc_1a4dbf;
    if (ecx == 0x00000003)
        goto loc_1a4dbf;
    edi = memoryAGet32(ds, 0x39effc);
    edx = 0x0000003f;
    if (edi)
        goto loc_1a8f48;
    if ((int32_t)ebx < (int32_t)0x00000014)
        goto loc_1a8f52;
loc_1a8f48: // 0160:1a8f48
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df9ae, eax);
loc_1a8f52: // 0160:1a8f52
    if (memoryAGet32(ds, 0x1dc028) == 0x00000000)
        goto loc_1a8f6d;
    if (memoryAGet32(ds, 0x1df648) != 0x00000000)
        goto loc_1a8f6d;
    if (memoryAGet32(ds, 0x1df98a) == 0x00000000)
        goto loc_1a8f77;
loc_1a8f6d: // 0160:1a8f6d
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df9ae, eax);
loc_1a8f77: // 0160:1a8f77
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    esi = memoryAGet32(ds, 0x1df9ae);
    eax += eax;
    eax += esi;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3a7470))
        goto loc_1a4dbf;
    eax = 0;
loc_1a8f9b: // 0160:1a8f9b
    eax++;
    dl = memoryAGet(ds, eax + 3783079);
    memoryASet(ds, eax + 3831015, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1a8f9b;
    eax = 0;
    sub_1a4408();
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x39f238, eax);
    ebp = 0;
    eax = 0xfffffff6;
    memoryASet32(ds, 0x1df670, ebp);
    memoryASet32(ds, 0x1df6c3, eax);
    goto loc_1a4dbf;
}
void sub_1a8fd7() // 0160:1a8fd7 +long
{
    esp -= 4;
    goto loc_1a8fd7;
loc_1a4dc0: // 0160:1a4dc0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16913 bytes
loc_1a8fd7: // 0160:1a8fd7
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000010;
    edi = esp;
    esi = 0x001a40c2;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edx = memoryAGet32(ds, 0x1df996);
    if (edx != 0xfffffffe)
        goto loc_1a8ffc;
    eax = edx;
    goto loc_1a911a;
loc_1a8ffc: // 0160:1a8ffc
    if (memoryAGet32(ds, 0x1cf1c8) == 0x00000000)
        goto loc_1a900f;
    memoryASet32(ds, 0x1df9a2, 0x00000001);
loc_1a900f: // 0160:1a900f
    eax = memoryAGet32(ds, 0x39ef98);
    if (eax == memoryAGet32(ds, 0x1df996))
        goto loc_1a9029;
    eax = memoryAGet32(ds, 0x3a7470);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x1df99a))
        goto loc_1a9036;
loc_1a9029: // 0160:1a9029
    if (memoryAGet32(ds, 0x39effc) != 0x00000000)
        goto loc_1a90fa;
loc_1a9036: // 0160:1a9036
    if (memoryAGet32(ds, 0x1df996) != 0xffffffff)
        goto loc_1a9059;
    edx = 0x00000004;
    eax = 0;
loc_1a9046: // 0160:1a9046
    memoryASet32(ds, eax + 3832088, edx);
    eax += edx;
    if (eax == 0x00000010)
        goto loc_1a90de;
    goto loc_1a9046;
loc_1a9059: // 0160:1a9059
    ebx = 0;
    ecx = 0;
loc_1a905d: // 0160:1a905d
    if (memoryAGet32(ds, ecx + 3792026) == 0x00000000)
        goto loc_1a9078;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, esp + eax*4, memoryAGet32(ds, esp + eax*4) + 1);
loc_1a9078: // 0160:1a9078
    ebx++;
    ecx += 0x000000ac;
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_1a905d;
    eax = memoryAGet32(ds, 0x1df996);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    ebx = 0;
    edx = esi;
    eax = 0;
    edx <<= 2;
    goto loc_1a90cc;
loc_1a90a3: // 0160:1a90a3
    ecx = memoryAGet32(ds, eax + 3832088);
    ecx -= memoryAGet32(ds, esp + eax);
    if (!ecx)
        goto loc_1a90be;
    memoryASet32(ds, eax + 3832040, memoryAGet32(ds, eax + 3832040) + ecx);
    if (ebx == esi)
        goto loc_1a90be;
    memoryASet32(ds, edx + 3832072, memoryAGet32(ds, edx + 3832072) + ecx);
loc_1a90be: // 0160:1a90be
    eax += 0x00000004;
    ecx = memoryAGet32(ds, esp + eax + -4);
    ebx++;
    memoryASet32(ds, eax + 3832084, ecx);
loc_1a90cc: // 0160:1a90cc
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x1dc034))
        goto loc_1a90a3;
    eax = memoryAGet32(ds, 0x1df996);
    sub_1a89de();
loc_1a90de: // 0160:1a90de
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0;
    memoryASet32(ds, 0x1df996, eax);
    memoryASet32(ds, 0x1df9a2, ebx);
    eax = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df99a, eax);
loc_1a90fa: // 0160:1a90fa
    ecx = memoryAGet32(ds, 0x39effc);
    if (ecx)
        goto loc_1a9115;
    esi = 0xfffffffe;
    memoryASet32(ds, 0x1df9a2, ecx);
    memoryASet32(ds, 0x1df996, esi);
loc_1a9115: // 0160:1a9115
    eax = memoryAGet32(ds, 0x1df996);
loc_1a911a: // 0160:1a911a
    esp += 0x00000010;
    goto loc_1a4dc0;
}
void sub_1a9122() // 0160:1a9122 +long
{
    esp -= 4;
    goto loc_1a9122;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 15747 bytes
loc_1a8b49: // 0160:1a8b49
    esp += 0x00000010;
    goto loc_1a4dbf;
    // gap 1489 bytes
loc_1a9122: // 0160:1a9122
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ecx = 0xffffffff;
    esi = memoryAGet32(ds, 0x1df5b4);
    ebx = 0;
    eax = 0;
loc_1a913a: // 0160:1a913a
    if ((int32_t)memoryAGet32(ds, eax + 1963742) < (int32_t)0x00000000)
        goto loc_1a9162;
    if (!esi)
        goto loc_1a914c;
    memoryASet32(ds, esp + eax, ebx);
    goto loc_1a9165;
loc_1a914c: // 0160:1a914c
    edx = memoryAGet32(ds, eax + 3832072);
    edx <<= 4;
    edx |= ebx;
    edx &= 0x000000ff;
    memoryASet32(ds, esp + eax, edx);
    goto loc_1a9165;
loc_1a9162: // 0160:1a9162
    memoryASet32(ds, esp + eax, ecx);
loc_1a9165: // 0160:1a9165
    ebx++;
    eax += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_1a913a;
    esi = memoryAGet32(ds, 0x1df5b4);
    ebx = 0;
    ecx = 0;
loc_1a9178: // 0160:1a9178
    if (memoryAGet32(ds, ecx + 3792026) == 0x00000000)
        goto loc_1a91c4;
    if (memoryAGet32(ds, ecx + 3792126) != 0x00000000)
        goto loc_1a91c4;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    if (!esi)
        goto loc_1a91ad;
    edx += 0x00010000;
    memoryASet32(ds, esp + eax, edx);
    goto loc_1a91c4;
loc_1a91ad: // 0160:1a91ad
    edx = memoryAGet32(ds, ecx + 3792102);
    edx += 0x000007d0;
    edi = memoryAGet32(ds, esp + eax);
    edx <<= 8;
    edi += edx;
    memoryASet32(ds, esp + eax, edi);
loc_1a91c4: // 0160:1a91c4
    ebx++;
    ecx += 0x000000ac;
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_1a9178;
    edx = 0x00000001;
    esi = edx;
    ebx = esi;
loc_1a91d9: // 0160:1a91d9
    if (!edx)
        goto loc_1a91ff;
    edx = 0;
    ecx = 0;
loc_1a91e1: // 0160:1a91e1
    eax = memoryAGet32(ds, esp + ecx);
    edi = memoryAGet32(ds, esp + ecx + 4);
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_1a91f5;
    memoryASet32(ds, esp + ecx, edi);
    edx = ebx;
    memoryASet32(ds, esp + ecx + 4, eax);
loc_1a91f5: // 0160:1a91f5
    ecx += 0x00000004;
    if ((int32_t)ecx >= (int32_t)0x0000000c)
        goto loc_1a91d9;
    goto loc_1a91e1;
loc_1a91ff: // 0160:1a91ff
    esi = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x1df946, edx);
    si &= 0xfff0;
    eax = 0;
    if (!esi)
        goto loc_1a9239;
loc_1a9212: // 0160:1a9212
    ebx = memoryAGet32(ds, esp + edx);
    bl &= 0xf0;
    if (ebx != esi)
        goto loc_1a9231;
    ecx = memoryAGet32(ds, esp + edx);
    ebx = 0x00000001;
    ecx &= 0x0000000f;
    ebx <<= cl;
    eax |= ebx;
    memoryASet32(ds, 0x1df946, memoryAGet32(ds, 0x1df946) + 1);
loc_1a9231: // 0160:1a9231
    edx += 0x00000004;
    if (edx != 0x00000010)
        goto loc_1a9212;
loc_1a9239: // 0160:1a9239
    edx = memoryAGet32(ds, 0x1dc034);
    ecx = memoryAGet32(ds, 0x1df946);
    edx -= ecx;
    esi = memoryAGet32(ds, 0x1df5b4);
    memoryASet32(ds, 0x1df94a, edx);
    if (!esi)
        goto loc_1a9264;
    if ((int32_t)ecx <= (int32_t)0x00000001)
        goto loc_1a9264;
    ebp = 0;
    memoryASet32(ds, 0x1df94a, ebp);
loc_1a9264: // 0160:1a9264
    if ((int32_t)memoryAGet32(ds, 0x1df94a) > (int32_t)0x00000000)
        goto loc_1a8b49;
    ebx = 0;
    eax = 0;
    memoryASet32(ds, 0x1df94a, ebx);
    goto loc_1a8b49;
}
void sub_1a92b5() // 0160:1a92b5 +long
{
    esp -= 4;
    goto loc_1a92b5;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17647 bytes
loc_1a92b5: // 0160:1a92b5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    edx = memoryAGet32(ds, 0x1df594);
    if (edx)
        goto loc_1a4dbf;
    ebx = memoryAGet32(ds, 0x1dfc80);
    if (ebx)
        goto loc_1a4dbf;
loc_1a92d9: // 0160:1a92d9
    esi = memoryAGet32(ds, edx + 1963742);
    if (stop("postCondition"))
        goto loc_1a936a;
    eax = 0x00000001;
    cl = bl;
    eax <<= cl;
    ecx = eax;
    eax = esi * 0x00000018;
    if (!(edi & ecx))
        goto loc_1a9301;
    memoryASet32(ds, eax + 1962936, memoryAGet32(ds, eax + 1962936) + 1);
    goto loc_1a9307;
loc_1a9301: // 0160:1a9301
    memoryASet32(ds, eax + 1962940, memoryAGet32(ds, eax + 1962940) + 1);
loc_1a9307: // 0160:1a9307
    eax = esi * 0x00000018;
    ecx = memoryAGet32(ds, eax + 1962932);
    ecx++;
    esi = memoryAGet32(ds, eax + 1962944);
    memoryASet32(ds, eax + 1962932, ecx);
    ecx = memoryAGet32(ds, edx + 3832072);
    ebp = memoryAGet32(ds, eax + 1962948);
    esi += ecx;
    ecx = memoryAGet32(ds, edx + 3832040);
    memoryASet32(ds, eax + 1962944, esi);
    ebp += ecx;
    ecx = memoryAGet32(ds, eax + 1962936);
    memoryASet32(ds, eax + 1962948, ebp);
    ecx <<= 16;
    memoryASet32(ds, eax + 1962952, ecx);
    esi = memoryAGet32(ds, eax + 1962948);
    ecx = memoryAGet32(ds, eax + 1962944);
    ebp = memoryAGet32(ds, eax + 1962952);
    ecx -= esi;
    ebp += ecx;
    memoryASet32(ds, eax + 1962952, ebp);
loc_1a936a: // 0160:1a936a
    ebx++;
    edx += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_1a92d9;
    goto loc_1a4dbf;
}
void sub_1a937c() // 0160:1a937c +long
{
    esp -= 4;
    goto loc_1a937c;
loc_1a4dbc: // 0160:1a4dbc
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17846 bytes
loc_1a937c: // 0160:1a937c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    edi = esp;
    esi = 0x001a40d2;
    movsw<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    sub_1a6de0();
    edx = memoryAGet32(ds, 0x1df5a0);
    ecx = 0;
    if (!edx)
        goto loc_1a93f4;
    if (memoryAGet32(ds, 0x1df5a8) == 0x00000023)
        goto loc_1a93f4;
    edx = eax;
    if (stop("postCondition"))
        goto loc_1a93b3;
    edx ^= eax;
loc_1a93b3: // 0160:1a93b3
    if ((int32_t)edx <= (int32_t)0x00001734)
        goto loc_1a93c0;
    edx = 0x00001734;
loc_1a93c0: // 0160:1a93c0
    if ((int32_t)edx <= (int32_t)0x0000003b)
        goto loc_1a93d5;
    ebx = 0x0000003c;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    goto loc_1a93da;
loc_1a93d5: // 0160:1a93d5
    ecx = 0x00000001;
loc_1a93da: // 0160:1a93da
    ebx = 0x00000002;
    eax = esp;
    sub_1a4c45();
    eax = 0;
    al = memoryAGet(ds, esp);
    if (eax != 0x00000020)
        goto loc_1a93f4;
    memoryASet(ds, esp, 0x30);
loc_1a93f4: // 0160:1a93f4
    if ((int32_t)ebp <= (int32_t)0xfffffff6)
        goto loc_1a4dbc;
    if (!ecx)
        goto loc_1a941b;
    eax = memoryAGet32(ds, 0x1df8d0);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)edx >= (int32_t)0x00000019)
        goto loc_1a4dbc;
loc_1a941b: // 0160:1a941b
    eax = 0;
    al = memoryAGet(ds, esp);
    sub_1a44d2();
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_1a94a9;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000) & stop("xxx");
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 3;
    edx += eax;
    ecx = 0x003a85e8;
    edx <<= 7;
    esi = 0x00000020;
    ecx += edx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    eax = edx;
    edx <<= 2;
    edx += eax;
    edx += edx;
    eax = ecx + edx;
    if (stop("postCondition"))
        goto loc_1a948d;
    ebx = ebp;
    ebx = -ebx;
    edx = ebx;
    edx <<= 2;
    edx += ebx;
    ecx = 0;
    edx <<= 6;
    ebx = ebp + 10;
    eax += edx;
    edx = 0x002c6a3e;
    goto loc_1a94a4;
loc_1a948d: // 0160:1a948d
    edx = ebp;
    edx <<= 2;
    edx += ebp;
    ebx = 0x0000000a;
    edx <<= 6;
    ecx = 0;
    edx += 0x002c6a3e;
loc_1a94a4: // 0160:1a94a4
    sub_1c7aaf();
loc_1a94a9: // 0160:1a94a9
    eax = 0;
    al = memoryAGet(ds, esp + 1);
    sub_1a44d2();
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_1a4dbc;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000) & stop("xxx");
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 3;
    edx += eax;
    esi = 0x003a85e8;
    edx <<= 7;
    ecx = 0x00000020;
    esi += edx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = edx;
    edx <<= 2;
    edx += eax;
    edx += edx;
    eax = esi + edx;
    if (stop("postCondition"))
        goto loc_1a951c;
    ebx = ebp;
    ebx = -ebx;
    edx = ebx;
    edx <<= 2;
    edx += ebx;
    ecx = 0;
    edx <<= 6;
    ebx = ebp + 10;
    eax += edx;
    edx = 0x002c6a48;
    goto loc_1a9533;
loc_1a951c: // 0160:1a951c
    edx = ebp;
    edx <<= 2;
    edx += ebp;
    ebx = 0x0000000a;
    edx <<= 6;
    ecx = 0;
    edx += 0x002c6a48;
loc_1a9533: // 0160:1a9533
    sub_1c7aaf();
    goto loc_1a4dbc;
}
void sub_1a953d() // 0160:1a953d +long
{
    esp -= 4;
    goto loc_1a953d;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18295 bytes
loc_1a953d: // 0160:1a953d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1df8d0) != 0xffffffff)
        goto loc_1a955f;
    ebx = 0;
    sub_1a5262();
    memoryASet32(ds, 0x39effc, ebx);
    memoryASet32(ds, 0x39f230, ebx);
loc_1a955f: // 0160:1a955f
    sub_1a6de0();
    if (eax)
        goto loc_1a957b;
    if (memoryAGet32(ds, 0x39f18c) == 0x00000000)
        goto loc_1a957b;
    memoryASet32(ds, 0x39effc, eax);
    memoryASet32(ds, 0x39f230, eax);
loc_1a957b: // 0160:1a957b
    eax = 0;
    edx = memoryAGet32(ds, 0x39f230);
    memoryASet32(ds, 0x39f18c, eax);
    if (edx)
        goto loc_1a96fb;
    ebx = memoryAGet32(ds, 0x1dd550);
    if (ebx == 0x00000002)
        goto loc_1a96fb;
    if (ebx == 0x00000003)
        goto loc_1a96fb;
    if (memoryAGet32(ds, 0x39effc) != 0x00000000)
        goto loc_1a4dbf;
    edi = 0x00000001;
    memoryASet32(ds, 0x1df99e, edi);
    sub_1a9122();
    ebp = memoryAGet32(ds, 0x1df946);
    ebx = eax;
    if (ebp)
        goto loc_1a95d7;
    memoryASet32(ds, 0x1df75e, edi);
loc_1a95d7: // 0160:1a95d7
    if (!ebx)
        goto loc_1a966c;
    edx = 0x00000002;
    ebp = 0x00000003;
    edi = memoryAGet32(ds, 0x1dfc80);
    eax = 0;
    memoryASet32(ds, 0x1df99e, edx);
    edx = 0;
loc_1a95f9: // 0160:1a95f9
    esi = 0x00000001;
    cl = dl;
    esi <<= cl;
    if (!(ebx & esi))
        goto loc_1a9627;
    ecx = memoryAGet32(ds, eax + 3832056);
    ecx++;
    esi = memoryAGet32(ds, 0x1df5a4);
    memoryASet32(ds, eax + 3832056, ecx);
    if ((int32_t)ecx >= (int32_t)esi)
        goto loc_1a9621;
    if (!edi)
        goto loc_1a9627;
loc_1a9621: // 0160:1a9621
    memoryASet32(ds, 0x1df99e, ebp);
loc_1a9627: // 0160:1a9627
    edx++;
    eax += 0x00000004;
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_1a95f9;
    if (memoryAGet32(ds, 0x1df99e) != 0x00000003)
        goto loc_1a9640;
    eax = ebx;
    sub_1a92b5();
loc_1a9640: // 0160:1a9640
    if (!(bl & 0x01))
        goto loc_1a964b;
    memoryASet32(ds, 0x1dc05c, memoryAGet32(ds, 0x1dc05c) + 1);
loc_1a964b: // 0160:1a964b
    if (!(bl & 0x02))
        goto loc_1a9656;
    memoryASet32(ds, 0x1dc068, memoryAGet32(ds, 0x1dc068) + 1);
loc_1a9656: // 0160:1a9656
    if (!(bl & 0x04))
        goto loc_1a9661;
    memoryASet32(ds, 0x1dc074, memoryAGet32(ds, 0x1dc074) + 1);
loc_1a9661: // 0160:1a9661
    if (!(bl & 0x08))
        goto loc_1a966c;
    memoryASet32(ds, 0x1dc080, memoryAGet32(ds, 0x1dc080) + 1);
loc_1a966c: // 0160:1a966c
    eax = 0x00000001;
    edx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x1dc028, eax);
    sub_1a9b45();
    eax = memoryAGet32(ds, 0x39f234);
    esi = memoryAGet32(ds, 0x1df8d0);
    memoryASet32(ds, 0x39f1ac, ecx);
    memoryASet32(ds, 0x1df9a6, eax);
    memoryASet32(ds, 0x39f234, edx);
    if (esi == 0xffffffff)
        goto loc_1a96ac;
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_1a96c6;
loc_1a96ac: // 0160:1a96ac
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_1a96bf;
    memoryASet32(ds, 0x1df638, 0x00000005);
loc_1a96bf: // 0160:1a96bf
    sub_1a4a30();
    goto loc_1a96f6;
loc_1a96c6: // 0160:1a96c6
    eax = memoryAGet32(ds, 0x1df99e);
    if (eax < 0x00000002)
        goto loc_1a96d9;
    if (eax <= 0x00000002)
        goto loc_1a96e6;
    if (eax == 0x00000003)
        goto loc_1a96ef;
    goto loc_1a96f6;
loc_1a96d9: // 0160:1a96d9
    if (eax != edx)
        goto loc_1a96f6;
    eax = ebx;
    sub_1a6fee();
    goto loc_1a96f6;
loc_1a96e6: // 0160:1a96e6
    eax = ebx;
    sub_1a7548();
    goto loc_1a96f6;
loc_1a96ef: // 0160:1a96ef
    eax = ebx;
    sub_1a761d();
loc_1a96f6: // 0160:1a96f6
    sub_1a41ee();
loc_1a96fb: // 0160:1a96fb
    eax = 0;
    goto loc_1a4dbf;
}
void sub_1a9702() // 0160:1a9702 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    edx = 0;
    edi = 0xfffffff0;
    memoryASet32(ds, 0x1dd550, edx);
    memoryASet32(ds, 0x1dfa14, edx);
    memoryASet32(ds, 0x1dfa0c, edx);
    memoryASet32(ds, 0x1dfa18, edx);
    memoryASet32(ds, 0x1dd544, edi);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a972c() // 0160:1a972c +long
{
    esp -= 4;
    goto loc_1a972c;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18790 bytes
loc_1a972c: // 0160:1a972c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    memoryASet32(ds, 0x1df98a, edx);
    sub_1a8fd7();
    stop("setne");
    eax &= 0x000000ff;
    ecx = memoryAGet32(ds, 0x1dfc80);
    memoryASet32(ds, 0x1df598, eax);
    if (!ecx)
        goto loc_1a9798;
    if (memoryAGet(ds, 0x3a73a5) != 0x00)
        goto loc_1a9778;
    if (memoryAGet(ds, 0x3a7388) != 0x00)
        goto loc_1a9778;
    if (memoryAGet(ds, 0x3a726d) == 0x00)
        goto loc_1a977f;
loc_1a9778: // 0160:1a9778
    eax = 0x00000001;
    goto loc_1a9781;
loc_1a977f: // 0160:1a977f
    eax = 0;
loc_1a9781: // 0160:1a9781
    if (!eax)
        goto loc_1a9798;
    esi = 0x0000001e;
    bl = 0x01;
    memoryASet32(ds, 0x1df638, esi);
    memoryASet(ds, 0x3a726d, bl);
loc_1a9798: // 0160:1a9798
    edi = memoryAGet32(ds, 0x1df6c3);
    if (edi)
        goto loc_1a987c;
    if ((int32_t)memoryAGet32(ds, 0x1df66c) < (int32_t)0x000000a8)
        goto loc_1a987c;
    if (memoryAGet32(ds, 0x1df650) != 0x000000ff)
        goto loc_1a987c;
    if (memoryAGet32(ds, 0x1dc028) == 0x00000000)
        goto loc_1a97e9;
    eax = memoryAGet32(ds, 0x1df9a6);
    memoryASet32(ds, 0x39f234, eax);
    eax = memoryAGet32(ds, 0x1df9aa);
    memoryASet32(ds, 0x1dc028, edi);
    memoryASet32(ds, 0x39f1ac, eax);
loc_1a97e9: // 0160:1a97e9
    if (memoryAGet(ds, 0x3a726d) == 0x00)
        goto loc_1a9877;
    ecx = memoryAGet32(ds, 0x1dc030);
    if (ecx)
        goto loc_1a9877;
    if (memoryAGet32(ds, 0x1dd540) != 0x00000000)
        goto loc_1a9877;
    if (memoryAGet32(ds, 0x1dd550) == 0x00000003)
        goto loc_1a9877;
    memoryASet32(ds, 0x1dc028, 0x00000001);
    eax = memoryAGet32(ds, 0x39f004);
    memoryASet32(ds, 0x39efc4, ecx);
    memoryASet32(ds, 0x1df942, eax);
    sub_1a9b45();
    eax = memoryAGet32(ds, 0x39f234);
    edx = 0x00000001;
    memoryASet32(ds, 0x1df9a6, eax);
    memoryASet32(ds, 0x39f234, edx);
    eax = memoryAGet32(ds, 0x39f1ac);
    memoryASet32(ds, 0x39f1ac, ecx);
    ecx = memoryAGet32(ds, 0x1dfc80);
    memoryASet32(ds, 0x1df9aa, eax);
    if (!ecx)
        goto loc_1a986b;
    sub_1a4a30();
    goto loc_1a9870;
loc_1a986b: // 0160:1a986b
    sub_1a7205();
loc_1a9870: // 0160:1a9870
    sub_1a41ee();
    goto loc_1a987c;
loc_1a9877: // 0160:1a9877
    sub_1a953d();
loc_1a987c: // 0160:1a987c
    if (memoryAGet32(ds, 0x1df6c3) != 0xffffffff)
        goto loc_1a98b8;
    if ((int32_t)memoryAGet32(ds, 0x1df66c) < (int32_t)0x000000a8)
        goto loc_1a98b8;
    ebp = memoryAGet32(ds, 0x1df650);
    if (ebp)
        goto loc_1a98b8;
    sub_1a8b51();
    memoryASet32(ds, 0x1dc028, ebp);
    memoryASet32(ds, 0x39f234, ebp);
    memoryASet32(ds, 0x39f1ac, ebp);
    memoryASet32(ds, 0x1df6c3, ebp);
loc_1a98b8: // 0160:1a98b8
    if (memoryAGet32(ds, 0x1df6c3) != 0xfffffffe)
        goto loc_1a98f4;
    if ((int32_t)memoryAGet32(ds, 0x1df66c) < (int32_t)0x000000a8)
        goto loc_1a98f4;
    ebp = memoryAGet32(ds, 0x1df650);
    if (ebp)
        goto loc_1a98f4;
    sub_1a88d5();
    memoryASet32(ds, 0x1dc028, ebp);
    memoryASet32(ds, 0x39f234, ebp);
    memoryASet32(ds, 0x39f1ac, ebp);
    memoryASet32(ds, 0x1df6c3, ebp);
loc_1a98f4: // 0160:1a98f4
    if (memoryAGet32(ds, 0x1df6c3) != 0xfffffffd)
        goto loc_1a9933;
    if ((int32_t)memoryAGet32(ds, 0x1df66c) < (int32_t)0x000000a8)
        goto loc_1a9933;
    eax = memoryAGet32(ds, 0x1df650);
    ebp = memoryAGet32(ds, 0x1df654);
    if (eax != ebp)
        goto loc_1a9933;
    eax ^= ebp;
    edx = 0;
    memoryASet32(ds, 0x1dc028, eax);
    memoryASet32(ds, 0x39f234, edx);
    memoryASet32(ds, 0x39f1ac, edx);
    memoryASet32(ds, 0x1df6c3, edx);
loc_1a9933: // 0160:1a9933
    if (memoryAGet32(ds, 0x1dc028) == 0x00000000)
        goto loc_1a9946;
    sub_1a9b6a();
    sub_1a5262();
loc_1a9946: // 0160:1a9946
    sub_1a5c69();
    stop("setne");
    eax &= 0x000000ff;
    memoryASet32(ds, 0x1dc02c, eax);
    sub_1a8d71();
    goto loc_1a4dbf;
}
void sub_1a9969() // 0160:1a9969 +long
{
    esp -= 4;
    push32(edx);
    sub_1a4983();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x1df6bb, edx);
    memoryASet32(ds, 0x1df6bf, edx);
    memoryASet32(ds, 0x1df6cb, edx);
loc_1a9985: // 0160:1a9985
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 2201540);
    memoryASet32(ds, eax + 3860004, edx);
    if ((int32_t)eax < (int32_t)0x0000d200)
        goto loc_1a9985;
    edx = pop32();
    esp += 4;
}
void sub_1a999d() // 0160:1a999d +long
{
    esp -= 4;
    goto loc_1a999d;
loc_1a4489: // 0160:1a4489
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 21774 bytes
loc_1a999d: // 0160:1a999d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1dc094);
    if (edx)
        goto loc_1a4489;
    eax = memoryAGet32(ds, 0x39bdf4);
    eax -= memoryAGet32(ds, 0x39be00);
    ecx = memoryAGet32(ds, 0x39be04);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39bdf0);
    eax -= ecx;
    if (ebx)
        goto loc_1a99e4;
    if (eax)
        goto loc_1a99e4;
    if (memoryAGet32(ds, 0x39bde8) != 0x00000000)
        goto loc_1a99e4;
    if (memoryAGet32(ds, 0x39bde4) == 0x00000000)
        goto loc_1a99f0;
loc_1a99e4: // 0160:1a99e4
    memoryASet32(ds, 0x1df648, 0x00000001);
    goto loc_1a99f6;
loc_1a99f0: // 0160:1a99f0
    memoryASet32(ds, 0x1df648, edx);
loc_1a99f6: // 0160:1a99f6
    ecx = memoryAGet32(ds, 0x1df640);
    esi = memoryAGet32(ds, 0x1df644);
    ecx += ebx;
    esi += eax;
    memoryASet32(ds, 0x1df640, ecx);
    memoryASet32(ds, 0x1df644, esi);
    if (stop("postCondition"))
        goto loc_1a9a1e;
    ebp = 0;
    memoryASet32(ds, 0x1df640, ebp);
loc_1a9a1e: // 0160:1a9a1e
    if ((int32_t)memoryAGet32(ds, 0x1df644) >= (int32_t)0x00000000)
        goto loc_1a9a2f;
    edx = 0;
    memoryASet32(ds, 0x1df644, edx);
loc_1a9a2f: // 0160:1a9a2f
    if ((int32_t)memoryAGet32(ds, 0x1df644) <= (int32_t)0x000000a7)
        goto loc_1a9a45;
    memoryASet32(ds, 0x1df644, 0x000000a7);
loc_1a9a45: // 0160:1a9a45
    if ((int32_t)memoryAGet32(ds, 0x1df640) <= (int32_t)0x0000013d)
        goto loc_1a9a5b;
    memoryASet32(ds, 0x1df640, 0x0000013d);
loc_1a9a5b: // 0160:1a9a5b
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000e);
    edx = 0x002c69a8;
    eax = 0x002992b8;
    push32(0x00000010);
    ecx = memoryAGet32(ds, 0x1df644);
    ebx = memoryAGet32(ds, 0x1df640);
    sub_19cc15();
    goto loc_1a4489;
}
void sub_1a9b45() // 0160:1a9b45 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x000000a0;
    edx = 0;
    ecx = 0x00000064;
    memoryASet32(ds, 0x39f004, edx);
    memoryASet32(ds, 0x1df640, ebx);
    memoryASet32(ds, 0x1df644, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9b6a() // 0160:1a9b6a +long
{
    esp -= 4;
    goto loc_1a9b6a;
loc_1a4dbf: // 0160:1a4dbf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19876 bytes
loc_1a9b6a: // 0160:1a9b6a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a9702();
    eax = memoryAGet32(ds, 0x3a7470);
    eax -= memoryAGet32(ds, 0x1df674);
    if ((int32_t)eax <= (int32_t)0x00000019)
        goto loc_1a9b87;
    eax = 0;
loc_1a9b87: // 0160:1a9b87
    edx = memoryAGet32(ds, 0x3a7470);
    memoryASet32(ds, 0x1df674, edx);
    edx = eax;
    eax <<= 3;
    edx += eax;
    edx <<= 5;
    ebx = 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x1df670);
    edx = eax;
    if (!ebx)
        goto loc_1a9c2f;
    ebx = memoryAGet32(ds, 0x1df66c);
    if (stop("postCondition"))
        goto loc_1a9bd8;
    ecx = ebx + eax;
    memoryASet32(ds, 0x1df66c, ecx);
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1a9bd8;
    edi = 0;
    memoryASet32(ds, 0x1df66c, edi);
loc_1a9bd8: // 0160:1a9bd8
    ebp = memoryAGet32(ds, 0x1df66c);
    if (stop("postCondition"))
        goto loc_1a9bea;
    ebx = ebp + 168;
    goto loc_1a9bef;
loc_1a9bea: // 0160:1a9bea
    ebx = 0x000000a8;
loc_1a9bef: // 0160:1a9bef
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1a9c13;
    edx = 0x000000a8;
    edx -= ebx;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    edx = 0x002c69a8;
    eax += 0x003ae628;
    sub_1c6386();
loc_1a9c13: // 0160:1a9c13
    if (memoryAGet32(ds, 0x1df66c) != 0x00000000)
        goto loc_1a4dbf;
    sub_1a999d();
    sub_1a8545();
    goto loc_1a4dbf;
loc_1a9c2f: // 0160:1a9c2f
    if ((int32_t)memoryAGet32(ds, 0x1df66c) >= (int32_t)0x000000a8)
        goto loc_1a9ca0;
    eax = memoryAGet32(ds, 0x1df6bb);
    sub_1a484f();
    esi = memoryAGet32(ds, 0x1df66c);
    esi += edx;
    memoryASet32(ds, 0x1df66c, esi);
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_1a9c6b;
    eax = 0x000000a8;
    memoryASet32(ds, 0x39bdb8, ebx);
    memoryASet32(ds, 0x1df66c, eax);
loc_1a9c6b: // 0160:1a9c6b
    ebx = 0x000000a8;
    edx = memoryAGet32(ds, 0x1df66c);
    ebx -= edx;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1a4dbf;
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = 0x002c69a8;
    eax <<= 6;
    edx += eax;
    eax = 0x003ae628;
    sub_1c6386();
    goto loc_1a4dbf;
loc_1a9ca0: // 0160:1a9ca0
    sub_1a86f4();
    goto loc_1a4dbf;
}
void sub_1a9caa() // 0160:1a9caa +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax >>= 16;
    edx &= 0x0000ffff;
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x39ef88, edx);
    memoryASet32(ds, 0x39ef8c, eax);
    edx = pop32();
    esp += 4;
}
void sub_1a9cc8() // 0160:1a9cc8 +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    ebx = memoryAGet32(ds, 0x39ef88) * 0x00006255;
    esi = memoryAGet32(ds, 0x39ef8c);
    ebx += 0x00003619;
    edx -= eax;
    ebx += esi;
    edx++;
    ebx &= 0x0000ffff;
    edx = (int32_t)edx * (int32_t)ebx;
//    edx *= ebx;
//    stop("imul edx * ebx");
    edx >>= 16;
    memoryASet32(ds, 0x39ef88, ebx);
    eax += edx;
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9cfc() // 0160:1a9cfc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    ebx = esi;
    eax = 0;
    edx = 0;
loc_1a9d08: // 0160:1a9d08
    if (memoryAGet(ds, ebx) == 0x00)
        goto loc_1a9d2d;
    if (edx >= 0x00000010)
        goto loc_1a9d2d;
    ecx = eax;
    ecx <<= 3;
    eax >>= 29;
    eax |= ecx;
    ecx = edx;
    ebx++;
    edx++;
    cl = memoryAGet(ds, ecx + esi);
    ecx &= 0x000000ff;
    eax ^= ecx;
    goto loc_1a9d08;
loc_1a9d2d: // 0160:1a9d2d
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9d32() // 0160:1a9d32 +long +stackDrop32
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    push32(eax);
    edi = ecx;
    if (stop("postCondition"))
        goto loc_1a9d46;
    ecx = 0;
    edx = -edx;
    memoryASet32(ds, esp + 48, ecx);
loc_1a9d46: // 0160:1a9d46
    eax = memoryAGet32(ds, esp + 36);
    stop("imul eax * ebx");
    eax += memoryAGet32(ds, esp);
    eax += edx;
    edx = memoryAGet32(ds, esp + 40);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 32);
    stop("imul eax * edx");
    ebx = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, esp + 28);
    eax += ebx;
    ecx = 0;
    edx += eax;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp + 24, edx);
    goto loc_1a9e00;
loc_1a9d7b: // 0160:1a9d7b
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 24);
    ebx = memoryAGet32(ds, esp);
    esi = 0;
    edx += edi;
    goto loc_1a9dcd;
loc_1a9d8b: // 0160:1a9d8b
    ecx = memoryAGet32(ds, esp + 48);
    if (ecx)
        goto loc_1a9dad;
    cl = memoryAGet(ds, ebx);
    if (ecx == 0x00000080)
        goto loc_1a9dc9;
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx != 0x00000080)
        goto loc_1a9dc9;
    cl = memoryAGet(ds, ebx);
    goto loc_1a9dc7;
loc_1a9dad: // 0160:1a9dad
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_1a9dc9;
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx != 0x00000080)
        goto loc_1a9dc9;
    cl = memoryAGet(ds, edx);
loc_1a9dc7: // 0160:1a9dc7
    memoryASet(ds, eax, cl);
loc_1a9dc9: // 0160:1a9dc9
    eax++;
    edx--;
    ebx++;
    esi++;
loc_1a9dcd: // 0160:1a9dcd
    if ((int32_t)esi >= (int32_t)edi)
        goto loc_1a9ddd;
    if (stop("postCondition"))
        goto loc_1a9ddd;
    if ((int32_t)esi < (int32_t)0x000003c0)
        goto loc_1a9d8b;
loc_1a9ddd: // 0160:1a9ddd
    eax = memoryAGet32(ds, esp + 36);
    ebx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 24);
    esi++;
    ebx += eax;
    eax = memoryAGet32(ds, esp + 40);
    memoryASet32(ds, esp, ebx);
    ecx += eax;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 24, ecx);
loc_1a9e00: // 0160:1a9e00
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_1a9e19;
    if (stop("postCondition"))
        goto loc_1a9e19;
    if ((int32_t)eax < (int32_t)0x00000190)
        goto loc_1a9d7b;
loc_1a9e19: // 0160:1a9e19
    esp += 0x00000008;
    edi = pop32();
    esi = pop32();
    stop("stack_below, 32/30");
    esp += 4;
    esp += 32;
}
void sub_1a9ef6() // 0160:1a9ef6 +long
{
    esp -= 4;
    push32(edx);
    dl = 0x80;
    eax = 0;
loc_1a9efb: // 0160:1a9efb
    eax++;
    memoryASet(ds, eax + 3233191, dl);
    if ((int32_t)eax < (int32_t)0x0005dc00)
        goto loc_1a9efb;
    edx = pop32();
    esp += 4;
}
void sub_1a9f6e() // 0160:1a9f6e +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    memoryASet32(ds, esp + 4, edx);
    ebp = ebx;
    edx = 0;
    eax = 0;
    memoryASet16(ds, 0x39ef86, dx);
    edx = 0x00000380;
loc_1a9f8d: // 0160:1a9f8d
    sub_1b3e6c();
    ecx = eax + 32;
    ebx = ecx;
    ebx <<= 2;
    edx = memoryAGet32(ds, ebx + 2535784);
    if ((int32_t)edx < (int32_t)0x00000020)
        goto loc_1a9fad;
    if ((int32_t)edx <= (int32_t)0x0000014e)
        goto loc_1a9fb6;
loc_1a9fad: // 0160:1a9fad
    edx = 0x00000380;
    eax = 0;
    goto loc_1a9f8d;
loc_1a9fb6: // 0160:1a9fb6
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
    if (!ebp)
        goto loc_1aa1d6;
    ebx = 0x0000016e;
    if (ecx >= 0x000003c0)
        goto loc_1aa015;
    edx = 0;
    eax = 0;
    dx = memoryAGet16(ds, 0x39ef86);
    ax = memoryAGet16(ds, esi + 2508360);
    edx &= eax;
    eax = ecx + 351360;
    esi += 0x0002ae40;
    al = memoryAGet(ds, eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aa080;
loc_1aa015: // 0160:1aa015
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
loc_1aa023: // 0160:1aa023
    eax = ebx;
    ebx--;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1aa023;
    if (ecx >= 0x000003c0)
        goto loc_1aa023;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx--;
    ax = memoryAGet16(ds, esi + eax + 2332680);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx--;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aa023;
loc_1aa080: // 0160:1aa080
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
loc_1aa08e: // 0160:1aa08e
    eax = ebx;
    ebx--;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1aa0eb;
    if (ecx >= 0x000003c0)
        goto loc_1aa0eb;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx--;
    ax = memoryAGet16(ds, esi + eax + 2332680);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx--;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aa08e;
loc_1aa0eb: // 0160:1aa0eb
    eax = ebx + -5;
    ebx += 0x00000003;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1aa231;
    if (ecx >= 0x000003c0)
        goto loc_1aa231;
    esi = ebx + -8;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = ecx;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = eax + eax;
    ax = memoryAGet16(ds, edx + ebp + 2332680);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    ebp = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x39ef86);
    ebp &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_1aa231;
    esi = edx;
    ebx = 0;
loc_1aa177: // 0160:1aa177
    eax = ebx;
    ebx++;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1aa177;
    if (ecx >= 0x000003c0)
        goto loc_1aa177;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx++;
    ax = memoryAGet16(ds, esi + eax + 2332680);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx++;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aa231;
    goto loc_1aa177;
loc_1aa1d6: // 0160:1aa1d6
    ebx = 0;
loc_1aa1d8: // 0160:1aa1d8
    eax = ebx;
    ebx++;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1aa1d8;
    if (ecx >= 0x000003c0)
        goto loc_1aa1d8;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax + 2332680);
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    ebx++;
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx++;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aa1d8;
loc_1aa231: // 0160:1aa231
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, edi, ecx);
    memoryASet32(ds, eax, ebx);
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1aa241() // 0160:1aa241 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0;
    ebx = 0;
    edi = eax;
    goto loc_1aa2b8;
loc_1aa26f: // 0160:1aa26f
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= esi;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1aa2b2;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1aa2b2;
    ecx = 0x00000001;
loc_1aa2b2: // 0160:1aa2b2
    ebx += 0x000000ac;
loc_1aa2b8: // 0160:1aa2b8
    if ((int32_t)ebx >= (int32_t)0x00000ac0)
        goto loc_1aa2c4;
    if (!ecx)
        goto loc_1aa26f;
loc_1aa2c4: // 0160:1aa2c4
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aa2cb() // 0160:1aa2cb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0x00000008;
    ecx = esi + 7680;
    edi = eax + eax;
loc_1aa2e9: // 0160:1aa2e9
    if ((int32_t)ebx >= (int32_t)0x0000014e)
        goto loc_1aa351;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1aa33b;
    if (esi >= 0x000003c0)
        goto loc_1aa33b;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 2332680);
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aa342;
loc_1aa33b: // 0160:1aa33b
    eax = 0x00000001;
    goto loc_1aa344;
loc_1aa342: // 0160:1aa342
    eax = 0;
loc_1aa344: // 0160:1aa344
    if (!eax)
        goto loc_1aa351;
    ecx += 0x000003c0;
    ebx++;
    goto loc_1aa2e9;
loc_1aa351: // 0160:1aa351
    if ((int32_t)ebx < (int32_t)0x0000014e)
        goto loc_1aa35e;
    ebx = 0xffffffff;
loc_1aa35e: // 0160:1aa35e
    eax = ebx;
    goto loc_1aa4d0;
    // gap 363 bytes
loc_1aa4d0: // 0160:1aa4d0
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aa365() // 0160:1aa365 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = memoryAGet32(ds, 0x1df59c);
    edx = 0;
    ecx = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, edx);
    if (!esi)
        goto loc_1aa41c;
    edi = 0;
    ebp = 0;
loc_1aa38b: // 0160:1aa38b
    esi = ebp;
loc_1aa38d: // 0160:1aa38d
    edx = esp;
    eax = esp + 4;
    ebx = ecx;
    sub_1a9f6e();
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edx <<= 9;
    eax <<= 9;
    cl ^= 0x01;
    sub_1aa241();
    if (!eax)
        goto loc_1aa3bd;
    eax = esi;
    esi++;
    if ((int32_t)eax < (int32_t)0x00000200)
        goto loc_1aa38d;
loc_1aa3bd: // 0160:1aa3bd
    if ((int32_t)esi >= (int32_t)0x00000200)
        goto loc_1aa3fb;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, edi + 3792026, eax);
    eax = memoryAGet32(ds, esp);
    eax -= 0x00000002;
    eax <<= 9;
    memoryASet32(ds, edi + 3792030, eax);
    eax = memoryAGet32(ds, edi + 3792026);
    memoryASet32(ds, edi + 3792034, eax);
    eax = memoryAGet32(ds, edi + 3792030);
    memoryASet32(ds, edi + 3792038, eax);
    goto loc_1aa405;
loc_1aa3fb: // 0160:1aa3fb
    memoryASet32(ds, 0x1dd25a, 0x00000001);
loc_1aa405: // 0160:1aa405
    edi += 0x000000ac;
    if (edi == 0x00000ac0)
        goto loc_1aa4cc;
    goto loc_1aa38b;
loc_1aa41c: // 0160:1aa41c
    edi = 0x00000020;
    ebp = 0;
    ebx = 0;
    memoryASet32(ds, esp + 4, edi);
    edi = 0x000002b0;
    goto loc_1aa4aa;
loc_1aa433: // 0160:1aa433
    edx = ebx;
    ecx = edi;
loc_1aa437: // 0160:1aa437
    memoryASet32(ds, esp, 0xffffffff);
loc_1aa43e: // 0160:1aa43e
    if ((int32_t)memoryAGet32(ds, esp) >= (int32_t)0x00000000)
        goto loc_1aa45d;
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)0x000003a0)
        goto loc_1aa45d;
    sub_1aa2cb();
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
    goto loc_1aa43e;
loc_1aa45d: // 0160:1aa45d
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)0x000003a0)
        goto loc_1aa47e;
    eax <<= 9;
    memoryASet32(ds, edx + 3792026, eax);
    eax = memoryAGet32(ds, esp);
    eax <<= 9;
    esi++;
    memoryASet32(ds, edx + 3792030, eax);
loc_1aa47e: // 0160:1aa47e
    eax = memoryAGet32(ds, esp + 4);
    eax += 0x00000018;
    edx += 0x000000ac;
    memoryASet32(ds, esp + 4, eax);
    if (edx != ecx)
        goto loc_1aa437;
    edx = eax + 128;
    edi += 0x000002b0;
    ebx += 0x000002b0;
    ebp++;
    memoryASet32(ds, esp + 4, edx);
loc_1aa4aa: // 0160:1aa4aa
    if ((int32_t)ebp >= (int32_t)0x00000004)
        goto loc_1aa4bd;
    if ((int32_t)memoryAGet32(ds, esp + 4) < (int32_t)0x000003c0)
        goto loc_1aa433;
loc_1aa4bd: // 0160:1aa4bd
    if (esi == 0x00000010)
        goto loc_1aa4cc;
    memoryASet32(ds, 0x1dd25a, 0x00000001);
loc_1aa4cc: // 0160:1aa4cc
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aa4d6() // 0160:1aa4d6 +long
{
    esp -= 4;
    goto loc_1aa4d6;
loc_1aa4cc: // 0160:1aa4cc
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa4d6: // 0160:1aa4d6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = 0;
    esi = 0;
    ebp = 0;
    goto loc_1aa5ee;
loc_1aa4ea: // 0160:1aa4ea
    ecx = ebp;
loc_1aa4ec: // 0160:1aa4ec
    edx = esp;
    eax = esp + 4;
    ebx = ebp;
    sub_1a9f6e();
    ebx = memoryAGet32(ds, esp);
    ebx -= 0x00000002;
    eax = memoryAGet32(ds, esp + 4);
    edx = ebx;
    eax <<= 9;
    edx <<= 9;
    memoryASet32(ds, esp, ebx);
    sub_1aa241();
    if (eax)
        goto loc_1aa595;
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    sub_1b1bcf();
    if (eax)
        goto loc_1aa595;
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebp >= (int32_t)eax)
        goto loc_1aa5a3;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_1aa5a3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    ebx = memoryAGet32(ds, esp);
    edx &= eax;
    eax = ebx * 0x000003c0;
    eax += memoryAGet32(ds, esp + 4);
    al = memoryAGet(ds, eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aa5a3;
loc_1aa595: // 0160:1aa595
    eax = ecx;
    ecx++;
    if ((int32_t)eax < (int32_t)0x00000200)
        goto loc_1aa4ec;
loc_1aa5a3: // 0160:1aa5a3
    if ((int32_t)ecx >= (int32_t)0x00000200)
        goto loc_1aa5e4;
    memoryASet32(ds, esi + 3791154, ebp);
    memoryASet32(ds, esi + 3791158, ebp);
    memoryASet32(ds, esi + 3791162, ebp);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3791166, ebp);
    eax <<= 9;
    memoryASet32(ds, esi + 3791138, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esi + 3791170, ebp);
    eax <<= 9;
    memoryASet32(ds, esi + 3791142, eax);
    goto loc_1aa5ea;
loc_1aa5e4: // 0160:1aa5e4
    memoryASet32(ds, esi + 3791138, ebp);
loc_1aa5ea: // 0160:1aa5ea
    esi += 0x00000024;
    edi++;
loc_1aa5ee: // 0160:1aa5ee
    if ((int32_t)edi < (int32_t)memoryAGet32(ds, 0x1df628))
        goto loc_1aa4ea;
    goto loc_1aa4cc;
}
void sub_1aa617() // 0160:1aa617 +long
{
    esp -= 4;
    goto loc_1aa617;
loc_1aa4cf: // 0160:1aa4cf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 321 bytes
loc_1aa617: // 0160:1aa617
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a9caa();
    edx = 0x00000001;
    eax = 0;
    sub_1a9cc8();
    edx = 0x00000003;
    eax = 0;
    sub_1a9cc8();
    edx = 0x00000003;
    eax = 0;
    sub_1a9cc8();
    sub_1a9ef6();
    memoryASet(ds, 0x1df9dc, memoryAGet(ds, 0x1df9dc) ^ 0x01);
    if (memoryAGet32(ds, 0x1df9dc) != 0x00000000)
        goto loc_1aa690;
    edx = 0x003155a8;
    eax = 0x001d2000;
    sub_19b431();
    edx = 0x0026b168;
    eax = 0x001d200e;
    sub_19b431();
    eax = memoryAGet32(ds, 0x3155a8);
    ecx = 0x80808080;
    memoryASet32(ds, 0x39bdd8, eax);
    memoryASet32(ds, 0x3155a8, ecx);
    goto loc_1aa6c3;
loc_1aa690: // 0160:1aa690
    edx = 0x003155a8;
    eax = 0x001d2020;
    sub_19b431();
    edx = 0x0026b168;
    eax = 0x001d202e;
    sub_19b431();
    eax = memoryAGet32(ds, 0x3155a8);
    ebx = 0x80808080;
    memoryASet32(ds, 0x39bdd8, eax);
    memoryASet32(ds, 0x3155a8, ebx);
loc_1aa6c3: // 0160:1aa6c3
    esi = 0x00000003;
    edi = 0x0000003d;
    ebp = 0;
    memoryASet32(ds, 0x39bdc8, esi);
    sub_196688();
    memoryASet32(ds, 0x39f078, edi);
    sub_1aa365();
    sub_1aa4d6();
    memoryASet32(ds, 0x1dd25a, ebp);
    goto loc_1aa4cf;
}
void sub_1aa6f5() // 0160:1aa6f5 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x1dd550, edx);
    memoryASet32(ds, 0x1dfa14, edx);
    memoryASet32(ds, 0x1dfa0c, edx);
    memoryASet32(ds, 0x1dfa18, edx);
    memoryASet32(ds, 0x1dd544, edx);
    memoryASet32(ds, 0x1dd548, edx);
    memoryASet32(ds, 0x1dfa08, edx);
    edx = 0x001e19c8;
    memoryASet32(ds, 0x1dc0c4, ebx);
    memoryASet32(ds, 0x3be654, edx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aa739() // 0160:1aa739 +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = memoryAGet32(ds, 0x39bdd8);
    if (edx != 0x00000002)
        goto loc_1aa755;
    sub_19ce55();
    edx = eax;
    eax = 0x00000041;
    goto loc_1aa774;
loc_1aa755: // 0160:1aa755
    if (edx != 0x00000003)
        goto loc_1aa768;
    sub_19ce55();
    edx = eax;
    eax = 0x00000040;
    goto loc_1aa774;
loc_1aa768: // 0160:1aa768
    sub_19ce55();
    edx = eax;
    eax = 0x0000000e;
loc_1aa774: // 0160:1aa774
    sub_1b9c1d();
    ebx = pop32();
    esp += 4;
}
void sub_1aa77b() // 0160:1aa77b +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = memoryAGet32(ds, 0x39bdd8);
    if (edx != 0x00000002)
        goto loc_1aa797;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000041;
    goto loc_1aa7b6;
loc_1aa797: // 0160:1aa797
    if (edx != 0x00000003)
        goto loc_1aa7aa;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000040;
    goto loc_1aa7b6;
loc_1aa7aa: // 0160:1aa7aa
    sub_19ceb7();
    edx = eax;
    eax = 0x0000000e;
loc_1aa7b6: // 0160:1aa7b6
    sub_1b9c1d();
    ebx = pop32();
    esp += 4;
}
void sub_1aa7bd() // 0160:1aa7bd +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1aa7c0: // 0160:1aa7c0
    eax += 0x00000002;
    edx = 0;
    memoryASet16(ds, eax + 2332678, dx);
    if (eax != 0x0002ee00)
        goto loc_1aa7c0;
    eax = 0;
loc_1aa7d5: // 0160:1aa7d5
    eax += 0x00000010;
    edx = 0;
    memoryASet32(ds, eax + 2332408, edx);
    if (eax != 0x00000100)
        goto loc_1aa7d5;
    edx = pop32();
    esp += 4;
}
void sub_1aa7e9() // 0160:1aa7e9 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    push32(eax);
    push32(ebx);
    eax = ecx;
    ebx = memoryAGet32(ds, esp + 4);
    ebx <<= 4;
    memoryASet32(ds, ebx + 2332424, 0x00000001);
    memoryASet32(ds, ebx + 2332428, edx);
    memoryASet32(ds, ebx + 2332436, eax);
    ecx = memoryAGet32(ds, esp);
    esi = 0x00000001;
    memoryASet32(ds, ebx + 2332432, ecx);
    cl = memoryAGet(ds, esp + 4);
    ebx = 0x00000010;
    esi <<= cl;
    if (stop("postCondition"))
        goto loc_1aa83d;
    ecx = eax;
    ebx += eax;
    eax <<= 2;
    eax += ecx;
    eax <<= 6;
    edx -= eax;
    eax = 0;
loc_1aa83d: // 0160:1aa83d
    ecx = eax + ebx;
    if ((int32_t)ecx <= (int32_t)0x00000190)
        goto loc_1aa850;
    ecx -= 0x00000190;
    ebx -= ecx;
loc_1aa850: // 0160:1aa850
    ebp = 0x00000010;
    ecx = memoryAGet32(ds, esp);
    ecx += ebp;
    if ((int32_t)ecx <= (int32_t)0x000003c0)
        goto loc_1aa874;
    ebp = memoryAGet32(ds, esp);
    ecx = 0x00000010;
    ebp -= 0x000003b0;
    ecx -= ebp;
    ebp = ecx;
loc_1aa874: // 0160:1aa874
    if (edx < 0x002d95a8)
        goto loc_1aa92c;
    if (edx >= 0x003155a8)
        goto loc_1aa92c;
    ecx = memoryAGet32(ds, esp);
    if (stop("postCondition"))
        goto loc_1aa89e;
    edi = ecx;
    ebp += ecx;
    edi ^= ecx;
    edx += ecx;
    memoryASet32(ds, esp, edi);
loc_1aa89e: // 0160:1aa89e
    ecx = 0x0026e868;
    edx -= 0x002d95a8;
    memoryASet32(ds, esp + 32, eax);
    ecx += edx;
    eax += ebx;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 24, ecx);
    memoryASet32(ds, esp + 8, eax);
    ebp += edx;
    goto loc_1aa8fd;
loc_1aa8c0: // 0160:1aa8c0
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax == 0x00000080)
        goto loc_1aa8e0;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += edi;
    memoryASet16(ds, stop("GetOpAddress"), memoryAGet16(ds, stop("GetOpAddress")) | si);
loc_1aa8e0: // 0160:1aa8e0
    ecx--;
    ebx++;
loc_1aa8e2: // 0160:1aa8e2
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_1aa8c0;
    ebx = memoryAGet32(ds, esp + 24);
    ecx = memoryAGet32(ds, esp + 32);
    ebx += 0x00000140;
    ecx++;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp + 32, ecx);
loc_1aa8fd: // 0160:1aa8fd
    eax = memoryAGet32(ds, esp + 32);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1aa9c1;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000001e0;
    ebx = memoryAGet32(ds, esp);
    ecx = ebx;
    ecx = -ecx;
    ecx += 0x0000000f;
    ecx += memoryAGet32(ds, esp + 24);
    ecx += ebx;
    goto loc_1aa8e2;
loc_1aa92c: // 0160:1aa92c
    edi = memoryAGet32(ds, esp);
    if (stop("postCondition"))
        goto loc_1aa93e;
    ecx = edi;
    ebp += edi;
    ecx ^= edi;
    edx -= edi;
    memoryASet32(ds, esp, ecx);
loc_1aa93e: // 0160:1aa93e
    edi = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp + 28, eax);
    memoryASet32(ds, esp + 16, edi);
    eax += ebx;
    ebp += edi;
    memoryASet32(ds, esp + 12, eax);
    goto loc_1aa9b7;
loc_1aa957: // 0160:1aa957
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000001e0;
    ebx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 20);
    ecx = ebx + eax;
    eax = memoryAGet32(ds, esp + 16);
    eax = -eax;
    ecx += eax;
    goto loc_1aa99c;
loc_1aa97a: // 0160:1aa97a
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax == 0x00000080)
        goto loc_1aa99a;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += edi;
    memoryASet16(ds, stop("GetOpAddress"), memoryAGet16(ds, stop("GetOpAddress")) | si);
loc_1aa99a: // 0160:1aa99a
    ecx++;
    ebx++;
loc_1aa99c: // 0160:1aa99c
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_1aa97a;
    edx = memoryAGet32(ds, esp + 20);
    ebx = memoryAGet32(ds, esp + 28);
    edx += 0x00000140;
    ebx++;
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp + 28, ebx);
loc_1aa9b7: // 0160:1aa9b7
    eax = memoryAGet32(ds, esp + 28);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 12))
        goto loc_1aa957;
loc_1aa9c1: // 0160:1aa9c1
    esp += 0x00000024;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1aa9c8() // 0160:1aa9c8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    esi <<= 4;
    if (memoryAGet32(ds, esi + 2332424) == 0x00000000)
        goto loc_1aaae9;
    cl = al;
    edx = memoryAGet32(ds, esi + 2332432);
    ebx = 0;
    eax = 0x00000001;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esi + 2332424, ebx);
    eax <<= cl;
    esi = memoryAGet32(ds, esi + 2332436);
    ecx = eax;
    eax = 0x00000010;
    ecx ^= 0x0000ffff;
    if (stop("postCondition"))
        goto loc_1aaa19;
    eax += esi;
    esi = 0;
loc_1aaa19: // 0160:1aaa19
    edx = esi + eax;
    if ((int32_t)edx <= (int32_t)0x00000190)
        goto loc_1aaa2c;
    edx -= 0x00000190;
    eax -= edx;
loc_1aaa2c: // 0160:1aaa2c
    ebx = 0x00000010;
    edx = memoryAGet32(ds, esp + 8);
    edx += ebx;
    if ((int32_t)edx <= (int32_t)0x000003c0)
        goto loc_1aaa52;
    ebx = memoryAGet32(ds, esp + 8);
    edx = 0x00000010;
    ebx -= 0x000003b0;
    edx -= ebx;
    ebx = edx;
loc_1aaa52: // 0160:1aaa52
    edi = memoryAGet32(ds, esp + 8);
    if (stop("postCondition"))
        goto loc_1aaa62;
    edx = 0;
    ebx += edi;
    memoryASet32(ds, esp + 8, edx);
loc_1aaa62: // 0160:1aaa62
    eax += esi;
    edx = eax + -1;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax++;
    edx = esi;
    memoryASet32(ds, esp + 4, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 8);
    edx += ebx;
    edx--;
    esi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax + 1;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = esi;
    memoryASet32(ds, esp + 8, eax);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edi = 0x00239808;
    eax <<= 6;
    edi += eax;
    eax = memoryAGet32(ds, esp + 8);
    eax += eax;
    ebp = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp, eax);
    goto loc_1aaae5;
loc_1aaac8: // 0160:1aaac8
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 8);
    eax += edi;
    goto loc_1aaada;
loc_1aaad3: // 0160:1aaad3
    edx++;
    memoryASet16(ds, eax, memoryAGet16(ds, eax) & cx);
    eax += 0x00000002;
loc_1aaada: // 0160:1aaada
    if ((int32_t)edx < (int32_t)ebx)
        goto loc_1aaad3;
    edi += 0x000003c0;
    esi++;
loc_1aaae5: // 0160:1aaae5
    if ((int32_t)esi < (int32_t)ebp)
        goto loc_1aaac8;
loc_1aaae9: // 0160:1aaae9
    esp += 0x0000000c;
    goto loc_1afe30;
    // gap 21311 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aaaf1() // 0160:1aaaf1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edx = 0;
    memoryASet32(ds, esp, edx);
    edx = eax * 0x000000ac;
    if (memoryAGet32(ds, edx + 3792026) == 0x00000000)
        goto loc_1aabb2;
    if ((int32_t)memoryAGet32(ds, edx + 3792050) <= (int32_t)0x00000000)
        goto loc_1aab2a;
    edi = 0x00000003;
    edi -= memoryAGet32(ds, edx + 3792158);
    goto loc_1aab33;
loc_1aab2a: // 0160:1aab2a
    edi = memoryAGet32(ds, edx + 3792158);
    edi += 0x0000000d;
loc_1aab33: // 0160:1aab33
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3792038);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, ebx + 3792162);
    eax -= 0x0000000c;
    edx = memoryAGet32(ds, 0x39ef98);
    ecx += eax;
    if (esi != edx)
        goto loc_1aab81;
    if (memoryAGet32(ds, 0x39f044) != 0x00000000)
        goto loc_1aabb2;
loc_1aab81: // 0160:1aab81
    if ((int32_t)edi >= (int32_t)0x000003c0)
        goto loc_1aabb2;
    eax = edi + 16;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1aabb2;
    if ((int32_t)ecx >= (int32_t)0x00000190)
        goto loc_1aabb2;
    eax = ecx + 16;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1aabb2;
    memoryASet32(ds, esp, 0x00000001);
    ebp = esi * 0x000000ac;
    ebp = memoryAGet32(ss, ebp + 3792166);
loc_1aabb2: // 0160:1aabb2
    edx = esi;
    edx <<= 4;
    eax = memoryAGet32(ds, esp);
    if (eax != memoryAGet32(ds, edx + 2332424))
        goto loc_1aabda;
    if (ebp != memoryAGet32(ds, edx + 2332428))
        goto loc_1aabda;
    if (edi != memoryAGet32(ds, edx + 2332432))
        goto loc_1aabda;
    if (ecx == memoryAGet32(ds, edx + 2332436))
        goto loc_1aac02;
loc_1aabda: // 0160:1aabda
    eax = esi;
    edx = memoryAGet32(ds, esp);
    sub_1aa9c8();
    if (!edx)
        goto loc_1aac02;
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792058) != 0x00000000)
        goto loc_1aac02;
    ebx = edi;
    edx = ebp;
    eax = esi;
    sub_1aa7e9();
loc_1aac02: // 0160:1aac02
    edx = 0;
    ebx = 0;
    ecx = 0;
loc_1aac08: // 0160:1aac08
    if (memoryAGet32(ds, ebx + 2332424) == 0x00000000)
        goto loc_1aac21;
    if (memoryAGet32(ds, ecx + 3792026) != 0x00000000)
        goto loc_1aac21;
    eax = edx;
    sub_1aa9c8();
loc_1aac21: // 0160:1aac21
    ebx += 0x00000010;
    edx++;
    ecx += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1aac08;
    goto loc_1afe2d;
    // gap 20984 bytes
loc_1afe2d: // 0160:1afe2d
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aac35() // 0160:1aac35 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_1aac38: // 0160:1aac38
    eax = edx;
    edx++;
    sub_1aaaf1();
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1aac38;
    edx = pop32();
    esp += 4;
}
void sub_1aac47() // 0160:1aac47 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    eax = edx;
    edx = ebx;
    ebx = ecx;
    ecx = 0;
    memoryASet16(ds, 0x39ef86, cx);
    ecx = memoryAGet32(ds, esp + 12);
    push32(ecx);
    ecx = memoryAGet32(ds, esp + 12);
    esi = 0x0000ffff;
    sub_1970f5();
    memoryASet16(ds, 0x39ef86, si);
    esi = pop32();
    stop("stack_below", "0160:1aac71");
    stop("stack_unbalanced");
    esp += 4;
    esp += 8;
}
void sub_1aac75() // 0160:1aac75 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = edx;
    cl = al;
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x39ef86, ax);
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1aacf9;
    if (edx >= 0x000003c0)
        goto loc_1aacf9;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = esi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aacf9;
    eax = 0x00000001;
    goto loc_1aacfb;
loc_1aacf9: // 0160:1aacf9
    eax = 0;
loc_1aacfb: // 0160:1aacfb
    memoryASet16(ds, 0x39ef86, 0xffff);
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1aad07() // 0160:1aad07 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(eax);
    eax = edx;
    edx = ebx;
    ebx = ecx;
    cl = memoryAGet(ds, esp);
    esi = 0x00000001;
    esi <<= cl;
    ecx = esi;
    ecx ^= 0x0000ffff;
    memoryASet16(ds, 0x39ef86, cx);
    ecx = memoryAGet32(ds, esp + 20);
    push32(ecx);
    esi = memoryAGet32(ds, esp + 20);
    push32(esi);
    ecx = memoryAGet32(ds, esp + 20);
    sub_1ab7bc();
    memoryASet16(ds, 0x39ef86, 0xffff);
    esp += 0x00000004;
    esi = pop32();
    stop("stack_below", "0160:1aad47");
    stop("stack_unbalanced");
    esp += 4;
    esp += 12;
}
void sub_1aae8f() // 0160:1aae8f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x001e19c8;
    edx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x1dfa08, edx);
    memoryASet32(ds, 0x3be654, ebx);
    memoryASet32(ds, 0x1dc0c4, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aaeb4() // 0160:1aaeb4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    eax = memoryAGet32(ds, 0x1dfa08);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, 0x3be654);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 16, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    memoryASet32(ds, esp + 4, eax);
loc_1aaedf: // 0160:1aaedf
    edx = memoryAGet32(ds, esp + 4);
    if (!edx)
        goto loc_1aaf4f;
    ebx = edx + -24;
    eax = memoryAGet32(ds, ebx + 3915864);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, ebx + 3915876);
    ebp = memoryAGet32(ds, ebx + 3915868);
    memoryASet32(ds, esp + 8, eax);
    stop("imul eax * ebp");
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebx);
    ecx--;
    esi = memoryAGet32(ds, ebx + 3915860);
    edi = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp, ecx);
    edi--;
    ebp--;
    esi += eax;
    goto loc_1aaf2e;
loc_1aaf22: // 0160:1aaf22
    ebx--;
    cl = memoryAGet(ds, edx);
    edx--;
    memoryASet(ds, eax, cl);
    eax--;
loc_1aaf29: // 0160:1aaf29
    if (stop("postCondition"))
        goto loc_1aaf22;
    ebp--;
loc_1aaf2e: // 0160:1aaf2e
    if (stop("postCondition"))
        goto loc_1aaedf;
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 16);
    esi -= eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx = edi;
    edx -= eax;
    eax = edi + esi;
    memoryASet32(ds, esp + 16, edx);
    edx += edi;
    goto loc_1aaf29;
loc_1aaf4f: // 0160:1aaf4f
    memoryASet32(ds, 0x1dc0c4, edx);
    esp += 0x00000014;
    goto loc_1afe30;
    // gap 20179 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aaf5d() // 0160:1aaf5d +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    edi = edx;
    esi = ebx;
    memoryASet32(ds, esp + 4, ecx);
    if ((int32_t)memoryAGet32(ds, 0x1dfa08) > (int32_t)0x000000ff)
        goto loc_1aaf8f;
    eax = ebx + 8;
    stop("imul eax * ecx");
    edx = 0x001f19c8;
    ecx = memoryAGet32(ds, 0x3be654);
    edx -= eax;
    if (edx >= ecx)
        goto loc_1aafa8;
loc_1aaf8f: // 0160:1aaf8f
    edx = 0;
    memoryASet32(ds, 0x1dd544, edx);
    memoryASet32(ds, 0x1dd548, edx);
    memoryASet32(ds, 0x1dc0c4, edx);
    goto loc_1ab03f;
loc_1aafa8: // 0160:1aafa8
    edx = memoryAGet32(ds, 0x1dfa08);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    memoryASet32(ds, stop("GetOpAddress"), edi);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    eax = memoryAGet32(ds, 0x1dfa08);
    eax++;
    ebp = 0;
    memoryASet32(ds, 0x1dfa08, eax);
    goto loc_1ab039;
loc_1aaffd: // 0160:1aaffd
    edx = edi;
    eax = 0;
    goto loc_1ab014;
loc_1ab003: // 0160:1ab003
    ebx = memoryAGet32(ds, 0x3be654);
    ecx = memoryAGet32(ds, edx);
    edx += 0x00000004;
    memoryASet32(ds, ebx + eax, ecx);
    eax += 0x00000004;
loc_1ab014: // 0160:1ab014
    if ((int32_t)eax < (int32_t)esi)
        goto loc_1ab003;
    eax = memoryAGet32(ds, esp + 24);
    ebx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, esp + 28);
    edx = memoryAGet32(ds, 0x3be654);
    ebp++;
    edx += esi;
    ebx += eax;
    edi += ecx;
    memoryASet32(ds, 0x3be654, edx);
    memoryASet32(ds, esp, ebx);
loc_1ab039: // 0160:1ab039
    if ((int32_t)ebp < (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1aaffd;
loc_1ab03f: // 0160:1ab03f
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_below, 8/6");
    esp += 4;
    esp += 8;
}
void sub_1ab048() // 0160:1ab048 +long
{
    esp -= 4;
    ah = 0;
    memoryASet(ds, 0x3a72b7, ah);
    memoryASet(ds, 0x3a72b9, ah);
    memoryASet(ds, 0x3a72b4, ah);
    memoryASet(ds, 0x3a72bc, ah);
    memoryASet(ds, 0x3a72a5, ah);
    memoryASet(ds, 0x3a7288, ah);
    memoryASet(ds, 0x3a72a7, ah);
    memoryASet(ds, 0x3a72a8, ah);
    memoryASet(ds, 0x3a72a9, ah);
    memoryASet(ds, 0x3a72aa, ah);
    memoryASet(ds, 0x3a72ab, ah);
    memoryASet(ds, 0x3a72ac, ah);
    memoryASet(ds, 0x3a72ad, ah);
    memoryASet(ds, 0x3a72ae, ah);
    memoryASet(ds, 0x3a72af, ah);
    memoryASet(ds, 0x3a72b0, ah);
    memoryASet(ds, 0x3a72c3, ah);
    memoryASet(ds, 0x3a729e, ah);
    memoryASet(ds, 0x3a72a4, ah);
    esp += 4;
}
void sub_1ab0bd() // 0160:1ab0bd +long
{
    esp -= 4;
    if (!(al & 0x01))
        goto loc_1ab0c8;
    memoryASet(ds, 0x3a72b7, 0x01);
loc_1ab0c8: // 0160:1ab0c8
    if (!(al & 0x02))
        goto loc_1ab0d3;
    memoryASet(ds, 0x3a72b9, 0x01);
loc_1ab0d3: // 0160:1ab0d3
    if (!(al & 0x04))
        goto loc_1ab0de;
    memoryASet(ds, 0x3a72b4, 0x01);
loc_1ab0de: // 0160:1ab0de
    if (!(al & 0x08))
        goto loc_1ab0e9;
    memoryASet(ds, 0x3a72bc, 0x01);
loc_1ab0e9: // 0160:1ab0e9
    if (!(al & 0x10))
        goto loc_1ab0f4;
    memoryASet(ds, 0x3a7288, 0x01);
loc_1ab0f4: // 0160:1ab0f4
    if (!(al & 0x20))
        goto loc_1ab0ff;
    memoryASet(ds, 0x3a72a5, 0x01);
loc_1ab0ff: // 0160:1ab0ff
    if (!(al & 0x40))
        goto loc_1ab10a;
    memoryASet(ds, 0x3a72a7, 0x01);
loc_1ab10a: // 0160:1ab10a
    if (!(al & 0x80))
        goto loc_1ab115;
    memoryASet(ds, 0x3a72a8, 0x01);
loc_1ab115: // 0160:1ab115
    if (!(ah & 0x01))
        goto loc_1ab121;
    memoryASet(ds, 0x3a72a9, 0x01);
loc_1ab121: // 0160:1ab121
    if (!(ah & 0x02))
        goto loc_1ab12d;
    memoryASet(ds, 0x3a72aa, 0x01);
loc_1ab12d: // 0160:1ab12d
    if (!(ah & 0x04))
        goto loc_1ab139;
    memoryASet(ds, 0x3a72ab, 0x01);
loc_1ab139: // 0160:1ab139
    if (!(ah & 0x08))
        goto loc_1ab145;
    memoryASet(ds, 0x3a72ac, 0x01);
loc_1ab145: // 0160:1ab145
    if (!(ah & 0x10))
        goto loc_1ab151;
    memoryASet(ds, 0x3a72ad, 0x01);
loc_1ab151: // 0160:1ab151
    if (!(ah & 0x20))
        goto loc_1ab15d;
    memoryASet(ds, 0x3a72ae, 0x01);
loc_1ab15d: // 0160:1ab15d
    if (!(ah & 0x40))
        goto loc_1ab169;
    memoryASet(ds, 0x3a72af, 0x01);
loc_1ab169: // 0160:1ab169
    if (!(ah & 0x80))
        goto loc_1ab175;
    memoryASet(ds, 0x3a72b0, 0x01);
loc_1ab175: // 0160:1ab175
    if (!(eax & 0x00010000))
        goto loc_1ab183;
    memoryASet(ds, 0x3a72c3, 0x01);
loc_1ab183: // 0160:1ab183
    if (!(eax & 0x00020000))
        goto loc_1ab191;
    memoryASet(ds, 0x3a729e, 0x01);
loc_1ab191: // 0160:1ab191
    if (!(eax & 0x00040000))
        goto loc_1ab19f;
    memoryASet(ds, 0x3a72a4, 0x01);
loc_1ab19f: // 0160:1ab19f
    esp += 4;
    return;
}
void sub_1ab1a0() // 0160:1ab1a0 +long
{
    esp -= 4;
    push32(edx);
    dl = memoryAGet(ds, 0x3a72b7);
    eax = 0;
    if (!dl)
        goto loc_1ab1b2;
    eax = 0x00000001;
loc_1ab1b2: // 0160:1ab1b2
    if (memoryAGet(ds, 0x3a72b9) == 0x00)
        goto loc_1ab1bd;
    al |= 0x02;
loc_1ab1bd: // 0160:1ab1bd
    if (memoryAGet(ds, 0x3a72b4) == 0x00)
        goto loc_1ab1c8;
    al |= 0x04;
loc_1ab1c8: // 0160:1ab1c8
    if (memoryAGet(ds, 0x3a72bc) == 0x00)
        goto loc_1ab1d3;
    al |= 0x08;
loc_1ab1d3: // 0160:1ab1d3
    if (memoryAGet(ds, 0x3a7288) == 0x00)
        goto loc_1ab1de;
    al |= 0x10;
loc_1ab1de: // 0160:1ab1de
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_1ab1e9;
    al |= 0x20;
loc_1ab1e9: // 0160:1ab1e9
    if (memoryAGet(ds, 0x3a72a7) == 0x00)
        goto loc_1ab1f4;
    al |= 0x40;
loc_1ab1f4: // 0160:1ab1f4
    if (memoryAGet(ds, 0x3a72a8) == 0x00)
        goto loc_1ab1ff;
    al |= 0x80;
loc_1ab1ff: // 0160:1ab1ff
    if (memoryAGet(ds, 0x3a72a9) == 0x00)
        goto loc_1ab20b;
    ah |= 0x01;
loc_1ab20b: // 0160:1ab20b
    if (memoryAGet(ds, 0x3a72aa) == 0x00)
        goto loc_1ab217;
    ah |= 0x02;
loc_1ab217: // 0160:1ab217
    if (memoryAGet(ds, 0x3a72ab) == 0x00)
        goto loc_1ab223;
    ah |= 0x04;
loc_1ab223: // 0160:1ab223
    if (memoryAGet(ds, 0x3a72ac) == 0x00)
        goto loc_1ab22f;
    ah |= 0x08;
loc_1ab22f: // 0160:1ab22f
    if (memoryAGet(ds, 0x3a72ad) == 0x00)
        goto loc_1ab23b;
    ah |= 0x10;
loc_1ab23b: // 0160:1ab23b
    if (memoryAGet(ds, 0x3a72ae) == 0x00)
        goto loc_1ab247;
    ah |= 0x20;
loc_1ab247: // 0160:1ab247
    if (memoryAGet(ds, 0x3a72af) == 0x00)
        goto loc_1ab253;
    ah |= 0x40;
loc_1ab253: // 0160:1ab253
    if (memoryAGet(ds, 0x3a72b0) == 0x00)
        goto loc_1ab25f;
    ah |= 0x80;
loc_1ab25f: // 0160:1ab25f
    if (memoryAGet(ds, 0x3a72c3) == 0x00)
        goto loc_1ab26d;
    eax |= 0x00010000;
loc_1ab26d: // 0160:1ab26d
    if (memoryAGet(ds, 0x3a729e) == 0x00)
        goto loc_1ab27b;
    eax |= 0x00020000;
loc_1ab27b: // 0160:1ab27b
    if (memoryAGet(ds, 0x3a72a4) == 0x00)
        goto loc_1ab289;
    eax |= 0x00040000;
loc_1ab289: // 0160:1ab289
    edx = pop32();
    esp += 4;
}
void sub_1ab28b() // 0160:1ab28b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    sub_1ab1a0();
    if (eax != memoryAGet32(ds, 0x3be644))
        goto loc_1ab2ca;
    edx = memoryAGet32(ds, 0x39bdf4);
    if (edx != memoryAGet32(ds, 0x3be650))
        goto loc_1ab2ca;
    edx = memoryAGet32(ds, 0x39bdf0);
    if (edx != memoryAGet32(ds, 0x3be64c))
        goto loc_1ab2ca;
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx == memoryAGet32(ds, 0x3be648))
        goto loc_1ab3ab;
loc_1ab2ca: // 0160:1ab2ca
    ecx = memoryAGet32(ds, 0x39f238);
    ebx = memoryAGet32(ds, 0x1dfa18);
    edx = memoryAGet32(ds, 0x39bdf4);
    ebp = memoryAGet32(ds, 0x3be650);
    ebx++;
    ecx &= 0x0fffffff;
    memoryASet32(ds, 0x1dfa18, ebx);
    memoryASet32(ds, stop("GetOpAddress"), ecx);
    if (edx == ebp)
        goto loc_1ab310;
    ecx = edx;
    ebx++;
    ecx |= 0x10000000;
    memoryASet32(ds, 0x1dfa18, ebx);
    memoryASet32(ds, stop("GetOpAddress"), ecx);
loc_1ab310: // 0160:1ab310
    edx = memoryAGet32(ds, 0x39bdf0);
    if (edx == memoryAGet32(ds, 0x3be64c))
        goto loc_1ab33a;
    ebx = memoryAGet32(ds, 0x1dfa18);
    ecx = edx;
    ebx++;
    ecx |= 0x20000000;
    memoryASet32(ds, 0x1dfa18, ebx);
    memoryASet32(ds, stop("GetOpAddress"), ecx);
loc_1ab33a: // 0160:1ab33a
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx == memoryAGet32(ds, 0x3be648))
        goto loc_1ab364;
    ebx = memoryAGet32(ds, 0x1dfa18);
    ecx = edx;
    ebx++;
    ecx |= 0x30000000;
    memoryASet32(ds, 0x1dfa18, ebx);
    memoryASet32(ds, stop("GetOpAddress"), ecx);
loc_1ab364: // 0160:1ab364
    if (eax == memoryAGet32(ds, 0x3be644))
        goto loc_1ab388;
    ebx = memoryAGet32(ds, 0x1dfa18);
    ecx = eax;
    ebx++;
    ecx |= 0x40000000;
    memoryASet32(ds, 0x1dfa18, ebx);
    memoryASet32(ds, stop("GetOpAddress"), ecx);
loc_1ab388: // 0160:1ab388
    memoryASet32(ds, 0x3be644, eax);
    eax = memoryAGet32(ds, 0x39bdf4);
    memoryASet32(ds, 0x3be650, eax);
    eax = memoryAGet32(ds, 0x39bdf0);
    memoryASet32(ds, 0x3be64c, eax);
    eax = memoryAGet32(ds, 0x39bde8);
    memoryASet32(ds, 0x3be648, eax);
loc_1ab3ab: // 0160:1ab3ab
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ab3b0() // 0160:1ab3b0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    sub_1ab048();
    eax = memoryAGet32(ds, 0x1dfa18);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x1dfa1c))
        goto loc_1ab4d1;
    edx = memoryAGet32(ds, 0x39f238);
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    edx &= 0x0fffffff;
    if (edx != ebx)
        goto loc_1ab4bd;
    ecx = eax + 1;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax &= 0xf0000000;
    memoryASet32(ds, 0x1dfa18, ecx);
    if (eax != 0x10000000)
        goto loc_1ab41b;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = ecx + 1;
    edx &= 0x0fffffff;
    memoryASet32(ds, 0x1dfa18, eax);
    memoryASet32(ds, 0x3be650, edx);
loc_1ab41b: // 0160:1ab41b
    eax = memoryAGet32(ds, 0x1dfa18);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax &= 0xf0000000;
    if (eax != 0x20000000)
        goto loc_1ab451;
    edx = memoryAGet32(ds, 0x1dfa18);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx++;
    eax &= 0x0fffffff;
    memoryASet32(ds, 0x1dfa18, edx);
    memoryASet32(ds, 0x3be64c, eax);
loc_1ab451: // 0160:1ab451
    eax = memoryAGet32(ds, 0x1dfa18);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax &= 0xf0000000;
    if (eax != 0x30000000)
        goto loc_1ab487;
    edx = memoryAGet32(ds, 0x1dfa18);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx++;
    eax &= 0x0fffffff;
    memoryASet32(ds, 0x1dfa18, edx);
    memoryASet32(ds, 0x3be648, eax);
loc_1ab487: // 0160:1ab487
    eax = memoryAGet32(ds, 0x1dfa18);
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    eax &= 0xf0000000;
    if (eax != 0x40000000)
        goto loc_1ab4bd;
    eax = memoryAGet32(ds, 0x1dfa18);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax++;
    edx &= 0x0fffffff;
    memoryASet32(ds, 0x1dfa18, eax);
    memoryASet32(ds, 0x3be644, edx);
loc_1ab4bd: // 0160:1ab4bd
    eax = memoryAGet32(ds, 0x3be648);
    memoryASet32(ds, 0x39bde8, eax);
    eax = memoryAGet32(ds, 0x3be644);
    sub_1ab0bd();
loc_1ab4d1: // 0160:1ab4d1
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ab4d5() // 0160:1ab4d5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x1dd550) != 0x00000001)
        goto loc_1ab532;
    ebx = 0;
    memoryASet32(ds, 0x1dd550, ebx);
    sub_1aae8f();
    sub_196010();
    eax = memoryAGet32(ds, 0x3a7470);
    edi = 0xffffffff;
    memoryASet32(ds, 0x1dfa10, eax);
    memoryASet32(ds, 0x1dfa0c, ebx);
    memoryASet32(ds, 0x1dfa18, ebx);
    eax = memoryAGet32(ds, 0x39f238);
    memoryASet32(ds, 0x3be644, edi);
    memoryASet32(ds, 0x3be650, edi);
    memoryASet32(ds, 0x3be64c, edi);
    memoryASet32(ds, 0x3be648, edi);
    memoryASet32(ds, 0x1dfa14, eax);
loc_1ab532: // 0160:1ab532
    if (memoryAGet32(ds, 0x1dd550) != 0x00000002)
        goto loc_1ab5ef;
    ecx = 0x00000003;
    edi = memoryAGet32(ds, 0x1dfa14);
    memoryASet32(ds, 0x1dd24e, ecx);
    memoryASet32(ds, 0x1dd550, ecx);
    if (!edi)
        goto loc_1ab57d;
    eax = memoryAGet32(ds, 0x1dfa18);
    memoryASet32(ds, 0x1dfa1c, eax);
    if ((int32_t)eax <= (int32_t)0x00003e80)
        goto loc_1ab575;
    memoryASet32(ds, 0x1dfa1c, 0x00003e80);
loc_1ab575: // 0160:1ab575
    edx = 0;
    memoryASet32(ds, 0x1dfa14, edx);
loc_1ab57d: // 0160:1ab57d
    if (memoryAGet32(ds, 0x1dfa1c) == 0x00000000)
        goto loc_1ab5ef;
    eax = 0;
    sub_1a4408();
    sub_19602a();
    sub_1aaeb4();
    eax = memoryAGet32(ds, 0x1dfa10);
    memoryASet32(ds, 0x3a7470, eax);
    esi = 0xffffffff;
    ecx = 0;
    edx = 0x00000001;
    memoryASet32(ds, 0x1dfa18, ecx);
    memoryASet32(ds, 0x3be644, esi);
    memoryASet32(ds, 0x3be650, esi);
    memoryASet32(ds, 0x3be64c, esi);
    memoryASet32(ds, 0x3be648, esi);
    memoryASet32(ds, 0x1dfa0c, edx);
    sub_196e87();
    sub_19a337();
    eax = 0x000000ff;
    sub_1a4408();
    eax = memoryAGet32(ds, 0x39f238);
    memoryASet32(ds, 0x3a7470, eax);
loc_1ab5ef: // 0160:1ab5ef
    if (memoryAGet32(ds, 0x1dfa0c) == 0x00000000)
        goto loc_1ab5fd;
    sub_1ab3b0();
loc_1ab5fd: // 0160:1ab5fd
    if (memoryAGet32(ds, 0x1dfa14) == 0x00000000)
        goto loc_1afe31;
    sub_1ab28b();
    goto loc_1afe31;
    // gap 18461 bytes
loc_1afe31: // 0160:1afe31
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ab614() // 0160:1ab614 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x39be00);
    eax -= memoryAGet32(ds, 0x39bdf4);
    eax <<= 3;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = ebx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp > (int32_t)eax)
        goto loc_1ab65b;
    eax = memoryAGet32(ds, 0x39be04);
    eax -= memoryAGet32(ds, 0x39bdf0);
    eax <<= 3;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = ecx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1ab665;
loc_1ab65b: // 0160:1ab65b
    memoryASet32(ds, 0x1dfa20, 0x000005dc);
loc_1ab665: // 0160:1ab665
    edx = memoryAGet32(ds, 0x1dfa20);
    if (!edx)
        goto loc_1ab684;
    ebp = 0;
    eax = edx + -1;
    memoryASet32(ds, 0x39f258, ebp);
    memoryASet32(ds, 0x1dfa20, eax);
    goto loc_1ab7ae;
loc_1ab684: // 0160:1ab684
    if (ebx != 0x00078000)
        goto loc_1ab6c9;
    if (ecx)
        goto loc_1ab6c9;
    ecx = 0x00000001;
    esi <<= 2;
    edi <<= 2;
    esi -= 0x00000280;
    edi -= 0x000001c0;
    memoryASet32(ds, 0x39f258, ecx);
    memoryASet32(ds, 0x39f248, esi);
    esi = 0x00000032;
    memoryASet32(ds, 0x39f24c, edi);
    memoryASet32(ds, 0x39f230, esi);
    goto loc_1ab7a4;
loc_1ab6c9: // 0160:1ab6c9
    if (ebx)
        goto loc_1ab6d5;
    if (!ecx)
        goto loc_1ab7a4;
loc_1ab6d5: // 0160:1ab6d5
    eax = memoryAGet32(ds, 0x39f248);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = eax;
    eax = memoryAGet32(ds, 0x39f24c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = esi;
    edx <<= 2;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1ab716;
    esi -= 0x000000c0;
    if ((int32_t)esi <= (int32_t)ebp)
        goto loc_1ab72c;
    ebx = edx + -768;
    goto loc_1ab726;
loc_1ab716: // 0160:1ab716
    esi -= 0x00000080;
    if ((int32_t)esi >= (int32_t)ebp)
        goto loc_1ab72c;
    ebx = edx + -512;
loc_1ab726: // 0160:1ab726
    memoryASet32(ds, 0x39f248, ebx);
loc_1ab72c: // 0160:1ab72c
    ebx = edi;
    ebx <<= 2;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1ab744;
    edi -= 0x00000048;
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_1ab757;
    ebx -= 0x00000120;
    goto loc_1ab751;
loc_1ab744: // 0160:1ab744
    edi -= 0x00000060;
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_1ab757;
    ebx -= 0x00000100;
loc_1ab751: // 0160:1ab751
    memoryASet32(ds, 0x39f24c, ebx);
loc_1ab757: // 0160:1ab757
    if ((int32_t)memoryAGet32(ds, 0x39f248) >= (int32_t)0x00000000)
        goto loc_1ab768;
    ecx = 0;
    memoryASet32(ds, 0x39f248, ecx);
loc_1ab768: // 0160:1ab768
    if ((int32_t)memoryAGet32(ds, 0x39f248) <= (int32_t)0x00000f00)
        goto loc_1ab77e;
    memoryASet32(ds, 0x39f24c, 0x00000f00);
loc_1ab77e: // 0160:1ab77e
    if ((int32_t)memoryAGet32(ds, 0x39f24c) >= (int32_t)0x00000000)
        goto loc_1ab78e;
    eax = 0;
    memoryASet32(ds, 0x39f24c, eax);
loc_1ab78e: // 0160:1ab78e
    if ((int32_t)memoryAGet32(ds, 0x39f24c) <= (int32_t)0x00000640)
        goto loc_1ab7a4;
    memoryASet32(ds, 0x39f24c, 0x00000640);
loc_1ab7a4: // 0160:1ab7a4
    memoryASet32(ds, 0x39f258, 0x00000001);
loc_1ab7ae: // 0160:1ab7ae
    memoryASet32(ds, 0x39f230, 0x00000032);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1ab7bc() // 0160:1ab7bc +long +stackDrop8
{
    esp -= 4;
    goto loc_1ab7bc;
loc_1ab042: // 0160:1ab042
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
    return;
    // gap 1908 bytes
loc_1ab7bc: // 0160:1ab7bc
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000024;
    edi = eax;
    esi = edx;
    ebp = memoryAGet32(ds, eax);
    eax = memoryAGet32(ds, edx);
    memoryASet32(ds, edi, ebx);
    memoryASet32(ds, edx, ecx);
    edx = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, edx, ebp);
    edx = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, esp + 4, ebp);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ds, edx, eax);
    if ((int32_t)eax < (int32_t)0x00000008)
        goto loc_1ababd;
    if ((int32_t)eax > (int32_t)0x00000190)
        goto loc_1ababd;
    ebp -= ebx;
    eax -= ecx;
    memoryASet32(ds, esp + 32, ebp);
    memoryASet32(ds, esp + 28, eax);
    if (ebp)
        goto loc_1ab80e;
    if (!eax)
        goto loc_1ababf;
loc_1ab80e: // 0160:1ab80e
    eax = memoryAGet32(ds, esp + 32);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = memoryAGet32(ds, esp + 28);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1ab929;
    eax = memoryAGet32(ds, esp + 32);
    ebp = ecx;
    ecx = memoryAGet32(ds, esp + 28);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ecx <<= 16;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    edx = ecx;
    ecx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 32);
    ebp <<= 16;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1ab864;
    memoryASet32(ds, esp + 24, 0x00000001);
    goto loc_1ab86c;
loc_1ab864: // 0160:1ab864
    memoryASet32(ds, esp + 24, 0xffffffff);
loc_1ab86c: // 0160:1ab86c
    eax = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esp + 24);
    eax += edx;
    memoryASet32(ds, esp + 16, eax);
loc_1ab87a: // 0160:1ab87a
    if (ebx == memoryAGet32(ds, esp + 16))
        goto loc_1aba25;
    ecx = ebp;
    ecx = sar32(ecx, 0x10);
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1ab90f;
    if (ebx >= 0x000003c0)
        goto loc_1ab90f;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp, eax);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = 0;
    dx = memoryAGet16(ds, 0x39ef86);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ecx * 0x000003c0;
    al = memoryAGet(ds, ebx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ab90f;
    eax = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, eax, ebx);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, eax, ecx);
loc_1ab905: // 0160:1ab905
    eax = 0x00000001;
    goto loc_1ababf;
loc_1ab90f: // 0160:1ab90f
    eax = ebp;
    memoryASet32(ds, edi, ebx);
    eax = sar32(eax, 0x10);
    ecx = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esi, eax);
    eax = memoryAGet32(ds, esp + 28);
    ebx += ecx;
    ebp += eax;
    goto loc_1ab87a;
loc_1ab929: // 0160:1ab929
    eax = memoryAGet32(ds, esp + 28);
    ebp = ebx;
    ebx = ecx;
    ecx = memoryAGet32(ds, esp + 32);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ecx <<= 16;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    edx = ecx;
    ecx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 32, eax);
    eax = memoryAGet32(ds, esp + 28);
    ebp <<= 16;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1ab965;
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_1ab96d;
loc_1ab965: // 0160:1ab965
    memoryASet32(ds, esp + 20, 0xffffffff);
loc_1ab96d: // 0160:1ab96d
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 20);
    eax += edx;
    memoryASet32(ds, esp + 12, eax);
loc_1ab97b: // 0160:1ab97b
    if (ebx == memoryAGet32(ds, esp + 12))
        goto loc_1aba25;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1aba0b;
    ecx = ebp;
    ecx = sar32(ecx, 0x10);
    if (ecx >= 0x000003c0)
        goto loc_1aba0b;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp, eax);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = 0;
    dx = memoryAGet16(ds, 0x39ef86);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aba0b;
    eax = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, eax, ecx);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, eax, ebx);
    goto loc_1ab905;
loc_1aba0b: // 0160:1aba0b
    eax = ebp;
    ecx = memoryAGet32(ds, esp + 32);
    eax = sar32(eax, 0x10);
    ebp += ecx;
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esi, ebx);
    ebx += eax;
    goto loc_1ab97b;
loc_1aba25: // 0160:1aba25
    edx = memoryAGet32(ds, esp + 8);
    if ((int32_t)(edx & edx) <= 0)
        goto loc_1ababd;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_1ababd;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    eax <<= 4;
    eax -= ebx;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    eax += eax;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + 2332680);
    eax = 0;
    ecx = ebx;
    ax = memoryAGet16(ds, 0x39ef86);
    ebx = memoryAGet32(ds, esp + 8);
    ecx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    esi = memoryAGet32(ds, esp + 4);
    eax <<= 6;
    eax += esi;
    al = memoryAGet(ds, eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= ecx;
    if (!eax)
        goto loc_1ababd;
    edx = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, edx, esi);
    edx = memoryAGet32(ds, esp + 56);
    eax = 0x00000001;
    memoryASet32(ds, edx, ebx);
    goto loc_1ababf;
loc_1ababd: // 0160:1ababd
    eax = 0;
loc_1ababf: // 0160:1ababf
    esp += 0x00000024;
    goto loc_1ab042;
}
void sub_1abac7() // 0160:1abac7 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = ebx;
    ebp = ecx;
    if ((int32_t)edx >= (int32_t)0x0002fc00)
        goto loc_1abc17;
    if ((int32_t)edx <= (int32_t)0xffffc000)
        goto loc_1abc17;
    ebx = 0;
    eax = 0;
loc_1abaec: // 0160:1abaec
    if ((int32_t)eax >= (int32_t)0x000000c0)
        goto loc_1abb02;
    if (memoryAGet32(ds, eax + 3796662) == 0x00000000)
        goto loc_1abb02;
    eax += 0x00000018;
    ebx++;
    goto loc_1abaec;
loc_1abb02: // 0160:1abb02
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    if (memoryAGet32(ds, stop("GetOpAddress")) != 0x00000000)
        goto loc_1acf3b;
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_1acf3b;
    if (edi)
        goto loc_1abb29;
    edi = 0xffffffff;
loc_1abb29: // 0160:1abb29
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    memoryASet32(ds, stop("GetOpAddress"), edi);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = 0;
    ecx = memoryAGet32(ds, 0x1df62c);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    if (!ecx)
        goto loc_1abb6d;
    edx = esi;
    edx <<= 2;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x0000005a)
        goto loc_1abb6d;
    esi = 0x0000005a;
loc_1abb6d: // 0160:1abb6d
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    memoryASet32(ds, stop("GetOpAddress"), esi);
    edx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, stop("GetOpAddress"), ebp);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_1abbbb;
    eax = edi + -81920;
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000037;
    sub_1b9c1d();
    eax = edi + 81920;
    ebx = 0x000000ff;
    goto loc_1abbc7;
loc_1abbbb: // 0160:1abbbb
    eax = esi;
    eax <<= 2;
    eax -= esi;
    ebx = eax + 32;
    eax = edi;
loc_1abbc7: // 0160:1abbc7
    sub_19ceb7();
    edx = eax;
    eax = 0x00000037;
    sub_1b9c1d();
    edi = 0;
    memoryASet32(ds, 0x39f258, edi);
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_1abbf4;
    memoryASet32(ds, 0x39f084, memoryAGet32(ds, 0x39f084) + 0x00000e00);
    goto loc_1acf3b;
loc_1abbf4: // 0160:1abbf4
    if ((int32_t)esi < (int32_t)0x00000020)
        goto loc_1abc08;
    memoryASet32(ds, 0x39f084, memoryAGet32(ds, 0x39f084) + 0x00000a00);
    goto loc_1acf3b;
loc_1abc08: // 0160:1abc08
    memoryASet32(ds, 0x39f084, memoryAGet32(ds, 0x39f084) + 0x00000400);
    goto loc_1acf3b;
loc_1abc17: // 0160:1abc17
    if ((int32_t)(edx & edx) <= 0)
        goto loc_1abc2f;
    stop("disassembly failed at 160:1abc21 setg al");
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1acf3b;
loc_1abc2f: // 0160:1abc2f
    edx = memoryAGet32(ds, 0x39f084);
    ebx = 0x00000040;
    edx += 0x00000200;
    eax = edi;
    memoryASet32(ds, 0x39f084, edx);
    sub_19ceb7();
    edx = eax;
    eax = 0x00000037;
    sub_1b9c1d();
    goto loc_1acf3b;
    // gap 4829 bytes
loc_1acf3b: // 0160:1acf3b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1abc5e() // 0160:1abc5e +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x39ef94);
    edx -= 0x000000fa;
    memoryASet32(ds, 0x39ef94, edx);
    if (stop("postCondition"))
        goto loc_1abc7f;
    memoryASet32(ds, 0x39ef94, 0x00000001);
loc_1abc7f: // 0160:1abc7f
    edx = pop32();
    esp += 4;
}
void sub_1abc81() // 0160:1abc81 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx + -8;
    ebx = 0;
loc_1abc8b: // 0160:1abc8b
    edx = 0x00000300;
    eax = 0xfffffd00;
    sub_1a9cc8();
    edx = 0xfffffc00;
    memoryASet32(ds, ebx + 3790906, eax);
    eax = 0xfffff800;
    ebx += 0x00000018;
    sub_1a9cc8();
    memoryASet32(ds, ebx + 3790886, eax);
    memoryASet32(ds, ebx + 3790874, ecx);
    edx = 0;
    memoryASet32(ds, ebx + 3790878, esi);
    memoryASet32(ds, ebx + 3790894, edx);
    memoryASet32(ds, ebx + 3790890, edx);
    if (ebx != 0x00000078)
        goto loc_1abc8b;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1abcdb() // 0160:1abcdb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    edi = 0x00000036;
    esi = edx + -8;
    ebx = 0;
loc_1abceb: // 0160:1abceb
    edx = 0x00000200;
    memoryASet32(ds, ebx + 3790898, ecx);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 3790902, esi);
    sub_1a9cc8();
    edx = 0xfffff800;
    memoryASet32(ds, ebx + 3790906, eax);
    eax = 0xfffff400;
    ebx += 0x00000018;
    sub_1a9cc8();
    memoryASet32(ds, ebx + 3790886, eax);
    edx = 0;
    memoryASet32(ds, ebx + 3790890, edi);
    memoryASet32(ds, ebx + 3790894, edx);
    if (ebx != 0x00000078)
        goto loc_1abceb;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1abd3c() // 0160:1abd3c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x39f008);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    edx = eax;
    if ((int32_t)eax >= (int32_t)0x000001e0)
        goto loc_1abd6e;
    ecx = 0xffffff00;
    edx = eax + 112;
    esi = 0xffffe000;
    goto loc_1abd7b;
loc_1abd6e: // 0160:1abd6e
    ecx = 0x00000100;
    edx = eax + -112;
    esi = 0x00002000;
loc_1abd7b: // 0160:1abd7b
    edx <<= 9;
    edi = 0x00000001;
    eax = 0;
loc_1abd85: // 0160:1abd85
    eax += 0x00000018;
    memoryASet32(ds, eax + 3790874, edx);
    memoryASet32(ds, eax + 3790878, ebx);
    memoryASet32(ds, eax + 3790882, ecx);
    ebp = 0;
    memoryASet32(ds, eax + 3790886, edi);
    ebx -= 0x00001400;
    memoryASet32(ds, eax + 3790894, ebp);
    edx += esi;
    memoryASet32(ds, eax + 3790890, ebp);
    if (eax != 0x000000c0)
        goto loc_1abd85;
    goto loc_1afe30;
    // gap 16494 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1abdc2() // 0160:1abdc2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x39f004) == 0x00000000)
        goto loc_1afe31;
    ebx = memoryAGet32(ds, 0x1dc098);
    if (ebx)
        goto loc_1afe31;
    if (memoryAGet32(ds, 0x39f0bc) != 0x00000000)
        goto loc_1afe31;
    eax = memoryAGet32(ds, 0x39f008);
    eax -= 0x00000280;
    memoryASet32(ds, 0x39f248, eax);
    eax = memoryAGet32(ds, 0x39f00c);
    eax -= 0x00000134;
    memoryASet32(ds, 0x39f24c, eax);
    eax = memoryAGet32(ds, 0x39f008);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax = memoryAGet32(ds, 0x39f00c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = memoryAGet32(ds, 0x39f0b0);
    memoryASet32(ds, 0x39f258, ebx);
    if (!edi)
        goto loc_1abe55;
    push32(0x0000000e);
    ecx = 0x00000010;
    ebx = eax;
    edx = esi;
    eax = 0x0029a428;
    goto loc_1abe65;
loc_1abe55: // 0160:1abe55
    push32(0x0000000e);
    ecx = 0x00000010;
    ebx = eax;
    edx = esi;
    eax = 0x002992a8;
loc_1abe65: // 0160:1abe65
    sub_19cb74();
    goto loc_1afe31;
    // gap 16322 bytes
loc_1afe31: // 0160:1afe31
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1abe6f() // 0160:1abe6f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39f234);
    ecx = memoryAGet32(ds, 0x39ef98);
    if (edx)
        goto loc_1ac068;
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_1ac068;
    if (memoryAGet32(ds, 0x39f118) != 0x00000000)
        goto loc_1ac068;
    ebx = ecx * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3792062) != 0x00000000)
        goto loc_1ac068;
    if (memoryAGet32(ds, 0x39f000) != 0x00000000)
        goto loc_1ac068;
    if (memoryAGet32(ds, ebx + 3792018) != 0x00000000)
        goto loc_1ac068;
    eax = memoryAGet32(ds, ebx + 3792022);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1ac068;
    if (memoryAGet32(ds, ebx + 3792006) != 0x00000000)
        goto loc_1ac068;
    esi = memoryAGet32(ds, ebx + 3792074);
    if (!esi)
        goto loc_1abf40;
    if (esi == 0x0000002b)
        goto loc_1abf40;
    if (esi == 0x00000004)
        goto loc_1abf40;
    if (esi == 0x00000024)
        goto loc_1abf40;
    if (esi == 0x00000036)
        goto loc_1abf40;
    if (esi == 0x00000010)
        goto loc_1abf40;
    if (esi == 0x00000027)
        goto loc_1abf40;
    if (esi == 0x0000002f)
        goto loc_1abf40;
    if (esi != 0x00000038)
        goto loc_1abf2d;
    if (memoryAGet32(ds, 0x39f060) == 0x00000001)
        goto loc_1abf40;
loc_1abf2d: // 0160:1abf2d
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000006)
        goto loc_1ac068;
loc_1abf40: // 0160:1abf40
    esi = ecx * 0x000000ac;
    esi = memoryAGet32(ds, esi + 3792050);
    if (esi)
        goto loc_1abf55;
    esi = 0xffffffff;
loc_1abf55: // 0160:1abf55
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000010)
        goto loc_1abfa1;
    eax = memoryAGet32(ds, 0x39efb8);
    eax &= 0x000000e0;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x39efb4, eax);
    eax = memoryAGet32(ds, 0x39efb8);
    eax += 0x00000040;
    eax &= 0x000000e0;
    goto loc_1abfdc;
loc_1abfa1: // 0160:1abfa1
    eax = memoryAGet32(ds, 0x39efb8);
    eax &= 0x000000ff;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x39efb4, eax);
    eax = memoryAGet32(ds, 0x39efb8);
    eax += 0x00000040;
    eax &= 0x000000ff;
loc_1abfdc: // 0160:1abfdc
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    stop("imul eax * esi");
    memoryASet32(ds, 0x1cdfb0, eax);
    ebx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 4;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, ebx + 3792050);
    eax -= 0x00000006;
    if (stop("postCondition"))
        goto loc_1ac042;
    ecx -= 0x00000008;
loc_1ac042: // 0160:1ac042
    push32(0x00000006);
    edx = memoryAGet32(ds, 0x39efb0);
    ebx = memoryAGet32(ds, 0x39efb4);
    ecx += edx;
    eax -= ebx;
    edx = ecx + -3;
    ebx = eax;
    ecx = 0x00000006;
    eax = 0x00286ce8;
    sub_19cb74();
loc_1ac068: // 0160:1ac068
    ecx = 0;
    memoryASet32(ds, 0x39f118, ecx);
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac076() // 0160:1ac076 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39f058) == 0x00000000)
        goto loc_1ac0a8;
    if (memoryAGet32(ds, 0x39f050) == 0x00000000)
        goto loc_1ac0a8;
    push32(0x00000006);
    ecx = 0x00000006;
    eax = 0x00286cf0;
    ebx = memoryAGet32(ds, 0x39f054);
    edx = memoryAGet32(ds, 0x39f050);
    sub_19cb74();
loc_1ac0a8: // 0160:1ac0a8
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac0ac() // 0160:1ac0ac +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x39f018);
    if (!edx)
        goto loc_1ac0e1;
    ebx = 0x00000032;
    ecx = edx + 2;
    memoryASet32(ds, 0x39f230, ebx);
    memoryASet32(ds, 0x39f018, ecx);
    if ((int32_t)ecx <= (int32_t)0x00000040)
        goto loc_1ac0e1;
    edi = 0;
    memoryASet32(ds, 0x39f018, edi);
    memoryASet32(ds, 0x39eff4, edi);
loc_1ac0e1: // 0160:1ac0e1
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac0e6() // 0160:1ac0e6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x39f018) == 0x00000000)
        goto loc_1ac146;
    eax = memoryAGet32(ds, 0x39f014);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39f010);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, 0x39f018);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000005);
    edx = memoryAGet32(ds, 0x39f01c);
    eax <<= 4;
    ecx = 0x00000010;
    eax += edx;
    edx = esi;
    sub_19cb74();
loc_1ac146: // 0160:1ac146
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac14b() // 0160:1ac14b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    ebx = memoryAGet32(ds, 0x39e886);
    edx = 0;
    if (ebx)
        goto loc_1afe30;
    esi = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39e8a6, eax);
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792050) != 0x00000001)
        goto loc_1ac18a;
    eax = memoryAGet32(ds, eax + 3792026);
    eax += 0x00000c00;
    goto loc_1ac195;
loc_1ac18a: // 0160:1ac18a
    eax = memoryAGet32(ds, eax + 3792026);
    eax -= 0x00000c00;
loc_1ac195: // 0160:1ac195
    memoryASet32(ds, 0x39e886, eax);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    esi = memoryAGet32(ds, eax + 3792030);
    eax = edx;
    eax <<= 3;
    eax += edx;
    esi -= 0x00001800;
    memoryASet32(ds, stop("GetOpAddress"), esi);
    ebx = memoryAGet32(ds, 0x39efbc);
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    if (ecx != 0x00000004)
        goto loc_1ac1da;
    memoryASet32(ds, 0x39f1c4, 0x0000007d);
loc_1ac1da: // 0160:1ac1da
    ebx = edx;
    ebx <<= 3;
    ebx += edx;
    ebx <<= 2;
    if (ecx != 0x0000000b)
        goto loc_1ac29d;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792050) != 0x00000001)
        goto loc_1ac20d;
    eax = memoryAGet32(ds, eax + 3792026);
    eax += 0x00000600;
    goto loc_1ac218;
loc_1ac20d: // 0160:1ac20d
    eax = memoryAGet32(ds, eax + 3792026);
    eax -= 0x00000600;
loc_1ac218: // 0160:1ac218
    memoryASet32(ds, ebx + 3795078, eax);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 3792030);
    eax = edx;
    eax <<= 3;
    eax += edx;
    ecx -= 0x00000800;
    ebp = 0x0027d8a8;
    memoryASet32(ds, stop("GetOpAddress"), ecx);
    memoryASet32(ds, stop("GetOpAddress"), ebp);
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = memoryAGet32(ds, ebx + 3792050);
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    ebx = memoryAGet32(ds, 0x39f078);
    esi = 0x000000fa;
    ebx = -ebx;
    memoryASet32(ds, stop("GetOpAddress"), esi);
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000026;
    sub_1b9c1d();
    goto loc_1afe30;
loc_1ac29d: // 0160:1ac29d
    ecx = 0x00286cd8;
    esi = memoryAGet32(ds, 0x1dfbc8);
    memoryASet32(ds, ebx + 3795102, ecx);
    if (!esi)
        goto loc_1ac2be;
    eax = edx;
    sub_1b7a0e();
    goto loc_1afe30;
loc_1ac2be: // 0160:1ac2be
    eax = memoryAGet32(ds, 0x39efac);
    edi = memoryAGet32(ds, 0x39efb0);
    eax -= 0x0000000f;
    stop("imul eax * edi");
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 3795094, eax);
    eax = memoryAGet32(ds, 0x39efac);
    ebp = memoryAGet32(ds, 0x39efb4);
    eax -= 0x0000000f;
    stop("imul eax * ebp");
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax = -eax;
    memoryASet32(ds, ebx + 3795098, eax);
    goto loc_1afe30;
    // gap 15127 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac6c2() // 0160:1ac6c2 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000034;
    esi = eax;
    edi = edx;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 44, ecx);
    ecx = memoryAGet32(ds, ebx);
    edx = 0;
    ebx = memoryAGet32(ds, esp + 44);
    ebp = edi + -4;
    memoryASet32(ds, esp + 48, edx);
    ebx = memoryAGet32(ds, ebx);
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1ac7a9;
    if (eax >= 0x000003c0)
        goto loc_1ac7a9;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = esi;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ac7a9;
    if (stop("postCondition"))
        goto loc_1ac7a9;
    edx = ebx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax + eax;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if (memoryAGet32(ds, esp + 68) == 0x00000000)
        goto loc_1ac872;
    ebp = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx = eax;
    goto loc_1ac872;
loc_1ac7a9: // 0160:1ac7a9
    ebp = edi + 1;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1ac87a;
    if (esi >= 0x000003c0)
        goto loc_1ac87a;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = esi;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ac87a;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1ac87a;
    edx = ebx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if (stop("postCondition"))
        goto loc_1ac85b;
    if ((int32_t)eax <= (int32_t)0xfffffe80)
        goto loc_1ac85b;
    ebx ^= eax;
loc_1ac85b: // 0160:1ac85b
    if (memoryAGet32(ds, esp + 68) == 0x00000000)
        goto loc_1ac872;
    ebp = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx = eax;
loc_1ac872: // 0160:1ac872
    memoryASet32(ds, esp + 48, 0x00000001);
loc_1ac87a: // 0160:1ac87a
    ebp = edi + -3;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1ac90a;
    eax = esi + -1;
    memoryASet32(ds, esp + 36, eax);
    if (eax >= 0x000003c0)
        goto loc_1ac90a;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 36);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233191);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aca1c;
loc_1ac90a: // 0160:1ac90a
    ebp = edi + -3;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1ac995;
    eax = esi + -2;
    memoryASet32(ds, esp + 40, eax);
    if (eax >= 0x000003c0)
        goto loc_1ac995;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 40);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = 0;
    dx = memoryAGet16(ds, 0x39ef86);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233190);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aca1c;
loc_1ac995: // 0160:1ac995
    ebp = edi + -3;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1aca24;
    eax = esi + -3;
    memoryASet32(ds, esp + 8, eax);
    if (eax >= 0x000003c0)
        goto loc_1aca24;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = 0;
    dx = memoryAGet16(ds, 0x39ef86);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233189);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aca24;
loc_1aca1c: // 0160:1aca1c
    if (stop("postCondition"))
        goto loc_1acbd3;
loc_1aca24: // 0160:1aca24
    ebp = edi + -3;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1acaaf;
    eax = esi + 1;
    memoryASet32(ds, esp + 24, eax);
    if (eax >= 0x000003c0)
        goto loc_1acaaf;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 24);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233193);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1acbcf;
loc_1acaaf: // 0160:1acaaf
    ebp = edi + -3;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1acb3f;
    eax = esi + 2;
    memoryASet32(ds, esp + 28, eax);
    if (eax >= 0x000003c0)
        goto loc_1acb3f;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233194);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1acbcf;
loc_1acb3f: // 0160:1acb3f
    ebp = edi + -3;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1acbf9;
    eax = esi + 3;
    memoryASet32(ds, esp + 12, eax);
    if (eax >= 0x000003c0)
        goto loc_1acbf9;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 12);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233195);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1acbf9;
loc_1acbcf: // 0160:1acbcf
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1acbf9;
loc_1acbd3: // 0160:1acbd3
    edx = ecx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ecx = eax;
    memoryASet32(ds, esp + 48, 0x00000001);
loc_1acbf9: // 0160:1acbf9
    if (memoryAGet32(ds, esp + 48) != 0x00000000)
        goto loc_1acec4;
    ebp = edi + 1;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1acca0;
    eax = esi + -3;
    memoryASet32(ds, esp + 4, eax);
    if (eax >= 0x000003c0)
        goto loc_1acca0;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233189);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1acca0;
    if (stop("postCondition"))
        goto loc_1acca0;
    if (stop("postCondition"))
        goto loc_1ace60;
loc_1acca0: // 0160:1acca0
    ebp = edi + 1;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1acd3c;
    eax = esi + 3;
    memoryASet32(ds, esp + 16, eax);
    if (eax >= 0x000003c0)
        goto loc_1acd3c;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233195);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1acd3c;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1acd3c;
    if (stop("postCondition"))
        goto loc_1ace60;
loc_1acd3c: // 0160:1acd3c
    ebp = edi + -4;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1acdd8;
    eax = esi + -3;
    memoryASet32(ds, esp + 32, eax);
    if (eax >= 0x000003c0)
        goto loc_1acdd8;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 32);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3233189);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1acdd8;
    if (stop("postCondition"))
        goto loc_1acdd8;
    if (stop("postCondition"))
        goto loc_1ace60;
loc_1acdd8: // 0160:1acdd8
    edi -= 0x00000004;
    if ((int32_t)(edi & edi) <= 0)
        goto loc_1acec4;
    ebp = esi + 3;
    if (ebp >= 0x000003c0)
        goto loc_1acec4;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = ebp;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = ebp;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet32(ds, esp);
    eax += eax;
    eax += ebp;
    edx = 0;
    dx = memoryAGet16(ds, eax + 2332680);
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = edi;
    eax <<= 4;
    eax -= edi;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 3233195);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1acec4;
    if ((int32_t)(ecx & ecx) <= 0)
        goto loc_1acec4;
    if (stop("postCondition"))
        goto loc_1acec4;
loc_1ace60: // 0160:1ace60
    ecx = -ecx;
    edx = ecx;
    edx <<= 4;
    edx -= ecx;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = ebx;
    edx = -edx;
    ecx = eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    eax = 0x00000001;
    edx = memoryAGet32(ds, esp + 68);
    memoryASet32(ds, esp + 48, eax);
    if (!edx)
        goto loc_1acec4;
    esi = 0x00000003;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = eax;
loc_1acec4: // 0160:1acec4
    if (memoryAGet32(ds, esp + 48) != 0x00000000)
        goto loc_1acf05;
    edx = ecx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = ebx;
    edx = -edx;
    ecx = eax;
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
loc_1acf05: // 0160:1acf05
    if (ebx)
        goto loc_1acf1e;
    edx = ecx * 0x000000e6;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = eax;
loc_1acf1e: // 0160:1acf1e
    eax = ecx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_1acf2c;
    ecx = 0;
loc_1acf2c: // 0160:1acf2c
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, eax, ecx);
    eax = memoryAGet32(ds, esp + 44);
    memoryASet32(ds, eax, ebx);
    esp += 0x00000034;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1acf41() // 0160:1acf41 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    push32(0x00000000);
    ebx = 0x00000038;
    edx = edi + -24;
    ecx = memoryAGet32(ds, eax + 3792114);
    eax = esi + -12;
    edx <<= 9;
    eax <<= 9;
    sub_1abac7();
    edx = edi;
    eax = esi;
    edx <<= 9;
    eax <<= 9;
    sub_1abcdb();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_below", "0160:1acf83");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1acf85() // 0160:1acf85 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    push32(0x0000000a);
    ecx = 0x0000001e;
    ebx = 0x00000017;
    edx -= 0x00000018;
    eax -= 0x0000000c;
    edx <<= 9;
    eax <<= 9;
    sub_1abac7();
    edx = edi;
    eax = esi;
    edx <<= 9;
    eax <<= 9;
    sub_1abc81();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_below", "0160:1acfbc");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1acfbe() // 0160:1acfbe +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 3792082, esi);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792062, esi);
    eax = 0x00000001;
    memoryASet32(ds, 0x39eff4, esi);
    esi = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f234, eax);
    eax = esi * 0x000000ac;
    push32(0x00000002);
    edx -= 0x00000018;
    ecx = memoryAGet32(ds, eax + 3792114);
    eax = ebx + -24;
    edx <<= 9;
    ebx = 0x0000004b;
    eax <<= 9;
    sub_1abac7();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_below", "0160:1ad021");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1ad023() // 0160:1ad023 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ebx = 0;
    edi = eax;
    esi = memoryAGet32(ds, eax + 3795078);
    ebp = memoryAGet32(ds, eax + 3795082);
loc_1ad043: // 0160:1ad043
    edx = memoryAGet32(ds, ebx + 3792026);
    if (!edx)
        goto loc_1ad096;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 3792030);
    edx -= ebp;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul ecx * ecx");
    stop("imul eax * eax");
    eax += ecx;
    if ((int32_t)eax >= (int32_t)0x00002710)
        goto loc_1ad096;
    eax = memoryAGet32(ds, edi + 3795106);
    eax -= 0x00000021;
    memoryASet32(ds, 0x3be65c, esi);
    memoryASet32(ds, 0x39f1d8, eax);
loc_1ad096: // 0160:1ad096
    ebx += 0x000000ac;
    if (ebx != 0x00000ac0)
        goto loc_1ad043;
    goto loc_1afe30;
    // gap 11655 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ad0a9() // 0160:1ad0a9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    edx = memoryAGet32(ds, 0x39f1d8);
    if (!edx)
        goto loc_1ad13a;
    ebx = edx + -1;
    memoryASet32(ds, 0x39f1d8, ebx);
    if (ebx)
        goto loc_1ad13a;
    edx = 0x00000002;
    eax = 0;
    sub_1a9cc8();
    ecx = eax;
    if (eax)
        goto loc_1ad0fa;
    eax = memoryAGet32(ds, 0x3be65c);
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000010;
    sub_1b9c1d();
loc_1ad0fa: // 0160:1ad0fa
    if (ecx != 0x00000001)
        goto loc_1ad11a;
    eax = memoryAGet32(ds, 0x3be65c);
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000017;
    sub_1b9c1d();
loc_1ad11a: // 0160:1ad11a
    if (ecx != 0x00000002)
        goto loc_1ad13a;
    eax = memoryAGet32(ds, 0x3be65c);
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x0000001f;
    sub_1b9c1d();
loc_1ad13a: // 0160:1ad13a
    edi = memoryAGet32(ds, 0x39e886);
    ebp = 0;
    esi = 0;
    if (!edi)
        goto loc_1ad604;
    eax = memoryAGet32(ds, 0x39e88a);
    memoryASet32(ds, 0x39e892, eax);
    eax = memoryAGet32(ds, 0x39e8a6);
    memoryASet32(ds, 0x39e88e, edi);
    if (eax == 0x0000000b)
        goto loc_1ad174;
    eax = memoryAGet32(ds, 0x39e896);
    edx = edi + eax;
    memoryASet32(ds, 0x39e886, edx);
loc_1ad174: // 0160:1ad174
    eax = memoryAGet32(ds, esi + 3795098);
    ebx = memoryAGet32(ds, esi + 3795082);
    ebx += eax;
    ecx = memoryAGet32(ds, 0x1dfbc8);
    memoryASet32(ds, esi + 3795082, ebx);
    if (!ecx)
        goto loc_1ad1a0;
    ecx = memoryAGet32(ds, 0x39f078);
    memoryASet32(ds, esi + 3795098, memoryAGet32(ds, esi + 3795098) + ecx);
    goto loc_1ad1d1;
loc_1ad1a0: // 0160:1ad1a0
    edi = memoryAGet32(ds, esi + 3795098);
    if ((int32_t)edi >= (int32_t)0x00004000)
        goto loc_1ad1d1;
    if (edi)
        goto loc_1ad1bb;
    if (memoryAGet32(ds, esi + 3795094) == 0x00000000)
        goto loc_1ad1d1;
loc_1ad1bb: // 0160:1ad1bb
    ebx = memoryAGet32(ds, 0x39f078);
    eax = memoryAGet32(ds, esi + 3795098);
    eax += ebx;
    al |= 0x01;
    memoryASet32(ds, esi + 3795098, eax);
loc_1ad1d1: // 0160:1ad1d1
    eax = memoryAGet32(ds, esi + 3795078);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 3795082);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 16, eax);
    eax = memoryAGet32(ds, esi + 3795086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 3795106, memoryAGet32(ds, esi + 3795106) - 1);
    edi = eax;
    eax = memoryAGet32(ds, esi + 3795090);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 24, eax);
    if (memoryAGet32(ds, esi + 3795110) != 0x0000000b)
        goto loc_1ad2ef;
    eax = memoryAGet32(ds, esi + 3795106);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = 0x00000008;
    eax += eax;
    ecx -= eax;
    eax = memoryAGet32(ds, esi + 3795106);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax &= 0x00000001;
    ecx += eax;
    if (memoryAGet(ds, esi + 3795106) & 0x0f)
        goto loc_1ad297;
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x00000030;
    sub_19ceb7();
    edx = eax;
    eax = 0x0000001d;
    sub_1b9c1d();
loc_1ad297: // 0160:1ad297
    if (stop("postCondition"))
        goto loc_1ad29e;
    ecx += 0x00000002;
loc_1ad29e: // 0160:1ad29e
    eax = memoryAGet32(ds, esi + 3795094);
    ecx <<= 4;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1ad2b3;
    ecx += 0x0027db28;
    goto loc_1ad2b9;
loc_1ad2b3: // 0160:1ad2b3
    ecx += 0x002e8868;
loc_1ad2b9: // 0160:1ad2b9
    memoryASet32(ds, esi + 3795102, ecx);
    edx = 0x00000032;
    eax = esp;
    ebx = memoryAGet32(ds, esp + 24);
    push32(eax);
    eax = esp + 8;
    ecx = edi;
    push32(eax);
    memoryASet32(ds, 0x39f230, edx);
    edx = esp + 28;
loc_1ad2dc: // 0160:1ad2dc
    push32(ebx);
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = esp + 28;
    sub_1aad07();
    edx = eax;
    goto loc_1ad325;
loc_1ad2ef: // 0160:1ad2ef
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esi + 3795098);
    ebx = memoryAGet32(ds, esi + 3795094);
    sub_1ab614();
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x00000008)
        goto loc_1ad323;
    eax = esp;
    push32(eax);
    eax = esp + 8;
    ebx = memoryAGet32(ds, esp + 28);
    push32(eax);
    edx = esp + 28;
    ecx = edi;
    goto loc_1ad2dc;
loc_1ad323: // 0160:1ad323
    edx = 0;
loc_1ad325: // 0160:1ad325
    if (memoryAGet32(ds, 0x39f1d8) != 0x00000000)
        goto loc_1ad362;
    if (memoryAGet32(ds, 0x3be65c) != 0x00000000)
        goto loc_1ad362;
    if (memoryAGet32(ds, esi + 3795094) != 0x00000000)
        goto loc_1ad362;
    if (memoryAGet32(ds, esi + 3795098) != 0x00000000)
        goto loc_1ad362;
    if ((int32_t)memoryAGet32(ds, esi + 3795106) <= (int32_t)0x00000025)
        goto loc_1ad362;
    if (memoryAGet32(ds, esi + 3795110) != 0x00000004)
        goto loc_1ad362;
    eax = ebp;
    sub_1ad023();
loc_1ad362: // 0160:1ad362
    eax = memoryAGet32(ds, 0x39f138);
    if (!eax)
        goto loc_1ad3d6;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1ad38a;
    edi = eax + -1;
    eax = 0x00286cf8;
    memoryASet32(ds, 0x39f138, edi);
    ebx = 0;
    memoryASet32(ds, esi + 3795102, eax);
    ecx = 0xffffffff;
    goto loc_1ad3aa;
loc_1ad38a: // 0160:1ad38a
    if (stop("postCondition"))
        goto loc_1ad3b6;
    edi = eax + 1;
    eax = 0x00286d00;
    memoryASet32(ds, 0x39f138, edi);
    ebx = 0xffffffff;
    memoryASet32(ds, esi + 3795102, eax);
    ecx = 0x00000001;
loc_1ad3aa: // 0160:1ad3aa
    memoryASet32(ds, 0x39f130, ebx);
    memoryASet32(ds, 0x39f134, ecx);
loc_1ad3b6: // 0160:1ad3b6
    edi = memoryAGet32(ds, 0x39f138);
    if (edi)
        goto loc_1ad3d6;
    memoryASet32(ds, esi + 3795102, 0x00286cd8);
    memoryASet32(ds, 0x39f130, edi);
    memoryASet32(ds, 0x39f134, edi);
loc_1ad3d6: // 0160:1ad3d6
    if (!edx)
        goto loc_1ad4ca;
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    memoryASet32(ds, esi + 3795078, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx = esp + 8;
    eax <<= 9;
    ebx = esp + 12;
    memoryASet32(ds, esi + 3795082, eax);
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esi + 3795094);
    edi = memoryAGet32(ds, 0x39f0b8);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3795098);
    push32(edi);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_1ac6c2();
    if (memoryAGet32(ds, esi + 3795110) != 0x0000000b)
        goto loc_1ad443;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    goto loc_1ad4c4;
loc_1ad443: // 0160:1ad443
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esi + 3795078);
    ebx = memoryAGet32(ds, esi + 3795082);
    edx += eax;
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, esi + 3795078, edx);
    ebx += eax;
    ecx = memoryAGet32(ds, esi + 3795110);
    memoryASet32(ds, esi + 3795082, ebx);
    if (ecx != 0x00000004)
        goto loc_1ad4b6;
    edi = memoryAGet32(ds, esp + 12);
    if (edi == memoryAGet32(ds, esi + 3795094))
        goto loc_1ad492;
    eax = edi;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1ad492;
    memoryASet32(ds, 0x39f138, ecx);
loc_1ad492: // 0160:1ad492
    edx = memoryAGet32(ds, esp + 8);
    if (edx == memoryAGet32(ds, esi + 3795098))
        goto loc_1ad4b6;
    eax = edx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1ad4b6;
    memoryASet32(ds, 0x39f138, 0xfffffffc);
loc_1ad4b6: // 0160:1ad4b6
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esi + 3795094, eax);
    eax = memoryAGet32(ds, esp + 8);
loc_1ad4c4: // 0160:1ad4c4
    memoryASet32(ds, esi + 3795098, eax);
loc_1ad4ca: // 0160:1ad4ca
    if ((int32_t)memoryAGet32(ds, esi + 3795106) > (int32_t)0x00000000)
        goto loc_1ad551;
    edi = memoryAGet32(ds, esi + 3795110);
    if (edi != 0x00000036)
        goto loc_1ad4f1;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_1acf41();
    goto loc_1ad549;
loc_1ad4f1: // 0160:1ad4f1
    if (edi != 0x00000024)
        goto loc_1ad505;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_1acf85();
    goto loc_1ad549;
loc_1ad505: // 0160:1ad505
    if (edi != 0x0000000b)
        goto loc_1ad519;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_1acfbe();
    goto loc_1ad549;
loc_1ad519: // 0160:1ad519
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 16);
    push32(0x00000005);
    edx -= 0x00000018;
    ecx = memoryAGet32(ds, eax + 3792114);
    eax = memoryAGet32(ds, esp + 24);
    edx <<= 9;
    eax -= 0x00000010;
    ebx = 0x0000002d;
    eax <<= 9;
    sub_1abac7();
loc_1ad549: // 0160:1ad549
    ecx = 0;
    memoryASet32(ds, esi + 3795078, ecx);
loc_1ad551: // 0160:1ad551
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_1ad569;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_1ad604;
loc_1ad569: // 0160:1ad569
    edx = memoryAGet32(ds, esi + 3795110);
    if (edx == 0x00000004)
        goto loc_1ad579;
    if (edx != 0x00000024)
        goto loc_1ad5a3;
loc_1ad579: // 0160:1ad579
    edx = 0x00000004;
    eax = 0;
    sub_1a9cc8();
    if (eax)
        goto loc_1ad5a3;
    eax = ebp;
    ebx = 0x00000080;
    sub_19ce55();
    edx = eax;
    eax = 0x00000029;
    sub_1b9c1d();
    goto loc_1ad5be;
loc_1ad5a3: // 0160:1ad5a3
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_1ad5be;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_1aa77b();
loc_1ad5be: // 0160:1ad5be
    edi = 0;
    ebp = memoryAGet32(ds, esi + 3795110);
    memoryASet32(ds, esi + 3795078, edi);
    if (ebp != 0x0000000b)
        goto loc_1ad604;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792082, edi);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3792062, edi);
    edi = 0x00000001;
    memoryASet32(ds, 0x39eff4, ebx);
    memoryASet32(ds, 0x39f234, edi);
loc_1ad604: // 0160:1ad604
    esp += 0x0000001c;
    goto loc_1afe30;
    // gap 10276 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ad60c() // 0160:1ad60c +long
{
    esp -= 4;
    goto loc_1ad60c;
loc_1abe65: // 0160:1abe65
    sub_19cb74();
    goto loc_1afe31;
    // gap 6045 bytes
loc_1ad60c: // 0160:1ad60c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x39e886);
    ebx = 0;
    if (!edx)
        goto loc_1afe31;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, 0x39e8a6);
    ecx = eax;
    if (esi != 0x0000000b)
        goto loc_1ad676;
    edi = memoryAGet32(ds, 0x39e896);
    esi = eax;
    if (stop("postCondition"))
        goto loc_1ad64a;
    esi = eax + -14;
loc_1ad64a: // 0160:1ad64a
    eax = memoryAGet32(ds, ebx + 3795082);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x0000000d);
    edx = eax + -11;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, ebx + 3795102);
    ebx = edx;
    edx = esi;
    goto loc_1abe65;
loc_1ad676: // 0160:1ad676
    eax = memoryAGet32(ds, 0x39e88a);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000006);
    ebx = memoryAGet32(ds, 0x39f134);
    eax -= 0x00000003;
    edx = memoryAGet32(ds, 0x39f130);
    ebx += eax;
    edx += ecx;
    ecx = 0x00000006;
    eax = memoryAGet32(ds, 0x39e89e);
    goto loc_1abe65;
    // gap 10117 bytes
loc_1afe31: // 0160:1afe31
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ad6ac() // 0160:1ad6ac +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edx = memoryAGet32(ds, 0x39e742);
    ecx = 0;
    if (edx)
        goto loc_1afe30;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792034);
    memoryASet32(ds, 0x39e742, edx);
    edx = memoryAGet32(ds, eax + 3792038);
    edx -= 0x00000a00;
    memoryASet32(ds, 0x39e746, edx);
    if ((int32_t)memoryAGet32(ds, eax + 3792050) <= (int32_t)0x00000000)
        goto loc_1ad701;
    memoryASet32(ds, 0x39e742, memoryAGet32(ds, 0x39e742) + 0x00000600);
    goto loc_1ad70b;
loc_1ad701: // 0160:1ad701
    memoryASet32(ds, 0x39e742, memoryAGet32(ds, 0x39e742) - 0x00000a00);
loc_1ad70b: // 0160:1ad70b
    edx = memoryAGet32(ds, 0x39efb0);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx <<= 10;
    edi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    ebx <<= 2;
    memoryASet32(ds, ebx + 3794754, memoryAGet32(ds, ebx + 3794754) + eax);
    edx = memoryAGet32(ds, 0x39efb4);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 10;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    memoryASet32(ds, ebx + 3794782, esi);
    ebp = 0x00000020;
    edi = memoryAGet32(ds, ebx + 3794758);
    memoryASet32(ds, ebx + 3794786, ebp);
    edi -= eax;
    memoryASet32(ds, ebx + 3794758, edi);
    if (esi < 0x00000002)
        goto loc_1ad797;
    if (esi <= 0x00000002)
        goto loc_1ad855;
    if (esi < 0x00000022)
        goto loc_1afe30;
    if (esi <= 0x00000022)
        goto loc_1ada72;
    if (esi == 0x00000038)
        goto loc_1ad99f;
    goto loc_1afe30;
loc_1ad797: // 0160:1ad797
    if (stop("postCondition"))
        goto loc_1ad91d;
    edx = 0x00287ea8;
    esi = memoryAGet32(ds, 0x1dfbc8);
    memoryASet32(ds, ebx + 3794778, edx);
    if (!esi)
        goto loc_1ad7c0;
    eax = ecx;
    sub_1b7a70();
    goto loc_1ad846;
loc_1ad7c0: // 0160:1ad7c0
    edx = memoryAGet32(ds, 0x39efac);
    edi = memoryAGet32(ds, 0x39efb0);
    edx -= 0x0000000f;
    stop("imul edx * edi");
    edx = edx * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 3794770, eax);
    eax = memoryAGet32(ds, 0x39efac);
    ebp = memoryAGet32(ds, 0x39efb4);
    eax -= 0x0000000f;
    stop("imul eax * ebp");
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = 0x00000003;
    edx = memoryAGet32(ds, ebx + 3794770);
    eax = -eax;
    edx += edx;
    memoryASet32(ds, ebx + 3794774, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 3794754, memoryAGet32(ds, ebx + 3794754) - eax);
    edx = memoryAGet32(ds, ebx + 3794774);
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 3794758, memoryAGet32(ds, ebx + 3794758) - eax);
loc_1ad846: // 0160:1ad846
    memoryASet32(ds, 0x39f1c4, 0x0000004b);
    goto loc_1afe30;
loc_1ad855: // 0160:1ad855
    ecx = memoryAGet32(ds, ebx + 3794758);
    esi = 0x00287ea8;
    ecx -= 0x00000400;
    memoryASet32(ds, ebx + 3794778, esi);
    memoryASet32(ds, ebx + 3794758, ecx);
    eax = memoryAGet32(ds, 0x39efac);
    edi = memoryAGet32(ds, 0x39efb0);
    eax -= 0x0000000f;
    stop("imul eax * edi");
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 3794770, eax);
    edx = memoryAGet32(ds, 0x39efac);
    ebp = memoryAGet32(ds, 0x39efb4);
    edx -= 0x0000000f;
    stop("imul edx * ebp");
    edx = edx * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax = -eax;
    edx = 0x00000001;
    memoryASet32(ds, ebx + 3794774, eax);
    eax = 0x0000004b;
    memoryASet32(ds, 0x39f070, edx);
    memoryASet32(ds, 0x39f1c4, eax);
    eax = memoryAGet32(ds, ebx + 3794770);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = memoryAGet32(ds, ebx + 3794754);
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 3794774);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = memoryAGet32(ds, ebx + 3794758);
    memoryASet32(ds, ebx + 3794754, ecx);
    esi -= eax;
    memoryASet32(ds, ebx + 3794758, esi);
    goto loc_1afe30;
loc_1ad91d: // 0160:1ad91d
    edx = memoryAGet32(ds, 0x39efb0);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 4;
    memoryASet32(ds, ebx + 3794770, eax);
    edx = memoryAGet32(ds, 0x39efb4);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    edi = memoryAGet32(ds, ebx + 3794758);
    eax += edx;
    edi += 0x00000200;
    eax <<= 4;
    memoryASet32(ds, ebx + 3794758, edi);
    eax = -eax;
    ebp = memoryAGet32(ds, 0x1dfbc8);
    memoryASet32(ds, ebx + 3794774, eax);
    if (!ebp)
        goto loc_1ad978;
    eax = ecx;
    sub_1b7b0e();
loc_1ad978: // 0160:1ad978
    memoryASet32(ds, 0x39f1c4, 0x00000018);
    eax = ecx;
    ebx = 0x000000ff;
loc_1ad989: // 0160:1ad989
    sub_19ce55();
    edx = eax;
    eax = 0x0000000d;
    sub_1b9c1d();
    goto loc_1afe30;
loc_1ad99f: // 0160:1ad99f
    memoryASet32(ds, ebx + 3794778, 0x00286cd8);
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = 0;
    ebx = memoryAGet32(ds, ebx + 3792050);
    memoryASet32(ds, 0x1df9ec, eax);
    if (ebx)
        goto loc_1ad9c9;
    ebx = 0xffffffff;
loc_1ad9c9: // 0160:1ad9c9
    eax = memoryAGet32(ds, 0x39efb8);
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax += eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x39efb4, eax);
    eax = memoryAGet32(ds, 0x39efb8);
    eax += 0x00000040;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax += eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    stop("imul eax * ebx");
    ebx = eax;
    ebx <<= 2;
    ebx += eax;
    ebx += ebx;
    memoryASet32(ds, 0x39efb0, eax);
    eax = ebx;
    ebx <<= 4;
    ebx -= eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    edx = memoryAGet32(ds, 0x39efb4);
    ebx = edx;
    ebx <<= 2;
    ebx += edx;
    ebx += ebx;
    edx = ebx;
    ebx <<= 4;
    ebx -= edx;
    edx = ebx;
    edx = -edx;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    eax = ecx;
    ebx = 0x00000020;
    goto loc_1ad989;
loc_1ada72: // 0160:1ada72
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792034);
    memoryASet32(ds, ebx + 3794754, eax);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792050) <= (int32_t)0x00000000)
        goto loc_1adaa7;
    memoryASet32(ds, ebx + 3794754, memoryAGet32(ds, ebx + 3794754) + 0x00000600);
    goto loc_1adab1;
loc_1adaa7: // 0160:1adaa7
    memoryASet32(ds, ebx + 3794754, memoryAGet32(ds, ebx + 3794754) - 0x00000a00);
loc_1adab1: // 0160:1adab1
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    edx = memoryAGet32(ds, eax + 3792050);
    ebx <<= 2;
    if (stop("postCondition"))
        goto loc_1adaf9;
    eax = 0x00291068;
    esi = 0x00000600;
    edx = memoryAGet32(ds, ebx + 3794754);
    memoryASet32(ds, ebx + 3794778, eax);
    edx -= 0x00000400;
    memoryASet32(ds, ebx + 3794770, esi);
    memoryASet32(ds, ebx + 3794754, edx);
    goto loc_1adb21;
loc_1adaf9: // 0160:1adaf9
    esi = 0x00290528;
    ebp = 0xfffffa00;
    edi = memoryAGet32(ds, ebx + 3794754);
    memoryASet32(ds, ebx + 3794778, esi);
    edi += 0x00000400;
    memoryASet32(ds, ebx + 3794770, ebp);
    memoryASet32(ds, ebx + 3794754, edi);
loc_1adb21: // 0160:1adb21
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, stop("GetOpAddress"), 0x00000014);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3792038);
    edx -= 0x00000600;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = 0;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    goto loc_1afe30;
    // gap 8914 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1adb5e() // 0160:1adb5e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = 0;
    goto loc_1adcfe;
loc_1adb6b: // 0160:1adb6b
    ebx = ecx * 0x00000024;
    if (memoryAGet32(ds, ebx + 3794754) != 0x00000000)
        goto loc_1adcfd;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792034);
    memoryASet32(ds, ebx + 3794754, eax);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792038);
    eax -= 0x00000a00;
    memoryASet32(ds, ebx + 3794758, eax);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792050) <= (int32_t)0x00000000)
        goto loc_1adbcb;
    memoryASet32(ds, ebx + 3794754, memoryAGet32(ds, ebx + 3794754) + 0x00000600);
    goto loc_1adbd5;
loc_1adbcb: // 0160:1adbcb
    memoryASet32(ds, ebx + 3794754, memoryAGet32(ds, ebx + 3794754) - 0x00000a00);
loc_1adbd5: // 0160:1adbd5
    edx = memoryAGet32(ds, 0x39efb0) * 0x00000c00;
    esi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = ecx * 0x00000024;
    memoryASet32(ds, ebx + 3794754, memoryAGet32(ds, ebx + 3794754) + eax);
    edx = memoryAGet32(ds, 0x39efb4) * 0x00000c00;
    edx = -edx;
    esi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edi = memoryAGet32(ds, ebx + 3794758);
    edi += eax;
    ebp = edi + 512;
    memoryASet32(ds, ebx + 3794758, ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3792074);
    esi = 0;
    memoryASet32(ds, ebx + 3794782, eax);
    memoryASet32(ds, ebx + 3794786, esi);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000027)
        goto loc_1adc5d;
    edx = 0x00000002;
    eax = 0xfffffffe;
    goto loc_1adc67;
loc_1adc5d: // 0160:1adc5d
    edx = 0x00000004;
    eax = 0xfffffffc;
loc_1adc67: // 0160:1adc67
    sub_1a9cc8();
    ebx = eax;
    eax = memoryAGet32(ds, 0x39efb8);
    eax += ebx;
    eax &= 0x000000ff;
    esi = memoryAGet32(ds, stop("GetOpAddress"));
    edx = esi * 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    esi = eax;
    eax = memoryAGet32(ds, 0x39efb8);
    eax += ebx;
    eax += 0x00000040;
    eax &= 0x000000ff;
    edi = memoryAGet32(ds, stop("GetOpAddress"));
    edx = edi * 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000) & stop("xxx");
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    stop("imul eax * memoryAGet32(ds, edx + 3792050)");
    ebx = ecx * 0x00000024;
    eax = eax * 0x00000190;
    memoryASet32(ds, ebx + 3794770, eax);
    eax = esi * 0x00000190;
    eax = -eax;
    esi = memoryAGet32(ds, 0x1dfbc8);
    memoryASet32(ds, ebx + 3794774, eax);
    if (!esi)
        goto loc_1adcf8;
    eax = ecx;
    sub_1b7b0e();
loc_1adcf8: // 0160:1adcf8
    ecx = 0x00000008;
loc_1adcfd: // 0160:1adcfd
    ecx++;
loc_1adcfe: // 0160:1adcfe
    if ((int32_t)ecx < (int32_t)0x00000008)
        goto loc_1adb6b;
    goto loc_1afe30;
    // gap 8484 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1add0c() // 0160:1add0c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x39f04c);
    if (!edx)
        goto loc_1addb8;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ecx = edx + -1;
    memoryASet32(ds, 0x39f04c, ecx);
    if (memoryAGet32(ds, eax + 3792074) != 0x00000027)
        goto loc_1add60;
    ebx = 0x00000006;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_1add51;
    sub_1adb5e();
loc_1add51: // 0160:1add51
    eax = memoryAGet32(ds, 0x39f04c);
    eax &= 0x00000003;
    if (eax != 0x00000003)
        goto loc_1adda8;
    goto loc_1add8d;
loc_1add60: // 0160:1add60
    ebx = 0x00000003;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_1add77;
    sub_1adb5e();
loc_1add77: // 0160:1add77
    eax = memoryAGet32(ds, 0x39f04c);
    edx = eax;
    ebx = 0x00000002;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx != 0x00000001)
        goto loc_1adda8;
loc_1add8d: // 0160:1add8d
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x00000015;
    sub_1b9c1d();
loc_1adda8: // 0160:1adda8
    edi = memoryAGet32(ds, 0x39f04c);
    if (edi)
        goto loc_1addb8;
    memoryASet32(ds, 0x39eff4, edi);
loc_1addb8: // 0160:1addb8
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1addbd() // 0160:1addbd +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0xfffff000;
    edx = ecx;
    ebx -= eax;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, ebx);
    ebx = 0xfffffe00;
    ebx -= eax;
    eax = memoryAGet32(ds, esp);
    esi = 0;
    eax += 0x00001400;
    ecx = 0;
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp + 20, ebx);
    eax += 0x00002000;
    ebx = 0;
    memoryASet32(ds, esp + 16, eax);
    goto loc_1adebe;
loc_1ade17: // 0160:1ade17
    edx = memoryAGet32(ds, ebx + 3792026);
    if (!edx)
        goto loc_1adeb7;
    if (esi == memoryAGet32(ds, 0x39ef98))
        goto loc_1adeb7;
    if (memoryAGet32(ds, ebx + 3792058) != 0x00000000)
        goto loc_1adeb7;
    if (memoryAGet32(ds, ebx + 3792006) != 0x00000000)
        goto loc_1adeb7;
    eax = edx;
    edx = memoryAGet32(ds, esp + 24);
    edi = memoryAGet32(ds, esp + 12);
    eax -= edx;
    ebp = memoryAGet32(ds, esp + 20);
    eax -= edi;
    edi = memoryAGet32(ds, ebx + 3792030);
    edx = memoryAGet32(ds, esp + 8);
    edi -= ebp;
    edi -= edx;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1ade87;
    edx = memoryAGet32(ds, esp + 16);
    ebp = ecx + 1;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1ade85;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1ade87;
loc_1ade85: // 0160:1ade85
    ecx = ebp;
loc_1ade87: // 0160:1ade87
    if (!ecx)
        goto loc_1adeb7;
    if ((int32_t)(edi & edi) <= 0)
        goto loc_1adea8;
    eax = memoryAGet32(ds, esp + 28);
    ebp = ecx + 1;
    if ((int32_t)edi < (int32_t)eax)
        goto loc_1adea6;
    eax = edi;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1adea8;
loc_1adea6: // 0160:1adea6
    ecx = ebp;
loc_1adea8: // 0160:1adea8
    if (ecx != 0x00000002)
        goto loc_1adeb5;
    memoryASet32(ds, 0x39efe0, esi);
    goto loc_1adeb7;
loc_1adeb5: // 0160:1adeb5
    ecx = 0;
loc_1adeb7: // 0160:1adeb7
    ebx += 0x000000ac;
    esi++;
loc_1adebe: // 0160:1adebe
    if ((int32_t)esi >= (int32_t)0x00000010)
        goto loc_1adecb;
    if (!ecx)
        goto loc_1ade17;
loc_1adecb: // 0160:1adecb
    eax = ecx;
    esp += 0x00000020;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1aded4() // 0160:1aded4 +long
{
    esp -= 4;
    goto loc_1aded4;
loc_1adecd: // 0160:1adecd
    esp += 0x00000020;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1aded4: // 0160:1aded4
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0xfffff000;
    edx = ecx;
    ebx -= eax;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, ebx);
    ebx = 0xfffffe00;
    esi = 0;
    ebx -= eax;
    eax = ecx + 5120;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 4);
    ebx = 0;
    eax += 0x00002000;
    ecx = 0;
    memoryASet32(ds, esp + 16, eax);
    goto loc_1adfc4;
loc_1adf2c: // 0160:1adf2c
    edx = memoryAGet32(ds, ecx + 3792026);
    if (!edx)
        goto loc_1adfbd;
    edi = memoryAGet32(ds, esp + 24);
    ebp = memoryAGet32(ds, esp + 12);
    eax = edx;
    edx = memoryAGet32(ds, esp + 20);
    eax -= edi;
    edi = memoryAGet32(ds, ecx + 3792030);
    eax -= ebp;
    ebp = memoryAGet32(ds, esp + 8);
    edi -= edx;
    edi -= ebp;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1adf76;
    edx = memoryAGet32(ds, esp + 16);
    ebp = ebx + 1;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1adf74;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1adf76;
loc_1adf74: // 0160:1adf74
    ebx = ebp;
loc_1adf76: // 0160:1adf76
    if (!ebx)
        goto loc_1adfbd;
    if ((int32_t)(edi & edi) <= 0)
        goto loc_1adf97;
    eax = memoryAGet32(ds, esp + 28);
    ebp = ebx + 1;
    if ((int32_t)edi < (int32_t)eax)
        goto loc_1adf95;
    eax = edi;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1adf97;
loc_1adf95: // 0160:1adf95
    ebx = ebp;
loc_1adf97: // 0160:1adf97
    if (ebx != 0x00000002)
        goto loc_1adfa4;
    memoryASet32(ds, 0x39efe0, esi);
    goto loc_1adfa6;
loc_1adfa4: // 0160:1adfa4
    ebx = 0;
loc_1adfa6: // 0160:1adfa6
    if (memoryAGet32(ds, 0x1dfa24) == 0x00000000)
        goto loc_1adfbd;
    if (!ebx)
        goto loc_1adfbd;
    if (esi == memoryAGet32(ds, 0x39ef98))
        goto loc_1adfbd;
    ebx = 0;
loc_1adfbd: // 0160:1adfbd
    ecx += 0x000000ac;
    esi++;
loc_1adfc4: // 0160:1adfc4
    if ((int32_t)esi >= (int32_t)0x00000010)
        goto loc_1adfd1;
    if (!ebx)
        goto loc_1adf2c;
loc_1adfd1: // 0160:1adfd1
    eax = ebx;
    goto loc_1adecd;
}
void sub_1ae085() // 0160:1ae085 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    ebx = eax;
    ebx <<= 3;
    ebx += eax;
    eax = memoryAGet32(ds, 0x39f078);
    memoryASet32(ds, stop("GetOpAddress"), memoryAGet32(ds, stop("GetOpAddress")) + eax);
    edx = memoryAGet32(ds, 0x39efcc);
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    edx <<= 9;
    esi = 0x0000004b;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = memoryAGet32(ds, stop("GetOpAddress"));
    esi += eax;
    eax = esi;
    memoryASet32(ds, stop("GetOpAddress"), esi);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    if (eax)
        goto loc_1ae0ed;
    ebx = 0x00000001;
loc_1ae0ed: // 0160:1ae0ed
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax <= (int32_t)0x00000004)
        goto loc_1ae10e;
    eax = 0x00000004;
loc_1ae10e: // 0160:1ae10e
    if ((int32_t)eax >= (int32_t)0xfffffffc)
        goto loc_1ae118;
    eax = 0xfffffffc;
loc_1ae118: // 0160:1ae118
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    if ((int32_t)memoryAGet32(ds, stop("GetOpAddress")) > (int32_t)0x00000000)
        goto loc_1ae12d;
    eax = -eax;
    goto loc_1ae130;
loc_1ae12d: // 0160:1ae12d
    eax += 0x00000008;
loc_1ae130: // 0160:1ae130
    eax &= 0x0000000f;
    edx = 0x00287ea8;
    eax <<= 4;
    edx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae150() // 0160:1ae150 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ebx = eax;
    ecx = edx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    esi = eax;
    eax = ecx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)esi <= (int32_t)eax)
        goto loc_1ae16d;
    eax = ebx;
    goto loc_1ae16f;
loc_1ae16d: // 0160:1ae16d
    eax = ecx;
loc_1ae16f: // 0160:1ae16f
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae178() // 0160:1ae178 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x00000028;
    ecx = eax;
    ebx = eax;
    ebx <<= 3;
    ebx += eax;
    ebx <<= 2;
    eax = memoryAGet32(ds, ebx + 3794754);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3794758);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x39f070);
    edx++;
    memoryASet32(ds, 0x39f070, edx);
    if ((int32_t)edx <= (int32_t)0x00000019)
        goto loc_1ae3a8;
    if ((int32_t)edx >= (int32_t)0x000000fa)
        goto loc_1ae3a8;
    fild32(memoryAGet32(ds, ebx + 3794770));
    edx = memoryAGet32(ds, 0x39f050);
    fmul32(memoryAGet32(ds, 0x1d2040));
    edx -= esi;
    memoryASet32(ds, esp + 32, fstp32());
    fild32(memoryAGet32(ds, ebx + 3794774));
    fmul32(memoryAGet32(ds, 0x1d2040));
    memoryASet32(ds, esp, edx);
    edx = memoryAGet32(ds, 0x39f054);
    memoryASet32(ds, esp + 4, fstp32());
    edx -= eax;
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 12, fstp32());
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp + 8, fstp32());
    fld32(memoryAGet32(ds, esp + 12));
    fmul80(st(0));
    fld32(memoryAGet32(ds, esp + 8));
    fmul80(st(0));
    faddp80(st(1));
    sub_1c7c02();
    memoryASet32(ds, esp, fistp32());
    eax = memoryAGet32(ds, esp);
    sub_1b39a9();
    memoryASet32(ds, esp, eax);
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp + 16, fstp32());
    if (!(memoryAGet32(ds, esp + 16) & 0x7fffffff))
        goto loc_1ae3bc;
    fld32(memoryAGet32(ds, 0x1d2044));
    stop("disassembly failed at 160:1ae255 fsub dword ptr [esp + 0x10]");
    stop("disassembly failed at 160:1ae259 fst dword ptr [esp + 0x24]");
    fcomp32(memoryAGet32(ds, 0x1d2048));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_1ae270;
    memoryASet32(ds, esp + 36, 0x43800000);
loc_1ae270: // 0160:1ae270
    fld32(memoryAGet32(ds, esp + 36));
    fcomp32(memoryAGet32(ds, 0x1d2044));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_1ae287;
    memoryASet32(ds, esp + 36, 0x44800000);
loc_1ae287: // 0160:1ae287
    fld32(memoryAGet32(ds, esp + 16));
    fmul32(memoryAGet32(ds, 0x1d2044));
    stop("disassembly failed at 160:1ae291 fdivr dword ptr [esp + 0x24]");
    memoryASet32(ds, esp + 36, fstp32());
    fld32(memoryAGet32(ds, esp + 12));
    fmul32(memoryAGet32(ds, esp + 36));
    fadd32(memoryAGet32(ds, esp + 32));
    memoryASet32(ds, esp + 20, fstp32());
    fld32(memoryAGet32(ds, esp + 8));
    fmul32(memoryAGet32(ds, esp + 36));
    eax = memoryAGet32(ds, esp + 20);
    fadd32(memoryAGet32(ds, esp + 4));
    memoryASet32(ds, esp + 32, eax);
    memoryASet32(ds, esp + 24, fstp32());
    fld32(memoryAGet32(ds, esp + 20));
    fcomp32(memoryAGet32(ds, 0x1d204c));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_1ae2da;
    memoryASet32(ds, esp + 32, 0xc1000000);
    goto loc_1ae2f1;
loc_1ae2da: // 0160:1ae2da
    fld32(memoryAGet32(ds, esp + 20));
    fcomp32(memoryAGet32(ds, 0x1d2050));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_1ae2f1;
    memoryASet32(ds, esp + 32, 0x41000000);
loc_1ae2f1: // 0160:1ae2f1
    fld32(memoryAGet32(ds, esp + 32));
    fcomp32(memoryAGet32(ds, esp + 20));
    ax = fnstsw();
    sahf();
    if (flags.zero)
        goto loc_1ae310;
    fld32(memoryAGet32(ds, esp + 32));
    fmul32(memoryAGet32(ds, esp + 24));
    fdiv32(memoryAGet32(ds, esp + 20));
    memoryASet32(ds, esp + 28, fstp32());
    goto loc_1ae365;
loc_1ae310: // 0160:1ae310
    eax = memoryAGet32(ds, esp + 24);
    fld32(memoryAGet32(ds, esp + 24));
    memoryASet32(ds, esp + 28, eax);
    fcomp32(memoryAGet32(ds, 0x1d204c));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_1ae331;
    memoryASet32(ds, esp + 28, 0xc1000000);
    goto loc_1ae348;
loc_1ae331: // 0160:1ae331
    fld32(memoryAGet32(ds, esp + 24));
    fcomp32(memoryAGet32(ds, 0x1d2050));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_1ae348;
    memoryASet32(ds, esp + 28, 0x41000000);
loc_1ae348: // 0160:1ae348
    fld32(memoryAGet32(ds, esp + 28));
    fcomp32(memoryAGet32(ds, esp + 24));
    ax = fnstsw();
    sahf();
    if (flags.zero)
        goto loc_1ae365;
    fld32(memoryAGet32(ds, esp + 28));
    fmul32(memoryAGet32(ds, esp + 20));
    fdiv32(memoryAGet32(ds, esp + 24));
    memoryASet32(ds, esp + 32, fstp32());
loc_1ae365: // 0160:1ae365
    fld32(memoryAGet32(ds, esp + 32));
    eax = ecx;
    fmul32(memoryAGet32(ds, 0x1d2054));
    eax <<= 3;
    sub_1c7c02();
    memoryASet32(ds, esp, fistp32());
    edx = ecx + eax;
    fld32(memoryAGet32(ds, esp + 28));
    eax = memoryAGet32(ds, esp);
    edx <<= 2;
    fmul32(memoryAGet32(ds, 0x1d2054));
    memoryASet32(ds, edx + 3794770, eax);
    sub_1c7c02();
    memoryASet32(ds, esp, fistp32());
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, edx + 3794774, eax);
    goto loc_1ae3bc;
loc_1ae3a8: // 0160:1ae3a8
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, 0x39f078);
    memoryASet32(ds, stop("GetOpAddress"), memoryAGet32(ds, stop("GetOpAddress")) + edx);
loc_1ae3bc: // 0160:1ae3bc
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    if (eax)
        goto loc_1ae3da;
    ebx = 0x00000001;
loc_1ae3da: // 0160:1ae3da
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax <= (int32_t)0x00000004)
        goto loc_1ae3fb;
    eax = 0x00000004;
loc_1ae3fb: // 0160:1ae3fb
    if ((int32_t)eax >= (int32_t)0xfffffffc)
        goto loc_1ae405;
    eax = 0xfffffffc;
loc_1ae405: // 0160:1ae405
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    if ((int32_t)memoryAGet32(ds, stop("GetOpAddress")) > (int32_t)0x00000000)
        goto loc_1ae41a;
    eax = -eax;
    goto loc_1ae41d;
loc_1ae41a: // 0160:1ae41a
    eax += 0x00000008;
loc_1ae41d: // 0160:1ae41d
    eax &= 0x0000000f;
    edx = 0x00287ea8;
    eax <<= 4;
    edx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    esp += 0x00000028;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae440() // 0160:1ae440 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1ae452;
    ecx = 0xffffffff;
    goto loc_1ae457;
loc_1ae452: // 0160:1ae452
    ecx = 0x00000001;
loc_1ae457: // 0160:1ae457
    edx = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0x268608, edx);
loc_1ae464: // 0160:1ae464
    edx = 0x00000600;
    memoryASet32(ds, ebx + 2152392, edi);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 2152396, esi);
    sub_1a9cc8();
    stop("imul eax * ecx");
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2152400, eax);
    eax = 0xfffffc00;
    sub_1a9cc8();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 2152404, eax);
    eax = 0;
    ebx += 0x00000012;
    sub_1a9cc8();
    al = memoryAGet(ds, stop("GetOpAddress"));
    memoryASet(ds, ebx + 2152390, al);
    ah = 0;
    memoryASet(ds, ebx + 2152391, ah);
    if (ebx != 0x000002f4)
        goto loc_1ae464;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ae4cd() // 0160:1ae4cd +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    sub_1add0c();
    edx = memoryAGet32(ds, 0x39f1c4);
    if ((int32_t)(edx & edx) <= 0)
        goto loc_1ae4ee;
    ebx = edx + -1;
    memoryASet32(ds, 0x39f1c4, ebx);
loc_1ae4ee: // 0160:1ae4ee
    edi = 0;
    esi = 0;
loc_1ae4f2: // 0160:1ae4f2
    ecx = memoryAGet32(ds, esi + 3794754);
    if (!ecx)
        goto loc_1aeb4a;
    eax = memoryAGet32(ds, esi + 3794758);
    memoryASet32(ds, esi + 3794766, eax);
    ebp = memoryAGet32(ds, esi + 3794754);
    edx = memoryAGet32(ds, esi + 3794758);
    eax = memoryAGet32(ds, esi + 3794770);
    memoryASet32(ds, esi + 3794762, ecx);
    ebp += eax;
    eax = memoryAGet32(ds, esi + 3794774);
    memoryASet32(ds, esi + 3794754, ebp);
    edx += eax;
    ebx = memoryAGet32(ds, esi + 3794782);
    memoryASet32(ds, esi + 3794758, edx);
    if (ebx)
        goto loc_1ae54d;
    eax = edi;
    sub_1ae085();
    goto loc_1ae559;
loc_1ae54d: // 0160:1ae54d
    if (ebx != 0x00000002)
        goto loc_1ae559;
    eax = edi;
    sub_1ae178();
loc_1ae559: // 0160:1ae559
    eax = memoryAGet32(ds, esi + 3794762);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi + 3794766);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 3794754);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3794758);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax--;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 3794786);
    eax--;
    edx = memoryAGet32(ds, esi + 3794782);
    memoryASet32(ds, esi + 3794786, eax);
    if (!edx)
        goto loc_1ae5d0;
    if (edx != 0x00000002)
        goto loc_1ae5f0;
loc_1ae5d0: // 0160:1ae5d0
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esi + 3794774);
    eax++;
    ebx = memoryAGet32(ds, esi + 3794770);
    memoryASet32(ds, esp + 8, eax);
    edx = eax;
    eax = memoryAGet32(ds, esp + 12);
    sub_1ab614();
loc_1ae5f0: // 0160:1ae5f0
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x00000010)
        goto loc_1ae637;
    ecx = esp;
    ebx = esp + 4;
    edx = esp + 8;
    eax = esp + 12;
    sub_1b7ace();
    memoryASet32(ds, esp + 16, eax);
    eax = esp;
    ebx = memoryAGet32(ds, esp + 20);
    push32(eax);
    eax = esp + 8;
    edx = esp + 16;
    push32(eax);
    ecx = ebp;
    eax = memoryAGet32(ds, 0x39ef98);
    push32(ebx);
    ebx = esp + 20;
    ebp = memoryAGet32(ds, esp + 28);
    sub_1aad07();
    ebp |= eax;
    goto loc_1ae656;
loc_1ae637: // 0160:1ae637
    ebx = memoryAGet32(ds, esi + 3794782);
    ebp = 0;
    if (ebx == 0x00000001)
        goto loc_1ae64e;
    if (ebx == 0x00000027)
        goto loc_1ae64e;
    if (ebx != 0x0000002f)
        goto loc_1ae656;
loc_1ae64e: // 0160:1ae64e
    edx = 0;
    memoryASet32(ds, esi + 3794754, edx);
loc_1ae656: // 0160:1ae656
    if (memoryAGet32(ds, esi + 3794782) != 0x00000022)
        goto loc_1ae782;
    ecx = 0x00001000;
    edx = memoryAGet32(ds, esi + 3794758);
    eax = memoryAGet32(ds, esi + 3794754);
    edx += 0x00000400;
    eax += 0x00000400;
    ebx = ecx;
    sub_1addbd();
    if (!eax)
        goto loc_1ae750;
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3792050);
    memoryASet32(ds, eax + 3792050, edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = memoryAGet32(ds, 0x39efe0);
    ebp = memoryAGet32(ds, eax + 3792050);
    eax = ebx * 0x000000ac;
    edx = ebp * 0x00000533;
    memoryASet32(ds, eax + 3792018, edx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792022, 0xfffffd00);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    memoryASet32(ds, eax + 3792030, memoryAGet32(ds, eax + 3792030) - 0x00000200);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, eax + 3792058, ebp);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, 0x39efe0);
    edx = memoryAGet32(ds, edx + 3792114);
    sub_1a31e0();
    edx = 0;
    memoryASet32(ds, esi + 3794754, edx);
    eax = memoryAGet32(ds, 0x39efe0);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000000b;
    sub_1b9c1d();
loc_1ae750: // 0160:1ae750
    ebx = 0x00000010;
    edx = memoryAGet32(ds, esi + 3794758);
    eax = memoryAGet32(ds, esi + 3794754);
    edx -= 0x00000400;
    eax -= 0x00000400;
    sub_1af790();
    if (memoryAGet32(ds, 0x39f0b4) == 0x00000000)
        goto loc_1ae782;
    ecx = 0;
    memoryASet32(ds, esi + 3794754, ecx);
loc_1ae782: // 0160:1ae782
    if (memoryAGet32(ds, esi + 3794782) != 0x00000038)
        goto loc_1ae888;
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3794754);
    memoryASet32(ds, 0x39f0c8, eax);
    eax = memoryAGet32(ds, esi + 3794758);
    memoryASet32(ds, 0x39f0cc, eax);
    edx = memoryAGet32(ds, 0x39f0c8);
    ecx = memoryAGet32(ds, ebx + 3792026);
    edx -= ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x39f0cc);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul ecx * ecx");
    stop("imul eax * eax");
    eax += ecx;
    if ((int32_t)eax > (int32_t)0x000057e4)
        goto loc_1ae81f;
    edx = memoryAGet32(ds, 0x39f0cc);
    if ((int32_t)edx < (int32_t)0x00000008)
        goto loc_1ae81f;
    if ((int32_t)edx > (int32_t)0x0002f400)
        goto loc_1ae81f;
    ecx = memoryAGet32(ds, 0x39f0c8);
    if ((int32_t)ecx > (int32_t)0x00078000)
        goto loc_1ae81f;
    if ((int32_t)ecx >= (int32_t)0x00000200)
        goto loc_1ae868;
loc_1ae81f: // 0160:1ae81f
    ebx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x39f060, ebx);
    edx = 0x00000019;
    memoryASet32(ds, esi + 3794754, ecx);
    memoryASet32(ds, 0x1df9f8, edx);
    memoryASet32(ds, 0x39f0c8, ecx);
    memoryASet32(ds, 0x39f0cc, ecx);
    memoryASet32(ds, 0x39f0c0, ecx);
    memoryASet32(ds, 0x39f0c4, ecx);
    memoryASet32(ds, 0x39f0bc, ecx);
    memoryASet32(ds, 0x39eff4, ebx);
    sub_19ede7();
    goto loc_1ae888;
loc_1ae868: // 0160:1ae868
    if (!ebp)
        goto loc_1ae888;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, 0x39f0c8, eax);
    eax = memoryAGet32(ds, esp);
    eax <<= 9;
    memoryASet32(ds, 0x39f0cc, eax);
    sub_1b1ed1();
loc_1ae888: // 0160:1ae888
    if (ebp)
        goto loc_1ae8a6;
    if (memoryAGet32(ds, esi + 3794782) != 0x00000022)
        goto loc_1aeac9;
    if (memoryAGet32(ds, esi + 3794786) != 0x00000000)
        goto loc_1aeac9;
loc_1ae8a6: // 0160:1ae8a6
    ebp = memoryAGet32(ds, esi + 3794782);
    if (ebp != 0x00000022)
        goto loc_1ae8fe;
    eax = memoryAGet32(ds, esp + 12);
    eax += 0x00000004;
    eax <<= 9;
    memoryASet32(ds, 0x39f010, eax);
    eax = memoryAGet32(ds, esp + 8);
    eax++;
    eax <<= 9;
    memoryASet32(ds, 0x39f014, eax);
    memoryASet32(ds, 0x39f018, 0x00000001);
    if ((int32_t)memoryAGet32(ds, esi + 3794770) <= (int32_t)0x00000000)
        goto loc_1ae8ef;
    memoryASet32(ds, 0x39f01c, 0x00291078);
    goto loc_1aeabb;
loc_1ae8ef: // 0160:1ae8ef
    memoryASet32(ds, 0x39f01c, 0x00290538);
    goto loc_1aeabb;
loc_1ae8fe: // 0160:1ae8fe
    if (ebp == 0x00000027)
        goto loc_1ae90c;
    if (ebp != 0x0000002f)
        goto loc_1ae9ad;
loc_1ae90c: // 0160:1ae90c
    if (memoryAGet32(ds, 0x39f04c) == 0x00000000)
        goto loc_1aeabb;
    if (memoryAGet32(ds, 0x39f07c) != 0x00000000)
        goto loc_1ae933;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, 0x39f07c, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x39f080, eax);
loc_1ae933: // 0160:1ae933
    ecx = 0;
    edx = memoryAGet32(ds, esp);
    memoryASet16(ds, 0x39ef86, cx);
    if ((int32_t)(edx & edx) <= 0)
        goto loc_1ae97a;
    ebx = memoryAGet32(ds, esp + 4);
    if (ebx >= 0x000003c0)
        goto loc_1ae97a;
    eax = edx * 0x000003c0;
    eax += ebx;
    al = memoryAGet(ds, eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1ae97a;
    eax = 0x00000001;
    goto loc_1ae97c;
loc_1ae97a: // 0160:1ae97a
    eax = 0;
loc_1ae97c: // 0160:1ae97c
    edx = 0x0000ffff;
    push32(eax);
    eax = memoryAGet32(ds, esp + 16);
    memoryASet16(ds, 0x39ef86, dx);
    edx = memoryAGet32(ds, esp + 12);
    eax <<= 9;
    ecx = memoryAGet32(ds, esi + 3794774);
    ebx = memoryAGet32(ds, esi + 3794770);
    edx <<= 9;
    sub_1b06e9();
    goto loc_1aeabb;
loc_1ae9ad: // 0160:1ae9ad
    if (ebp != 0x00000001)
        goto loc_1aea2f;
    edx = 0;
    ebp = memoryAGet32(ds, esp);
    memoryASet16(ds, 0x39ef86, dx);
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1ae9fd;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_1ae9fd;
    eax = ebp * 0x000003c0;
    eax += memoryAGet32(ds, esp + 4);
    al = memoryAGet(ds, eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1ae9fd;
    eax = 0x00000001;
    goto loc_1ae9ff;
loc_1ae9fd: // 0160:1ae9fd
    eax = 0;
loc_1ae9ff: // 0160:1ae9ff
    ebx = 0x0000ffff;
    edx = memoryAGet32(ds, esp);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, 0x39ef86, bx);
    edx <<= 9;
    eax <<= 9;
    ecx = memoryAGet32(ds, esi + 3794774);
    ebx = memoryAGet32(ds, esi + 3794770);
    sub_1b0578();
    goto loc_1aeabb;
loc_1aea2f: // 0160:1aea2f
    if (ebp != 0x00000038)
        goto loc_1aea4d;
    ebx = memoryAGet32(ds, esi + 3794770);
    edx = memoryAGet32(ds, esi + 3794766);
    eax = memoryAGet32(ds, esi + 3794762);
    sub_1ae440();
    goto loc_1aeabb;
loc_1aea4d: // 0160:1aea4d
    ebp = 0;
    memoryASet32(ds, 0x39f058, ebp);
    eax = memoryAGet32(ds, esi + 3794770);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000) & stop("xxx");
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    edx = memoryAGet32(ds, esp + 4);
    edx -= eax;
    eax = memoryAGet32(ds, esi + 3794774);
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000) & stop("xxx");
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    ebx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, 0x39ef98);
    ebx -= eax;
    eax = ecx * 0x000000ac;
    push32(ebp);
    memoryASet32(ds, esp + 4, ebx);
    edx = ebx + -24;
    ecx = memoryAGet32(ds, eax + 3792114);
    eax = memoryAGet32(ds, esp + 8);
    ebx = 0x0000002d;
    eax -= 0x00000010;
    edx <<= 9;
    eax <<= 9;
    sub_1abac7();
loc_1aeabb: // 0160:1aeabb
    ebp = 0;
    memoryASet32(ds, esi + 3794754, ebp);
    memoryASet32(ds, 0x39f258, ebp);
loc_1aeac9: // 0160:1aeac9
    if ((int32_t)memoryAGet32(ds, esp + 8) > (int32_t)0x0000017e)
        goto loc_1aeae4;
    ebx = memoryAGet32(ds, esp + 12);
    if ((int32_t)ebx < (int32_t)0x00000001)
        goto loc_1aeae4;
    if ((int32_t)ebx <= (int32_t)0x000003c0)
        goto loc_1aeb4a;
loc_1aeae4: // 0160:1aeae4
    if (memoryAGet32(ds, esi + 3794782) != 0x00000000)
        goto loc_1aeb17;
    edx = 0x00000004;
    eax = 0;
    sub_1a9cc8();
    if (eax)
        goto loc_1aeb17;
    eax = edi;
    ebx = 0x00000080;
    sub_19ce55();
    edx = eax;
    eax = 0x00000029;
    sub_1b9c1d();
    goto loc_1aeb3c;
loc_1aeb17: // 0160:1aeb17
    eax = memoryAGet32(ds, esi + 3794782);
    if (!eax)
        goto loc_1aeb26;
    if (eax != 0x00000002)
        goto loc_1aeb3c;
loc_1aeb26: // 0160:1aeb26
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x0000017e)
        goto loc_1aeb3c;
    edx = 0x00000080;
    eax = edi;
    sub_1aa739();
loc_1aeb3c: // 0160:1aeb3c
    ecx = 0;
    memoryASet32(ds, esi + 3794754, ecx);
    memoryASet32(ds, 0x39f258, ecx);
loc_1aeb4a: // 0160:1aeb4a
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000008)
        goto loc_1ae4f2;
    esp += 0x00000018;
    goto loc_1afe30;
    // gap 4817 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aeb5f() // 0160:1aeb5f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = 0;
loc_1aeb65: // 0160:1aeb65
    if (memoryAGet32(ds, esi + 3794754) == 0x00000000)
        goto loc_1aebc1;
    ebx = memoryAGet32(ds, esi + 3794782);
    if (ebx == 0x00000027)
        goto loc_1aebc1;
    if (ebx == 0x0000002f)
        goto loc_1aebc1;
    if (ebx == 0x00000001)
        goto loc_1aebc1;
    eax = memoryAGet32(ds, esi + 3794758);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -2;
    eax = memoryAGet32(ds, esi + 3794754);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000007);
    edx = eax + -2;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, esi + 3794778);
    sub_19cb74();
loc_1aebc1: // 0160:1aebc1
    esi += 0x00000024;
    if (esi != 0x00000120)
        goto loc_1aeb65;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aebd1() // 0160:1aebd1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, edx);
loc_1aebe3: // 0160:1aebe3
    eax = memoryAGet32(ds, esp);
    if (memoryAGet32(ds, eax + 2524680) == 0x00000000)
        goto loc_1aecb5;
    edi = memoryAGet32(ds, esp + 4);
    edi <<= 7;
    ebp = edi + 128;
    ebx = edi * 0x00000012;
    ebp = ebp * 0x00000012;
    goto loc_1aecad;
loc_1aec0b: // 0160:1aec0b
    eax = memoryAGet32(ds, ebx + 2152392);
    if (!eax)
        goto loc_1aeca9;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x39f240);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2152396);
    esi -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, 0x39f244);
    edx = esi;
    eax -= ecx;
    esi = memoryAGet32(ds, 0x39f23c);
    edx <<= 16;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = ecx;
    esi = eax;
    edx <<= 16;
    ecx = memoryAGet32(ds, 0x39f23c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ecx = eax;
    if ((int32_t)(esi & esi) <= 0)
        goto loc_1aeca1;
    if ((int32_t)esi >= (int32_t)0x00000140)
        goto loc_1aeca1;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1aeca1;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_1aeca1;
    ecx = eax * 0x00000140;
    al = memoryAGet(ds, ebx + 2152408);
    memoryASet(ds, ecx + esi + 2910632, al);
    goto loc_1aeca9;
loc_1aeca1: // 0160:1aeca1
    esi = 0;
    memoryASet32(ds, ebx + 2152392, esi);
loc_1aeca9: // 0160:1aeca9
    ebx += 0x00000012;
    edi++;
loc_1aecad: // 0160:1aecad
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_1aec0b;
loc_1aecb5: // 0160:1aecb5
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx += 0x00000004;
    esi++;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)esi < (int32_t)0x00000008)
        goto loc_1aebe3;
    esp += 0x00000008;
    goto loc_1afe30;
    // gap 4440 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aecd8() // 0160:1aecd8 +long +stackDrop4
{
    esp -= 4;
    goto loc_1aecd8;
loc_1acf38: // 0160:1acf38
    esp += 0x00000034;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    esp += 4;
    return;
    // gap 7575 bytes
loc_1aecd8: // 0160:1aecd8
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    push32(eax);
    push32(edx);
    push32(ecx);
    edx = 0;
    memoryASet32(ds, esp + 36, edx);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 32, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    if ((int32_t)ebx <= (int32_t)0x00000032)
        goto loc_1aed1d;
    edx = eax;
    eax <<= 3;
    eax -= edx;
    edx = eax;
    edx <<= 9;
    ecx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 8, memoryAGet32(ds, esp + 8) + eax);
    goto loc_1aed2a;
loc_1aed1d: // 0160:1aed1d
    edi = memoryAGet32(ds, esp + 8);
    eax <<= 9;
    edi += eax;
    memoryASet32(ds, esp + 8, edi);
loc_1aed2a: // 0160:1aed2a
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 68);
    eax += 0x00000006;
    eax += edx;
    ecx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    ecx += eax;
    eax = ebx + 16;
    stop("imul eax * eax");
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    stop("imul ebx * ebx");
    memoryASet32(ds, esp + 24, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 44, ebx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 16, eax);
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = eax;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    ebx = 0x00000064;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = 0;
    memoryASet32(ds, esp + 4, ecx);
    ecx = 0;
    memoryASet32(ds, esp + 12, eax);
loc_1aeda4: // 0160:1aeda4
    edi = memoryAGet32(ds, ecx + 3792026);
    if (!edi)
        goto loc_1af146;
    ebp = memoryAGet32(ds, esp + 8);
    edx = edi;
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = memoryAGet32(ds, ecx + 3792030);
    eax = memoryAGet32(ds, esp + 4);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebp;
    stop("imul edx * ebp");
    edi = eax;
    stop("imul eax * eax");
    edx += eax;
    memoryASet32(ds, esp + 48, edx);
    eax = edx;
    edx = memoryAGet32(ds, esp + 44);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1af10d;
    edx -= eax;
    edx = edx * 0x000000eb;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, esp);
    stop("imul edx * eax");
    memoryASet32(ds, 0x39ef82, 0x00000001);
    ebx = memoryAGet32(ds, esp + 44);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp + 12))
        goto loc_1aee3c;
    ebx += memoryAGet32(ds, esp + 16);
loc_1aee3c: // 0160:1aee3c
    if (ebx)
        goto loc_1aee47;
    ebx = 0x00000001;
    goto loc_1aee50;
loc_1aee47: // 0160:1aee47
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_1aee50;
    ebx = eax;
loc_1aee50: // 0160:1aee50
    edx = ebx;
    eax = esi;
    sub_1a31e0();
    edx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, esp + 40, ebx);
    if (esi != edx)
        goto loc_1aee71;
    memoryASet32(ds, 0x39f1d0, 0x00000001);
loc_1aee71: // 0160:1aee71
    if (memoryAGet32(ds, 0x1df9fc) != 0x00000000)
        goto loc_1aeeda;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x39ef9c))
        goto loc_1aee9b;
    memoryASet32(ds, 0x39f1d4, 0x00000001);
loc_1aee9b: // 0160:1aee9b
    edx = memoryAGet32(ds, ecx + 3792102);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1aeea7;
    ebx = edx;
loc_1aeea7: // 0160:1aeea7
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, 0x1dfa00))
        goto loc_1aeeda;
    eax = esi + 1;
    memoryASet32(ds, esp + 36, eax);
    eax = memoryAGet32(ds, 0x39f1c4);
    memoryASet32(ds, 0x1dfa00, ebx);
    memoryASet32(ds, 0x1dfa04, eax);
    if (eax)
        goto loc_1aeeda;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, esp + 24))
        goto loc_1aeeda;
    memoryASet32(ds, 0x39f1c0, 0x00000001);
loc_1aeeda: // 0160:1aeeda
    edx = edi;
    eax = ebp;
    sub_1ae150();
    ebx = eax;
    if (eax)
        goto loc_1aeef3;
    ebx = 0x00000200;
    edi = 0xfffffe00;
loc_1aeef3: // 0160:1aeef3
    eax = memoryAGet32(ds, ecx + 3792022);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 40);
    stop("imul edx * ebp");
    ebx <<= 4;
    edx <<= 9;
    memoryASet32(ds, ecx + 3792022, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp + 40);
    stop("imul edx * edi");
    ebp = memoryAGet32(ds, ecx + 3792018);
    edx <<= 9;
    ebp += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    al |= 0x01;
    edx = memoryAGet32(ds, ecx + 3792022);
    memoryASet32(ds, ecx + 3792018, ebp);
    edx += eax;
    ebx = memoryAGet32(ds, ecx + 3792018);
    memoryASet32(ds, ecx + 3792022, edx);
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1aef61;
    memoryASet32(ds, ecx + 3792050, 0x00000001);
    goto loc_1aef6b;
loc_1aef61: // 0160:1aef61
    memoryASet32(ds, ecx + 3792050, 0xffffffff);
loc_1aef6b: // 0160:1aef6b
    eax = memoryAGet32(ds, ecx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    if ((int32_t)(edi & edi) <= 0)
        goto loc_1aeff1;
    eax = memoryAGet32(ds, ecx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1aeff1;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = edi * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ss, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, edi + ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aeffb;
loc_1aeff1: // 0160:1aeff1
    memoryASet32(ds, ecx + 3792030, memoryAGet32(ds, ecx + 3792030) - 0x00000200);
loc_1aeffb: // 0160:1aeffb
    edx = 0;
    ebx = memoryAGet32(ds, ecx + 1887418);
    memoryASet32(ds, ecx + 3792062, edx);
    if (ebx)
        goto loc_1af031;
    eax = esi;
    edx = 0x00000002;
    sub_19ce55();
    edi = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1a9cc8();
    eax += 0x00000006;
    edx = edi;
    sub_1b9c1d();
loc_1af031: // 0160:1af031
    memoryASet32(ds, ecx + 3792058, 0x00000001);
    if (esi != memoryAGet32(ds, 0x39ef98))
        goto loc_1af10d;
    if (memoryAGet32(ds, 0x39f060) != 0x00000002)
        goto loc_1af055;
    sub_1b2097();
loc_1af055: // 0160:1af055
    if ((int32_t)memoryAGet32(ds, 0x39f064) < (int32_t)0x00000002)
        goto loc_1af063;
    sub_1b3780();
loc_1af063: // 0160:1af063
    if (memoryAGet32(ds, ecx + 3792074) != 0x0000001f)
        goto loc_1af084;
    edi = 0;
    eax = 0x00000010;
    memoryASet32(ds, 0x39f020, edi);
    memoryASet32(ds, 0x39f258, edi);
    memoryASet32(ds, 0x39efac, eax);
loc_1af084: // 0160:1af084
    if (memoryAGet32(ds, 0x39f000) == 0x00000000)
        goto loc_1af097;
    memoryASet32(ds, 0x39efac, 0x00000010);
loc_1af097: // 0160:1af097
    edi = 0;
    memoryASet32(ds, 0x39f020, edi);
    memoryASet32(ds, 0x39f000, edi);
    memoryASet32(ds, 0x39f040, edi);
    memoryASet32(ds, 0x39f044, edi);
    memoryASet32(ds, 0x39f04c, edi);
    if (memoryAGet32(ds, ecx + 3792074) != 0x00000006)
        goto loc_1af0e1;
    ebp = memoryAGet32(ds, 0x39f1b4);
    if (ebp)
        goto loc_1af0e1;
    eax = 0x00000001;
    memoryASet32(ds, 0x39eff4, ebp);
    memoryASet32(ds, 0x39f1b4, eax);
    memoryASet32(ds, 0x39f0bc, eax);
    goto loc_1af10d;
loc_1af0e1: // 0160:1af0e1
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x39eff4);
    memoryASet32(ds, 0x39f0e8, eax);
    if ((int32_t)(edx & edx) <= 0)
        goto loc_1af10d;
    ebx = 0x00000002;
    memoryASet32(ds, 0x39f0bc, eax);
    edi = 0;
    memoryASet32(ds, 0x39f1b4, ebx);
    memoryASet32(ds, 0x39eff4, edi);
loc_1af10d: // 0160:1af10d
    eax = memoryAGet32(ds, esp + 48);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + 44))
        goto loc_1af146;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_1af146;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x39ef9c))
        goto loc_1af13e;
    memoryASet32(ds, esp + 28, 0x00000001);
    goto loc_1af146;
loc_1af13e: // 0160:1af13e
    memoryASet32(ds, esp + 32, 0x00000001);
loc_1af146: // 0160:1af146
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1aeda4;
    if (memoryAGet32(ds, 0x1df9fc) != 0x00000000)
        goto loc_1af198;
    edi = memoryAGet32(ds, esp + 36);
    if (!edi)
        goto loc_1af198;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, 0x1df9fc, edi);
    edx = edi + -1;
    if (edx != memoryAGet32(ds, eax + 3792118))
        goto loc_1af198;
    ecx = 0x00000001;
    esi = 0xffffffff;
    memoryASet32(ds, 0x39f1f0, ecx);
    memoryASet32(ds, eax + 3792118, esi);
loc_1af198: // 0160:1af198
    if (memoryAGet32(ds, 0x1df9fc) != 0x00000000)
        goto loc_1acf38;
    if (memoryAGet32(ds, esp + 36) != 0x00000000)
        goto loc_1acf38;
    if (memoryAGet32(ds, esp + 32) != 0x00000000)
        goto loc_1af1c2;
    if (memoryAGet32(ds, esp + 28) == 0x00000000)
        goto loc_1acf38;
loc_1af1c2: // 0160:1af1c2
    ebx = 0xffffffff;
    edx = 0x00000003;
    eax = 0;
    memoryASet32(ds, 0x1df9fc, ebx);
    sub_1a9cc8();
    if (eax)
        goto loc_1acf38;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, 0x39f1e8, eax);
    eax = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, 0x39f1ec, eax);
    goto loc_1acf38;
}
void sub_1af1f8() // 0160:1af1f8 +long +stackDrop4
{
    esp -= 4;
    goto loc_1af1f8;
loc_1acf3b: // 0160:1acf3b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    esp += 4;
    return;
    // gap 8887 bytes
loc_1af1f8: // 0160:1af1f8
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = 0;
    memoryASet32(ds, esp + 36, edx);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 32, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = memoryAGet32(ds, esp + 72);
    edx = eax;
    eax += edi;
    eax += 0x00000003;
    ebp = memoryAGet32(ds, esp + 8);
    eax <<= 9;
    ebp += eax;
    eax = ebx + 16;
    stop("imul eax * eax");
    memoryASet32(ds, esp + 16, eax);
    eax = ebx;
    stop("imul eax * ebx");
    memoryASet32(ds, esp + 48, eax);
    eax = ebx;
    esi = memoryAGet32(ds, esp + 12);
    eax <<= 9;
    edx <<= 9;
    memoryASet32(ds, esp + 40, eax);
    eax = memoryAGet32(ds, esp);
    esi += edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 24, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = 0;
    memoryASet32(ds, esp + 12, esi);
    esi = 0;
    memoryASet32(ds, esp + 8, ebp);
    memoryASet32(ds, esp + 20, eax);
loc_1af28e: // 0160:1af28e
    eax = memoryAGet32(ds, ecx + 3792026);
    if (!eax)
        goto loc_1af6eb;
    ebx = memoryAGet32(ds, esp + 12);
    eax -= ebx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, ecx + 3792030);
    edx -= edi;
    ebp = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebp;
    stop("imul edx * ebp");
    edi = eax;
    stop("imul eax * eax");
    edx += eax;
    memoryASet32(ds, esp + 52, edx);
    eax = edx;
    edx = memoryAGet32(ds, esp + 48);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1af6eb;
    memoryASet32(ds, 0x39ef82, 0x00000001);
    ebx = edx;
    edx = memoryAGet32(ds, esp);
    ebx -= eax;
    stop("imul edx * ebx");
    ebx = memoryAGet32(ds, esp + 48);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_1af313;
    ebx += memoryAGet32(ds, esp + 24);
loc_1af313: // 0160:1af313
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x00000027)
        goto loc_1af339;
    if ((int32_t)memoryAGet32(ds, ecx + 3792106) < (int32_t)0x00000032)
        goto loc_1af333;
    ebx = 0;
    goto loc_1af339;
loc_1af333: // 0160:1af333
    ebx = memoryAGet32(ds, eax + 3792114);
loc_1af339: // 0160:1af339
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x0000002f)
        goto loc_1af35f;
    if ((int32_t)memoryAGet32(ds, ecx + 3792106) < (int32_t)0x00000050)
        goto loc_1af359;
    ebx = 0;
    goto loc_1af35f;
loc_1af359: // 0160:1af359
    ebx = memoryAGet32(ds, eax + 3792114);
loc_1af35f: // 0160:1af35f
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_1af368;
    ebx = eax;
loc_1af368: // 0160:1af368
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792074);
    if (edx == 0x00000006)
        goto loc_1af387;
    if (edx == 0x00000027)
        goto loc_1af387;
    if (edx != 0x0000002f)
        goto loc_1af3cf;
loc_1af387: // 0160:1af387
    edi = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, ecx + 3792026);
    eax -= edi;
    if (stop("postCondition"))
        goto loc_1af39d;
    ebp = memoryAGet32(ds, esp + 40);
    goto loc_1af3a6;
loc_1af39d: // 0160:1af39d
    ebp = memoryAGet32(ds, esp + 4);
    ebp = -ebp;
    ebp <<= 9;
loc_1af3a6: // 0160:1af3a6
    edx = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, ecx + 3792030);
    eax -= edx;
    if (stop("postCondition"))
        goto loc_1af3bc;
    edi = memoryAGet32(ds, esp + 40);
    goto loc_1af3c5;
loc_1af3bc: // 0160:1af3bc
    edi = memoryAGet32(ds, esp + 4);
    edi = -edi;
    edi <<= 9;
loc_1af3c5: // 0160:1af3c5
    memoryASet32(ds, esp + 44, 0x0000001e);
    goto loc_1af3d3;
loc_1af3cf: // 0160:1af3cf
    memoryASet32(ds, esp + 44, ebx);
loc_1af3d3: // 0160:1af3d3
    edx = ebx;
    eax = esi;
    sub_1a31e0();
    if (esi != memoryAGet32(ds, 0x39ef98))
        goto loc_1af3ee;
    memoryASet32(ds, 0x39f1d0, 0x00000001);
loc_1af3ee: // 0160:1af3ee
    if (memoryAGet32(ds, 0x1df9fc) != 0x00000000)
        goto loc_1af443;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x39ef9c))
        goto loc_1af418;
    memoryASet32(ds, 0x39f1d4, 0x00000001);
loc_1af418: // 0160:1af418
    edx = memoryAGet32(ds, ecx + 3792102);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1af424;
    ebx = edx;
loc_1af424: // 0160:1af424
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, 0x1dfa00))
        goto loc_1af443;
    eax = esi + 1;
    memoryASet32(ds, esp + 36, eax);
    eax = memoryAGet32(ds, 0x39f1c4);
    memoryASet32(ds, 0x1dfa00, ebx);
    memoryASet32(ds, 0x1dfa04, eax);
loc_1af443: // 0160:1af443
    edx = edi;
    eax = ebp;
    sub_1ae150();
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax)
        goto loc_1af469;
    ebx = 0x00000001;
    edi = 0xfffffe00;
loc_1af469: // 0160:1af469
    eax = memoryAGet32(ds, ecx + 3792022);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = ebx * 0x00000014;
    edx = memoryAGet32(ds, esp + 44);
    stop("imul edx * ebp");
    memoryASet32(ds, ecx + 3792022, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 3792018, memoryAGet32(ds, ecx + 3792018) + eax);
    edx = memoryAGet32(ds, esp + 44);
    stop("imul edx * edi");
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    al |= 0x01;
    ebx = memoryAGet32(ds, ecx + 3792022);
    ebx += eax;
    edi = memoryAGet32(ds, ecx + 3792018);
    memoryASet32(ds, ecx + 3792022, ebx);
    if ((int32_t)(edi & edi) <= 0)
        goto loc_1af4c9;
    memoryASet32(ds, ecx + 3792050, 0x00000001);
    goto loc_1af4d3;
loc_1af4c9: // 0160:1af4c9
    memoryASet32(ds, ecx + 3792050, 0xffffffff);
loc_1af4d3: // 0160:1af4d3
    eax = memoryAGet32(ds, ecx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    if ((int32_t)(edi & edi) <= 0)
        goto loc_1af55b;
    eax = memoryAGet32(ds, ecx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1af55b;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = edi * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ss, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, edi + ebx + 3233192);
    stop("setne");
    edx &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1af565;
loc_1af55b: // 0160:1af55b
    memoryASet32(ds, ecx + 3792030, memoryAGet32(ds, ecx + 3792030) - 0x00000200);
loc_1af565: // 0160:1af565
    ebx = 0;
    memoryASet32(ds, ecx + 3792062, ebx);
    edi = memoryAGet32(ds, 0x39f04c);
    if (!edi)
        goto loc_1af5d1;
    if (memoryAGet32(ds, 0x39bdd8) != 0x00000002)
        goto loc_1af591;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    goto loc_1af5a0;
loc_1af591: // 0160:1af591
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<2) & 0x80000000) & stop("xxx");
    edx <<= 3;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x03);
loc_1af5a0: // 0160:1af5a0
    ebx = eax;
    if (ebx)
        goto loc_1af5ab;
    ebx = 0x00000001;
loc_1af5ab: // 0160:1af5ab
    eax = memoryAGet32(ds, ecx + 3792018);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 3792018, eax);
    eax = memoryAGet32(ds, ecx + 3792022);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 3792022, eax);
loc_1af5d1: // 0160:1af5d1
    if (memoryAGet32(ds, ecx + 3792058) != 0x00000000)
        goto loc_1af5fe;
    eax = esi;
    edx = 0x00000002;
    sub_19ce55();
    edi = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1a9cc8();
    eax += 0x00000006;
    edx = edi;
    sub_1b9c1d();
loc_1af5fe: // 0160:1af5fe
    memoryASet32(ds, ecx + 3792058, 0x00000001);
    if (esi != memoryAGet32(ds, 0x39ef98))
        goto loc_1af6b2;
    if (memoryAGet32(ds, 0x39f060) != 0x00000002)
        goto loc_1af622;
    sub_1b2097();
loc_1af622: // 0160:1af622
    if ((int32_t)memoryAGet32(ds, 0x39f064) < (int32_t)0x00000002)
        goto loc_1af630;
    sub_1b3780();
loc_1af630: // 0160:1af630
    if (memoryAGet32(ds, ecx + 3792074) != 0x0000001f)
        goto loc_1af652;
    edx = 0;
    edi = 0x00000010;
    memoryASet32(ds, 0x39f020, edx);
    memoryASet32(ds, 0x39f258, edx);
    memoryASet32(ds, 0x39efac, edi);
loc_1af652: // 0160:1af652
    ebp = 0;
    memoryASet32(ds, 0x39f04c, ebp);
    if (memoryAGet32(ds, ecx + 3792074) != 0x00000006)
        goto loc_1af685;
    if (memoryAGet32(ds, 0x39f1b4) != 0x00000000)
        goto loc_1af685;
    ebx = 0x00000001;
    memoryASet32(ds, 0x39eff4, ebp);
    memoryASet32(ds, 0x39f1b4, ebx);
    memoryASet32(ds, 0x39f0bc, ebx);
    goto loc_1af6b2;
loc_1af685: // 0160:1af685
    ebx = 0x00000001;
    edi = memoryAGet32(ds, 0x39eff4);
    memoryASet32(ds, 0x39f0e8, ebx);
    if ((int32_t)(edi & edi) <= 0)
        goto loc_1af6b2;
    ebp = 0x00000002;
    memoryASet32(ds, 0x39f0bc, ebx);
    eax = 0;
    memoryASet32(ds, 0x39f1b4, ebp);
    memoryASet32(ds, 0x39eff4, eax);
loc_1af6b2: // 0160:1af6b2
    eax = memoryAGet32(ds, esp + 52);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + 48))
        goto loc_1af6eb;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_1af6eb;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x39ef9c))
        goto loc_1af6e3;
    memoryASet32(ds, esp + 32, 0x00000001);
    goto loc_1af6eb;
loc_1af6e3: // 0160:1af6e3
    memoryASet32(ds, esp + 28, 0x00000001);
loc_1af6eb: // 0160:1af6eb
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1af28e;
    if (memoryAGet32(ds, 0x1df9fc) != 0x00000000)
        goto loc_1af73d;
    ecx = memoryAGet32(ds, esp + 36);
    if (!ecx)
        goto loc_1af73d;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, 0x1df9fc, ecx);
    edx = ecx + -1;
    if (edx != memoryAGet32(ds, eax + 3792118))
        goto loc_1af73d;
    ebp = 0x00000001;
    edx = 0xffffffff;
    memoryASet32(ds, 0x39f1f0, ebp);
    memoryASet32(ds, eax + 3792118, edx);
loc_1af73d: // 0160:1af73d
    if (memoryAGet32(ds, 0x1df9fc) != 0x00000000)
        goto loc_1af788;
    if (memoryAGet32(ds, esp + 36) != 0x00000000)
        goto loc_1af788;
    if (memoryAGet32(ds, esp + 28) != 0x00000000)
        goto loc_1af75b;
    if (memoryAGet32(ds, esp + 32) == 0x00000000)
        goto loc_1af788;
loc_1af75b: // 0160:1af75b
    ebp = 0xffffffff;
    edx = 0x00000003;
    eax = 0;
    memoryASet32(ds, 0x1df9fc, ebp);
    sub_1a9cc8();
    if (eax)
        goto loc_1af788;
    eax = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, 0x39f1e8, eax);
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, 0x39f1ec, eax);
loc_1af788: // 0160:1af788
    esp += 0x00000038;
    goto loc_1acf3b;
}
void sub_1af790() // 0160:1af790 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x39f0b4, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = ebx;
    stop("imul ebp * ebx");
    ecx = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    eax <<= 9;
    ebx = 0;
    ecx += eax;
    esi += eax;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp, esi);
loc_1af7c8: // 0160:1af7c8
    edi = memoryAGet32(ds, ebx + 3791138);
    if (!edi)
        goto loc_1af896;
    eax = memoryAGet32(ds, esp + 4);
    edx = edi;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, ebx + 3791142);
    edx -= ecx;
    esi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = esi;
    stop("imul edi * esi");
    ecx = eax;
    stop("imul eax * eax");
    edi += eax;
    if ((int32_t)edi >= (int32_t)ebp)
        goto loc_1af896;
    eax = ebp;
    eax -= edi;
    edx = eax * 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edi = eax;
    edx = ecx;
    eax = esi;
    sub_1ae150();
    memoryASet32(ds, esp + 8, eax);
    if (eax)
        goto loc_1af848;
    eax = 0x00000200;
    ecx = 0xfffffe00;
    memoryASet32(ds, esp + 8, eax);
loc_1af848: // 0160:1af848
    edx = esi;
    stop("imul edx * edi");
    esi = memoryAGet32(ds, esp + 8);
    edx <<= 9;
    esi <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = ecx;
    stop("imul edx * edi");
    edx <<= 9;
    memoryASet32(ds, ebx + 3791154, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = memoryAGet32(ds, ebx + 3791142);
    memoryASet32(ds, ebx + 3791158, eax);
    edx -= 0x00000200;
    ecx = 0x00000001;
    memoryASet32(ds, ebx + 3791142, edx);
    memoryASet32(ds, 0x39f0b4, ecx);
loc_1af896: // 0160:1af896
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_1af7c8;
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1af8ad() // 0160:1af8ad +long
{
    esp -= 4;
    goto loc_1af8ad;
loc_1af8a5: // 0160:1af8a5
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1af8ad: // 0160:1af8ad
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    edi = ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    ebx = memoryAGet32(ds, esp);
    edx += eax;
    ebx += eax;
    eax = edi;
    stop("imul eax * edi");
    memoryASet32(ds, esp, ebx);
    memoryASet32(ds, esp + 4, edx);
    ebp = memoryAGet32(ds, esp);
    ebx = 0;
    memoryASet32(ds, esp + 8, eax);
loc_1af8e6: // 0160:1af8e6
    ecx = memoryAGet32(ds, ebx + 3790898);
    if (!ecx)
        goto loc_1af991;
    esi = memoryAGet32(ds, esp + 4);
    edx = ecx;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 3790902);
    edx -= ebp;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx;
    stop("imul edx * ecx");
    esi = eax;
    stop("imul eax * eax");
    eax += edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1af991;
    if (stop("postCondition"))
        goto loc_1af947;
    eax = ecx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    al |= 0x01;
    goto loc_1af958;
loc_1af947: // 0160:1af947
    eax = ecx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    al |= 0x01;
    eax = -eax;
loc_1af958: // 0160:1af958
    eax <<= 9;
    eax = sar32(eax, 0x05);
    memoryASet32(ds, ebx + 3790906, eax);
    eax = esi;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    ecx = memoryAGet32(ds, ebx + 3790902);
    eax <<= 9;
    ecx -= 0x00000200;
    eax = sar32(eax, 0x06);
    memoryASet32(ds, ebx + 3790902, ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 3790910, eax);
loc_1af991: // 0160:1af991
    ebx += 0x00000018;
    if (ebx != 0x000000f0)
        goto loc_1af8e6;
    goto loc_1af8a5;
}
void sub_1af9a5() // 0160:1af9a5 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = eax;
    memoryASet32(ds, esp + 4, edx);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    edx <<= 2;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    stop("imul ebx * ebx");
    edi = 0;
    esi = 0;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, esp, ebx);
    edx += eax;
    ebp += eax;
    memoryASet32(ds, esp + 4, edx);
loc_1af9ec: // 0160:1af9ec
    ebx = memoryAGet32(ds, esi + 3795150);
    if (!ebx)
        goto loc_1afa7f;
    edx = ebx;
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esi + 3795154);
    edx -= ecx;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul ebx * ebx");
    stop("imul eax * eax");
    edx = memoryAGet32(ds, esp);
    eax += ebx;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1afa7f;
    if (memoryAGet32(ds, esi + 3795174) == 0x00000000)
        goto loc_1afa45;
    eax = edi;
    sub_1b1b53();
loc_1afa45: // 0160:1afa45
    push32(0x00000000);
    ecx = 0x00000032;
    ebx = 0x0000002d;
    edx = memoryAGet32(ds, esi + 3795154);
    eax = memoryAGet32(ds, esi + 3795150);
    edx -= 0x00003000;
    eax -= 0x00003000;
    sub_1abac7();
    eax = 0x00000032;
    ecx = 0;
    memoryASet32(ds, 0x1df9e0, eax);
    memoryASet32(ds, esi + 3795150, ecx);
loc_1afa7f: // 0160:1afa7f
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_1af9ec;
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1afa94() // 0160:1afa94 +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 4, eax);
    edi = edx;
    if ((int32_t)ebx > (int32_t)0x000003c0)
        goto loc_1afb90;
    eax = ebx + esi;
    if (stop("postCondition"))
        goto loc_1afb90;
    edx = memoryAGet32(ds, esp + 28);
    edx += ecx;
    if (stop("postCondition"))
        goto loc_1afb90;
    if ((int32_t)ecx > (int32_t)0x00000190)
        goto loc_1afb90;
    if ((int32_t)eax <= (int32_t)0x000003c0)
        goto loc_1afae3;
    esi = 0x000003c0;
    esi -= ebx;
loc_1afae3: // 0160:1afae3
    if (stop("postCondition"))
        goto loc_1afaf5;
    edx = memoryAGet32(ds, esp + 4);
    edx -= ebx;
    esi += ebx;
    memoryASet32(ds, esp + 4, edx);
    ebx = 0;
loc_1afaf5: // 0160:1afaf5
    eax = memoryAGet32(ds, esp + 28);
    eax += ecx;
    if ((int32_t)eax <= (int32_t)0x00000190)
        goto loc_1afb0d;
    eax = 0x00000190;
    eax -= ecx;
    memoryASet32(ds, esp + 28, eax);
loc_1afb0d: // 0160:1afb0d
    ebp = memoryAGet32(ds, esp + 36);
    stop("imul ecx * ebp");
    edi += ecx;
    edi += ebx;
    if ((int32_t)(esi & esi) <= 0)
        goto loc_1afb90;
    if (memoryAGet32(ds, 0x1dc0c4) == 0x00000000)
        goto loc_1afb40;
    ebx = memoryAGet32(ds, esp + 32);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 32);
    eax = memoryAGet32(ds, esp + 8);
    push32(ebx);
    edx = edi;
    ebx = esi;
    sub_1aaf5d();
loc_1afb40: // 0160:1afb40
    ecx = 0;
    ebp = 0x00000080;
    memoryASet32(ds, esp, ecx);
    goto loc_1afb87;
loc_1afb4c: // 0160:1afb4c
    edx = memoryAGet32(ds, esp + 4);
    eax = edi;
    ebx = 0;
    goto loc_1afb68;
loc_1afb56: // 0160:1afb56
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_1afb65;
    memoryASet(ds, eax, 0x80);
loc_1afb65: // 0160:1afb65
    edx++;
    eax++;
    ebx++;
loc_1afb68: // 0160:1afb68
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1afb56;
    eax = memoryAGet32(ds, esp + 32);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 36);
    ebx += eax;
    eax = memoryAGet32(ds, esp);
    edi += ecx;
    eax++;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, eax);
loc_1afb87: // 0160:1afb87
    eax = memoryAGet32(ds, esp);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 28))
        goto loc_1afb4c;
loc_1afb90: // 0160:1afb90
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
}
void sub_1afb99() // 0160:1afb99 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    memoryASet32(ds, esp, ecx);
    ecx = 0x00000041;
    edi = 0x00000043;
    ebp = 0x00000044;
    eax = edx;
    ebx <<= 4;
    eax <<= 4;
    memoryASet32(ds, ebx + 2524712, ecx);
    eax -= edx;
    edx = 0x003155a8;
    eax <<= 6;
    memoryASet32(ds, ebx + 2524720, edi);
    edx += eax;
    memoryASet32(ds, ebx + 2524724, ebp);
    edx += esi;
    eax = 0;
    esi = 0x00000042;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, ebx + 2524716, esi);
    esi = 0;
    goto loc_1afc20;
loc_1afbf0: // 0160:1afbf0
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_1afc17;
    edi = memoryAGet32(ds, esp + 4);
    if (ecx == memoryAGet32(ds, stop("GetOpAddress")))
        goto loc_1afc17;
    ebx += 0x00000004;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, ebx + 2524708, ecx);
    eax++;
loc_1afc17: // 0160:1afc17
    edx += 0x00000780;
    esi += 0x00000002;
loc_1afc20: // 0160:1afc20
    if ((int32_t)esi >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1afc2a;
    if ((int32_t)eax < (int32_t)0x00000004)
        goto loc_1afbf0;
loc_1afc2a: // 0160:1afc2a
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1afc31() // 0160:1afc31 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    memoryASet32(ds, stop("GetOpAddress"), 0x00000001);
    ebx <<= 4;
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    ecx += ebx;
    ebx = eax;
    eax = ecx;
    ecx <<= 2;
    ecx -= eax;
    ebx <<= 3;
    ecx <<= 3;
    goto loc_1afcbb;
loc_1afc60: // 0160:1afc60
    edx = 0x00000400;
    memoryASet32(ds, ebx + 3922000, esi);
    eax = 0xfffffc00;
    memoryASet32(ds, ebx + 3922004, edi);
    sub_1a9cc8();
    edx = 0xfffffe00;
    memoryASet32(ds, ebx + 3922008, eax);
    eax = 0xfffffa00;
    ebx += 0x00000018;
    sub_1a9cc8();
    memoryASet32(ds, ebx + 3921988, eax);
    eax = memoryAGet32(ds, 0x1dfa28);
    memoryASet32(ds, ebx + 3921996, eax);
    ah = memoryAGet(ds, 0x1dfa28);
    ebp = 0;
    ah ^= 0x01;
    memoryASet32(ds, ebx + 3921992, ebp);
    memoryASet(ds, 0x1dfa28, ah);
loc_1afcbb: // 0160:1afcbb
    if ((int32_t)ebx < (int32_t)ecx)
        goto loc_1afc60;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1afcc3() // 0160:1afcc3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ecx = eax + 16;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    ebx = eax;
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    ebp = memoryAGet32(ds, 0x39f230);
    eax <<= 3;
    ebx <<= 3;
    memoryASet32(ds, esp, eax);
    goto loc_1afe1c;
loc_1afcf3: // 0160:1afcf3
    ecx = memoryAGet32(ds, ebx + 3922000);
    if (!ecx)
        goto loc_1afe19;
    eax = memoryAGet32(ds, ebx + 3922008);
    edi = memoryAGet32(ds, ebx + 3922004);
    esi = ecx + eax;
    eax = memoryAGet32(ds, ebx + 3922012);
    ebp = memoryAGet32(ds, ebx + 3922012);
    edi += eax;
    eax = memoryAGet32(ds, 0x39f078);
    memoryASet32(ds, ebx + 3922004, edi);
    ebp += eax;
    eax = memoryAGet32(ds, ebx + 3922004);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, ebx + 3922000, esi);
    memoryASet32(ds, ebx + 3922012, ebp);
    ebp = 0x00000032;
    esi = eax;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1afdfb;
    eax = memoryAGet32(ds, ebx + 3922000);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_1afdfb;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = esi * 0x000003c0;
    eax += eax;
    eax += edi;
    edi = 0;
    di = memoryAGet16(ds, eax + 2332680);
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edi &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + esi + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edi;
    if (!eax)
        goto loc_1afdfb;
    eax = memoryAGet32(ds, ebx + 3922008);
    edx = eax;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 3922008, eax);
    eax = memoryAGet32(ds, ebx + 3922012);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 3922012, eax);
loc_1afdfb: // 0160:1afdfb
    eax = memoryAGet32(ds, ebx + 3922016);
    eax += 0x00000004;
    memoryASet32(ds, ebx + 3922016, eax);
    if ((int32_t)eax < (int32_t)0x00000080)
        goto loc_1afe19;
    ecx = 0;
    memoryASet32(ds, ebx + 3922000, ecx);
loc_1afe19: // 0160:1afe19
    ebx += 0x00000018;
loc_1afe1c: // 0160:1afe1c
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp))
        goto loc_1afcf3;
    memoryASet32(ds, 0x39f230, ebp);
    eax = ebp;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1afe37() // 0160:1afe37 +long
{
    esp -= 4;
    goto loc_1afe37;
loc_1afe31: // 0160:1afe31
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1afe37: // 0160:1afe37
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_1afe3e: // 0160:1afe3e
    if (memoryAGet32(ds, esi + 3922000) == 0x00000000)
        goto loc_1afefb;
    if ((int32_t)memoryAGet32(ds, esi + 3922008) <= (int32_t)0x00000000)
        goto loc_1afea6;
    eax = memoryAGet32(ds, esi + 3922004);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3922000);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 3922016);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000008);
    ecx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x002a9648;
    goto loc_1afef6;
loc_1afea6: // 0160:1afea6
    eax = memoryAGet32(ds, esi + 3922004);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3922000);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 3922016);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000008);
    ecx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x00314388;
loc_1afef6: // 0160:1afef6
    sub_19cb74();
loc_1afefb: // 0160:1afefb
    esi += 0x00000018;
    if (esi != 0x00000c00)
        goto loc_1afe3e;
    goto loc_1afe31;
}
void sub_1aff0f() // 0160:1aff0f +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    ebp = ecx;
    ecx = ebx;
    edx = 0x00000001;
    ecx <<= 2;
    ebx <<= 7;
    memoryASet32(ds, ecx + 2524680, edx);
    edx = ebx;
    eax = ebp;
    edx <<= 3;
    eax <<= 3;
    edx += ebx;
    eax += ebp;
    edx += edx;
    eax += eax;
    ebx = edx;
    ebp = edx + eax;
    goto loc_1affa0;
loc_1aff44: // 0160:1aff44
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2152392, edi);
    eax = 0xfffffc00;
    memoryASet32(ds, ebx + 2152396, esi);
    sub_1a9cc8();
    edx = 0xfffffe00;
    memoryASet32(ds, ebx + 2152400, eax);
    eax = 0xfffffa00;
    sub_1a9cc8();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 2152404, eax);
    eax = 0;
    sub_1a9cc8();
    eax += ecx;
    ebx += 0x00000012;
    al = memoryAGet(ds, stop("GetOpAddress"));
    memoryASet(ds, ebx + 2152390, al);
    ah = 0;
    memoryASet(ds, ebx + 2152391, ah);
loc_1affa0: // 0160:1affa0
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_1aff44;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1affa8() // 0160:1affa8 +long
{
    esp -= 4;
    goto loc_1affa8;
loc_1afe25: // 0160:1afe25
    memoryASet32(ds, 0x39f230, ebp);
    eax = ebp;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 369 bytes
loc_1affa8: // 0160:1affa8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ecx = eax + 128;
    ebx = eax;
    eax <<= 3;
    ebx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    ebp = memoryAGet32(ds, 0x39f230);
    eax += eax;
    ebx += ebx;
    memoryASet32(ds, esp, eax);
    goto loc_1b00fd;
loc_1affd7: // 0160:1affd7
    ecx = memoryAGet32(ds, ebx + 2152392);
    if (!ecx)
        goto loc_1b00fa;
    eax = memoryAGet32(ds, ebx + 2152400);
    edi = memoryAGet32(ds, ebx + 2152396);
    esi = ecx + eax;
    eax = memoryAGet32(ds, ebx + 2152404);
    ebp = memoryAGet32(ds, ebx + 2152404);
    edi += eax;
    eax = memoryAGet32(ds, 0x39f078);
    memoryASet32(ds, ebx + 2152396, edi);
    ebp += eax;
    eax = memoryAGet32(ds, ebx + 2152396);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, ebx + 2152392, esi);
    memoryASet32(ds, ebx + 2152404, ebp);
    ebp = 0x00000032;
    esi = eax;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1b00fa;
    eax = memoryAGet32(ds, ebx + 2152392);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b00fa;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = esi * 0x000003c0;
    eax += eax;
    eax += edi;
    edi = 0;
    di = memoryAGet16(ds, eax + 2332680);
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edi &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + esi + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edi;
    if (!eax)
        goto loc_1b00fa;
    eax = memoryAGet32(ds, ebx + 2152404);
    edx = eax;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 2152404, eax);
    eax = memoryAGet32(ds, ebx + 2152400);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 2152400, eax);
    memoryASet(ds, ebx + 2152409, memoryAGet(ds, ebx + 2152409) + 1);
    eax = 0;
    al = memoryAGet(ds, ebx + 2152409);
    if ((int32_t)eax <= (int32_t)0x00000005)
        goto loc_1b00fa;
    eax = 0;
    memoryASet32(ds, ebx + 2152392, eax);
loc_1b00fa: // 0160:1b00fa
    ebx += 0x00000012;
loc_1b00fd: // 0160:1b00fd
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp))
        goto loc_1affd7;
    goto loc_1afe25;
}
void sub_1b010b() // 0160:1b010b +long
{
    esp -= 4;
    goto loc_1b010b;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_below", "0160:1afe32");
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 724 bytes
loc_1b010b: // 0160:1b010b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000003d;
    ebx = edi;
    eax += 0x00000020;
    edx = ebp;
    sub_1afb99();
    ecx = 0x00000040;
    ebx = edi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx += 0x00004000;
    eax += 0x00004000;
    sub_1aff0f();
    ecx = 0x00000010;
    ebx = edi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx += 0x00004000;
    eax += 0x00004000;
    sub_1afc31();
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -4;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000003d);
    push32(0x0000003d);
    ebx = eax + -4;
    edx = 0x003155a8;
    eax = 0x0029b5a8;
    sub_1afa94();
    goto loc_1afe30;
}
void sub_1b01ef() // 0160:1b01ef +long
{
    esp -= 4;
    goto loc_1b01ef;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_below", "0160:1afe32");
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 942 bytes
loc_1b01e5: // 0160:1b01e5
    sub_1afa94();
    goto loc_1afe30;
loc_1b01ef: // 0160:1b01ef
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000002f;
    ebx = edi;
    eax += 0x00000018;
    edx = ebp;
    sub_1afb99();
    ecx = 0x00000040;
    ebx = edi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx += 0x00004000;
    eax += 0x00003000;
    sub_1aff0f();
    ecx = 0x0000000c;
    ebx = edi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx += 0x00004000;
    eax += 0x00003000;
    sub_1afc31();
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 6;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000029);
    push32(0x00000029);
    ebx = eax + -2;
    edx = 0x003155a8;
    eax = 0x00299270;
    goto loc_1b01e5;
}
void sub_1b02ce() // 0160:1b02ce +long
{
    esp -= 4;
    goto loc_1b02ce;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_below", "0160:1afe32");
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 942 bytes
loc_1b01e5: // 0160:1b01e5
    sub_1afa94();
    goto loc_1afe30;
    // gap 223 bytes
loc_1b02ce: // 0160:1b02ce
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x00000015;
    ebx = edi;
    eax += 0x0000000c;
    edx = ebp;
    sub_1afb99();
    ecx = 0x00000020;
    ebx = edi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx += 0x00004000;
    eax += 0x00001800;
    sub_1aff0f();
    ecx = 0x00000008;
    ebx = edi;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx += 0x00004000;
    eax += 0x00001800;
    sub_1afc31();
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 10;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000019);
    push32(0x00000019);
    ebx = eax + -2;
    edx = 0x003155a8;
    eax = 0x00299250;
    goto loc_1b01e5;
}
void sub_1b03ad() // 0160:1b03ad +long
{
    esp -= 4;
    goto loc_1b03ad;
loc_1aaae9: // 0160:1aaae9
    esp += 0x0000000c;
    goto loc_1afe30;
    // gap 21311 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1398 bytes
loc_1b03ad: // 0160:1b03ad
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edx = memoryAGet32(ds, 0x1df9e0);
    if (!edx)
        goto loc_1b03f8;
    ebx = edx + -1;
    memoryASet32(ds, 0x1df9e0, ebx);
    if (ebx)
        goto loc_1b03f8;
    edx = 0x00000007;
    eax = 0;
    sub_1a9cc8();
    if (eax)
        goto loc_1b03f8;
    eax = 0x0003c000;
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000011;
    sub_1b9c1d();
loc_1b03f8: // 0160:1b03f8
    esi = 0;
    ebp = 0;
    memoryASet32(ds, esp + 8, esi);
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, esp + 4, esi);
loc_1b0407: // 0160:1b0407
    if (memoryAGet32(ss, ebp + 2524680) == 0x00000000)
        goto loc_1b041e;
    eax = memoryAGet32(ds, esp);
    sub_1affa8();
    memoryASet32(ss, ebp + 2524680, eax);
loc_1b041e: // 0160:1b041e
    if (memoryAGet32(ss, ebp + 3925072) == 0x00000000)
        goto loc_1b0436;
    eax = memoryAGet32(ds, esp + 4);
    sub_1afcc3();
    memoryASet32(ss, ebp + 2524680, eax);
loc_1b0436: // 0160:1b0436
    if (memoryAGet32(ds, esi + 3796662) == 0x00000000)
        goto loc_1b0544;
    memoryASet32(ds, 0x39f230, 0x00000032);
    edi = memoryAGet32(ds, esi + 3796670);
    edi++;
    memoryASet32(ds, esi + 3796670, edi);
    if ((int32_t)edi < (int32_t)0x0000000a)
        goto loc_1b0467;
    edx = 0;
    memoryASet32(ds, esi + 3796662, edx);
loc_1b0467: // 0160:1b0467
    if (memoryAGet32(ds, esi + 3796670) != 0x00000002)
        goto loc_1b050c;
    ecx = memoryAGet32(ds, 0x1df62c);
    edi = memoryAGet32(ds, esi + 3796674);
    if (ecx)
        goto loc_1b0497;
    if (edi == 0x00000017)
        goto loc_1b0497;
    if (edi == 0x00000038)
        goto loc_1b0497;
    if (memoryAGet32(ds, 0x39f0f4) == 0x00000000)
        goto loc_1b04b3;
loc_1b0497: // 0160:1b0497
    if (memoryAGet32(ds, 0x1df62c) == 0x00000000)
        goto loc_1b04c6;
    if (edi == 0x00000022)
        goto loc_1b04c6;
    if (edi == 0x00000054)
        goto loc_1b04c6;
    if (memoryAGet32(ds, 0x39f0f4) != 0x00000000)
        goto loc_1b04c6;
loc_1b04b3: // 0160:1b04b3
    ebx = edi;
    edx = memoryAGet32(ds, esi + 3796666);
    eax = memoryAGet32(ds, esi + 3796662);
    sub_1af8ad();
loc_1b04c6: // 0160:1b04c6
    ebx = edi;
    edx = memoryAGet32(ds, esi + 3796666);
    eax = memoryAGet32(ds, esi + 3796662);
    sub_1af790();
    ebx = edi;
    edx = memoryAGet32(ds, esi + 3796666);
    eax = memoryAGet32(ds, esi + 3796662);
    sub_1af9a5();
    ebx = edi;
    ecx = memoryAGet32(ds, esi + 3796682);
    edx = memoryAGet32(ds, esi + 3796666);
    push32(ecx);
    eax = memoryAGet32(ds, esi + 3796662);
    ecx = memoryAGet32(ds, esi + 3796678);
    sub_1aecd8();
loc_1b050c: // 0160:1b050c
    if (memoryAGet32(ds, esi + 3796670) != 0x00000005)
        goto loc_1b0544;
    eax = memoryAGet32(ds, esi + 3796674);
    if ((int32_t)eax < (int32_t)0x00000032)
        goto loc_1b052b;
    eax = memoryAGet32(ds, esp + 8);
    sub_1b010b();
    goto loc_1b0544;
loc_1b052b: // 0160:1b052b
    if ((int32_t)eax < (int32_t)0x00000020)
        goto loc_1b053b;
    eax = memoryAGet32(ds, esp + 8);
    sub_1b01ef();
    goto loc_1b0544;
loc_1b053b: // 0160:1b053b
    eax = memoryAGet32(ds, esp + 8);
    sub_1b02ce();
loc_1b0544: // 0160:1b0544
    edx = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 8);
    ebp += 0x00000004;
    esi += 0x00000018;
    edx += 0x00000080;
    ebx += 0x00000010;
    ecx++;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp + 8, ecx);
    if ((int32_t)ecx < (int32_t)0x00000008)
        goto loc_1b0407;
    goto loc_1aaae9;
}
void sub_1b0578() // 0160:1b0578 +long +stackDrop4
{
    esp -= 4;
    goto loc_1b0578;
loc_1acf3b: // 0160:1acf3b
    ebp = pop32();
    stop("stack_below", "0160:1acf3b");
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    esp += 4;
    return;
    // gap 13879 bytes
loc_1b0578: // 0160:1b0578
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edi = edx;
    ebp = ebx;
    memoryASet32(ds, esp, ecx);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -10;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000015);
    push32(0x00000015);
    ebx = eax + -10;
    edx = 0x003155a8;
    eax = 0x00299238;
    sub_1afa94();
    stop("stack_below", "0160:1b05c1");
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1b05d1;
    ecx = 0xffffffff;
    goto loc_1b05d6;
loc_1b05d1: // 0160:1b05d1
    ecx = 0x00000001;
loc_1b05d6: // 0160:1b05d6
    edx = memoryAGet32(ds, esp + 24);
    esi += 0x00000c00;
    edi += 0x00000400;
    if (!edx)
        goto loc_1b068e;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000) & stop("xxx");
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    ebp = esi;
    ebp -= eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000) & stop("xxx");
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    memoryASet32(ds, 0x268608, 0x00000001);
    ebx = edi;
    ebx -= eax;
    memoryASet32(ds, esp + 4, ebx);
    ebx = 0;
loc_1b0625: // 0160:1b0625
    eax = memoryAGet32(ds, esp + 4);
    edx = 0x00000600;
    memoryASet32(ds, ebx + 2152396, eax);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 2152392, ebp);
    sub_1a9cc8();
    stop("imul eax * ecx");
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2152400, eax);
    eax = 0xfffffc00;
    sub_1a9cc8();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 2152404, eax);
    eax = 0;
    ebx += 0x00000012;
    sub_1a9cc8();
    al = memoryAGet(ds, stop("GetOpAddress"));
    memoryASet(ds, ebx + 2152390, al);
    ah = 0;
    memoryASet(ds, ebx + 2152391, ah);
    if (ebx != 0x00000900)
        goto loc_1b0625;
loc_1b068e: // 0160:1b068e
    if (ecx != 0x00000001)
        goto loc_1b0699;
    esi += 0x00001400;
loc_1b0699: // 0160:1b0699
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    push32(0x00000000);
    ebx = 0x00000014;
    edi -= 0x00002000;
    esi -= 0x00002000;
    edx = edi;
    ecx = memoryAGet32(ds, eax + 3792114);
    eax = esi;
    sub_1af1f8();
    stop("stack_below", "0160:1b06c0");
    ebx = 0x00000014;
    edx = edi;
    eax = esi;
    sub_1af790();
    ebx = 0x00000020;
    edx = edi;
    eax = esi;
    sub_1af9a5();
    esp += 0x00000008;
    goto loc_1acf3b;
}
void sub_1b06e9() // 0160:1b06e9 +long +stackDrop4
{
    esp -= 4;
    goto loc_1b06e9;
loc_1acf3b: // 0160:1acf3b
    ebp = pop32();
    stop("stack_below", "0160:1acf3b");
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    esp += 4;
    return;
    // gap 14248 bytes
loc_1b06e9: // 0160:1b06e9
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    edi = edx;
    ebp = ebx;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<11) & 0x80000000) & stop("xxx");
    edx <<= 12;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0c);
    ecx = ebx;
    ecx -= 0x00000004;
    edx = esi;
    ecx -= eax;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<11) & 0x80000000) & stop("xxx");
    edx <<= 12;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0c);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000009);
    push32(0x00000009);
    ebx -= 0x00000004;
    edx = 0x003155a8;
    ebx -= eax;
    eax = 0x00299228;
    sub_1afa94();
    stop("stack_below", "0160:1b075f");
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1b076f;
    ebp = 0xffffffff;
    goto loc_1b0774;
loc_1b076f: // 0160:1b076f
    ebp = 0x00000001;
loc_1b0774: // 0160:1b0774
    ebx = 0;
    goto loc_1b078c;
loc_1b0778: // 0160:1b0778
    if (memoryAGet32(ds, stop("GetOpAddress")) != 0x00000000)
        goto loc_1b078b;
    memoryASet32(ds, esp + 4, ebx);
    ebx = 0x00000008;
loc_1b078b: // 0160:1b078b
    ebx++;
loc_1b078c: // 0160:1b078c
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_1b0778;
    ebx = memoryAGet32(ds, esp + 28);
    edi += 0x00000400;
    if (!ebx)
        goto loc_1b0841;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    memoryASet32(ds, eax + 2524680, 0x00000001);
    ecx = memoryAGet32(ds, esp + 4);
    ecx <<= 7;
    edx = ecx + 64;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    eax <<= 3;
    ebx = ecx + eax;
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax += eax;
    ebx += ebx;
    memoryASet32(ds, esp + 8, eax);
    goto loc_1b083b;
loc_1b07da: // 0160:1b07da
    edx = 0x00000600;
    memoryASet32(ds, ebx + 2152392, esi);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 2152396, edi);
    sub_1a9cc8();
    stop("imul eax * ebp");
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2152400, eax);
    eax = 0xfffffc00;
    sub_1a9cc8();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 2152404, eax);
    eax = 0;
    sub_1a9cc8();
    eax += memoryAGet32(ds, esp);
    ebx += 0x00000012;
    al = memoryAGet(ds, stop("GetOpAddress"));
    memoryASet(ds, ebx + 2152390, al);
    ah = 0;
    ecx++;
    memoryASet(ds, ebx + 2152391, ah);
loc_1b083b: // 0160:1b083b
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1b07da;
loc_1b0841: // 0160:1b0841
    esi += 0x00000c00;
    if (ebp != 0x00000001)
        goto loc_1b0852;
    esi += 0x00001400;
loc_1b0852: // 0160:1b0852
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    push32(0x00000000);
    edi -= 0x00001000;
    esi -= 0x00002000;
    edx = edi;
    ebx = 0x00000010;
    ecx = memoryAGet32(ds, eax + 3792114);
    eax = esi;
    edi -= 0x00000c00;
    sub_1af1f8();
    stop("stack_below", "0160:1b087f");
    ebx = 0x00000010;
    edx = edi;
    eax = esi;
    sub_1af790();
    ebx = 0x00000020;
    edx = edi;
    eax = esi;
    sub_1af9a5();
    esp += 0x0000000c;
    goto loc_1acf3b;
}
void sub_1b08a8() // 0160:1b08a8 +long
{
    esp -= 4;
    goto loc_1b08a8;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2673 bytes
loc_1b08a8: // 0160:1b08a8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0;
loc_1b08b0: // 0160:1b08b0
    if (memoryAGet32(ds, esi + 3796662) == 0x00000000)
        goto loc_1b0942;
    if ((int32_t)memoryAGet32(ds, esi + 3796674) >= (int32_t)0x00000020)
        goto loc_1b08cd;
    ebp = 0xfffffff4;
    goto loc_1b08cf;
loc_1b08cd: // 0160:1b08cd
    ebp = 0;
loc_1b08cf: // 0160:1b08cf
    if ((int32_t)memoryAGet32(ds, esi + 3796674) < (int32_t)0x0000002d)
        goto loc_1b08e0;
    ebx = memoryAGet32(ds, esi + 3796670);
    goto loc_1b08e9;
loc_1b08e0: // 0160:1b08e0
    ebx = memoryAGet32(ds, esi + 3796670);
    ebx += 0x0000000a;
loc_1b08e9: // 0160:1b08e9
    eax = memoryAGet32(ds, esi + 3796666);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx <<= 4;
    edi = memoryAGet32(ds, ebx + 1952226);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, esi + 3796662);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax + ebp;
    eax = memoryAGet32(ds, ebx + 1952218) * 0x00000140;
    ecx = memoryAGet32(ds, ebx + 1952222);
    eax += 0x0026e868;
    ebp = memoryAGet32(ds, ebx + 1952214);
    ebx = edi;
    eax += ebp;
    sub_19cb74();
loc_1b0942: // 0160:1b0942
    esi += 0x00000018;
    if (esi != 0x000000c0)
        goto loc_1b08b0;
    goto loc_1afe30;
}
void sub_1b0956() // 0160:1b0956 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edi);
    ecx = eax;
    ebx = edx;
    edx = 0;
    eax = 0;
loc_1b0961: // 0160:1b0961
    if ((int32_t)eax >= (int32_t)0x00000360)
        goto loc_1b0977;
    if (memoryAGet32(ds, eax + 3791138) == 0x00000000)
        goto loc_1b0977;
    eax += 0x00000024;
    edx++;
    goto loc_1b0961;
loc_1b0977: // 0160:1b0977
    if ((int32_t)edx < (int32_t)0x00000018)
        goto loc_1b097e;
    edx = 0;
loc_1b097e: // 0160:1b097e
    eax = edx;
    eax <<= 3;
    eax += edx;
    memoryASet32(ds, stop("GetOpAddress"), ebx);
    edi = 0;
    memoryASet32(ds, stop("GetOpAddress"), ecx);
    memoryASet32(ds, stop("GetOpAddress"), edi);
    memoryASet32(ds, stop("GetOpAddress"), edi);
    memoryASet32(ds, stop("GetOpAddress"), edi);
    memoryASet32(ds, stop("GetOpAddress"), edi);
    memoryASet32(ds, stop("GetOpAddress"), 0x00000600);
    edi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b09c0() // 0160:1b09c0 +long
{
    esp -= 4;
    goto loc_1b09c0;
loc_1aeb57: // 0160:1aeb57
    esp += 0x00000018;
    goto loc_1afe30;
    // gap 4817 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2953 bytes
loc_1b09c0: // 0160:1b09c0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    edi = 0;
    esi = 0;
    ebp = 0;
loc_1b09cf: // 0160:1b09cf
    if (ebp == memoryAGet32(ds, esi + 3791138))
        goto loc_1b0cd6;
    eax = memoryAGet32(ds, 0x39f078);
    ebx = memoryAGet32(ds, esi + 3791158);
    ebx += eax;
    eax = memoryAGet32(ds, esi + 3791138);
    memoryASet32(ds, esi + 3791146, eax);
    eax = memoryAGet32(ds, esi + 3791142);
    memoryASet32(ds, esi + 3791150, eax);
    ecx = memoryAGet32(ds, esi + 3791138);
    edx = memoryAGet32(ds, esi + 3791142);
    eax = memoryAGet32(ds, esi + 3791154);
    memoryASet32(ds, esi + 3791158, ebx);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 3791158);
    memoryASet32(ds, esi + 3791138, ecx);
    edx += eax;
    eax = memoryAGet32(ds, esi + 3791138);
    memoryASet32(ds, esi + 3791142, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 3791142);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, esi + 3791170);
    memoryASet32(ds, esp + 16, eax);
    if ((int32_t)ebp <= (int32_t)ebx)
        goto loc_1b0a6c;
    memoryASet32(ds, esi + 3791170, ebp);
loc_1b0a6c: // 0160:1b0a6c
    ecx = memoryAGet32(ds, esi + 3791170);
    if (ebp == ecx)
        goto loc_1b0a7f;
    eax = ecx + -1;
    memoryASet32(ds, esi + 3791170, eax);
loc_1b0a7f: // 0160:1b0a7f
    if (ebp == memoryAGet32(ds, esi + 3791154))
        goto loc_1b0a91;
    memoryASet32(ds, 0x39f230, 0x00000032);
loc_1b0a91: // 0160:1b0a91
    eax = memoryAGet32(ds, esi + 3791146);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, esi + 3791150);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, esi + 3791154);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<5) & 0x80000000) & stop("xxx");
    edx <<= 6;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x06);
    if (eax)
        goto loc_1b0adf;
    if ((int32_t)ebp > (int32_t)memoryAGet32(ds, esi + 3791154))
        goto loc_1b0adf;
    eax = 0x00000001;
loc_1b0adf: // 0160:1b0adf
    if (eax)
        goto loc_1b0af0;
    if ((int32_t)ebp <= (int32_t)memoryAGet32(ds, esi + 3791154))
        goto loc_1b0af0;
    eax = 0xffffffff;
loc_1b0af0: // 0160:1b0af0
    edx = memoryAGet32(ds, esi + 3791162);
    edx += eax;
    eax = edx;
    eax &= 0x0000007f;
    memoryASet32(ds, esi + 3791162, eax);
    eax = esp + 8;
    push32(eax);
    eax = esp + 16;
    push32(eax);
    edx = esp + 28;
    push32(ebx);
    eax = edi;
    ebx = esp + 28;
    sub_1aad07();
    if (!eax)
        goto loc_1b0bde;
    eax = memoryAGet32(ds, esi + 3791138);
    edx = memoryAGet32(ds, esp + 20);
    eax &= 0x000001ff;
    edx <<= 9;
    eax |= edx;
    memoryASet32(ds, esi + 3791138, eax);
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esi + 3791142);
    edx <<= 9;
    eax &= 0x000001ff;
    eax |= edx;
    ecx = esp;
    memoryASet32(ds, esi + 3791142, eax);
    ebx = esp + 4;
    eax = memoryAGet32(ds, esi + 3791154);
    push32(ebp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 3791158);
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_1ac6c2();
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3791154, eax);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3791158, eax);
    if (ebp != edx)
        goto loc_1b0ba2;
    memoryASet32(ds, esi + 3791162, edx);
loc_1b0ba2: // 0160:1b0ba2
    eax = memoryAGet32(ds, esp);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_1b0bc1;
    eax = memoryAGet32(ds, esp + 4);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1b0bde;
loc_1b0bc1: // 0160:1b0bc1
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000028;
    sub_1b9c1d();
loc_1b0bde: // 0160:1b0bde
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    ecx = 0x00002c00;
    ebx = 0x00002400;
    edx -= 0x00000002;
    eax--;
    edx <<= 9;
    eax <<= 9;
    sub_1aded4();
    if (!eax)
        goto loc_1b0ca1;
    if (ebp != memoryAGet32(ds, 0x39f044))
        goto loc_1b0ca1;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792006) == 0x00000018)
        goto loc_1b0ca1;
    ebx = memoryAGet32(ds, 0x39f1b0);
    if (ebp == ebx)
        goto loc_1b0c42;
    ecx = memoryAGet32(ds, esi + 3791166);
    if (ebp != ecx)
        goto loc_1b0ca1;
    if (ecx == ebx)
        goto loc_1b0ca1;
loc_1b0c42: // 0160:1b0c42
    memoryASet32(ds, esi + 3791138, ebp);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792018);
    memoryASet32(ds, eax + 3792026, memoryAGet32(ds, eax + 3792026) - edx);
    eax = memoryAGet32(ds, 0x39efe0) * 0x000000ac;
    push32(0x00000005);
    edx = memoryAGet32(ds, eax + 3792022);
    ebx = memoryAGet32(ds, eax + 3792030);
    ecx = 0x00000032;
    ebx -= edx;
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, eax + 3792030, ebx);
    eax = memoryAGet32(ds, esp + 24);
    ebx = 0x0000002d;
    edx -= 0x00000018;
    eax -= 0x00000018;
    edx <<= 9;
    eax <<= 9;
    sub_1abac7();
loc_1b0ca1: // 0160:1b0ca1
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_1b0cb5;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_1b0cd6;
loc_1b0cb5: // 0160:1b0cb5
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_1b0cd0;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_1aa77b();
loc_1b0cd0: // 0160:1b0cd0
    memoryASet32(ds, esi + 3791138, ebp);
loc_1b0cd6: // 0160:1b0cd6
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000018)
        goto loc_1b09cf;
    goto loc_1aeb57;
}
void sub_1b0ce8() // 0160:1b0ce8 +long
{
    esp -= 4;
    goto loc_1b0ce8;
loc_1afe31: // 0160:1afe31
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3761 bytes
loc_1b0ce8: // 0160:1b0ce8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_1b0cef: // 0160:1b0cef
    if (memoryAGet32(ds, esi + 3791138) == 0x00000000)
        goto loc_1b0d4d;
    eax = memoryAGet32(ds, esi + 3791142);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3791138);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 3791162);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000007);
    ecx = 0x00000010;
    eax <<= 4;
    edx = edi;
    eax += 0x0028a6a8;
    sub_19cb74();
loc_1b0d4d: // 0160:1b0d4d
    esi += 0x00000024;
    if (esi != 0x00000360)
        goto loc_1b0cef;
    goto loc_1afe31;
}
void sub_1b0d5d() // 0160:1b0d5d +long
{
    esp -= 4;
    goto loc_1b0d5d;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3878 bytes
loc_1b0d5d: // 0160:1b0d5d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0;
loc_1b0d65: // 0160:1b0d65
    if (memoryAGet32(ds, esi + 3790898) == 0x00000000)
        goto loc_1b0f80;
    memoryASet32(ds, 0x39f230, 0x00000032);
    eax = memoryAGet32(ds, esi + 3790906);
    ecx = memoryAGet32(ds, esi + 3790898);
    edi = memoryAGet32(ds, esi + 3790902);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 3790910);
    memoryASet32(ds, esi + 3790898, ecx);
    edi += eax;
    ebp = memoryAGet32(ds, esi + 3790910);
    memoryASet32(ds, esi + 3790902, edi);
    if ((int32_t)ebp >= (int32_t)0x00002000)
        goto loc_1b0dc0;
    eax = memoryAGet32(ds, 0x39f078);
    edx = eax + ebp;
    memoryASet32(ds, esi + 3790910, edx);
loc_1b0dc0: // 0160:1b0dc0
    if ((int32_t)memoryAGet32(ds, esi + 3790906) <= (int32_t)0x00000000)
        goto loc_1b0dd2;
    memoryASet32(ds, esi + 3790918, memoryAGet32(ds, esi + 3790918) + 0x00000008);
    goto loc_1b0dd9;
loc_1b0dd2: // 0160:1b0dd2
    memoryASet32(ds, esi + 3790918, memoryAGet32(ds, esi + 3790918) - 0x00000008);
loc_1b0dd9: // 0160:1b0dd9
    eax = memoryAGet32(ds, esi + 3790898);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, esi + 3790902);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 3790918, memoryAGet32(ds, esi + 3790918) & 0x0000007f);
    ebp = eax;
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_1b0f3f;
    if ((int32_t)eax >= (int32_t)0x0000017e)
        goto loc_1b0f3f;
    if (edi >= 0x000003c0)
        goto loc_1b0f3f;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1b0e8b;
    if (edi >= 0x000003c0)
        goto loc_1b0e8b;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ax = memoryAGet16(ds, stop("GetOpAddress"));
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebp * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    edx |= eax;
    if (edx)
        goto loc_1b0ef5;
loc_1b0e8b: // 0160:1b0e8b
    ebx = ebp + 1;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1b0f3f;
    if (edi >= 0x000003c0)
        goto loc_1b0f3f;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    eax = 0;
    ax = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3233192);
    eax &= 0x000000ff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b0f3f;
loc_1b0ef5: // 0160:1b0ef5
    eax = 0;
    memoryASet32(ds, esi + 3790898, eax);
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = ebp + -28;
    edx <<= 9;
    eax = edi + -8;
    ecx = memoryAGet32(ds, esi + 3790914);
    eax <<= 9;
    if (ecx != 0x00000036)
        goto loc_1b0f2d;
    push32(0x0000000a);
    ecx = memoryAGet32(ds, ebx + 3792114);
    ebx = 0x00000037;
    goto loc_1b0f3a;
loc_1b0f2d: // 0160:1b0f2d
    push32(0x0000000a);
    ecx = memoryAGet32(ds, ebx + 3792114);
    ebx = 0x00000018;
loc_1b0f3a: // 0160:1b0f3a
    sub_1abac7();
loc_1b0f3f: // 0160:1b0f3f
    if ((int32_t)ebp > (int32_t)0x0000017e)
        goto loc_1b0f4f;
    if (edi <= 0x000003c0)
        goto loc_1b0f80;
loc_1b0f4f: // 0160:1b0f4f
    if ((int32_t)ebp <= (int32_t)0x0000017e)
        goto loc_1b0f78;
    eax = edi;
    edi = memoryAGet32(ds, esi + 3790914);
    eax <<= 9;
    if (edi != 0x00000036)
        goto loc_1b0f6e;
    edx = 0x000000ff;
    goto loc_1b0f73;
loc_1b0f6e: // 0160:1b0f6e
    edx = 0x00000080;
loc_1b0f73: // 0160:1b0f73
    sub_1aa77b();
loc_1b0f78: // 0160:1b0f78
    ebp = 0;
    memoryASet32(ds, esi + 3790898, ebp);
loc_1b0f80: // 0160:1b0f80
    esi += 0x00000018;
    if (esi != 0x000000f0)
        goto loc_1b0d65;
    goto loc_1afe30;
}
void sub_1b0f94() // 0160:1b0f94 +long
{
    esp -= 4;
    goto loc_1b0f94;
loc_1afe31: // 0160:1afe31
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4445 bytes
loc_1b0f94: // 0160:1b0f94
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_1b0f9b: // 0160:1b0f9b
    if (memoryAGet32(ds, esi + 3790898) == 0x00000000)
        goto loc_1b1058;
    if (memoryAGet32(ds, esi + 3790914) != 0x00000036)
        goto loc_1b1003;
    eax = memoryAGet32(ds, esi + 3790902);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3790898);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -5;
    eax = memoryAGet32(ds, esi + 3790918);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x0000000b);
    ecx = 0x00000010;
    eax <<= 4;
    edx = edi;
    eax += 0x0029d0a8;
    goto loc_1b1053;
loc_1b1003: // 0160:1b1003
    eax = memoryAGet32(ds, esi + 3790902);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3790898);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -5;
    eax = memoryAGet32(ds, esi + 3790918);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000003);
    ecx = 0x00000003;
    eax <<= 4;
    edx = edi;
    eax += 0x0028a368;
loc_1b1053: // 0160:1b1053
    sub_19cb74();
loc_1b1058: // 0160:1b1058
    esi += 0x00000018;
    if (esi != 0x000000f0)
        goto loc_1b0f9b;
    goto loc_1afe31;
}
void sub_1b106c() // 0160:1b106c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    ebx = 0;
    eax = 0;
loc_1b1079: // 0160:1b1079
    if (memoryAGet32(ds, eax + 3795594) == 0x00000000)
        goto loc_1b108f;
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_1b108f;
    eax += 0x00000020;
    ebx++;
    goto loc_1b1079;
loc_1b108f: // 0160:1b108f
    if ((int32_t)ebx < (int32_t)0x00000020)
        goto loc_1b1096;
    ebx = 0;
loc_1b1096: // 0160:1b1096
    ecx = ebx;
    ecx <<= 5;
    edx = 0x00000100;
    memoryASet32(ds, ecx + 3795594, esi);
    ebp = 0;
    memoryASet32(ds, ecx + 3795598, edi);
    eax = 0xffffff00;
    memoryASet32(ds, ecx + 3795622, ebp);
    sub_1a9cc8();
    edx = 0xfffffe00;
    memoryASet32(ds, ecx + 3795610, eax);
    eax = 0xfffffd00;
    sub_1a9cc8();
    memoryASet32(ds, ecx + 3795614, eax);
    memoryASet32(ds, ecx + 3795618, ebp);
    eax = ecx;
loc_1b10e1: // 0160:1b10e1
    if (memoryAGet32(ds, eax + 3795594) == 0x00000000)
        goto loc_1b10f7;
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_1b10f7;
    eax += 0x00000020;
    ebx++;
    goto loc_1b10e1;
loc_1b10f7: // 0160:1b10f7
    if ((int32_t)ebx < (int32_t)0x00000020)
        goto loc_1b1101;
    ebx = 0x00000001;
loc_1b1101: // 0160:1b1101
    ebx <<= 5;
    ecx = 0x00000001;
    memoryASet32(ds, ebx + 3795594, esi);
    edx = 0x00000100;
    memoryASet32(ds, ebx + 3795598, edi);
    eax = 0xffffff00;
    memoryASet32(ds, ebx + 3795622, ecx);
    sub_1a9cc8();
    edx = 0xffffff00;
    memoryASet32(ds, ebx + 3795610, eax);
    eax = 0xfffffe00;
    esi = 0;
    sub_1a9cc8();
    memoryASet32(ds, ebx + 3795614, eax);
    memoryASet32(ds, ebx + 3795618, esi);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b1153() // 0160:1b1153 +long
{
    esp -= 4;
    goto loc_1b1153;
loc_1aeb57: // 0160:1aeb57
    esp += 0x00000018;
    goto loc_1afe30;
    // gap 4817 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4892 bytes
loc_1b1153: // 0160:1b1153
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    edx = 0;
    esi = 0;
    memoryASet16(ds, 0x39ef86, dx);
    ebp = 0;
loc_1b1169: // 0160:1b1169
    edx = memoryAGet32(ds, esi + 3795594);
    if (ebp == edx)
        goto loc_1b1391;
    eax = memoryAGet32(ds, esi + 3795598);
    memoryASet32(ds, esi + 3795606, eax);
    ebx = memoryAGet32(ds, esi + 3795594);
    eax = memoryAGet32(ds, esi + 3795610);
    ecx = memoryAGet32(ds, esi + 3795598);
    ebx += eax;
    eax = memoryAGet32(ds, esi + 3795614);
    memoryASet32(ds, esi + 3795594, ebx);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 3795594);
    memoryASet32(ds, esi + 3795602, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 3795598, ecx);
    memoryASet32(ds, esp + 16, eax);
    edx = memoryAGet32(ds, esi + 3795614);
    edx += memoryAGet32(ds, 0x39f078);
    eax = memoryAGet32(ds, esi + 3795602);
    memoryASet32(ds, esi + 3795614, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, esi + 3795606);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (ebp != memoryAGet32(ds, esi + 3795622))
        goto loc_1b1278;
    eax = memoryAGet32(ds, esi + 3795614);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1b1243;
    edx = memoryAGet32(ds, esi + 3795610);
    if (ebp != edx)
        goto loc_1b1243;
loc_1b123b: // 0160:1b123b
    memoryASet32(ds, esi + 3795618, edx);
    goto loc_1b127e;
loc_1b1243: // 0160:1b1243
    eax = memoryAGet32(ds, esi + 3795610);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1b1269;
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esi + 3795610))
        goto loc_1b1264;
    edi = 0x00000004;
    goto loc_1b1269;
loc_1b1264: // 0160:1b1264
    edi = 0xfffffffc;
loc_1b1269: // 0160:1b1269
    eax = memoryAGet32(ds, esi + 3795618);
    eax += edi;
    edx = eax;
    edx &= 0x0000007f;
    goto loc_1b123b;
loc_1b1278: // 0160:1b1278
    memoryASet32(ds, esi + 3795610, ebp);
loc_1b127e: // 0160:1b127e
    eax = esp + 8;
    push32(eax);
    eax = esp + 16;
    push32(eax);
    edx = esp + 24;
    eax = esp + 28;
    sub_1ab7bc();
    if (!eax)
        goto loc_1b135c;
    edx = memoryAGet32(ds, esi + 3795594);
    eax = memoryAGet32(ds, esp + 20);
    edx &= 0x000001ff;
    eax <<= 9;
    eax |= edx;
    edx = memoryAGet32(ds, esi + 3795598);
    memoryASet32(ds, esi + 3795594, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx &= 0x000001ff;
    eax <<= 9;
    eax |= edx;
    ecx = esp;
    memoryASet32(ds, esi + 3795598, eax);
    ebx = esp + 4;
    eax = memoryAGet32(ds, esi + 3795610);
    push32(ebp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 3795614);
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_1ac6c2();
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3795610, eax);
    eax = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3795614, eax);
    if (ebp != ebx)
        goto loc_1b1320;
    if (ebx != eax)
        goto loc_1b1320;
    memoryASet32(ds, esi + 3795618, eax);
loc_1b1320: // 0160:1b1320
    eax = memoryAGet32(ds, esp);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_1b133f;
    eax = memoryAGet32(ds, esp + 4);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1b135c;
loc_1b133f: // 0160:1b133f
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x0000001e;
    sub_1b9c1d();
loc_1b135c: // 0160:1b135c
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_1b1370;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_1b1391;
loc_1b1370: // 0160:1b1370
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_1b138b;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_1aa77b();
loc_1b138b: // 0160:1b138b
    memoryASet32(ds, esi + 3795594, ebp);
loc_1b1391: // 0160:1b1391
    esi += 0x00000020;
    if (esi != 0x00000400)
        goto loc_1b1169;
    memoryASet16(ds, 0x39ef86, 0xffff);
    goto loc_1aeb57;
}
void sub_1b13ae() // 0160:1b13ae +long
{
    esp -= 4;
    goto loc_1b13ae;
loc_1afe31: // 0160:1afe31
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5495 bytes
loc_1b13ae: // 0160:1b13ae
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_1b13b5: // 0160:1b13b5
    if (memoryAGet32(ds, esi + 3795594) == 0x00000000)
        goto loc_1b1463;
    if (memoryAGet32(ds, esi + 3795622) != 0x00000000)
        goto loc_1b141d;
    eax = memoryAGet32(ds, esi + 3795598);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -1;
    eax = memoryAGet32(ds, esi + 3795594);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -1;
    eax = memoryAGet32(ds, esi + 3795618);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000) & stop("xxx");
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000002);
    ecx = 0x00000002;
    eax <<= 4;
    edx = edi;
    eax += 0x0028a9a8;
    goto loc_1b145e;
loc_1b141d: // 0160:1b141d
    eax = memoryAGet32(ds, esi + 3795598);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -7;
    eax = memoryAGet32(ds, esi + 3795594);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax + -5;
    eax = memoryAGet32(ds, esi + 3795618);
    push32(0x00000008);
    eax <<= 4;
    ecx = 0x00000007;
    eax += 0x0028a2a8;
loc_1b145e: // 0160:1b145e
    sub_19cb74();
loc_1b1463: // 0160:1b1463
    esi += 0x00000020;
    if (esi != 0x00000400)
        goto loc_1b13b5;
    goto loc_1afe31;
}
void sub_1b1477() // 0160:1b1477 +long +stackDrop4
{
    esp -= 4;
    goto loc_1b1477;
loc_1acf3b: // 0160:1acf3b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 17718 bytes
loc_1b1477: // 0160:1b1477
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ebp = memoryAGet32(ds, esp + 44);
    edi = eax;
    memoryASet32(ds, esp + 16, edx);
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 4, ecx);
    eax = ebp;
    edx = 0x0000ffff;
    eax <<= 4;
    esi = 0;
    eax -= ebp;
    memoryASet16(ds, 0x39ef86, dx);
    eax <<= 6;
    memoryASet32(ds, esp + 24, esi);
    memoryASet32(ds, esp, eax);
    goto loc_1b1571;
loc_1b14b3: // 0160:1b14b3
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp);
    ecx = 0;
    memoryASet32(ds, esp + 8, eax);
    goto loc_1b154a;
loc_1b14d6: // 0160:1b14d6
    eax = memoryAGet32(ds, esp + 20);
    al = memoryAGet(ds, ecx + eax + 2785384);
    eax &= 0x000000ff;
    if (eax == 0x00000080)
        goto loc_1b1549;
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1b1549;
    ebx = memoryAGet32(ds, esp + 4);
    ebx += ecx;
    if (ebx >= 0x000003c0)
        goto loc_1b1549;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 12);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = eax;
    ebx += memoryAGet32(ds, esp + 8);
    eax = 0;
    al = memoryAGet(ds, ebx + 3233192);
    edx &= 0x0000ffff;
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b1549;
    eax = memoryAGet32(ds, esp + 16);
    ecx = edi;
    esi++;
    memoryASet32(ds, esp + 24, eax);
loc_1b1549: // 0160:1b1549
    ecx++;
loc_1b154a: // 0160:1b154a
    if ((int32_t)ecx < (int32_t)edi)
        goto loc_1b14d6;
    ecx = memoryAGet32(ds, esp + 20);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 24);
    ebp++;
    ecx += 0x00000140;
    eax += 0x000003c0;
    edx++;
    memoryASet32(ds, esp + 20, ecx);
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 24, edx);
loc_1b1571: // 0160:1b1571
    eax = memoryAGet32(ds, esp + 24);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_1b14b3;
    eax = esi;
    esp += 0x0000001c;
    goto loc_1acf3b;
}
void sub_1b1589() // 0160:1b1589 +long +stackDrop16
{
    esp -= 4;
    goto loc_1b1589;
loc_1afb93: // 0160:1afb93
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
    return;
    // gap 6640 bytes
loc_1b1589: // 0160:1b1589
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp, eax);
    esi = edx;
    edx = memoryAGet32(ds, esp + 28);
    eax = memoryAGet32(ds, esp + 32);
    ebp = ecx;
    ebp = -ebp;
    if ((int32_t)edx < (int32_t)ebp)
        goto loc_1b1625;
    ebp = ecx + 960;
    if ((int32_t)edx > (int32_t)ebp)
        goto loc_1b1625;
    ebp = edi;
    ebp = -ebp;
    if ((int32_t)eax < (int32_t)ebp)
        goto loc_1b1625;
    ebp = edi + 400;
    if ((int32_t)eax > (int32_t)ebp)
        goto loc_1b1625;
    if (stop("postCondition"))
        goto loc_1b15d6;
    ecx += edx;
    esi -= edx;
    edx = 0;
loc_1b15d6: // 0160:1b15d6
    ebp = edx + ecx;
    if ((int32_t)ebp <= (int32_t)0x000003c0)
        goto loc_1b15e8;
    ecx = 0x000003c0;
    ecx -= edx;
loc_1b15e8: // 0160:1b15e8
    if (stop("postCondition"))
        goto loc_1b15f2;
    edi += eax;
    ebx -= eax;
    eax = 0;
loc_1b15f2: // 0160:1b15f2
    ebp = eax + edi;
    if ((int32_t)ebp <= (int32_t)0x00000190)
        goto loc_1b1604;
    edi = 0x00000190;
    edi -= eax;
loc_1b1604: // 0160:1b1604
    push32(0x00000000);
    push32(0x00000028);
    push32(0x000003c0);
    push32(0x00000140);
    push32(eax);
    push32(edx);
    eax = memoryAGet32(ds, esp + 48);
    push32(eax);
    push32(edi);
    edx = esi;
    eax = memoryAGet32(ds, esp + 32);
    sub_1a9d32();
    stop("stack_below", "0160:1b1620");
loc_1b1625: // 0160:1b1625
    esp += 0x00000004;
    goto loc_1afb93;
}
void sub_1b162d() // 0160:1b162d +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = ebx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 3;
    ebx = memoryAGet32(ds, esi + 1964612);
    ebp = memoryAGet32(ds, esi + 1964616);
    eax = memoryAGet32(ds, esi + 1964600);
    ecx += ebp;
    edi += ebx;
    push32(ecx);
    ebx = edx;
    ebp = memoryAGet32(ds, esi + 1964596);
    ecx = edi;
    edx = eax;
    eax = ebp;
    sub_1b1477();
    if (eax)
        goto loc_1b171e;
    eax = edi;
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000035;
    sub_1b9c1d();
    eax = 0x00000001;
    edx = 0;
    memoryASet32(ds, 0x39f0bc, eax);
    memoryASet32(ds, 0x39f004, edx);
    memoryASet32(ds, 0x39eff4, edx);
    memoryASet32(ds, 0x39f0ec, eax);
    eax = memoryAGet32(ds, 0x39f008);
    memoryASet32(ds, 0x39f098, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39f00c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = 0;
    push32(edi);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    push32(eax);
    ecx = 0x00000032;
    push32(ebx);
    memoryASet32(ds, 0x39f230, ecx);
    ecx = memoryAGet32(ds, esi + 1964596);
    push32(0x003155a8);
    eax = memoryAGet32(ds, esi + 1964600);
    edx = memoryAGet32(ds, esi + 1964588);
    push32(eax);
    ebx = memoryAGet32(ds, esi + 1964592);
    eax = 0x002a8068;
    sub_1a9d32();
    stop("stack_below", "0160:1b1714");
    sub_19dceb();
loc_1b171e: // 0160:1b171e
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_below", "0160:1b1720");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1b1722() // 0160:1b1722 +long
{
    esp -= 4;
    goto loc_1b1722;
loc_1afc2a: // 0160:1afc2a
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_below", "0160:1afc2f");
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 6897 bytes
loc_1b1722: // 0160:1b1722
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(edx);
    edi = ebx;
    ebp = ecx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 3;
    edx = memoryAGet32(ds, esi + 1964620);
    edi = ebx + edx;
    ebx = memoryAGet32(ds, esi + 1964624);
    eax = memoryAGet32(ds, esi + 1964596);
    ebp = ecx + ebx;
    edx = memoryAGet32(ds, esi + 1964600);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = edi;
    sub_1b1477();
    ebx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, eax);
    ecx = memoryAGet32(ds, esi + 1964604);
    eax = memoryAGet32(ds, esi + 1964608);
    edx = memoryAGet32(ds, esi + 1964600);
    ebp += eax;
    edi += ecx;
    push32(ebp);
    ecx = edi;
    eax = memoryAGet32(ds, esi + 1964596);
    sub_1b1477();
    eax += memoryAGet32(ds, esp + 4);
    if (eax)
        goto loc_1afc2a;
    eax = edi;
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19ceb7();
    edx = eax;
    eax = 0x00000035;
    sub_1b9c1d();
    eax = memoryAGet32(ds, 0x39f008);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = memoryAGet32(ds, 0x39f00c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = 0x00000032;
    ecx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x39f004, ecx);
    memoryASet32(ds, 0x39eff4, ecx);
    memoryASet32(ds, 0x39f230, ebp);
    memoryASet32(ds, 0x39f098, ecx);
    memoryASet32(ds, 0x39f0bc, ebx);
    ecx = memoryAGet32(ds, esi + 1964624);
    memoryASet32(ds, 0x39f0ec, ebx);
    ebp = eax + ecx;
    ebx = memoryAGet32(ds, esi + 1964620);
    push32(ebp);
    edi += ebx;
    push32(edi);
    ebx = memoryAGet32(ds, esi + 1964592);
    push32(0x003155a8);
    eax = memoryAGet32(ds, esi + 1964600);
    edx = memoryAGet32(ds, esi + 1964588);
    push32(eax);
    ecx = memoryAGet32(ds, esi + 1964596);
    eax = 0x002a8068;
    sub_1b1589();
    stop("stack_below", "0160:1b183d");
    ebp += memoryAGet32(ds, esi + 1964608);
    edx = memoryAGet32(ds, esi + 1964604);
    push32(ebp);
    edi += edx;
    push32(edi);
    eax = 0x002a8068;
    push32(0x003155a8);
    ecx = memoryAGet32(ds, esi + 1964600);
    ebx = memoryAGet32(ds, esi + 1964592);
    push32(ecx);
    edx = memoryAGet32(ds, esi + 1964588);
    ecx = memoryAGet32(ds, esi + 1964596);
    sub_1b1589();
    stop("stack_below", "0160:1b1875");
    sub_19dceb();
    goto loc_1afc2a;
}
void sub_1b1884() // 0160:1b1884 +long
{
    esp -= 4;
    goto loc_1b1884;
loc_1afe31: // 0160:1afe31
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6733 bytes
loc_1b1884: // 0160:1b1884
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x39f098) == 0x00000000)
        goto loc_1afe31;
    edx = memoryAGet32(ds, 0x39ef9c);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, 0x39f09c);
    eax += edx;
    eax += ebx;
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_1afe31;
    esi = memoryAGet32(ds, 0x39bde8);
    if (!esi)
        goto loc_1b18fc;
    if (esi == memoryAGet32(ds, 0x39bdec))
        goto loc_1b18fc;
    if (memoryAGet32(ds, 0x1dfad0) != 0x00000000)
        goto loc_1b18fc;
    edx = memoryAGet32(ds, 0x39f094);
    edx++;
    ebx = 0x00000008;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = 0x00000001;
    memoryASet32(ds, 0x39f094, edx);
    memoryASet32(ds, 0x1dfad0, eax);
loc_1b18fc: // 0160:1b18fc
    edx = memoryAGet32(ds, 0x39bde8);
    if (edx)
        goto loc_1b190c;
    memoryASet32(ds, 0x1dfad0, edx);
loc_1b190c: // 0160:1b190c
    eax = memoryAGet32(ds, 0x39f094);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = edx;
    ebx <<= 2;
    ebx += edx;
    ebx <<= 3;
    esi = edx;
    edx = memoryAGet32(ds, ebx + 1964592);
    eax = edx;
    eax <<= 2;
    eax += edx;
    edi = memoryAGet32(ds, ebx + 1964588);
    eax <<= 6;
    edi += eax;
    eax = memoryAGet32(ds, 0x39f008);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39f00c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (memoryAGet(ds, 0x3a72a5) == 0x00)
        goto loc_1afe31;
    if ((int32_t)memoryAGet32(ds, 0x39f094) >= (int32_t)0x00000004)
        goto loc_1b198d;
    ecx = eax;
    edx = edi;
    eax = esi;
    sub_1b162d();
    goto loc_1afe31;
loc_1b198d: // 0160:1b198d
    ecx = eax;
    edx = edi;
    eax = esi;
    sub_1b1722();
    goto loc_1afe31;
}
void sub_1b199d() // 0160:1b199d +long
{
    esp -= 4;
    goto loc_1b199d;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7014 bytes
loc_1b199d: // 0160:1b199d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x39f094);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = edx;
    if (memoryAGet32(ds, 0x39f098) == 0x00000000)
        goto loc_1afe30;
    eax = memoryAGet32(ds, 0x39ef9c);
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 2;
    esi += eax;
    eax = memoryAGet32(ds, 0x39f09c);
    eax += esi;
    if (memoryAGet32(ds, stop("GetOpAddress")) == 0x00000000)
        goto loc_1afe30;
    eax = memoryAGet32(ds, 0x39f008);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = eax;
    eax = memoryAGet32(ds, 0x39f00c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = ebx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    eax = memoryAGet32(ds, 0x39f094);
    esi <<= 3;
    if ((int32_t)eax < (int32_t)0x00000004)
        goto loc_1b1a39;
    eax = memoryAGet32(ds, esi + 1964620);
    edx = memoryAGet32(ds, esi + 1964624);
    ebp += eax;
    edi += edx;
    goto loc_1b1a49;
loc_1b1a39: // 0160:1b1a39
    edx = memoryAGet32(ds, esi + 1964612);
    ecx = memoryAGet32(ds, esi + 1964616);
    ebp += edx;
    edi += ecx;
loc_1b1a49: // 0160:1b1a49
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 3;
    edx = memoryAGet32(ds, esi + 1964592);
    edx += 0x000002e0;
    eax = edx;
    ebx = memoryAGet32(ds, esi + 1964600);
    eax <<= 2;
    ecx = memoryAGet32(ds, esi + 1964596);
    eax += edx;
    push32(ebx);
    eax <<= 6;
    edx = memoryAGet32(ds, esi + 1964588);
    eax += 0x0026e868;
    ebx = edi;
    eax += edx;
    edx = ebp;
    sub_19cb74();
    if ((int32_t)memoryAGet32(ds, 0x39f094) < (int32_t)0x00000004)
        goto loc_1afe30;
    ecx = memoryAGet32(ds, esi + 1964600);
    ebx = memoryAGet32(ds, esi + 1964592);
    eax = memoryAGet32(ds, esi + 1964608);
    ebx += 0x000002e0;
    edi += eax;
    eax = ebx;
    edx = memoryAGet32(ds, esi + 1964604);
    eax <<= 2;
    push32(ecx);
    eax += ebx;
    edx += ebp;
    eax <<= 6;
    ebx = memoryAGet32(ds, esi + 1964588);
    eax += 0x0026e868;
    ecx = memoryAGet32(ds, esi + 1964596);
    eax += ebx;
    ebx = edi;
    sub_19cb74();
    goto loc_1afe30;
}
void sub_1b1b53() // 0160:1b1b53 +long
{
    esp -= 4;
    goto loc_1b1b53;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7452 bytes
loc_1b1b53: // 0160:1b1b53
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    eax <<= 3;
    eax += edx;
    ebx = memoryAGet32(ds, stop("GetOpAddress"));
    eax = edx;
    eax <<= 2;
    eax += edx;
    edi = 0x003155a8;
    eax <<= 3;
    esi = 0x003be470;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x1dc0c4);
    eax <<= 2;
    edi += ebx;
    esi += eax;
    if (!ecx)
        goto loc_1b1ba8;
    push32(0x000003c0);
    ecx = 0x0000000c;
    ebx = 0x0000000d;
    push32(0x0000000d);
    edx = edi;
    eax = esi;
    sub_1aaf5d();
loc_1b1ba8: // 0160:1b1ba8
    ebp = 0;
loc_1b1baa: // 0160:1b1baa
    edx = edi;
    eax = esi;
    ecx = esi + 13;
loc_1b1bb1: // 0160:1b1bb1
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_1b1bb1;
    edi += 0x000003c0;
    ebp++;
    esi += 0x0000000d;
    if ((int32_t)ebp < (int32_t)0x0000000c)
        goto loc_1b1baa;
    goto loc_1afe30;
}
void sub_1b1bcf() // 0160:1b1bcf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    ecx = 0;
    ebx = 0;
loc_1b1bdb: // 0160:1b1bdb
    eax = memoryAGet32(ds, ebx + 3791138);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1b1c1e;
    eax = memoryAGet32(ds, ebx + 3791142);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= esi;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1b1c1e;
    ecx = 0x00000001;
loc_1b1c1e: // 0160:1b1c1e
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_1b1bdb;
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b1c2f() // 0160:1b1c2f +long
{
    esp -= 4;
    esp += 4;
}
void sub_1b1c89() // 0160:1b1c89 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = 0;
loc_1b1c8f: // 0160:1b1c8f
    if (memoryAGet32(ds, esi + 3795150) == 0x00000000)
        goto loc_1b1d32;
    if (memoryAGet32(ds, esi + 3795182) == 0x00000000)
        goto loc_1b1cec;
    if (memoryAGet32(ds, esi + 3795178) != 0x00000000)
        goto loc_1b1d32;
    eax = memoryAGet32(ds, esi + 3795154);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -22;
    eax = memoryAGet32(ds, esi + 3795150);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000017);
    edx = eax + -6;
    ecx = 0x0000000d;
    eax = 0x00270158;
    goto loc_1b1d2d;
loc_1b1cec: // 0160:1b1cec
    if (memoryAGet32(ds, esi + 3795162) == 0x00000000)
        goto loc_1b1d32;
    eax = memoryAGet32(ds, esi + 3795154);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -11;
    eax = memoryAGet32(ds, esi + 3795150);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x0000000c);
    edx = eax + -6;
    ecx = 0x0000000d;
    eax = 0x00270f18;
loc_1b1d2d: // 0160:1b1d2d
    sub_19cb74();
loc_1b1d32: // 0160:1b1d32
    esi += 0x00000024;
    if (esi != 0x0000006c)
        goto loc_1b1c8f;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b1dfc() // 0160:1b1dfc +long +stackDrop8
{
    esp -= 4;
    goto loc_1b1dfc;
loc_1ab042: // 0160:1ab042
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
    return;
    // gap 28084 bytes
loc_1b1dfc: // 0160:1b1dfc
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    ebp = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, esp + 4, eax);
    esi = edx;
    memoryASet32(ds, esp + 8, ebx);
    edi = ecx;
    edx = ebx;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = edi;
    edx -= esi;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = ecx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    memoryASet32(ds, esp, eax);
    eax = ebx;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1b1e91;
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1b1e64;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, eax, 0x00000200);
    goto loc_1b1e6e;
loc_1b1e64: // 0160:1b1e64
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, eax, 0xfffffe00);
loc_1b1e6e: // 0160:1b1e6e
    if (ecx)
        goto loc_1b1e77;
    ecx = 0x00000001;
loc_1b1e77: // 0160:1b1e77
    eax = ecx;
    ebx <<= 9;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ss, ebp, eax);
    goto loc_1b1ec9;
loc_1b1e91: // 0160:1b1e91
    if ((int32_t)esi >= (int32_t)edi)
        goto loc_1b1e9e;
    memoryASet32(ss, ebp, 0x00000200);
    goto loc_1b1ea5;
loc_1b1e9e: // 0160:1b1e9e
    memoryASet32(ss, ebp, 0xfffffe00);
loc_1b1ea5: // 0160:1b1ea5
    if (ebx)
        goto loc_1b1eae;
    ebx = 0x00000001;
loc_1b1eae: // 0160:1b1eae
    eax = ebx;
    ecx <<= 9;
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, edx, eax);
loc_1b1ec9: // 0160:1b1ec9
    esp += 0x0000000c;
    goto loc_1ab042;
}
void sub_1b1ed1() // 0160:1b1ed1 +long
{
    esp -= 4;
    goto loc_1b1ed1;
loc_1afe2d: // 0160:1afe2d
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    stop("stack_below", "0160:1afe34");
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 8346 bytes
loc_1b1ed1: // 0160:1b1ed1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebx = 0x00000002;
    push32(0x0039f0e4);
    eax = memoryAGet32(ds, 0x39f0c8);
    edx = 0;
    push32(0x0039f0e0);
    memoryASet32(ds, 0x1df9f0, edx);
    memoryASet32(ds, 0x39f060, ebx);
    memoryASet32(ds, 0x39f0d0, eax);
    eax = memoryAGet32(ds, 0x39f0cc);
    ebx = memoryAGet32(ds, 0x39f0d0);
    edx = memoryAGet32(ds, 0x39f0c4);
    memoryASet32(ds, 0x39f0d4, eax);
    ecx = eax;
    eax = memoryAGet32(ds, 0x39f0c0);
    sub_1b1dfc();
    eax = memoryAGet32(ds, 0x39f0c0);
    edx = memoryAGet32(ds, 0x39f0d0);
    ecx = memoryAGet32(ds, 0x39f0c0);
    memoryASet32(ds, 0x39f0d8, eax);
    eax = memoryAGet32(ds, 0x39f0c4);
    edx -= ecx;
    memoryASet32(ds, 0x39f0dc, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, 0x39f0c4);
    edx = memoryAGet32(ds, 0x39f0d4);
    edx -= esi;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = ebx;
    stop("imul ecx * ebx");
    edx = eax;
    stop("imul eax * eax");
    ecx += eax;
    memoryASet32(ds, esp, ecx);
    fild32(memoryAGet32(ds, esp));
    stop("disassembly failed at 160:1b1f81 fsqrt ");
    sub_1c7c02();
    memoryASet32(ds, 0x39f05c, fistp32());
    if (memoryAGet32(ds, 0x39f05c) != 0x00000000)
        goto loc_1b1fa1;
    memoryASet32(ds, 0x39f05c, 0x00000001);
loc_1b1fa1: // 0160:1b1fa1
    edx <<= 11;
    ecx = memoryAGet32(ds, 0x39f05c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax += 0x00000800;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, 0x1df9e4, eax);
    if (stop("postCondition"))
        goto loc_1b1fda;
    eax = 0x00001000;
    edi = memoryAGet32(ds, 0x1df9e4);
    eax -= edi;
    memoryASet32(ds, 0x1df9e4, eax);
    goto loc_1b1fe6;
loc_1b1fda: // 0160:1b1fda
    esi = eax + 2048;
    memoryASet32(ds, 0x1df9e4, esi);
loc_1b1fe6: // 0160:1b1fe6
    edx = 0x00000019;
    ebp = memoryAGet32(ds, 0x1df9e4);
    eax = memoryAGet32(ds, 0x39f05c);
    ebx = 0;
    ebp <<= 9;
    eax <<= 9;
    memoryASet32(ds, 0x1df9e8, edx);
    memoryASet32(ds, 0x1dfb80, ebx);
    memoryASet32(ds, 0x1dfb84, ebx);
    memoryASet32(ds, 0x1df9e4, ebp);
    memoryASet32(ds, 0x3be658, ebp);
    memoryASet32(ds, 0x39f05c, eax);
    if ((int32_t)eax >= (int32_t)0x00000800)
        goto loc_1afe2d;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792026);
    memoryASet32(ds, 0x39f0c0, edx);
    eax = memoryAGet32(ds, eax + 3792030);
    memoryASet32(ds, 0x39f0c4, eax);
    memoryASet32(ds, 0x39f0d8, edx);
    memoryASet32(ds, 0x39f0dc, eax);
    sub_1b2097();
    goto loc_1afe2d;
}
void sub_1b2062() // 0160:1b2062 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x39f0c0, edx);
    memoryASet32(ds, 0x39f0c4, edx);
    memoryASet32(ds, 0x39f0c8, edx);
    memoryASet32(ds, 0x39f0cc, edx);
    memoryASet32(ds, 0x39f0d0, edx);
    memoryASet32(ds, 0x39f0d4, edx);
    memoryASet32(ds, 0x39f060, edx);
    memoryASet32(ds, 0x39f064, edx);
    edx = pop32();
    esp += 4;
}
void sub_1b2097() // 0160:1b2097 +long
{
    esp -= 4;
    goto loc_1b2097;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8800 bytes
loc_1b2097: // 0160:1b2097
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, 0x39f0d8);
    edx = memoryAGet32(ds, 0x39f0c0);
    edx -= ebp;
    esi = eax;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edi = 0;
    memoryASet32(ds, 0x39f060, edi);
    memoryASet32(ds, ebx + 3792018, eax);
    eax = memoryAGet32(ds, 0x39f0c4);
    edx = memoryAGet32(ds, 0x39f0dc);
    eax -= edx;
    edx = eax;
    edx <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebx = esi + 2;
    memoryASet32(ds, edx + 3792022, eax);
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1b21a3;
    if (ecx >= 0x000003c0)
        goto loc_1b21a3;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    edx = ecx;
    esi <<= 4;
    edx = sar32(edx, 0x1f);
    esi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    ax = memoryAGet16(ds, stop("GetOpAddress"));
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = ebx;
    ebx <<= 4;
    ebx -= eax;
    ebx <<= 6;
    eax = 0;
    al = memoryAGet(ds, ecx + ebx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b21b7;
loc_1b21a3: // 0160:1b21a3
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792030, memoryAGet32(ds, eax + 3792030) + 0x00000400);
loc_1b21b7: // 0160:1b21b7
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792018) <= (int32_t)0x00000000)
        goto loc_1b21d6;
    memoryASet32(ds, eax + 3792050, 0x00000001);
    goto loc_1b21e0;
loc_1b21d6: // 0160:1b21d6
    memoryASet32(ds, eax + 3792050, 0xffffffff);
loc_1b21e0: // 0160:1b21e0
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792058, 0x00000001);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 3792158, ebp);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792162, ebp);
    eax = memoryAGet32(ds, 0x1df9f0);
    stop("cdq");
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00002000)
        goto loc_1b2242;
    eax = memoryAGet32(ds, 0x39ef98);
    ebx = 0x000000ff;
    sub_19ce55();
    edx = eax;
    eax = 0x0000003f;
    sub_1b9c1d();
loc_1b2242: // 0160:1b2242
    ecx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x39f0c0, ecx);
    memoryASet32(ds, 0x39f0c4, ecx);
    memoryASet32(ds, 0x39f0c8, ecx);
    memoryASet32(ds, 0x39f0cc, ecx);
    memoryASet32(ds, 0x39f0d0, ecx);
    memoryASet32(ds, 0x39f0d4, ecx);
    memoryASet32(ds, 0x39f188, ebx);
    memoryASet32(ds, 0x39f020, ecx);
    memoryASet32(ds, 0x39f0bc, ecx);
    sub_19ede7();
    if (memoryAGet32(ds, 0x1df9ec) == 0x00000000)
        goto loc_1b2292;
    sub_1abc5e();
loc_1b2292: // 0160:1b2292
    ebp = 0;
    ah = 0;
    memoryASet32(ds, 0x1df9ec, ebp);
    memoryASet(ds, 0x3a72a5, ah);
    goto loc_1afe30;
}
void sub_1b2507() // 0160:1b2507 +long
{
    esp -= 4;
    esp += 4;
}
void sub_1b2706() // 0160:1b2706 +long
{
    esp -= 4;
    goto loc_1b2706;
loc_1aaf55: // 0160:1aaf55
    esp += 0x00000014;
    goto loc_1afe30;
    // gap 20179 bytes
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_below", "0160:1afe32");
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 10447 bytes
loc_1b2706: // 0160:1b2706
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, esp + 16, edx);
    edx = 0;
    memoryASet16(ds, 0x39ef86, dx);
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax + -6;
    ebp = memoryAGet32(ds, ebx + 3792050);
    eax = edi;
    eax += ebp;
    ebx = edi;
    memoryASet32(ds, esp + 12, eax);
    eax = esp;
    edx = esp + 8;
    push32(eax);
    eax = esp + 8;
    ecx = esi;
    push32(eax);
    eax = esp + 20;
    memoryASet32(ds, esp + 16, esi);
    sub_1ab7bc();
    if (!eax)
        goto loc_1b27ad;
    ebp = -ebp;
    eax = edi;
    eax += ebp;
    memoryASet32(ds, esp + 12, eax);
    eax = esp;
    edx = esp + 8;
    push32(eax);
    eax = esp + 8;
    ecx = esi;
    push32(eax);
    ebx = edi;
    eax = esp + 20;
    sub_1ab7bc();
    if (eax)
        goto loc_1aaf55;
loc_1b27ad: // 0160:1b27ad
    ebx = memoryAGet32(ds, esp + 16);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    edx = memoryAGet32(ds, esp + 12);
    eax <<= 2;
    esi = 0;
    eax -= ebx;
    memoryASet32(ds, 0x39f220, esi);
    eax <<= 2;
    edx <<= 9;
    memoryASet32(ds, eax + 3796618, edx);
    memoryASet32(ds, eax + 3796626, esi);
    memoryASet32(ds, eax + 3796630, esi);
    memoryASet32(ds, eax + 3796654, esi);
    memoryASet32(ds, eax + 3796638, esi);
    edx = memoryAGet32(ds, esp + 8);
    esi = 0x000001f4;
    edx += 0x00000006;
    memoryASet32(ds, eax + 3796650, esi);
    edx <<= 9;
    memoryASet32(ds, eax + 3796622, edx);
    edx = memoryAGet32(ds, eax + 3796618);
    memoryASet32(ds, eax + 3796642, edx);
    edx = memoryAGet32(ds, eax + 3796622);
    edi = 0x0000000c;
    memoryASet32(ds, eax + 3796646, edx);
    memoryASet32(ds, 0x39f224, edi);
    memoryASet32(ds, eax + 3796634, ebp);
    if ((int32_t)(ebp & ebp) <= 0)
        goto loc_1b2844;
    memoryASet32(ds, eax + 3796658, 0x002a99d8);
    goto loc_1aaf55;
loc_1b2844: // 0160:1b2844
    memoryASet32(ds, eax + 3796658, 0x00314718);
    goto loc_1aaf55;
}
void sub_1b2c74() // 0160:1b2c74 +long
{
    esp -= 4;
    esp += 4;
}
void sub_1b32d4() // 0160:1b32d4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39ee8a) == 0x00000000)
        goto loc_1b331b;
    eax = memoryAGet32(ds, 0x39ee8e);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -5;
    eax = memoryAGet32(ds, 0x39ee8a);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000006);
    edx = eax + -8;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, 0x39eeb2);
    sub_19cb74();
loc_1b331b: // 0160:1b331b
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b331f() // 0160:1b331f +long
{
    esp -= 4;
    goto loc_1b331f;
loc_1afe30: // 0160:1afe30
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13544 bytes
loc_1b331f: // 0160:1b331f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3792026);
    memoryASet32(ds, 0x39f0c8, edx);
    ecx = memoryAGet32(ds, eax + 3792050);
    edx = ecx;
    edx <<= 2;
    edx -= ecx;
    memoryASet32(ds, 0x1dfbac, edx);
    edx = memoryAGet32(ds, eax + 3792030);
    edx += 0x00000400;
    memoryASet32(ds, 0x39f0cc, edx);
    edx = memoryAGet32(ds, 0x39f0c8);
    memoryASet32(ds, 0x39f0c0, edx);
    edx = memoryAGet32(ds, 0x39f0cc);
    memoryASet32(ds, 0x39f0c4, edx);
    edx = memoryAGet32(ds, 0x39f0c0);
    memoryASet32(ds, 0x39f0d8, edx);
    edx = memoryAGet32(ds, 0x39f0c4);
    memoryASet32(ds, 0x39f0dc, edx);
    edx = memoryAGet32(ds, 0x39f0c8);
    memoryASet32(ds, 0x39f0d0, edx);
    edx = memoryAGet32(ds, 0x39f0cc);
    memoryASet32(ds, 0x39f0d4, edx);
    ecx = 0;
    esi = memoryAGet32(ds, eax + 3792050);
    memoryASet32(ds, 0x1df9f0, ecx);
    if ((int32_t)(esi & esi) <= 0)
        goto loc_1b33c8;
    memoryASet32(ds, 0x1df9e4, 0x00040000);
    goto loc_1b33d2;
loc_1b33c8: // 0160:1b33c8
    memoryASet32(ds, 0x1df9e4, 0x000c0000);
loc_1b33d2: // 0160:1b33d2
    if ((int32_t)ebx <= (int32_t)0x00000096)
        goto loc_1b33df;
    ebx = 0x00000096;
loc_1b33df: // 0160:1b33df
    eax = 0x00000400;
    edx = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x39f05c, eax);
    eax = edx * 0x000000ac;
    ebx -= 0x00000018;
    ebx <<= 9;
    memoryASet32(ds, 0x39f068, ebx);
    memoryASet32(ds, eax + 3792006, 0x00000040);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edi = 0x00000100;
    ebp = 0x00000002;
    esi = 0;
    memoryASet32(ds, 0x1dfbbc, edi);
    memoryASet32(ds, 0x1dfbb0, esi);
    memoryASet32(ds, 0x1dfbb4, esi);
    edx = 0x00000011;
    memoryASet32(ds, eax + 3792002, esi);
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x39ef94);
    memoryASet32(ds, 0x39efac, edx);
    memoryASet32(ds, 0x39f234, ebx);
    memoryASet32(ds, 0x39f1ac, esi);
    memoryASet32(ds, 0x39f0bc, ebx);
    memoryASet32(ds, 0x39f020, ebx);
    eax -= 0x000000fa;
    memoryASet32(ds, 0x39f064, ebp);
    memoryASet32(ds, 0x39ef94, eax);
    if (stop("postCondition"))
        goto loc_1b3480;
    memoryASet32(ds, 0x39ef94, esi);
loc_1b3480: // 0160:1b3480
    sub_19de2c();
    goto loc_1afe30;
}
void sub_1b348a() // 0160:1b348a +long
{
    esp -= 4;
    goto loc_1b348a;
loc_1afe2d: // 0160:1afe2d
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13907 bytes
loc_1b348a: // 0160:1b348a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebx = memoryAGet32(ds, 0x39ef98);
    ebx = ebx * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3792062) != 0x00000000)
        goto loc_1afe2d;
    if (memoryAGet32(ds, ebx + 3792058) != 0x00000000)
        goto loc_1afe2d;
    eax = memoryAGet32(ds, ebx + 3792026);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = ebx;
    ecx = edx;
    esi = 0;
    ecx <<= 4;
    eax += eax;
    ecx -= edx;
    memoryASet32(ds, esp, eax);
    ecx <<= 6;
    ebp = memoryAGet32(ds, esp);
    ecx += edi;
loc_1b3506: // 0160:1b3506
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1b3555;
    if (edi >= 0x000003c0)
        goto loc_1b3555;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    eax += ebp;
    ax = memoryAGet16(ds, eax + 2332680);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x39ef86);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3233192);
    flags.zero = eax == 0x00000080;
    stop("setne");
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b355c;
loc_1b3555: // 0160:1b3555
    eax = 0x00000001;
    goto loc_1b355e;
loc_1b355c: // 0160:1b355c
    eax = 0;
loc_1b355e: // 0160:1b355e
    if (!eax)
        goto loc_1b3574;
    if ((int32_t)ebx >= (int32_t)0x0000016e)
        goto loc_1b3574;
    ecx += 0x000003c0;
    ebx++;
    esi++;
    goto loc_1b3506;
loc_1b3574: // 0160:1b3574
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_1afe2d;
    eax = esi;
    sub_1b331f();
    goto loc_1afe2d;
}
void sub_1b3780() // 0160:1b3780 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    ebx = memoryAGet32(ds, 0x39f0d8);
    memoryASet32(ds, 0x39f064, edx);
    edx = memoryAGet32(ds, 0x39f0c0);
    edx -= ebx;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, edx + 3792018, eax);
    edx = memoryAGet32(ds, 0x39f0c4);
    esi = memoryAGet32(ds, 0x39f0dc);
    edx -= esi;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edi = memoryAGet32(ds, 0x39ef98);
    edx = eax;
    eax = edi * 0x000000ac;
    memoryASet32(ds, eax + 3792022, edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3792018) <= (int32_t)0x00000000)
        goto loc_1b381a;
    memoryASet32(ds, eax + 3792050, 0x00000001);
    goto loc_1b3824;
loc_1b381a: // 0160:1b381a
    memoryASet32(ds, eax + 3792050, 0xffffffff);
loc_1b3824: // 0160:1b3824
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    memoryASet32(ds, eax + 3792058, 0x00000001);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3792158, edx);
    eax = memoryAGet32(ds, 0x39ef98) * 0x000000ac;
    edi = 0x00000010;
    memoryASet32(ds, eax + 3792162, edx);
    ebp = 0x00000001;
    memoryASet32(ds, 0x39f0c0, edx);
    memoryASet32(ds, 0x39f0c4, edx);
    memoryASet32(ds, 0x39f0c8, edx);
    memoryASet32(ds, 0x39f0cc, edx);
    memoryASet32(ds, 0x39f0d0, edx);
    memoryASet32(ds, 0x39f0d4, edx);
    memoryASet32(ds, 0x39f234, edx);
    memoryASet32(ds, 0x39f1ac, edx);
    memoryASet32(ds, 0x39efac, edi);
    memoryASet32(ds, 0x39f188, ebp);
    memoryASet32(ds, 0x39f020, edx);
    memoryASet32(ds, 0x39f0bc, edx);
    sub_19ede7();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b396c() // 0160:1b396c +long
{
    esp -= 4;
    esp += 4;
}
void sub_1b39a9() // 0160:1b39a9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    if (eax)
        goto loc_1b39bf;
    ecx = 0;
    goto loc_1b3a2f;
loc_1b39bf: // 0160:1b39bf
    if (stop("postCondition"))
        goto loc_1b39c3;
    edi = -edi;
loc_1b39c3: // 0160:1b39c3
    ebx = 0x0000000e;
    edx = 0x00008000;
    eax = 0x40000000;
    ecx = 0x0000000f;
    esi = 0x0000001c;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp, esi);
loc_1b39e3: // 0160:1b39e3
    if (stop("postCondition"))
        goto loc_1b3a2d;
    if (edi == eax)
        goto loc_1b3a2d;
    esi = 0x00000001;
    cl = bl;
    ebp = edx;
    esi <<= cl;
    cl = memoryAGet(ds, esp + 4);
    ebp <<= cl;
    ecx = ebp;
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_1b3a08;
    eax -= ebp;
    edx -= esi;
    goto loc_1b3a0c;
loc_1b3a08: // 0160:1b3a08
    eax += ebp;
    edx += esi;
loc_1b3a0c: // 0160:1b3a0c
    cl = memoryAGet(ds, esp);
    esi = 0x00000001;
    ebp = memoryAGet32(ds, esp + 4);
    ebx--;
    ebp--;
    esi <<= cl;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebp);
    ecx -= 0x00000002;
    eax += esi;
    memoryASet32(ds, esp, ecx);
    goto loc_1b39e3;
loc_1b3a2d: // 0160:1b3a2d
    ecx = edx;
loc_1b3a2f: // 0160:1b3a2f
    eax = ecx;
    esp += 0x00000008;
    goto loc_1b69f3;
    // gap 12218 bytes
loc_1b69f3: // 0160:1b69f3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b3a39() // 0160:1b3a39 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    sub_1ab048();
    memoryASet32(ds, 0x39bde8, edx);
    memoryASet32(ds, 0x39bde4, edx);
    edx = pop32();
    esp += 4;
}
void sub_1b3e6c() // 0160:1b3e6c +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    ebx = memoryAGet32(ds, 0x1dfbd4) * 0x00006255;
    esi = memoryAGet32(ds, 0x1dfbd8);
    ebx += 0x00003619;
    edx -= eax;
    ebx += esi;
    edx++;
    ebx &= 0x0000ffff;
    stop("imul edx * ebx");
    edx = sar32(edx, 0x10);
    memoryASet32(ds, 0x1dfbd4, ebx);
    eax += edx;
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b403a() // 0160:1b403a +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    if ((int32_t)memoryAGet32(ds, 0x3be770) < (int32_t)0x00000032)
        goto loc_1b4276;
    edi = 0x00000032;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    esi -= edx;
    if ((int32_t)edx <= (int32_t)0x00000019)
        goto loc_1b4065;
    esi += edi;
loc_1b4065: // 0160:1b4065
    if ((int32_t)esi >= (int32_t)0x00000032)
        goto loc_1b406f;
    esi = 0x00000032;
loc_1b406f: // 0160:1b406f
    if ((int32_t)esi <= (int32_t)0x000000fa)
        goto loc_1b407c;
    esi = 0x000000fa;
loc_1b407c: // 0160:1b407c
    if (esi != memoryAGet32(ds, 0x39efbc))
        goto loc_1b408c;
    if (ebx == memoryAGet32(ds, 0x39f0b8))
        goto loc_1b409a;
loc_1b408c: // 0160:1b408c
    if (ecx == 0x00000024)
        goto loc_1b40f9;
    if (ecx == 0x00000004)
        goto loc_1b40f9;
loc_1b409a: // 0160:1b409a
    eax = memoryAGet32(ds, 0x1dfbc4) * 0x000000ac;
    edi = memoryAGet32(ds, eax + 3792074);
    if (ecx == edi)
        goto loc_1b40e8;
    if (ecx != 0x00000024)
        goto loc_1b40b8;
    if (edi == 0x00000036)
        goto loc_1b40e8;
loc_1b40b8: // 0160:1b40b8
    if (ecx != 0x00000027)
        goto loc_1b40d0;
    eax = memoryAGet32(ds, 0x1dfbc4) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) == 0x0000002f)
        goto loc_1b40e8;
loc_1b40d0: // 0160:1b40d0
    if (ecx != 0x00000033)
        goto loc_1b40f9;
    eax = memoryAGet32(ds, 0x1dfbc4) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3792074) != 0x0000003e)
        goto loc_1b40f9;
loc_1b40e8: // 0160:1b40e8
    edx = 0;
    eax = 0x00000001;
    memoryASet32(ds, 0x1dfbdc, edx);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1b40f9: // 0160:1b40f9
    memoryASet32(ds, 0x1dfbdc, memoryAGet32(ds, 0x1dfbdc) + 1);
    if (memoryAGet(ds, 0x1dfbdc) & 0x0f)
        goto loc_1b4276;
    if (ecx < 0x00000019)
        goto loc_1b4170;
    if (ecx <= 0x00000019)
        goto loc_1b41be;
    if (ecx < 0x00000027)
        goto loc_1b4149;
    if (ecx <= 0x00000027)
        goto loc_1b41b5;
    if (ecx < 0x00000033)
        goto loc_1b413b;
    if (ecx <= 0x00000033)
        goto loc_1b41c7;
    if (ecx == 0x0000003d)
        goto loc_1b41e2;
    goto loc_1b41e9;
loc_1b413b: // 0160:1b413b
    if (ecx == 0x0000002b)
        goto loc_1b41a3;
    goto loc_1b41e9;
loc_1b4149: // 0160:1b4149
    if (ecx < 0x00000024)
        goto loc_1b4162;
    if (ecx <= 0x00000024)
        goto loc_1b41ac;
    flags.zero = ecx == 0x00000026;
loc_1b4157: // 0160:1b4157
    if (flags.zero)
        goto loc_1b41d0;
    goto loc_1b41e9;
loc_1b4162: // 0160:1b4162
    if (ecx == 0x00000022)
        goto loc_1b41be;
    goto loc_1b41e9;
loc_1b4170: // 0160:1b4170
    if (ecx < 0x0000000b)
        goto loc_1b4191;
    if (ecx <= 0x0000000b)
        goto loc_1b41c7;
    if (ecx < 0x00000014)
        goto loc_1b4187;
    if (ecx <= 0x00000014)
        goto loc_1b41d9;
    flags.zero = ecx == 0x00000016;
    goto loc_1b4157;
loc_1b4187: // 0160:1b4187
    if (ecx == 0x00000010)
        goto loc_1b41d9;
    goto loc_1b41e9;
loc_1b4191: // 0160:1b4191
    if (ecx < 0x00000004)
        goto loc_1b419f;
    if (ecx <= 0x00000004)
        goto loc_1b41ac;
    if (ecx == 0x00000006)
        goto loc_1b41b5;
    goto loc_1b41e9;
loc_1b419f: // 0160:1b419f
    if (ecx)
        goto loc_1b41e9;
loc_1b41a3: // 0160:1b41a3
    memoryASet(ds, 0x3a72a7, 0x01);
    goto loc_1b41e9;
loc_1b41ac: // 0160:1b41ac
    memoryASet(ds, 0x3a72a8, 0x01);
    goto loc_1b41e9;
loc_1b41b5: // 0160:1b41b5
    memoryASet(ds, 0x3a72a9, 0x01);
    goto loc_1b41e9;
loc_1b41be: // 0160:1b41be
    memoryASet(ds, 0x3a72aa, 0x01);
    goto loc_1b41e9;
loc_1b41c7: // 0160:1b41c7
    memoryASet(ds, 0x3a72ab, 0x01);
    goto loc_1b41e9;
loc_1b41d0: // 0160:1b41d0
    memoryASet(ds, 0x3a72ac, 0x01);
    goto loc_1b41e9;
loc_1b41d9: // 0160:1b41d9
    memoryASet(ds, 0x3a72ad, 0x01);
    goto loc_1b41e9;
loc_1b41e2: // 0160:1b41e2
    memoryASet(ds, 0x3a72af, 0x01);
loc_1b41e9: // 0160:1b41e9
    if (ecx == 0x00000004)
        goto loc_1b41f7;
    if (ecx != 0x00000024)
        goto loc_1b4276;
loc_1b41f7: // 0160:1b41f7
    if (esi == memoryAGet32(ds, 0x39efbc))
        goto loc_1b425a;
    if (esi < 0x00000096)
        goto loc_1b4221;
    if (esi <= 0x00000096)
        goto loc_1b4241;
    if (esi < 0x000000c8)
        goto loc_1b425a;
    if (esi <= 0x000000c8)
        goto loc_1b424a;
    if (esi == 0x000000fa)
        goto loc_1b4253;
    goto loc_1b425a;
loc_1b4221: // 0160:1b4221
    if (esi < 0x00000032)
        goto loc_1b425a;
    if (esi <= 0x00000032)
        goto loc_1b422f;
    if (esi == 0x00000064)
        goto loc_1b4238;
    goto loc_1b425a;
loc_1b422f: // 0160:1b422f
    memoryASet(ds, 0x3a726e, 0x01);
    goto loc_1b425a;
loc_1b4238: // 0160:1b4238
    memoryASet(ds, 0x3a726f, 0x01);
    goto loc_1b425a;
loc_1b4241: // 0160:1b4241
    memoryASet(ds, 0x3a7270, 0x01);
    goto loc_1b425a;
loc_1b424a: // 0160:1b424a
    memoryASet(ds, 0x3a7271, 0x01);
    goto loc_1b425a;
loc_1b4253: // 0160:1b4253
    memoryASet(ds, 0x3a7272, 0x01);
loc_1b425a: // 0160:1b425a
    if (ebx == memoryAGet32(ds, 0x39f0b8))
        goto loc_1b4276;
    if (!ebx)
        goto loc_1b426f;
    memoryASet(ds, 0x3a7278, 0x01);
    goto loc_1b4276;
loc_1b426f: // 0160:1b426f
    memoryASet(ds, 0x3a7279, 0x01);
loc_1b4276: // 0160:1b4276
    eax = 0;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b43e8() // 0160:1b43e8 +long
{
    esp -= 4;
    goto loc_1b43e8;
loc_1b3c2e: // 0160:1b3c2e
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1972 bytes
loc_1b43e8: // 0160:1b43e8
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebx = eax;
    memoryASet32(ds, esp + 16, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    eax = memoryAGet32(ds, 0x1dfbc4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ecx != eax)
        goto loc_1b4422;
    eax = 0;
    goto loc_1b4652;
loc_1b4422: // 0160:1b4422
    ebx = ebx * 0x000000ac;
    edi = 0x00000010;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, ebx + 3792026);
    ecx = 0;
    memoryASet32(ds, esp + 12, edx);
    edx = memoryAGet32(ds, ebx + 3792030);
    esi = 0;
    memoryASet32(ds, esp + 8, edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, esp + 4, edx);
loc_1b4450: // 0160:1b4450
    ebp = memoryAGet32(ds, ebx + 3792026);
    if (!ebp)
        goto loc_1b44e8;
    edx = memoryAGet32(ds, esp + 12);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    ebp = eax;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul ebp * ebp");
    stop("imul eax * eax");
    edx = memoryAGet32(ds, esp + 16);
    eax += ebp;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b44e8;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, esp))
        goto loc_1b44cb;
    eax = memoryAGet32(ds, ebx + 3792102);
    edi -= 0x00000002;
    if ((int32_t)eax >= (int32_t)0x00000019)
        goto loc_1b44bf;
    edi--;
loc_1b44bf: // 0160:1b44bf
    if ((int32_t)memoryAGet32(ds, ebx + 3792102) >= (int32_t)0x00000032)
        goto loc_1b44e8;
    edi--;
    goto loc_1b44e8;
loc_1b44cb: // 0160:1b44cb
    eax = memoryAGet32(ds, ebx + 3792102);
    ecx += 0x00000002;
    if ((int32_t)eax >= (int32_t)0x00000019)
        goto loc_1b44da;
    ecx++;
loc_1b44da: // 0160:1b44da
    if ((int32_t)memoryAGet32(ds, ebx + 3792102) >= (int32_t)0x00000032)
        goto loc_1b44e4;
    ecx++;
loc_1b44e4: // 0160:1b44e4
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
loc_1b44e8: // 0160:1b44e8
    esi++;
    ebx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1b4450;
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    ebp = eax;
loc_1b450d: // 0160:1b450d
    esi = memoryAGet32(ds, ebx + 3791138);
    if (!esi)
        goto loc_1b455b;
    edx = memoryAGet32(ds, esp + 12);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3791142);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul esi * esi");
    stop("imul eax * eax");
    edx = memoryAGet32(ds, esp + 16);
    eax += esi;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b4556;
    ecx++;
loc_1b4556: // 0160:1b4556
    if ((int32_t)eax >= (int32_t)ebp)
        goto loc_1b455b;
    ecx++;
loc_1b455b: // 0160:1b455b
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_1b450d;
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    ebp = eax;
loc_1b457b: // 0160:1b457b
    if (memoryAGet32(ds, ebx + 3795150) == 0x00000000)
        goto loc_1b45ce;
    edx = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, ebx + 3795150);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3795154);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul esi * esi");
    stop("imul eax * eax");
    edx = memoryAGet32(ds, esp + 16);
    eax += esi;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b45c9;
    ecx++;
loc_1b45c9: // 0160:1b45c9
    if ((int32_t)eax >= (int32_t)ebp)
        goto loc_1b45ce;
    ecx++;
loc_1b45ce: // 0160:1b45ce
    ebx += 0x00000024;
    if (ebx != 0x0000006c)
        goto loc_1b457b;
    ebx = memoryAGet32(ds, 0x1dfbc4) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    ebp = memoryAGet32(ds, ebx + 3792026);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3792030);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul eax * eax");
    edx = esi;
    stop("imul edx * edx");
    edx += eax;
    eax = 0;
    if ((int32_t)edx >= (int32_t)0x00010000)
        goto loc_1b462d;
    eax = 0x00000001;
loc_1b462d: // 0160:1b462d
    if ((int32_t)edx >= (int32_t)0x00004000)
        goto loc_1b4636;
    eax++;
loc_1b4636: // 0160:1b4636
    if ((int32_t)edx >= (int32_t)0x00001900)
        goto loc_1b463f;
    eax++;
loc_1b463f: // 0160:1b463f
    edx = memoryAGet32(ds, esp + 4);
    edi <<= 24;
    eax <<= 16;
    edx <<= 8;
    eax |= edi;
    eax |= edx;
    eax |= ecx;
loc_1b4652: // 0160:1b4652
    esp += 0x00000014;
    goto loc_1b3c2e;
}
void sub_1b47fd() // 0160:1b47fd +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = 0;
    ebx = 0;
    esi = 0;
loc_1b4807: // 0160:1b4807
    edx = memoryAGet32(ds, esi + 3792026);
    if (!edx)
        goto loc_1b4825;
    edx = 0x00000640;
    eax = ecx;
    sub_1b43e8();
    memoryASet32(ds, ebx + 3925604, eax);
    goto loc_1b482b;
loc_1b4825: // 0160:1b4825
    memoryASet32(ds, ebx + 3925604, edx);
loc_1b482b: // 0160:1b482b
    ebx += 0x00000004;
    ecx++;
    esi += 0x000000ac;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1b4807;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b483f() // 0160:1b483f +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    eax = 0;
    memoryASet32(ds, esp, edx);
loc_1b4850: // 0160:1b4850
    if ((int32_t)eax >= (int32_t)0x00000004)
        goto loc_1b48a7;
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    eax = memoryAGet32(ds, ecx);
    memoryASet32(ds, edi, memoryAGet32(ds, edi) + eax);
    eax = memoryAGet32(ds, 0x3be78c);
    memoryASet32(ds, ebx, memoryAGet32(ds, ebx) + eax);
    eax = memoryAGet32(ds, 0x3be790);
    memoryASet32(ds, ecx, memoryAGet32(ds, ecx) + eax);
    ebp = memoryAGet32(ds, 0x3be780);
    edx = memoryAGet32(ds, esi);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = memoryAGet32(ds, edi);
    eax = memoryAGet32(ds, 0x3be784);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000) & stop("xxx");
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    stop("imul ebp * ebp");
    stop("imul eax * eax");
    memoryASet32(ds, esp, memoryAGet32(ds, esp) + 1);
    eax += ebp;
    goto loc_1b4850;
loc_1b48a7: // 0160:1b48a7
    eax = memoryAGet32(ds, esp);
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b742d() // 0160:1b742d +long
{
    esp -= 4;
    goto loc_1b742d;
loc_1b69f3: // 0160:1b69f3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2611 bytes
loc_1b742d: // 0160:1b742d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x1dfbd0);
    eax--;
    if (eax > 0x000003bf)
        goto loc_1b69f3;
    ecx = 0x0000001f;
    edi = 0x001b7375;
    stop("disassembly failed at 160:1b744e repne scasw ax, word ptr es:[edi]");
    edx = memoryAGet32(ds, 0x1dfbc4) * 0x000000ac;
    indirectJump(cs, memoryAGet32(cs, stop("GetOpAddress"))); return; // 0160:1b745b;
}
void sub_1b7a0e() // 0160:1b7a0e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    esi <<= 3;
    esi += eax;
    esi <<= 2;
    eax = memoryAGet32(ds, 0x3be780);
    memoryASet32(ds, esi + 3795078, eax);
    eax = memoryAGet32(ds, 0x3be784);
    memoryASet32(ds, esi + 3795082, eax);
    eax = memoryAGet32(ds, 0x3be7a4);
    memoryASet32(ds, esi + 3795094, eax);
    eax = memoryAGet32(ds, 0x3be7a8);
    memoryASet32(ds, esi + 3795098, eax);
    eax = 0x0039e886;
    eax += esi;
    ecx = eax + 20;
    ebx = eax + 16;
    edx = eax + 4;
    sub_1b483f();
    edx = memoryAGet32(ds, 0x3be794);
    edx -= eax;
    memoryASet32(ds, esi + 3795106, edx);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7a70() // 0160:1b7a70 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    edx = memoryAGet32(ds, 0x3be780);
    memoryASet32(ds, eax + 3794754, edx);
    edx = memoryAGet32(ds, 0x3be784);
    memoryASet32(ds, eax + 3794758, edx);
    edx = memoryAGet32(ds, 0x3be7a4);
    memoryASet32(ds, eax + 3794770, edx);
    edx = memoryAGet32(ds, 0x3be7a8);
    memoryASet32(ds, eax + 3794774, edx);
    eax += 0x0039e742;
    ecx = eax + 20;
    ebx = eax + 16;
    edx = eax + 4;
    sub_1b483f();
    eax = memoryAGet32(ds, 0x3be794);
    memoryASet32(ds, 0x3be6a4, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7ace() // 0160:1b7ace +long
{
    esp -= 4;
    push32(esi);
    if (memoryAGet32(ds, 0x1dfbc8) == 0x00000000)
        goto loc_1b7b0a;
    if (memoryAGet32(ds, 0x3be7bc) != 0x00000000)
        goto loc_1b7b0a;
    if (memoryAGet32(ds, 0x1dfbcc) != 0x00000000)
        goto loc_1b7b0a;
    esi = memoryAGet32(ds, 0x3be6a4);
    esi--;
    memoryASet32(ds, 0x3be6a4, esi);
    if (stop("postCondition"))
        goto loc_1b7b0a;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, ebx, eax);
    eax = memoryAGet32(ds, edx);
    memoryASet32(ds, ecx, eax);
    eax = 0x00000001;
    esi = pop32();
    esp += 4;
    return;
loc_1b7b0a: // 0160:1b7b0a
    eax = 0;
    esi = pop32();
    esp += 4;
}
void sub_1b7b0e() // 0160:1b7b0e +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    edx = memoryAGet32(ds, 0x3be780);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, 0x3be784);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, 0x3be7a4);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, 0x3be7a8);
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = pop32();
    esp += 4;
}
void sub_1b7b4c() // 0160:1b7b4c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x3be6a8);
    edx++;
    memoryASet32(ds, 0x3be6a8, edx);
    if ((int32_t)edx >= (int32_t)0x00000bb8)
        goto loc_1b7b6b;
    eax = 0x00000001;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b7b6b: // 0160:1b7b6b
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x0000003d;
    sub_1b403a();
    if (!eax)
        goto loc_1b7b8a;
    memoryASet(ds, 0x3a72a5, 0x01);
loc_1b7b8a: // 0160:1b7b8a
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7b8f() // 0160:1b7b8f +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x39ef98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    stop("disassembly failed at 160:1b7baa setl al");
    eax &= 0x000000ff;
    edx = pop32();
    esp += 4;
}
void sub_1b7bb4() // 0160:1b7bb4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x1dfa0c);
    if (edx)
        goto loc_1b7c8f;
    if (memoryAGet32(ds, 0x1dc028) != 0x00000000)
        goto loc_1b7c8f;
    if (memoryAGet32(ds, 0x39f234) != 0x00000000)
        goto loc_1b7c8f;
    if (memoryAGet32(ds, 0x39eff4) == 0x00000000)
        goto loc_1b7c8f;
    if (memoryAGet32(ds, 0x1dfbc8) == 0x00000000)
        goto loc_1b7c0e;
    eax = memoryAGet32(ds, 0x39ef98);
    if (eax == memoryAGet32(ds, 0x1dfbc4))
        goto loc_1b7c0e;
    sub_1b3a39();
    memoryASet32(ds, 0x1dfbc8, edx);
loc_1b7c0e: // 0160:1b7c0e
    if (memoryAGet32(ds, 0x1dfbc8) == 0x00000000)
        goto loc_1b7c35;
    memoryASet32(ds, 0x3be770, memoryAGet32(ds, 0x3be770) + 1);
    sub_1b3a39();
    sub_1b7b4c();
    if (!eax)
        goto loc_1b7c8f;
    sub_1b742d();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b7c35: // 0160:1b7c35
    eax = memoryAGet32(ds, 0x39ef98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 1963758);
    if ((int32_t)ebx >= (int32_t)0x00000003)
        goto loc_1b7c8f;
    ecx = 0x00000001;
    eax = memoryAGet32(ds, 0x39ef98);
    memoryASet32(ds, 0x1dfbcc, ebx);
    esi = 0;
    memoryASet32(ds, 0x1dfbc8, ecx);
    memoryASet32(ds, 0x3be79c, esi);
    memoryASet32(ds, 0x1dfbc4, eax);
    sub_1b47fd();
    memoryASet32(ds, 0x1dfbd0, ecx);
    memoryASet32(ds, 0x3be6a8, esi);
    memoryASet32(ds, 0x3be770, esi);
loc_1b7c8f: // 0160:1b7c8f
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7de6() // 0160:1b7de6 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = 0;
loc_1b7dec: // 0160:1b7dec
    eax = 0;
    al = memoryAGet(ds, ebx);
    ebx++;
    if (!eax)
        goto loc_1b7e27;
    edx <<= 4;
    if ((int32_t)eax < (int32_t)0x00000030)
        goto loc_1b7e07;
    if ((int32_t)eax > (int32_t)0x00000039)
        goto loc_1b7e07;
    edx += eax;
    edx -= 0x00000030;
loc_1b7e07: // 0160:1b7e07
    if ((int32_t)eax < (int32_t)0x00000041)
        goto loc_1b7e16;
    if ((int32_t)eax > (int32_t)0x00000046)
        goto loc_1b7e16;
    edx += eax;
    edx -= 0x00000037;
loc_1b7e16: // 0160:1b7e16
    if ((int32_t)eax < (int32_t)0x00000061)
        goto loc_1b7dec;
    if ((int32_t)eax > (int32_t)0x00000066)
        goto loc_1b7dec;
    edx += eax;
    edx -= 0x00000057;
    goto loc_1b7dec;
loc_1b7e27: // 0160:1b7e27
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7e2c() // 0160:1b7e2c +long
{
    esp -= 4;
    goto loc_1b7e2c;
loc_1b7e27: // 0160:1b7e27
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b7e2c: // 0160:1b7e2c
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = 0;
loc_1b7e32: // 0160:1b7e32
    eax = 0;
    al = memoryAGet(ds, ebx);
    ebx++;
    if (!eax)
        goto loc_1b7e27;
    edx = edx * 0x0000000a;
    if ((int32_t)eax < (int32_t)0x00000030)
        goto loc_1b7e32;
    if ((int32_t)eax > (int32_t)0x00000039)
        goto loc_1b7e32;
    edx += eax;
    edx -= 0x00000030;
    goto loc_1b7e32;
}
void sub_1b7e84() // 0160:1b7e84 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000100;
    ebx = esp;
    eax += 0x0000000f;
    memoryASet32(ds, esp, edx);
    eax = sar32(eax, 0x04);
    edx = esp;
    memoryASet32(ds, esp + 4, eax);
    eax = 0x00000031;
    sub_1c897a();
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_1b7eb4;
    eax = 0;
    goto loc_1b7ec8;
loc_1b7eb4: // 0160:1b7eb4
    eax = 0;
    ax = memoryAGet16(ds, esp + 12);
    edx = eax;
    eax = 0;
    edx <<= 16;
    ax = memoryAGet16(ds, esp);
    eax |= edx;
loc_1b7ec8: // 0160:1b7ec8
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7f05() // 0160:1b7f05 +long
{
    esp -= 4;
    goto loc_1b7f05;
loc_1b7ec8: // 0160:1b7ec8
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 55 bytes
loc_1b7f05: // 0160:1b7f05
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000101;
    ebx = esp;
    eax >>= 16;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 12, eax);
    edx = esp;
    eax = 0x00000031;
    sub_1c897a();
    eax = memoryAGet32(ds, esp + 24);
    goto loc_1b7ec8;
}
void sub_1b7f2d() // 0160:1b7f2d +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = edx;
    esi = memoryAGet32(ds, 0x3f3d64);
    edx = eax;
    eax = esi;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x3f3d60);
    edx = ecx;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x3f3d54);
    edx = ebx;
    sub_1c899d();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b7f5b() // 0160:1b7f5b +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = edx;
    esi = memoryAGet32(ds, 0x3f3d64);
    edx = eax;
    eax = esi;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x3f3d60);
    edx = ecx;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x3f3d58);
    edx = ebx;
    sub_1c7f7f();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b7fe1() // 0160:1b7fe1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
    ebx = eax;
    edx = 0x00000043;
    ebx &= 0x0000ffff;
    eax = 0;
    sub_1b7f2d();
    ebx = ecx;
    edx = 0x00000044;
    ebx = sar32(ebx, 0x10);
    eax = 0;
    ebx &= 0x000000ff;
    sub_1b7f5b();
    eax = memoryAGet32(ds, 0x3f3d5c);
    edx = esi;
    sub_1c7f7f();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b8023() // 0160:1b8023 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    ebx = eax;
    edx = 0x00000043;
    ebx &= 0x0000ffff;
    eax = 0;
    sub_1b7f2d();
    ebx = ecx;
    edx = 0x00000044;
    ebx = sar32(ebx, 0x10);
    eax = 0;
    ebx &= 0x000000ff;
    sub_1b7f5b();
    eax = memoryAGet32(ds, 0x3f3d5c);
    sub_1c8995();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b8061() // 0160:1b8061 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    ebp = edx;
    edx = 0x00000043;
    esi = ebx;
    eax = 0;
    esi = sar32(esi, 0x10);
    ebx &= 0x0000ffff;
    esi &= 0x000000ff;
    ecx = ebx;
    sub_1b7f2d();
    edx = 0x00000044;
    ebx = esi;
    eax = 0;
    edi = 0;
    sub_1b7f5b();
    edx = 0x00000043;
    eax = memoryAGet32(ds, 0x3f3d60);
    ebx = memoryAGet32(ds, esp);
    sub_1c7f7f();
    goto loc_1b80fc;
loc_1b80aa: // 0160:1b80aa
    eax = memoryAGet32(ds, 0x3f3d54);
    edx = ecx;
    sub_1c899d();
    edx = 0;
    eax = memoryAGet32(ds, 0x3f3d5c);
    dl = memoryAGet(ds, ebx);
    ecx++;
    sub_1c7f7f();
    if ((int32_t)ecx <= (int32_t)0x0000ffff)
        goto loc_1b80fa;
    edx = 0x00000044;
    eax = memoryAGet32(ds, 0x3f3d60);
    sub_1c7f7f();
    esi++;
    eax = memoryAGet32(ds, 0x3f3d58);
    edx = esi;
    sub_1c7f7f();
    edx = 0x00000043;
    eax = memoryAGet32(ds, 0x3f3d60);
    ecx = 0;
    sub_1c7f7f();
loc_1b80fa: // 0160:1b80fa
    ebx++;
    edi++;
loc_1b80fc: // 0160:1b80fc
    if ((int32_t)edi < (int32_t)ebp)
        goto loc_1b80aa;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1b8158() // 0160:1b8158 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = eax;
    eax = memoryAGet32(ds, 0x1dfc48);
    edx <<= 9;
    eax = sar32(eax, 0x00000001);
    edx += eax;
    ebx = memoryAGet32(ds, 0x1dfc48);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = eax + eax;
    edx = 0x00000001;
    ebx = ecx;
    eax = esi;
    sub_1b7f2d();
    edx = 0x00000001;
    eax = esi + 8;
    ebx = ecx;
    sub_1b7f2d();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b819a() // 0160:1b819a +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = ebx;
    if (stop("postCondition"))
        goto loc_1b81df;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    eax <<= 15;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = 0;
loc_1b81bd: // 0160:1b81bd
    if ((int32_t)eax <= (int32_t)0x000000ff)
        goto loc_1b81c9;
    eax = sar32(eax, 0x00000001);
    edx++;
    goto loc_1b81bd;
loc_1b81c9: // 0160:1b81c9
    ebx = eax;
    edx <<= 12;
    ebx <<= 4;
    eax = ecx;
    ebx |= edx;
    edx = 0x00000009;
    sub_1b7f2d();
loc_1b81df: // 0160:1b81df
    if (stop("postCondition"))
        goto loc_1b821f;
    edx = esi;
    edx <<= 8;
    edx -= esi;
    edx <<= 15;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = 0;
loc_1b81fc: // 0160:1b81fc
    if ((int32_t)eax <= (int32_t)0x000000ff)
        goto loc_1b8208;
    eax = sar32(eax, 0x00000001);
    edx++;
    goto loc_1b81fc;
loc_1b8208: // 0160:1b8208
    ebx = eax;
    edx <<= 12;
    ebx <<= 4;
    eax = ecx + 8;
    ebx |= edx;
    edx = 0x00000009;
    sub_1b7f2d();
loc_1b821f: // 0160:1b821f
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b8222() // 0160:1b8222 +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    edi = edx;
    ebp = ebx;
    esi = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, 0x3f3d68);
    ebx = 0x00000002;
    edi -= edx;
    ebp -= edx;
    esi -= edx;
    edx = 0;
    sub_1b7f5b();
    eax = memoryAGet32(ds, esp);
    ebx = 0x00000002;
    edx = 0;
    eax += 0x00000008;
    memoryASet32(ds, esp + 24, esi);
    sub_1b7f5b();
    if (stop("postCondition"))
        goto loc_1b826d;
    eax = memoryAGet32(ds, esp);
    edx = ecx;
    sub_1b8158();
loc_1b826d: // 0160:1b826d
    if (ebp != memoryAGet32(ds, esp + 24))
        goto loc_1b8279;
    edx = 0;
    memoryASet32(ds, esp + 24, edx);
loc_1b8279: // 0160:1b8279
    esi = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 24);
    esi += 0x00000008;
    if (!ebx)
        goto loc_1b82ae;
    eax = ebx + -1;
    ecx = eax;
    edx = 0x00000002;
    ecx = sar32(ecx, 0x07);
    memoryASet32(ds, esp + 4, eax);
    ecx &= 0x0000ffff;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_1b7f2d();
    eax = memoryAGet32(ds, esp + 4);
    goto loc_1b82ca;
loc_1b82ae: // 0160:1b82ae
    ecx = edi;
    ecx = sar32(ecx, 0x07);
    edx = 0x00000002;
    ecx &= 0x0000ffff;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_1b7f2d();
    eax = edi;
loc_1b82ca: // 0160:1b82ca
    eax &= 0x0000007f;
    eax <<= 9;
    edx = 0x00000003;
    memoryASet32(ds, esp + 4, eax);
    ebx = eax;
    eax = memoryAGet32(ds, esp);
    sub_1b7f2d();
    edx = 0x00000002;
    ebx = ecx;
    eax = esi;
    sub_1b7f2d();
    ebx = memoryAGet32(ds, esp + 4);
    edx = 0x00000003;
    eax = esi;
    sub_1b7f2d();
    ecx = ebp + -1;
    ebp = ecx;
    edx = 0x00000004;
    ebp = sar32(ebp, 0x07);
    eax = memoryAGet32(ds, esp);
    ebp &= 0x0000ffff;
    ecx &= 0x0000007f;
    ebx = ebp;
    ecx <<= 9;
    sub_1b7f2d();
    edx = 0x00000005;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_1b7f2d();
    eax = edi;
    esi = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x07);
    edx = 0x0000000a;
    eax &= 0x0000ffff;
    edi &= 0x0000007f;
    memoryASet32(ds, esp + 4, eax);
    ebx = eax;
    eax = memoryAGet32(ds, esp);
    edi <<= 9;
    sub_1b7f2d();
    edx = 0x0000000b;
    eax = memoryAGet32(ds, esp);
    ebx = edi;
    esi += 0x00000008;
    sub_1b7f2d();
    edx = 0x00000004;
    ebx = ebp;
    eax = esi;
    sub_1b7f2d();
    edx = 0x00000005;
    ebx = ecx;
    eax = esi;
    sub_1b7f2d();
    ebx = memoryAGet32(ds, esp + 4);
    edx = 0x0000000a;
    eax = esi;
    sub_1b7f2d();
    edx = 0x0000000b;
    ebx = edi;
    eax = esi;
    sub_1b7f2d();
    ebx = memoryAGet32(ds, esp + 36);
    edx = memoryAGet32(ds, esp + 32);
    eax = memoryAGet32(ds, esp);
    cl = memoryAGet(ds, esp);
    sub_1b819a();
    eax = 0x00000001;
    eax <<= cl;
    if (!(memoryAGet32(ds, 0x1dfc50) & eax))
        goto loc_1b83fd;
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_1b83e6;
    ebx = 0x00000008;
    eax = memoryAGet32(ds, esp);
    edx = 0;
    sub_1b7f5b();
    ebx = 0x00000008;
    eax = esi;
    goto loc_1b83f6;
loc_1b83e6: // 0160:1b83e6
    eax = memoryAGet32(ds, esp);
    ebx = 0;
    edx = 0;
    sub_1b7f5b();
    eax = esi;
    ebx = 0;
loc_1b83f6: // 0160:1b83f6
    edx = 0;
    sub_1b7f5b();
loc_1b83fd: // 0160:1b83fd
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_below, 16/14");
    esp += 4;
    esp += 16;
}
void sub_1b8406() // 0160:1b8406 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = 0x00000001;
    edx = 0x0000004c;
    eax = 0;
    sub_1b7f5b();
    eax = memoryAGet32(ds, 0x1dfbf0);
    edx = 0x00000043;
    eax -= 0x00000100;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x1dfbf0);
    edx = 0;
    eax -= 0x000000f5;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x1dfbf0);
    edx = 0x00000003;
    eax -= 0x00000100;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x1dfbf0);
    edx = 0;
    eax -= 0x000000f5;
    sub_1c7f7f();
    ebx = memoryAGet32(ds, 0x1dfc4c);
    edx = 0x0000000e;
    ebx--;
    eax = 0;
    bl |= 0xc0;
    ecx = 0;
    sub_1b7f5b();
    esi = 0;
    goto loc_1b854f;
loc_1b8484: // 0160:1b8484
    ebx = 0x00000002;
    edx = esi;
    eax = ecx;
    sub_1b7f5b();
    ebx = 0x00000002;
    edx = 0x0000000d;
    eax = ecx;
    sub_1b7f5b();
    edx = 0x00000001;
    ebx = esi;
    eax = ecx;
    sub_1b7f2d();
    edx = 0x00000002;
    ebx = esi;
    eax = ecx;
    sub_1b7f2d();
    edx = 0x00000003;
    ebx = esi;
    eax = ecx;
    sub_1b7f2d();
    edx = 0x00000004;
    ebx = esi;
    eax = ecx;
    sub_1b7f2d();
    edx = 0x00000005;
    ebx = esi;
    eax = ecx;
    sub_1b7f2d();
    edx = 0x0000000a;
    ebx = esi;
    eax = ecx;
    sub_1b7f2d();
    edx = 0x0000000b;
    ebx = esi;
    eax = ecx;
    sub_1b7f2d();
    edx = 0x00000006;
    ebx = esi;
    eax = ecx;
    sub_1b7f5b();
    edx = 0x00000007;
    ebx = esi;
    eax = ecx;
    sub_1b7f5b();
    edx = 0x00000008;
    ebx = esi;
    eax = ecx;
    sub_1b7f5b();
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_1b8540;
    ebx = 0x0000000f;
    edx = 0x0000000c;
    goto loc_1b8547;
loc_1b8540: // 0160:1b8540
    edx = 0x0000000c;
    ebx = esi;
loc_1b8547: // 0160:1b8547
    eax = ecx;
    sub_1b7f5b();
    ecx++;
loc_1b854f: // 0160:1b854f
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, 0x1dfc4c))
        goto loc_1b8484;
    ebx = 0x00000003;
    edx = 0x0000004c;
    eax = 0;
    sub_1b7f5b();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b8571() // 0160:1b8571 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_1b8406();
    sub_1b8406();
    eax = memoryAGet32(ds, 0x1dfbf0);
    edx = 0x00000001;
    eax -= 0x00000100;
    sub_1c7f7f();
    edx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x1dfbf8, edx);
    eax = 0;
    memoryASet32(ds, 0x1dfbf8, ebx);
    sub_1b7fe1();
    eax = memoryAGet32(ds, 0x1dfbf8);
    edx = eax + ebx;
    memoryASet32(ds, 0x1dfbf8, edx);
    edx = 0;
    sub_1b7fe1();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b85c3() // 0160:1b85c3 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x1dfbf0);
    edx = 0x00000003;
    eax -= 0x00000100;
    ebx = 0;
    sub_1c7f7f();
    edx = 0x0000004c;
    eax = 0;
    sub_1b7f5b();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b85ea() // 0160:1b85ea +long
{
    esp -= 4;
    push32(edx);
    edx = 0x00000080;
    eax = 0;
    sub_1b7fe1();
    eax = 0;
    sub_1b8023();
    if (eax == 0x00000080)
        goto loc_1b8609;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_1b8609: // 0160:1b8609
    edx = 0x00000081;
    eax = 0x00040000;
    sub_1b7fe1();
    eax = 0;
    sub_1b8023();
    if (eax != 0x00000080)
        goto loc_1b8637;
    eax = 0x00040000;
    sub_1b8023();
    if (eax == 0x00000081)
        goto loc_1b863e;
loc_1b8637: // 0160:1b8637
    eax = 0x00000100;
    edx = pop32();
    esp += 4;
    return;
loc_1b863e: // 0160:1b863e
    edx = 0x00000082;
    eax = 0x00080000;
    sub_1b7fe1();
    eax = 0;
    sub_1b8023();
    if (eax != 0x00000080)
        goto loc_1b867d;
    eax = 0x00040000;
    sub_1b8023();
    if (eax != 0x00000081)
        goto loc_1b867d;
    eax = 0x00080000;
    sub_1b8023();
    if (eax == 0x00000082)
        goto loc_1b8684;
loc_1b867d: // 0160:1b867d
    eax = 0x00000200;
    edx = pop32();
    esp += 4;
    return;
loc_1b8684: // 0160:1b8684
    edx = 0x00000083;
    eax = 0x000c0000;
    sub_1b7fe1();
    eax = 0;
    sub_1b8023();
    if (eax != 0x00000080)
        goto loc_1b867d;
    eax = 0x00040000;
    sub_1b8023();
    if (eax != 0x00000081)
        goto loc_1b867d;
    eax = 0x00080000;
    sub_1b8023();
    if (eax != 0x00000082)
        goto loc_1b867d;
    eax = 0x000c0000;
    sub_1b8023();
    if (eax != 0x00000083)
        goto loc_1b867d;
    eax = 0x00000400;
    edx = pop32();
    esp += 4;
}
void sub_1b86db() // 0160:1b86db +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000080;
    eax = 0x001d21ef;
    edx = 0;
    edi = esp;
    memoryASet32(ds, 0x1dfbf4, edx);
    sub_1c89b1();
    esi = eax;
    push32(edi);
loc_1b86fc: // 0160:1b86fc
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    if (al == 0x00)
        goto loc_1b8714;
    al = memoryAGet(ds, esi + 1);
    esi += 0x00000002;
    memoryASet(ds, edi + 1, al);
    edi += 0x00000002;
    if (al != 0x00)
        goto loc_1b86fc;
loc_1b8714: // 0160:1b8714
    edi = pop32();
    eax = esp;
    sub_1c8a0b();
    ah = 0;
    memoryASet(ds, esp + 3, ah);
    eax = esp;
    sub_1b7de6();
    edi = eax + 256;
    memoryASet32(ds, 0x1dfbf0, edi);
    edi = eax + 258;
    memoryASet32(ds, 0x3f3d64, edi);
    edi = eax + 259;
    memoryASet32(ds, 0x3f3d60, edi);
    edi = eax + 260;
    memoryASet32(ds, 0x3f3d54, edi);
    edi = eax + 261;
    ebx = memoryAGet32(ds, 0x1dfbf0);
    eax += 0x00000107;
    memoryASet32(ds, 0x3f3d58, edi);
    memoryASet32(ds, 0x3f3d5c, eax);
    if ((int32_t)ebx < (int32_t)0x00000310)
        goto loc_1b87ca;
    if ((int32_t)ebx > (int32_t)0x00000360)
        goto loc_1b87ca;
    sub_1b8571();
    sub_1b85ea();
    memoryASet32(ds, 0x1dfbf4, eax);
    if ((int32_t)eax >= (int32_t)0x00000200)
        goto loc_1b87bc;
    push32(eax);
    push32(0x001d21f8);
    sub_1c7f2e();
    esp += 0x00000008;
    push32(0x001d2210);
    sub_1c7f2e();
    esp += 0x00000004;
    memoryASet32(ds, 0x1dfbf4, edx);
loc_1b87bc: // 0160:1b87bc
    if (memoryAGet32(ds, 0x1dfbf4) != 0x00000000)
        goto loc_1b87ca;
    sub_1b85c3();
loc_1b87ca: // 0160:1b87ca
    eax = memoryAGet32(ds, 0x1dfbf4);
    esp += 0x00000080;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b87da() // 0160:1b87da +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ah = 0xe1;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b87ea: // 0160:1b87ea
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b87ea;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d04);
    ecx = 0x0000ffff;
loc_1b87fd: // 0160:1b87fd
    al = in8(dx);
    if (--cx && !!(al & 0x80))
        goto loc_1b87fd;
    eax = memoryAGet32(ds, 0x3f3d08);
    sub_1c8995();
    ebx = eax;
    edx = memoryAGet32(ds, 0x3f3d04);
    ecx = 0x0000ffff;
loc_1b8819: // 0160:1b8819
    al = in8(dx);
    if (--cx && !!(al & 0x80))
        goto loc_1b8819;
    eax = memoryAGet32(ds, 0x3f3d08);
    ebx <<= 8;
    sub_1c8995();
    edx = memoryAGet32(ds, 0x1dfc58);
    ebx |= eax;
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1b8839;
    ebx = edx;
loc_1b8839: // 0160:1b8839
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b883f() // 0160:1b883f +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x3f3d44);
    edx = 0x00000001;
    eax += 0x00000006;
    sub_1c7f7f();
    eax = 0x00000001;
    sub_1c8a2a();
    eax = memoryAGet32(ds, 0x3f3d44);
    edx = 0;
    eax += 0x00000006;
    sub_1c7f7f();
    eax = 0x00000001;
    sub_1c8a2a();
    edx = memoryAGet32(ds, 0x3f3d04);
    ecx = 0x0000ffff;
loc_1b8881: // 0160:1b8881
    al = in8(dx);
    if (--cx && !!(al & 0x80))
        goto loc_1b8881;
    eax = memoryAGet32(ds, 0x3f3d44);
    eax += 0x0000000a;
    sub_1c8995();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b8896() // 0160:1b8896 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x3f3d3c) == 0x00000000)
        goto loc_1b88e6;
    eax = memoryAGet32(ds, 0x3f3d44);
    edx = 0x0000000e;
    eax += 0x00000004;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x3f3d44);
    eax += 0x00000005;
    sub_1c8995();
    ebx = eax;
    eax = memoryAGet32(ds, 0x3f3d44);
    edx = 0x0000000e;
    eax += 0x00000004;
    bl |= 0x02;
    sub_1c7f7f();
    eax = memoryAGet32(ds, 0x3f3d44);
    edx = ebx;
    eax += 0x00000005;
    sub_1c7f7f();
loc_1b88e6: // 0160:1b88e6
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b88e9() // 0160:1b88e9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = 0;
    edx = 0;
    goto loc_1b88f8;
loc_1b88f2: // 0160:1b88f2
    sub_1b883f();
    edx++;
loc_1b88f8: // 0160:1b88f8
    stop("disassembly failed at 160:1b88fb setl bl");
    ecx = ebx;
    ecx &= 0x000000ff;
    stop("setne");
    ebx &= 0x000000ff;
    if (ecx & ebx)
        goto loc_1b88f2;
    flags.zero = eax == 0x000000aa;
    stop("disassembly failed at 160:1b891d sete al");
    eax &= 0x000000ff;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b8929() // 0160:1b8929 +long
{
    bool temp_cond0;

    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1b88e9();
    memoryASet32(ds, 0x1dfc54, eax);
    sub_1b87da();
    memoryASet32(ds, 0x3f3d50, eax);
    temp_cond0 = stop("preCondition");
    temp_cond0 = stop("preCondition");
    stop("disassembly failed at 160:1b8945 setge al");
    eax &= 0x000000ff;
    memoryASet32(ds, 0x3f3d48, eax);
    eax = memoryAGet32(ds, 0x3f3d50);
    eax = sar32(eax, 0x08);
    flags.zero = eax == 0x00000003;
    stop("disassembly failed at 160:1b895d sete al");
    eax &= 0x000000ff;
    memoryASet32(ds, 0x3f3d3c, eax);
    eax = memoryAGet32(ds, 0x3f3d50);
    eax = sar32(eax, 0x08);
    flags.zero = eax == 0x00000004;
    stop("disassembly failed at 160:1b8975 sete al");
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, 0x3f3d3c);
    memoryASet32(ds, 0x3f3d4c, eax);
    if (edx)
        goto loc_1b8990;
    if (!eax)
        goto loc_1b899a;
loc_1b8990: // 0160:1b8990
    esi = 0;
    memoryASet32(ds, 0x3f3d40, esi);
    goto loc_1b89a4;
loc_1b899a: // 0160:1b899a
    memoryASet32(ds, 0x3f3d40, 0x00000001);
loc_1b89a4: // 0160:1b89a4
    sub_1b8896();
    ah = 0xd1;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b89b6: // 0160:1b89b6
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b89b6;
    al = ah;
    out8(dx, al);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b89c2() // 0160:1b89c2 +long
{
    esp -= 4;
    push32(ecx);
loc_1b89c3: // 0160:1b89c3
    ah = memoryAGet(ds, edx);
    if (al == ah)
        goto loc_1b89d0;
    if (!ah)
        goto loc_1b89d0;
    edx++;
    goto loc_1b89c3;
loc_1b89d0: // 0160:1b89d0
    ecx = edx;
    ah = memoryAGet(ds, ecx);
    edx++;
    if (al != ah)
        goto loc_1b89fe;
loc_1b89d9: // 0160:1b89d9
    eax = 0;
    al = memoryAGet(ds, edx);
    ecx = 0;
    flags.zero = eax == 0x00000020;
    stop("setne");
    cl = al;
    stop("setne");
    eax &= 0x000000ff;
    if (!(ecx & eax))
        goto loc_1b89fe;
    al = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, ebx, al);
    ebx++;
    goto loc_1b89d9;
loc_1b89fe: // 0160:1b89fe
    memoryASet(ds, ebx, 0x00);
    ecx = pop32();
    esp += 4;
}
void sub_1b8a03() // 0160:1b8a03 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000100;
    edx = 0;
    edi = memoryAGet32(ds, 0x1dfc58);
    memoryASet32(ds, 0x3f3d4c, edx);
    memoryASet32(ds, 0x3f3d3c, edx);
    memoryASet32(ds, 0x3f3d40, edx);
    memoryASet32(ds, 0x1dfc54, edx);
    if ((int32_t)edi >= (int32_t)0x00000100)
        goto loc_1b8a3e;
loc_1b8a37: // 0160:1b8a37
    eax = 0;
    goto loc_1b8c15;
loc_1b8a3e: // 0160:1b8a3e
    eax = 0x001d2225;
    edi = esp + 128;
    sub_1c89b1();
    esi = eax;
    push32(edi);
loc_1b8a52: // 0160:1b8a52
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    if (al == 0x00)
        goto loc_1b8a6a;
    al = memoryAGet(ds, esi + 1);
    esi += 0x00000002;
    memoryASet(ds, edi + 1, al);
    edi += 0x00000002;
    if (al != 0x00)
        goto loc_1b8a52;
loc_1b8a6a: // 0160:1b8a6a
    edi = pop32();
    eax = esp + 128;
    sub_1c8a0b();
    if (memoryAGet(ds, esp + 128) == 0x00)
        goto loc_1b8a37;
    ebx = esp;
    edx = esp + 128;
    eax = 0x00000041;
    sub_1b89c2();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_1b7de6();
    memoryASet32(ds, 0x3f3d44, eax);
    eax = 0x00000049;
    sub_1b89c2();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_1b7e2c();
    memoryASet32(ds, 0x3f3cf4, eax);
    eax = 0x00000044;
    sub_1b89c2();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_1b7e2c();
    memoryASet32(ds, 0x3f3cf8, eax);
    eax = 0x00000054;
    sub_1b89c2();
    eax = esp;
    sub_1b7e2c();
    memoryASet32(ds, 0x3f3d34, eax);
    eax = memoryAGet32(ds, 0x3f3d44);
    eax += 0x0000000a;
    memoryASet32(ds, 0x3f3d08, eax);
    eax = memoryAGet32(ds, 0x3f3d44);
    eax += 0x0000000c;
    memoryASet32(ds, 0x3f3d0c, eax);
    eax = memoryAGet32(ds, 0x3f3d44);
    eax += 0x0000000e;
    ebp = memoryAGet32(ds, 0x3f3cf4);
    memoryASet32(ds, 0x3f3d04, eax);
    if ((int32_t)ebp >= (int32_t)0x00000008)
        goto loc_1b8b50;
    ecx = 0x00000020;
    esi = 0x00000021;
    edi = ebp + 8;
    memoryASet32(ds, 0x3f3cf0, ecx);
    memoryASet32(ds, 0x3f3cfc, esi);
    memoryASet32(ds, 0x3f3cf4, edi);
    goto loc_1b8b6e;
loc_1b8b50: // 0160:1b8b50
    eax = 0x000000a0;
    edx = 0x000000a1;
    ebx = ebp + 104;
    memoryASet32(ds, 0x3f3cf0, eax);
    memoryASet32(ds, 0x3f3cfc, edx);
    memoryASet32(ds, 0x3f3cf4, ebx);
loc_1b8b6e: // 0160:1b8b6e
    if (memoryAGet32(ds, 0x3f3cf8) != 0x00000000)
        goto loc_1b8b81;
    memoryASet32(ds, 0x3f3d10, 0x00000087);
loc_1b8b81: // 0160:1b8b81
    if (memoryAGet32(ds, 0x3f3cf8) != 0x00000001)
        goto loc_1b8b94;
    memoryASet32(ds, 0x3f3d10, 0x00000083);
loc_1b8b94: // 0160:1b8b94
    if (memoryAGet32(ds, 0x3f3cf8) != 0x00000002)
        goto loc_1b8ba7;
    memoryASet32(ds, 0x3f3d10, 0x00000081);
loc_1b8ba7: // 0160:1b8ba7
    if (memoryAGet32(ds, 0x3f3cf8) != 0x00000003)
        goto loc_1b8bba;
    memoryASet32(ds, 0x3f3d10, 0x00000082);
loc_1b8bba: // 0160:1b8bba
    eax = memoryAGet32(ds, 0x3f3cf8);
    eax += eax;
    memoryASet32(ds, 0x3f3d24, eax);
    eax++;
    memoryASet32(ds, 0x3f3d18, eax);
    memoryASet32(ds, 0x3f3d2c, 0x0000000a);
    eax = memoryAGet32(ds, 0x3f3cf8);
    edx = 0x0000000b;
    memoryASet32(ds, 0x3f3d00, eax);
    eax += 0x00000004;
    ebx = 0x0000000c;
    memoryASet32(ds, 0x3f3d28, eax);
    eax = memoryAGet32(ds, 0x3f3cf8);
    memoryASet32(ds, 0x3f3ce8, edx);
    eax += 0x00000048;
    memoryASet32(ds, 0x3f3cec, ebx);
    memoryASet32(ds, 0x3f3d30, eax);
    sub_1b8929();
    eax = memoryAGet32(ds, 0x1dfc54);
loc_1b8c15: // 0160:1b8c15
    esp += 0x00000100;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b8c22() // 0160:1b8c22 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x3f3d4c) == 0x00000000)
        goto loc_1b8c67;
    ah = 0x41;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8c3a: // 0160:1b8c3a
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8c3a;
    al = ah;
    out8(dx, al);
    eax = memoryAGet32(ds, 0x1dfc5c);
    eax = sar32(eax, 0x08);
    ah = al;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8c57: // 0160:1b8c57
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8c57;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, 0x1dfc5c);
    goto loc_1b8c82;
loc_1b8c67: // 0160:1b8c67
    ah = 0x40;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8c74: // 0160:1b8c74
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8c74;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, 0x3f3ce0);
loc_1b8c82: // 0160:1b8c82
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8c8d: // 0160:1b8c8d
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8c8d;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d30);
    eax = memoryAGet32(ds, 0x3f3ce8);
    sub_1c7f7f();
    edx = memoryAGet32(ds, 0x3f3d1c);
    eax = memoryAGet32(ds, 0x3f3d10);
    edx = sar32(edx, 0x10);
    sub_1c7f7f();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b8cbe() // 0160:1b8cbe +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x00000004;
    ebx = memoryAGet32(ds, 0x3f3d3c);
    edx = memoryAGet32(ds, 0x1dfc5c);
    if (ebx)
        goto loc_1b8cde;
    if (memoryAGet32(ds, 0x3f3d4c) == 0x00000000)
        goto loc_1b8ce7;
loc_1b8cde: // 0160:1b8cde
    eax = memoryAGet32(ds, 0x3f3d20);
    eax += eax;
    goto loc_1b8cec;
loc_1b8ce7: // 0160:1b8ce7
    eax = memoryAGet32(ds, 0x3f3d20);
loc_1b8cec: // 0160:1b8cec
    eax--;
    bl = al;
    eax = sar32(eax, 0x08);
    esi = memoryAGet32(ds, 0x3f3d4c);
    memoryASet32(ds, esp, eax);
    if (!esi)
        goto loc_1b8d46;
    ah = 0xc6;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8d0c: // 0160:1b8d0c
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8d0c;
    al = ah;
    out8(dx, al);
    ah = 0x20;
loc_1b8d16: // 0160:1b8d16
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8d21: // 0160:1b8d21
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8d21;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8d36: // 0160:1b8d36
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8d36;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    goto loc_1b8e37;
loc_1b8d46: // 0160:1b8d46
    if (memoryAGet32(ds, 0x3f3d48) == 0x00000000)
        goto loc_1b8de6;
    if ((int32_t)edx >= (int32_t)0x000059d8)
        goto loc_1b8da2;
    ah = 0x48;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8d68: // 0160:1b8d68
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8d68;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8d7d: // 0160:1b8d7d
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8d7d;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8d93: // 0160:1b8d93
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8d93;
    al = ah;
    out8(dx, al);
    ah = 0x1c;
    goto loc_1b8e37;
loc_1b8da2: // 0160:1b8da2
    ah = 0x48;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8daf: // 0160:1b8daf
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8daf;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8dc4: // 0160:1b8dc4
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8dc4;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8dda: // 0160:1b8dda
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8dda;
    al = ah;
    out8(dx, al);
    ah = 0x90;
    goto loc_1b8e37;
loc_1b8de6: // 0160:1b8de6
    if ((int32_t)edx >= (int32_t)0x000059d8)
        goto loc_1b8df5;
    ah = 0x14;
    goto loc_1b8d16;
loc_1b8df5: // 0160:1b8df5
    ah = 0x48;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8e02: // 0160:1b8e02
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8e02;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8e17: // 0160:1b8e17
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8e17;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8e2d: // 0160:1b8e2d
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8e2d;
    al = ah;
    out8(dx, al);
    ah = 0x91;
loc_1b8e37: // 0160:1b8e37
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b8e42: // 0160:1b8e42
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b8e42;
    al = ah;
    out8(dx, al);
    esp += 0x00000004;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b8fa1() // 0160:1b8fa1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = 0;
    memoryASet32(ds, 0x3f3d38, edx);
    memoryASet32(ds, 0x3f3ce4, edx);
    memoryASet32(ds, 0x3f3cdc, 0x0000b6db);
    esi = 0x00000001;
    ebx = 0x001b8e52;
    eax = memoryAGet32(ds, 0x3f3cf4);
    ecx = memoryAGet32(ds, 0x3f3cf4);
    sub_1c7fa7();
    ecx &= 0x00000007;
    memoryASet32(ds, 0x3f3d6c, eax);
    eax = memoryAGet32(ds, 0x3f3cf4);
    esi <<= cl;
    ecx = cs;
    memoryASet16(ds, 0x3f3d70, dx);
    sub_1c7fdb();
    eax = memoryAGet32(ds, 0x3f3cfc);
    si ^= 0x00ff;
    sub_1c8995();
    memoryASet32(ds, 0x3f3cd4, eax);
    edx = eax;
    eax = memoryAGet32(ds, 0x3f3cfc);
    edx &= esi;
    sub_1c7f7f();
    if ((int32_t)memoryAGet32(ds, 0x3f3cf4) < (int32_t)0x00000070)
        goto loc_1b9040;
    eax = 0x00000021;
    sub_1c8995();
    memoryASet32(ds, 0x3f3cd8, eax);
    edx = eax;
    eax = 0x00000021;
    edx &= 0x000000fb;
    sub_1c7f7f();
loc_1b9040: // 0160:1b9040
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9045() // 0160:1b9045 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(flagAsReg32());
    flags.interrupts = 0;
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b9057: // 0160:1b9057
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b9057;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d28);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b9078: // 0160:1b9078
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b9078;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d28);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b9099: // 0160:1b9099
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b9099;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d28);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b90ba: // 0160:1b90ba
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b90ba;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d28);
    out8(dx, al);
    sub_1b88e9();
    edx = memoryAGet32(ds, 0x3f3cd4);
    eax = memoryAGet32(ds, 0x3f3cfc);
    sub_1c7f7f();
    if ((int32_t)memoryAGet32(ds, 0x3f3cf4) < (int32_t)0x00000070)
        goto loc_1b90fc;
    eax = 0x00000021;
    edx = memoryAGet32(ds, 0x3f3cd8);
    sub_1c7f7f();
loc_1b90fc: // 0160:1b90fc
    cx = memoryAGet16(ds, 0x3f3d70);
    ebx = memoryAGet32(ds, 0x3f3d6c);
    eax = memoryAGet32(ds, 0x3f3cf4);
    sub_1c7fdb();
    flagsFromReg32(pop32());
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9118() // 0160:1b9118 +long
{
    esp -= 4;
    goto loc_1b9118;
loc_1b8c1b: // 0160:1b8c1b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1270 bytes
loc_1b9118: // 0160:1b9118
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = memoryAGet32(ds, 0x3f3d4c);
    ebp = 0x000000c8;
    if (edx)
        goto loc_1b9139;
    if (memoryAGet32(ds, 0x3f3d3c) == 0x00000000)
        goto loc_1b913b;
loc_1b9139: // 0160:1b9139
    ebp += ebp;
loc_1b913b: // 0160:1b913b
    ebx = 0;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, ebx);
loc_1b9144: // 0160:1b9144
    eax = memoryAGet32(ds, esp);
    esi = 0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 4);
    ecx = ebx + ebx;
    edi = eax * 0x00000000;
loc_1b9157: // 0160:1b9157
    edx = edi;
    stop("imul edx * ebp");
    memoryASet32(ds, esp + 16, 0x00000320);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    ecx += 0x00000002;
    ebx++;
    esi++;
    edx = memoryAGet32(ds, esp + 12);
    memoryASet16(ds, ecx + 3940766, ax);
    edi += edx;
    if ((int32_t)esi < (int32_t)0x00000080)
        goto loc_1b9157;
    eax = memoryAGet32(ds, esp);
    edi = 0xffffff80;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 4);
    ecx = ebx + ebx;
    esi = eax * 0xffffff80;
loc_1b919d: // 0160:1b919d
    edx = esi;
    stop("imul edx * ebp");
    memoryASet32(ds, esp + 16, 0x00000320);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    ecx += 0x00000002;
    ebx++;
    edi++;
    edx = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, ecx + 3940766, ax);
    esi += edx;
    if (stop("postCondition"))
        goto loc_1b919d;
    edi = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edi++;
    eax++;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < (int32_t)0x00000100)
        goto loc_1b9144;
    if (memoryAGet32(ds, 0x3f3d3c) != 0x00000000)
        goto loc_1b91f6;
    if (memoryAGet32(ds, 0x3f3d4c) == 0x00000000)
        goto loc_1b9210;
loc_1b91f6: // 0160:1b91f6
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0xffffffff);
    sub_1bc02f();
    esp += 0x00000024;
loc_1b9210: // 0160:1b9210
    if (memoryAGet32(ds, 0x3f3d40) == 0x00000000)
        goto loc_1b9233;
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0xffffffff);
    sub_1bce74();
    esp += 0x00000024;
loc_1b9233: // 0160:1b9233
    esp += 0x00000014;
    goto loc_1b8c1b;
}
void sub_1b923b() // 0160:1b923b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    edx = eax;
    edx <<= 2;
    if (stop("postCondition"))
        goto loc_1b9255;
    esi = memoryAGet32(ds, edx + 3940736);
    goto loc_1b925b;
loc_1b9255: // 0160:1b9255
    memoryASet32(ds, edx + 3940736, esi);
loc_1b925b: // 0160:1b925b
    if (memoryAGet32(ds, 0x1dfbf4) == 0x00000000)
        goto loc_1b926d;
    edx = esi;
    eax = edi;
    sub_1b8158();
loc_1b926d: // 0160:1b926d
    if (memoryAGet32(ds, 0x3f3d3c) != 0x00000000)
        goto loc_1b927f;
    if (memoryAGet32(ds, 0x3f3d4c) == 0x00000000)
        goto loc_1b92ac;
loc_1b927f: // 0160:1b927f
    edx = esi;
    edx <<= 16;
    ebp = memoryAGet32(ds, 0x3f3d14);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(eax);
    push32(0x00000000);
    push32(0x00000000);
    eax = edi + 32;
    push32(eax);
    sub_1bc02f();
    esp += 0x00000024;
loc_1b92ac: // 0160:1b92ac
    if (memoryAGet32(ds, 0x3f3d40) == 0x00000000)
        goto loc_1b9394;
    edx = esi;
    edx <<= 16;
    ebx = memoryAGet32(ds, 0x3f3d14);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(eax);
    push32(0x00000000);
    push32(0x00000000);
    edi += 0x00000020;
    push32(edi);
    goto loc_1b938c;
    // gap 169 bytes
loc_1b938c: // 0160:1b938c
    sub_1bce74();
    esp += 0x00000024;
loc_1b9394: // 0160:1b9394
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b92e3() // 0160:1b92e3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (stop("postCondition"))
        goto loc_1b92f5;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
loc_1b92f5: // 0160:1b92f5
    if (stop("postCondition"))
        goto loc_1b92fb;
    edx = 0;
loc_1b92fb: // 0160:1b92fb
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_1b9308;
    edx = 0x000000ff;
loc_1b9308: // 0160:1b9308
    ecx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, stop("GetOpAddress"), edx);
    stop("imul edx * ecx");
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebp = memoryAGet32(ds, stop("GetOpAddress"));
    edi = eax;
    ebp -= eax;
    if (memoryAGet32(ds, 0x1dfbf4) == 0x00000000)
        goto loc_1b9345;
    ebx = ebp;
    edx = edi;
    eax = esi;
    sub_1b819a();
loc_1b9345: // 0160:1b9345
    if (memoryAGet32(ds, 0x3f3d3c) != 0x00000000)
        goto loc_1b9357;
    if (memoryAGet32(ds, 0x3f3d4c) == 0x00000000)
        goto loc_1b9371;
loc_1b9357: // 0160:1b9357
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    edx = esi + 16;
    push32(edx);
    sub_1bc02f();
    esp += 0x00000024;
loc_1b9371: // 0160:1b9371
    if (memoryAGet32(ds, 0x3f3d40) == 0x00000000)
        goto loc_1b9394;
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi += 0x00000010;
    push32(esi);
    sub_1bce74();
    esp += 0x00000024;
loc_1b9394: // 0160:1b9394
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b939a() // 0160:1b939a +long
{
    esp -= 4;
    goto loc_1b939a;
loc_1b9316: // 0160:1b9316
    stop("imul edx * ecx");
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000) & stop("xxx");
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebp = memoryAGet32(ds, stop("GetOpAddress"));
    edi = eax;
    ebp -= eax;
    if (memoryAGet32(ds, 0x1dfbf4) == 0x00000000)
        goto loc_1b9345;
    ebx = ebp;
    edx = edi;
    eax = esi;
    sub_1b819a();
loc_1b9345: // 0160:1b9345
    if (memoryAGet32(ds, 0x3f3d3c) != 0x00000000)
        goto loc_1b9357;
    if (memoryAGet32(ds, 0x3f3d4c) == 0x00000000)
        goto loc_1b9371;
loc_1b9357: // 0160:1b9357
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    edx = esi + 16;
    push32(edx);
    sub_1bc02f();
    esp += 0x00000024;
loc_1b9371: // 0160:1b9371
    if (memoryAGet32(ds, 0x3f3d40) == 0x00000000)
        goto loc_1b9394;
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi += 0x00000010;
    push32(esi);
    sub_1bce74();
    esp += 0x00000024;
loc_1b9394: // 0160:1b9394
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b939a: // 0160:1b939a
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (stop("postCondition"))
        goto loc_1b93ac;
    edx = memoryAGet32(ds, stop("GetOpAddress"));
loc_1b93ac: // 0160:1b93ac
    if (stop("postCondition"))
        goto loc_1b93b2;
    edx = 0;
loc_1b93b2: // 0160:1b93b2
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_1b93bf;
    edx = 0x000000ff;
loc_1b93bf: // 0160:1b93bf
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    ecx = memoryAGet32(ds, stop("GetOpAddress"));
    goto loc_1b9316;
}
void sub_1b93d9() // 0160:1b93d9 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    ebp = edx;
    edi = ebx;
    memoryASet32(ds, esp, ecx);
    if (memoryAGet32(ds, esp + 20) != 0x00000000)
        goto loc_1b93f3;
    memoryASet32(ds, esp + 20, ebx);
loc_1b93f3: // 0160:1b93f3
    if (memoryAGet32(ds, 0x1dfbf4) == 0x00000000)
        goto loc_1b9413;
    push32(0x00000000);
    push32(0x00000000);
    ecx = memoryAGet32(ds, esp + 28);
    push32(edi);
    ebx = edi;
    edx = ebp;
    push32(ecx);
    eax = esi;
    ecx = 0;
    sub_1b8222();
    stop("stack_below", "0160:1b940e");
loc_1b9413: // 0160:1b9413
    if (memoryAGet32(ds, 0x3f3d3c) != 0x00000000)
        goto loc_1b9425;
    if (memoryAGet32(ds, 0x3f3d4c) == 0x00000000)
        goto loc_1b943e;
loc_1b9425: // 0160:1b9425
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 36);
    push32(ebx);
    push32(0x00000000);
    push32(edi);
    push32(ebp);
    push32(esi);
    sub_1bc02f();
    esp += 0x00000024;
loc_1b943e: // 0160:1b943e
    if (memoryAGet32(ds, 0x3f3d40) == 0x00000000)
        goto loc_1b9460;
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(edi);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    push32(0x00000000);
    push32(edi);
    push32(ebp);
    push32(esi);
    sub_1bce74();
    esp += 0x00000024;
loc_1b9460: // 0160:1b9460
    edx = memoryAGet32(ds, esp + 28);
    eax = esi;
    sub_1b939a();
    edx = memoryAGet32(ds, esp + 24);
    eax = esi;
    sub_1b92e3();
    edx = memoryAGet32(ds, esp);
    eax = esi;
    sub_1b923b();
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_1b9489() // 0160:1b9489 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if (memoryAGet32(ds, 0x3f3d3c) != 0x00000000)
        goto loc_1b94a2;
    if (memoryAGet32(ds, 0x3f3d4c) == 0x00000000)
        goto loc_1b94c6;
loc_1b94a2: // 0160:1b94a2
    ecx = memoryAGet32(ds, 0x3f3d20);
    push32(ecx);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi = memoryAGet32(ds, 0x3f3d1c);
    push32(esi);
    push32(0xfffffffe);
    sub_1bc02f();
    esp += 0x00000024;
loc_1b94c6: // 0160:1b94c6
    if (memoryAGet32(ds, 0x3f3d40) == 0x00000000)
        goto loc_1b94f2;
    ebp = memoryAGet32(ds, 0x3f3d20);
    push32(ebp);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    eax = memoryAGet32(ds, 0x3f3d1c);
    push32(eax);
    push32(0xfffffffe);
    sub_1bce74();
    esp += 0x00000024;
loc_1b94f2: // 0160:1b94f2
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b94ff: // 0160:1b94ff
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b94ff;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d28);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b9520: // 0160:1b9520
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b9520;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d28);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b9541: // 0160:1b9541
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b9541;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d28);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f3d0c);
    ecx = 0x0000ffff;
loc_1b9562: // 0160:1b9562
    al = in8(dx);
    if (--cx && al & 0x80)
        goto loc_1b9562;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d28);
    out8(dx, al);
    sub_1b8c22();
    edx = memoryAGet32(ds, 0x3f3cec);
    eax = 0;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d24);
    eax = memoryAGet32(ds, 0x3f3d1c);
    out8(dx, al);
    al = ah;
    out8(dx, al);
    eax = memoryAGet32(ds, 0x3f3d20);
    ecx = memoryAGet32(ds, 0x3f3d4c);
    ecx |= memoryAGet32(ds, 0x3f3d3c);
    eax <<= cl;
    edx = memoryAGet32(ds, 0x3f3d18);
    eax--;
    out8(dx, al);
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d2c);
    eax = memoryAGet32(ds, 0x3f3d00);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f3d04);
    al = in8(dx);
    sub_1b8cbe();
    flagsFromReg32(pop32());
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b95d0() // 0160:1b95d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (eax >= 0x00000fa0)
        goto loc_1b95e1;
    ebx = 0x00000fa0;
loc_1b95e1: // 0160:1b95e1
    if (ebx <= 0x00009c40)
        goto loc_1b95ee;
    ebx = 0x00009c40;
loc_1b95ee: // 0160:1b95ee
    eax = 0x000f4240;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1dfc5c, ebx);
    edx = 0x00000100;
    ebx = 0x00000100;
    edx -= eax;
    eax = 0x000f4240;
    memoryASet32(ds, 0x3f3ce0, edx);
    ebx -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ebx = 0x00000046;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, 0x1dfc5c, eax);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x3f3d3c);
    memoryASet32(ds, 0x3f3d20, eax);
    if (!ebx)
        goto loc_1b9657;
    edx = memoryAGet32(ds, 0x1dfc5c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x3f3d20, sar32(memoryAGet32(ds, 0x3f3d20), 0x00000001));
    goto loc_1b965c;
loc_1b9657: // 0160:1b9657
    eax = memoryAGet32(ds, 0x1dfc5c);
loc_1b965c: // 0160:1b965c
    memoryASet32(ds, 0x3f3d14, eax);
    ebx = 0;
    ecx = 0;
loc_1b9665: // 0160:1b9665
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3940736);
    ecx += 0x00000004;
    sub_1b923b();
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3940668);
    ebx++;
    sub_1b92e3();
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_1b9665;
    sub_1b9489();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9691() // 0160:1b9691 +long
{
    esp -= 4;
    goto loc_1b9691;
loc_1b95d0: // 0160:1b95d0
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (eax >= 0x00000fa0)
        goto loc_1b95e1;
    ebx = 0x00000fa0;
loc_1b95e1: // 0160:1b95e1
    if (ebx <= 0x00009c40)
        goto loc_1b95ee;
    ebx = 0x00009c40;
loc_1b95ee: // 0160:1b95ee
    eax = 0x000f4240;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1dfc5c, ebx);
    edx = 0x00000100;
    ebx = 0x00000100;
    edx -= eax;
    eax = 0x000f4240;
    memoryASet32(ds, 0x3f3ce0, edx);
    ebx -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ebx = 0x00000046;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, 0x1dfc5c, eax);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x3f3d3c);
    memoryASet32(ds, 0x3f3d20, eax);
    if (!ebx)
        goto loc_1b9657;
    edx = memoryAGet32(ds, 0x1dfc5c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x3f3d20, sar32(memoryAGet32(ds, 0x3f3d20), 0x00000001));
    goto loc_1b965c;
loc_1b9657: // 0160:1b9657
    eax = memoryAGet32(ds, 0x1dfc5c);
loc_1b965c: // 0160:1b965c
    memoryASet32(ds, 0x3f3d14, eax);
    ebx = 0;
    ecx = 0;
loc_1b9665: // 0160:1b9665
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3940736);
    ecx += 0x00000004;
    sub_1b923b();
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3940668);
    ebx++;
    sub_1b92e3();
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_1b9665;
    sub_1b9489();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b9691: // 0160:1b9691
    if (memoryAGet32(ds, 0x1dfc54) != 0x00000000)
        goto loc_1b95d0;
    esp += 4;
}
void sub_1b969f() // 0160:1b969f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    ecx = 0x0000007f;
    eax = 0;
loc_1b96aa: // 0160:1b96aa
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 3940700, ecx);
    memoryASet32(ds, eax + 3940732, edx);
    memoryASet32(ds, eax + 3940668, edx);
    if (eax != 0x00000020)
        goto loc_1b96aa;
    if (memoryAGet32(ds, 0x1dfc54) == 0x00000000)
        goto loc_1b9766;
    eax = 0x00010000;
    sub_1b7e84();
    memoryASet32(ds, 0x3f3cd0, eax);
    if (eax)
        goto loc_1b96fd;
    push32(0x001d222d);
    sub_1c7f2e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_1c7f51();
loc_1b96fd: // 0160:1b96fd
    eax = memoryAGet32(ds, 0x3f3cd0);
    eax &= 0x0000ffff;
    eax <<= 4;
    memoryASet32(ds, 0x3f3d1c, eax);
    eax += 0x00008000;
loc_1b9714: // 0160:1b9714
    ebx = eax;
    edx = memoryAGet32(ds, 0x3f3d1c);
    ebx = sar32(ebx, 0x10);
    edx = sar32(edx, 0x10);
    if (edx == ebx)
        goto loc_1b9736;
    edi = memoryAGet32(ds, 0x3f3d1c);
    edi++;
    eax++;
    memoryASet32(ds, 0x3f3d1c, edi);
    goto loc_1b9714;
loc_1b9736: // 0160:1b9736
    eax = memoryAGet32(ds, 0x3f3d1c);
    memoryASet32(ds, 0x3e21a0, eax);
    eax += 0x00004000;
    memoryASet32(ds, 0x3e21a4, eax);
    ah = 0;
    memoryASet(ds, 0x3f3d78, ah);
    sub_1b9118();
    sub_1b8fa1();
    eax = memoryAGet32(ds, 0x1dfc5c);
    sub_1b95d0();
loc_1b9766: // 0160:1b9766
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b976b() // 0160:1b976b +long
{
    esp -= 4;
    goto loc_1b976b;
loc_1b85c3: // 0160:1b85c3
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x1dfbf0);
    edx = 0x00000003;
    eax -= 0x00000100;
    ebx = 0;
    sub_1c7f7f();
    edx = 0x0000004c;
    eax = 0;
    sub_1b7f5b();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4481 bytes
loc_1b976b: // 0160:1b976b
    if (memoryAGet32(ds, 0x1dfc54) == 0x00000000)
        goto loc_1b979e;
    sub_1b9045();
    eax = memoryAGet32(ds, 0x3f3cd0);
    sub_1b7f05();
    if (!eax)
        goto loc_1b979e;
    push32(0x001d2241);
    sub_1c7f2e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_1c7f51();
loc_1b979e: // 0160:1b979e
    if (memoryAGet32(ds, 0x1dfbf4) != 0x00000000)
        goto loc_1b85c3;
    esp += 4;
}
void sub_1b97ac() // 0160:1b97ac +long
{
    esp -= 4;
    push32(ebx);
    esp -= 0x0000001c;
    memoryASet32(ds, esp, 0x00000600);
    ebx = eax;
    ebx >>= 16;
    eax &= 0x0000ffff;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp + 8, eax);
    eax = edx;
    ebx = esp;
    eax >>= 16;
    edx &= 0x0000ffff;
    memoryASet32(ds, esp + 16, eax);
    memoryASet32(ds, esp + 20, edx);
    edx = esp;
    eax = 0x00000031;
    sub_1c897a();
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_1b9812;
    eax = 0x00000003;
    sub_19b80e();
    push32(0x001d2255);
    sub_1c7f2e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_1c7f51();
loc_1b9812: // 0160:1b9812
    esp += 0x0000001c;
    ebx = pop32();
    esp += 4;
}
void sub_1b9817() // 0160:1b9817 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    ebp = eax;
    esi = edx;
    memoryASet32(ds, esp, ebx);
    edx = ecx;
    edx <<= 10;
    ebx = memoryAGet32(ds, esp + 28);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi = eax;
    eax = memoryAGet32(ds, esp);
    edx = 0;
    eax <<= 10;
    div32(edi);
    ebx = 0;
    memoryASet32(ds, esp, eax);
    eax += esi;
    edx = esi;
    memoryASet32(ds, esp + 8, eax);
    goto loc_1b987d;
loc_1b984f: // 0160:1b984f
    eax = ebx;
    eax >>= 10;
    stop("disassembly failed at 160:1b9854 movsx ecx, byte ptr [eax + ebp + 1]");
    stop("disassembly failed at 160:1b9859 movsx esi, byte ptr [eax + ebp]");
    ecx -= esi;
    esi = ebx;
    esi &= 0x000003ff;
    stop("imul ecx * esi");
    ecx >>= 10;
    al = memoryAGet(ds, eax + ebp);
    memoryASet32(ds, esp + 4, ecx);
    al += memoryAGet(ds, esp + 4);
    ebx += edi;
    memoryASet(ds, edx, al);
    edx++;
loc_1b987d: // 0160:1b987d
    if (edx < memoryAGet32(ds, esp + 8))
        goto loc_1b984f;
    eax = memoryAGet32(ds, esp);
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1b988f() // 0160:1b988f +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ecx = eax;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
    edx = 0x001d2261;
    esi = memoryAGet32(ds, 0x3f3d68);
    sub_19b38b();
    edi = eax;
    eax = ecx;
    sub_1c824a();
    ebp = eax;
    if (eax)
        goto loc_1b98d7;
    push32(ecx);
    push32(0x001d2264);
    sub_1c7f2e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1c7f51();
loc_1b98d7: // 0160:1b98d7
    ebx = 0x00000001;
    edx = 0x00000800;
    ecx = ebp;
    eax = esi;
    sub_1c8590();
    edi -= 0x00000800;
    esi += 0x00000800;
loc_1b98f6: // 0160:1b98f6
    if (!edi)
        goto loc_1b9965;
    if ((int32_t)edi <= (int32_t)0x00008000)
        goto loc_1b993c;
    ebx = 0x00000001;
    edx = 0x00008000;
    eax = 0x0039f26c;
    ecx = ebp;
    sub_1c8590();
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    eax = 0x0039f26c;
    edx = esi;
    push32(ebx);
    ebx = 0x00008000;
    edi += 0xffff8000;
loc_1b9933: // 0160:1b9933
    sub_1b9817();
    esi += eax;
    goto loc_1b98f6;
loc_1b993c: // 0160:1b993c
    ebx = 0x00000001;
    eax = 0x0039f26c;
    ecx = ebp;
    edx = edi;
    sub_1c8590();
    edx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    eax = 0x0039f26c;
    ebx = edi;
    push32(edx);
    edx = esi;
    edi = 0;
    goto loc_1b9933;
loc_1b9965: // 0160:1b9965
    eax = 0;
loc_1b9967: // 0160:1b9967
    eax++;
    memoryASet(ds, esi, 0x00);
    esi++;
    if (eax < 0x000000ff)
        goto loc_1b9967;
    eax = ebp;
    edx = memoryAGet32(ds, esp + 8);
    sub_1c844e();
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    ecx = memoryAGet32(ds, esp + 4);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebx = 0;
    ebp = 0;
    ecx = eax;
loc_1b9996: // 0160:1b9996
    edi = memoryAGet32(ds, 0x3f3d68);
    eax = memoryAGet32(ds, edi + ebx + 1024);
    edx = memoryAGet32(ds, edi + ebx);
    eax -= edx;
    memoryASet32(ds, esp, eax);
    eax = ebp;
    stop("imul eax * ecx");
    memoryASet32(ds, esp + 12, 0x00000003);
    edx = 0;
    div32(memoryAGet32(ds, esp + 12));
    memoryASet32(ds, edi + ebx, eax);
    edi = memoryAGet32(ds, esp);
    ebp += edi;
    eax = ebp;
    stop("imul eax * ecx");
    edx = 0;
    edi = 0x00000003;
    div32(edi);
    ebx += 0x00000004;
    edi = memoryAGet32(ds, 0x3f3d68);
    memoryASet32(ds, edi + ebx + 1020, eax);
    if (ebx != 0x00000400)
        goto loc_1b9996;
    ebp = memoryAGet32(ds, 0x3f3d68);
    eax = esi;
    eax -= ebp;
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b9b4a() // 0160:1b9b4a +long
{
    esp -= 4;
    goto loc_1b9b4a;
loc_1b8c1b: // 0160:1b8c1b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3880 bytes
loc_1b9b4a: // 0160:1b9b4a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (memoryAGet32(ds, 0x1dfc64) == 0x00000000)
        goto loc_1b8c1b;
    if (!eax)
        goto loc_1b9b6a;
    ecx = 0x000012aa;
    goto loc_1b9b6f;
loc_1b9b6a: // 0160:1b9b6a
    ecx = 0x00001400;
loc_1b9b6f: // 0160:1b9b6f
    eax = ecx;
    ecx <<= 2;
    esi = memoryAGet32(ds, 0x1dfc7c);
    ecx -= eax;
    if (stop("postCondition"))
        goto loc_1b9b85;
    sub_1ba52c();
loc_1b9b85: // 0160:1b9b85
    ebx <<= 2;
    edi = 0xffffffff;
    eax = memoryAGet32(ds, ebx + 1965164);
    memoryASet32(ds, 0x1dfc7c, edi);
    sub_19b38b();
    ebp = eax;
    eax = memoryAGet32(ds, 0x1dfc68);
    memoryASet32(ds, 0x3f3ccc, ecx);
    if ((int32_t)eax >= (int32_t)0x00100000)
        goto loc_1b9bdb;
    edi = 0x00000003;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edi = eax;
    edx = ecx;
    eax = memoryAGet32(ds, ebx + 1965164);
    ebx = edi;
    sub_1b988f();
    ebp = eax;
    memoryASet32(ds, 0x3f3ccc, edi);
    goto loc_1b9bec;
loc_1b9bdb: // 0160:1b9bdb
    edx = memoryAGet32(ds, 0x3f3d68);
    eax = memoryAGet32(ds, ebx + 1965164);
    sub_19b431();
loc_1b9bec: // 0160:1b9bec
    if (memoryAGet32(ds, 0x1dfbf4) == 0x00000000)
        goto loc_1b9c09;
    ecx = memoryAGet32(ds, 0x1dfbf0);
    eax = memoryAGet32(ds, 0x3f3d68);
    edx = ebp;
    ebx = 0;
    sub_1b8061();
loc_1b9c09: // 0160:1b9c09
    if (stop("postCondition"))
        goto loc_1b8c1b;
    eax = esi;
    sub_1bb45a();
    goto loc_1b8c1b;
}
void sub_1b9c1d() // 0160:1b9c1d +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (memoryAGet32(ds, 0x1dfc64) == 0x00000000)
        goto loc_1b9c8e;
    edi = memoryAGet32(ds, 0x1dfc80);
    if (edi)
        goto loc_1b9c8e;
    push32(edx);
    edx = memoryAGet32(ds, 0x1df5bc);
    stop("imul edx * ebx");
    eax = memoryAGet32(ds, 0x1dfc84);
    eax++;
    eax &= 0x00000003;
    eax += 0x00000004;
    memoryASet32(ds, 0x1dfc84, eax);
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(eax);
    eax = esi;
    edx = memoryAGet32(ds, 0x3f3d68);
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x3f3ccc);
    eax += edx;
    push32(edi);
    edx += 0x00000800;
    ebx = memoryAGet32(ds, eax + 1024);
    ebp = memoryAGet32(ds, eax);
    eax = memoryAGet32(ds, 0x1dfc84);
    ebx += edx;
    edx += ebp;
    sub_1b93d9();
loc_1b9c8e: // 0160:1b9c8e
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b9c93() // 0160:1b9c93 +long
{
    esp -= 4;
    goto loc_1b9c93;
loc_1b8c1c: // 0160:1b8c1c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 4209 bytes
loc_1b9c93: // 0160:1b9c93
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = eax;
    edx = 0;
    ecx = 0x00100000;
    memoryASet32(ds, 0x1dfc64, edx);
    eax = ecx;
    memoryASet32(ds, 0x1dfc68, ecx);
    sub_1c8bb1();
    memoryASet32(ds, 0x3f3d68, eax);
    if (eax)
        goto loc_1b9cec;
    esi = 0x00080000;
    eax = esi;
    memoryASet32(ds, 0x1dfc68, esi);
    sub_1c8bb1();
    memoryASet32(ds, 0x3f3d68, eax);
    if (eax)
        goto loc_1b9cec;
    push32(0x001d22b3);
loc_1b9cdd: // 0160:1b9cdd
    sub_1c7f2e();
    esp += 0x00000004;
    eax = 0;
    goto loc_1b8c1c;
loc_1b9cec: // 0160:1b9cec
    eax = memoryAGet32(ds, 0x1dfc68);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000) & stop("xxx");
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    push32(eax);
    push32(0x001d22d1);
    edx = 0x001bdb9a;
    sub_1c7f2e();
    esp += 0x00000008;
    edx -= 0x001bc004;
    eax = 0x001bc004;
    sub_1b97ac();
    edx = 0x00010000;
    eax = 0x003e21a8;
    sub_1b97ac();
    edx = memoryAGet32(ds, 0x1dfc68);
    eax = memoryAGet32(ds, 0x3f3d68);
    sub_1b97ac();
    sub_1b86db();
    if (eax)
        goto loc_1b9d7d;
    sub_1b8a03();
    if (memoryAGet32(ds, 0x1dfc54) != 0x00000000)
        goto loc_1b9d61;
    push32(0x001d22e0);
    goto loc_1b9cdd;
loc_1b9d61: // 0160:1b9d61
    eax = memoryAGet32(ds, 0x3f3d48);
    push32(eax);
    edx = memoryAGet32(ds, 0x3f3d50);
    push32(edx);
    push32(0x001d22f0);
    sub_1c7f2e();
    esp += 0x0000000c;
    goto loc_1b9d91;
loc_1b9d7d: // 0160:1b9d7d
    edi = memoryAGet32(ds, 0x1dfbf4);
    push32(edi);
    push32(0x001d230c);
    sub_1c7f2e();
    esp += 0x00000008;
loc_1b9d91: // 0160:1b9d91
    ecx = memoryAGet32(ds, 0x1dfbf4);
    if (!ecx)
        goto loc_1b9dad;
    if ((int32_t)ecx >= (int32_t)0x00000400)
        goto loc_1b9dad;
    memoryASet32(ds, 0x1dfc68, 0x00080000);
loc_1b9dad: // 0160:1b9dad
    if (memoryAGet32(ds, 0x1dfbf4) != 0x00000000)
        goto loc_1b9dbf;
    if (memoryAGet32(ds, 0x1dfc54) == 0x00000000)
        goto loc_1b9dc9;
loc_1b9dbf: // 0160:1b9dbf
    memoryASet32(ds, 0x1dfc64, 0x00000001);
loc_1b9dc9: // 0160:1b9dc9
    ecx = 0xffffffff;
    eax = memoryAGet32(ds, 0x1df624);
    memoryASet32(ds, 0x1dfc7c, ecx);
    sub_1b9b4a();
    sub_1b969f();
    eax = ebx;
    sub_1b9691();
    eax = 0x00000001;
    goto loc_1b8c1c;
}
void sub_1b9df4() // 0160:1b9df4 +long
{
    esp -= 4;
    sub_1b976b();
    eax = memoryAGet32(ds, 0x3f3d68);
    goto loc_1c8c94;
    // gap 61073 bytes
loc_1c8c94: // 0160:1c8c94
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    ebx = eax;
    ecx = memoryAGet32(ds, 0x1dfd0c);
    goto loc_1c8cad;
loc_1c8ca2: // 0160:1c8ca2
    if (ecx > ebx)
        goto loc_1c8caa;
    if (ebx < edx)
        goto loc_1c8cb4;
loc_1c8caa: // 0160:1c8caa
    ecx = memoryAGet32(ds, ecx + 8);
loc_1c8cad: // 0160:1c8cad
    edx = memoryAGet32(ds, ecx + 8);
    if (edx)
        goto loc_1c8ca2;
loc_1c8cb4: // 0160:1c8cb4
    eax = 0x001dfd0c;
    edx = ds;
    edx &= 0x0000ffff;
    eax = ebx;
    ebx = ecx;
    sub_1c9f24();
    if (ecx == memoryAGet32(ds, 0x1dfd10))
        goto loc_1c8ce5;
    ebp = memoryAGet32(ds, 0x1dfd14);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= ebp)
        goto loc_1c8ce5;
    memoryASet32(ds, 0x1dfd14, edx);
loc_1c8ce5: // 0160:1c8ce5
    ah = 0;
    memoryASet(ds, 0x3f3eb9, ah);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9e65() // 0160:1b9e65 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = 0;
    edx = 0;
    bl = memoryAGet(ds, eax + 1);
    dl = memoryAGet(ds, eax);
    ebx <<= 8;
    ebx |= edx;
    edx = 0;
    dl = memoryAGet(ds, eax + 2);
    edx <<= 16;
    al = memoryAGet(ds, eax + 3);
    edx |= ebx;
    eax &= 0x000000ff;
    eax <<= 24;
    eax |= edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9ebd() // 0160:1b9ebd +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x00000001;
    ecx = 0x00000004;
loc_1b9eca: // 0160:1b9eca
    eax = 0x00369e9a;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx += 0x00000004;
    ebx++;
    memoryASet32(ds, ecx + 4137468, eax);
    if ((int32_t)ebx < (int32_t)0x000006b1)
        goto loc_1b9eca;
    eax = memoryAGet32(ds, 0x3f2204);
    memoryASet32(ds, 0x3f2200, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9ef6() // 0160:1b9ef6 +long
{
    esp -= 4;
    goto loc_1b9ef6;
loc_1b8c1c: // 0160:1b8c1c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4820 bytes
loc_1b9ef6: // 0160:1b9ef6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = 0;
    esi = 0;
loc_1b9eff: // 0160:1b9eff
    edx = esi;
    cl = bl;
    eax = 0;
loc_1b9f05: // 0160:1b9f05
    edi = memoryAGet32(ds, eax + 1801398);
    edx += 0x00000004;
    edi = sar32(edi, cl);
    eax += 0x00000004;
    memoryASet32(ds, edx + 3940188, edi);
    if (eax != 0x00000030)
        goto loc_1b9f05;
    ebx++;
    esi += 0x00000030;
    if ((int32_t)ebx < (int32_t)0x0000000a)
        goto loc_1b9eff;
    goto loc_1b8c1c;
}
void sub_1b9f2c() // 0160:1b9f2c +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, stop("GetOpAddress"), edx);
    stop("imul edx * esi");
    esi = 0x000000ff;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    edx += eax;
    if (stop("postCondition"))
        goto loc_1b9f5c;
    edx = 0;
loc_1b9f5c: // 0160:1b9f5c
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_1b9f69;
    edx = 0x000000ff;
loc_1b9f69: // 0160:1b9f69
    eax = ecx;
    sub_1b939a();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b9f73() // 0160:1b9f73 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    if (stop("postCondition"))
        goto loc_1b9f7d;
    edx = 0;
loc_1b9f7d: // 0160:1b9f7d
    if ((int32_t)edx <= (int32_t)0x00000100)
        goto loc_1b9f8a;
    edx = 0x00000100;
loc_1b9f8a: // 0160:1b9f8a
    eax = ebx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x3f21fc);
    memoryASet32(ds, eax + 3926720, edx);
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_1b9fa8;
    stop("imul edx * memoryAGet32(ds, 0x3f21cc)");
    goto loc_1b9faf;
loc_1b9fa8: // 0160:1b9fa8
    stop("imul edx * memoryAGet32(ds, 0x3f21d4)");
loc_1b9faf: // 0160:1b9faf
    stop("imul edx * memoryAGet32(ds, eax + 3926272)");
    ecx = 0x0000fe01;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    eax = ebx;
    sub_1b92e3();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ba305() // 0160:1ba305 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    sub_1b9f73();
    ebx = pop32();
    esp += 4;
}
void sub_1ba31d() // 0160:1ba31d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    ecx = sar32(ecx, 0x08);
    edx &= 0x000000ff;
    ecx &= 0x000000ff;
    memoryASet32(ds, stop("GetOpAddress"), edx);
    edx = memoryAGet32(ds, stop("GetOpAddress"));
    memoryASet32(ds, stop("GetOpAddress"), ecx);
    sub_1b9f2c();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ba3f2() // 0160:1ba3f2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax &= 0x000000ff;
    ebx = 0;
    ecx = 0;
    memoryASet32(ds, 0x3f21cc, eax);
    goto loc_1ba416;
loc_1ba405: // 0160:1ba405
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3926720);
    sub_1b9f73();
    ecx += 0x00000004;
    ebx++;
loc_1ba416: // 0160:1ba416
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x3f21fc))
        goto loc_1ba405;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ba491() // 0160:1ba491 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    edx = 0;
    ecx = 0x000000ff;
    memoryASet32(ds, 0x3f21e4, edx);
    memoryASet32(ds, 0x3f21fc, edx);
    memoryASet32(ds, 0x3f21cc, ecx);
    memoryASet32(ds, 0x3f21e0, edx);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ba4b5() // 0160:1ba4b5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = 0x000000ff;
    ecx = 0;
    ebx = 0;
    memoryASet32(ds, 0x3f21d4, edx);
    esi = 0;
loc_1ba4ca: // 0160:1ba4ca
    edx = 0x000000ff;
    eax = ecx;
    memoryASet32(ds, ebx + 3925984, esi);
    memoryASet32(ds, ebx + 3926080, esi);
    memoryASet32(ds, ebx + 3926112, esi);
    memoryASet32(ds, ebx + 3926592, esi);
    memoryASet32(ds, ebx + 3926624, esi);
    memoryASet32(ds, ebx + 3926720, esi);
    memoryASet32(ds, ebx + 3926752, esi);
    memoryASet32(ds, ebx + 3926784, esi);
    memoryASet32(ds, ebx + 3926368, esi);
    memoryASet32(ds, ebx + 3926304, esi);
    sub_1ba305();
    ebx += 0x00000004;
    edx = 0x000000ff;
    eax = ecx;
    ecx++;
    sub_1ba31d();
    if ((int32_t)ecx < (int32_t)0x00000008)
        goto loc_1ba4ca;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ba52c() // 0160:1ba52c +long
{
    esp -= 4;
    push32(edx);
    sub_1ba491();
    edx = 0;
    sub_1ba4b5();
    memoryASet32(ds, 0x3f21bc, edx);
    memoryASet32(ds, 0x3f21b4, edx);
    edx = pop32();
    esp += 4;
}
void sub_1ba547() // 0160:1ba547 +long
{
    esp -= 4;
    goto loc_1ba547;
loc_1b9394: // 0160:1b9394
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4525 bytes
loc_1ba547: // 0160:1ba547
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    memoryASet32(ds, 0x3f21d0, edx);
    edx = 0;
    memoryASet32(ds, 0x3f21e4, edx);
    edx = memoryAGet32(ds, 0x3f21f8);
    memoryASet32(ds, 0x3f21f4, eax);
    al = memoryAGet(ds, edx + eax + 72);
    eax &= 0x000000ff;
    ecx = memoryAGet32(ds, 0x3f21fc);
    memoryASet32(ds, 0x3f21ec, eax);
    edx = eax;
    ecx <<= 2;
    edx <<= 2;
    eax = 0;
    edi = 0x00000008;
    esi = 0;
    goto loc_1ba600;
loc_1ba58c: // 0160:1ba58c
    eax += 0x00000004;
    ebx = memoryAGet32(ds, edx + 3929952);
    edx += 0x00000400;
    memoryASet32(ds, eax + 3926556, esi);
    memoryASet32(ds, eax + 3926428, esi);
    memoryASet32(ds, eax + 3926844, esi);
    memoryASet32(ds, eax + 3926652, edi);
    memoryASet32(ds, eax + 3926812, esi);
    memoryASet32(ds, eax + 3926236, esi);
    memoryASet32(ds, eax + 3926460, esi);
    memoryASet32(ds, eax + 3926588, esi);
    memoryASet32(ds, eax + 3926620, esi);
    memoryASet32(ds, eax + 3926716, esi);
    memoryASet32(ds, eax + 3926748, esi);
    memoryASet32(ds, eax + 3926780, esi);
    memoryASet32(ds, eax + 3926364, esi);
    memoryASet32(ds, eax + 3926492, ebx);
    ebx = 0x00000001;
    memoryASet32(ds, eax + 3926300, esi);
    memoryASet32(ds, eax + 3926524, ebx);
loc_1ba600: // 0160:1ba600
    if ((int32_t)eax < (int32_t)ecx)
        goto loc_1ba58c;
    eax = 0x00000006;
    ebx = 0x0000b6db;
    ebp = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x3f21dc, ebp);
    memoryASet32(ds, 0x3f21f0, eax);
    memoryASet32(ds, 0x3f21e8, eax);
    memoryASet32(ds, 0x3f21d8, ebx);
    memoryASet32(ds, 0x3f21e4, ecx);
    goto loc_1b9394;
}
void sub_1bae66() // 0160:1bae66 +long
{
    esp -= 4;
    goto loc_1bae66;
loc_1b9394: // 0160:1b9394
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6860 bytes
loc_1bae66: // 0160:1bae66
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebx = eax;
    memoryASet32(ds, esp, edx);
    sub_1b9ef6();
    sub_1b9ebd();
    memoryASet32(ds, 0x3f21f8, ebx);
    eax = 0;
    al = memoryAGet(ds, ebx);
    if (eax != 0x00000041)
        goto loc_1baea0;
    eax = 0;
    al = memoryAGet(ds, ebx + 1);
    if (eax != 0x00000052)
        goto loc_1baea0;
    eax = 0;
    al = memoryAGet(ds, ebx + 2);
    if (eax == 0x0000004d)
        goto loc_1baeaa;
loc_1baea0: // 0160:1baea0
    eax = 0xffffffff;
    goto loc_1bb042;
loc_1baeaa: // 0160:1baeaa
    eax = ebx + 360;
    sub_1b9e65();
    memoryASet32(ds, 0x3f3cc4, eax);
    eax = memoryAGet32(ds, 0x3f21f8);
    eax += 0x00000040;
    sub_1b9e65();
    memoryASet32(ds, 0x3f21fc, eax);
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_1baee8;
    push32(0x001d2325);
    sub_1c7f2e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_1c7f51();
loc_1baee8: // 0160:1baee8
    eax = memoryAGet32(ds, 0x3f21f8);
    eax += 0x00000044;
    ebx = 0;
    sub_1b9e65();
    memoryASet32(ds, 0x3f3cc8, eax);
    goto loc_1baf1d;
loc_1baefe: // 0160:1baefe
    eax = memoryAGet32(ds, 0x3f21f8);
    edx = 0;
    dl = memoryAGet(ds, ebx + eax + 328);
    edx <<= 4;
    eax = ebx;
    edx &= 0x000000ff;
    sub_1b9f2c();
    ebx++;
loc_1baf1d: // 0160:1baf1d
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x3f21fc))
        goto loc_1baefe;
    edx = memoryAGet32(ds, 0x3f3cc4);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    ebx = memoryAGet32(ds, 0x3f21f8);
    edx <<= 2;
    eax = ebx + 364;
    eax += edx;
    edx = memoryAGet32(ds, 0x3f21fc);
    edx <<= 10;
    edi = 0;
    memoryASet32(ds, esp + 4, edx);
    ebp = 0;
    goto loc_1baf9b;
loc_1baf58: // 0160:1baf58
    esi = ebp;
    ecx = edi;
    goto loc_1baf8d;
loc_1baf5e: // 0160:1baf5e
    edx = ebp;
    memoryASet32(ds, ecx + 3929952, eax);
loc_1baf66: // 0160:1baf66
    if ((int32_t)edx >= (int32_t)0x00000040)
        goto loc_1baf89;
    ebx = 0;
    bl = memoryAGet(ds, eax);
    if (ebx != 0x000000ff)
        goto loc_1baf83;
    ebx = 0;
    bl = memoryAGet(ds, eax + 1);
    eax += 0x00000002;
    edx += ebx;
    goto loc_1baf84;
loc_1baf83: // 0160:1baf83
    edx++;
loc_1baf84: // 0160:1baf84
    eax += 0x00000006;
    goto loc_1baf66;
loc_1baf89: // 0160:1baf89
    ecx += 0x00000004;
    esi++;
loc_1baf8d: // 0160:1baf8d
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, 0x3f3cc8))
        goto loc_1baf5e;
    edi += 0x00000400;
loc_1baf9b: // 0160:1baf9b
    if ((int32_t)edi < (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1baf58;
    edx = memoryAGet32(ds, esp);
    ebx = 0;
    ecx = 0;
    esi = 0;
    goto loc_1bb034;
loc_1bafaf: // 0160:1bafaf
    eax = memoryAGet32(ds, 0x3f21f8);
    eax += 0x0000016c;
    eax += esi;
    sub_1b9e65();
    memoryASet32(ds, ecx + 3938144, eax);
    eax = memoryAGet32(ds, 0x3f21f8);
    eax += 0x0000016c;
    eax += esi;
    eax += 0x00000004;
    sub_1b9e65();
    memoryASet32(ds, ecx + 3926880, eax);
    eax = memoryAGet32(ds, 0x3f21f8);
    eax += 0x0000016c;
    eax += esi;
    eax += 0x00000008;
    sub_1b9e65();
    ebp = memoryAGet32(ds, ecx + 3938144);
    memoryASet32(ds, ecx + 3928928, edx);
    memoryASet32(ds, ecx + 3939168, eax);
    eax = memoryAGet32(ds, ecx + 3928928);
    edx += ebp;
    edi = eax + ebp;
    ebp = memoryAGet32(ds, ecx + 3926880);
    memoryASet32(ds, ecx + 3938144, edi);
    if (!ebp)
        goto loc_1bb02d;
    eax -= 0x00000002;
    edi = eax + ebp;
    memoryASet32(ds, ecx + 3926880, edi);
loc_1bb02d: // 0160:1bb02d
    ecx += 0x00000004;
    esi += 0x0000000c;
    ebx++;
loc_1bb034: // 0160:1bb034
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x3f3cc4))
        goto loc_1bafaf;
    eax = 0;
loc_1bb042: // 0160:1bb042
    esp += 0x00000008;
    goto loc_1b9394;
}
void sub_1bb45a() // 0160:1bb45a +long
{
    esp -= 4;
    goto loc_1bb45a;
loc_1b8c1b: // 0160:1b8c1b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10296 bytes
loc_1bb45a: // 0160:1bb45a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (!eax)
        goto loc_1bb474;
    if (memoryAGet32(ds, 0x1dfc80) == 0x00000000)
        goto loc_1bb474;
    esi = 0x00000001;
loc_1bb474: // 0160:1bb474
    if (memoryAGet32(ds, 0x1dfc64) == 0x00000000)
        goto loc_1b8c1b;
    if (esi == memoryAGet32(ds, 0x1dfc7c))
        goto loc_1b8c1b;
    ecx = esi;
    ecx <<= 2;
    eax = memoryAGet32(ds, ecx + 1965244);
    memoryASet32(ds, 0x1dfc7c, esi);
    sub_19b38b();
    ebx = memoryAGet32(ds, 0x1dfc68);
    ebx -= eax;
    ebp = eax;
    if (stop("postCondition"))
        goto loc_1bb4d9;
    eax = 0x00000003;
    sub_19b80e();
    edi = memoryAGet32(ds, ecx + 1965244);
    push32(edi);
    push32(0x001d2348);
    sub_1c7f2e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1c7f51();
loc_1bb4d9: // 0160:1bb4d9
    sub_1ba52c();
    edx = 0x003e21a8;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edi = memoryAGet32(ds, 0x3f3d68);
    sub_19b431();
    edi += ebx;
    eax = memoryAGet32(ds, stop("GetOpAddress"));
    edx = edi;
    sub_19b431();
    eax = 0x003e21a8;
    edx = edi;
    sub_1bae66();
    if (!eax)
        goto loc_1bb52c;
    push32(0x001d234c);
    sub_1c7f2e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_1c7f51();
loc_1bb52c: // 0160:1bb52c
    if (memoryAGet32(ds, 0x1dfbf4) == 0x00000000)
        goto loc_1bb544;
    ecx = memoryAGet32(ds, 0x1dfbf0);
    edx = ebp;
    eax = edi;
    sub_1b8061();
loc_1bb544: // 0160:1bb544
    if (esi != 0x00000001)
        goto loc_1bb54d;
    edx = esi;
    goto loc_1bb552;
loc_1bb54d: // 0160:1bb54d
    edx = 0x00000002;
loc_1bb552: // 0160:1bb552
    eax = 0;
    sub_1ba547();
    eax = memoryAGet32(ds, 0x1df5b8);
    esi = eax;
    esi <<= 8;
    esi -= eax;
    ebx = 0x0000000a;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_1ba3f2();
    goto loc_1b8c1b;
}
void sub_1bc02f() // 0160:1bc02f +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(flagAsReg32());
    stop("disassembly failed at 160:1bc033 pushal ");
    flags.interrupts = 0;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) & 0x000000ff);
    memoryASet32(ss, ebp + 36, memoryAGet32(ss, ebp + 36) & 0x000000ff);
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000020)
        goto loc_1bc7c9;
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000010)
        goto loc_1bc660;
    if (memoryAGet32(ss, ebp + 8) == 0xffffffff)
        goto loc_1bc902;
    if (memoryAGet32(ss, ebp + 8) == 0xfffffffe)
        goto loc_1bcb07;
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1bc129;
    memoryASet32(ds, 0x1bcb46, 0x00000000);
    memoryASet32(ds, 0x1bcb3c, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bcb22, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb32, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb2a, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bcb50, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bcd0e, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bcd18, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcd2c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcd22, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bc113;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcd0e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcd18, eax);
    memoryASet32(ds, 0x1bcd2c, 0x00000000);
    memoryASet32(ds, 0x1bcd22, 0x00000000);
loc_1bc113: // 0160:1bc113
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcb46, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcb3c, eax);
loc_1bc129: // 0160:1bc129
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1bc1e7;
    memoryASet32(ds, 0x1bcb80, 0x00000000);
    memoryASet32(ds, 0x1bcb76, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bcb5c, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb6c, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb64, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bcb8a, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bcd3b, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bcd45, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcd59, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcd4f, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bc1d1;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcd3b, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcd45, eax);
    memoryASet32(ds, 0x1bcd59, 0x00000000);
    memoryASet32(ds, 0x1bcd4f, 0x00000000);
loc_1bc1d1: // 0160:1bc1d1
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcb80, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcb76, eax);
loc_1bc1e7: // 0160:1bc1e7
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1bc2a5;
    memoryASet32(ds, 0x1bcbba, 0x00000000);
    memoryASet32(ds, 0x1bcbb0, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bcb96, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcba6, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb9e, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bcbc4, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bcd68, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bcd72, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcd86, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcd7c, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bc28f;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcd68, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcd72, eax);
    memoryASet32(ds, 0x1bcd86, 0x00000000);
    memoryASet32(ds, 0x1bcd7c, 0x00000000);
loc_1bc28f: // 0160:1bc28f
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcbba, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcbb0, eax);
loc_1bc2a5: // 0160:1bc2a5
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1bc363;
    memoryASet32(ds, 0x1bcbf4, 0x00000000);
    memoryASet32(ds, 0x1bcbea, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bcbd0, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcbe0, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcbd8, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bcbfe, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bcd95, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bcd9f, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcdb3, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcda9, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bc34d;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcd95, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcd9f, eax);
    memoryASet32(ds, 0x1bcdb3, 0x00000000);
    memoryASet32(ds, 0x1bcda9, 0x00000000);
loc_1bc34d: // 0160:1bc34d
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcbf4, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcbea, eax);
loc_1bc363: // 0160:1bc363
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1bc421;
    memoryASet32(ds, 0x1bcc2e, 0x00000000);
    memoryASet32(ds, 0x1bcc24, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bcc0a, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc1a, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc12, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bcc38, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bcdc2, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bcdcc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcde0, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcdd6, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bc40b;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcdc2, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcdcc, eax);
    memoryASet32(ds, 0x1bcde0, 0x00000000);
    memoryASet32(ds, 0x1bcdd6, 0x00000000);
loc_1bc40b: // 0160:1bc40b
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcc2e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcc24, eax);
loc_1bc421: // 0160:1bc421
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1bc4df;
    memoryASet32(ds, 0x1bcc68, 0x00000000);
    memoryASet32(ds, 0x1bcc5e, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bcc44, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc54, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc4c, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bcc72, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bcdef, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bcdf9, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bce0d, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bce03, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bc4c9;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcdef, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcdf9, eax);
    memoryASet32(ds, 0x1bce0d, 0x00000000);
    memoryASet32(ds, 0x1bce03, 0x00000000);
loc_1bc4c9: // 0160:1bc4c9
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcc68, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcc5e, eax);
loc_1bc4df: // 0160:1bc4df
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1bc59d;
    memoryASet32(ds, 0x1bcca2, 0x00000000);
    memoryASet32(ds, 0x1bcc98, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bcc7e, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc8e, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc86, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bccac, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bce1c, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bce26, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bce3a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bce30, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bc587;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bce1c, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bce26, eax);
    memoryASet32(ds, 0x1bce3a, 0x00000000);
    memoryASet32(ds, 0x1bce30, 0x00000000);
loc_1bc587: // 0160:1bc587
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcca2, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcc98, eax);
loc_1bc59d: // 0160:1bc59d
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1bc65b;
    memoryASet32(ds, 0x1bccdc, 0x00000000);
    memoryASet32(ds, 0x1bccd2, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bccb8, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bccc8, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bccc0, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bcce6, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bce49, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bce53, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bce67, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bce5d, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bc645;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bce49, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bce53, eax);
    memoryASet32(ds, 0x1bce67, 0x00000000);
    memoryASet32(ds, 0x1bce5d, 0x00000000);
loc_1bc645: // 0160:1bc645
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bccdc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bccd2, eax);
loc_1bc65b: // 0160:1bc65b
    goto loc_1bce70;
loc_1bc660: // 0160:1bc660
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000010);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1bc690;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb32, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb2a, eax);
loc_1bc690: // 0160:1bc690
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1bc6bc;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb6c, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb64, eax);
loc_1bc6bc: // 0160:1bc6bc
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1bc6e8;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcba6, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcb9e, eax);
loc_1bc6e8: // 0160:1bc6e8
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1bc714;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcbe0, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcbd8, eax);
loc_1bc714: // 0160:1bc714
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1bc740;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc1a, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc12, eax);
loc_1bc740: // 0160:1bc740
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1bc76c;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc54, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc4c, eax);
loc_1bc76c: // 0160:1bc76c
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1bc798;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc8e, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bcc86, eax);
loc_1bc798: // 0160:1bc798
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1bc7c4;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bccc8, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bccc0, eax);
loc_1bc7c4: // 0160:1bc7c4
    goto loc_1bce70;
loc_1bc7c9: // 0160:1bc7c9
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000020);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1bc7f3;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcd2c, eax);
    memoryASet32(ds, 0x1bcb46, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcd22, eax);
    memoryASet32(ds, 0x1bcb3c, eax);
loc_1bc7f3: // 0160:1bc7f3
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1bc819;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcd59, eax);
    memoryASet32(ds, 0x1bcb80, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcd4f, eax);
    memoryASet32(ds, 0x1bcb76, eax);
loc_1bc819: // 0160:1bc819
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1bc83f;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcd86, eax);
    memoryASet32(ds, 0x1bcbba, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcd7c, eax);
    memoryASet32(ds, 0x1bcbb0, eax);
loc_1bc83f: // 0160:1bc83f
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1bc865;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcdb3, eax);
    memoryASet32(ds, 0x1bcbf4, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcda9, eax);
    memoryASet32(ds, 0x1bcbea, eax);
loc_1bc865: // 0160:1bc865
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1bc88b;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bcde0, eax);
    memoryASet32(ds, 0x1bcc2e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bcdd6, eax);
    memoryASet32(ds, 0x1bcc24, eax);
loc_1bc88b: // 0160:1bc88b
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1bc8b1;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bce0d, eax);
    memoryASet32(ds, 0x1bcc68, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bce03, eax);
    memoryASet32(ds, 0x1bcc5e, eax);
loc_1bc8b1: // 0160:1bc8b1
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1bc8d7;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bce3a, eax);
    memoryASet32(ds, 0x1bcca2, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bce30, eax);
    memoryASet32(ds, 0x1bcc98, eax);
loc_1bc8d7: // 0160:1bc8d7
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1bc8fd;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bce67, eax);
    memoryASet32(ds, 0x1bccdc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bce5d, eax);
    memoryASet32(ds, 0x1bccd2, eax);
loc_1bc8fd: // 0160:1bc8fd
    goto loc_1bce70;
loc_1bc902: // 0160:1bc902
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bcb32, eax);
    memoryASet32(ds, 0x1bcb2a, eax);
    memoryASet32(ds, 0x1bcb46, 0x00000000);
    memoryASet32(ds, 0x1bcb3c, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcd0e, eax);
    memoryASet32(ds, 0x1bcb22, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcd18, eax);
    memoryASet32(ds, 0x1bcb50, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bcb6c, eax);
    memoryASet32(ds, 0x1bcb64, eax);
    memoryASet32(ds, 0x1bcb80, 0x00000000);
    memoryASet32(ds, 0x1bcb76, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcd3b, eax);
    memoryASet32(ds, 0x1bcb5c, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcd45, eax);
    memoryASet32(ds, 0x1bcb8a, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bcba6, eax);
    memoryASet32(ds, 0x1bcb9e, eax);
    memoryASet32(ds, 0x1bcbba, 0x00000000);
    memoryASet32(ds, 0x1bcbb0, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcd68, eax);
    memoryASet32(ds, 0x1bcb96, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcd72, eax);
    memoryASet32(ds, 0x1bcbc4, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bcbe0, eax);
    memoryASet32(ds, 0x1bcbd8, eax);
    memoryASet32(ds, 0x1bcbf4, 0x00000000);
    memoryASet32(ds, 0x1bcbea, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcd95, eax);
    memoryASet32(ds, 0x1bcbd0, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcd9f, eax);
    memoryASet32(ds, 0x1bcbfe, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bcc1a, eax);
    memoryASet32(ds, 0x1bcc12, eax);
    memoryASet32(ds, 0x1bcc2e, 0x00000000);
    memoryASet32(ds, 0x1bcc24, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcdc2, eax);
    memoryASet32(ds, 0x1bcc0a, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcdcc, eax);
    memoryASet32(ds, 0x1bcc38, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bcc54, eax);
    memoryASet32(ds, 0x1bcc4c, eax);
    memoryASet32(ds, 0x1bcc68, 0x00000000);
    memoryASet32(ds, 0x1bcc5e, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bcdef, eax);
    memoryASet32(ds, 0x1bcc44, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bcdf9, eax);
    memoryASet32(ds, 0x1bcc72, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bcc8e, eax);
    memoryASet32(ds, 0x1bcc86, eax);
    memoryASet32(ds, 0x1bcca2, 0x00000000);
    memoryASet32(ds, 0x1bcc98, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bce1c, eax);
    memoryASet32(ds, 0x1bcc7e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bce26, eax);
    memoryASet32(ds, 0x1bccac, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bccc8, eax);
    memoryASet32(ds, 0x1bccc0, eax);
    memoryASet32(ds, 0x1bccdc, 0x00000000);
    memoryASet32(ds, 0x1bccd2, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bce49, eax);
    memoryASet32(ds, 0x1bccb8, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bce53, eax);
    memoryASet32(ds, 0x1bcce6, eax);
    goto loc_1bce70;
loc_1bcb07: // 0160:1bcb07
    flags.direction = 0;
    edi = memoryAGet32(ss, ebp + 12);
    ecx = memoryAGet32(ss, ebp + 40);
    ecx += ecx;
    edi += ecx;
    ecx = -ecx;
    ebx = 0;
    goto loc_1bcb18;
loc_1bcb18: // 0160:1bcb18
    goto loc_1bcb1a;
loc_1bcb1a: // 0160:1bcb1a
    goto loc_1bcb1c;
loc_1bcb1c: // 0160:1bcb1c
    goto loc_1bcb1e;
loc_1bcb1e: // 0160:1bcb1e
    goto loc_1bcb20;
loc_1bcb20: // 0160:1bcb20
    bl = memoryAGet(ds, 0x7fffffff);
    ax = memoryAGet16(ds, stop("GetOpAddress"));
    dx = memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc00f) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc00f, memoryAGet32(ds, 0x1bc00f) + 0x7fffffff);
    memoryASet32(ds, 0x1bcb22, memoryAGet32(ds, 0x1bcb22) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bcb22) >= 0x7fffffff)
        goto loc_1bcd08;
loc_1bcb5a: // 0160:1bcb5a
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    dx += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc013) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc013, memoryAGet32(ds, 0x1bc013) + 0x7fffffff);
    memoryASet32(ds, 0x1bcb5c, memoryAGet32(ds, 0x1bcb5c) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bcb5c) >= 0x7fffffff)
        goto loc_1bcd35;
loc_1bcb94: // 0160:1bcb94
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    dx += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc017) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc017, memoryAGet32(ds, 0x1bc017) + 0x7fffffff);
    memoryASet32(ds, 0x1bcb96, memoryAGet32(ds, 0x1bcb96) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bcb96) >= 0x7fffffff)
        goto loc_1bcd62;
loc_1bcbce: // 0160:1bcbce
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    dx += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc01b) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc01b, memoryAGet32(ds, 0x1bc01b) + 0x7fffffff);
    memoryASet32(ds, 0x1bcbd0, memoryAGet32(ds, 0x1bcbd0) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bcbd0) >= 0x7fffffff)
        goto loc_1bcd8f;
loc_1bcc08: // 0160:1bcc08
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    dx += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc01f) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc01f, memoryAGet32(ds, 0x1bc01f) + 0x7fffffff);
    memoryASet32(ds, 0x1bcc0a, memoryAGet32(ds, 0x1bcc0a) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bcc0a) >= 0x7fffffff)
        goto loc_1bcdbc;
loc_1bcc42: // 0160:1bcc42
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    dx += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc023) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc023, memoryAGet32(ds, 0x1bc023) + 0x7fffffff);
    memoryASet32(ds, 0x1bcc44, memoryAGet32(ds, 0x1bcc44) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bcc44) >= 0x7fffffff)
        goto loc_1bcde9;
loc_1bcc7c: // 0160:1bcc7c
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    dx += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc027) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc027, memoryAGet32(ds, 0x1bc027) + 0x7fffffff);
    memoryASet32(ds, 0x1bcc7e, memoryAGet32(ds, 0x1bcc7e) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bcc7e) >= 0x7fffffff)
        goto loc_1bce16;
loc_1bccb6: // 0160:1bccb6
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    dx += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc02b) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc02b, memoryAGet32(ds, 0x1bc02b) + 0x7fffffff);
    memoryASet32(ds, 0x1bccb8, memoryAGet32(ds, 0x1bccb8) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bccb8) >= 0x7fffffff)
        goto loc_1bce43;
loc_1bccf0: // 0160:1bccf0
    al = dh;
    ax ^= 0x8080;
    memoryASet16(ds, ecx + edi, ax);
    ecx += 0x00000002;
    if (ecx)
        goto loc_1bcb20;
    goto loc_1bce70;
loc_1bcd08: // 0160:1bcd08
    memoryASet32(ds, 0x1bcb22, 0x7fffffff);
    memoryASet32(ds, 0x1bcb50, 0x7fffffff);
    memoryASet32(ds, 0x1bcb3c, 0x7fffffff);
    memoryASet32(ds, 0x1bcb46, 0x7fffffff);
    goto loc_1bcb5a;
loc_1bcd35: // 0160:1bcd35
    memoryASet32(ds, 0x1bcb5c, 0x7fffffff);
    memoryASet32(ds, 0x1bcb8a, 0x7fffffff);
    memoryASet32(ds, 0x1bcb76, 0x7fffffff);
    memoryASet32(ds, 0x1bcb80, 0x7fffffff);
    goto loc_1bcb94;
loc_1bcd62: // 0160:1bcd62
    memoryASet32(ds, 0x1bcb96, 0x7fffffff);
    memoryASet32(ds, 0x1bcbc4, 0x7fffffff);
    memoryASet32(ds, 0x1bcbb0, 0x7fffffff);
    memoryASet32(ds, 0x1bcbba, 0x7fffffff);
    goto loc_1bcbce;
loc_1bcd8f: // 0160:1bcd8f
    memoryASet32(ds, 0x1bcbd0, 0x7fffffff);
    memoryASet32(ds, 0x1bcbfe, 0x7fffffff);
    memoryASet32(ds, 0x1bcbea, 0x7fffffff);
    memoryASet32(ds, 0x1bcbf4, 0x7fffffff);
    goto loc_1bcc08;
loc_1bcdbc: // 0160:1bcdbc
    memoryASet32(ds, 0x1bcc0a, 0x7fffffff);
    memoryASet32(ds, 0x1bcc38, 0x7fffffff);
    memoryASet32(ds, 0x1bcc24, 0x7fffffff);
    memoryASet32(ds, 0x1bcc2e, 0x7fffffff);
    goto loc_1bcc42;
loc_1bcde9: // 0160:1bcde9
    memoryASet32(ds, 0x1bcc44, 0x7fffffff);
    memoryASet32(ds, 0x1bcc72, 0x7fffffff);
    memoryASet32(ds, 0x1bcc5e, 0x7fffffff);
    memoryASet32(ds, 0x1bcc68, 0x7fffffff);
    goto loc_1bcc7c;
loc_1bce16: // 0160:1bce16
    memoryASet32(ds, 0x1bcc7e, 0x7fffffff);
    memoryASet32(ds, 0x1bccac, 0x7fffffff);
    memoryASet32(ds, 0x1bcc98, 0x7fffffff);
    memoryASet32(ds, 0x1bcca2, 0x7fffffff);
    goto loc_1bccb6;
loc_1bce43: // 0160:1bce43
    memoryASet32(ds, 0x1bccb8, 0x7fffffff);
    memoryASet32(ds, 0x1bcce6, 0x7fffffff);
    memoryASet32(ds, 0x1bccd2, 0x7fffffff);
    memoryASet32(ds, 0x1bccdc, 0x7fffffff);
    goto loc_1bccf0;
loc_1bce70: // 0160:1bce70
    stop("disassembly failed at 160:1bce70 popal ");
    flagsFromReg32(pop32());
    stop("disassembly failed at 160:1bce72 leave ");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1bce74() // 0160:1bce74 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(flagAsReg32());
    stop("disassembly failed at 160:1bce78 pushal ");
    flags.interrupts = 0;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) & 0x000000ff);
    memoryASet32(ss, ebp + 36, memoryAGet32(ss, ebp + 36) & 0x000000ff);
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000020)
        goto loc_1bd55e;
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000010)
        goto loc_1bd44d;
    if (memoryAGet32(ss, ebp + 8) == 0xffffffff)
        goto loc_1bd697;
    if (memoryAGet32(ss, ebp + 8) == 0xfffffffe)
        goto loc_1bd874;
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1bcf63;
    memoryASet32(ds, 0x1bd8aa, 0x00000000);
    memoryASet32(ds, 0x1bd8a0, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bd88e, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd896, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bd8b4, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bda34, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bda3e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bda52, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bda48, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bcf4d;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bda34, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bda3e, eax);
    memoryASet32(ds, 0x1bda52, 0x00000000);
    memoryASet32(ds, 0x1bda48, 0x00000000);
loc_1bcf4d: // 0160:1bcf4d
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bd8aa, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bd8a0, eax);
loc_1bcf63: // 0160:1bcf63
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1bd016;
    memoryASet32(ds, 0x1bd8dc, 0x00000000);
    memoryASet32(ds, 0x1bd8d2, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bd8c0, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd8c8, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bd8e6, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bda61, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bda6b, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bda7f, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bda75, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bd000;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bda61, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bda6b, eax);
    memoryASet32(ds, 0x1bda7f, 0x00000000);
    memoryASet32(ds, 0x1bda75, 0x00000000);
loc_1bd000: // 0160:1bd000
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bd8dc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bd8d2, eax);
loc_1bd016: // 0160:1bd016
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1bd0c9;
    memoryASet32(ds, 0x1bd90e, 0x00000000);
    memoryASet32(ds, 0x1bd904, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bd8f2, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd8fa, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bd918, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bda8e, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bda98, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdaac, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdaa2, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bd0b3;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bda8e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bda98, eax);
    memoryASet32(ds, 0x1bdaac, 0x00000000);
    memoryASet32(ds, 0x1bdaa2, 0x00000000);
loc_1bd0b3: // 0160:1bd0b3
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bd90e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bd904, eax);
loc_1bd0c9: // 0160:1bd0c9
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1bd17c;
    memoryASet32(ds, 0x1bd940, 0x00000000);
    memoryASet32(ds, 0x1bd936, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bd924, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd92c, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bd94a, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bdabb, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bdac5, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdad9, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdacf, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bd166;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdabb, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdac5, eax);
    memoryASet32(ds, 0x1bdad9, 0x00000000);
    memoryASet32(ds, 0x1bdacf, 0x00000000);
loc_1bd166: // 0160:1bd166
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bd940, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bd936, eax);
loc_1bd17c: // 0160:1bd17c
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1bd22f;
    memoryASet32(ds, 0x1bd972, 0x00000000);
    memoryASet32(ds, 0x1bd968, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bd956, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd95e, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bd97c, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bdae8, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bdaf2, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdb06, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdafc, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bd219;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdae8, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdaf2, eax);
    memoryASet32(ds, 0x1bdb06, 0x00000000);
    memoryASet32(ds, 0x1bdafc, 0x00000000);
loc_1bd219: // 0160:1bd219
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bd972, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bd968, eax);
loc_1bd22f: // 0160:1bd22f
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1bd2e2;
    memoryASet32(ds, 0x1bd9a4, 0x00000000);
    memoryASet32(ds, 0x1bd99a, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bd988, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd990, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bd9ae, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bdb15, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bdb1f, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdb33, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdb29, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bd2cc;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdb15, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdb1f, eax);
    memoryASet32(ds, 0x1bdb33, 0x00000000);
    memoryASet32(ds, 0x1bdb29, 0x00000000);
loc_1bd2cc: // 0160:1bd2cc
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bd9a4, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bd99a, eax);
loc_1bd2e2: // 0160:1bd2e2
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1bd395;
    memoryASet32(ds, 0x1bd9d6, 0x00000000);
    memoryASet32(ds, 0x1bd9cc, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bd9ba, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd9c2, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bd9e0, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bdb42, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bdb4c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdb60, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdb56, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bd37f;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdb42, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdb4c, eax);
    memoryASet32(ds, 0x1bdb60, 0x00000000);
    memoryASet32(ds, 0x1bdb56, 0x00000000);
loc_1bd37f: // 0160:1bd37f
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bd9d6, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bd9cc, eax);
loc_1bd395: // 0160:1bd395
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1bd448;
    memoryASet32(ds, 0x1bda08, 0x00000000);
    memoryASet32(ds, 0x1bd9fe, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1bd9ec, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd9f4, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1bda12, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1bdb6f, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1bdb79, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdb8d, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdb83, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bd432;
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdb6f, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdb79, eax);
    memoryASet32(ds, 0x1bdb8d, 0x00000000);
    memoryASet32(ds, 0x1bdb83, 0x00000000);
loc_1bd432: // 0160:1bd432
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bda08, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bd9fe, eax);
loc_1bd448: // 0160:1bd448
    goto loc_1bdb96;
loc_1bd44d: // 0160:1bd44d
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000010);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1bd472;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd896, eax);
loc_1bd472: // 0160:1bd472
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1bd493;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd8c8, eax);
loc_1bd493: // 0160:1bd493
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1bd4b4;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd8fa, eax);
loc_1bd4b4: // 0160:1bd4b4
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1bd4d5;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd92c, eax);
loc_1bd4d5: // 0160:1bd4d5
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1bd4f6;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd95e, eax);
loc_1bd4f6: // 0160:1bd4f6
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1bd517;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd990, eax);
loc_1bd517: // 0160:1bd517
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1bd538;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd9c2, eax);
loc_1bd538: // 0160:1bd538
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1bd559;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c21a0;
    eax += ebx;
    memoryASet32(ds, 0x1bd9f4, eax);
loc_1bd559: // 0160:1bd559
    goto loc_1bdb96;
loc_1bd55e: // 0160:1bd55e
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000020);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1bd588;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bda52, eax);
    memoryASet32(ds, 0x1bd8aa, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bda48, eax);
    memoryASet32(ds, 0x1bd8a0, eax);
loc_1bd588: // 0160:1bd588
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1bd5ae;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bda7f, eax);
    memoryASet32(ds, 0x1bd8dc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bda75, eax);
    memoryASet32(ds, 0x1bd8d2, eax);
loc_1bd5ae: // 0160:1bd5ae
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1bd5d4;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdaac, eax);
    memoryASet32(ds, 0x1bd90e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdaa2, eax);
    memoryASet32(ds, 0x1bd904, eax);
loc_1bd5d4: // 0160:1bd5d4
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1bd5fa;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdad9, eax);
    memoryASet32(ds, 0x1bd940, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdacf, eax);
    memoryASet32(ds, 0x1bd936, eax);
loc_1bd5fa: // 0160:1bd5fa
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1bd620;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdb06, eax);
    memoryASet32(ds, 0x1bd972, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdafc, eax);
    memoryASet32(ds, 0x1bd968, eax);
loc_1bd620: // 0160:1bd620
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1bd646;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdb33, eax);
    memoryASet32(ds, 0x1bd9a4, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdb29, eax);
    memoryASet32(ds, 0x1bd99a, eax);
loc_1bd646: // 0160:1bd646
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1bd66c;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdb60, eax);
    memoryASet32(ds, 0x1bd9d6, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdb56, eax);
    memoryASet32(ds, 0x1bd9cc, eax);
loc_1bd66c: // 0160:1bd66c
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1bd692;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1bdb8d, eax);
    memoryASet32(ds, 0x1bda08, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1bdb83, eax);
    memoryASet32(ds, 0x1bd9fe, eax);
loc_1bd692: // 0160:1bd692
    goto loc_1bdb96;
loc_1bd697: // 0160:1bd697
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bd896, eax);
    memoryASet32(ds, 0x1bd8aa, 0x00000000);
    memoryASet32(ds, 0x1bd8a0, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bda34, eax);
    memoryASet32(ds, 0x1bd88e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bda3e, eax);
    memoryASet32(ds, 0x1bd8b4, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bd8c8, eax);
    memoryASet32(ds, 0x1bd8dc, 0x00000000);
    memoryASet32(ds, 0x1bd8d2, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bda61, eax);
    memoryASet32(ds, 0x1bd8c0, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bda6b, eax);
    memoryASet32(ds, 0x1bd8e6, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bd8fa, eax);
    memoryASet32(ds, 0x1bd90e, 0x00000000);
    memoryASet32(ds, 0x1bd904, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bda8e, eax);
    memoryASet32(ds, 0x1bd8f2, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bda98, eax);
    memoryASet32(ds, 0x1bd918, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bd92c, eax);
    memoryASet32(ds, 0x1bd940, 0x00000000);
    memoryASet32(ds, 0x1bd936, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdabb, eax);
    memoryASet32(ds, 0x1bd924, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdac5, eax);
    memoryASet32(ds, 0x1bd94a, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bd95e, eax);
    memoryASet32(ds, 0x1bd972, 0x00000000);
    memoryASet32(ds, 0x1bd968, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdae8, eax);
    memoryASet32(ds, 0x1bd956, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdaf2, eax);
    memoryASet32(ds, 0x1bd97c, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bd990, eax);
    memoryASet32(ds, 0x1bd9a4, 0x00000000);
    memoryASet32(ds, 0x1bd99a, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdb15, eax);
    memoryASet32(ds, 0x1bd988, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdb1f, eax);
    memoryASet32(ds, 0x1bd9ae, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bd9c2, eax);
    memoryASet32(ds, 0x1bd9d6, 0x00000000);
    memoryASet32(ds, 0x1bd9cc, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdb42, eax);
    memoryASet32(ds, 0x1bd9ba, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdb4c, eax);
    memoryASet32(ds, 0x1bd9e0, eax);
    eax = 0x3c21a0;
    memoryASet32(ds, 0x1bd9f4, eax);
    memoryASet32(ds, 0x1bda08, 0x00000000);
    memoryASet32(ds, 0x1bd9fe, 0x00000000);
    eax = 0x001bc007;
    memoryASet32(ds, 0x1bdb6f, eax);
    memoryASet32(ds, 0x1bd9ec, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1bdb79, eax);
    memoryASet32(ds, 0x1bda12, eax);
    goto loc_1bdb96;
loc_1bd874: // 0160:1bd874
    flags.direction = 0;
    edi = memoryAGet32(ss, ebp + 12);
    ecx = memoryAGet32(ss, ebp + 40);
    edi += ecx;
    ecx = -ecx;
    ebx = 0;
    goto loc_1bd883;
loc_1bd883: // 0160:1bd883
    goto loc_1bd885;
loc_1bd885: // 0160:1bd885
    goto loc_1bd887;
loc_1bd887: // 0160:1bd887
    goto loc_1bd889;
loc_1bd889: // 0160:1bd889
    goto loc_1bd88c;
    // gap 1 bytes
loc_1bd88c: // 0160:1bd88c
    bl = memoryAGet(ds, 0x7fffffff);
    ax = memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc00f) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc00f, memoryAGet32(ds, 0x1bc00f) + 0x7fffffff);
    memoryASet32(ds, 0x1bd88e, memoryAGet32(ds, 0x1bd88e) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bd88e) >= 0x7fffffff)
        goto loc_1bda2e;
loc_1bd8be: // 0160:1bd8be
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc013) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc013, memoryAGet32(ds, 0x1bc013) + 0x7fffffff);
    memoryASet32(ds, 0x1bd8c0, memoryAGet32(ds, 0x1bd8c0) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bd8c0) >= 0x7fffffff)
        goto loc_1bda5b;
loc_1bd8f0: // 0160:1bd8f0
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc017) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc017, memoryAGet32(ds, 0x1bc017) + 0x7fffffff);
    memoryASet32(ds, 0x1bd8f2, memoryAGet32(ds, 0x1bd8f2) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bd8f2) >= 0x7fffffff)
        goto loc_1bda88;
loc_1bd922: // 0160:1bd922
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc01b) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc01b, memoryAGet32(ds, 0x1bc01b) + 0x7fffffff);
    memoryASet32(ds, 0x1bd924, memoryAGet32(ds, 0x1bd924) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bd924) >= 0x7fffffff)
        goto loc_1bdab5;
loc_1bd954: // 0160:1bd954
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc01f) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc01f, memoryAGet32(ds, 0x1bc01f) + 0x7fffffff);
    memoryASet32(ds, 0x1bd956, memoryAGet32(ds, 0x1bd956) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bd956) >= 0x7fffffff)
        goto loc_1bdae2;
loc_1bd986: // 0160:1bd986
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc023) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc023, memoryAGet32(ds, 0x1bc023) + 0x7fffffff);
    memoryASet32(ds, 0x1bd988, memoryAGet32(ds, 0x1bd988) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bd988) >= 0x7fffffff)
        goto loc_1bdb0f;
loc_1bd9b8: // 0160:1bd9b8
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc027) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc027, memoryAGet32(ds, 0x1bc027) + 0x7fffffff);
    memoryASet32(ds, 0x1bd9ba, memoryAGet32(ds, 0x1bd9ba) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bd9ba) >= 0x7fffffff)
        goto loc_1bdb3c;
loc_1bd9ea: // 0160:1bd9ea
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, stop("GetOpAddress"));
    flags.carry = (memoryAGet32(ds, 0x1bc02b) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bc02b, memoryAGet32(ds, 0x1bc02b) + 0x7fffffff);
    memoryASet32(ds, 0x1bd9ec, memoryAGet32(ds, 0x1bd9ec) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1bd9ec) >= 0x7fffffff)
        goto loc_1bdb69;
loc_1bda1c: // 0160:1bda1c
    ah ^= 0x80;
    memoryASet(ds, ecx + edi, ah);
    ecx++;
    if (ecx)
        goto loc_1bd88c;
    goto loc_1bdb96;
loc_1bda2e: // 0160:1bda2e
    memoryASet32(ds, 0x1bd88e, 0x7fffffff);
    memoryASet32(ds, 0x1bd8b4, 0x7fffffff);
    memoryASet32(ds, 0x1bd8a0, 0x7fffffff);
    memoryASet32(ds, 0x1bd8aa, 0x7fffffff);
    goto loc_1bd8be;
loc_1bda5b: // 0160:1bda5b
    memoryASet32(ds, 0x1bd8c0, 0x7fffffff);
    memoryASet32(ds, 0x1bd8e6, 0x7fffffff);
    memoryASet32(ds, 0x1bd8d2, 0x7fffffff);
    memoryASet32(ds, 0x1bd8dc, 0x7fffffff);
    goto loc_1bd8f0;
loc_1bda88: // 0160:1bda88
    memoryASet32(ds, 0x1bd8f2, 0x7fffffff);
    memoryASet32(ds, 0x1bd918, 0x7fffffff);
    memoryASet32(ds, 0x1bd904, 0x7fffffff);
    memoryASet32(ds, 0x1bd90e, 0x7fffffff);
    goto loc_1bd922;
loc_1bdab5: // 0160:1bdab5
    memoryASet32(ds, 0x1bd924, 0x7fffffff);
    memoryASet32(ds, 0x1bd94a, 0x7fffffff);
    memoryASet32(ds, 0x1bd936, 0x7fffffff);
    memoryASet32(ds, 0x1bd940, 0x7fffffff);
    goto loc_1bd954;
loc_1bdae2: // 0160:1bdae2
    memoryASet32(ds, 0x1bd956, 0x7fffffff);
    memoryASet32(ds, 0x1bd97c, 0x7fffffff);
    memoryASet32(ds, 0x1bd968, 0x7fffffff);
    memoryASet32(ds, 0x1bd972, 0x7fffffff);
    goto loc_1bd986;
loc_1bdb0f: // 0160:1bdb0f
    memoryASet32(ds, 0x1bd988, 0x7fffffff);
    memoryASet32(ds, 0x1bd9ae, 0x7fffffff);
    memoryASet32(ds, 0x1bd99a, 0x7fffffff);
    memoryASet32(ds, 0x1bd9a4, 0x7fffffff);
    goto loc_1bd9b8;
loc_1bdb3c: // 0160:1bdb3c
    memoryASet32(ds, 0x1bd9ba, 0x7fffffff);
    memoryASet32(ds, 0x1bd9e0, 0x7fffffff);
    memoryASet32(ds, 0x1bd9cc, 0x7fffffff);
    memoryASet32(ds, 0x1bd9d6, 0x7fffffff);
    goto loc_1bd9ea;
loc_1bdb69: // 0160:1bdb69
    memoryASet32(ds, 0x1bd9ec, 0x7fffffff);
    memoryASet32(ds, 0x1bda12, 0x7fffffff);
    memoryASet32(ds, 0x1bd9fe, 0x7fffffff);
    memoryASet32(ds, 0x1bda08, 0x7fffffff);
    goto loc_1bda1c;
loc_1bdb96: // 0160:1bdb96
    stop("disassembly failed at 160:1bdb96 popal ");
    flagsFromReg32(pop32());
    stop("disassembly failed at 160:1bdb98 leave ");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1bdba0() // 0160:1bdba0 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    stop("disassembly failed at 160:1bdba3 pushal ");
    if ((int32_t)memoryAGet32(ss, ebp + 40) <= (int32_t)0x00000000)
        goto loc_1c05c1;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_1bdbbb;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) - 0x00000004);
loc_1bdbbb: // 0160:1bdbbb
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_1bdbc8;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) - 0x00000004);
loc_1bdbc8: // 0160:1bdbc8
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_1bdbd5;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) - 0x00000004);
loc_1bdbd5: // 0160:1bdbd5
    ebx = memoryAGet32(ss, ebp + 44);
    ecx = memoryAGet32(ss, ebp + 48);
    edx = memoryAGet32(ss, ebp + 52);
    edi = 0xffffdc6c;
    eax = 0;
    edi = 0;
loc_1bdbe7: // 0160:1bdbe7
    memoryASet32(ds, edi + 1825902, ebx);
    ebx += 0x00000004;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ss, ebp + 24))
        goto loc_1bdbf8;
    ebx -= memoryAGet32(ss, ebp + 24);
loc_1bdbf8: // 0160:1bdbf8
    memoryASet32(ds, edi + 1825917, ecx);
    ecx += 0x00000004;
    if ((int32_t)ecx <= (int32_t)memoryAGet32(ss, ebp + 28))
        goto loc_1bdc09;
    ecx -= memoryAGet32(ss, ebp + 28);
loc_1bdc09: // 0160:1bdc09
    memoryASet32(ds, edi + 1825977, edx);
    edx += 0x00000004;
    if ((int32_t)edx <= (int32_t)memoryAGet32(ss, ebp + 32))
        goto loc_1bdc1a;
    edx -= memoryAGet32(ss, ebp + 32);
loc_1bdc1a: // 0160:1bdc1a
    memoryASet32(ds, edi + 1826028, eax);
    edi += 0x00000084;
    eax += 0x00000004;
    if (eax != 0x00000140)
        goto loc_1bdbe7;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_1bdc3d;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) + 0x00000004);
loc_1bdc3d: // 0160:1bdc3d
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_1bdc4a;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) + 0x00000004);
loc_1bdc4a: // 0160:1bdc4a
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_1bdc57;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) + 0x00000004);
loc_1bdc57: // 0160:1bdc57
    ecx = memoryAGet32(ss, ebp + 8);
    ebx = memoryAGet32(ss, ebp + 12);
    esi = memoryAGet32(ss, ebp + 16);
    edi = memoryAGet32(ss, ebp + 20);
    goto loc_1bdc65;
loc_1bdc65: // 0160:1bdc65
    goto loc_1bdc67;
loc_1bdc67: // 0160:1bdc67
    goto loc_1bdc6c;
    // gap 3 bytes
loc_1bdc6c: // 0160:1bdc6c
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bdcea;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdcae;
    if (dl & 0x80)
        goto loc_1bdc90;
    al = dl;
loc_1bdc90: // 0160:1bdc90
    if (dh & 0x80)
        goto loc_1bdc97;
    ah = dh;
loc_1bdc97: // 0160:1bdc97
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdca4;
    al = dl;
loc_1bdca4: // 0160:1bdca4
    if (dh & 0x80)
        goto loc_1bdcab;
    ah = dh;
loc_1bdcab: // 0160:1bdcab
    eax = rol32(eax, 0x10);
loc_1bdcae: // 0160:1bdcae
    if (!(eax & 0x80808080))
        goto loc_1bdcea;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdcea;
    if (dl & 0x80)
        goto loc_1bdccc;
    al = dl;
loc_1bdccc: // 0160:1bdccc
    if (dh & 0x80)
        goto loc_1bdcd3;
    ah = dh;
loc_1bdcd3: // 0160:1bdcd3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdce0;
    al = dl;
loc_1bdce0: // 0160:1bdce0
    if (dh & 0x80)
        goto loc_1bdce7;
    ah = dh;
loc_1bdce7: // 0160:1bdce7
    eax = rol32(eax, 0x10);
loc_1bdcea: // 0160:1bdcea
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bdd6e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdd32;
    if (dl & 0x80)
        goto loc_1bdd14;
    al = dl;
loc_1bdd14: // 0160:1bdd14
    if (dh & 0x80)
        goto loc_1bdd1b;
    ah = dh;
loc_1bdd1b: // 0160:1bdd1b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdd28;
    al = dl;
loc_1bdd28: // 0160:1bdd28
    if (dh & 0x80)
        goto loc_1bdd2f;
    ah = dh;
loc_1bdd2f: // 0160:1bdd2f
    eax = rol32(eax, 0x10);
loc_1bdd32: // 0160:1bdd32
    if (!(eax & 0x80808080))
        goto loc_1bdd6e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdd6e;
    if (dl & 0x80)
        goto loc_1bdd50;
    al = dl;
loc_1bdd50: // 0160:1bdd50
    if (dh & 0x80)
        goto loc_1bdd57;
    ah = dh;
loc_1bdd57: // 0160:1bdd57
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdd64;
    al = dl;
loc_1bdd64: // 0160:1bdd64
    if (dh & 0x80)
        goto loc_1bdd6b;
    ah = dh;
loc_1bdd6b: // 0160:1bdd6b
    eax = rol32(eax, 0x10);
loc_1bdd6e: // 0160:1bdd6e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bddf2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bddb6;
    if (dl & 0x80)
        goto loc_1bdd98;
    al = dl;
loc_1bdd98: // 0160:1bdd98
    if (dh & 0x80)
        goto loc_1bdd9f;
    ah = dh;
loc_1bdd9f: // 0160:1bdd9f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bddac;
    al = dl;
loc_1bddac: // 0160:1bddac
    if (dh & 0x80)
        goto loc_1bddb3;
    ah = dh;
loc_1bddb3: // 0160:1bddb3
    eax = rol32(eax, 0x10);
loc_1bddb6: // 0160:1bddb6
    if (!(eax & 0x80808080))
        goto loc_1bddf2;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bddf2;
    if (dl & 0x80)
        goto loc_1bddd4;
    al = dl;
loc_1bddd4: // 0160:1bddd4
    if (dh & 0x80)
        goto loc_1bdddb;
    ah = dh;
loc_1bdddb: // 0160:1bdddb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdde8;
    al = dl;
loc_1bdde8: // 0160:1bdde8
    if (dh & 0x80)
        goto loc_1bddef;
    ah = dh;
loc_1bddef: // 0160:1bddef
    eax = rol32(eax, 0x10);
loc_1bddf2: // 0160:1bddf2
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bde76;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bde3a;
    if (dl & 0x80)
        goto loc_1bde1c;
    al = dl;
loc_1bde1c: // 0160:1bde1c
    if (dh & 0x80)
        goto loc_1bde23;
    ah = dh;
loc_1bde23: // 0160:1bde23
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bde30;
    al = dl;
loc_1bde30: // 0160:1bde30
    if (dh & 0x80)
        goto loc_1bde37;
    ah = dh;
loc_1bde37: // 0160:1bde37
    eax = rol32(eax, 0x10);
loc_1bde3a: // 0160:1bde3a
    if (!(eax & 0x80808080))
        goto loc_1bde76;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bde76;
    if (dl & 0x80)
        goto loc_1bde58;
    al = dl;
loc_1bde58: // 0160:1bde58
    if (dh & 0x80)
        goto loc_1bde5f;
    ah = dh;
loc_1bde5f: // 0160:1bde5f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bde6c;
    al = dl;
loc_1bde6c: // 0160:1bde6c
    if (dh & 0x80)
        goto loc_1bde73;
    ah = dh;
loc_1bde73: // 0160:1bde73
    eax = rol32(eax, 0x10);
loc_1bde76: // 0160:1bde76
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bdefa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdebe;
    if (dl & 0x80)
        goto loc_1bdea0;
    al = dl;
loc_1bdea0: // 0160:1bdea0
    if (dh & 0x80)
        goto loc_1bdea7;
    ah = dh;
loc_1bdea7: // 0160:1bdea7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdeb4;
    al = dl;
loc_1bdeb4: // 0160:1bdeb4
    if (dh & 0x80)
        goto loc_1bdebb;
    ah = dh;
loc_1bdebb: // 0160:1bdebb
    eax = rol32(eax, 0x10);
loc_1bdebe: // 0160:1bdebe
    if (!(eax & 0x80808080))
        goto loc_1bdefa;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdefa;
    if (dl & 0x80)
        goto loc_1bdedc;
    al = dl;
loc_1bdedc: // 0160:1bdedc
    if (dh & 0x80)
        goto loc_1bdee3;
    ah = dh;
loc_1bdee3: // 0160:1bdee3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdef0;
    al = dl;
loc_1bdef0: // 0160:1bdef0
    if (dh & 0x80)
        goto loc_1bdef7;
    ah = dh;
loc_1bdef7: // 0160:1bdef7
    eax = rol32(eax, 0x10);
loc_1bdefa: // 0160:1bdefa
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bdf7e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdf42;
    if (dl & 0x80)
        goto loc_1bdf24;
    al = dl;
loc_1bdf24: // 0160:1bdf24
    if (dh & 0x80)
        goto loc_1bdf2b;
    ah = dh;
loc_1bdf2b: // 0160:1bdf2b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdf38;
    al = dl;
loc_1bdf38: // 0160:1bdf38
    if (dh & 0x80)
        goto loc_1bdf3f;
    ah = dh;
loc_1bdf3f: // 0160:1bdf3f
    eax = rol32(eax, 0x10);
loc_1bdf42: // 0160:1bdf42
    if (!(eax & 0x80808080))
        goto loc_1bdf7e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdf7e;
    if (dl & 0x80)
        goto loc_1bdf60;
    al = dl;
loc_1bdf60: // 0160:1bdf60
    if (dh & 0x80)
        goto loc_1bdf67;
    ah = dh;
loc_1bdf67: // 0160:1bdf67
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdf74;
    al = dl;
loc_1bdf74: // 0160:1bdf74
    if (dh & 0x80)
        goto loc_1bdf7b;
    ah = dh;
loc_1bdf7b: // 0160:1bdf7b
    eax = rol32(eax, 0x10);
loc_1bdf7e: // 0160:1bdf7e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be002;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bdfc6;
    if (dl & 0x80)
        goto loc_1bdfa8;
    al = dl;
loc_1bdfa8: // 0160:1bdfa8
    if (dh & 0x80)
        goto loc_1bdfaf;
    ah = dh;
loc_1bdfaf: // 0160:1bdfaf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdfbc;
    al = dl;
loc_1bdfbc: // 0160:1bdfbc
    if (dh & 0x80)
        goto loc_1bdfc3;
    ah = dh;
loc_1bdfc3: // 0160:1bdfc3
    eax = rol32(eax, 0x10);
loc_1bdfc6: // 0160:1bdfc6
    if (!(eax & 0x80808080))
        goto loc_1be002;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be002;
    if (dl & 0x80)
        goto loc_1bdfe4;
    al = dl;
loc_1bdfe4: // 0160:1bdfe4
    if (dh & 0x80)
        goto loc_1bdfeb;
    ah = dh;
loc_1bdfeb: // 0160:1bdfeb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bdff8;
    al = dl;
loc_1bdff8: // 0160:1bdff8
    if (dh & 0x80)
        goto loc_1bdfff;
    ah = dh;
loc_1bdfff: // 0160:1bdfff
    eax = rol32(eax, 0x10);
loc_1be002: // 0160:1be002
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be086;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be04a;
    if (dl & 0x80)
        goto loc_1be02c;
    al = dl;
loc_1be02c: // 0160:1be02c
    if (dh & 0x80)
        goto loc_1be033;
    ah = dh;
loc_1be033: // 0160:1be033
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be040;
    al = dl;
loc_1be040: // 0160:1be040
    if (dh & 0x80)
        goto loc_1be047;
    ah = dh;
loc_1be047: // 0160:1be047
    eax = rol32(eax, 0x10);
loc_1be04a: // 0160:1be04a
    if (!(eax & 0x80808080))
        goto loc_1be086;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be086;
    if (dl & 0x80)
        goto loc_1be068;
    al = dl;
loc_1be068: // 0160:1be068
    if (dh & 0x80)
        goto loc_1be06f;
    ah = dh;
loc_1be06f: // 0160:1be06f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be07c;
    al = dl;
loc_1be07c: // 0160:1be07c
    if (dh & 0x80)
        goto loc_1be083;
    ah = dh;
loc_1be083: // 0160:1be083
    eax = rol32(eax, 0x10);
loc_1be086: // 0160:1be086
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be10a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be0ce;
    if (dl & 0x80)
        goto loc_1be0b0;
    al = dl;
loc_1be0b0: // 0160:1be0b0
    if (dh & 0x80)
        goto loc_1be0b7;
    ah = dh;
loc_1be0b7: // 0160:1be0b7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be0c4;
    al = dl;
loc_1be0c4: // 0160:1be0c4
    if (dh & 0x80)
        goto loc_1be0cb;
    ah = dh;
loc_1be0cb: // 0160:1be0cb
    eax = rol32(eax, 0x10);
loc_1be0ce: // 0160:1be0ce
    if (!(eax & 0x80808080))
        goto loc_1be10a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be10a;
    if (dl & 0x80)
        goto loc_1be0ec;
    al = dl;
loc_1be0ec: // 0160:1be0ec
    if (dh & 0x80)
        goto loc_1be0f3;
    ah = dh;
loc_1be0f3: // 0160:1be0f3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be100;
    al = dl;
loc_1be100: // 0160:1be100
    if (dh & 0x80)
        goto loc_1be107;
    ah = dh;
loc_1be107: // 0160:1be107
    eax = rol32(eax, 0x10);
loc_1be10a: // 0160:1be10a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be18e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be152;
    if (dl & 0x80)
        goto loc_1be134;
    al = dl;
loc_1be134: // 0160:1be134
    if (dh & 0x80)
        goto loc_1be13b;
    ah = dh;
loc_1be13b: // 0160:1be13b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be148;
    al = dl;
loc_1be148: // 0160:1be148
    if (dh & 0x80)
        goto loc_1be14f;
    ah = dh;
loc_1be14f: // 0160:1be14f
    eax = rol32(eax, 0x10);
loc_1be152: // 0160:1be152
    if (!(eax & 0x80808080))
        goto loc_1be18e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be18e;
    if (dl & 0x80)
        goto loc_1be170;
    al = dl;
loc_1be170: // 0160:1be170
    if (dh & 0x80)
        goto loc_1be177;
    ah = dh;
loc_1be177: // 0160:1be177
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be184;
    al = dl;
loc_1be184: // 0160:1be184
    if (dh & 0x80)
        goto loc_1be18b;
    ah = dh;
loc_1be18b: // 0160:1be18b
    eax = rol32(eax, 0x10);
loc_1be18e: // 0160:1be18e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be212;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be1d6;
    if (dl & 0x80)
        goto loc_1be1b8;
    al = dl;
loc_1be1b8: // 0160:1be1b8
    if (dh & 0x80)
        goto loc_1be1bf;
    ah = dh;
loc_1be1bf: // 0160:1be1bf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be1cc;
    al = dl;
loc_1be1cc: // 0160:1be1cc
    if (dh & 0x80)
        goto loc_1be1d3;
    ah = dh;
loc_1be1d3: // 0160:1be1d3
    eax = rol32(eax, 0x10);
loc_1be1d6: // 0160:1be1d6
    if (!(eax & 0x80808080))
        goto loc_1be212;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be212;
    if (dl & 0x80)
        goto loc_1be1f4;
    al = dl;
loc_1be1f4: // 0160:1be1f4
    if (dh & 0x80)
        goto loc_1be1fb;
    ah = dh;
loc_1be1fb: // 0160:1be1fb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be208;
    al = dl;
loc_1be208: // 0160:1be208
    if (dh & 0x80)
        goto loc_1be20f;
    ah = dh;
loc_1be20f: // 0160:1be20f
    eax = rol32(eax, 0x10);
loc_1be212: // 0160:1be212
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be296;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be25a;
    if (dl & 0x80)
        goto loc_1be23c;
    al = dl;
loc_1be23c: // 0160:1be23c
    if (dh & 0x80)
        goto loc_1be243;
    ah = dh;
loc_1be243: // 0160:1be243
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be250;
    al = dl;
loc_1be250: // 0160:1be250
    if (dh & 0x80)
        goto loc_1be257;
    ah = dh;
loc_1be257: // 0160:1be257
    eax = rol32(eax, 0x10);
loc_1be25a: // 0160:1be25a
    if (!(eax & 0x80808080))
        goto loc_1be296;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be296;
    if (dl & 0x80)
        goto loc_1be278;
    al = dl;
loc_1be278: // 0160:1be278
    if (dh & 0x80)
        goto loc_1be27f;
    ah = dh;
loc_1be27f: // 0160:1be27f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be28c;
    al = dl;
loc_1be28c: // 0160:1be28c
    if (dh & 0x80)
        goto loc_1be293;
    ah = dh;
loc_1be293: // 0160:1be293
    eax = rol32(eax, 0x10);
loc_1be296: // 0160:1be296
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be31a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be2de;
    if (dl & 0x80)
        goto loc_1be2c0;
    al = dl;
loc_1be2c0: // 0160:1be2c0
    if (dh & 0x80)
        goto loc_1be2c7;
    ah = dh;
loc_1be2c7: // 0160:1be2c7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be2d4;
    al = dl;
loc_1be2d4: // 0160:1be2d4
    if (dh & 0x80)
        goto loc_1be2db;
    ah = dh;
loc_1be2db: // 0160:1be2db
    eax = rol32(eax, 0x10);
loc_1be2de: // 0160:1be2de
    if (!(eax & 0x80808080))
        goto loc_1be31a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be31a;
    if (dl & 0x80)
        goto loc_1be2fc;
    al = dl;
loc_1be2fc: // 0160:1be2fc
    if (dh & 0x80)
        goto loc_1be303;
    ah = dh;
loc_1be303: // 0160:1be303
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be310;
    al = dl;
loc_1be310: // 0160:1be310
    if (dh & 0x80)
        goto loc_1be317;
    ah = dh;
loc_1be317: // 0160:1be317
    eax = rol32(eax, 0x10);
loc_1be31a: // 0160:1be31a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be39e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be362;
    if (dl & 0x80)
        goto loc_1be344;
    al = dl;
loc_1be344: // 0160:1be344
    if (dh & 0x80)
        goto loc_1be34b;
    ah = dh;
loc_1be34b: // 0160:1be34b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be358;
    al = dl;
loc_1be358: // 0160:1be358
    if (dh & 0x80)
        goto loc_1be35f;
    ah = dh;
loc_1be35f: // 0160:1be35f
    eax = rol32(eax, 0x10);
loc_1be362: // 0160:1be362
    if (!(eax & 0x80808080))
        goto loc_1be39e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be39e;
    if (dl & 0x80)
        goto loc_1be380;
    al = dl;
loc_1be380: // 0160:1be380
    if (dh & 0x80)
        goto loc_1be387;
    ah = dh;
loc_1be387: // 0160:1be387
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be394;
    al = dl;
loc_1be394: // 0160:1be394
    if (dh & 0x80)
        goto loc_1be39b;
    ah = dh;
loc_1be39b: // 0160:1be39b
    eax = rol32(eax, 0x10);
loc_1be39e: // 0160:1be39e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be422;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be3e6;
    if (dl & 0x80)
        goto loc_1be3c8;
    al = dl;
loc_1be3c8: // 0160:1be3c8
    if (dh & 0x80)
        goto loc_1be3cf;
    ah = dh;
loc_1be3cf: // 0160:1be3cf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be3dc;
    al = dl;
loc_1be3dc: // 0160:1be3dc
    if (dh & 0x80)
        goto loc_1be3e3;
    ah = dh;
loc_1be3e3: // 0160:1be3e3
    eax = rol32(eax, 0x10);
loc_1be3e6: // 0160:1be3e6
    if (!(eax & 0x80808080))
        goto loc_1be422;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be422;
    if (dl & 0x80)
        goto loc_1be404;
    al = dl;
loc_1be404: // 0160:1be404
    if (dh & 0x80)
        goto loc_1be40b;
    ah = dh;
loc_1be40b: // 0160:1be40b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be418;
    al = dl;
loc_1be418: // 0160:1be418
    if (dh & 0x80)
        goto loc_1be41f;
    ah = dh;
loc_1be41f: // 0160:1be41f
    eax = rol32(eax, 0x10);
loc_1be422: // 0160:1be422
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be4a6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be46a;
    if (dl & 0x80)
        goto loc_1be44c;
    al = dl;
loc_1be44c: // 0160:1be44c
    if (dh & 0x80)
        goto loc_1be453;
    ah = dh;
loc_1be453: // 0160:1be453
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be460;
    al = dl;
loc_1be460: // 0160:1be460
    if (dh & 0x80)
        goto loc_1be467;
    ah = dh;
loc_1be467: // 0160:1be467
    eax = rol32(eax, 0x10);
loc_1be46a: // 0160:1be46a
    if (!(eax & 0x80808080))
        goto loc_1be4a6;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be4a6;
    if (dl & 0x80)
        goto loc_1be488;
    al = dl;
loc_1be488: // 0160:1be488
    if (dh & 0x80)
        goto loc_1be48f;
    ah = dh;
loc_1be48f: // 0160:1be48f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be49c;
    al = dl;
loc_1be49c: // 0160:1be49c
    if (dh & 0x80)
        goto loc_1be4a3;
    ah = dh;
loc_1be4a3: // 0160:1be4a3
    eax = rol32(eax, 0x10);
loc_1be4a6: // 0160:1be4a6
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be52a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be4ee;
    if (dl & 0x80)
        goto loc_1be4d0;
    al = dl;
loc_1be4d0: // 0160:1be4d0
    if (dh & 0x80)
        goto loc_1be4d7;
    ah = dh;
loc_1be4d7: // 0160:1be4d7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be4e4;
    al = dl;
loc_1be4e4: // 0160:1be4e4
    if (dh & 0x80)
        goto loc_1be4eb;
    ah = dh;
loc_1be4eb: // 0160:1be4eb
    eax = rol32(eax, 0x10);
loc_1be4ee: // 0160:1be4ee
    if (!(eax & 0x80808080))
        goto loc_1be52a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be52a;
    if (dl & 0x80)
        goto loc_1be50c;
    al = dl;
loc_1be50c: // 0160:1be50c
    if (dh & 0x80)
        goto loc_1be513;
    ah = dh;
loc_1be513: // 0160:1be513
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be520;
    al = dl;
loc_1be520: // 0160:1be520
    if (dh & 0x80)
        goto loc_1be527;
    ah = dh;
loc_1be527: // 0160:1be527
    eax = rol32(eax, 0x10);
loc_1be52a: // 0160:1be52a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be5ae;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be572;
    if (dl & 0x80)
        goto loc_1be554;
    al = dl;
loc_1be554: // 0160:1be554
    if (dh & 0x80)
        goto loc_1be55b;
    ah = dh;
loc_1be55b: // 0160:1be55b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be568;
    al = dl;
loc_1be568: // 0160:1be568
    if (dh & 0x80)
        goto loc_1be56f;
    ah = dh;
loc_1be56f: // 0160:1be56f
    eax = rol32(eax, 0x10);
loc_1be572: // 0160:1be572
    if (!(eax & 0x80808080))
        goto loc_1be5ae;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be5ae;
    if (dl & 0x80)
        goto loc_1be590;
    al = dl;
loc_1be590: // 0160:1be590
    if (dh & 0x80)
        goto loc_1be597;
    ah = dh;
loc_1be597: // 0160:1be597
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be5a4;
    al = dl;
loc_1be5a4: // 0160:1be5a4
    if (dh & 0x80)
        goto loc_1be5ab;
    ah = dh;
loc_1be5ab: // 0160:1be5ab
    eax = rol32(eax, 0x10);
loc_1be5ae: // 0160:1be5ae
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be632;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be5f6;
    if (dl & 0x80)
        goto loc_1be5d8;
    al = dl;
loc_1be5d8: // 0160:1be5d8
    if (dh & 0x80)
        goto loc_1be5df;
    ah = dh;
loc_1be5df: // 0160:1be5df
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be5ec;
    al = dl;
loc_1be5ec: // 0160:1be5ec
    if (dh & 0x80)
        goto loc_1be5f3;
    ah = dh;
loc_1be5f3: // 0160:1be5f3
    eax = rol32(eax, 0x10);
loc_1be5f6: // 0160:1be5f6
    if (!(eax & 0x80808080))
        goto loc_1be632;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be632;
    if (dl & 0x80)
        goto loc_1be614;
    al = dl;
loc_1be614: // 0160:1be614
    if (dh & 0x80)
        goto loc_1be61b;
    ah = dh;
loc_1be61b: // 0160:1be61b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be628;
    al = dl;
loc_1be628: // 0160:1be628
    if (dh & 0x80)
        goto loc_1be62f;
    ah = dh;
loc_1be62f: // 0160:1be62f
    eax = rol32(eax, 0x10);
loc_1be632: // 0160:1be632
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be6b6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be67a;
    if (dl & 0x80)
        goto loc_1be65c;
    al = dl;
loc_1be65c: // 0160:1be65c
    if (dh & 0x80)
        goto loc_1be663;
    ah = dh;
loc_1be663: // 0160:1be663
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be670;
    al = dl;
loc_1be670: // 0160:1be670
    if (dh & 0x80)
        goto loc_1be677;
    ah = dh;
loc_1be677: // 0160:1be677
    eax = rol32(eax, 0x10);
loc_1be67a: // 0160:1be67a
    if (!(eax & 0x80808080))
        goto loc_1be6b6;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be6b6;
    if (dl & 0x80)
        goto loc_1be698;
    al = dl;
loc_1be698: // 0160:1be698
    if (dh & 0x80)
        goto loc_1be69f;
    ah = dh;
loc_1be69f: // 0160:1be69f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be6ac;
    al = dl;
loc_1be6ac: // 0160:1be6ac
    if (dh & 0x80)
        goto loc_1be6b3;
    ah = dh;
loc_1be6b3: // 0160:1be6b3
    eax = rol32(eax, 0x10);
loc_1be6b6: // 0160:1be6b6
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be73a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be6fe;
    if (dl & 0x80)
        goto loc_1be6e0;
    al = dl;
loc_1be6e0: // 0160:1be6e0
    if (dh & 0x80)
        goto loc_1be6e7;
    ah = dh;
loc_1be6e7: // 0160:1be6e7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be6f4;
    al = dl;
loc_1be6f4: // 0160:1be6f4
    if (dh & 0x80)
        goto loc_1be6fb;
    ah = dh;
loc_1be6fb: // 0160:1be6fb
    eax = rol32(eax, 0x10);
loc_1be6fe: // 0160:1be6fe
    if (!(eax & 0x80808080))
        goto loc_1be73a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be73a;
    if (dl & 0x80)
        goto loc_1be71c;
    al = dl;
loc_1be71c: // 0160:1be71c
    if (dh & 0x80)
        goto loc_1be723;
    ah = dh;
loc_1be723: // 0160:1be723
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be730;
    al = dl;
loc_1be730: // 0160:1be730
    if (dh & 0x80)
        goto loc_1be737;
    ah = dh;
loc_1be737: // 0160:1be737
    eax = rol32(eax, 0x10);
loc_1be73a: // 0160:1be73a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be7be;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be782;
    if (dl & 0x80)
        goto loc_1be764;
    al = dl;
loc_1be764: // 0160:1be764
    if (dh & 0x80)
        goto loc_1be76b;
    ah = dh;
loc_1be76b: // 0160:1be76b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be778;
    al = dl;
loc_1be778: // 0160:1be778
    if (dh & 0x80)
        goto loc_1be77f;
    ah = dh;
loc_1be77f: // 0160:1be77f
    eax = rol32(eax, 0x10);
loc_1be782: // 0160:1be782
    if (!(eax & 0x80808080))
        goto loc_1be7be;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be7be;
    if (dl & 0x80)
        goto loc_1be7a0;
    al = dl;
loc_1be7a0: // 0160:1be7a0
    if (dh & 0x80)
        goto loc_1be7a7;
    ah = dh;
loc_1be7a7: // 0160:1be7a7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be7b4;
    al = dl;
loc_1be7b4: // 0160:1be7b4
    if (dh & 0x80)
        goto loc_1be7bb;
    ah = dh;
loc_1be7bb: // 0160:1be7bb
    eax = rol32(eax, 0x10);
loc_1be7be: // 0160:1be7be
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be842;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be806;
    if (dl & 0x80)
        goto loc_1be7e8;
    al = dl;
loc_1be7e8: // 0160:1be7e8
    if (dh & 0x80)
        goto loc_1be7ef;
    ah = dh;
loc_1be7ef: // 0160:1be7ef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be7fc;
    al = dl;
loc_1be7fc: // 0160:1be7fc
    if (dh & 0x80)
        goto loc_1be803;
    ah = dh;
loc_1be803: // 0160:1be803
    eax = rol32(eax, 0x10);
loc_1be806: // 0160:1be806
    if (!(eax & 0x80808080))
        goto loc_1be842;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be842;
    if (dl & 0x80)
        goto loc_1be824;
    al = dl;
loc_1be824: // 0160:1be824
    if (dh & 0x80)
        goto loc_1be82b;
    ah = dh;
loc_1be82b: // 0160:1be82b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be838;
    al = dl;
loc_1be838: // 0160:1be838
    if (dh & 0x80)
        goto loc_1be83f;
    ah = dh;
loc_1be83f: // 0160:1be83f
    eax = rol32(eax, 0x10);
loc_1be842: // 0160:1be842
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be8c6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be88a;
    if (dl & 0x80)
        goto loc_1be86c;
    al = dl;
loc_1be86c: // 0160:1be86c
    if (dh & 0x80)
        goto loc_1be873;
    ah = dh;
loc_1be873: // 0160:1be873
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be880;
    al = dl;
loc_1be880: // 0160:1be880
    if (dh & 0x80)
        goto loc_1be887;
    ah = dh;
loc_1be887: // 0160:1be887
    eax = rol32(eax, 0x10);
loc_1be88a: // 0160:1be88a
    if (!(eax & 0x80808080))
        goto loc_1be8c6;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be8c6;
    if (dl & 0x80)
        goto loc_1be8a8;
    al = dl;
loc_1be8a8: // 0160:1be8a8
    if (dh & 0x80)
        goto loc_1be8af;
    ah = dh;
loc_1be8af: // 0160:1be8af
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be8bc;
    al = dl;
loc_1be8bc: // 0160:1be8bc
    if (dh & 0x80)
        goto loc_1be8c3;
    ah = dh;
loc_1be8c3: // 0160:1be8c3
    eax = rol32(eax, 0x10);
loc_1be8c6: // 0160:1be8c6
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be94a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be90e;
    if (dl & 0x80)
        goto loc_1be8f0;
    al = dl;
loc_1be8f0: // 0160:1be8f0
    if (dh & 0x80)
        goto loc_1be8f7;
    ah = dh;
loc_1be8f7: // 0160:1be8f7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be904;
    al = dl;
loc_1be904: // 0160:1be904
    if (dh & 0x80)
        goto loc_1be90b;
    ah = dh;
loc_1be90b: // 0160:1be90b
    eax = rol32(eax, 0x10);
loc_1be90e: // 0160:1be90e
    if (!(eax & 0x80808080))
        goto loc_1be94a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be94a;
    if (dl & 0x80)
        goto loc_1be92c;
    al = dl;
loc_1be92c: // 0160:1be92c
    if (dh & 0x80)
        goto loc_1be933;
    ah = dh;
loc_1be933: // 0160:1be933
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be940;
    al = dl;
loc_1be940: // 0160:1be940
    if (dh & 0x80)
        goto loc_1be947;
    ah = dh;
loc_1be947: // 0160:1be947
    eax = rol32(eax, 0x10);
loc_1be94a: // 0160:1be94a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1be9ce;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be992;
    if (dl & 0x80)
        goto loc_1be974;
    al = dl;
loc_1be974: // 0160:1be974
    if (dh & 0x80)
        goto loc_1be97b;
    ah = dh;
loc_1be97b: // 0160:1be97b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be988;
    al = dl;
loc_1be988: // 0160:1be988
    if (dh & 0x80)
        goto loc_1be98f;
    ah = dh;
loc_1be98f: // 0160:1be98f
    eax = rol32(eax, 0x10);
loc_1be992: // 0160:1be992
    if (!(eax & 0x80808080))
        goto loc_1be9ce;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1be9ce;
    if (dl & 0x80)
        goto loc_1be9b0;
    al = dl;
loc_1be9b0: // 0160:1be9b0
    if (dh & 0x80)
        goto loc_1be9b7;
    ah = dh;
loc_1be9b7: // 0160:1be9b7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1be9c4;
    al = dl;
loc_1be9c4: // 0160:1be9c4
    if (dh & 0x80)
        goto loc_1be9cb;
    ah = dh;
loc_1be9cb: // 0160:1be9cb
    eax = rol32(eax, 0x10);
loc_1be9ce: // 0160:1be9ce
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bea52;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bea16;
    if (dl & 0x80)
        goto loc_1be9f8;
    al = dl;
loc_1be9f8: // 0160:1be9f8
    if (dh & 0x80)
        goto loc_1be9ff;
    ah = dh;
loc_1be9ff: // 0160:1be9ff
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bea0c;
    al = dl;
loc_1bea0c: // 0160:1bea0c
    if (dh & 0x80)
        goto loc_1bea13;
    ah = dh;
loc_1bea13: // 0160:1bea13
    eax = rol32(eax, 0x10);
loc_1bea16: // 0160:1bea16
    if (!(eax & 0x80808080))
        goto loc_1bea52;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bea52;
    if (dl & 0x80)
        goto loc_1bea34;
    al = dl;
loc_1bea34: // 0160:1bea34
    if (dh & 0x80)
        goto loc_1bea3b;
    ah = dh;
loc_1bea3b: // 0160:1bea3b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bea48;
    al = dl;
loc_1bea48: // 0160:1bea48
    if (dh & 0x80)
        goto loc_1bea4f;
    ah = dh;
loc_1bea4f: // 0160:1bea4f
    eax = rol32(eax, 0x10);
loc_1bea52: // 0160:1bea52
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bead6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bea9a;
    if (dl & 0x80)
        goto loc_1bea7c;
    al = dl;
loc_1bea7c: // 0160:1bea7c
    if (dh & 0x80)
        goto loc_1bea83;
    ah = dh;
loc_1bea83: // 0160:1bea83
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bea90;
    al = dl;
loc_1bea90: // 0160:1bea90
    if (dh & 0x80)
        goto loc_1bea97;
    ah = dh;
loc_1bea97: // 0160:1bea97
    eax = rol32(eax, 0x10);
loc_1bea9a: // 0160:1bea9a
    if (!(eax & 0x80808080))
        goto loc_1bead6;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bead6;
    if (dl & 0x80)
        goto loc_1beab8;
    al = dl;
loc_1beab8: // 0160:1beab8
    if (dh & 0x80)
        goto loc_1beabf;
    ah = dh;
loc_1beabf: // 0160:1beabf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beacc;
    al = dl;
loc_1beacc: // 0160:1beacc
    if (dh & 0x80)
        goto loc_1bead3;
    ah = dh;
loc_1bead3: // 0160:1bead3
    eax = rol32(eax, 0x10);
loc_1bead6: // 0160:1bead6
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1beb5a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1beb1e;
    if (dl & 0x80)
        goto loc_1beb00;
    al = dl;
loc_1beb00: // 0160:1beb00
    if (dh & 0x80)
        goto loc_1beb07;
    ah = dh;
loc_1beb07: // 0160:1beb07
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beb14;
    al = dl;
loc_1beb14: // 0160:1beb14
    if (dh & 0x80)
        goto loc_1beb1b;
    ah = dh;
loc_1beb1b: // 0160:1beb1b
    eax = rol32(eax, 0x10);
loc_1beb1e: // 0160:1beb1e
    if (!(eax & 0x80808080))
        goto loc_1beb5a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1beb5a;
    if (dl & 0x80)
        goto loc_1beb3c;
    al = dl;
loc_1beb3c: // 0160:1beb3c
    if (dh & 0x80)
        goto loc_1beb43;
    ah = dh;
loc_1beb43: // 0160:1beb43
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beb50;
    al = dl;
loc_1beb50: // 0160:1beb50
    if (dh & 0x80)
        goto loc_1beb57;
    ah = dh;
loc_1beb57: // 0160:1beb57
    eax = rol32(eax, 0x10);
loc_1beb5a: // 0160:1beb5a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bebde;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1beba2;
    if (dl & 0x80)
        goto loc_1beb84;
    al = dl;
loc_1beb84: // 0160:1beb84
    if (dh & 0x80)
        goto loc_1beb8b;
    ah = dh;
loc_1beb8b: // 0160:1beb8b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beb98;
    al = dl;
loc_1beb98: // 0160:1beb98
    if (dh & 0x80)
        goto loc_1beb9f;
    ah = dh;
loc_1beb9f: // 0160:1beb9f
    eax = rol32(eax, 0x10);
loc_1beba2: // 0160:1beba2
    if (!(eax & 0x80808080))
        goto loc_1bebde;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bebde;
    if (dl & 0x80)
        goto loc_1bebc0;
    al = dl;
loc_1bebc0: // 0160:1bebc0
    if (dh & 0x80)
        goto loc_1bebc7;
    ah = dh;
loc_1bebc7: // 0160:1bebc7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bebd4;
    al = dl;
loc_1bebd4: // 0160:1bebd4
    if (dh & 0x80)
        goto loc_1bebdb;
    ah = dh;
loc_1bebdb: // 0160:1bebdb
    eax = rol32(eax, 0x10);
loc_1bebde: // 0160:1bebde
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bec62;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bec26;
    if (dl & 0x80)
        goto loc_1bec08;
    al = dl;
loc_1bec08: // 0160:1bec08
    if (dh & 0x80)
        goto loc_1bec0f;
    ah = dh;
loc_1bec0f: // 0160:1bec0f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bec1c;
    al = dl;
loc_1bec1c: // 0160:1bec1c
    if (dh & 0x80)
        goto loc_1bec23;
    ah = dh;
loc_1bec23: // 0160:1bec23
    eax = rol32(eax, 0x10);
loc_1bec26: // 0160:1bec26
    if (!(eax & 0x80808080))
        goto loc_1bec62;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bec62;
    if (dl & 0x80)
        goto loc_1bec44;
    al = dl;
loc_1bec44: // 0160:1bec44
    if (dh & 0x80)
        goto loc_1bec4b;
    ah = dh;
loc_1bec4b: // 0160:1bec4b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bec58;
    al = dl;
loc_1bec58: // 0160:1bec58
    if (dh & 0x80)
        goto loc_1bec5f;
    ah = dh;
loc_1bec5f: // 0160:1bec5f
    eax = rol32(eax, 0x10);
loc_1bec62: // 0160:1bec62
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bece6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1becaa;
    if (dl & 0x80)
        goto loc_1bec8c;
    al = dl;
loc_1bec8c: // 0160:1bec8c
    if (dh & 0x80)
        goto loc_1bec93;
    ah = dh;
loc_1bec93: // 0160:1bec93
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beca0;
    al = dl;
loc_1beca0: // 0160:1beca0
    if (dh & 0x80)
        goto loc_1beca7;
    ah = dh;
loc_1beca7: // 0160:1beca7
    eax = rol32(eax, 0x10);
loc_1becaa: // 0160:1becaa
    if (!(eax & 0x80808080))
        goto loc_1bece6;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bece6;
    if (dl & 0x80)
        goto loc_1becc8;
    al = dl;
loc_1becc8: // 0160:1becc8
    if (dh & 0x80)
        goto loc_1beccf;
    ah = dh;
loc_1beccf: // 0160:1beccf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1becdc;
    al = dl;
loc_1becdc: // 0160:1becdc
    if (dh & 0x80)
        goto loc_1bece3;
    ah = dh;
loc_1bece3: // 0160:1bece3
    eax = rol32(eax, 0x10);
loc_1bece6: // 0160:1bece6
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bed6a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bed2e;
    if (dl & 0x80)
        goto loc_1bed10;
    al = dl;
loc_1bed10: // 0160:1bed10
    if (dh & 0x80)
        goto loc_1bed17;
    ah = dh;
loc_1bed17: // 0160:1bed17
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bed24;
    al = dl;
loc_1bed24: // 0160:1bed24
    if (dh & 0x80)
        goto loc_1bed2b;
    ah = dh;
loc_1bed2b: // 0160:1bed2b
    eax = rol32(eax, 0x10);
loc_1bed2e: // 0160:1bed2e
    if (!(eax & 0x80808080))
        goto loc_1bed6a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bed6a;
    if (dl & 0x80)
        goto loc_1bed4c;
    al = dl;
loc_1bed4c: // 0160:1bed4c
    if (dh & 0x80)
        goto loc_1bed53;
    ah = dh;
loc_1bed53: // 0160:1bed53
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bed60;
    al = dl;
loc_1bed60: // 0160:1bed60
    if (dh & 0x80)
        goto loc_1bed67;
    ah = dh;
loc_1bed67: // 0160:1bed67
    eax = rol32(eax, 0x10);
loc_1bed6a: // 0160:1bed6a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bedee;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bedb2;
    if (dl & 0x80)
        goto loc_1bed94;
    al = dl;
loc_1bed94: // 0160:1bed94
    if (dh & 0x80)
        goto loc_1bed9b;
    ah = dh;
loc_1bed9b: // 0160:1bed9b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beda8;
    al = dl;
loc_1beda8: // 0160:1beda8
    if (dh & 0x80)
        goto loc_1bedaf;
    ah = dh;
loc_1bedaf: // 0160:1bedaf
    eax = rol32(eax, 0x10);
loc_1bedb2: // 0160:1bedb2
    if (!(eax & 0x80808080))
        goto loc_1bedee;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bedee;
    if (dl & 0x80)
        goto loc_1bedd0;
    al = dl;
loc_1bedd0: // 0160:1bedd0
    if (dh & 0x80)
        goto loc_1bedd7;
    ah = dh;
loc_1bedd7: // 0160:1bedd7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bede4;
    al = dl;
loc_1bede4: // 0160:1bede4
    if (dh & 0x80)
        goto loc_1bedeb;
    ah = dh;
loc_1bedeb: // 0160:1bedeb
    eax = rol32(eax, 0x10);
loc_1bedee: // 0160:1bedee
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bee72;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bee36;
    if (dl & 0x80)
        goto loc_1bee18;
    al = dl;
loc_1bee18: // 0160:1bee18
    if (dh & 0x80)
        goto loc_1bee1f;
    ah = dh;
loc_1bee1f: // 0160:1bee1f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bee2c;
    al = dl;
loc_1bee2c: // 0160:1bee2c
    if (dh & 0x80)
        goto loc_1bee33;
    ah = dh;
loc_1bee33: // 0160:1bee33
    eax = rol32(eax, 0x10);
loc_1bee36: // 0160:1bee36
    if (!(eax & 0x80808080))
        goto loc_1bee72;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bee72;
    if (dl & 0x80)
        goto loc_1bee54;
    al = dl;
loc_1bee54: // 0160:1bee54
    if (dh & 0x80)
        goto loc_1bee5b;
    ah = dh;
loc_1bee5b: // 0160:1bee5b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bee68;
    al = dl;
loc_1bee68: // 0160:1bee68
    if (dh & 0x80)
        goto loc_1bee6f;
    ah = dh;
loc_1bee6f: // 0160:1bee6f
    eax = rol32(eax, 0x10);
loc_1bee72: // 0160:1bee72
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1beef6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1beeba;
    if (dl & 0x80)
        goto loc_1bee9c;
    al = dl;
loc_1bee9c: // 0160:1bee9c
    if (dh & 0x80)
        goto loc_1beea3;
    ah = dh;
loc_1beea3: // 0160:1beea3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beeb0;
    al = dl;
loc_1beeb0: // 0160:1beeb0
    if (dh & 0x80)
        goto loc_1beeb7;
    ah = dh;
loc_1beeb7: // 0160:1beeb7
    eax = rol32(eax, 0x10);
loc_1beeba: // 0160:1beeba
    if (!(eax & 0x80808080))
        goto loc_1beef6;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1beef6;
    if (dl & 0x80)
        goto loc_1beed8;
    al = dl;
loc_1beed8: // 0160:1beed8
    if (dh & 0x80)
        goto loc_1beedf;
    ah = dh;
loc_1beedf: // 0160:1beedf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beeec;
    al = dl;
loc_1beeec: // 0160:1beeec
    if (dh & 0x80)
        goto loc_1beef3;
    ah = dh;
loc_1beef3: // 0160:1beef3
    eax = rol32(eax, 0x10);
loc_1beef6: // 0160:1beef6
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bef7a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bef3e;
    if (dl & 0x80)
        goto loc_1bef20;
    al = dl;
loc_1bef20: // 0160:1bef20
    if (dh & 0x80)
        goto loc_1bef27;
    ah = dh;
loc_1bef27: // 0160:1bef27
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bef34;
    al = dl;
loc_1bef34: // 0160:1bef34
    if (dh & 0x80)
        goto loc_1bef3b;
    ah = dh;
loc_1bef3b: // 0160:1bef3b
    eax = rol32(eax, 0x10);
loc_1bef3e: // 0160:1bef3e
    if (!(eax & 0x80808080))
        goto loc_1bef7a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bef7a;
    if (dl & 0x80)
        goto loc_1bef5c;
    al = dl;
loc_1bef5c: // 0160:1bef5c
    if (dh & 0x80)
        goto loc_1bef63;
    ah = dh;
loc_1bef63: // 0160:1bef63
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bef70;
    al = dl;
loc_1bef70: // 0160:1bef70
    if (dh & 0x80)
        goto loc_1bef77;
    ah = dh;
loc_1bef77: // 0160:1bef77
    eax = rol32(eax, 0x10);
loc_1bef7a: // 0160:1bef7a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1beffe;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1befc2;
    if (dl & 0x80)
        goto loc_1befa4;
    al = dl;
loc_1befa4: // 0160:1befa4
    if (dh & 0x80)
        goto loc_1befab;
    ah = dh;
loc_1befab: // 0160:1befab
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1befb8;
    al = dl;
loc_1befb8: // 0160:1befb8
    if (dh & 0x80)
        goto loc_1befbf;
    ah = dh;
loc_1befbf: // 0160:1befbf
    eax = rol32(eax, 0x10);
loc_1befc2: // 0160:1befc2
    if (!(eax & 0x80808080))
        goto loc_1beffe;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1beffe;
    if (dl & 0x80)
        goto loc_1befe0;
    al = dl;
loc_1befe0: // 0160:1befe0
    if (dh & 0x80)
        goto loc_1befe7;
    ah = dh;
loc_1befe7: // 0160:1befe7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1beff4;
    al = dl;
loc_1beff4: // 0160:1beff4
    if (dh & 0x80)
        goto loc_1beffb;
    ah = dh;
loc_1beffb: // 0160:1beffb
    eax = rol32(eax, 0x10);
loc_1beffe: // 0160:1beffe
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf082;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf046;
    if (dl & 0x80)
        goto loc_1bf028;
    al = dl;
loc_1bf028: // 0160:1bf028
    if (dh & 0x80)
        goto loc_1bf02f;
    ah = dh;
loc_1bf02f: // 0160:1bf02f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf03c;
    al = dl;
loc_1bf03c: // 0160:1bf03c
    if (dh & 0x80)
        goto loc_1bf043;
    ah = dh;
loc_1bf043: // 0160:1bf043
    eax = rol32(eax, 0x10);
loc_1bf046: // 0160:1bf046
    if (!(eax & 0x80808080))
        goto loc_1bf082;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf082;
    if (dl & 0x80)
        goto loc_1bf064;
    al = dl;
loc_1bf064: // 0160:1bf064
    if (dh & 0x80)
        goto loc_1bf06b;
    ah = dh;
loc_1bf06b: // 0160:1bf06b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf078;
    al = dl;
loc_1bf078: // 0160:1bf078
    if (dh & 0x80)
        goto loc_1bf07f;
    ah = dh;
loc_1bf07f: // 0160:1bf07f
    eax = rol32(eax, 0x10);
loc_1bf082: // 0160:1bf082
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf106;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf0ca;
    if (dl & 0x80)
        goto loc_1bf0ac;
    al = dl;
loc_1bf0ac: // 0160:1bf0ac
    if (dh & 0x80)
        goto loc_1bf0b3;
    ah = dh;
loc_1bf0b3: // 0160:1bf0b3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf0c0;
    al = dl;
loc_1bf0c0: // 0160:1bf0c0
    if (dh & 0x80)
        goto loc_1bf0c7;
    ah = dh;
loc_1bf0c7: // 0160:1bf0c7
    eax = rol32(eax, 0x10);
loc_1bf0ca: // 0160:1bf0ca
    if (!(eax & 0x80808080))
        goto loc_1bf106;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf106;
    if (dl & 0x80)
        goto loc_1bf0e8;
    al = dl;
loc_1bf0e8: // 0160:1bf0e8
    if (dh & 0x80)
        goto loc_1bf0ef;
    ah = dh;
loc_1bf0ef: // 0160:1bf0ef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf0fc;
    al = dl;
loc_1bf0fc: // 0160:1bf0fc
    if (dh & 0x80)
        goto loc_1bf103;
    ah = dh;
loc_1bf103: // 0160:1bf103
    eax = rol32(eax, 0x10);
loc_1bf106: // 0160:1bf106
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf18a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf14e;
    if (dl & 0x80)
        goto loc_1bf130;
    al = dl;
loc_1bf130: // 0160:1bf130
    if (dh & 0x80)
        goto loc_1bf137;
    ah = dh;
loc_1bf137: // 0160:1bf137
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf144;
    al = dl;
loc_1bf144: // 0160:1bf144
    if (dh & 0x80)
        goto loc_1bf14b;
    ah = dh;
loc_1bf14b: // 0160:1bf14b
    eax = rol32(eax, 0x10);
loc_1bf14e: // 0160:1bf14e
    if (!(eax & 0x80808080))
        goto loc_1bf18a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf18a;
    if (dl & 0x80)
        goto loc_1bf16c;
    al = dl;
loc_1bf16c: // 0160:1bf16c
    if (dh & 0x80)
        goto loc_1bf173;
    ah = dh;
loc_1bf173: // 0160:1bf173
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf180;
    al = dl;
loc_1bf180: // 0160:1bf180
    if (dh & 0x80)
        goto loc_1bf187;
    ah = dh;
loc_1bf187: // 0160:1bf187
    eax = rol32(eax, 0x10);
loc_1bf18a: // 0160:1bf18a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf20e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf1d2;
    if (dl & 0x80)
        goto loc_1bf1b4;
    al = dl;
loc_1bf1b4: // 0160:1bf1b4
    if (dh & 0x80)
        goto loc_1bf1bb;
    ah = dh;
loc_1bf1bb: // 0160:1bf1bb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf1c8;
    al = dl;
loc_1bf1c8: // 0160:1bf1c8
    if (dh & 0x80)
        goto loc_1bf1cf;
    ah = dh;
loc_1bf1cf: // 0160:1bf1cf
    eax = rol32(eax, 0x10);
loc_1bf1d2: // 0160:1bf1d2
    if (!(eax & 0x80808080))
        goto loc_1bf20e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf20e;
    if (dl & 0x80)
        goto loc_1bf1f0;
    al = dl;
loc_1bf1f0: // 0160:1bf1f0
    if (dh & 0x80)
        goto loc_1bf1f7;
    ah = dh;
loc_1bf1f7: // 0160:1bf1f7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf204;
    al = dl;
loc_1bf204: // 0160:1bf204
    if (dh & 0x80)
        goto loc_1bf20b;
    ah = dh;
loc_1bf20b: // 0160:1bf20b
    eax = rol32(eax, 0x10);
loc_1bf20e: // 0160:1bf20e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf292;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf256;
    if (dl & 0x80)
        goto loc_1bf238;
    al = dl;
loc_1bf238: // 0160:1bf238
    if (dh & 0x80)
        goto loc_1bf23f;
    ah = dh;
loc_1bf23f: // 0160:1bf23f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf24c;
    al = dl;
loc_1bf24c: // 0160:1bf24c
    if (dh & 0x80)
        goto loc_1bf253;
    ah = dh;
loc_1bf253: // 0160:1bf253
    eax = rol32(eax, 0x10);
loc_1bf256: // 0160:1bf256
    if (!(eax & 0x80808080))
        goto loc_1bf292;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf292;
    if (dl & 0x80)
        goto loc_1bf274;
    al = dl;
loc_1bf274: // 0160:1bf274
    if (dh & 0x80)
        goto loc_1bf27b;
    ah = dh;
loc_1bf27b: // 0160:1bf27b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf288;
    al = dl;
loc_1bf288: // 0160:1bf288
    if (dh & 0x80)
        goto loc_1bf28f;
    ah = dh;
loc_1bf28f: // 0160:1bf28f
    eax = rol32(eax, 0x10);
loc_1bf292: // 0160:1bf292
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf316;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf2da;
    if (dl & 0x80)
        goto loc_1bf2bc;
    al = dl;
loc_1bf2bc: // 0160:1bf2bc
    if (dh & 0x80)
        goto loc_1bf2c3;
    ah = dh;
loc_1bf2c3: // 0160:1bf2c3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf2d0;
    al = dl;
loc_1bf2d0: // 0160:1bf2d0
    if (dh & 0x80)
        goto loc_1bf2d7;
    ah = dh;
loc_1bf2d7: // 0160:1bf2d7
    eax = rol32(eax, 0x10);
loc_1bf2da: // 0160:1bf2da
    if (!(eax & 0x80808080))
        goto loc_1bf316;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf316;
    if (dl & 0x80)
        goto loc_1bf2f8;
    al = dl;
loc_1bf2f8: // 0160:1bf2f8
    if (dh & 0x80)
        goto loc_1bf2ff;
    ah = dh;
loc_1bf2ff: // 0160:1bf2ff
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf30c;
    al = dl;
loc_1bf30c: // 0160:1bf30c
    if (dh & 0x80)
        goto loc_1bf313;
    ah = dh;
loc_1bf313: // 0160:1bf313
    eax = rol32(eax, 0x10);
loc_1bf316: // 0160:1bf316
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf39a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf35e;
    if (dl & 0x80)
        goto loc_1bf340;
    al = dl;
loc_1bf340: // 0160:1bf340
    if (dh & 0x80)
        goto loc_1bf347;
    ah = dh;
loc_1bf347: // 0160:1bf347
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf354;
    al = dl;
loc_1bf354: // 0160:1bf354
    if (dh & 0x80)
        goto loc_1bf35b;
    ah = dh;
loc_1bf35b: // 0160:1bf35b
    eax = rol32(eax, 0x10);
loc_1bf35e: // 0160:1bf35e
    if (!(eax & 0x80808080))
        goto loc_1bf39a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf39a;
    if (dl & 0x80)
        goto loc_1bf37c;
    al = dl;
loc_1bf37c: // 0160:1bf37c
    if (dh & 0x80)
        goto loc_1bf383;
    ah = dh;
loc_1bf383: // 0160:1bf383
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf390;
    al = dl;
loc_1bf390: // 0160:1bf390
    if (dh & 0x80)
        goto loc_1bf397;
    ah = dh;
loc_1bf397: // 0160:1bf397
    eax = rol32(eax, 0x10);
loc_1bf39a: // 0160:1bf39a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf41e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf3e2;
    if (dl & 0x80)
        goto loc_1bf3c4;
    al = dl;
loc_1bf3c4: // 0160:1bf3c4
    if (dh & 0x80)
        goto loc_1bf3cb;
    ah = dh;
loc_1bf3cb: // 0160:1bf3cb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf3d8;
    al = dl;
loc_1bf3d8: // 0160:1bf3d8
    if (dh & 0x80)
        goto loc_1bf3df;
    ah = dh;
loc_1bf3df: // 0160:1bf3df
    eax = rol32(eax, 0x10);
loc_1bf3e2: // 0160:1bf3e2
    if (!(eax & 0x80808080))
        goto loc_1bf41e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf41e;
    if (dl & 0x80)
        goto loc_1bf400;
    al = dl;
loc_1bf400: // 0160:1bf400
    if (dh & 0x80)
        goto loc_1bf407;
    ah = dh;
loc_1bf407: // 0160:1bf407
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf414;
    al = dl;
loc_1bf414: // 0160:1bf414
    if (dh & 0x80)
        goto loc_1bf41b;
    ah = dh;
loc_1bf41b: // 0160:1bf41b
    eax = rol32(eax, 0x10);
loc_1bf41e: // 0160:1bf41e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf4a2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf466;
    if (dl & 0x80)
        goto loc_1bf448;
    al = dl;
loc_1bf448: // 0160:1bf448
    if (dh & 0x80)
        goto loc_1bf44f;
    ah = dh;
loc_1bf44f: // 0160:1bf44f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf45c;
    al = dl;
loc_1bf45c: // 0160:1bf45c
    if (dh & 0x80)
        goto loc_1bf463;
    ah = dh;
loc_1bf463: // 0160:1bf463
    eax = rol32(eax, 0x10);
loc_1bf466: // 0160:1bf466
    if (!(eax & 0x80808080))
        goto loc_1bf4a2;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf4a2;
    if (dl & 0x80)
        goto loc_1bf484;
    al = dl;
loc_1bf484: // 0160:1bf484
    if (dh & 0x80)
        goto loc_1bf48b;
    ah = dh;
loc_1bf48b: // 0160:1bf48b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf498;
    al = dl;
loc_1bf498: // 0160:1bf498
    if (dh & 0x80)
        goto loc_1bf49f;
    ah = dh;
loc_1bf49f: // 0160:1bf49f
    eax = rol32(eax, 0x10);
loc_1bf4a2: // 0160:1bf4a2
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf526;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf4ea;
    if (dl & 0x80)
        goto loc_1bf4cc;
    al = dl;
loc_1bf4cc: // 0160:1bf4cc
    if (dh & 0x80)
        goto loc_1bf4d3;
    ah = dh;
loc_1bf4d3: // 0160:1bf4d3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf4e0;
    al = dl;
loc_1bf4e0: // 0160:1bf4e0
    if (dh & 0x80)
        goto loc_1bf4e7;
    ah = dh;
loc_1bf4e7: // 0160:1bf4e7
    eax = rol32(eax, 0x10);
loc_1bf4ea: // 0160:1bf4ea
    if (!(eax & 0x80808080))
        goto loc_1bf526;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf526;
    if (dl & 0x80)
        goto loc_1bf508;
    al = dl;
loc_1bf508: // 0160:1bf508
    if (dh & 0x80)
        goto loc_1bf50f;
    ah = dh;
loc_1bf50f: // 0160:1bf50f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf51c;
    al = dl;
loc_1bf51c: // 0160:1bf51c
    if (dh & 0x80)
        goto loc_1bf523;
    ah = dh;
loc_1bf523: // 0160:1bf523
    eax = rol32(eax, 0x10);
loc_1bf526: // 0160:1bf526
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf5aa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf56e;
    if (dl & 0x80)
        goto loc_1bf550;
    al = dl;
loc_1bf550: // 0160:1bf550
    if (dh & 0x80)
        goto loc_1bf557;
    ah = dh;
loc_1bf557: // 0160:1bf557
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf564;
    al = dl;
loc_1bf564: // 0160:1bf564
    if (dh & 0x80)
        goto loc_1bf56b;
    ah = dh;
loc_1bf56b: // 0160:1bf56b
    eax = rol32(eax, 0x10);
loc_1bf56e: // 0160:1bf56e
    if (!(eax & 0x80808080))
        goto loc_1bf5aa;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf5aa;
    if (dl & 0x80)
        goto loc_1bf58c;
    al = dl;
loc_1bf58c: // 0160:1bf58c
    if (dh & 0x80)
        goto loc_1bf593;
    ah = dh;
loc_1bf593: // 0160:1bf593
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf5a0;
    al = dl;
loc_1bf5a0: // 0160:1bf5a0
    if (dh & 0x80)
        goto loc_1bf5a7;
    ah = dh;
loc_1bf5a7: // 0160:1bf5a7
    eax = rol32(eax, 0x10);
loc_1bf5aa: // 0160:1bf5aa
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf62e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf5f2;
    if (dl & 0x80)
        goto loc_1bf5d4;
    al = dl;
loc_1bf5d4: // 0160:1bf5d4
    if (dh & 0x80)
        goto loc_1bf5db;
    ah = dh;
loc_1bf5db: // 0160:1bf5db
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf5e8;
    al = dl;
loc_1bf5e8: // 0160:1bf5e8
    if (dh & 0x80)
        goto loc_1bf5ef;
    ah = dh;
loc_1bf5ef: // 0160:1bf5ef
    eax = rol32(eax, 0x10);
loc_1bf5f2: // 0160:1bf5f2
    if (!(eax & 0x80808080))
        goto loc_1bf62e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf62e;
    if (dl & 0x80)
        goto loc_1bf610;
    al = dl;
loc_1bf610: // 0160:1bf610
    if (dh & 0x80)
        goto loc_1bf617;
    ah = dh;
loc_1bf617: // 0160:1bf617
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf624;
    al = dl;
loc_1bf624: // 0160:1bf624
    if (dh & 0x80)
        goto loc_1bf62b;
    ah = dh;
loc_1bf62b: // 0160:1bf62b
    eax = rol32(eax, 0x10);
loc_1bf62e: // 0160:1bf62e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf6b2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf676;
    if (dl & 0x80)
        goto loc_1bf658;
    al = dl;
loc_1bf658: // 0160:1bf658
    if (dh & 0x80)
        goto loc_1bf65f;
    ah = dh;
loc_1bf65f: // 0160:1bf65f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf66c;
    al = dl;
loc_1bf66c: // 0160:1bf66c
    if (dh & 0x80)
        goto loc_1bf673;
    ah = dh;
loc_1bf673: // 0160:1bf673
    eax = rol32(eax, 0x10);
loc_1bf676: // 0160:1bf676
    if (!(eax & 0x80808080))
        goto loc_1bf6b2;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf6b2;
    if (dl & 0x80)
        goto loc_1bf694;
    al = dl;
loc_1bf694: // 0160:1bf694
    if (dh & 0x80)
        goto loc_1bf69b;
    ah = dh;
loc_1bf69b: // 0160:1bf69b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf6a8;
    al = dl;
loc_1bf6a8: // 0160:1bf6a8
    if (dh & 0x80)
        goto loc_1bf6af;
    ah = dh;
loc_1bf6af: // 0160:1bf6af
    eax = rol32(eax, 0x10);
loc_1bf6b2: // 0160:1bf6b2
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf736;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf6fa;
    if (dl & 0x80)
        goto loc_1bf6dc;
    al = dl;
loc_1bf6dc: // 0160:1bf6dc
    if (dh & 0x80)
        goto loc_1bf6e3;
    ah = dh;
loc_1bf6e3: // 0160:1bf6e3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf6f0;
    al = dl;
loc_1bf6f0: // 0160:1bf6f0
    if (dh & 0x80)
        goto loc_1bf6f7;
    ah = dh;
loc_1bf6f7: // 0160:1bf6f7
    eax = rol32(eax, 0x10);
loc_1bf6fa: // 0160:1bf6fa
    if (!(eax & 0x80808080))
        goto loc_1bf736;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf736;
    if (dl & 0x80)
        goto loc_1bf718;
    al = dl;
loc_1bf718: // 0160:1bf718
    if (dh & 0x80)
        goto loc_1bf71f;
    ah = dh;
loc_1bf71f: // 0160:1bf71f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf72c;
    al = dl;
loc_1bf72c: // 0160:1bf72c
    if (dh & 0x80)
        goto loc_1bf733;
    ah = dh;
loc_1bf733: // 0160:1bf733
    eax = rol32(eax, 0x10);
loc_1bf736: // 0160:1bf736
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf7ba;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf77e;
    if (dl & 0x80)
        goto loc_1bf760;
    al = dl;
loc_1bf760: // 0160:1bf760
    if (dh & 0x80)
        goto loc_1bf767;
    ah = dh;
loc_1bf767: // 0160:1bf767
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf774;
    al = dl;
loc_1bf774: // 0160:1bf774
    if (dh & 0x80)
        goto loc_1bf77b;
    ah = dh;
loc_1bf77b: // 0160:1bf77b
    eax = rol32(eax, 0x10);
loc_1bf77e: // 0160:1bf77e
    if (!(eax & 0x80808080))
        goto loc_1bf7ba;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf7ba;
    if (dl & 0x80)
        goto loc_1bf79c;
    al = dl;
loc_1bf79c: // 0160:1bf79c
    if (dh & 0x80)
        goto loc_1bf7a3;
    ah = dh;
loc_1bf7a3: // 0160:1bf7a3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf7b0;
    al = dl;
loc_1bf7b0: // 0160:1bf7b0
    if (dh & 0x80)
        goto loc_1bf7b7;
    ah = dh;
loc_1bf7b7: // 0160:1bf7b7
    eax = rol32(eax, 0x10);
loc_1bf7ba: // 0160:1bf7ba
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf83e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf802;
    if (dl & 0x80)
        goto loc_1bf7e4;
    al = dl;
loc_1bf7e4: // 0160:1bf7e4
    if (dh & 0x80)
        goto loc_1bf7eb;
    ah = dh;
loc_1bf7eb: // 0160:1bf7eb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf7f8;
    al = dl;
loc_1bf7f8: // 0160:1bf7f8
    if (dh & 0x80)
        goto loc_1bf7ff;
    ah = dh;
loc_1bf7ff: // 0160:1bf7ff
    eax = rol32(eax, 0x10);
loc_1bf802: // 0160:1bf802
    if (!(eax & 0x80808080))
        goto loc_1bf83e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf83e;
    if (dl & 0x80)
        goto loc_1bf820;
    al = dl;
loc_1bf820: // 0160:1bf820
    if (dh & 0x80)
        goto loc_1bf827;
    ah = dh;
loc_1bf827: // 0160:1bf827
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf834;
    al = dl;
loc_1bf834: // 0160:1bf834
    if (dh & 0x80)
        goto loc_1bf83b;
    ah = dh;
loc_1bf83b: // 0160:1bf83b
    eax = rol32(eax, 0x10);
loc_1bf83e: // 0160:1bf83e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf8c2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf886;
    if (dl & 0x80)
        goto loc_1bf868;
    al = dl;
loc_1bf868: // 0160:1bf868
    if (dh & 0x80)
        goto loc_1bf86f;
    ah = dh;
loc_1bf86f: // 0160:1bf86f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf87c;
    al = dl;
loc_1bf87c: // 0160:1bf87c
    if (dh & 0x80)
        goto loc_1bf883;
    ah = dh;
loc_1bf883: // 0160:1bf883
    eax = rol32(eax, 0x10);
loc_1bf886: // 0160:1bf886
    if (!(eax & 0x80808080))
        goto loc_1bf8c2;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf8c2;
    if (dl & 0x80)
        goto loc_1bf8a4;
    al = dl;
loc_1bf8a4: // 0160:1bf8a4
    if (dh & 0x80)
        goto loc_1bf8ab;
    ah = dh;
loc_1bf8ab: // 0160:1bf8ab
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf8b8;
    al = dl;
loc_1bf8b8: // 0160:1bf8b8
    if (dh & 0x80)
        goto loc_1bf8bf;
    ah = dh;
loc_1bf8bf: // 0160:1bf8bf
    eax = rol32(eax, 0x10);
loc_1bf8c2: // 0160:1bf8c2
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf946;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf90a;
    if (dl & 0x80)
        goto loc_1bf8ec;
    al = dl;
loc_1bf8ec: // 0160:1bf8ec
    if (dh & 0x80)
        goto loc_1bf8f3;
    ah = dh;
loc_1bf8f3: // 0160:1bf8f3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf900;
    al = dl;
loc_1bf900: // 0160:1bf900
    if (dh & 0x80)
        goto loc_1bf907;
    ah = dh;
loc_1bf907: // 0160:1bf907
    eax = rol32(eax, 0x10);
loc_1bf90a: // 0160:1bf90a
    if (!(eax & 0x80808080))
        goto loc_1bf946;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf946;
    if (dl & 0x80)
        goto loc_1bf928;
    al = dl;
loc_1bf928: // 0160:1bf928
    if (dh & 0x80)
        goto loc_1bf92f;
    ah = dh;
loc_1bf92f: // 0160:1bf92f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf93c;
    al = dl;
loc_1bf93c: // 0160:1bf93c
    if (dh & 0x80)
        goto loc_1bf943;
    ah = dh;
loc_1bf943: // 0160:1bf943
    eax = rol32(eax, 0x10);
loc_1bf946: // 0160:1bf946
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bf9ca;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf98e;
    if (dl & 0x80)
        goto loc_1bf970;
    al = dl;
loc_1bf970: // 0160:1bf970
    if (dh & 0x80)
        goto loc_1bf977;
    ah = dh;
loc_1bf977: // 0160:1bf977
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf984;
    al = dl;
loc_1bf984: // 0160:1bf984
    if (dh & 0x80)
        goto loc_1bf98b;
    ah = dh;
loc_1bf98b: // 0160:1bf98b
    eax = rol32(eax, 0x10);
loc_1bf98e: // 0160:1bf98e
    if (!(eax & 0x80808080))
        goto loc_1bf9ca;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bf9ca;
    if (dl & 0x80)
        goto loc_1bf9ac;
    al = dl;
loc_1bf9ac: // 0160:1bf9ac
    if (dh & 0x80)
        goto loc_1bf9b3;
    ah = dh;
loc_1bf9b3: // 0160:1bf9b3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bf9c0;
    al = dl;
loc_1bf9c0: // 0160:1bf9c0
    if (dh & 0x80)
        goto loc_1bf9c7;
    ah = dh;
loc_1bf9c7: // 0160:1bf9c7
    eax = rol32(eax, 0x10);
loc_1bf9ca: // 0160:1bf9ca
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfa4e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfa12;
    if (dl & 0x80)
        goto loc_1bf9f4;
    al = dl;
loc_1bf9f4: // 0160:1bf9f4
    if (dh & 0x80)
        goto loc_1bf9fb;
    ah = dh;
loc_1bf9fb: // 0160:1bf9fb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfa08;
    al = dl;
loc_1bfa08: // 0160:1bfa08
    if (dh & 0x80)
        goto loc_1bfa0f;
    ah = dh;
loc_1bfa0f: // 0160:1bfa0f
    eax = rol32(eax, 0x10);
loc_1bfa12: // 0160:1bfa12
    if (!(eax & 0x80808080))
        goto loc_1bfa4e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfa4e;
    if (dl & 0x80)
        goto loc_1bfa30;
    al = dl;
loc_1bfa30: // 0160:1bfa30
    if (dh & 0x80)
        goto loc_1bfa37;
    ah = dh;
loc_1bfa37: // 0160:1bfa37
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfa44;
    al = dl;
loc_1bfa44: // 0160:1bfa44
    if (dh & 0x80)
        goto loc_1bfa4b;
    ah = dh;
loc_1bfa4b: // 0160:1bfa4b
    eax = rol32(eax, 0x10);
loc_1bfa4e: // 0160:1bfa4e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfad2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfa96;
    if (dl & 0x80)
        goto loc_1bfa78;
    al = dl;
loc_1bfa78: // 0160:1bfa78
    if (dh & 0x80)
        goto loc_1bfa7f;
    ah = dh;
loc_1bfa7f: // 0160:1bfa7f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfa8c;
    al = dl;
loc_1bfa8c: // 0160:1bfa8c
    if (dh & 0x80)
        goto loc_1bfa93;
    ah = dh;
loc_1bfa93: // 0160:1bfa93
    eax = rol32(eax, 0x10);
loc_1bfa96: // 0160:1bfa96
    if (!(eax & 0x80808080))
        goto loc_1bfad2;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfad2;
    if (dl & 0x80)
        goto loc_1bfab4;
    al = dl;
loc_1bfab4: // 0160:1bfab4
    if (dh & 0x80)
        goto loc_1bfabb;
    ah = dh;
loc_1bfabb: // 0160:1bfabb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfac8;
    al = dl;
loc_1bfac8: // 0160:1bfac8
    if (dh & 0x80)
        goto loc_1bfacf;
    ah = dh;
loc_1bfacf: // 0160:1bfacf
    eax = rol32(eax, 0x10);
loc_1bfad2: // 0160:1bfad2
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfb56;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfb1a;
    if (dl & 0x80)
        goto loc_1bfafc;
    al = dl;
loc_1bfafc: // 0160:1bfafc
    if (dh & 0x80)
        goto loc_1bfb03;
    ah = dh;
loc_1bfb03: // 0160:1bfb03
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfb10;
    al = dl;
loc_1bfb10: // 0160:1bfb10
    if (dh & 0x80)
        goto loc_1bfb17;
    ah = dh;
loc_1bfb17: // 0160:1bfb17
    eax = rol32(eax, 0x10);
loc_1bfb1a: // 0160:1bfb1a
    if (!(eax & 0x80808080))
        goto loc_1bfb56;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfb56;
    if (dl & 0x80)
        goto loc_1bfb38;
    al = dl;
loc_1bfb38: // 0160:1bfb38
    if (dh & 0x80)
        goto loc_1bfb3f;
    ah = dh;
loc_1bfb3f: // 0160:1bfb3f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfb4c;
    al = dl;
loc_1bfb4c: // 0160:1bfb4c
    if (dh & 0x80)
        goto loc_1bfb53;
    ah = dh;
loc_1bfb53: // 0160:1bfb53
    eax = rol32(eax, 0x10);
loc_1bfb56: // 0160:1bfb56
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfbda;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfb9e;
    if (dl & 0x80)
        goto loc_1bfb80;
    al = dl;
loc_1bfb80: // 0160:1bfb80
    if (dh & 0x80)
        goto loc_1bfb87;
    ah = dh;
loc_1bfb87: // 0160:1bfb87
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfb94;
    al = dl;
loc_1bfb94: // 0160:1bfb94
    if (dh & 0x80)
        goto loc_1bfb9b;
    ah = dh;
loc_1bfb9b: // 0160:1bfb9b
    eax = rol32(eax, 0x10);
loc_1bfb9e: // 0160:1bfb9e
    if (!(eax & 0x80808080))
        goto loc_1bfbda;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfbda;
    if (dl & 0x80)
        goto loc_1bfbbc;
    al = dl;
loc_1bfbbc: // 0160:1bfbbc
    if (dh & 0x80)
        goto loc_1bfbc3;
    ah = dh;
loc_1bfbc3: // 0160:1bfbc3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfbd0;
    al = dl;
loc_1bfbd0: // 0160:1bfbd0
    if (dh & 0x80)
        goto loc_1bfbd7;
    ah = dh;
loc_1bfbd7: // 0160:1bfbd7
    eax = rol32(eax, 0x10);
loc_1bfbda: // 0160:1bfbda
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfc5e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfc22;
    if (dl & 0x80)
        goto loc_1bfc04;
    al = dl;
loc_1bfc04: // 0160:1bfc04
    if (dh & 0x80)
        goto loc_1bfc0b;
    ah = dh;
loc_1bfc0b: // 0160:1bfc0b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfc18;
    al = dl;
loc_1bfc18: // 0160:1bfc18
    if (dh & 0x80)
        goto loc_1bfc1f;
    ah = dh;
loc_1bfc1f: // 0160:1bfc1f
    eax = rol32(eax, 0x10);
loc_1bfc22: // 0160:1bfc22
    if (!(eax & 0x80808080))
        goto loc_1bfc5e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfc5e;
    if (dl & 0x80)
        goto loc_1bfc40;
    al = dl;
loc_1bfc40: // 0160:1bfc40
    if (dh & 0x80)
        goto loc_1bfc47;
    ah = dh;
loc_1bfc47: // 0160:1bfc47
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfc54;
    al = dl;
loc_1bfc54: // 0160:1bfc54
    if (dh & 0x80)
        goto loc_1bfc5b;
    ah = dh;
loc_1bfc5b: // 0160:1bfc5b
    eax = rol32(eax, 0x10);
loc_1bfc5e: // 0160:1bfc5e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfce2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfca6;
    if (dl & 0x80)
        goto loc_1bfc88;
    al = dl;
loc_1bfc88: // 0160:1bfc88
    if (dh & 0x80)
        goto loc_1bfc8f;
    ah = dh;
loc_1bfc8f: // 0160:1bfc8f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfc9c;
    al = dl;
loc_1bfc9c: // 0160:1bfc9c
    if (dh & 0x80)
        goto loc_1bfca3;
    ah = dh;
loc_1bfca3: // 0160:1bfca3
    eax = rol32(eax, 0x10);
loc_1bfca6: // 0160:1bfca6
    if (!(eax & 0x80808080))
        goto loc_1bfce2;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfce2;
    if (dl & 0x80)
        goto loc_1bfcc4;
    al = dl;
loc_1bfcc4: // 0160:1bfcc4
    if (dh & 0x80)
        goto loc_1bfccb;
    ah = dh;
loc_1bfccb: // 0160:1bfccb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfcd8;
    al = dl;
loc_1bfcd8: // 0160:1bfcd8
    if (dh & 0x80)
        goto loc_1bfcdf;
    ah = dh;
loc_1bfcdf: // 0160:1bfcdf
    eax = rol32(eax, 0x10);
loc_1bfce2: // 0160:1bfce2
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfd66;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfd2a;
    if (dl & 0x80)
        goto loc_1bfd0c;
    al = dl;
loc_1bfd0c: // 0160:1bfd0c
    if (dh & 0x80)
        goto loc_1bfd13;
    ah = dh;
loc_1bfd13: // 0160:1bfd13
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfd20;
    al = dl;
loc_1bfd20: // 0160:1bfd20
    if (dh & 0x80)
        goto loc_1bfd27;
    ah = dh;
loc_1bfd27: // 0160:1bfd27
    eax = rol32(eax, 0x10);
loc_1bfd2a: // 0160:1bfd2a
    if (!(eax & 0x80808080))
        goto loc_1bfd66;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfd66;
    if (dl & 0x80)
        goto loc_1bfd48;
    al = dl;
loc_1bfd48: // 0160:1bfd48
    if (dh & 0x80)
        goto loc_1bfd4f;
    ah = dh;
loc_1bfd4f: // 0160:1bfd4f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfd5c;
    al = dl;
loc_1bfd5c: // 0160:1bfd5c
    if (dh & 0x80)
        goto loc_1bfd63;
    ah = dh;
loc_1bfd63: // 0160:1bfd63
    eax = rol32(eax, 0x10);
loc_1bfd66: // 0160:1bfd66
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfdea;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfdae;
    if (dl & 0x80)
        goto loc_1bfd90;
    al = dl;
loc_1bfd90: // 0160:1bfd90
    if (dh & 0x80)
        goto loc_1bfd97;
    ah = dh;
loc_1bfd97: // 0160:1bfd97
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfda4;
    al = dl;
loc_1bfda4: // 0160:1bfda4
    if (dh & 0x80)
        goto loc_1bfdab;
    ah = dh;
loc_1bfdab: // 0160:1bfdab
    eax = rol32(eax, 0x10);
loc_1bfdae: // 0160:1bfdae
    if (!(eax & 0x80808080))
        goto loc_1bfdea;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfdea;
    if (dl & 0x80)
        goto loc_1bfdcc;
    al = dl;
loc_1bfdcc: // 0160:1bfdcc
    if (dh & 0x80)
        goto loc_1bfdd3;
    ah = dh;
loc_1bfdd3: // 0160:1bfdd3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfde0;
    al = dl;
loc_1bfde0: // 0160:1bfde0
    if (dh & 0x80)
        goto loc_1bfde7;
    ah = dh;
loc_1bfde7: // 0160:1bfde7
    eax = rol32(eax, 0x10);
loc_1bfdea: // 0160:1bfdea
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfe6e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfe32;
    if (dl & 0x80)
        goto loc_1bfe14;
    al = dl;
loc_1bfe14: // 0160:1bfe14
    if (dh & 0x80)
        goto loc_1bfe1b;
    ah = dh;
loc_1bfe1b: // 0160:1bfe1b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfe28;
    al = dl;
loc_1bfe28: // 0160:1bfe28
    if (dh & 0x80)
        goto loc_1bfe2f;
    ah = dh;
loc_1bfe2f: // 0160:1bfe2f
    eax = rol32(eax, 0x10);
loc_1bfe32: // 0160:1bfe32
    if (!(eax & 0x80808080))
        goto loc_1bfe6e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfe6e;
    if (dl & 0x80)
        goto loc_1bfe50;
    al = dl;
loc_1bfe50: // 0160:1bfe50
    if (dh & 0x80)
        goto loc_1bfe57;
    ah = dh;
loc_1bfe57: // 0160:1bfe57
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfe64;
    al = dl;
loc_1bfe64: // 0160:1bfe64
    if (dh & 0x80)
        goto loc_1bfe6b;
    ah = dh;
loc_1bfe6b: // 0160:1bfe6b
    eax = rol32(eax, 0x10);
loc_1bfe6e: // 0160:1bfe6e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfef2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfeb6;
    if (dl & 0x80)
        goto loc_1bfe98;
    al = dl;
loc_1bfe98: // 0160:1bfe98
    if (dh & 0x80)
        goto loc_1bfe9f;
    ah = dh;
loc_1bfe9f: // 0160:1bfe9f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfeac;
    al = dl;
loc_1bfeac: // 0160:1bfeac
    if (dh & 0x80)
        goto loc_1bfeb3;
    ah = dh;
loc_1bfeb3: // 0160:1bfeb3
    eax = rol32(eax, 0x10);
loc_1bfeb6: // 0160:1bfeb6
    if (!(eax & 0x80808080))
        goto loc_1bfef2;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfef2;
    if (dl & 0x80)
        goto loc_1bfed4;
    al = dl;
loc_1bfed4: // 0160:1bfed4
    if (dh & 0x80)
        goto loc_1bfedb;
    ah = dh;
loc_1bfedb: // 0160:1bfedb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfee8;
    al = dl;
loc_1bfee8: // 0160:1bfee8
    if (dh & 0x80)
        goto loc_1bfeef;
    ah = dh;
loc_1bfeef: // 0160:1bfeef
    eax = rol32(eax, 0x10);
loc_1bfef2: // 0160:1bfef2
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bff76;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bff3a;
    if (dl & 0x80)
        goto loc_1bff1c;
    al = dl;
loc_1bff1c: // 0160:1bff1c
    if (dh & 0x80)
        goto loc_1bff23;
    ah = dh;
loc_1bff23: // 0160:1bff23
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bff30;
    al = dl;
loc_1bff30: // 0160:1bff30
    if (dh & 0x80)
        goto loc_1bff37;
    ah = dh;
loc_1bff37: // 0160:1bff37
    eax = rol32(eax, 0x10);
loc_1bff3a: // 0160:1bff3a
    if (!(eax & 0x80808080))
        goto loc_1bff76;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bff76;
    if (dl & 0x80)
        goto loc_1bff58;
    al = dl;
loc_1bff58: // 0160:1bff58
    if (dh & 0x80)
        goto loc_1bff5f;
    ah = dh;
loc_1bff5f: // 0160:1bff5f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bff6c;
    al = dl;
loc_1bff6c: // 0160:1bff6c
    if (dh & 0x80)
        goto loc_1bff73;
    ah = dh;
loc_1bff73: // 0160:1bff73
    eax = rol32(eax, 0x10);
loc_1bff76: // 0160:1bff76
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1bfffa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bffbe;
    if (dl & 0x80)
        goto loc_1bffa0;
    al = dl;
loc_1bffa0: // 0160:1bffa0
    if (dh & 0x80)
        goto loc_1bffa7;
    ah = dh;
loc_1bffa7: // 0160:1bffa7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bffb4;
    al = dl;
loc_1bffb4: // 0160:1bffb4
    if (dh & 0x80)
        goto loc_1bffbb;
    ah = dh;
loc_1bffbb: // 0160:1bffbb
    eax = rol32(eax, 0x10);
loc_1bffbe: // 0160:1bffbe
    if (!(eax & 0x80808080))
        goto loc_1bfffa;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1bfffa;
    if (dl & 0x80)
        goto loc_1bffdc;
    al = dl;
loc_1bffdc: // 0160:1bffdc
    if (dh & 0x80)
        goto loc_1bffe3;
    ah = dh;
loc_1bffe3: // 0160:1bffe3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1bfff0;
    al = dl;
loc_1bfff0: // 0160:1bfff0
    if (dh & 0x80)
        goto loc_1bfff7;
    ah = dh;
loc_1bfff7: // 0160:1bfff7
    eax = rol32(eax, 0x10);
loc_1bfffa: // 0160:1bfffa
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c007e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c0042;
    if (dl & 0x80)
        goto loc_1c0024;
    al = dl;
loc_1c0024: // 0160:1c0024
    if (dh & 0x80)
        goto loc_1c002b;
    ah = dh;
loc_1c002b: // 0160:1c002b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0038;
    al = dl;
loc_1c0038: // 0160:1c0038
    if (dh & 0x80)
        goto loc_1c003f;
    ah = dh;
loc_1c003f: // 0160:1c003f
    eax = rol32(eax, 0x10);
loc_1c0042: // 0160:1c0042
    if (!(eax & 0x80808080))
        goto loc_1c007e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c007e;
    if (dl & 0x80)
        goto loc_1c0060;
    al = dl;
loc_1c0060: // 0160:1c0060
    if (dh & 0x80)
        goto loc_1c0067;
    ah = dh;
loc_1c0067: // 0160:1c0067
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0074;
    al = dl;
loc_1c0074: // 0160:1c0074
    if (dh & 0x80)
        goto loc_1c007b;
    ah = dh;
loc_1c007b: // 0160:1c007b
    eax = rol32(eax, 0x10);
loc_1c007e: // 0160:1c007e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c0102;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c00c6;
    if (dl & 0x80)
        goto loc_1c00a8;
    al = dl;
loc_1c00a8: // 0160:1c00a8
    if (dh & 0x80)
        goto loc_1c00af;
    ah = dh;
loc_1c00af: // 0160:1c00af
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c00bc;
    al = dl;
loc_1c00bc: // 0160:1c00bc
    if (dh & 0x80)
        goto loc_1c00c3;
    ah = dh;
loc_1c00c3: // 0160:1c00c3
    eax = rol32(eax, 0x10);
loc_1c00c6: // 0160:1c00c6
    if (!(eax & 0x80808080))
        goto loc_1c0102;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c0102;
    if (dl & 0x80)
        goto loc_1c00e4;
    al = dl;
loc_1c00e4: // 0160:1c00e4
    if (dh & 0x80)
        goto loc_1c00eb;
    ah = dh;
loc_1c00eb: // 0160:1c00eb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c00f8;
    al = dl;
loc_1c00f8: // 0160:1c00f8
    if (dh & 0x80)
        goto loc_1c00ff;
    ah = dh;
loc_1c00ff: // 0160:1c00ff
    eax = rol32(eax, 0x10);
loc_1c0102: // 0160:1c0102
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c0186;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c014a;
    if (dl & 0x80)
        goto loc_1c012c;
    al = dl;
loc_1c012c: // 0160:1c012c
    if (dh & 0x80)
        goto loc_1c0133;
    ah = dh;
loc_1c0133: // 0160:1c0133
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0140;
    al = dl;
loc_1c0140: // 0160:1c0140
    if (dh & 0x80)
        goto loc_1c0147;
    ah = dh;
loc_1c0147: // 0160:1c0147
    eax = rol32(eax, 0x10);
loc_1c014a: // 0160:1c014a
    if (!(eax & 0x80808080))
        goto loc_1c0186;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c0186;
    if (dl & 0x80)
        goto loc_1c0168;
    al = dl;
loc_1c0168: // 0160:1c0168
    if (dh & 0x80)
        goto loc_1c016f;
    ah = dh;
loc_1c016f: // 0160:1c016f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c017c;
    al = dl;
loc_1c017c: // 0160:1c017c
    if (dh & 0x80)
        goto loc_1c0183;
    ah = dh;
loc_1c0183: // 0160:1c0183
    eax = rol32(eax, 0x10);
loc_1c0186: // 0160:1c0186
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c020a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c01ce;
    if (dl & 0x80)
        goto loc_1c01b0;
    al = dl;
loc_1c01b0: // 0160:1c01b0
    if (dh & 0x80)
        goto loc_1c01b7;
    ah = dh;
loc_1c01b7: // 0160:1c01b7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c01c4;
    al = dl;
loc_1c01c4: // 0160:1c01c4
    if (dh & 0x80)
        goto loc_1c01cb;
    ah = dh;
loc_1c01cb: // 0160:1c01cb
    eax = rol32(eax, 0x10);
loc_1c01ce: // 0160:1c01ce
    if (!(eax & 0x80808080))
        goto loc_1c020a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c020a;
    if (dl & 0x80)
        goto loc_1c01ec;
    al = dl;
loc_1c01ec: // 0160:1c01ec
    if (dh & 0x80)
        goto loc_1c01f3;
    ah = dh;
loc_1c01f3: // 0160:1c01f3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0200;
    al = dl;
loc_1c0200: // 0160:1c0200
    if (dh & 0x80)
        goto loc_1c0207;
    ah = dh;
loc_1c0207: // 0160:1c0207
    eax = rol32(eax, 0x10);
loc_1c020a: // 0160:1c020a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c028e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c0252;
    if (dl & 0x80)
        goto loc_1c0234;
    al = dl;
loc_1c0234: // 0160:1c0234
    if (dh & 0x80)
        goto loc_1c023b;
    ah = dh;
loc_1c023b: // 0160:1c023b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0248;
    al = dl;
loc_1c0248: // 0160:1c0248
    if (dh & 0x80)
        goto loc_1c024f;
    ah = dh;
loc_1c024f: // 0160:1c024f
    eax = rol32(eax, 0x10);
loc_1c0252: // 0160:1c0252
    if (!(eax & 0x80808080))
        goto loc_1c028e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c028e;
    if (dl & 0x80)
        goto loc_1c0270;
    al = dl;
loc_1c0270: // 0160:1c0270
    if (dh & 0x80)
        goto loc_1c0277;
    ah = dh;
loc_1c0277: // 0160:1c0277
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0284;
    al = dl;
loc_1c0284: // 0160:1c0284
    if (dh & 0x80)
        goto loc_1c028b;
    ah = dh;
loc_1c028b: // 0160:1c028b
    eax = rol32(eax, 0x10);
loc_1c028e: // 0160:1c028e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c0312;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c02d6;
    if (dl & 0x80)
        goto loc_1c02b8;
    al = dl;
loc_1c02b8: // 0160:1c02b8
    if (dh & 0x80)
        goto loc_1c02bf;
    ah = dh;
loc_1c02bf: // 0160:1c02bf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c02cc;
    al = dl;
loc_1c02cc: // 0160:1c02cc
    if (dh & 0x80)
        goto loc_1c02d3;
    ah = dh;
loc_1c02d3: // 0160:1c02d3
    eax = rol32(eax, 0x10);
loc_1c02d6: // 0160:1c02d6
    if (!(eax & 0x80808080))
        goto loc_1c0312;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c0312;
    if (dl & 0x80)
        goto loc_1c02f4;
    al = dl;
loc_1c02f4: // 0160:1c02f4
    if (dh & 0x80)
        goto loc_1c02fb;
    ah = dh;
loc_1c02fb: // 0160:1c02fb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0308;
    al = dl;
loc_1c0308: // 0160:1c0308
    if (dh & 0x80)
        goto loc_1c030f;
    ah = dh;
loc_1c030f: // 0160:1c030f
    eax = rol32(eax, 0x10);
loc_1c0312: // 0160:1c0312
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c0396;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c035a;
    if (dl & 0x80)
        goto loc_1c033c;
    al = dl;
loc_1c033c: // 0160:1c033c
    if (dh & 0x80)
        goto loc_1c0343;
    ah = dh;
loc_1c0343: // 0160:1c0343
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0350;
    al = dl;
loc_1c0350: // 0160:1c0350
    if (dh & 0x80)
        goto loc_1c0357;
    ah = dh;
loc_1c0357: // 0160:1c0357
    eax = rol32(eax, 0x10);
loc_1c035a: // 0160:1c035a
    if (!(eax & 0x80808080))
        goto loc_1c0396;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c0396;
    if (dl & 0x80)
        goto loc_1c0378;
    al = dl;
loc_1c0378: // 0160:1c0378
    if (dh & 0x80)
        goto loc_1c037f;
    ah = dh;
loc_1c037f: // 0160:1c037f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c038c;
    al = dl;
loc_1c038c: // 0160:1c038c
    if (dh & 0x80)
        goto loc_1c0393;
    ah = dh;
loc_1c0393: // 0160:1c0393
    eax = rol32(eax, 0x10);
loc_1c0396: // 0160:1c0396
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c041a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c03de;
    if (dl & 0x80)
        goto loc_1c03c0;
    al = dl;
loc_1c03c0: // 0160:1c03c0
    if (dh & 0x80)
        goto loc_1c03c7;
    ah = dh;
loc_1c03c7: // 0160:1c03c7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c03d4;
    al = dl;
loc_1c03d4: // 0160:1c03d4
    if (dh & 0x80)
        goto loc_1c03db;
    ah = dh;
loc_1c03db: // 0160:1c03db
    eax = rol32(eax, 0x10);
loc_1c03de: // 0160:1c03de
    if (!(eax & 0x80808080))
        goto loc_1c041a;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c041a;
    if (dl & 0x80)
        goto loc_1c03fc;
    al = dl;
loc_1c03fc: // 0160:1c03fc
    if (dh & 0x80)
        goto loc_1c0403;
    ah = dh;
loc_1c0403: // 0160:1c0403
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0410;
    al = dl;
loc_1c0410: // 0160:1c0410
    if (dh & 0x80)
        goto loc_1c0417;
    ah = dh;
loc_1c0417: // 0160:1c0417
    eax = rol32(eax, 0x10);
loc_1c041a: // 0160:1c041a
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c049e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c0462;
    if (dl & 0x80)
        goto loc_1c0444;
    al = dl;
loc_1c0444: // 0160:1c0444
    if (dh & 0x80)
        goto loc_1c044b;
    ah = dh;
loc_1c044b: // 0160:1c044b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0458;
    al = dl;
loc_1c0458: // 0160:1c0458
    if (dh & 0x80)
        goto loc_1c045f;
    ah = dh;
loc_1c045f: // 0160:1c045f
    eax = rol32(eax, 0x10);
loc_1c0462: // 0160:1c0462
    if (!(eax & 0x80808080))
        goto loc_1c049e;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c049e;
    if (dl & 0x80)
        goto loc_1c0480;
    al = dl;
loc_1c0480: // 0160:1c0480
    if (dh & 0x80)
        goto loc_1c0487;
    ah = dh;
loc_1c0487: // 0160:1c0487
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0494;
    al = dl;
loc_1c0494: // 0160:1c0494
    if (dh & 0x80)
        goto loc_1c049b;
    ah = dh;
loc_1c049b: // 0160:1c049b
    eax = rol32(eax, 0x10);
loc_1c049e: // 0160:1c049e
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c0522;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c04e6;
    if (dl & 0x80)
        goto loc_1c04c8;
    al = dl;
loc_1c04c8: // 0160:1c04c8
    if (dh & 0x80)
        goto loc_1c04cf;
    ah = dh;
loc_1c04cf: // 0160:1c04cf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c04dc;
    al = dl;
loc_1c04dc: // 0160:1c04dc
    if (dh & 0x80)
        goto loc_1c04e3;
    ah = dh;
loc_1c04e3: // 0160:1c04e3
    eax = rol32(eax, 0x10);
loc_1c04e6: // 0160:1c04e6
    if (!(eax & 0x80808080))
        goto loc_1c0522;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c0522;
    if (dl & 0x80)
        goto loc_1c0504;
    al = dl;
loc_1c0504: // 0160:1c0504
    if (dh & 0x80)
        goto loc_1c050b;
    ah = dh;
loc_1c050b: // 0160:1c050b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0518;
    al = dl;
loc_1c0518: // 0160:1c0518
    if (dh & 0x80)
        goto loc_1c051f;
    ah = dh;
loc_1c051f: // 0160:1c051f
    eax = rol32(eax, 0x10);
loc_1c0522: // 0160:1c0522
    memoryASet32(ds, edi + 2147483647, eax);
    eax = memoryAGet32(ds, ecx + 2147483647);
    if (!(eax & 0x80808080))
        goto loc_1c05a6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c056a;
    if (dl & 0x80)
        goto loc_1c054c;
    al = dl;
loc_1c054c: // 0160:1c054c
    if (dh & 0x80)
        goto loc_1c0553;
    ah = dh;
loc_1c0553: // 0160:1c0553
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c0560;
    al = dl;
loc_1c0560: // 0160:1c0560
    if (dh & 0x80)
        goto loc_1c0567;
    ah = dh;
loc_1c0567: // 0160:1c0567
    eax = rol32(eax, 0x10);
loc_1c056a: // 0160:1c056a
    if (!(eax & 0x80808080))
        goto loc_1c05a6;
    edx = eax;
    eax = memoryAGet32(ds, esi + 2147483647);
    if (edx == 0x80808080)
        goto loc_1c05a6;
    if (dl & 0x80)
        goto loc_1c0588;
    al = dl;
loc_1c0588: // 0160:1c0588
    if (dh & 0x80)
        goto loc_1c058f;
    ah = dh;
loc_1c058f: // 0160:1c058f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c059c;
    al = dl;
loc_1c059c: // 0160:1c059c
    if (dh & 0x80)
        goto loc_1c05a3;
    ah = dh;
loc_1c05a3: // 0160:1c05a3
    eax = rol32(eax, 0x10);
loc_1c05a6: // 0160:1c05a6
    memoryASet32(ds, edi + 2147483647, eax);
    ecx += memoryAGet32(ss, ebp + 24);
    ebx += memoryAGet32(ss, ebp + 28);
    esi += memoryAGet32(ss, ebp + 32);
    edi += memoryAGet32(ss, ebp + 36);
    memoryASet32(ss, ebp + 40, memoryAGet32(ss, ebp + 40) - 1);
    if (memoryAGet32(ss, ebp + 40))
        goto loc_1bdc6c;
loc_1c05c1: // 0160:1c05c1
    stop("disassembly failed at 160:1c05c1 popal ");
    stop("disassembly failed at 160:1c05c2 leave ");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c05c4() // 0160:1c05c4 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xfffffffc;
    stop("disassembly failed at 160:1c05ca pushal ");
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_1c05d8;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) - 0x00000004);
loc_1c05d8: // 0160:1c05d8
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_1c05e5;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) - 0x00000004);
loc_1c05e5: // 0160:1c05e5
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_1c05f2;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) - 0x00000004);
loc_1c05f2: // 0160:1c05f2
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    esi = 0;
    edi = 0;
loc_1c05fe: // 0160:1c05fe
    eax = memoryAGet32(ss, ebp + 48);
    memoryASet32(ds, esi + 1836810, eax);
    eax = memoryAGet32(ss, ebp + 52);
    memoryASet32(ds, esi + 1836831, eax);
    eax = memoryAGet32(ss, ebp + 56);
    memoryASet32(ds, esi + 1836872, eax);
    flags.carry = (bx + memoryAGet16(ss, ebp + 44)) >= 0x10000;
    bx += memoryAGet16(ss, ebp + 44);
    dx += memoryAGet16(ss, ebp + 46) + flags.carry;
    edx &= 0x000003ff;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) + edx);
    eax = memoryAGet32(ss, ebp + 24);
    if ((int32_t)memoryAGet32(ss, ebp + 48) <= (int32_t)eax)
        goto loc_1c0635;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) - eax);
loc_1c0635: // 0160:1c0635
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) + edx);
    eax = memoryAGet32(ss, ebp + 28);
    if ((int32_t)memoryAGet32(ss, ebp + 52) <= (int32_t)eax)
        goto loc_1c0643;
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) - eax);
loc_1c0643: // 0160:1c0643
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) + edx);
    eax = memoryAGet32(ss, ebp + 32);
    if ((int32_t)memoryAGet32(ss, ebp + 56) <= (int32_t)eax)
        goto loc_1c0651;
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) - eax);
loc_1c0651: // 0160:1c0651
    edx = 0;
    eax = memoryAGet32(ss, ebp + 48);
    memoryASet32(ds, esi + 1836816, eax);
    eax = memoryAGet32(ss, ebp + 52);
    memoryASet32(ds, esi + 1836837, eax);
    eax = memoryAGet32(ss, ebp + 56);
    memoryASet32(ds, esi + 1836878, eax);
    flags.carry = (bx + memoryAGet16(ss, ebp + 44)) >= 0x10000;
    bx += memoryAGet16(ss, ebp + 44);
    dx += memoryAGet16(ss, ebp + 46) + flags.carry;
    edx &= 0x000003ff;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) + edx);
    eax = memoryAGet32(ss, ebp + 24);
    if ((int32_t)memoryAGet32(ss, ebp + 48) <= (int32_t)eax)
        goto loc_1c068a;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) - eax);
loc_1c068a: // 0160:1c068a
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) + edx);
    eax = memoryAGet32(ss, ebp + 28);
    if ((int32_t)memoryAGet32(ss, ebp + 52) <= (int32_t)eax)
        goto loc_1c0698;
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) - eax);
loc_1c0698: // 0160:1c0698
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) + edx);
    eax = memoryAGet32(ss, ebp + 32);
    if ((int32_t)memoryAGet32(ss, ebp + 56) <= (int32_t)eax)
        goto loc_1c06a6;
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) - eax);
loc_1c06a6: // 0160:1c06a6
    edx = 0;
    esi += 0x00000066;
    ecx += 0x00000002;
    if (ecx != 0x00000140)
        goto loc_1c05fe;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_1c06ca;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) + 0x00000004);
loc_1c06ca: // 0160:1c06ca
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_1c06d7;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) + 0x00000004);
loc_1c06d7: // 0160:1c06d7
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_1c06e4;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) + 0x00000004);
loc_1c06e4: // 0160:1c06e4
    ecx = memoryAGet32(ss, ebp + 8);
    ebx = memoryAGet32(ss, ebp + 12);
    esi = memoryAGet32(ss, ebp + 16);
    edi = memoryAGet32(ss, ebp + 20);
    memoryASet32(ss, ebp + -4, 0x00000000);
    if ((int32_t)memoryAGet32(ss, ebp + 40) <= (int32_t)0x00000000)
        goto loc_1c46f1;
    goto loc_1c0703;
loc_1c0703: // 0160:1c0703
    goto loc_1c0705;
loc_1c0705: // 0160:1c0705
    goto loc_1c0708;
    // gap 1 bytes
loc_1c0708: // 0160:1c0708
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0767;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c073e;
    if (dl & 0x80)
        goto loc_1c0737;
    al = dl;
loc_1c0737: // 0160:1c0737
    if (dh & 0x80)
        goto loc_1c073e;
    ah = dh;
loc_1c073e: // 0160:1c073e
    if (!(ax & 0x8080))
        goto loc_1c0767;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0767;
    if (dl & 0x80)
        goto loc_1c0760;
    al = dl;
loc_1c0760: // 0160:1c0760
    if (dh & 0x80)
        goto loc_1c0767;
    ah = dh;
loc_1c0767: // 0160:1c0767
    memoryASet16(ds, edi, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c07cd;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c07a4;
    if (dl & 0x80)
        goto loc_1c079d;
    al = dl;
loc_1c079d: // 0160:1c079d
    if (dh & 0x80)
        goto loc_1c07a4;
    ah = dh;
loc_1c07a4: // 0160:1c07a4
    if (!(ax & 0x8080))
        goto loc_1c07cd;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c07cd;
    if (dl & 0x80)
        goto loc_1c07c6;
    al = dl;
loc_1c07c6: // 0160:1c07c6
    if (dh & 0x80)
        goto loc_1c07cd;
    ah = dh;
loc_1c07cd: // 0160:1c07cd
    memoryASet16(ds, edi + 2, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0833;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c080a;
    if (dl & 0x80)
        goto loc_1c0803;
    al = dl;
loc_1c0803: // 0160:1c0803
    if (dh & 0x80)
        goto loc_1c080a;
    ah = dh;
loc_1c080a: // 0160:1c080a
    if (!(ax & 0x8080))
        goto loc_1c0833;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0833;
    if (dl & 0x80)
        goto loc_1c082c;
    al = dl;
loc_1c082c: // 0160:1c082c
    if (dh & 0x80)
        goto loc_1c0833;
    ah = dh;
loc_1c0833: // 0160:1c0833
    memoryASet16(ds, edi + 4, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0899;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0870;
    if (dl & 0x80)
        goto loc_1c0869;
    al = dl;
loc_1c0869: // 0160:1c0869
    if (dh & 0x80)
        goto loc_1c0870;
    ah = dh;
loc_1c0870: // 0160:1c0870
    if (!(ax & 0x8080))
        goto loc_1c0899;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0899;
    if (dl & 0x80)
        goto loc_1c0892;
    al = dl;
loc_1c0892: // 0160:1c0892
    if (dh & 0x80)
        goto loc_1c0899;
    ah = dh;
loc_1c0899: // 0160:1c0899
    memoryASet16(ds, edi + 6, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c08ff;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c08d6;
    if (dl & 0x80)
        goto loc_1c08cf;
    al = dl;
loc_1c08cf: // 0160:1c08cf
    if (dh & 0x80)
        goto loc_1c08d6;
    ah = dh;
loc_1c08d6: // 0160:1c08d6
    if (!(ax & 0x8080))
        goto loc_1c08ff;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c08ff;
    if (dl & 0x80)
        goto loc_1c08f8;
    al = dl;
loc_1c08f8: // 0160:1c08f8
    if (dh & 0x80)
        goto loc_1c08ff;
    ah = dh;
loc_1c08ff: // 0160:1c08ff
    memoryASet16(ds, edi + 8, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0965;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c093c;
    if (dl & 0x80)
        goto loc_1c0935;
    al = dl;
loc_1c0935: // 0160:1c0935
    if (dh & 0x80)
        goto loc_1c093c;
    ah = dh;
loc_1c093c: // 0160:1c093c
    if (!(ax & 0x8080))
        goto loc_1c0965;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0965;
    if (dl & 0x80)
        goto loc_1c095e;
    al = dl;
loc_1c095e: // 0160:1c095e
    if (dh & 0x80)
        goto loc_1c0965;
    ah = dh;
loc_1c0965: // 0160:1c0965
    memoryASet16(ds, edi + 10, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c09cb;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c09a2;
    if (dl & 0x80)
        goto loc_1c099b;
    al = dl;
loc_1c099b: // 0160:1c099b
    if (dh & 0x80)
        goto loc_1c09a2;
    ah = dh;
loc_1c09a2: // 0160:1c09a2
    if (!(ax & 0x8080))
        goto loc_1c09cb;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c09cb;
    if (dl & 0x80)
        goto loc_1c09c4;
    al = dl;
loc_1c09c4: // 0160:1c09c4
    if (dh & 0x80)
        goto loc_1c09cb;
    ah = dh;
loc_1c09cb: // 0160:1c09cb
    memoryASet16(ds, edi + 12, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0a31;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0a08;
    if (dl & 0x80)
        goto loc_1c0a01;
    al = dl;
loc_1c0a01: // 0160:1c0a01
    if (dh & 0x80)
        goto loc_1c0a08;
    ah = dh;
loc_1c0a08: // 0160:1c0a08
    if (!(ax & 0x8080))
        goto loc_1c0a31;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0a31;
    if (dl & 0x80)
        goto loc_1c0a2a;
    al = dl;
loc_1c0a2a: // 0160:1c0a2a
    if (dh & 0x80)
        goto loc_1c0a31;
    ah = dh;
loc_1c0a31: // 0160:1c0a31
    memoryASet16(ds, edi + 14, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0a97;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0a6e;
    if (dl & 0x80)
        goto loc_1c0a67;
    al = dl;
loc_1c0a67: // 0160:1c0a67
    if (dh & 0x80)
        goto loc_1c0a6e;
    ah = dh;
loc_1c0a6e: // 0160:1c0a6e
    if (!(ax & 0x8080))
        goto loc_1c0a97;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0a97;
    if (dl & 0x80)
        goto loc_1c0a90;
    al = dl;
loc_1c0a90: // 0160:1c0a90
    if (dh & 0x80)
        goto loc_1c0a97;
    ah = dh;
loc_1c0a97: // 0160:1c0a97
    memoryASet16(ds, edi + 16, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0afd;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0ad4;
    if (dl & 0x80)
        goto loc_1c0acd;
    al = dl;
loc_1c0acd: // 0160:1c0acd
    if (dh & 0x80)
        goto loc_1c0ad4;
    ah = dh;
loc_1c0ad4: // 0160:1c0ad4
    if (!(ax & 0x8080))
        goto loc_1c0afd;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0afd;
    if (dl & 0x80)
        goto loc_1c0af6;
    al = dl;
loc_1c0af6: // 0160:1c0af6
    if (dh & 0x80)
        goto loc_1c0afd;
    ah = dh;
loc_1c0afd: // 0160:1c0afd
    memoryASet16(ds, edi + 18, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0b63;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0b3a;
    if (dl & 0x80)
        goto loc_1c0b33;
    al = dl;
loc_1c0b33: // 0160:1c0b33
    if (dh & 0x80)
        goto loc_1c0b3a;
    ah = dh;
loc_1c0b3a: // 0160:1c0b3a
    if (!(ax & 0x8080))
        goto loc_1c0b63;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0b63;
    if (dl & 0x80)
        goto loc_1c0b5c;
    al = dl;
loc_1c0b5c: // 0160:1c0b5c
    if (dh & 0x80)
        goto loc_1c0b63;
    ah = dh;
loc_1c0b63: // 0160:1c0b63
    memoryASet16(ds, edi + 20, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0bc9;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0ba0;
    if (dl & 0x80)
        goto loc_1c0b99;
    al = dl;
loc_1c0b99: // 0160:1c0b99
    if (dh & 0x80)
        goto loc_1c0ba0;
    ah = dh;
loc_1c0ba0: // 0160:1c0ba0
    if (!(ax & 0x8080))
        goto loc_1c0bc9;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0bc9;
    if (dl & 0x80)
        goto loc_1c0bc2;
    al = dl;
loc_1c0bc2: // 0160:1c0bc2
    if (dh & 0x80)
        goto loc_1c0bc9;
    ah = dh;
loc_1c0bc9: // 0160:1c0bc9
    memoryASet16(ds, edi + 22, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0c2f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0c06;
    if (dl & 0x80)
        goto loc_1c0bff;
    al = dl;
loc_1c0bff: // 0160:1c0bff
    if (dh & 0x80)
        goto loc_1c0c06;
    ah = dh;
loc_1c0c06: // 0160:1c0c06
    if (!(ax & 0x8080))
        goto loc_1c0c2f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0c2f;
    if (dl & 0x80)
        goto loc_1c0c28;
    al = dl;
loc_1c0c28: // 0160:1c0c28
    if (dh & 0x80)
        goto loc_1c0c2f;
    ah = dh;
loc_1c0c2f: // 0160:1c0c2f
    memoryASet16(ds, edi + 24, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0c95;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0c6c;
    if (dl & 0x80)
        goto loc_1c0c65;
    al = dl;
loc_1c0c65: // 0160:1c0c65
    if (dh & 0x80)
        goto loc_1c0c6c;
    ah = dh;
loc_1c0c6c: // 0160:1c0c6c
    if (!(ax & 0x8080))
        goto loc_1c0c95;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0c95;
    if (dl & 0x80)
        goto loc_1c0c8e;
    al = dl;
loc_1c0c8e: // 0160:1c0c8e
    if (dh & 0x80)
        goto loc_1c0c95;
    ah = dh;
loc_1c0c95: // 0160:1c0c95
    memoryASet16(ds, edi + 26, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0cfb;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0cd2;
    if (dl & 0x80)
        goto loc_1c0ccb;
    al = dl;
loc_1c0ccb: // 0160:1c0ccb
    if (dh & 0x80)
        goto loc_1c0cd2;
    ah = dh;
loc_1c0cd2: // 0160:1c0cd2
    if (!(ax & 0x8080))
        goto loc_1c0cfb;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0cfb;
    if (dl & 0x80)
        goto loc_1c0cf4;
    al = dl;
loc_1c0cf4: // 0160:1c0cf4
    if (dh & 0x80)
        goto loc_1c0cfb;
    ah = dh;
loc_1c0cfb: // 0160:1c0cfb
    memoryASet16(ds, edi + 28, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0d61;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0d38;
    if (dl & 0x80)
        goto loc_1c0d31;
    al = dl;
loc_1c0d31: // 0160:1c0d31
    if (dh & 0x80)
        goto loc_1c0d38;
    ah = dh;
loc_1c0d38: // 0160:1c0d38
    if (!(ax & 0x8080))
        goto loc_1c0d61;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0d61;
    if (dl & 0x80)
        goto loc_1c0d5a;
    al = dl;
loc_1c0d5a: // 0160:1c0d5a
    if (dh & 0x80)
        goto loc_1c0d61;
    ah = dh;
loc_1c0d61: // 0160:1c0d61
    memoryASet16(ds, edi + 30, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0dc7;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0d9e;
    if (dl & 0x80)
        goto loc_1c0d97;
    al = dl;
loc_1c0d97: // 0160:1c0d97
    if (dh & 0x80)
        goto loc_1c0d9e;
    ah = dh;
loc_1c0d9e: // 0160:1c0d9e
    if (!(ax & 0x8080))
        goto loc_1c0dc7;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0dc7;
    if (dl & 0x80)
        goto loc_1c0dc0;
    al = dl;
loc_1c0dc0: // 0160:1c0dc0
    if (dh & 0x80)
        goto loc_1c0dc7;
    ah = dh;
loc_1c0dc7: // 0160:1c0dc7
    memoryASet16(ds, edi + 32, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0e2d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0e04;
    if (dl & 0x80)
        goto loc_1c0dfd;
    al = dl;
loc_1c0dfd: // 0160:1c0dfd
    if (dh & 0x80)
        goto loc_1c0e04;
    ah = dh;
loc_1c0e04: // 0160:1c0e04
    if (!(ax & 0x8080))
        goto loc_1c0e2d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0e2d;
    if (dl & 0x80)
        goto loc_1c0e26;
    al = dl;
loc_1c0e26: // 0160:1c0e26
    if (dh & 0x80)
        goto loc_1c0e2d;
    ah = dh;
loc_1c0e2d: // 0160:1c0e2d
    memoryASet16(ds, edi + 34, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0e93;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0e6a;
    if (dl & 0x80)
        goto loc_1c0e63;
    al = dl;
loc_1c0e63: // 0160:1c0e63
    if (dh & 0x80)
        goto loc_1c0e6a;
    ah = dh;
loc_1c0e6a: // 0160:1c0e6a
    if (!(ax & 0x8080))
        goto loc_1c0e93;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0e93;
    if (dl & 0x80)
        goto loc_1c0e8c;
    al = dl;
loc_1c0e8c: // 0160:1c0e8c
    if (dh & 0x80)
        goto loc_1c0e93;
    ah = dh;
loc_1c0e93: // 0160:1c0e93
    memoryASet16(ds, edi + 36, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0ef9;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0ed0;
    if (dl & 0x80)
        goto loc_1c0ec9;
    al = dl;
loc_1c0ec9: // 0160:1c0ec9
    if (dh & 0x80)
        goto loc_1c0ed0;
    ah = dh;
loc_1c0ed0: // 0160:1c0ed0
    if (!(ax & 0x8080))
        goto loc_1c0ef9;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0ef9;
    if (dl & 0x80)
        goto loc_1c0ef2;
    al = dl;
loc_1c0ef2: // 0160:1c0ef2
    if (dh & 0x80)
        goto loc_1c0ef9;
    ah = dh;
loc_1c0ef9: // 0160:1c0ef9
    memoryASet16(ds, edi + 38, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0f5f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0f36;
    if (dl & 0x80)
        goto loc_1c0f2f;
    al = dl;
loc_1c0f2f: // 0160:1c0f2f
    if (dh & 0x80)
        goto loc_1c0f36;
    ah = dh;
loc_1c0f36: // 0160:1c0f36
    if (!(ax & 0x8080))
        goto loc_1c0f5f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0f5f;
    if (dl & 0x80)
        goto loc_1c0f58;
    al = dl;
loc_1c0f58: // 0160:1c0f58
    if (dh & 0x80)
        goto loc_1c0f5f;
    ah = dh;
loc_1c0f5f: // 0160:1c0f5f
    memoryASet16(ds, edi + 40, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c0fc5;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0f9c;
    if (dl & 0x80)
        goto loc_1c0f95;
    al = dl;
loc_1c0f95: // 0160:1c0f95
    if (dh & 0x80)
        goto loc_1c0f9c;
    ah = dh;
loc_1c0f9c: // 0160:1c0f9c
    if (!(ax & 0x8080))
        goto loc_1c0fc5;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c0fc5;
    if (dl & 0x80)
        goto loc_1c0fbe;
    al = dl;
loc_1c0fbe: // 0160:1c0fbe
    if (dh & 0x80)
        goto loc_1c0fc5;
    ah = dh;
loc_1c0fc5: // 0160:1c0fc5
    memoryASet16(ds, edi + 42, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c102b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1002;
    if (dl & 0x80)
        goto loc_1c0ffb;
    al = dl;
loc_1c0ffb: // 0160:1c0ffb
    if (dh & 0x80)
        goto loc_1c1002;
    ah = dh;
loc_1c1002: // 0160:1c1002
    if (!(ax & 0x8080))
        goto loc_1c102b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c102b;
    if (dl & 0x80)
        goto loc_1c1024;
    al = dl;
loc_1c1024: // 0160:1c1024
    if (dh & 0x80)
        goto loc_1c102b;
    ah = dh;
loc_1c102b: // 0160:1c102b
    memoryASet16(ds, edi + 44, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1091;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1068;
    if (dl & 0x80)
        goto loc_1c1061;
    al = dl;
loc_1c1061: // 0160:1c1061
    if (dh & 0x80)
        goto loc_1c1068;
    ah = dh;
loc_1c1068: // 0160:1c1068
    if (!(ax & 0x8080))
        goto loc_1c1091;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1091;
    if (dl & 0x80)
        goto loc_1c108a;
    al = dl;
loc_1c108a: // 0160:1c108a
    if (dh & 0x80)
        goto loc_1c1091;
    ah = dh;
loc_1c1091: // 0160:1c1091
    memoryASet16(ds, edi + 46, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c10f7;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c10ce;
    if (dl & 0x80)
        goto loc_1c10c7;
    al = dl;
loc_1c10c7: // 0160:1c10c7
    if (dh & 0x80)
        goto loc_1c10ce;
    ah = dh;
loc_1c10ce: // 0160:1c10ce
    if (!(ax & 0x8080))
        goto loc_1c10f7;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c10f7;
    if (dl & 0x80)
        goto loc_1c10f0;
    al = dl;
loc_1c10f0: // 0160:1c10f0
    if (dh & 0x80)
        goto loc_1c10f7;
    ah = dh;
loc_1c10f7: // 0160:1c10f7
    memoryASet16(ds, edi + 48, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c115d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1134;
    if (dl & 0x80)
        goto loc_1c112d;
    al = dl;
loc_1c112d: // 0160:1c112d
    if (dh & 0x80)
        goto loc_1c1134;
    ah = dh;
loc_1c1134: // 0160:1c1134
    if (!(ax & 0x8080))
        goto loc_1c115d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c115d;
    if (dl & 0x80)
        goto loc_1c1156;
    al = dl;
loc_1c1156: // 0160:1c1156
    if (dh & 0x80)
        goto loc_1c115d;
    ah = dh;
loc_1c115d: // 0160:1c115d
    memoryASet16(ds, edi + 50, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c11c3;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c119a;
    if (dl & 0x80)
        goto loc_1c1193;
    al = dl;
loc_1c1193: // 0160:1c1193
    if (dh & 0x80)
        goto loc_1c119a;
    ah = dh;
loc_1c119a: // 0160:1c119a
    if (!(ax & 0x8080))
        goto loc_1c11c3;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c11c3;
    if (dl & 0x80)
        goto loc_1c11bc;
    al = dl;
loc_1c11bc: // 0160:1c11bc
    if (dh & 0x80)
        goto loc_1c11c3;
    ah = dh;
loc_1c11c3: // 0160:1c11c3
    memoryASet16(ds, edi + 52, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1229;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1200;
    if (dl & 0x80)
        goto loc_1c11f9;
    al = dl;
loc_1c11f9: // 0160:1c11f9
    if (dh & 0x80)
        goto loc_1c1200;
    ah = dh;
loc_1c1200: // 0160:1c1200
    if (!(ax & 0x8080))
        goto loc_1c1229;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1229;
    if (dl & 0x80)
        goto loc_1c1222;
    al = dl;
loc_1c1222: // 0160:1c1222
    if (dh & 0x80)
        goto loc_1c1229;
    ah = dh;
loc_1c1229: // 0160:1c1229
    memoryASet16(ds, edi + 54, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c128f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1266;
    if (dl & 0x80)
        goto loc_1c125f;
    al = dl;
loc_1c125f: // 0160:1c125f
    if (dh & 0x80)
        goto loc_1c1266;
    ah = dh;
loc_1c1266: // 0160:1c1266
    if (!(ax & 0x8080))
        goto loc_1c128f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c128f;
    if (dl & 0x80)
        goto loc_1c1288;
    al = dl;
loc_1c1288: // 0160:1c1288
    if (dh & 0x80)
        goto loc_1c128f;
    ah = dh;
loc_1c128f: // 0160:1c128f
    memoryASet16(ds, edi + 56, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c12f5;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c12cc;
    if (dl & 0x80)
        goto loc_1c12c5;
    al = dl;
loc_1c12c5: // 0160:1c12c5
    if (dh & 0x80)
        goto loc_1c12cc;
    ah = dh;
loc_1c12cc: // 0160:1c12cc
    if (!(ax & 0x8080))
        goto loc_1c12f5;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c12f5;
    if (dl & 0x80)
        goto loc_1c12ee;
    al = dl;
loc_1c12ee: // 0160:1c12ee
    if (dh & 0x80)
        goto loc_1c12f5;
    ah = dh;
loc_1c12f5: // 0160:1c12f5
    memoryASet16(ds, edi + 58, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c135b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1332;
    if (dl & 0x80)
        goto loc_1c132b;
    al = dl;
loc_1c132b: // 0160:1c132b
    if (dh & 0x80)
        goto loc_1c1332;
    ah = dh;
loc_1c1332: // 0160:1c1332
    if (!(ax & 0x8080))
        goto loc_1c135b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c135b;
    if (dl & 0x80)
        goto loc_1c1354;
    al = dl;
loc_1c1354: // 0160:1c1354
    if (dh & 0x80)
        goto loc_1c135b;
    ah = dh;
loc_1c135b: // 0160:1c135b
    memoryASet16(ds, edi + 60, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c13c1;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1398;
    if (dl & 0x80)
        goto loc_1c1391;
    al = dl;
loc_1c1391: // 0160:1c1391
    if (dh & 0x80)
        goto loc_1c1398;
    ah = dh;
loc_1c1398: // 0160:1c1398
    if (!(ax & 0x8080))
        goto loc_1c13c1;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c13c1;
    if (dl & 0x80)
        goto loc_1c13ba;
    al = dl;
loc_1c13ba: // 0160:1c13ba
    if (dh & 0x80)
        goto loc_1c13c1;
    ah = dh;
loc_1c13c1: // 0160:1c13c1
    memoryASet16(ds, edi + 62, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1427;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c13fe;
    if (dl & 0x80)
        goto loc_1c13f7;
    al = dl;
loc_1c13f7: // 0160:1c13f7
    if (dh & 0x80)
        goto loc_1c13fe;
    ah = dh;
loc_1c13fe: // 0160:1c13fe
    if (!(ax & 0x8080))
        goto loc_1c1427;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1427;
    if (dl & 0x80)
        goto loc_1c1420;
    al = dl;
loc_1c1420: // 0160:1c1420
    if (dh & 0x80)
        goto loc_1c1427;
    ah = dh;
loc_1c1427: // 0160:1c1427
    memoryASet16(ds, edi + 64, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c148d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1464;
    if (dl & 0x80)
        goto loc_1c145d;
    al = dl;
loc_1c145d: // 0160:1c145d
    if (dh & 0x80)
        goto loc_1c1464;
    ah = dh;
loc_1c1464: // 0160:1c1464
    if (!(ax & 0x8080))
        goto loc_1c148d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c148d;
    if (dl & 0x80)
        goto loc_1c1486;
    al = dl;
loc_1c1486: // 0160:1c1486
    if (dh & 0x80)
        goto loc_1c148d;
    ah = dh;
loc_1c148d: // 0160:1c148d
    memoryASet16(ds, edi + 66, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c14f3;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c14ca;
    if (dl & 0x80)
        goto loc_1c14c3;
    al = dl;
loc_1c14c3: // 0160:1c14c3
    if (dh & 0x80)
        goto loc_1c14ca;
    ah = dh;
loc_1c14ca: // 0160:1c14ca
    if (!(ax & 0x8080))
        goto loc_1c14f3;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c14f3;
    if (dl & 0x80)
        goto loc_1c14ec;
    al = dl;
loc_1c14ec: // 0160:1c14ec
    if (dh & 0x80)
        goto loc_1c14f3;
    ah = dh;
loc_1c14f3: // 0160:1c14f3
    memoryASet16(ds, edi + 68, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1559;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1530;
    if (dl & 0x80)
        goto loc_1c1529;
    al = dl;
loc_1c1529: // 0160:1c1529
    if (dh & 0x80)
        goto loc_1c1530;
    ah = dh;
loc_1c1530: // 0160:1c1530
    if (!(ax & 0x8080))
        goto loc_1c1559;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1559;
    if (dl & 0x80)
        goto loc_1c1552;
    al = dl;
loc_1c1552: // 0160:1c1552
    if (dh & 0x80)
        goto loc_1c1559;
    ah = dh;
loc_1c1559: // 0160:1c1559
    memoryASet16(ds, edi + 70, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c15bf;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1596;
    if (dl & 0x80)
        goto loc_1c158f;
    al = dl;
loc_1c158f: // 0160:1c158f
    if (dh & 0x80)
        goto loc_1c1596;
    ah = dh;
loc_1c1596: // 0160:1c1596
    if (!(ax & 0x8080))
        goto loc_1c15bf;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c15bf;
    if (dl & 0x80)
        goto loc_1c15b8;
    al = dl;
loc_1c15b8: // 0160:1c15b8
    if (dh & 0x80)
        goto loc_1c15bf;
    ah = dh;
loc_1c15bf: // 0160:1c15bf
    memoryASet16(ds, edi + 72, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1625;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c15fc;
    if (dl & 0x80)
        goto loc_1c15f5;
    al = dl;
loc_1c15f5: // 0160:1c15f5
    if (dh & 0x80)
        goto loc_1c15fc;
    ah = dh;
loc_1c15fc: // 0160:1c15fc
    if (!(ax & 0x8080))
        goto loc_1c1625;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1625;
    if (dl & 0x80)
        goto loc_1c161e;
    al = dl;
loc_1c161e: // 0160:1c161e
    if (dh & 0x80)
        goto loc_1c1625;
    ah = dh;
loc_1c1625: // 0160:1c1625
    memoryASet16(ds, edi + 74, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c168b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1662;
    if (dl & 0x80)
        goto loc_1c165b;
    al = dl;
loc_1c165b: // 0160:1c165b
    if (dh & 0x80)
        goto loc_1c1662;
    ah = dh;
loc_1c1662: // 0160:1c1662
    if (!(ax & 0x8080))
        goto loc_1c168b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c168b;
    if (dl & 0x80)
        goto loc_1c1684;
    al = dl;
loc_1c1684: // 0160:1c1684
    if (dh & 0x80)
        goto loc_1c168b;
    ah = dh;
loc_1c168b: // 0160:1c168b
    memoryASet16(ds, edi + 76, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c16f1;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c16c8;
    if (dl & 0x80)
        goto loc_1c16c1;
    al = dl;
loc_1c16c1: // 0160:1c16c1
    if (dh & 0x80)
        goto loc_1c16c8;
    ah = dh;
loc_1c16c8: // 0160:1c16c8
    if (!(ax & 0x8080))
        goto loc_1c16f1;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c16f1;
    if (dl & 0x80)
        goto loc_1c16ea;
    al = dl;
loc_1c16ea: // 0160:1c16ea
    if (dh & 0x80)
        goto loc_1c16f1;
    ah = dh;
loc_1c16f1: // 0160:1c16f1
    memoryASet16(ds, edi + 78, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1757;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c172e;
    if (dl & 0x80)
        goto loc_1c1727;
    al = dl;
loc_1c1727: // 0160:1c1727
    if (dh & 0x80)
        goto loc_1c172e;
    ah = dh;
loc_1c172e: // 0160:1c172e
    if (!(ax & 0x8080))
        goto loc_1c1757;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1757;
    if (dl & 0x80)
        goto loc_1c1750;
    al = dl;
loc_1c1750: // 0160:1c1750
    if (dh & 0x80)
        goto loc_1c1757;
    ah = dh;
loc_1c1757: // 0160:1c1757
    memoryASet16(ds, edi + 80, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c17bd;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1794;
    if (dl & 0x80)
        goto loc_1c178d;
    al = dl;
loc_1c178d: // 0160:1c178d
    if (dh & 0x80)
        goto loc_1c1794;
    ah = dh;
loc_1c1794: // 0160:1c1794
    if (!(ax & 0x8080))
        goto loc_1c17bd;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c17bd;
    if (dl & 0x80)
        goto loc_1c17b6;
    al = dl;
loc_1c17b6: // 0160:1c17b6
    if (dh & 0x80)
        goto loc_1c17bd;
    ah = dh;
loc_1c17bd: // 0160:1c17bd
    memoryASet16(ds, edi + 82, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1823;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c17fa;
    if (dl & 0x80)
        goto loc_1c17f3;
    al = dl;
loc_1c17f3: // 0160:1c17f3
    if (dh & 0x80)
        goto loc_1c17fa;
    ah = dh;
loc_1c17fa: // 0160:1c17fa
    if (!(ax & 0x8080))
        goto loc_1c1823;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1823;
    if (dl & 0x80)
        goto loc_1c181c;
    al = dl;
loc_1c181c: // 0160:1c181c
    if (dh & 0x80)
        goto loc_1c1823;
    ah = dh;
loc_1c1823: // 0160:1c1823
    memoryASet16(ds, edi + 84, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1889;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1860;
    if (dl & 0x80)
        goto loc_1c1859;
    al = dl;
loc_1c1859: // 0160:1c1859
    if (dh & 0x80)
        goto loc_1c1860;
    ah = dh;
loc_1c1860: // 0160:1c1860
    if (!(ax & 0x8080))
        goto loc_1c1889;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1889;
    if (dl & 0x80)
        goto loc_1c1882;
    al = dl;
loc_1c1882: // 0160:1c1882
    if (dh & 0x80)
        goto loc_1c1889;
    ah = dh;
loc_1c1889: // 0160:1c1889
    memoryASet16(ds, edi + 86, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c18ef;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c18c6;
    if (dl & 0x80)
        goto loc_1c18bf;
    al = dl;
loc_1c18bf: // 0160:1c18bf
    if (dh & 0x80)
        goto loc_1c18c6;
    ah = dh;
loc_1c18c6: // 0160:1c18c6
    if (!(ax & 0x8080))
        goto loc_1c18ef;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c18ef;
    if (dl & 0x80)
        goto loc_1c18e8;
    al = dl;
loc_1c18e8: // 0160:1c18e8
    if (dh & 0x80)
        goto loc_1c18ef;
    ah = dh;
loc_1c18ef: // 0160:1c18ef
    memoryASet16(ds, edi + 88, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1955;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c192c;
    if (dl & 0x80)
        goto loc_1c1925;
    al = dl;
loc_1c1925: // 0160:1c1925
    if (dh & 0x80)
        goto loc_1c192c;
    ah = dh;
loc_1c192c: // 0160:1c192c
    if (!(ax & 0x8080))
        goto loc_1c1955;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1955;
    if (dl & 0x80)
        goto loc_1c194e;
    al = dl;
loc_1c194e: // 0160:1c194e
    if (dh & 0x80)
        goto loc_1c1955;
    ah = dh;
loc_1c1955: // 0160:1c1955
    memoryASet16(ds, edi + 90, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c19bb;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1992;
    if (dl & 0x80)
        goto loc_1c198b;
    al = dl;
loc_1c198b: // 0160:1c198b
    if (dh & 0x80)
        goto loc_1c1992;
    ah = dh;
loc_1c1992: // 0160:1c1992
    if (!(ax & 0x8080))
        goto loc_1c19bb;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c19bb;
    if (dl & 0x80)
        goto loc_1c19b4;
    al = dl;
loc_1c19b4: // 0160:1c19b4
    if (dh & 0x80)
        goto loc_1c19bb;
    ah = dh;
loc_1c19bb: // 0160:1c19bb
    memoryASet16(ds, edi + 92, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1a21;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c19f8;
    if (dl & 0x80)
        goto loc_1c19f1;
    al = dl;
loc_1c19f1: // 0160:1c19f1
    if (dh & 0x80)
        goto loc_1c19f8;
    ah = dh;
loc_1c19f8: // 0160:1c19f8
    if (!(ax & 0x8080))
        goto loc_1c1a21;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1a21;
    if (dl & 0x80)
        goto loc_1c1a1a;
    al = dl;
loc_1c1a1a: // 0160:1c1a1a
    if (dh & 0x80)
        goto loc_1c1a21;
    ah = dh;
loc_1c1a21: // 0160:1c1a21
    memoryASet16(ds, edi + 94, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1a87;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1a5e;
    if (dl & 0x80)
        goto loc_1c1a57;
    al = dl;
loc_1c1a57: // 0160:1c1a57
    if (dh & 0x80)
        goto loc_1c1a5e;
    ah = dh;
loc_1c1a5e: // 0160:1c1a5e
    if (!(ax & 0x8080))
        goto loc_1c1a87;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1a87;
    if (dl & 0x80)
        goto loc_1c1a80;
    al = dl;
loc_1c1a80: // 0160:1c1a80
    if (dh & 0x80)
        goto loc_1c1a87;
    ah = dh;
loc_1c1a87: // 0160:1c1a87
    memoryASet16(ds, edi + 96, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1aed;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1ac4;
    if (dl & 0x80)
        goto loc_1c1abd;
    al = dl;
loc_1c1abd: // 0160:1c1abd
    if (dh & 0x80)
        goto loc_1c1ac4;
    ah = dh;
loc_1c1ac4: // 0160:1c1ac4
    if (!(ax & 0x8080))
        goto loc_1c1aed;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1aed;
    if (dl & 0x80)
        goto loc_1c1ae6;
    al = dl;
loc_1c1ae6: // 0160:1c1ae6
    if (dh & 0x80)
        goto loc_1c1aed;
    ah = dh;
loc_1c1aed: // 0160:1c1aed
    memoryASet16(ds, edi + 98, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1b53;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1b2a;
    if (dl & 0x80)
        goto loc_1c1b23;
    al = dl;
loc_1c1b23: // 0160:1c1b23
    if (dh & 0x80)
        goto loc_1c1b2a;
    ah = dh;
loc_1c1b2a: // 0160:1c1b2a
    if (!(ax & 0x8080))
        goto loc_1c1b53;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1b53;
    if (dl & 0x80)
        goto loc_1c1b4c;
    al = dl;
loc_1c1b4c: // 0160:1c1b4c
    if (dh & 0x80)
        goto loc_1c1b53;
    ah = dh;
loc_1c1b53: // 0160:1c1b53
    memoryASet16(ds, edi + 100, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1bb9;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1b90;
    if (dl & 0x80)
        goto loc_1c1b89;
    al = dl;
loc_1c1b89: // 0160:1c1b89
    if (dh & 0x80)
        goto loc_1c1b90;
    ah = dh;
loc_1c1b90: // 0160:1c1b90
    if (!(ax & 0x8080))
        goto loc_1c1bb9;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1bb9;
    if (dl & 0x80)
        goto loc_1c1bb2;
    al = dl;
loc_1c1bb2: // 0160:1c1bb2
    if (dh & 0x80)
        goto loc_1c1bb9;
    ah = dh;
loc_1c1bb9: // 0160:1c1bb9
    memoryASet16(ds, edi + 102, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1c1f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1bf6;
    if (dl & 0x80)
        goto loc_1c1bef;
    al = dl;
loc_1c1bef: // 0160:1c1bef
    if (dh & 0x80)
        goto loc_1c1bf6;
    ah = dh;
loc_1c1bf6: // 0160:1c1bf6
    if (!(ax & 0x8080))
        goto loc_1c1c1f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1c1f;
    if (dl & 0x80)
        goto loc_1c1c18;
    al = dl;
loc_1c1c18: // 0160:1c1c18
    if (dh & 0x80)
        goto loc_1c1c1f;
    ah = dh;
loc_1c1c1f: // 0160:1c1c1f
    memoryASet16(ds, edi + 104, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1c85;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1c5c;
    if (dl & 0x80)
        goto loc_1c1c55;
    al = dl;
loc_1c1c55: // 0160:1c1c55
    if (dh & 0x80)
        goto loc_1c1c5c;
    ah = dh;
loc_1c1c5c: // 0160:1c1c5c
    if (!(ax & 0x8080))
        goto loc_1c1c85;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1c85;
    if (dl & 0x80)
        goto loc_1c1c7e;
    al = dl;
loc_1c1c7e: // 0160:1c1c7e
    if (dh & 0x80)
        goto loc_1c1c85;
    ah = dh;
loc_1c1c85: // 0160:1c1c85
    memoryASet16(ds, edi + 106, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1ceb;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1cc2;
    if (dl & 0x80)
        goto loc_1c1cbb;
    al = dl;
loc_1c1cbb: // 0160:1c1cbb
    if (dh & 0x80)
        goto loc_1c1cc2;
    ah = dh;
loc_1c1cc2: // 0160:1c1cc2
    if (!(ax & 0x8080))
        goto loc_1c1ceb;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1ceb;
    if (dl & 0x80)
        goto loc_1c1ce4;
    al = dl;
loc_1c1ce4: // 0160:1c1ce4
    if (dh & 0x80)
        goto loc_1c1ceb;
    ah = dh;
loc_1c1ceb: // 0160:1c1ceb
    memoryASet16(ds, edi + 108, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1d51;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1d28;
    if (dl & 0x80)
        goto loc_1c1d21;
    al = dl;
loc_1c1d21: // 0160:1c1d21
    if (dh & 0x80)
        goto loc_1c1d28;
    ah = dh;
loc_1c1d28: // 0160:1c1d28
    if (!(ax & 0x8080))
        goto loc_1c1d51;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1d51;
    if (dl & 0x80)
        goto loc_1c1d4a;
    al = dl;
loc_1c1d4a: // 0160:1c1d4a
    if (dh & 0x80)
        goto loc_1c1d51;
    ah = dh;
loc_1c1d51: // 0160:1c1d51
    memoryASet16(ds, edi + 110, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1db7;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1d8e;
    if (dl & 0x80)
        goto loc_1c1d87;
    al = dl;
loc_1c1d87: // 0160:1c1d87
    if (dh & 0x80)
        goto loc_1c1d8e;
    ah = dh;
loc_1c1d8e: // 0160:1c1d8e
    if (!(ax & 0x8080))
        goto loc_1c1db7;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1db7;
    if (dl & 0x80)
        goto loc_1c1db0;
    al = dl;
loc_1c1db0: // 0160:1c1db0
    if (dh & 0x80)
        goto loc_1c1db7;
    ah = dh;
loc_1c1db7: // 0160:1c1db7
    memoryASet16(ds, edi + 112, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1e1d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1df4;
    if (dl & 0x80)
        goto loc_1c1ded;
    al = dl;
loc_1c1ded: // 0160:1c1ded
    if (dh & 0x80)
        goto loc_1c1df4;
    ah = dh;
loc_1c1df4: // 0160:1c1df4
    if (!(ax & 0x8080))
        goto loc_1c1e1d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1e1d;
    if (dl & 0x80)
        goto loc_1c1e16;
    al = dl;
loc_1c1e16: // 0160:1c1e16
    if (dh & 0x80)
        goto loc_1c1e1d;
    ah = dh;
loc_1c1e1d: // 0160:1c1e1d
    memoryASet16(ds, edi + 114, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1e83;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1e5a;
    if (dl & 0x80)
        goto loc_1c1e53;
    al = dl;
loc_1c1e53: // 0160:1c1e53
    if (dh & 0x80)
        goto loc_1c1e5a;
    ah = dh;
loc_1c1e5a: // 0160:1c1e5a
    if (!(ax & 0x8080))
        goto loc_1c1e83;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1e83;
    if (dl & 0x80)
        goto loc_1c1e7c;
    al = dl;
loc_1c1e7c: // 0160:1c1e7c
    if (dh & 0x80)
        goto loc_1c1e83;
    ah = dh;
loc_1c1e83: // 0160:1c1e83
    memoryASet16(ds, edi + 116, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1ee9;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1ec0;
    if (dl & 0x80)
        goto loc_1c1eb9;
    al = dl;
loc_1c1eb9: // 0160:1c1eb9
    if (dh & 0x80)
        goto loc_1c1ec0;
    ah = dh;
loc_1c1ec0: // 0160:1c1ec0
    if (!(ax & 0x8080))
        goto loc_1c1ee9;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1ee9;
    if (dl & 0x80)
        goto loc_1c1ee2;
    al = dl;
loc_1c1ee2: // 0160:1c1ee2
    if (dh & 0x80)
        goto loc_1c1ee9;
    ah = dh;
loc_1c1ee9: // 0160:1c1ee9
    memoryASet16(ds, edi + 118, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1f4f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1f26;
    if (dl & 0x80)
        goto loc_1c1f1f;
    al = dl;
loc_1c1f1f: // 0160:1c1f1f
    if (dh & 0x80)
        goto loc_1c1f26;
    ah = dh;
loc_1c1f26: // 0160:1c1f26
    if (!(ax & 0x8080))
        goto loc_1c1f4f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1f4f;
    if (dl & 0x80)
        goto loc_1c1f48;
    al = dl;
loc_1c1f48: // 0160:1c1f48
    if (dh & 0x80)
        goto loc_1c1f4f;
    ah = dh;
loc_1c1f4f: // 0160:1c1f4f
    memoryASet16(ds, edi + 120, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c1fb5;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1f8c;
    if (dl & 0x80)
        goto loc_1c1f85;
    al = dl;
loc_1c1f85: // 0160:1c1f85
    if (dh & 0x80)
        goto loc_1c1f8c;
    ah = dh;
loc_1c1f8c: // 0160:1c1f8c
    if (!(ax & 0x8080))
        goto loc_1c1fb5;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1fb5;
    if (dl & 0x80)
        goto loc_1c1fae;
    al = dl;
loc_1c1fae: // 0160:1c1fae
    if (dh & 0x80)
        goto loc_1c1fb5;
    ah = dh;
loc_1c1fb5: // 0160:1c1fb5
    memoryASet16(ds, edi + 122, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c201b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c1ff2;
    if (dl & 0x80)
        goto loc_1c1feb;
    al = dl;
loc_1c1feb: // 0160:1c1feb
    if (dh & 0x80)
        goto loc_1c1ff2;
    ah = dh;
loc_1c1ff2: // 0160:1c1ff2
    if (!(ax & 0x8080))
        goto loc_1c201b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c201b;
    if (dl & 0x80)
        goto loc_1c2014;
    al = dl;
loc_1c2014: // 0160:1c2014
    if (dh & 0x80)
        goto loc_1c201b;
    ah = dh;
loc_1c201b: // 0160:1c201b
    memoryASet16(ds, edi + 124, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2081;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2058;
    if (dl & 0x80)
        goto loc_1c2051;
    al = dl;
loc_1c2051: // 0160:1c2051
    if (dh & 0x80)
        goto loc_1c2058;
    ah = dh;
loc_1c2058: // 0160:1c2058
    if (!(ax & 0x8080))
        goto loc_1c2081;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2081;
    if (dl & 0x80)
        goto loc_1c207a;
    al = dl;
loc_1c207a: // 0160:1c207a
    if (dh & 0x80)
        goto loc_1c2081;
    ah = dh;
loc_1c2081: // 0160:1c2081
    memoryASet16(ds, edi + 126, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c20e7;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c20be;
    if (dl & 0x80)
        goto loc_1c20b7;
    al = dl;
loc_1c20b7: // 0160:1c20b7
    if (dh & 0x80)
        goto loc_1c20be;
    ah = dh;
loc_1c20be: // 0160:1c20be
    if (!(ax & 0x8080))
        goto loc_1c20e7;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c20e7;
    if (dl & 0x80)
        goto loc_1c20e0;
    al = dl;
loc_1c20e0: // 0160:1c20e0
    if (dh & 0x80)
        goto loc_1c20e7;
    ah = dh;
loc_1c20e7: // 0160:1c20e7
    memoryASet16(ds, edi + 128, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c214d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2124;
    if (dl & 0x80)
        goto loc_1c211d;
    al = dl;
loc_1c211d: // 0160:1c211d
    if (dh & 0x80)
        goto loc_1c2124;
    ah = dh;
loc_1c2124: // 0160:1c2124
    if (!(ax & 0x8080))
        goto loc_1c214d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c214d;
    if (dl & 0x80)
        goto loc_1c2146;
    al = dl;
loc_1c2146: // 0160:1c2146
    if (dh & 0x80)
        goto loc_1c214d;
    ah = dh;
loc_1c214d: // 0160:1c214d
    memoryASet16(ds, edi + 130, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c21b3;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c218a;
    if (dl & 0x80)
        goto loc_1c2183;
    al = dl;
loc_1c2183: // 0160:1c2183
    if (dh & 0x80)
        goto loc_1c218a;
    ah = dh;
loc_1c218a: // 0160:1c218a
    if (!(ax & 0x8080))
        goto loc_1c21b3;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c21b3;
    if (dl & 0x80)
        goto loc_1c21ac;
    al = dl;
loc_1c21ac: // 0160:1c21ac
    if (dh & 0x80)
        goto loc_1c21b3;
    ah = dh;
loc_1c21b3: // 0160:1c21b3
    memoryASet16(ds, edi + 132, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2219;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c21f0;
    if (dl & 0x80)
        goto loc_1c21e9;
    al = dl;
loc_1c21e9: // 0160:1c21e9
    if (dh & 0x80)
        goto loc_1c21f0;
    ah = dh;
loc_1c21f0: // 0160:1c21f0
    if (!(ax & 0x8080))
        goto loc_1c2219;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2219;
    if (dl & 0x80)
        goto loc_1c2212;
    al = dl;
loc_1c2212: // 0160:1c2212
    if (dh & 0x80)
        goto loc_1c2219;
    ah = dh;
loc_1c2219: // 0160:1c2219
    memoryASet16(ds, edi + 134, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c227f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2256;
    if (dl & 0x80)
        goto loc_1c224f;
    al = dl;
loc_1c224f: // 0160:1c224f
    if (dh & 0x80)
        goto loc_1c2256;
    ah = dh;
loc_1c2256: // 0160:1c2256
    if (!(ax & 0x8080))
        goto loc_1c227f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c227f;
    if (dl & 0x80)
        goto loc_1c2278;
    al = dl;
loc_1c2278: // 0160:1c2278
    if (dh & 0x80)
        goto loc_1c227f;
    ah = dh;
loc_1c227f: // 0160:1c227f
    memoryASet16(ds, edi + 136, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c22e5;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c22bc;
    if (dl & 0x80)
        goto loc_1c22b5;
    al = dl;
loc_1c22b5: // 0160:1c22b5
    if (dh & 0x80)
        goto loc_1c22bc;
    ah = dh;
loc_1c22bc: // 0160:1c22bc
    if (!(ax & 0x8080))
        goto loc_1c22e5;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c22e5;
    if (dl & 0x80)
        goto loc_1c22de;
    al = dl;
loc_1c22de: // 0160:1c22de
    if (dh & 0x80)
        goto loc_1c22e5;
    ah = dh;
loc_1c22e5: // 0160:1c22e5
    memoryASet16(ds, edi + 138, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c234b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2322;
    if (dl & 0x80)
        goto loc_1c231b;
    al = dl;
loc_1c231b: // 0160:1c231b
    if (dh & 0x80)
        goto loc_1c2322;
    ah = dh;
loc_1c2322: // 0160:1c2322
    if (!(ax & 0x8080))
        goto loc_1c234b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c234b;
    if (dl & 0x80)
        goto loc_1c2344;
    al = dl;
loc_1c2344: // 0160:1c2344
    if (dh & 0x80)
        goto loc_1c234b;
    ah = dh;
loc_1c234b: // 0160:1c234b
    memoryASet16(ds, edi + 140, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c23b1;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2388;
    if (dl & 0x80)
        goto loc_1c2381;
    al = dl;
loc_1c2381: // 0160:1c2381
    if (dh & 0x80)
        goto loc_1c2388;
    ah = dh;
loc_1c2388: // 0160:1c2388
    if (!(ax & 0x8080))
        goto loc_1c23b1;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c23b1;
    if (dl & 0x80)
        goto loc_1c23aa;
    al = dl;
loc_1c23aa: // 0160:1c23aa
    if (dh & 0x80)
        goto loc_1c23b1;
    ah = dh;
loc_1c23b1: // 0160:1c23b1
    memoryASet16(ds, edi + 142, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2417;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c23ee;
    if (dl & 0x80)
        goto loc_1c23e7;
    al = dl;
loc_1c23e7: // 0160:1c23e7
    if (dh & 0x80)
        goto loc_1c23ee;
    ah = dh;
loc_1c23ee: // 0160:1c23ee
    if (!(ax & 0x8080))
        goto loc_1c2417;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2417;
    if (dl & 0x80)
        goto loc_1c2410;
    al = dl;
loc_1c2410: // 0160:1c2410
    if (dh & 0x80)
        goto loc_1c2417;
    ah = dh;
loc_1c2417: // 0160:1c2417
    memoryASet16(ds, edi + 144, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c247d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2454;
    if (dl & 0x80)
        goto loc_1c244d;
    al = dl;
loc_1c244d: // 0160:1c244d
    if (dh & 0x80)
        goto loc_1c2454;
    ah = dh;
loc_1c2454: // 0160:1c2454
    if (!(ax & 0x8080))
        goto loc_1c247d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c247d;
    if (dl & 0x80)
        goto loc_1c2476;
    al = dl;
loc_1c2476: // 0160:1c2476
    if (dh & 0x80)
        goto loc_1c247d;
    ah = dh;
loc_1c247d: // 0160:1c247d
    memoryASet16(ds, edi + 146, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c24e3;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c24ba;
    if (dl & 0x80)
        goto loc_1c24b3;
    al = dl;
loc_1c24b3: // 0160:1c24b3
    if (dh & 0x80)
        goto loc_1c24ba;
    ah = dh;
loc_1c24ba: // 0160:1c24ba
    if (!(ax & 0x8080))
        goto loc_1c24e3;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c24e3;
    if (dl & 0x80)
        goto loc_1c24dc;
    al = dl;
loc_1c24dc: // 0160:1c24dc
    if (dh & 0x80)
        goto loc_1c24e3;
    ah = dh;
loc_1c24e3: // 0160:1c24e3
    memoryASet16(ds, edi + 148, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2549;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2520;
    if (dl & 0x80)
        goto loc_1c2519;
    al = dl;
loc_1c2519: // 0160:1c2519
    if (dh & 0x80)
        goto loc_1c2520;
    ah = dh;
loc_1c2520: // 0160:1c2520
    if (!(ax & 0x8080))
        goto loc_1c2549;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2549;
    if (dl & 0x80)
        goto loc_1c2542;
    al = dl;
loc_1c2542: // 0160:1c2542
    if (dh & 0x80)
        goto loc_1c2549;
    ah = dh;
loc_1c2549: // 0160:1c2549
    memoryASet16(ds, edi + 150, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c25af;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2586;
    if (dl & 0x80)
        goto loc_1c257f;
    al = dl;
loc_1c257f: // 0160:1c257f
    if (dh & 0x80)
        goto loc_1c2586;
    ah = dh;
loc_1c2586: // 0160:1c2586
    if (!(ax & 0x8080))
        goto loc_1c25af;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c25af;
    if (dl & 0x80)
        goto loc_1c25a8;
    al = dl;
loc_1c25a8: // 0160:1c25a8
    if (dh & 0x80)
        goto loc_1c25af;
    ah = dh;
loc_1c25af: // 0160:1c25af
    memoryASet16(ds, edi + 152, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2615;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c25ec;
    if (dl & 0x80)
        goto loc_1c25e5;
    al = dl;
loc_1c25e5: // 0160:1c25e5
    if (dh & 0x80)
        goto loc_1c25ec;
    ah = dh;
loc_1c25ec: // 0160:1c25ec
    if (!(ax & 0x8080))
        goto loc_1c2615;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2615;
    if (dl & 0x80)
        goto loc_1c260e;
    al = dl;
loc_1c260e: // 0160:1c260e
    if (dh & 0x80)
        goto loc_1c2615;
    ah = dh;
loc_1c2615: // 0160:1c2615
    memoryASet16(ds, edi + 154, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c267b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2652;
    if (dl & 0x80)
        goto loc_1c264b;
    al = dl;
loc_1c264b: // 0160:1c264b
    if (dh & 0x80)
        goto loc_1c2652;
    ah = dh;
loc_1c2652: // 0160:1c2652
    if (!(ax & 0x8080))
        goto loc_1c267b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c267b;
    if (dl & 0x80)
        goto loc_1c2674;
    al = dl;
loc_1c2674: // 0160:1c2674
    if (dh & 0x80)
        goto loc_1c267b;
    ah = dh;
loc_1c267b: // 0160:1c267b
    memoryASet16(ds, edi + 156, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c26e1;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c26b8;
    if (dl & 0x80)
        goto loc_1c26b1;
    al = dl;
loc_1c26b1: // 0160:1c26b1
    if (dh & 0x80)
        goto loc_1c26b8;
    ah = dh;
loc_1c26b8: // 0160:1c26b8
    if (!(ax & 0x8080))
        goto loc_1c26e1;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c26e1;
    if (dl & 0x80)
        goto loc_1c26da;
    al = dl;
loc_1c26da: // 0160:1c26da
    if (dh & 0x80)
        goto loc_1c26e1;
    ah = dh;
loc_1c26e1: // 0160:1c26e1
    memoryASet16(ds, edi + 158, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2747;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c271e;
    if (dl & 0x80)
        goto loc_1c2717;
    al = dl;
loc_1c2717: // 0160:1c2717
    if (dh & 0x80)
        goto loc_1c271e;
    ah = dh;
loc_1c271e: // 0160:1c271e
    if (!(ax & 0x8080))
        goto loc_1c2747;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2747;
    if (dl & 0x80)
        goto loc_1c2740;
    al = dl;
loc_1c2740: // 0160:1c2740
    if (dh & 0x80)
        goto loc_1c2747;
    ah = dh;
loc_1c2747: // 0160:1c2747
    memoryASet16(ds, edi + 160, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c27ad;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2784;
    if (dl & 0x80)
        goto loc_1c277d;
    al = dl;
loc_1c277d: // 0160:1c277d
    if (dh & 0x80)
        goto loc_1c2784;
    ah = dh;
loc_1c2784: // 0160:1c2784
    if (!(ax & 0x8080))
        goto loc_1c27ad;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c27ad;
    if (dl & 0x80)
        goto loc_1c27a6;
    al = dl;
loc_1c27a6: // 0160:1c27a6
    if (dh & 0x80)
        goto loc_1c27ad;
    ah = dh;
loc_1c27ad: // 0160:1c27ad
    memoryASet16(ds, edi + 162, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2813;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c27ea;
    if (dl & 0x80)
        goto loc_1c27e3;
    al = dl;
loc_1c27e3: // 0160:1c27e3
    if (dh & 0x80)
        goto loc_1c27ea;
    ah = dh;
loc_1c27ea: // 0160:1c27ea
    if (!(ax & 0x8080))
        goto loc_1c2813;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2813;
    if (dl & 0x80)
        goto loc_1c280c;
    al = dl;
loc_1c280c: // 0160:1c280c
    if (dh & 0x80)
        goto loc_1c2813;
    ah = dh;
loc_1c2813: // 0160:1c2813
    memoryASet16(ds, edi + 164, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2879;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2850;
    if (dl & 0x80)
        goto loc_1c2849;
    al = dl;
loc_1c2849: // 0160:1c2849
    if (dh & 0x80)
        goto loc_1c2850;
    ah = dh;
loc_1c2850: // 0160:1c2850
    if (!(ax & 0x8080))
        goto loc_1c2879;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2879;
    if (dl & 0x80)
        goto loc_1c2872;
    al = dl;
loc_1c2872: // 0160:1c2872
    if (dh & 0x80)
        goto loc_1c2879;
    ah = dh;
loc_1c2879: // 0160:1c2879
    memoryASet16(ds, edi + 166, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c28df;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c28b6;
    if (dl & 0x80)
        goto loc_1c28af;
    al = dl;
loc_1c28af: // 0160:1c28af
    if (dh & 0x80)
        goto loc_1c28b6;
    ah = dh;
loc_1c28b6: // 0160:1c28b6
    if (!(ax & 0x8080))
        goto loc_1c28df;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c28df;
    if (dl & 0x80)
        goto loc_1c28d8;
    al = dl;
loc_1c28d8: // 0160:1c28d8
    if (dh & 0x80)
        goto loc_1c28df;
    ah = dh;
loc_1c28df: // 0160:1c28df
    memoryASet16(ds, edi + 168, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2945;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c291c;
    if (dl & 0x80)
        goto loc_1c2915;
    al = dl;
loc_1c2915: // 0160:1c2915
    if (dh & 0x80)
        goto loc_1c291c;
    ah = dh;
loc_1c291c: // 0160:1c291c
    if (!(ax & 0x8080))
        goto loc_1c2945;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2945;
    if (dl & 0x80)
        goto loc_1c293e;
    al = dl;
loc_1c293e: // 0160:1c293e
    if (dh & 0x80)
        goto loc_1c2945;
    ah = dh;
loc_1c2945: // 0160:1c2945
    memoryASet16(ds, edi + 170, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c29ab;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2982;
    if (dl & 0x80)
        goto loc_1c297b;
    al = dl;
loc_1c297b: // 0160:1c297b
    if (dh & 0x80)
        goto loc_1c2982;
    ah = dh;
loc_1c2982: // 0160:1c2982
    if (!(ax & 0x8080))
        goto loc_1c29ab;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c29ab;
    if (dl & 0x80)
        goto loc_1c29a4;
    al = dl;
loc_1c29a4: // 0160:1c29a4
    if (dh & 0x80)
        goto loc_1c29ab;
    ah = dh;
loc_1c29ab: // 0160:1c29ab
    memoryASet16(ds, edi + 172, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2a11;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c29e8;
    if (dl & 0x80)
        goto loc_1c29e1;
    al = dl;
loc_1c29e1: // 0160:1c29e1
    if (dh & 0x80)
        goto loc_1c29e8;
    ah = dh;
loc_1c29e8: // 0160:1c29e8
    if (!(ax & 0x8080))
        goto loc_1c2a11;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2a11;
    if (dl & 0x80)
        goto loc_1c2a0a;
    al = dl;
loc_1c2a0a: // 0160:1c2a0a
    if (dh & 0x80)
        goto loc_1c2a11;
    ah = dh;
loc_1c2a11: // 0160:1c2a11
    memoryASet16(ds, edi + 174, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2a77;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2a4e;
    if (dl & 0x80)
        goto loc_1c2a47;
    al = dl;
loc_1c2a47: // 0160:1c2a47
    if (dh & 0x80)
        goto loc_1c2a4e;
    ah = dh;
loc_1c2a4e: // 0160:1c2a4e
    if (!(ax & 0x8080))
        goto loc_1c2a77;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2a77;
    if (dl & 0x80)
        goto loc_1c2a70;
    al = dl;
loc_1c2a70: // 0160:1c2a70
    if (dh & 0x80)
        goto loc_1c2a77;
    ah = dh;
loc_1c2a77: // 0160:1c2a77
    memoryASet16(ds, edi + 176, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2add;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2ab4;
    if (dl & 0x80)
        goto loc_1c2aad;
    al = dl;
loc_1c2aad: // 0160:1c2aad
    if (dh & 0x80)
        goto loc_1c2ab4;
    ah = dh;
loc_1c2ab4: // 0160:1c2ab4
    if (!(ax & 0x8080))
        goto loc_1c2add;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2add;
    if (dl & 0x80)
        goto loc_1c2ad6;
    al = dl;
loc_1c2ad6: // 0160:1c2ad6
    if (dh & 0x80)
        goto loc_1c2add;
    ah = dh;
loc_1c2add: // 0160:1c2add
    memoryASet16(ds, edi + 178, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2b43;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2b1a;
    if (dl & 0x80)
        goto loc_1c2b13;
    al = dl;
loc_1c2b13: // 0160:1c2b13
    if (dh & 0x80)
        goto loc_1c2b1a;
    ah = dh;
loc_1c2b1a: // 0160:1c2b1a
    if (!(ax & 0x8080))
        goto loc_1c2b43;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2b43;
    if (dl & 0x80)
        goto loc_1c2b3c;
    al = dl;
loc_1c2b3c: // 0160:1c2b3c
    if (dh & 0x80)
        goto loc_1c2b43;
    ah = dh;
loc_1c2b43: // 0160:1c2b43
    memoryASet16(ds, edi + 180, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2ba9;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2b80;
    if (dl & 0x80)
        goto loc_1c2b79;
    al = dl;
loc_1c2b79: // 0160:1c2b79
    if (dh & 0x80)
        goto loc_1c2b80;
    ah = dh;
loc_1c2b80: // 0160:1c2b80
    if (!(ax & 0x8080))
        goto loc_1c2ba9;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2ba9;
    if (dl & 0x80)
        goto loc_1c2ba2;
    al = dl;
loc_1c2ba2: // 0160:1c2ba2
    if (dh & 0x80)
        goto loc_1c2ba9;
    ah = dh;
loc_1c2ba9: // 0160:1c2ba9
    memoryASet16(ds, edi + 182, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2c0f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2be6;
    if (dl & 0x80)
        goto loc_1c2bdf;
    al = dl;
loc_1c2bdf: // 0160:1c2bdf
    if (dh & 0x80)
        goto loc_1c2be6;
    ah = dh;
loc_1c2be6: // 0160:1c2be6
    if (!(ax & 0x8080))
        goto loc_1c2c0f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2c0f;
    if (dl & 0x80)
        goto loc_1c2c08;
    al = dl;
loc_1c2c08: // 0160:1c2c08
    if (dh & 0x80)
        goto loc_1c2c0f;
    ah = dh;
loc_1c2c0f: // 0160:1c2c0f
    memoryASet16(ds, edi + 184, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2c75;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2c4c;
    if (dl & 0x80)
        goto loc_1c2c45;
    al = dl;
loc_1c2c45: // 0160:1c2c45
    if (dh & 0x80)
        goto loc_1c2c4c;
    ah = dh;
loc_1c2c4c: // 0160:1c2c4c
    if (!(ax & 0x8080))
        goto loc_1c2c75;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2c75;
    if (dl & 0x80)
        goto loc_1c2c6e;
    al = dl;
loc_1c2c6e: // 0160:1c2c6e
    if (dh & 0x80)
        goto loc_1c2c75;
    ah = dh;
loc_1c2c75: // 0160:1c2c75
    memoryASet16(ds, edi + 186, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2cdb;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2cb2;
    if (dl & 0x80)
        goto loc_1c2cab;
    al = dl;
loc_1c2cab: // 0160:1c2cab
    if (dh & 0x80)
        goto loc_1c2cb2;
    ah = dh;
loc_1c2cb2: // 0160:1c2cb2
    if (!(ax & 0x8080))
        goto loc_1c2cdb;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2cdb;
    if (dl & 0x80)
        goto loc_1c2cd4;
    al = dl;
loc_1c2cd4: // 0160:1c2cd4
    if (dh & 0x80)
        goto loc_1c2cdb;
    ah = dh;
loc_1c2cdb: // 0160:1c2cdb
    memoryASet16(ds, edi + 188, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2d41;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2d18;
    if (dl & 0x80)
        goto loc_1c2d11;
    al = dl;
loc_1c2d11: // 0160:1c2d11
    if (dh & 0x80)
        goto loc_1c2d18;
    ah = dh;
loc_1c2d18: // 0160:1c2d18
    if (!(ax & 0x8080))
        goto loc_1c2d41;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2d41;
    if (dl & 0x80)
        goto loc_1c2d3a;
    al = dl;
loc_1c2d3a: // 0160:1c2d3a
    if (dh & 0x80)
        goto loc_1c2d41;
    ah = dh;
loc_1c2d41: // 0160:1c2d41
    memoryASet16(ds, edi + 190, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2da7;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2d7e;
    if (dl & 0x80)
        goto loc_1c2d77;
    al = dl;
loc_1c2d77: // 0160:1c2d77
    if (dh & 0x80)
        goto loc_1c2d7e;
    ah = dh;
loc_1c2d7e: // 0160:1c2d7e
    if (!(ax & 0x8080))
        goto loc_1c2da7;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2da7;
    if (dl & 0x80)
        goto loc_1c2da0;
    al = dl;
loc_1c2da0: // 0160:1c2da0
    if (dh & 0x80)
        goto loc_1c2da7;
    ah = dh;
loc_1c2da7: // 0160:1c2da7
    memoryASet16(ds, edi + 192, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2e0d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2de4;
    if (dl & 0x80)
        goto loc_1c2ddd;
    al = dl;
loc_1c2ddd: // 0160:1c2ddd
    if (dh & 0x80)
        goto loc_1c2de4;
    ah = dh;
loc_1c2de4: // 0160:1c2de4
    if (!(ax & 0x8080))
        goto loc_1c2e0d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2e0d;
    if (dl & 0x80)
        goto loc_1c2e06;
    al = dl;
loc_1c2e06: // 0160:1c2e06
    if (dh & 0x80)
        goto loc_1c2e0d;
    ah = dh;
loc_1c2e0d: // 0160:1c2e0d
    memoryASet16(ds, edi + 194, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2e73;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2e4a;
    if (dl & 0x80)
        goto loc_1c2e43;
    al = dl;
loc_1c2e43: // 0160:1c2e43
    if (dh & 0x80)
        goto loc_1c2e4a;
    ah = dh;
loc_1c2e4a: // 0160:1c2e4a
    if (!(ax & 0x8080))
        goto loc_1c2e73;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2e73;
    if (dl & 0x80)
        goto loc_1c2e6c;
    al = dl;
loc_1c2e6c: // 0160:1c2e6c
    if (dh & 0x80)
        goto loc_1c2e73;
    ah = dh;
loc_1c2e73: // 0160:1c2e73
    memoryASet16(ds, edi + 196, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2ed9;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2eb0;
    if (dl & 0x80)
        goto loc_1c2ea9;
    al = dl;
loc_1c2ea9: // 0160:1c2ea9
    if (dh & 0x80)
        goto loc_1c2eb0;
    ah = dh;
loc_1c2eb0: // 0160:1c2eb0
    if (!(ax & 0x8080))
        goto loc_1c2ed9;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2ed9;
    if (dl & 0x80)
        goto loc_1c2ed2;
    al = dl;
loc_1c2ed2: // 0160:1c2ed2
    if (dh & 0x80)
        goto loc_1c2ed9;
    ah = dh;
loc_1c2ed9: // 0160:1c2ed9
    memoryASet16(ds, edi + 198, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2f3f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2f16;
    if (dl & 0x80)
        goto loc_1c2f0f;
    al = dl;
loc_1c2f0f: // 0160:1c2f0f
    if (dh & 0x80)
        goto loc_1c2f16;
    ah = dh;
loc_1c2f16: // 0160:1c2f16
    if (!(ax & 0x8080))
        goto loc_1c2f3f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2f3f;
    if (dl & 0x80)
        goto loc_1c2f38;
    al = dl;
loc_1c2f38: // 0160:1c2f38
    if (dh & 0x80)
        goto loc_1c2f3f;
    ah = dh;
loc_1c2f3f: // 0160:1c2f3f
    memoryASet16(ds, edi + 200, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c2fa5;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2f7c;
    if (dl & 0x80)
        goto loc_1c2f75;
    al = dl;
loc_1c2f75: // 0160:1c2f75
    if (dh & 0x80)
        goto loc_1c2f7c;
    ah = dh;
loc_1c2f7c: // 0160:1c2f7c
    if (!(ax & 0x8080))
        goto loc_1c2fa5;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2fa5;
    if (dl & 0x80)
        goto loc_1c2f9e;
    al = dl;
loc_1c2f9e: // 0160:1c2f9e
    if (dh & 0x80)
        goto loc_1c2fa5;
    ah = dh;
loc_1c2fa5: // 0160:1c2fa5
    memoryASet16(ds, edi + 202, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c300b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c2fe2;
    if (dl & 0x80)
        goto loc_1c2fdb;
    al = dl;
loc_1c2fdb: // 0160:1c2fdb
    if (dh & 0x80)
        goto loc_1c2fe2;
    ah = dh;
loc_1c2fe2: // 0160:1c2fe2
    if (!(ax & 0x8080))
        goto loc_1c300b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c300b;
    if (dl & 0x80)
        goto loc_1c3004;
    al = dl;
loc_1c3004: // 0160:1c3004
    if (dh & 0x80)
        goto loc_1c300b;
    ah = dh;
loc_1c300b: // 0160:1c300b
    memoryASet16(ds, edi + 204, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3071;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3048;
    if (dl & 0x80)
        goto loc_1c3041;
    al = dl;
loc_1c3041: // 0160:1c3041
    if (dh & 0x80)
        goto loc_1c3048;
    ah = dh;
loc_1c3048: // 0160:1c3048
    if (!(ax & 0x8080))
        goto loc_1c3071;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3071;
    if (dl & 0x80)
        goto loc_1c306a;
    al = dl;
loc_1c306a: // 0160:1c306a
    if (dh & 0x80)
        goto loc_1c3071;
    ah = dh;
loc_1c3071: // 0160:1c3071
    memoryASet16(ds, edi + 206, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c30d7;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c30ae;
    if (dl & 0x80)
        goto loc_1c30a7;
    al = dl;
loc_1c30a7: // 0160:1c30a7
    if (dh & 0x80)
        goto loc_1c30ae;
    ah = dh;
loc_1c30ae: // 0160:1c30ae
    if (!(ax & 0x8080))
        goto loc_1c30d7;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c30d7;
    if (dl & 0x80)
        goto loc_1c30d0;
    al = dl;
loc_1c30d0: // 0160:1c30d0
    if (dh & 0x80)
        goto loc_1c30d7;
    ah = dh;
loc_1c30d7: // 0160:1c30d7
    memoryASet16(ds, edi + 208, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c313d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3114;
    if (dl & 0x80)
        goto loc_1c310d;
    al = dl;
loc_1c310d: // 0160:1c310d
    if (dh & 0x80)
        goto loc_1c3114;
    ah = dh;
loc_1c3114: // 0160:1c3114
    if (!(ax & 0x8080))
        goto loc_1c313d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c313d;
    if (dl & 0x80)
        goto loc_1c3136;
    al = dl;
loc_1c3136: // 0160:1c3136
    if (dh & 0x80)
        goto loc_1c313d;
    ah = dh;
loc_1c313d: // 0160:1c313d
    memoryASet16(ds, edi + 210, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c31a3;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c317a;
    if (dl & 0x80)
        goto loc_1c3173;
    al = dl;
loc_1c3173: // 0160:1c3173
    if (dh & 0x80)
        goto loc_1c317a;
    ah = dh;
loc_1c317a: // 0160:1c317a
    if (!(ax & 0x8080))
        goto loc_1c31a3;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c31a3;
    if (dl & 0x80)
        goto loc_1c319c;
    al = dl;
loc_1c319c: // 0160:1c319c
    if (dh & 0x80)
        goto loc_1c31a3;
    ah = dh;
loc_1c31a3: // 0160:1c31a3
    memoryASet16(ds, edi + 212, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3209;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c31e0;
    if (dl & 0x80)
        goto loc_1c31d9;
    al = dl;
loc_1c31d9: // 0160:1c31d9
    if (dh & 0x80)
        goto loc_1c31e0;
    ah = dh;
loc_1c31e0: // 0160:1c31e0
    if (!(ax & 0x8080))
        goto loc_1c3209;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3209;
    if (dl & 0x80)
        goto loc_1c3202;
    al = dl;
loc_1c3202: // 0160:1c3202
    if (dh & 0x80)
        goto loc_1c3209;
    ah = dh;
loc_1c3209: // 0160:1c3209
    memoryASet16(ds, edi + 214, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c326f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3246;
    if (dl & 0x80)
        goto loc_1c323f;
    al = dl;
loc_1c323f: // 0160:1c323f
    if (dh & 0x80)
        goto loc_1c3246;
    ah = dh;
loc_1c3246: // 0160:1c3246
    if (!(ax & 0x8080))
        goto loc_1c326f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c326f;
    if (dl & 0x80)
        goto loc_1c3268;
    al = dl;
loc_1c3268: // 0160:1c3268
    if (dh & 0x80)
        goto loc_1c326f;
    ah = dh;
loc_1c326f: // 0160:1c326f
    memoryASet16(ds, edi + 216, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c32d5;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c32ac;
    if (dl & 0x80)
        goto loc_1c32a5;
    al = dl;
loc_1c32a5: // 0160:1c32a5
    if (dh & 0x80)
        goto loc_1c32ac;
    ah = dh;
loc_1c32ac: // 0160:1c32ac
    if (!(ax & 0x8080))
        goto loc_1c32d5;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c32d5;
    if (dl & 0x80)
        goto loc_1c32ce;
    al = dl;
loc_1c32ce: // 0160:1c32ce
    if (dh & 0x80)
        goto loc_1c32d5;
    ah = dh;
loc_1c32d5: // 0160:1c32d5
    memoryASet16(ds, edi + 218, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c333b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3312;
    if (dl & 0x80)
        goto loc_1c330b;
    al = dl;
loc_1c330b: // 0160:1c330b
    if (dh & 0x80)
        goto loc_1c3312;
    ah = dh;
loc_1c3312: // 0160:1c3312
    if (!(ax & 0x8080))
        goto loc_1c333b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c333b;
    if (dl & 0x80)
        goto loc_1c3334;
    al = dl;
loc_1c3334: // 0160:1c3334
    if (dh & 0x80)
        goto loc_1c333b;
    ah = dh;
loc_1c333b: // 0160:1c333b
    memoryASet16(ds, edi + 220, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c33a1;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3378;
    if (dl & 0x80)
        goto loc_1c3371;
    al = dl;
loc_1c3371: // 0160:1c3371
    if (dh & 0x80)
        goto loc_1c3378;
    ah = dh;
loc_1c3378: // 0160:1c3378
    if (!(ax & 0x8080))
        goto loc_1c33a1;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c33a1;
    if (dl & 0x80)
        goto loc_1c339a;
    al = dl;
loc_1c339a: // 0160:1c339a
    if (dh & 0x80)
        goto loc_1c33a1;
    ah = dh;
loc_1c33a1: // 0160:1c33a1
    memoryASet16(ds, edi + 222, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3407;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c33de;
    if (dl & 0x80)
        goto loc_1c33d7;
    al = dl;
loc_1c33d7: // 0160:1c33d7
    if (dh & 0x80)
        goto loc_1c33de;
    ah = dh;
loc_1c33de: // 0160:1c33de
    if (!(ax & 0x8080))
        goto loc_1c3407;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3407;
    if (dl & 0x80)
        goto loc_1c3400;
    al = dl;
loc_1c3400: // 0160:1c3400
    if (dh & 0x80)
        goto loc_1c3407;
    ah = dh;
loc_1c3407: // 0160:1c3407
    memoryASet16(ds, edi + 224, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c346d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3444;
    if (dl & 0x80)
        goto loc_1c343d;
    al = dl;
loc_1c343d: // 0160:1c343d
    if (dh & 0x80)
        goto loc_1c3444;
    ah = dh;
loc_1c3444: // 0160:1c3444
    if (!(ax & 0x8080))
        goto loc_1c346d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c346d;
    if (dl & 0x80)
        goto loc_1c3466;
    al = dl;
loc_1c3466: // 0160:1c3466
    if (dh & 0x80)
        goto loc_1c346d;
    ah = dh;
loc_1c346d: // 0160:1c346d
    memoryASet16(ds, edi + 226, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c34d3;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c34aa;
    if (dl & 0x80)
        goto loc_1c34a3;
    al = dl;
loc_1c34a3: // 0160:1c34a3
    if (dh & 0x80)
        goto loc_1c34aa;
    ah = dh;
loc_1c34aa: // 0160:1c34aa
    if (!(ax & 0x8080))
        goto loc_1c34d3;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c34d3;
    if (dl & 0x80)
        goto loc_1c34cc;
    al = dl;
loc_1c34cc: // 0160:1c34cc
    if (dh & 0x80)
        goto loc_1c34d3;
    ah = dh;
loc_1c34d3: // 0160:1c34d3
    memoryASet16(ds, edi + 228, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3539;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3510;
    if (dl & 0x80)
        goto loc_1c3509;
    al = dl;
loc_1c3509: // 0160:1c3509
    if (dh & 0x80)
        goto loc_1c3510;
    ah = dh;
loc_1c3510: // 0160:1c3510
    if (!(ax & 0x8080))
        goto loc_1c3539;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3539;
    if (dl & 0x80)
        goto loc_1c3532;
    al = dl;
loc_1c3532: // 0160:1c3532
    if (dh & 0x80)
        goto loc_1c3539;
    ah = dh;
loc_1c3539: // 0160:1c3539
    memoryASet16(ds, edi + 230, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c359f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3576;
    if (dl & 0x80)
        goto loc_1c356f;
    al = dl;
loc_1c356f: // 0160:1c356f
    if (dh & 0x80)
        goto loc_1c3576;
    ah = dh;
loc_1c3576: // 0160:1c3576
    if (!(ax & 0x8080))
        goto loc_1c359f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c359f;
    if (dl & 0x80)
        goto loc_1c3598;
    al = dl;
loc_1c3598: // 0160:1c3598
    if (dh & 0x80)
        goto loc_1c359f;
    ah = dh;
loc_1c359f: // 0160:1c359f
    memoryASet16(ds, edi + 232, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3605;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c35dc;
    if (dl & 0x80)
        goto loc_1c35d5;
    al = dl;
loc_1c35d5: // 0160:1c35d5
    if (dh & 0x80)
        goto loc_1c35dc;
    ah = dh;
loc_1c35dc: // 0160:1c35dc
    if (!(ax & 0x8080))
        goto loc_1c3605;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3605;
    if (dl & 0x80)
        goto loc_1c35fe;
    al = dl;
loc_1c35fe: // 0160:1c35fe
    if (dh & 0x80)
        goto loc_1c3605;
    ah = dh;
loc_1c3605: // 0160:1c3605
    memoryASet16(ds, edi + 234, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c366b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3642;
    if (dl & 0x80)
        goto loc_1c363b;
    al = dl;
loc_1c363b: // 0160:1c363b
    if (dh & 0x80)
        goto loc_1c3642;
    ah = dh;
loc_1c3642: // 0160:1c3642
    if (!(ax & 0x8080))
        goto loc_1c366b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c366b;
    if (dl & 0x80)
        goto loc_1c3664;
    al = dl;
loc_1c3664: // 0160:1c3664
    if (dh & 0x80)
        goto loc_1c366b;
    ah = dh;
loc_1c366b: // 0160:1c366b
    memoryASet16(ds, edi + 236, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c36d1;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c36a8;
    if (dl & 0x80)
        goto loc_1c36a1;
    al = dl;
loc_1c36a1: // 0160:1c36a1
    if (dh & 0x80)
        goto loc_1c36a8;
    ah = dh;
loc_1c36a8: // 0160:1c36a8
    if (!(ax & 0x8080))
        goto loc_1c36d1;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c36d1;
    if (dl & 0x80)
        goto loc_1c36ca;
    al = dl;
loc_1c36ca: // 0160:1c36ca
    if (dh & 0x80)
        goto loc_1c36d1;
    ah = dh;
loc_1c36d1: // 0160:1c36d1
    memoryASet16(ds, edi + 238, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3737;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c370e;
    if (dl & 0x80)
        goto loc_1c3707;
    al = dl;
loc_1c3707: // 0160:1c3707
    if (dh & 0x80)
        goto loc_1c370e;
    ah = dh;
loc_1c370e: // 0160:1c370e
    if (!(ax & 0x8080))
        goto loc_1c3737;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3737;
    if (dl & 0x80)
        goto loc_1c3730;
    al = dl;
loc_1c3730: // 0160:1c3730
    if (dh & 0x80)
        goto loc_1c3737;
    ah = dh;
loc_1c3737: // 0160:1c3737
    memoryASet16(ds, edi + 240, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c379d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3774;
    if (dl & 0x80)
        goto loc_1c376d;
    al = dl;
loc_1c376d: // 0160:1c376d
    if (dh & 0x80)
        goto loc_1c3774;
    ah = dh;
loc_1c3774: // 0160:1c3774
    if (!(ax & 0x8080))
        goto loc_1c379d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c379d;
    if (dl & 0x80)
        goto loc_1c3796;
    al = dl;
loc_1c3796: // 0160:1c3796
    if (dh & 0x80)
        goto loc_1c379d;
    ah = dh;
loc_1c379d: // 0160:1c379d
    memoryASet16(ds, edi + 242, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3803;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c37da;
    if (dl & 0x80)
        goto loc_1c37d3;
    al = dl;
loc_1c37d3: // 0160:1c37d3
    if (dh & 0x80)
        goto loc_1c37da;
    ah = dh;
loc_1c37da: // 0160:1c37da
    if (!(ax & 0x8080))
        goto loc_1c3803;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3803;
    if (dl & 0x80)
        goto loc_1c37fc;
    al = dl;
loc_1c37fc: // 0160:1c37fc
    if (dh & 0x80)
        goto loc_1c3803;
    ah = dh;
loc_1c3803: // 0160:1c3803
    memoryASet16(ds, edi + 244, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3869;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3840;
    if (dl & 0x80)
        goto loc_1c3839;
    al = dl;
loc_1c3839: // 0160:1c3839
    if (dh & 0x80)
        goto loc_1c3840;
    ah = dh;
loc_1c3840: // 0160:1c3840
    if (!(ax & 0x8080))
        goto loc_1c3869;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3869;
    if (dl & 0x80)
        goto loc_1c3862;
    al = dl;
loc_1c3862: // 0160:1c3862
    if (dh & 0x80)
        goto loc_1c3869;
    ah = dh;
loc_1c3869: // 0160:1c3869
    memoryASet16(ds, edi + 246, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c38cf;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c38a6;
    if (dl & 0x80)
        goto loc_1c389f;
    al = dl;
loc_1c389f: // 0160:1c389f
    if (dh & 0x80)
        goto loc_1c38a6;
    ah = dh;
loc_1c38a6: // 0160:1c38a6
    if (!(ax & 0x8080))
        goto loc_1c38cf;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c38cf;
    if (dl & 0x80)
        goto loc_1c38c8;
    al = dl;
loc_1c38c8: // 0160:1c38c8
    if (dh & 0x80)
        goto loc_1c38cf;
    ah = dh;
loc_1c38cf: // 0160:1c38cf
    memoryASet16(ds, edi + 248, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3935;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c390c;
    if (dl & 0x80)
        goto loc_1c3905;
    al = dl;
loc_1c3905: // 0160:1c3905
    if (dh & 0x80)
        goto loc_1c390c;
    ah = dh;
loc_1c390c: // 0160:1c390c
    if (!(ax & 0x8080))
        goto loc_1c3935;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3935;
    if (dl & 0x80)
        goto loc_1c392e;
    al = dl;
loc_1c392e: // 0160:1c392e
    if (dh & 0x80)
        goto loc_1c3935;
    ah = dh;
loc_1c3935: // 0160:1c3935
    memoryASet16(ds, edi + 250, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c399b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3972;
    if (dl & 0x80)
        goto loc_1c396b;
    al = dl;
loc_1c396b: // 0160:1c396b
    if (dh & 0x80)
        goto loc_1c3972;
    ah = dh;
loc_1c3972: // 0160:1c3972
    if (!(ax & 0x8080))
        goto loc_1c399b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c399b;
    if (dl & 0x80)
        goto loc_1c3994;
    al = dl;
loc_1c3994: // 0160:1c3994
    if (dh & 0x80)
        goto loc_1c399b;
    ah = dh;
loc_1c399b: // 0160:1c399b
    memoryASet16(ds, edi + 252, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3a01;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c39d8;
    if (dl & 0x80)
        goto loc_1c39d1;
    al = dl;
loc_1c39d1: // 0160:1c39d1
    if (dh & 0x80)
        goto loc_1c39d8;
    ah = dh;
loc_1c39d8: // 0160:1c39d8
    if (!(ax & 0x8080))
        goto loc_1c3a01;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3a01;
    if (dl & 0x80)
        goto loc_1c39fa;
    al = dl;
loc_1c39fa: // 0160:1c39fa
    if (dh & 0x80)
        goto loc_1c3a01;
    ah = dh;
loc_1c3a01: // 0160:1c3a01
    memoryASet16(ds, edi + 254, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3a67;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3a3e;
    if (dl & 0x80)
        goto loc_1c3a37;
    al = dl;
loc_1c3a37: // 0160:1c3a37
    if (dh & 0x80)
        goto loc_1c3a3e;
    ah = dh;
loc_1c3a3e: // 0160:1c3a3e
    if (!(ax & 0x8080))
        goto loc_1c3a67;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3a67;
    if (dl & 0x80)
        goto loc_1c3a60;
    al = dl;
loc_1c3a60: // 0160:1c3a60
    if (dh & 0x80)
        goto loc_1c3a67;
    ah = dh;
loc_1c3a67: // 0160:1c3a67
    memoryASet16(ds, edi + 256, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3acd;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3aa4;
    if (dl & 0x80)
        goto loc_1c3a9d;
    al = dl;
loc_1c3a9d: // 0160:1c3a9d
    if (dh & 0x80)
        goto loc_1c3aa4;
    ah = dh;
loc_1c3aa4: // 0160:1c3aa4
    if (!(ax & 0x8080))
        goto loc_1c3acd;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3acd;
    if (dl & 0x80)
        goto loc_1c3ac6;
    al = dl;
loc_1c3ac6: // 0160:1c3ac6
    if (dh & 0x80)
        goto loc_1c3acd;
    ah = dh;
loc_1c3acd: // 0160:1c3acd
    memoryASet16(ds, edi + 258, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3b33;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3b0a;
    if (dl & 0x80)
        goto loc_1c3b03;
    al = dl;
loc_1c3b03: // 0160:1c3b03
    if (dh & 0x80)
        goto loc_1c3b0a;
    ah = dh;
loc_1c3b0a: // 0160:1c3b0a
    if (!(ax & 0x8080))
        goto loc_1c3b33;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3b33;
    if (dl & 0x80)
        goto loc_1c3b2c;
    al = dl;
loc_1c3b2c: // 0160:1c3b2c
    if (dh & 0x80)
        goto loc_1c3b33;
    ah = dh;
loc_1c3b33: // 0160:1c3b33
    memoryASet16(ds, edi + 260, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3b99;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3b70;
    if (dl & 0x80)
        goto loc_1c3b69;
    al = dl;
loc_1c3b69: // 0160:1c3b69
    if (dh & 0x80)
        goto loc_1c3b70;
    ah = dh;
loc_1c3b70: // 0160:1c3b70
    if (!(ax & 0x8080))
        goto loc_1c3b99;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3b99;
    if (dl & 0x80)
        goto loc_1c3b92;
    al = dl;
loc_1c3b92: // 0160:1c3b92
    if (dh & 0x80)
        goto loc_1c3b99;
    ah = dh;
loc_1c3b99: // 0160:1c3b99
    memoryASet16(ds, edi + 262, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3bff;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3bd6;
    if (dl & 0x80)
        goto loc_1c3bcf;
    al = dl;
loc_1c3bcf: // 0160:1c3bcf
    if (dh & 0x80)
        goto loc_1c3bd6;
    ah = dh;
loc_1c3bd6: // 0160:1c3bd6
    if (!(ax & 0x8080))
        goto loc_1c3bff;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3bff;
    if (dl & 0x80)
        goto loc_1c3bf8;
    al = dl;
loc_1c3bf8: // 0160:1c3bf8
    if (dh & 0x80)
        goto loc_1c3bff;
    ah = dh;
loc_1c3bff: // 0160:1c3bff
    memoryASet16(ds, edi + 264, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3c65;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3c3c;
    if (dl & 0x80)
        goto loc_1c3c35;
    al = dl;
loc_1c3c35: // 0160:1c3c35
    if (dh & 0x80)
        goto loc_1c3c3c;
    ah = dh;
loc_1c3c3c: // 0160:1c3c3c
    if (!(ax & 0x8080))
        goto loc_1c3c65;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3c65;
    if (dl & 0x80)
        goto loc_1c3c5e;
    al = dl;
loc_1c3c5e: // 0160:1c3c5e
    if (dh & 0x80)
        goto loc_1c3c65;
    ah = dh;
loc_1c3c65: // 0160:1c3c65
    memoryASet16(ds, edi + 266, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3ccb;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3ca2;
    if (dl & 0x80)
        goto loc_1c3c9b;
    al = dl;
loc_1c3c9b: // 0160:1c3c9b
    if (dh & 0x80)
        goto loc_1c3ca2;
    ah = dh;
loc_1c3ca2: // 0160:1c3ca2
    if (!(ax & 0x8080))
        goto loc_1c3ccb;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3ccb;
    if (dl & 0x80)
        goto loc_1c3cc4;
    al = dl;
loc_1c3cc4: // 0160:1c3cc4
    if (dh & 0x80)
        goto loc_1c3ccb;
    ah = dh;
loc_1c3ccb: // 0160:1c3ccb
    memoryASet16(ds, edi + 268, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3d31;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3d08;
    if (dl & 0x80)
        goto loc_1c3d01;
    al = dl;
loc_1c3d01: // 0160:1c3d01
    if (dh & 0x80)
        goto loc_1c3d08;
    ah = dh;
loc_1c3d08: // 0160:1c3d08
    if (!(ax & 0x8080))
        goto loc_1c3d31;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3d31;
    if (dl & 0x80)
        goto loc_1c3d2a;
    al = dl;
loc_1c3d2a: // 0160:1c3d2a
    if (dh & 0x80)
        goto loc_1c3d31;
    ah = dh;
loc_1c3d31: // 0160:1c3d31
    memoryASet16(ds, edi + 270, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3d97;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3d6e;
    if (dl & 0x80)
        goto loc_1c3d67;
    al = dl;
loc_1c3d67: // 0160:1c3d67
    if (dh & 0x80)
        goto loc_1c3d6e;
    ah = dh;
loc_1c3d6e: // 0160:1c3d6e
    if (!(ax & 0x8080))
        goto loc_1c3d97;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3d97;
    if (dl & 0x80)
        goto loc_1c3d90;
    al = dl;
loc_1c3d90: // 0160:1c3d90
    if (dh & 0x80)
        goto loc_1c3d97;
    ah = dh;
loc_1c3d97: // 0160:1c3d97
    memoryASet16(ds, edi + 272, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3dfd;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3dd4;
    if (dl & 0x80)
        goto loc_1c3dcd;
    al = dl;
loc_1c3dcd: // 0160:1c3dcd
    if (dh & 0x80)
        goto loc_1c3dd4;
    ah = dh;
loc_1c3dd4: // 0160:1c3dd4
    if (!(ax & 0x8080))
        goto loc_1c3dfd;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3dfd;
    if (dl & 0x80)
        goto loc_1c3df6;
    al = dl;
loc_1c3df6: // 0160:1c3df6
    if (dh & 0x80)
        goto loc_1c3dfd;
    ah = dh;
loc_1c3dfd: // 0160:1c3dfd
    memoryASet16(ds, edi + 274, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3e63;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3e3a;
    if (dl & 0x80)
        goto loc_1c3e33;
    al = dl;
loc_1c3e33: // 0160:1c3e33
    if (dh & 0x80)
        goto loc_1c3e3a;
    ah = dh;
loc_1c3e3a: // 0160:1c3e3a
    if (!(ax & 0x8080))
        goto loc_1c3e63;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3e63;
    if (dl & 0x80)
        goto loc_1c3e5c;
    al = dl;
loc_1c3e5c: // 0160:1c3e5c
    if (dh & 0x80)
        goto loc_1c3e63;
    ah = dh;
loc_1c3e63: // 0160:1c3e63
    memoryASet16(ds, edi + 276, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3ec9;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3ea0;
    if (dl & 0x80)
        goto loc_1c3e99;
    al = dl;
loc_1c3e99: // 0160:1c3e99
    if (dh & 0x80)
        goto loc_1c3ea0;
    ah = dh;
loc_1c3ea0: // 0160:1c3ea0
    if (!(ax & 0x8080))
        goto loc_1c3ec9;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3ec9;
    if (dl & 0x80)
        goto loc_1c3ec2;
    al = dl;
loc_1c3ec2: // 0160:1c3ec2
    if (dh & 0x80)
        goto loc_1c3ec9;
    ah = dh;
loc_1c3ec9: // 0160:1c3ec9
    memoryASet16(ds, edi + 278, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3f2f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3f06;
    if (dl & 0x80)
        goto loc_1c3eff;
    al = dl;
loc_1c3eff: // 0160:1c3eff
    if (dh & 0x80)
        goto loc_1c3f06;
    ah = dh;
loc_1c3f06: // 0160:1c3f06
    if (!(ax & 0x8080))
        goto loc_1c3f2f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3f2f;
    if (dl & 0x80)
        goto loc_1c3f28;
    al = dl;
loc_1c3f28: // 0160:1c3f28
    if (dh & 0x80)
        goto loc_1c3f2f;
    ah = dh;
loc_1c3f2f: // 0160:1c3f2f
    memoryASet16(ds, edi + 280, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3f95;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3f6c;
    if (dl & 0x80)
        goto loc_1c3f65;
    al = dl;
loc_1c3f65: // 0160:1c3f65
    if (dh & 0x80)
        goto loc_1c3f6c;
    ah = dh;
loc_1c3f6c: // 0160:1c3f6c
    if (!(ax & 0x8080))
        goto loc_1c3f95;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3f95;
    if (dl & 0x80)
        goto loc_1c3f8e;
    al = dl;
loc_1c3f8e: // 0160:1c3f8e
    if (dh & 0x80)
        goto loc_1c3f95;
    ah = dh;
loc_1c3f95: // 0160:1c3f95
    memoryASet16(ds, edi + 282, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c3ffb;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3fd2;
    if (dl & 0x80)
        goto loc_1c3fcb;
    al = dl;
loc_1c3fcb: // 0160:1c3fcb
    if (dh & 0x80)
        goto loc_1c3fd2;
    ah = dh;
loc_1c3fd2: // 0160:1c3fd2
    if (!(ax & 0x8080))
        goto loc_1c3ffb;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c3ffb;
    if (dl & 0x80)
        goto loc_1c3ff4;
    al = dl;
loc_1c3ff4: // 0160:1c3ff4
    if (dh & 0x80)
        goto loc_1c3ffb;
    ah = dh;
loc_1c3ffb: // 0160:1c3ffb
    memoryASet16(ds, edi + 284, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c4061;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4038;
    if (dl & 0x80)
        goto loc_1c4031;
    al = dl;
loc_1c4031: // 0160:1c4031
    if (dh & 0x80)
        goto loc_1c4038;
    ah = dh;
loc_1c4038: // 0160:1c4038
    if (!(ax & 0x8080))
        goto loc_1c4061;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4061;
    if (dl & 0x80)
        goto loc_1c405a;
    al = dl;
loc_1c405a: // 0160:1c405a
    if (dh & 0x80)
        goto loc_1c4061;
    ah = dh;
loc_1c4061: // 0160:1c4061
    memoryASet16(ds, edi + 286, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c40c7;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c409e;
    if (dl & 0x80)
        goto loc_1c4097;
    al = dl;
loc_1c4097: // 0160:1c4097
    if (dh & 0x80)
        goto loc_1c409e;
    ah = dh;
loc_1c409e: // 0160:1c409e
    if (!(ax & 0x8080))
        goto loc_1c40c7;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c40c7;
    if (dl & 0x80)
        goto loc_1c40c0;
    al = dl;
loc_1c40c0: // 0160:1c40c0
    if (dh & 0x80)
        goto loc_1c40c7;
    ah = dh;
loc_1c40c7: // 0160:1c40c7
    memoryASet16(ds, edi + 288, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c412d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4104;
    if (dl & 0x80)
        goto loc_1c40fd;
    al = dl;
loc_1c40fd: // 0160:1c40fd
    if (dh & 0x80)
        goto loc_1c4104;
    ah = dh;
loc_1c4104: // 0160:1c4104
    if (!(ax & 0x8080))
        goto loc_1c412d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c412d;
    if (dl & 0x80)
        goto loc_1c4126;
    al = dl;
loc_1c4126: // 0160:1c4126
    if (dh & 0x80)
        goto loc_1c412d;
    ah = dh;
loc_1c412d: // 0160:1c412d
    memoryASet16(ds, edi + 290, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c4193;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c416a;
    if (dl & 0x80)
        goto loc_1c4163;
    al = dl;
loc_1c4163: // 0160:1c4163
    if (dh & 0x80)
        goto loc_1c416a;
    ah = dh;
loc_1c416a: // 0160:1c416a
    if (!(ax & 0x8080))
        goto loc_1c4193;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4193;
    if (dl & 0x80)
        goto loc_1c418c;
    al = dl;
loc_1c418c: // 0160:1c418c
    if (dh & 0x80)
        goto loc_1c4193;
    ah = dh;
loc_1c4193: // 0160:1c4193
    memoryASet16(ds, edi + 292, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c41f9;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c41d0;
    if (dl & 0x80)
        goto loc_1c41c9;
    al = dl;
loc_1c41c9: // 0160:1c41c9
    if (dh & 0x80)
        goto loc_1c41d0;
    ah = dh;
loc_1c41d0: // 0160:1c41d0
    if (!(ax & 0x8080))
        goto loc_1c41f9;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c41f9;
    if (dl & 0x80)
        goto loc_1c41f2;
    al = dl;
loc_1c41f2: // 0160:1c41f2
    if (dh & 0x80)
        goto loc_1c41f9;
    ah = dh;
loc_1c41f9: // 0160:1c41f9
    memoryASet16(ds, edi + 294, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c425f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4236;
    if (dl & 0x80)
        goto loc_1c422f;
    al = dl;
loc_1c422f: // 0160:1c422f
    if (dh & 0x80)
        goto loc_1c4236;
    ah = dh;
loc_1c4236: // 0160:1c4236
    if (!(ax & 0x8080))
        goto loc_1c425f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c425f;
    if (dl & 0x80)
        goto loc_1c4258;
    al = dl;
loc_1c4258: // 0160:1c4258
    if (dh & 0x80)
        goto loc_1c425f;
    ah = dh;
loc_1c425f: // 0160:1c425f
    memoryASet16(ds, edi + 296, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c42c5;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c429c;
    if (dl & 0x80)
        goto loc_1c4295;
    al = dl;
loc_1c4295: // 0160:1c4295
    if (dh & 0x80)
        goto loc_1c429c;
    ah = dh;
loc_1c429c: // 0160:1c429c
    if (!(ax & 0x8080))
        goto loc_1c42c5;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c42c5;
    if (dl & 0x80)
        goto loc_1c42be;
    al = dl;
loc_1c42be: // 0160:1c42be
    if (dh & 0x80)
        goto loc_1c42c5;
    ah = dh;
loc_1c42c5: // 0160:1c42c5
    memoryASet16(ds, edi + 298, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c432b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4302;
    if (dl & 0x80)
        goto loc_1c42fb;
    al = dl;
loc_1c42fb: // 0160:1c42fb
    if (dh & 0x80)
        goto loc_1c4302;
    ah = dh;
loc_1c4302: // 0160:1c4302
    if (!(ax & 0x8080))
        goto loc_1c432b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c432b;
    if (dl & 0x80)
        goto loc_1c4324;
    al = dl;
loc_1c4324: // 0160:1c4324
    if (dh & 0x80)
        goto loc_1c432b;
    ah = dh;
loc_1c432b: // 0160:1c432b
    memoryASet16(ds, edi + 300, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c4391;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4368;
    if (dl & 0x80)
        goto loc_1c4361;
    al = dl;
loc_1c4361: // 0160:1c4361
    if (dh & 0x80)
        goto loc_1c4368;
    ah = dh;
loc_1c4368: // 0160:1c4368
    if (!(ax & 0x8080))
        goto loc_1c4391;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4391;
    if (dl & 0x80)
        goto loc_1c438a;
    al = dl;
loc_1c438a: // 0160:1c438a
    if (dh & 0x80)
        goto loc_1c4391;
    ah = dh;
loc_1c4391: // 0160:1c4391
    memoryASet16(ds, edi + 302, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c43f7;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c43ce;
    if (dl & 0x80)
        goto loc_1c43c7;
    al = dl;
loc_1c43c7: // 0160:1c43c7
    if (dh & 0x80)
        goto loc_1c43ce;
    ah = dh;
loc_1c43ce: // 0160:1c43ce
    if (!(ax & 0x8080))
        goto loc_1c43f7;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c43f7;
    if (dl & 0x80)
        goto loc_1c43f0;
    al = dl;
loc_1c43f0: // 0160:1c43f0
    if (dh & 0x80)
        goto loc_1c43f7;
    ah = dh;
loc_1c43f7: // 0160:1c43f7
    memoryASet16(ds, edi + 304, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c445d;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4434;
    if (dl & 0x80)
        goto loc_1c442d;
    al = dl;
loc_1c442d: // 0160:1c442d
    if (dh & 0x80)
        goto loc_1c4434;
    ah = dh;
loc_1c4434: // 0160:1c4434
    if (!(ax & 0x8080))
        goto loc_1c445d;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c445d;
    if (dl & 0x80)
        goto loc_1c4456;
    al = dl;
loc_1c4456: // 0160:1c4456
    if (dh & 0x80)
        goto loc_1c445d;
    ah = dh;
loc_1c445d: // 0160:1c445d
    memoryASet16(ds, edi + 306, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c44c3;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c449a;
    if (dl & 0x80)
        goto loc_1c4493;
    al = dl;
loc_1c4493: // 0160:1c4493
    if (dh & 0x80)
        goto loc_1c449a;
    ah = dh;
loc_1c449a: // 0160:1c449a
    if (!(ax & 0x8080))
        goto loc_1c44c3;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c44c3;
    if (dl & 0x80)
        goto loc_1c44bc;
    al = dl;
loc_1c44bc: // 0160:1c44bc
    if (dh & 0x80)
        goto loc_1c44c3;
    ah = dh;
loc_1c44c3: // 0160:1c44c3
    memoryASet16(ds, edi + 308, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c4529;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4500;
    if (dl & 0x80)
        goto loc_1c44f9;
    al = dl;
loc_1c44f9: // 0160:1c44f9
    if (dh & 0x80)
        goto loc_1c4500;
    ah = dh;
loc_1c4500: // 0160:1c4500
    if (!(ax & 0x8080))
        goto loc_1c4529;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4529;
    if (dl & 0x80)
        goto loc_1c4522;
    al = dl;
loc_1c4522: // 0160:1c4522
    if (dh & 0x80)
        goto loc_1c4529;
    ah = dh;
loc_1c4529: // 0160:1c4529
    memoryASet16(ds, edi + 310, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c458f;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4566;
    if (dl & 0x80)
        goto loc_1c455f;
    al = dl;
loc_1c455f: // 0160:1c455f
    if (dh & 0x80)
        goto loc_1c4566;
    ah = dh;
loc_1c4566: // 0160:1c4566
    if (!(ax & 0x8080))
        goto loc_1c458f;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c458f;
    if (dl & 0x80)
        goto loc_1c4588;
    al = dl;
loc_1c4588: // 0160:1c4588
    if (dh & 0x80)
        goto loc_1c458f;
    ah = dh;
loc_1c458f: // 0160:1c458f
    memoryASet16(ds, edi + 312, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c45f5;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c45cc;
    if (dl & 0x80)
        goto loc_1c45c5;
    al = dl;
loc_1c45c5: // 0160:1c45c5
    if (dh & 0x80)
        goto loc_1c45cc;
    ah = dh;
loc_1c45cc: // 0160:1c45cc
    if (!(ax & 0x8080))
        goto loc_1c45f5;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c45f5;
    if (dl & 0x80)
        goto loc_1c45ee;
    al = dl;
loc_1c45ee: // 0160:1c45ee
    if (dh & 0x80)
        goto loc_1c45f5;
    ah = dh;
loc_1c45f5: // 0160:1c45f5
    memoryASet16(ds, edi + 314, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c465b;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4632;
    if (dl & 0x80)
        goto loc_1c462b;
    al = dl;
loc_1c462b: // 0160:1c462b
    if (dh & 0x80)
        goto loc_1c4632;
    ah = dh;
loc_1c4632: // 0160:1c4632
    if (!(ax & 0x8080))
        goto loc_1c465b;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c465b;
    if (dl & 0x80)
        goto loc_1c4654;
    al = dl;
loc_1c4654: // 0160:1c4654
    if (dh & 0x80)
        goto loc_1c465b;
    ah = dh;
loc_1c465b: // 0160:1c465b
    memoryASet16(ds, edi + 316, ax);
    al = memoryAGet(ds, ecx + 2147483647);
    ah = memoryAGet(ds, ecx + 2147483647);
    if (!(eax & 0x00008080))
        goto loc_1c46c1;
    edx = eax;
    al = memoryAGet(ds, ebx + 2147483647);
    ah = memoryAGet(ds, ebx + 2147483647);
    if (dx == 0x8080)
        goto loc_1c4698;
    if (dl & 0x80)
        goto loc_1c4691;
    al = dl;
loc_1c4691: // 0160:1c4691
    if (dh & 0x80)
        goto loc_1c4698;
    ah = dh;
loc_1c4698: // 0160:1c4698
    if (!(ax & 0x8080))
        goto loc_1c46c1;
    edx = eax;
    al = memoryAGet(ds, esi + 2147483647);
    ah = memoryAGet(ds, esi + 2147483647);
    if (dx == 0x8080)
        goto loc_1c46c1;
    if (dl & 0x80)
        goto loc_1c46ba;
    al = dl;
loc_1c46ba: // 0160:1c46ba
    if (dh & 0x80)
        goto loc_1c46c1;
    ah = dh;
loc_1c46c1: // 0160:1c46c1
    memoryASet16(ds, edi + 318, ax);
    eax = memoryAGet32(ss, ebp + 44);
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) + eax);
loc_1c46ce: // 0160:1c46ce
    if (memoryAGet16(ss, ebp + -2) == 0x0000)
        goto loc_1c46e5;
    memoryASet16(ss, ebp + -2, memoryAGet16(ss, ebp + -2) - 0x0001);
    ecx += memoryAGet32(ss, ebp + 24);
    ebx += memoryAGet32(ss, ebp + 28);
    esi += memoryAGet32(ss, ebp + 32);
    goto loc_1c46ce;
loc_1c46e5: // 0160:1c46e5
    edi += memoryAGet32(ss, ebp + 36);
    memoryASet32(ss, ebp + 40, memoryAGet32(ss, ebp + 40) - 1);
    if (memoryAGet32(ss, ebp + 40))
        goto loc_1c0708;
loc_1c46f1: // 0160:1c46f1
    stop("disassembly failed at 160:1c46f1 popal ");
    stop("disassembly failed at 160:1c46f2 leave ");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c4758() // 0160:1c4758 +long
{
    esp -= 4;
    stop("disassembly failed at 160:1c4758 pushal ");
    esi = eax;
    edi = edx;
    ecx = 0x000000a8;
    goto loc_1c4764;
loc_1c4764: // 0160:1c4764
    goto loc_1c4766;
loc_1c4766: // 0160:1c4766
    goto loc_1c4768;
loc_1c4768: // 0160:1c4768
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    eax = memoryAGet32(ds, esi + 8);
    memoryASet32(ds, edi + 8, eax);
    eax = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, edi + 12, eax);
    eax = memoryAGet32(ds, esi + 16);
    memoryASet32(ds, edi + 16, eax);
    eax = memoryAGet32(ds, esi + 20);
    memoryASet32(ds, edi + 20, eax);
    eax = memoryAGet32(ds, esi + 24);
    memoryASet32(ds, edi + 24, eax);
    eax = memoryAGet32(ds, esi + 28);
    memoryASet32(ds, edi + 28, eax);
    eax = memoryAGet32(ds, esi + 32);
    memoryASet32(ds, edi + 32, eax);
    eax = memoryAGet32(ds, esi + 36);
    memoryASet32(ds, edi + 36, eax);
    eax = memoryAGet32(ds, esi + 40);
    memoryASet32(ds, edi + 40, eax);
    eax = memoryAGet32(ds, esi + 44);
    memoryASet32(ds, edi + 44, eax);
    eax = memoryAGet32(ds, esi + 48);
    memoryASet32(ds, edi + 48, eax);
    eax = memoryAGet32(ds, esi + 52);
    memoryASet32(ds, edi + 52, eax);
    eax = memoryAGet32(ds, esi + 56);
    memoryASet32(ds, edi + 56, eax);
    eax = memoryAGet32(ds, esi + 60);
    memoryASet32(ds, edi + 60, eax);
    eax = memoryAGet32(ds, esi + 64);
    memoryASet32(ds, edi + 64, eax);
    eax = memoryAGet32(ds, esi + 68);
    memoryASet32(ds, edi + 68, eax);
    eax = memoryAGet32(ds, esi + 72);
    memoryASet32(ds, edi + 72, eax);
    eax = memoryAGet32(ds, esi + 76);
    memoryASet32(ds, edi + 76, eax);
    eax = memoryAGet32(ds, esi + 80);
    memoryASet32(ds, edi + 80, eax);
    eax = memoryAGet32(ds, esi + 84);
    memoryASet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, esi + 88);
    memoryASet32(ds, edi + 88, eax);
    eax = memoryAGet32(ds, esi + 92);
    memoryASet32(ds, edi + 92, eax);
    eax = memoryAGet32(ds, esi + 96);
    memoryASet32(ds, edi + 96, eax);
    eax = memoryAGet32(ds, esi + 100);
    memoryASet32(ds, edi + 100, eax);
    eax = memoryAGet32(ds, esi + 104);
    memoryASet32(ds, edi + 104, eax);
    eax = memoryAGet32(ds, esi + 108);
    memoryASet32(ds, edi + 108, eax);
    eax = memoryAGet32(ds, esi + 112);
    memoryASet32(ds, edi + 112, eax);
    eax = memoryAGet32(ds, esi + 116);
    memoryASet32(ds, edi + 116, eax);
    eax = memoryAGet32(ds, esi + 120);
    memoryASet32(ds, edi + 120, eax);
    eax = memoryAGet32(ds, esi + 124);
    memoryASet32(ds, edi + 124, eax);
    eax = memoryAGet32(ds, esi + 128);
    memoryASet32(ds, edi + 128, eax);
    eax = memoryAGet32(ds, esi + 132);
    memoryASet32(ds, edi + 132, eax);
    eax = memoryAGet32(ds, esi + 136);
    memoryASet32(ds, edi + 136, eax);
    eax = memoryAGet32(ds, esi + 140);
    memoryASet32(ds, edi + 140, eax);
    eax = memoryAGet32(ds, esi + 144);
    memoryASet32(ds, edi + 144, eax);
    eax = memoryAGet32(ds, esi + 148);
    memoryASet32(ds, edi + 148, eax);
    eax = memoryAGet32(ds, esi + 152);
    memoryASet32(ds, edi + 152, eax);
    eax = memoryAGet32(ds, esi + 156);
    memoryASet32(ds, edi + 156, eax);
    eax = memoryAGet32(ds, esi + 160);
    memoryASet32(ds, edi + 160, eax);
    eax = memoryAGet32(ds, esi + 164);
    memoryASet32(ds, edi + 164, eax);
    eax = memoryAGet32(ds, esi + 168);
    memoryASet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, esi + 172);
    memoryASet32(ds, edi + 172, eax);
    eax = memoryAGet32(ds, esi + 176);
    memoryASet32(ds, edi + 176, eax);
    eax = memoryAGet32(ds, esi + 180);
    memoryASet32(ds, edi + 180, eax);
    eax = memoryAGet32(ds, esi + 184);
    memoryASet32(ds, edi + 184, eax);
    eax = memoryAGet32(ds, esi + 188);
    memoryASet32(ds, edi + 188, eax);
    eax = memoryAGet32(ds, esi + 192);
    memoryASet32(ds, edi + 192, eax);
    eax = memoryAGet32(ds, esi + 196);
    memoryASet32(ds, edi + 196, eax);
    eax = memoryAGet32(ds, esi + 200);
    memoryASet32(ds, edi + 200, eax);
    eax = memoryAGet32(ds, esi + 204);
    memoryASet32(ds, edi + 204, eax);
    eax = memoryAGet32(ds, esi + 208);
    memoryASet32(ds, edi + 208, eax);
    eax = memoryAGet32(ds, esi + 212);
    memoryASet32(ds, edi + 212, eax);
    eax = memoryAGet32(ds, esi + 216);
    memoryASet32(ds, edi + 216, eax);
    eax = memoryAGet32(ds, esi + 220);
    memoryASet32(ds, edi + 220, eax);
    eax = memoryAGet32(ds, esi + 224);
    memoryASet32(ds, edi + 224, eax);
    eax = memoryAGet32(ds, esi + 228);
    memoryASet32(ds, edi + 228, eax);
    eax = memoryAGet32(ds, esi + 232);
    memoryASet32(ds, edi + 232, eax);
    eax = memoryAGet32(ds, esi + 236);
    memoryASet32(ds, edi + 236, eax);
    eax = memoryAGet32(ds, esi + 240);
    memoryASet32(ds, edi + 240, eax);
    eax = memoryAGet32(ds, esi + 244);
    memoryASet32(ds, edi + 244, eax);
    eax = memoryAGet32(ds, esi + 248);
    memoryASet32(ds, edi + 248, eax);
    eax = memoryAGet32(ds, esi + 252);
    memoryASet32(ds, edi + 252, eax);
    eax = memoryAGet32(ds, esi + 256);
    memoryASet32(ds, edi + 256, eax);
    eax = memoryAGet32(ds, esi + 260);
    memoryASet32(ds, edi + 260, eax);
    eax = memoryAGet32(ds, esi + 264);
    memoryASet32(ds, edi + 264, eax);
    eax = memoryAGet32(ds, esi + 268);
    memoryASet32(ds, edi + 268, eax);
    eax = memoryAGet32(ds, esi + 272);
    memoryASet32(ds, edi + 272, eax);
    eax = memoryAGet32(ds, esi + 276);
    memoryASet32(ds, edi + 276, eax);
    eax = memoryAGet32(ds, esi + 280);
    memoryASet32(ds, edi + 280, eax);
    eax = memoryAGet32(ds, esi + 284);
    memoryASet32(ds, edi + 284, eax);
    eax = memoryAGet32(ds, esi + 288);
    memoryASet32(ds, edi + 288, eax);
    eax = memoryAGet32(ds, esi + 292);
    memoryASet32(ds, edi + 292, eax);
    eax = memoryAGet32(ds, esi + 296);
    memoryASet32(ds, edi + 296, eax);
    eax = memoryAGet32(ds, esi + 300);
    memoryASet32(ds, edi + 300, eax);
    eax = memoryAGet32(ds, esi + 304);
    memoryASet32(ds, edi + 304, eax);
    eax = memoryAGet32(ds, esi + 308);
    memoryASet32(ds, edi + 308, eax);
    eax = memoryAGet32(ds, esi + 312);
    memoryASet32(ds, edi + 312, eax);
    eax = memoryAGet32(ds, esi + 316);
    memoryASet32(ds, edi + 316, eax);
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_1c4768;
    stop("disassembly failed at 160:1c4a79 popal ");
    esp += 4;
}
void sub_1c4a7b() // 0160:1c4a7b +long
{
    esp -= 4;
    stop("disassembly failed at 160:1c4a7b pushal ");
    esi = eax;
    edi = edx;
    ch = 0xa8;
    edx = 0x000003c4;
    ebx = 0;
loc_1c4a89: // 0160:1c4a89
    al = 0x02;
    ah = 0x01;
    cl = bl;
    ah <<= cl;
    out16(dx, ax);
    eax = memoryAGet32(ds, ebx + esi);
    ah = memoryAGet(ds, ebx + esi + 4);
    memoryASet16(ds, edi, ax);
    eax = memoryAGet32(ds, ebx + esi + 8);
    ah = memoryAGet(ds, ebx + esi + 12);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, ebx + esi + 16);
    ah = memoryAGet(ds, ebx + esi + 20);
    memoryASet16(ds, edi + 4, ax);
    eax = memoryAGet32(ds, ebx + esi + 24);
    ah = memoryAGet(ds, ebx + esi + 28);
    memoryASet16(ds, edi + 6, ax);
    eax = memoryAGet32(ds, ebx + esi + 32);
    ah = memoryAGet(ds, ebx + esi + 36);
    memoryASet16(ds, edi + 8, ax);
    eax = memoryAGet32(ds, ebx + esi + 40);
    ah = memoryAGet(ds, ebx + esi + 44);
    memoryASet16(ds, edi + 10, ax);
    eax = memoryAGet32(ds, ebx + esi + 48);
    ah = memoryAGet(ds, ebx + esi + 52);
    memoryASet16(ds, edi + 12, ax);
    eax = memoryAGet32(ds, ebx + esi + 56);
    ah = memoryAGet(ds, ebx + esi + 60);
    memoryASet16(ds, edi + 14, ax);
    eax = memoryAGet32(ds, ebx + esi + 64);
    ah = memoryAGet(ds, ebx + esi + 68);
    memoryASet16(ds, edi + 16, ax);
    eax = memoryAGet32(ds, ebx + esi + 72);
    ah = memoryAGet(ds, ebx + esi + 76);
    memoryASet16(ds, edi + 18, ax);
    eax = memoryAGet32(ds, ebx + esi + 80);
    ah = memoryAGet(ds, ebx + esi + 84);
    memoryASet16(ds, edi + 20, ax);
    eax = memoryAGet32(ds, ebx + esi + 88);
    ah = memoryAGet(ds, ebx + esi + 92);
    memoryASet16(ds, edi + 22, ax);
    eax = memoryAGet32(ds, ebx + esi + 96);
    ah = memoryAGet(ds, ebx + esi + 100);
    memoryASet16(ds, edi + 24, ax);
    eax = memoryAGet32(ds, ebx + esi + 104);
    ah = memoryAGet(ds, ebx + esi + 108);
    memoryASet16(ds, edi + 26, ax);
    eax = memoryAGet32(ds, ebx + esi + 112);
    ah = memoryAGet(ds, ebx + esi + 116);
    memoryASet16(ds, edi + 28, ax);
    eax = memoryAGet32(ds, ebx + esi + 120);
    ah = memoryAGet(ds, ebx + esi + 124);
    memoryASet16(ds, edi + 30, ax);
    eax = memoryAGet32(ds, ebx + esi + 128);
    ah = memoryAGet(ds, ebx + esi + 132);
    memoryASet16(ds, edi + 32, ax);
    eax = memoryAGet32(ds, ebx + esi + 136);
    ah = memoryAGet(ds, ebx + esi + 140);
    memoryASet16(ds, edi + 34, ax);
    eax = memoryAGet32(ds, ebx + esi + 144);
    ah = memoryAGet(ds, ebx + esi + 148);
    memoryASet16(ds, edi + 36, ax);
    eax = memoryAGet32(ds, ebx + esi + 152);
    ah = memoryAGet(ds, ebx + esi + 156);
    memoryASet16(ds, edi + 38, ax);
    eax = memoryAGet32(ds, ebx + esi + 160);
    ah = memoryAGet(ds, ebx + esi + 164);
    memoryASet16(ds, edi + 40, ax);
    eax = memoryAGet32(ds, ebx + esi + 168);
    ah = memoryAGet(ds, ebx + esi + 172);
    memoryASet16(ds, edi + 42, ax);
    eax = memoryAGet32(ds, ebx + esi + 176);
    ah = memoryAGet(ds, ebx + esi + 180);
    memoryASet16(ds, edi + 44, ax);
    eax = memoryAGet32(ds, ebx + esi + 184);
    ah = memoryAGet(ds, ebx + esi + 188);
    memoryASet16(ds, edi + 46, ax);
    eax = memoryAGet32(ds, ebx + esi + 192);
    ah = memoryAGet(ds, ebx + esi + 196);
    memoryASet16(ds, edi + 48, ax);
    eax = memoryAGet32(ds, ebx + esi + 200);
    ah = memoryAGet(ds, ebx + esi + 204);
    memoryASet16(ds, edi + 50, ax);
    eax = memoryAGet32(ds, ebx + esi + 208);
    ah = memoryAGet(ds, ebx + esi + 212);
    memoryASet16(ds, edi + 52, ax);
    eax = memoryAGet32(ds, ebx + esi + 216);
    ah = memoryAGet(ds, ebx + esi + 220);
    memoryASet16(ds, edi + 54, ax);
    eax = memoryAGet32(ds, ebx + esi + 224);
    ah = memoryAGet(ds, ebx + esi + 228);
    memoryASet16(ds, edi + 56, ax);
    eax = memoryAGet32(ds, ebx + esi + 232);
    ah = memoryAGet(ds, ebx + esi + 236);
    memoryASet16(ds, edi + 58, ax);
    eax = memoryAGet32(ds, ebx + esi + 240);
    ah = memoryAGet(ds, ebx + esi + 244);
    memoryASet16(ds, edi + 60, ax);
    eax = memoryAGet32(ds, ebx + esi + 248);
    ah = memoryAGet(ds, ebx + esi + 252);
    memoryASet16(ds, edi + 62, ax);
    eax = memoryAGet32(ds, ebx + esi + 256);
    ah = memoryAGet(ds, ebx + esi + 260);
    memoryASet16(ds, edi + 64, ax);
    eax = memoryAGet32(ds, ebx + esi + 264);
    ah = memoryAGet(ds, ebx + esi + 268);
    memoryASet16(ds, edi + 66, ax);
    eax = memoryAGet32(ds, ebx + esi + 272);
    ah = memoryAGet(ds, ebx + esi + 276);
    memoryASet16(ds, edi + 68, ax);
    eax = memoryAGet32(ds, ebx + esi + 280);
    ah = memoryAGet(ds, ebx + esi + 284);
    memoryASet16(ds, edi + 70, ax);
    eax = memoryAGet32(ds, ebx + esi + 288);
    ah = memoryAGet(ds, ebx + esi + 292);
    memoryASet16(ds, edi + 72, ax);
    eax = memoryAGet32(ds, ebx + esi + 296);
    ah = memoryAGet(ds, ebx + esi + 300);
    memoryASet16(ds, edi + 74, ax);
    eax = memoryAGet32(ds, ebx + esi + 304);
    ah = memoryAGet(ds, ebx + esi + 308);
    memoryASet16(ds, edi + 76, ax);
    eax = memoryAGet32(ds, ebx + esi + 312);
    ah = memoryAGet(ds, ebx + esi + 316);
    memoryASet16(ds, edi + 78, ax);
    ebx++;
    ebx &= 0x00000003;
    if (ebx)
        goto loc_1c4a89;
    esi += 0x00000140;
    edi += 0x00000050;
    ch--;
    if (ch)
        goto loc_1c4a89;
    stop("disassembly failed at 160:1c4d1c popal ");
    esp += 4;
}
void sub_1c4d1e() // 0160:1c4d1e +long
{
    esp -= 4;
    stop("disassembly failed at 160:1c4d1e pushal ");
    esi = eax;
    edi = edx;
    ebx = 0x00000000;
loc_1c4d28: // 0160:1c4d28
    ecx = ebx;
    ah = 0x01;
    ah <<= cl;
    al = 0x02;
    edx = 0x000003c4;
    out16(dx, ax);
    ecx = 0x00001f40;
loc_1c4d3c: // 0160:1c4d3c
    eax = memoryAGet32(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet16(ds, edi, ax);
    esi += 0x00000008;
    edi += 0x00000002;
    ecx--;
    if (ecx)
        goto loc_1c4d3c;
    esi -= 0x0000f9ff;
    edi -= 0x00003e80;
    ebx++;
    if (ebx != 0x00000004)
        goto loc_1c4d28;
    stop("disassembly failed at 160:1c4d5f popal ");
    esp += 4;
}
void sub_1c4d61() // 0160:1c4d61 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xfffffffc;
    stop("disassembly failed at 160:1c4d67 pushal ");
    esi = eax;
    edi = edx;
    memoryASet32(ss, ebp + -4, ebx);
    ebx = 0x00000000;
loc_1c4d74: // 0160:1c4d74
    ecx = ebx;
    ah = 0x01;
    ah <<= cl;
    al = 0x02;
    edx = 0x000003c4;
    out16(dx, ax);
    ecx = memoryAGet32(ss, ebp + -4);
loc_1c4d86: // 0160:1c4d86
    eax = memoryAGet32(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet16(ds, edi, ax);
    esi += 0x00000008;
    edi += 0x00000002;
    ecx--;
    if (ecx)
        goto loc_1c4d86;
    eax = memoryAGet32(ss, ebp + -4);
    eax += eax;
    edi -= eax;
    eax <<= 2;
    eax--;
    esi -= eax;
    ebx++;
    if (ebx != 0x00000004)
        goto loc_1c4d74;
    stop("disassembly failed at 160:1c4daa popal ");
    stop("disassembly failed at 160:1c4dab leave ");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c4e46() // 0160:1c4e46 +long
{
    esp -= 4;
    stop("disassembly failed at 160:1c4e46 pushal ");
    if (!ebx)
        goto loc_1c4e73;
    if (!ecx)
        goto loc_1c4e73;
    esi = eax;
    edi = edx;
    esi--;
    edi--;
loc_1c4e55: // 0160:1c4e55
    edx = ebx;
loc_1c4e57: // 0160:1c4e57
    al = memoryAGet(ds, edx + esi);
    if (al & 0x80)
        goto loc_1c4e61;
    memoryASet(ds, edx + edi, al);
loc_1c4e61: // 0160:1c4e61
    edx--;
    if (edx)
        goto loc_1c4e57;
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_1c4e55;
loc_1c4e73: // 0160:1c4e73
    stop("disassembly failed at 160:1c4e73 popal ");
    esp += 4;
}
void sub_1c4e75() // 0160:1c4e75 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xffffffec;
    stop("disassembly failed at 160:1c4e7b pushal ");
    eax = memoryAGet32(ss, ebp + 24);
    eax <<= 16;
    memoryASet32(ss, ebp + -16, eax);
    eax = memoryAGet32(ss, ebp + 24);
    eax >>= 16;
    memoryASet32(ss, ebp + -20, eax);
    if (memoryAGet32(ss, ebp + 16) == 0x00000000)
        goto loc_1c4ef0;
    if (memoryAGet32(ss, ebp + 20) == 0x00000000)
        goto loc_1c4ef0;
    esi = memoryAGet32(ss, ebp + 8);
    edi = memoryAGet32(ss, ebp + 12);
    eax = 0x00000140;
    eax -= memoryAGet32(ss, ebp + 16);
    memoryASet32(ss, ebp + -12, eax);
    memoryASet32(ss, ebp + -8, 0x00000000);
    ecx = 0;
loc_1c4eb4: // 0160:1c4eb4
    edx = 0;
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ss, ebp + -4, eax);
    push32(esi);
loc_1c4ebd: // 0160:1c4ebd
    al = memoryAGet(ds, esi);
    if (al & 0x80)
        goto loc_1c4ec5;
    memoryASet(ds, edi, al);
loc_1c4ec5: // 0160:1c4ec5
    edi++;
    flags.carry = (edx + memoryAGet32(ss, ebp + -16)) >= 0x100000000ull;
    edx += memoryAGet32(ss, ebp + -16);
    esi += memoryAGet32(ss, ebp + -20) + flags.carry;
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) - 1);
    if (memoryAGet32(ss, ebp + -4))
        goto loc_1c4ebd;
    esi = pop32();
    eax = memoryAGet32(ss, ebp + -20);
    flags.carry = (ecx + memoryAGet32(ss, ebp + -16)) >= 0x100000000ull;
    ecx += memoryAGet32(ss, ebp + -16);
    memoryASet32(ss, ebp + -8, memoryAGet32(ss, ebp + -8) + (eax + flags.carry));
    if (!memoryAGet32(ss, ebp + -8))
        goto loc_1c4ee8;
loc_1c4edd: // 0160:1c4edd
    esi += 0x00000140;
    memoryASet32(ss, ebp + -8, memoryAGet32(ss, ebp + -8) - 1);
    if (memoryAGet32(ss, ebp + -8))
        goto loc_1c4edd;
loc_1c4ee8: // 0160:1c4ee8
    edi += memoryAGet32(ss, ebp + -12);
    memoryASet32(ss, ebp + 20, memoryAGet32(ss, ebp + 20) - 1);
    if (memoryAGet32(ss, ebp + 20))
        goto loc_1c4eb4;
loc_1c4ef0: // 0160:1c4ef0
    stop("disassembly failed at 160:1c4ef0 popal ");
    stop("disassembly failed at 160:1c4ef1 leave ");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c4ef3() // 0160:1c4ef3 +long
{
    esp -= 4;
    stop("disassembly failed at 160:1c4ef3 pushal ");
    esi = eax;
    edi = edx;
    ecx = 0x00000009;
    goto loc_1c4eff;
loc_1c4eff: // 0160:1c4eff
    goto loc_1c4f01;
loc_1c4f01: // 0160:1c4f01
    goto loc_1c4f04;
    // gap 1 bytes
loc_1c4f04: // 0160:1c4f04
    eax = memoryAGet32(ds, esi);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c4f3b;
    edx = memoryAGet32(ds, edi);
    if (eax == 0x80808080)
        goto loc_1c4f3b;
    if (al & 0x80)
        goto loc_1c4f1e;
    dl = al;
loc_1c4f1e: // 0160:1c4f1e
    if (ah & 0x80)
        goto loc_1c4f25;
    dh = ah;
loc_1c4f25: // 0160:1c4f25
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c4f31;
    dl = al;
loc_1c4f31: // 0160:1c4f31
    if (ah & 0x80)
        goto loc_1c4f38;
    dh = ah;
loc_1c4f38: // 0160:1c4f38
    edx = rol32(edx, 0x10);
loc_1c4f3b: // 0160:1c4f3b
    memoryASet32(ds, edi, edx);
    eax = memoryAGet32(ds, esi + 4);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c4f76;
    edx = memoryAGet32(ds, edi + 4);
    if (eax == 0x80808080)
        goto loc_1c4f76;
    if (al & 0x80)
        goto loc_1c4f59;
    dl = al;
loc_1c4f59: // 0160:1c4f59
    if (ah & 0x80)
        goto loc_1c4f60;
    dh = ah;
loc_1c4f60: // 0160:1c4f60
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c4f6c;
    dl = al;
loc_1c4f6c: // 0160:1c4f6c
    if (ah & 0x80)
        goto loc_1c4f73;
    dh = ah;
loc_1c4f73: // 0160:1c4f73
    edx = rol32(edx, 0x10);
loc_1c4f76: // 0160:1c4f76
    memoryASet32(ds, edi + 4, edx);
    eax = memoryAGet32(ds, esi + 8);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c4fb2;
    edx = memoryAGet32(ds, edi + 8);
    if (eax == 0x80808080)
        goto loc_1c4fb2;
    if (al & 0x80)
        goto loc_1c4f95;
    dl = al;
loc_1c4f95: // 0160:1c4f95
    if (ah & 0x80)
        goto loc_1c4f9c;
    dh = ah;
loc_1c4f9c: // 0160:1c4f9c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c4fa8;
    dl = al;
loc_1c4fa8: // 0160:1c4fa8
    if (ah & 0x80)
        goto loc_1c4faf;
    dh = ah;
loc_1c4faf: // 0160:1c4faf
    edx = rol32(edx, 0x10);
loc_1c4fb2: // 0160:1c4fb2
    memoryASet32(ds, edi + 8, edx);
    eax = memoryAGet32(ds, esi + 12);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c4fee;
    edx = memoryAGet32(ds, edi + 12);
    if (eax == 0x80808080)
        goto loc_1c4fee;
    if (al & 0x80)
        goto loc_1c4fd1;
    dl = al;
loc_1c4fd1: // 0160:1c4fd1
    if (ah & 0x80)
        goto loc_1c4fd8;
    dh = ah;
loc_1c4fd8: // 0160:1c4fd8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c4fe4;
    dl = al;
loc_1c4fe4: // 0160:1c4fe4
    if (ah & 0x80)
        goto loc_1c4feb;
    dh = ah;
loc_1c4feb: // 0160:1c4feb
    edx = rol32(edx, 0x10);
loc_1c4fee: // 0160:1c4fee
    memoryASet32(ds, edi + 12, edx);
    eax = memoryAGet32(ds, esi + 16);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c502a;
    edx = memoryAGet32(ds, edi + 16);
    if (eax == 0x80808080)
        goto loc_1c502a;
    if (al & 0x80)
        goto loc_1c500d;
    dl = al;
loc_1c500d: // 0160:1c500d
    if (ah & 0x80)
        goto loc_1c5014;
    dh = ah;
loc_1c5014: // 0160:1c5014
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5020;
    dl = al;
loc_1c5020: // 0160:1c5020
    if (ah & 0x80)
        goto loc_1c5027;
    dh = ah;
loc_1c5027: // 0160:1c5027
    edx = rol32(edx, 0x10);
loc_1c502a: // 0160:1c502a
    memoryASet32(ds, edi + 16, edx);
    eax = memoryAGet32(ds, esi + 20);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5066;
    edx = memoryAGet32(ds, edi + 20);
    if (eax == 0x80808080)
        goto loc_1c5066;
    if (al & 0x80)
        goto loc_1c5049;
    dl = al;
loc_1c5049: // 0160:1c5049
    if (ah & 0x80)
        goto loc_1c5050;
    dh = ah;
loc_1c5050: // 0160:1c5050
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c505c;
    dl = al;
loc_1c505c: // 0160:1c505c
    if (ah & 0x80)
        goto loc_1c5063;
    dh = ah;
loc_1c5063: // 0160:1c5063
    edx = rol32(edx, 0x10);
loc_1c5066: // 0160:1c5066
    memoryASet32(ds, edi + 20, edx);
    eax = memoryAGet32(ds, esi + 24);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c50a2;
    edx = memoryAGet32(ds, edi + 24);
    if (eax == 0x80808080)
        goto loc_1c50a2;
    if (al & 0x80)
        goto loc_1c5085;
    dl = al;
loc_1c5085: // 0160:1c5085
    if (ah & 0x80)
        goto loc_1c508c;
    dh = ah;
loc_1c508c: // 0160:1c508c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5098;
    dl = al;
loc_1c5098: // 0160:1c5098
    if (ah & 0x80)
        goto loc_1c509f;
    dh = ah;
loc_1c509f: // 0160:1c509f
    edx = rol32(edx, 0x10);
loc_1c50a2: // 0160:1c50a2
    memoryASet32(ds, edi + 24, edx);
    eax = memoryAGet32(ds, esi + 28);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c50de;
    edx = memoryAGet32(ds, edi + 28);
    if (eax == 0x80808080)
        goto loc_1c50de;
    if (al & 0x80)
        goto loc_1c50c1;
    dl = al;
loc_1c50c1: // 0160:1c50c1
    if (ah & 0x80)
        goto loc_1c50c8;
    dh = ah;
loc_1c50c8: // 0160:1c50c8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c50d4;
    dl = al;
loc_1c50d4: // 0160:1c50d4
    if (ah & 0x80)
        goto loc_1c50db;
    dh = ah;
loc_1c50db: // 0160:1c50db
    edx = rol32(edx, 0x10);
loc_1c50de: // 0160:1c50de
    memoryASet32(ds, edi + 28, edx);
    eax = memoryAGet32(ds, esi + 32);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c511a;
    edx = memoryAGet32(ds, edi + 32);
    if (eax == 0x80808080)
        goto loc_1c511a;
    if (al & 0x80)
        goto loc_1c50fd;
    dl = al;
loc_1c50fd: // 0160:1c50fd
    if (ah & 0x80)
        goto loc_1c5104;
    dh = ah;
loc_1c5104: // 0160:1c5104
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5110;
    dl = al;
loc_1c5110: // 0160:1c5110
    if (ah & 0x80)
        goto loc_1c5117;
    dh = ah;
loc_1c5117: // 0160:1c5117
    edx = rol32(edx, 0x10);
loc_1c511a: // 0160:1c511a
    memoryASet32(ds, edi + 32, edx);
    eax = memoryAGet32(ds, esi + 36);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5156;
    edx = memoryAGet32(ds, edi + 36);
    if (eax == 0x80808080)
        goto loc_1c5156;
    if (al & 0x80)
        goto loc_1c5139;
    dl = al;
loc_1c5139: // 0160:1c5139
    if (ah & 0x80)
        goto loc_1c5140;
    dh = ah;
loc_1c5140: // 0160:1c5140
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c514c;
    dl = al;
loc_1c514c: // 0160:1c514c
    if (ah & 0x80)
        goto loc_1c5153;
    dh = ah;
loc_1c5153: // 0160:1c5153
    edx = rol32(edx, 0x10);
loc_1c5156: // 0160:1c5156
    memoryASet32(ds, edi + 36, edx);
    eax = memoryAGet32(ds, esi + 40);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5192;
    edx = memoryAGet32(ds, edi + 40);
    if (eax == 0x80808080)
        goto loc_1c5192;
    if (al & 0x80)
        goto loc_1c5175;
    dl = al;
loc_1c5175: // 0160:1c5175
    if (ah & 0x80)
        goto loc_1c517c;
    dh = ah;
loc_1c517c: // 0160:1c517c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5188;
    dl = al;
loc_1c5188: // 0160:1c5188
    if (ah & 0x80)
        goto loc_1c518f;
    dh = ah;
loc_1c518f: // 0160:1c518f
    edx = rol32(edx, 0x10);
loc_1c5192: // 0160:1c5192
    memoryASet32(ds, edi + 40, edx);
    eax = memoryAGet32(ds, esi + 44);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c51ce;
    edx = memoryAGet32(ds, edi + 44);
    if (eax == 0x80808080)
        goto loc_1c51ce;
    if (al & 0x80)
        goto loc_1c51b1;
    dl = al;
loc_1c51b1: // 0160:1c51b1
    if (ah & 0x80)
        goto loc_1c51b8;
    dh = ah;
loc_1c51b8: // 0160:1c51b8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c51c4;
    dl = al;
loc_1c51c4: // 0160:1c51c4
    if (ah & 0x80)
        goto loc_1c51cb;
    dh = ah;
loc_1c51cb: // 0160:1c51cb
    edx = rol32(edx, 0x10);
loc_1c51ce: // 0160:1c51ce
    memoryASet32(ds, edi + 44, edx);
    eax = memoryAGet32(ds, esi + 48);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c520a;
    edx = memoryAGet32(ds, edi + 48);
    if (eax == 0x80808080)
        goto loc_1c520a;
    if (al & 0x80)
        goto loc_1c51ed;
    dl = al;
loc_1c51ed: // 0160:1c51ed
    if (ah & 0x80)
        goto loc_1c51f4;
    dh = ah;
loc_1c51f4: // 0160:1c51f4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5200;
    dl = al;
loc_1c5200: // 0160:1c5200
    if (ah & 0x80)
        goto loc_1c5207;
    dh = ah;
loc_1c5207: // 0160:1c5207
    edx = rol32(edx, 0x10);
loc_1c520a: // 0160:1c520a
    memoryASet32(ds, edi + 48, edx);
    eax = memoryAGet32(ds, esi + 52);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5246;
    edx = memoryAGet32(ds, edi + 52);
    if (eax == 0x80808080)
        goto loc_1c5246;
    if (al & 0x80)
        goto loc_1c5229;
    dl = al;
loc_1c5229: // 0160:1c5229
    if (ah & 0x80)
        goto loc_1c5230;
    dh = ah;
loc_1c5230: // 0160:1c5230
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c523c;
    dl = al;
loc_1c523c: // 0160:1c523c
    if (ah & 0x80)
        goto loc_1c5243;
    dh = ah;
loc_1c5243: // 0160:1c5243
    edx = rol32(edx, 0x10);
loc_1c5246: // 0160:1c5246
    memoryASet32(ds, edi + 52, edx);
    eax = memoryAGet32(ds, esi + 56);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5282;
    edx = memoryAGet32(ds, edi + 56);
    if (eax == 0x80808080)
        goto loc_1c5282;
    if (al & 0x80)
        goto loc_1c5265;
    dl = al;
loc_1c5265: // 0160:1c5265
    if (ah & 0x80)
        goto loc_1c526c;
    dh = ah;
loc_1c526c: // 0160:1c526c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5278;
    dl = al;
loc_1c5278: // 0160:1c5278
    if (ah & 0x80)
        goto loc_1c527f;
    dh = ah;
loc_1c527f: // 0160:1c527f
    edx = rol32(edx, 0x10);
loc_1c5282: // 0160:1c5282
    memoryASet32(ds, edi + 56, edx);
    eax = memoryAGet32(ds, esi + 60);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c52be;
    edx = memoryAGet32(ds, edi + 60);
    if (eax == 0x80808080)
        goto loc_1c52be;
    if (al & 0x80)
        goto loc_1c52a1;
    dl = al;
loc_1c52a1: // 0160:1c52a1
    if (ah & 0x80)
        goto loc_1c52a8;
    dh = ah;
loc_1c52a8: // 0160:1c52a8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c52b4;
    dl = al;
loc_1c52b4: // 0160:1c52b4
    if (ah & 0x80)
        goto loc_1c52bb;
    dh = ah;
loc_1c52bb: // 0160:1c52bb
    edx = rol32(edx, 0x10);
loc_1c52be: // 0160:1c52be
    memoryASet32(ds, edi + 60, edx);
    eax = memoryAGet32(ds, esi + 64);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c52fa;
    edx = memoryAGet32(ds, edi + 64);
    if (eax == 0x80808080)
        goto loc_1c52fa;
    if (al & 0x80)
        goto loc_1c52dd;
    dl = al;
loc_1c52dd: // 0160:1c52dd
    if (ah & 0x80)
        goto loc_1c52e4;
    dh = ah;
loc_1c52e4: // 0160:1c52e4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c52f0;
    dl = al;
loc_1c52f0: // 0160:1c52f0
    if (ah & 0x80)
        goto loc_1c52f7;
    dh = ah;
loc_1c52f7: // 0160:1c52f7
    edx = rol32(edx, 0x10);
loc_1c52fa: // 0160:1c52fa
    memoryASet32(ds, edi + 64, edx);
    eax = memoryAGet32(ds, esi + 68);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5336;
    edx = memoryAGet32(ds, edi + 68);
    if (eax == 0x80808080)
        goto loc_1c5336;
    if (al & 0x80)
        goto loc_1c5319;
    dl = al;
loc_1c5319: // 0160:1c5319
    if (ah & 0x80)
        goto loc_1c5320;
    dh = ah;
loc_1c5320: // 0160:1c5320
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c532c;
    dl = al;
loc_1c532c: // 0160:1c532c
    if (ah & 0x80)
        goto loc_1c5333;
    dh = ah;
loc_1c5333: // 0160:1c5333
    edx = rol32(edx, 0x10);
loc_1c5336: // 0160:1c5336
    memoryASet32(ds, edi + 68, edx);
    eax = memoryAGet32(ds, esi + 72);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5372;
    edx = memoryAGet32(ds, edi + 72);
    if (eax == 0x80808080)
        goto loc_1c5372;
    if (al & 0x80)
        goto loc_1c5355;
    dl = al;
loc_1c5355: // 0160:1c5355
    if (ah & 0x80)
        goto loc_1c535c;
    dh = ah;
loc_1c535c: // 0160:1c535c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5368;
    dl = al;
loc_1c5368: // 0160:1c5368
    if (ah & 0x80)
        goto loc_1c536f;
    dh = ah;
loc_1c536f: // 0160:1c536f
    edx = rol32(edx, 0x10);
loc_1c5372: // 0160:1c5372
    memoryASet32(ds, edi + 72, edx);
    eax = memoryAGet32(ds, esi + 76);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c53ae;
    edx = memoryAGet32(ds, edi + 76);
    if (eax == 0x80808080)
        goto loc_1c53ae;
    if (al & 0x80)
        goto loc_1c5391;
    dl = al;
loc_1c5391: // 0160:1c5391
    if (ah & 0x80)
        goto loc_1c5398;
    dh = ah;
loc_1c5398: // 0160:1c5398
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c53a4;
    dl = al;
loc_1c53a4: // 0160:1c53a4
    if (ah & 0x80)
        goto loc_1c53ab;
    dh = ah;
loc_1c53ab: // 0160:1c53ab
    edx = rol32(edx, 0x10);
loc_1c53ae: // 0160:1c53ae
    memoryASet32(ds, edi + 76, edx);
    eax = memoryAGet32(ds, esi + 80);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c53ea;
    edx = memoryAGet32(ds, edi + 80);
    if (eax == 0x80808080)
        goto loc_1c53ea;
    if (al & 0x80)
        goto loc_1c53cd;
    dl = al;
loc_1c53cd: // 0160:1c53cd
    if (ah & 0x80)
        goto loc_1c53d4;
    dh = ah;
loc_1c53d4: // 0160:1c53d4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c53e0;
    dl = al;
loc_1c53e0: // 0160:1c53e0
    if (ah & 0x80)
        goto loc_1c53e7;
    dh = ah;
loc_1c53e7: // 0160:1c53e7
    edx = rol32(edx, 0x10);
loc_1c53ea: // 0160:1c53ea
    memoryASet32(ds, edi + 80, edx);
    eax = memoryAGet32(ds, esi + 84);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5426;
    edx = memoryAGet32(ds, edi + 84);
    if (eax == 0x80808080)
        goto loc_1c5426;
    if (al & 0x80)
        goto loc_1c5409;
    dl = al;
loc_1c5409: // 0160:1c5409
    if (ah & 0x80)
        goto loc_1c5410;
    dh = ah;
loc_1c5410: // 0160:1c5410
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c541c;
    dl = al;
loc_1c541c: // 0160:1c541c
    if (ah & 0x80)
        goto loc_1c5423;
    dh = ah;
loc_1c5423: // 0160:1c5423
    edx = rol32(edx, 0x10);
loc_1c5426: // 0160:1c5426
    memoryASet32(ds, edi + 84, edx);
    eax = memoryAGet32(ds, esi + 88);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5462;
    edx = memoryAGet32(ds, edi + 88);
    if (eax == 0x80808080)
        goto loc_1c5462;
    if (al & 0x80)
        goto loc_1c5445;
    dl = al;
loc_1c5445: // 0160:1c5445
    if (ah & 0x80)
        goto loc_1c544c;
    dh = ah;
loc_1c544c: // 0160:1c544c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5458;
    dl = al;
loc_1c5458: // 0160:1c5458
    if (ah & 0x80)
        goto loc_1c545f;
    dh = ah;
loc_1c545f: // 0160:1c545f
    edx = rol32(edx, 0x10);
loc_1c5462: // 0160:1c5462
    memoryASet32(ds, edi + 88, edx);
    eax = memoryAGet32(ds, esi + 92);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c549e;
    edx = memoryAGet32(ds, edi + 92);
    if (eax == 0x80808080)
        goto loc_1c549e;
    if (al & 0x80)
        goto loc_1c5481;
    dl = al;
loc_1c5481: // 0160:1c5481
    if (ah & 0x80)
        goto loc_1c5488;
    dh = ah;
loc_1c5488: // 0160:1c5488
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5494;
    dl = al;
loc_1c5494: // 0160:1c5494
    if (ah & 0x80)
        goto loc_1c549b;
    dh = ah;
loc_1c549b: // 0160:1c549b
    edx = rol32(edx, 0x10);
loc_1c549e: // 0160:1c549e
    memoryASet32(ds, edi + 92, edx);
    eax = memoryAGet32(ds, esi + 96);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c54da;
    edx = memoryAGet32(ds, edi + 96);
    if (eax == 0x80808080)
        goto loc_1c54da;
    if (al & 0x80)
        goto loc_1c54bd;
    dl = al;
loc_1c54bd: // 0160:1c54bd
    if (ah & 0x80)
        goto loc_1c54c4;
    dh = ah;
loc_1c54c4: // 0160:1c54c4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c54d0;
    dl = al;
loc_1c54d0: // 0160:1c54d0
    if (ah & 0x80)
        goto loc_1c54d7;
    dh = ah;
loc_1c54d7: // 0160:1c54d7
    edx = rol32(edx, 0x10);
loc_1c54da: // 0160:1c54da
    memoryASet32(ds, edi + 96, edx);
    eax = memoryAGet32(ds, esi + 100);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5516;
    edx = memoryAGet32(ds, edi + 100);
    if (eax == 0x80808080)
        goto loc_1c5516;
    if (al & 0x80)
        goto loc_1c54f9;
    dl = al;
loc_1c54f9: // 0160:1c54f9
    if (ah & 0x80)
        goto loc_1c5500;
    dh = ah;
loc_1c5500: // 0160:1c5500
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c550c;
    dl = al;
loc_1c550c: // 0160:1c550c
    if (ah & 0x80)
        goto loc_1c5513;
    dh = ah;
loc_1c5513: // 0160:1c5513
    edx = rol32(edx, 0x10);
loc_1c5516: // 0160:1c5516
    memoryASet32(ds, edi + 100, edx);
    eax = memoryAGet32(ds, esi + 104);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5552;
    edx = memoryAGet32(ds, edi + 104);
    if (eax == 0x80808080)
        goto loc_1c5552;
    if (al & 0x80)
        goto loc_1c5535;
    dl = al;
loc_1c5535: // 0160:1c5535
    if (ah & 0x80)
        goto loc_1c553c;
    dh = ah;
loc_1c553c: // 0160:1c553c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5548;
    dl = al;
loc_1c5548: // 0160:1c5548
    if (ah & 0x80)
        goto loc_1c554f;
    dh = ah;
loc_1c554f: // 0160:1c554f
    edx = rol32(edx, 0x10);
loc_1c5552: // 0160:1c5552
    memoryASet32(ds, edi + 104, edx);
    eax = memoryAGet32(ds, esi + 108);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c558e;
    edx = memoryAGet32(ds, edi + 108);
    if (eax == 0x80808080)
        goto loc_1c558e;
    if (al & 0x80)
        goto loc_1c5571;
    dl = al;
loc_1c5571: // 0160:1c5571
    if (ah & 0x80)
        goto loc_1c5578;
    dh = ah;
loc_1c5578: // 0160:1c5578
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5584;
    dl = al;
loc_1c5584: // 0160:1c5584
    if (ah & 0x80)
        goto loc_1c558b;
    dh = ah;
loc_1c558b: // 0160:1c558b
    edx = rol32(edx, 0x10);
loc_1c558e: // 0160:1c558e
    memoryASet32(ds, edi + 108, edx);
    eax = memoryAGet32(ds, esi + 112);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c55ca;
    edx = memoryAGet32(ds, edi + 112);
    if (eax == 0x80808080)
        goto loc_1c55ca;
    if (al & 0x80)
        goto loc_1c55ad;
    dl = al;
loc_1c55ad: // 0160:1c55ad
    if (ah & 0x80)
        goto loc_1c55b4;
    dh = ah;
loc_1c55b4: // 0160:1c55b4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c55c0;
    dl = al;
loc_1c55c0: // 0160:1c55c0
    if (ah & 0x80)
        goto loc_1c55c7;
    dh = ah;
loc_1c55c7: // 0160:1c55c7
    edx = rol32(edx, 0x10);
loc_1c55ca: // 0160:1c55ca
    memoryASet32(ds, edi + 112, edx);
    eax = memoryAGet32(ds, esi + 116);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5606;
    edx = memoryAGet32(ds, edi + 116);
    if (eax == 0x80808080)
        goto loc_1c5606;
    if (al & 0x80)
        goto loc_1c55e9;
    dl = al;
loc_1c55e9: // 0160:1c55e9
    if (ah & 0x80)
        goto loc_1c55f0;
    dh = ah;
loc_1c55f0: // 0160:1c55f0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c55fc;
    dl = al;
loc_1c55fc: // 0160:1c55fc
    if (ah & 0x80)
        goto loc_1c5603;
    dh = ah;
loc_1c5603: // 0160:1c5603
    edx = rol32(edx, 0x10);
loc_1c5606: // 0160:1c5606
    memoryASet32(ds, edi + 116, edx);
    eax = memoryAGet32(ds, esi + 120);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5642;
    edx = memoryAGet32(ds, edi + 120);
    if (eax == 0x80808080)
        goto loc_1c5642;
    if (al & 0x80)
        goto loc_1c5625;
    dl = al;
loc_1c5625: // 0160:1c5625
    if (ah & 0x80)
        goto loc_1c562c;
    dh = ah;
loc_1c562c: // 0160:1c562c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5638;
    dl = al;
loc_1c5638: // 0160:1c5638
    if (ah & 0x80)
        goto loc_1c563f;
    dh = ah;
loc_1c563f: // 0160:1c563f
    edx = rol32(edx, 0x10);
loc_1c5642: // 0160:1c5642
    memoryASet32(ds, edi + 120, edx);
    eax = memoryAGet32(ds, esi + 124);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c567e;
    edx = memoryAGet32(ds, edi + 124);
    if (eax == 0x80808080)
        goto loc_1c567e;
    if (al & 0x80)
        goto loc_1c5661;
    dl = al;
loc_1c5661: // 0160:1c5661
    if (ah & 0x80)
        goto loc_1c5668;
    dh = ah;
loc_1c5668: // 0160:1c5668
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5674;
    dl = al;
loc_1c5674: // 0160:1c5674
    if (ah & 0x80)
        goto loc_1c567b;
    dh = ah;
loc_1c567b: // 0160:1c567b
    edx = rol32(edx, 0x10);
loc_1c567e: // 0160:1c567e
    memoryASet32(ds, edi + 124, edx);
    eax = memoryAGet32(ds, esi + 128);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c56c0;
    edx = memoryAGet32(ds, edi + 128);
    if (eax == 0x80808080)
        goto loc_1c56c0;
    if (al & 0x80)
        goto loc_1c56a3;
    dl = al;
loc_1c56a3: // 0160:1c56a3
    if (ah & 0x80)
        goto loc_1c56aa;
    dh = ah;
loc_1c56aa: // 0160:1c56aa
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c56b6;
    dl = al;
loc_1c56b6: // 0160:1c56b6
    if (ah & 0x80)
        goto loc_1c56bd;
    dh = ah;
loc_1c56bd: // 0160:1c56bd
    edx = rol32(edx, 0x10);
loc_1c56c0: // 0160:1c56c0
    memoryASet32(ds, edi + 128, edx);
    eax = memoryAGet32(ds, esi + 132);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5705;
    edx = memoryAGet32(ds, edi + 132);
    if (eax == 0x80808080)
        goto loc_1c5705;
    if (al & 0x80)
        goto loc_1c56e8;
    dl = al;
loc_1c56e8: // 0160:1c56e8
    if (ah & 0x80)
        goto loc_1c56ef;
    dh = ah;
loc_1c56ef: // 0160:1c56ef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c56fb;
    dl = al;
loc_1c56fb: // 0160:1c56fb
    if (ah & 0x80)
        goto loc_1c5702;
    dh = ah;
loc_1c5702: // 0160:1c5702
    edx = rol32(edx, 0x10);
loc_1c5705: // 0160:1c5705
    memoryASet32(ds, edi + 132, edx);
    eax = memoryAGet32(ds, esi + 136);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c574a;
    edx = memoryAGet32(ds, edi + 136);
    if (eax == 0x80808080)
        goto loc_1c574a;
    if (al & 0x80)
        goto loc_1c572d;
    dl = al;
loc_1c572d: // 0160:1c572d
    if (ah & 0x80)
        goto loc_1c5734;
    dh = ah;
loc_1c5734: // 0160:1c5734
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5740;
    dl = al;
loc_1c5740: // 0160:1c5740
    if (ah & 0x80)
        goto loc_1c5747;
    dh = ah;
loc_1c5747: // 0160:1c5747
    edx = rol32(edx, 0x10);
loc_1c574a: // 0160:1c574a
    memoryASet32(ds, edi + 136, edx);
    eax = memoryAGet32(ds, esi + 140);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c578f;
    edx = memoryAGet32(ds, edi + 140);
    if (eax == 0x80808080)
        goto loc_1c578f;
    if (al & 0x80)
        goto loc_1c5772;
    dl = al;
loc_1c5772: // 0160:1c5772
    if (ah & 0x80)
        goto loc_1c5779;
    dh = ah;
loc_1c5779: // 0160:1c5779
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5785;
    dl = al;
loc_1c5785: // 0160:1c5785
    if (ah & 0x80)
        goto loc_1c578c;
    dh = ah;
loc_1c578c: // 0160:1c578c
    edx = rol32(edx, 0x10);
loc_1c578f: // 0160:1c578f
    memoryASet32(ds, edi + 140, edx);
    eax = memoryAGet32(ds, esi + 144);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c57d4;
    edx = memoryAGet32(ds, edi + 144);
    if (eax == 0x80808080)
        goto loc_1c57d4;
    if (al & 0x80)
        goto loc_1c57b7;
    dl = al;
loc_1c57b7: // 0160:1c57b7
    if (ah & 0x80)
        goto loc_1c57be;
    dh = ah;
loc_1c57be: // 0160:1c57be
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c57ca;
    dl = al;
loc_1c57ca: // 0160:1c57ca
    if (ah & 0x80)
        goto loc_1c57d1;
    dh = ah;
loc_1c57d1: // 0160:1c57d1
    edx = rol32(edx, 0x10);
loc_1c57d4: // 0160:1c57d4
    memoryASet32(ds, edi + 144, edx);
    eax = memoryAGet32(ds, esi + 148);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5819;
    edx = memoryAGet32(ds, edi + 148);
    if (eax == 0x80808080)
        goto loc_1c5819;
    if (al & 0x80)
        goto loc_1c57fc;
    dl = al;
loc_1c57fc: // 0160:1c57fc
    if (ah & 0x80)
        goto loc_1c5803;
    dh = ah;
loc_1c5803: // 0160:1c5803
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c580f;
    dl = al;
loc_1c580f: // 0160:1c580f
    if (ah & 0x80)
        goto loc_1c5816;
    dh = ah;
loc_1c5816: // 0160:1c5816
    edx = rol32(edx, 0x10);
loc_1c5819: // 0160:1c5819
    memoryASet32(ds, edi + 148, edx);
    eax = memoryAGet32(ds, esi + 152);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c585e;
    edx = memoryAGet32(ds, edi + 152);
    if (eax == 0x80808080)
        goto loc_1c585e;
    if (al & 0x80)
        goto loc_1c5841;
    dl = al;
loc_1c5841: // 0160:1c5841
    if (ah & 0x80)
        goto loc_1c5848;
    dh = ah;
loc_1c5848: // 0160:1c5848
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5854;
    dl = al;
loc_1c5854: // 0160:1c5854
    if (ah & 0x80)
        goto loc_1c585b;
    dh = ah;
loc_1c585b: // 0160:1c585b
    edx = rol32(edx, 0x10);
loc_1c585e: // 0160:1c585e
    memoryASet32(ds, edi + 152, edx);
    eax = memoryAGet32(ds, esi + 156);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c58a3;
    edx = memoryAGet32(ds, edi + 156);
    if (eax == 0x80808080)
        goto loc_1c58a3;
    if (al & 0x80)
        goto loc_1c5886;
    dl = al;
loc_1c5886: // 0160:1c5886
    if (ah & 0x80)
        goto loc_1c588d;
    dh = ah;
loc_1c588d: // 0160:1c588d
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5899;
    dl = al;
loc_1c5899: // 0160:1c5899
    if (ah & 0x80)
        goto loc_1c58a0;
    dh = ah;
loc_1c58a0: // 0160:1c58a0
    edx = rol32(edx, 0x10);
loc_1c58a3: // 0160:1c58a3
    memoryASet32(ds, edi + 156, edx);
    eax = memoryAGet32(ds, esi + 160);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c58e8;
    edx = memoryAGet32(ds, edi + 160);
    if (eax == 0x80808080)
        goto loc_1c58e8;
    if (al & 0x80)
        goto loc_1c58cb;
    dl = al;
loc_1c58cb: // 0160:1c58cb
    if (ah & 0x80)
        goto loc_1c58d2;
    dh = ah;
loc_1c58d2: // 0160:1c58d2
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c58de;
    dl = al;
loc_1c58de: // 0160:1c58de
    if (ah & 0x80)
        goto loc_1c58e5;
    dh = ah;
loc_1c58e5: // 0160:1c58e5
    edx = rol32(edx, 0x10);
loc_1c58e8: // 0160:1c58e8
    memoryASet32(ds, edi + 160, edx);
    eax = memoryAGet32(ds, esi + 164);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c592d;
    edx = memoryAGet32(ds, edi + 164);
    if (eax == 0x80808080)
        goto loc_1c592d;
    if (al & 0x80)
        goto loc_1c5910;
    dl = al;
loc_1c5910: // 0160:1c5910
    if (ah & 0x80)
        goto loc_1c5917;
    dh = ah;
loc_1c5917: // 0160:1c5917
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5923;
    dl = al;
loc_1c5923: // 0160:1c5923
    if (ah & 0x80)
        goto loc_1c592a;
    dh = ah;
loc_1c592a: // 0160:1c592a
    edx = rol32(edx, 0x10);
loc_1c592d: // 0160:1c592d
    memoryASet32(ds, edi + 164, edx);
    eax = memoryAGet32(ds, esi + 168);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5972;
    edx = memoryAGet32(ds, edi + 168);
    if (eax == 0x80808080)
        goto loc_1c5972;
    if (al & 0x80)
        goto loc_1c5955;
    dl = al;
loc_1c5955: // 0160:1c5955
    if (ah & 0x80)
        goto loc_1c595c;
    dh = ah;
loc_1c595c: // 0160:1c595c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5968;
    dl = al;
loc_1c5968: // 0160:1c5968
    if (ah & 0x80)
        goto loc_1c596f;
    dh = ah;
loc_1c596f: // 0160:1c596f
    edx = rol32(edx, 0x10);
loc_1c5972: // 0160:1c5972
    memoryASet32(ds, edi + 168, edx);
    eax = memoryAGet32(ds, esi + 172);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c59b7;
    edx = memoryAGet32(ds, edi + 172);
    if (eax == 0x80808080)
        goto loc_1c59b7;
    if (al & 0x80)
        goto loc_1c599a;
    dl = al;
loc_1c599a: // 0160:1c599a
    if (ah & 0x80)
        goto loc_1c59a1;
    dh = ah;
loc_1c59a1: // 0160:1c59a1
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c59ad;
    dl = al;
loc_1c59ad: // 0160:1c59ad
    if (ah & 0x80)
        goto loc_1c59b4;
    dh = ah;
loc_1c59b4: // 0160:1c59b4
    edx = rol32(edx, 0x10);
loc_1c59b7: // 0160:1c59b7
    memoryASet32(ds, edi + 172, edx);
    eax = memoryAGet32(ds, esi + 176);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c59fc;
    edx = memoryAGet32(ds, edi + 176);
    if (eax == 0x80808080)
        goto loc_1c59fc;
    if (al & 0x80)
        goto loc_1c59df;
    dl = al;
loc_1c59df: // 0160:1c59df
    if (ah & 0x80)
        goto loc_1c59e6;
    dh = ah;
loc_1c59e6: // 0160:1c59e6
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c59f2;
    dl = al;
loc_1c59f2: // 0160:1c59f2
    if (ah & 0x80)
        goto loc_1c59f9;
    dh = ah;
loc_1c59f9: // 0160:1c59f9
    edx = rol32(edx, 0x10);
loc_1c59fc: // 0160:1c59fc
    memoryASet32(ds, edi + 176, edx);
    eax = memoryAGet32(ds, esi + 180);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5a41;
    edx = memoryAGet32(ds, edi + 180);
    if (eax == 0x80808080)
        goto loc_1c5a41;
    if (al & 0x80)
        goto loc_1c5a24;
    dl = al;
loc_1c5a24: // 0160:1c5a24
    if (ah & 0x80)
        goto loc_1c5a2b;
    dh = ah;
loc_1c5a2b: // 0160:1c5a2b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5a37;
    dl = al;
loc_1c5a37: // 0160:1c5a37
    if (ah & 0x80)
        goto loc_1c5a3e;
    dh = ah;
loc_1c5a3e: // 0160:1c5a3e
    edx = rol32(edx, 0x10);
loc_1c5a41: // 0160:1c5a41
    memoryASet32(ds, edi + 180, edx);
    eax = memoryAGet32(ds, esi + 184);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5a86;
    edx = memoryAGet32(ds, edi + 184);
    if (eax == 0x80808080)
        goto loc_1c5a86;
    if (al & 0x80)
        goto loc_1c5a69;
    dl = al;
loc_1c5a69: // 0160:1c5a69
    if (ah & 0x80)
        goto loc_1c5a70;
    dh = ah;
loc_1c5a70: // 0160:1c5a70
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5a7c;
    dl = al;
loc_1c5a7c: // 0160:1c5a7c
    if (ah & 0x80)
        goto loc_1c5a83;
    dh = ah;
loc_1c5a83: // 0160:1c5a83
    edx = rol32(edx, 0x10);
loc_1c5a86: // 0160:1c5a86
    memoryASet32(ds, edi + 184, edx);
    eax = memoryAGet32(ds, esi + 188);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5acb;
    edx = memoryAGet32(ds, edi + 188);
    if (eax == 0x80808080)
        goto loc_1c5acb;
    if (al & 0x80)
        goto loc_1c5aae;
    dl = al;
loc_1c5aae: // 0160:1c5aae
    if (ah & 0x80)
        goto loc_1c5ab5;
    dh = ah;
loc_1c5ab5: // 0160:1c5ab5
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5ac1;
    dl = al;
loc_1c5ac1: // 0160:1c5ac1
    if (ah & 0x80)
        goto loc_1c5ac8;
    dh = ah;
loc_1c5ac8: // 0160:1c5ac8
    edx = rol32(edx, 0x10);
loc_1c5acb: // 0160:1c5acb
    memoryASet32(ds, edi + 188, edx);
    eax = memoryAGet32(ds, esi + 192);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5b10;
    edx = memoryAGet32(ds, edi + 192);
    if (eax == 0x80808080)
        goto loc_1c5b10;
    if (al & 0x80)
        goto loc_1c5af3;
    dl = al;
loc_1c5af3: // 0160:1c5af3
    if (ah & 0x80)
        goto loc_1c5afa;
    dh = ah;
loc_1c5afa: // 0160:1c5afa
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5b06;
    dl = al;
loc_1c5b06: // 0160:1c5b06
    if (ah & 0x80)
        goto loc_1c5b0d;
    dh = ah;
loc_1c5b0d: // 0160:1c5b0d
    edx = rol32(edx, 0x10);
loc_1c5b10: // 0160:1c5b10
    memoryASet32(ds, edi + 192, edx);
    eax = memoryAGet32(ds, esi + 196);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5b55;
    edx = memoryAGet32(ds, edi + 196);
    if (eax == 0x80808080)
        goto loc_1c5b55;
    if (al & 0x80)
        goto loc_1c5b38;
    dl = al;
loc_1c5b38: // 0160:1c5b38
    if (ah & 0x80)
        goto loc_1c5b3f;
    dh = ah;
loc_1c5b3f: // 0160:1c5b3f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5b4b;
    dl = al;
loc_1c5b4b: // 0160:1c5b4b
    if (ah & 0x80)
        goto loc_1c5b52;
    dh = ah;
loc_1c5b52: // 0160:1c5b52
    edx = rol32(edx, 0x10);
loc_1c5b55: // 0160:1c5b55
    memoryASet32(ds, edi + 196, edx);
    eax = memoryAGet32(ds, esi + 200);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5b9a;
    edx = memoryAGet32(ds, edi + 200);
    if (eax == 0x80808080)
        goto loc_1c5b9a;
    if (al & 0x80)
        goto loc_1c5b7d;
    dl = al;
loc_1c5b7d: // 0160:1c5b7d
    if (ah & 0x80)
        goto loc_1c5b84;
    dh = ah;
loc_1c5b84: // 0160:1c5b84
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5b90;
    dl = al;
loc_1c5b90: // 0160:1c5b90
    if (ah & 0x80)
        goto loc_1c5b97;
    dh = ah;
loc_1c5b97: // 0160:1c5b97
    edx = rol32(edx, 0x10);
loc_1c5b9a: // 0160:1c5b9a
    memoryASet32(ds, edi + 200, edx);
    eax = memoryAGet32(ds, esi + 204);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5bdf;
    edx = memoryAGet32(ds, edi + 204);
    if (eax == 0x80808080)
        goto loc_1c5bdf;
    if (al & 0x80)
        goto loc_1c5bc2;
    dl = al;
loc_1c5bc2: // 0160:1c5bc2
    if (ah & 0x80)
        goto loc_1c5bc9;
    dh = ah;
loc_1c5bc9: // 0160:1c5bc9
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5bd5;
    dl = al;
loc_1c5bd5: // 0160:1c5bd5
    if (ah & 0x80)
        goto loc_1c5bdc;
    dh = ah;
loc_1c5bdc: // 0160:1c5bdc
    edx = rol32(edx, 0x10);
loc_1c5bdf: // 0160:1c5bdf
    memoryASet32(ds, edi + 204, edx);
    eax = memoryAGet32(ds, esi + 208);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5c24;
    edx = memoryAGet32(ds, edi + 208);
    if (eax == 0x80808080)
        goto loc_1c5c24;
    if (al & 0x80)
        goto loc_1c5c07;
    dl = al;
loc_1c5c07: // 0160:1c5c07
    if (ah & 0x80)
        goto loc_1c5c0e;
    dh = ah;
loc_1c5c0e: // 0160:1c5c0e
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5c1a;
    dl = al;
loc_1c5c1a: // 0160:1c5c1a
    if (ah & 0x80)
        goto loc_1c5c21;
    dh = ah;
loc_1c5c21: // 0160:1c5c21
    edx = rol32(edx, 0x10);
loc_1c5c24: // 0160:1c5c24
    memoryASet32(ds, edi + 208, edx);
    eax = memoryAGet32(ds, esi + 212);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5c69;
    edx = memoryAGet32(ds, edi + 212);
    if (eax == 0x80808080)
        goto loc_1c5c69;
    if (al & 0x80)
        goto loc_1c5c4c;
    dl = al;
loc_1c5c4c: // 0160:1c5c4c
    if (ah & 0x80)
        goto loc_1c5c53;
    dh = ah;
loc_1c5c53: // 0160:1c5c53
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5c5f;
    dl = al;
loc_1c5c5f: // 0160:1c5c5f
    if (ah & 0x80)
        goto loc_1c5c66;
    dh = ah;
loc_1c5c66: // 0160:1c5c66
    edx = rol32(edx, 0x10);
loc_1c5c69: // 0160:1c5c69
    memoryASet32(ds, edi + 212, edx);
    eax = memoryAGet32(ds, esi + 216);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5cae;
    edx = memoryAGet32(ds, edi + 216);
    if (eax == 0x80808080)
        goto loc_1c5cae;
    if (al & 0x80)
        goto loc_1c5c91;
    dl = al;
loc_1c5c91: // 0160:1c5c91
    if (ah & 0x80)
        goto loc_1c5c98;
    dh = ah;
loc_1c5c98: // 0160:1c5c98
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5ca4;
    dl = al;
loc_1c5ca4: // 0160:1c5ca4
    if (ah & 0x80)
        goto loc_1c5cab;
    dh = ah;
loc_1c5cab: // 0160:1c5cab
    edx = rol32(edx, 0x10);
loc_1c5cae: // 0160:1c5cae
    memoryASet32(ds, edi + 216, edx);
    eax = memoryAGet32(ds, esi + 220);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5cf3;
    edx = memoryAGet32(ds, edi + 220);
    if (eax == 0x80808080)
        goto loc_1c5cf3;
    if (al & 0x80)
        goto loc_1c5cd6;
    dl = al;
loc_1c5cd6: // 0160:1c5cd6
    if (ah & 0x80)
        goto loc_1c5cdd;
    dh = ah;
loc_1c5cdd: // 0160:1c5cdd
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5ce9;
    dl = al;
loc_1c5ce9: // 0160:1c5ce9
    if (ah & 0x80)
        goto loc_1c5cf0;
    dh = ah;
loc_1c5cf0: // 0160:1c5cf0
    edx = rol32(edx, 0x10);
loc_1c5cf3: // 0160:1c5cf3
    memoryASet32(ds, edi + 220, edx);
    eax = memoryAGet32(ds, esi + 224);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5d38;
    edx = memoryAGet32(ds, edi + 224);
    if (eax == 0x80808080)
        goto loc_1c5d38;
    if (al & 0x80)
        goto loc_1c5d1b;
    dl = al;
loc_1c5d1b: // 0160:1c5d1b
    if (ah & 0x80)
        goto loc_1c5d22;
    dh = ah;
loc_1c5d22: // 0160:1c5d22
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5d2e;
    dl = al;
loc_1c5d2e: // 0160:1c5d2e
    if (ah & 0x80)
        goto loc_1c5d35;
    dh = ah;
loc_1c5d35: // 0160:1c5d35
    edx = rol32(edx, 0x10);
loc_1c5d38: // 0160:1c5d38
    memoryASet32(ds, edi + 224, edx);
    eax = memoryAGet32(ds, esi + 228);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5d7d;
    edx = memoryAGet32(ds, edi + 228);
    if (eax == 0x80808080)
        goto loc_1c5d7d;
    if (al & 0x80)
        goto loc_1c5d60;
    dl = al;
loc_1c5d60: // 0160:1c5d60
    if (ah & 0x80)
        goto loc_1c5d67;
    dh = ah;
loc_1c5d67: // 0160:1c5d67
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5d73;
    dl = al;
loc_1c5d73: // 0160:1c5d73
    if (ah & 0x80)
        goto loc_1c5d7a;
    dh = ah;
loc_1c5d7a: // 0160:1c5d7a
    edx = rol32(edx, 0x10);
loc_1c5d7d: // 0160:1c5d7d
    memoryASet32(ds, edi + 228, edx);
    eax = memoryAGet32(ds, esi + 232);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5dc2;
    edx = memoryAGet32(ds, edi + 232);
    if (eax == 0x80808080)
        goto loc_1c5dc2;
    if (al & 0x80)
        goto loc_1c5da5;
    dl = al;
loc_1c5da5: // 0160:1c5da5
    if (ah & 0x80)
        goto loc_1c5dac;
    dh = ah;
loc_1c5dac: // 0160:1c5dac
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5db8;
    dl = al;
loc_1c5db8: // 0160:1c5db8
    if (ah & 0x80)
        goto loc_1c5dbf;
    dh = ah;
loc_1c5dbf: // 0160:1c5dbf
    edx = rol32(edx, 0x10);
loc_1c5dc2: // 0160:1c5dc2
    memoryASet32(ds, edi + 232, edx);
    eax = memoryAGet32(ds, esi + 236);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5e07;
    edx = memoryAGet32(ds, edi + 236);
    if (eax == 0x80808080)
        goto loc_1c5e07;
    if (al & 0x80)
        goto loc_1c5dea;
    dl = al;
loc_1c5dea: // 0160:1c5dea
    if (ah & 0x80)
        goto loc_1c5df1;
    dh = ah;
loc_1c5df1: // 0160:1c5df1
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5dfd;
    dl = al;
loc_1c5dfd: // 0160:1c5dfd
    if (ah & 0x80)
        goto loc_1c5e04;
    dh = ah;
loc_1c5e04: // 0160:1c5e04
    edx = rol32(edx, 0x10);
loc_1c5e07: // 0160:1c5e07
    memoryASet32(ds, edi + 236, edx);
    eax = memoryAGet32(ds, esi + 240);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5e4c;
    edx = memoryAGet32(ds, edi + 240);
    if (eax == 0x80808080)
        goto loc_1c5e4c;
    if (al & 0x80)
        goto loc_1c5e2f;
    dl = al;
loc_1c5e2f: // 0160:1c5e2f
    if (ah & 0x80)
        goto loc_1c5e36;
    dh = ah;
loc_1c5e36: // 0160:1c5e36
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5e42;
    dl = al;
loc_1c5e42: // 0160:1c5e42
    if (ah & 0x80)
        goto loc_1c5e49;
    dh = ah;
loc_1c5e49: // 0160:1c5e49
    edx = rol32(edx, 0x10);
loc_1c5e4c: // 0160:1c5e4c
    memoryASet32(ds, edi + 240, edx);
    eax = memoryAGet32(ds, esi + 244);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5e91;
    edx = memoryAGet32(ds, edi + 244);
    if (eax == 0x80808080)
        goto loc_1c5e91;
    if (al & 0x80)
        goto loc_1c5e74;
    dl = al;
loc_1c5e74: // 0160:1c5e74
    if (ah & 0x80)
        goto loc_1c5e7b;
    dh = ah;
loc_1c5e7b: // 0160:1c5e7b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5e87;
    dl = al;
loc_1c5e87: // 0160:1c5e87
    if (ah & 0x80)
        goto loc_1c5e8e;
    dh = ah;
loc_1c5e8e: // 0160:1c5e8e
    edx = rol32(edx, 0x10);
loc_1c5e91: // 0160:1c5e91
    memoryASet32(ds, edi + 244, edx);
    eax = memoryAGet32(ds, esi + 248);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5ed6;
    edx = memoryAGet32(ds, edi + 248);
    if (eax == 0x80808080)
        goto loc_1c5ed6;
    if (al & 0x80)
        goto loc_1c5eb9;
    dl = al;
loc_1c5eb9: // 0160:1c5eb9
    if (ah & 0x80)
        goto loc_1c5ec0;
    dh = ah;
loc_1c5ec0: // 0160:1c5ec0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5ecc;
    dl = al;
loc_1c5ecc: // 0160:1c5ecc
    if (ah & 0x80)
        goto loc_1c5ed3;
    dh = ah;
loc_1c5ed3: // 0160:1c5ed3
    edx = rol32(edx, 0x10);
loc_1c5ed6: // 0160:1c5ed6
    memoryASet32(ds, edi + 248, edx);
    eax = memoryAGet32(ds, esi + 252);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5f1b;
    edx = memoryAGet32(ds, edi + 252);
    if (eax == 0x80808080)
        goto loc_1c5f1b;
    if (al & 0x80)
        goto loc_1c5efe;
    dl = al;
loc_1c5efe: // 0160:1c5efe
    if (ah & 0x80)
        goto loc_1c5f05;
    dh = ah;
loc_1c5f05: // 0160:1c5f05
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5f11;
    dl = al;
loc_1c5f11: // 0160:1c5f11
    if (ah & 0x80)
        goto loc_1c5f18;
    dh = ah;
loc_1c5f18: // 0160:1c5f18
    edx = rol32(edx, 0x10);
loc_1c5f1b: // 0160:1c5f1b
    memoryASet32(ds, edi + 252, edx);
    eax = memoryAGet32(ds, esi + 256);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5f60;
    edx = memoryAGet32(ds, edi + 256);
    if (eax == 0x80808080)
        goto loc_1c5f60;
    if (al & 0x80)
        goto loc_1c5f43;
    dl = al;
loc_1c5f43: // 0160:1c5f43
    if (ah & 0x80)
        goto loc_1c5f4a;
    dh = ah;
loc_1c5f4a: // 0160:1c5f4a
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5f56;
    dl = al;
loc_1c5f56: // 0160:1c5f56
    if (ah & 0x80)
        goto loc_1c5f5d;
    dh = ah;
loc_1c5f5d: // 0160:1c5f5d
    edx = rol32(edx, 0x10);
loc_1c5f60: // 0160:1c5f60
    memoryASet32(ds, edi + 256, edx);
    eax = memoryAGet32(ds, esi + 260);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5fa5;
    edx = memoryAGet32(ds, edi + 260);
    if (eax == 0x80808080)
        goto loc_1c5fa5;
    if (al & 0x80)
        goto loc_1c5f88;
    dl = al;
loc_1c5f88: // 0160:1c5f88
    if (ah & 0x80)
        goto loc_1c5f8f;
    dh = ah;
loc_1c5f8f: // 0160:1c5f8f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5f9b;
    dl = al;
loc_1c5f9b: // 0160:1c5f9b
    if (ah & 0x80)
        goto loc_1c5fa2;
    dh = ah;
loc_1c5fa2: // 0160:1c5fa2
    edx = rol32(edx, 0x10);
loc_1c5fa5: // 0160:1c5fa5
    memoryASet32(ds, edi + 260, edx);
    eax = memoryAGet32(ds, esi + 264);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c5fea;
    edx = memoryAGet32(ds, edi + 264);
    if (eax == 0x80808080)
        goto loc_1c5fea;
    if (al & 0x80)
        goto loc_1c5fcd;
    dl = al;
loc_1c5fcd: // 0160:1c5fcd
    if (ah & 0x80)
        goto loc_1c5fd4;
    dh = ah;
loc_1c5fd4: // 0160:1c5fd4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c5fe0;
    dl = al;
loc_1c5fe0: // 0160:1c5fe0
    if (ah & 0x80)
        goto loc_1c5fe7;
    dh = ah;
loc_1c5fe7: // 0160:1c5fe7
    edx = rol32(edx, 0x10);
loc_1c5fea: // 0160:1c5fea
    memoryASet32(ds, edi + 264, edx);
    eax = memoryAGet32(ds, esi + 268);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c602f;
    edx = memoryAGet32(ds, edi + 268);
    if (eax == 0x80808080)
        goto loc_1c602f;
    if (al & 0x80)
        goto loc_1c6012;
    dl = al;
loc_1c6012: // 0160:1c6012
    if (ah & 0x80)
        goto loc_1c6019;
    dh = ah;
loc_1c6019: // 0160:1c6019
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c6025;
    dl = al;
loc_1c6025: // 0160:1c6025
    if (ah & 0x80)
        goto loc_1c602c;
    dh = ah;
loc_1c602c: // 0160:1c602c
    edx = rol32(edx, 0x10);
loc_1c602f: // 0160:1c602f
    memoryASet32(ds, edi + 268, edx);
    eax = memoryAGet32(ds, esi + 272);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c6074;
    edx = memoryAGet32(ds, edi + 272);
    if (eax == 0x80808080)
        goto loc_1c6074;
    if (al & 0x80)
        goto loc_1c6057;
    dl = al;
loc_1c6057: // 0160:1c6057
    if (ah & 0x80)
        goto loc_1c605e;
    dh = ah;
loc_1c605e: // 0160:1c605e
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c606a;
    dl = al;
loc_1c606a: // 0160:1c606a
    if (ah & 0x80)
        goto loc_1c6071;
    dh = ah;
loc_1c6071: // 0160:1c6071
    edx = rol32(edx, 0x10);
loc_1c6074: // 0160:1c6074
    memoryASet32(ds, edi + 272, edx);
    eax = memoryAGet32(ds, esi + 276);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c60b9;
    edx = memoryAGet32(ds, edi + 276);
    if (eax == 0x80808080)
        goto loc_1c60b9;
    if (al & 0x80)
        goto loc_1c609c;
    dl = al;
loc_1c609c: // 0160:1c609c
    if (ah & 0x80)
        goto loc_1c60a3;
    dh = ah;
loc_1c60a3: // 0160:1c60a3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c60af;
    dl = al;
loc_1c60af: // 0160:1c60af
    if (ah & 0x80)
        goto loc_1c60b6;
    dh = ah;
loc_1c60b6: // 0160:1c60b6
    edx = rol32(edx, 0x10);
loc_1c60b9: // 0160:1c60b9
    memoryASet32(ds, edi + 276, edx);
    eax = memoryAGet32(ds, esi + 280);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c60fe;
    edx = memoryAGet32(ds, edi + 280);
    if (eax == 0x80808080)
        goto loc_1c60fe;
    if (al & 0x80)
        goto loc_1c60e1;
    dl = al;
loc_1c60e1: // 0160:1c60e1
    if (ah & 0x80)
        goto loc_1c60e8;
    dh = ah;
loc_1c60e8: // 0160:1c60e8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c60f4;
    dl = al;
loc_1c60f4: // 0160:1c60f4
    if (ah & 0x80)
        goto loc_1c60fb;
    dh = ah;
loc_1c60fb: // 0160:1c60fb
    edx = rol32(edx, 0x10);
loc_1c60fe: // 0160:1c60fe
    memoryASet32(ds, edi + 280, edx);
    eax = memoryAGet32(ds, esi + 284);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c6143;
    edx = memoryAGet32(ds, edi + 284);
    if (eax == 0x80808080)
        goto loc_1c6143;
    if (al & 0x80)
        goto loc_1c6126;
    dl = al;
loc_1c6126: // 0160:1c6126
    if (ah & 0x80)
        goto loc_1c612d;
    dh = ah;
loc_1c612d: // 0160:1c612d
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c6139;
    dl = al;
loc_1c6139: // 0160:1c6139
    if (ah & 0x80)
        goto loc_1c6140;
    dh = ah;
loc_1c6140: // 0160:1c6140
    edx = rol32(edx, 0x10);
loc_1c6143: // 0160:1c6143
    memoryASet32(ds, edi + 284, edx);
    eax = memoryAGet32(ds, esi + 288);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c6188;
    edx = memoryAGet32(ds, edi + 288);
    if (eax == 0x80808080)
        goto loc_1c6188;
    if (al & 0x80)
        goto loc_1c616b;
    dl = al;
loc_1c616b: // 0160:1c616b
    if (ah & 0x80)
        goto loc_1c6172;
    dh = ah;
loc_1c6172: // 0160:1c6172
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c617e;
    dl = al;
loc_1c617e: // 0160:1c617e
    if (ah & 0x80)
        goto loc_1c6185;
    dh = ah;
loc_1c6185: // 0160:1c6185
    edx = rol32(edx, 0x10);
loc_1c6188: // 0160:1c6188
    memoryASet32(ds, edi + 288, edx);
    eax = memoryAGet32(ds, esi + 292);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c61cd;
    edx = memoryAGet32(ds, edi + 292);
    if (eax == 0x80808080)
        goto loc_1c61cd;
    if (al & 0x80)
        goto loc_1c61b0;
    dl = al;
loc_1c61b0: // 0160:1c61b0
    if (ah & 0x80)
        goto loc_1c61b7;
    dh = ah;
loc_1c61b7: // 0160:1c61b7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c61c3;
    dl = al;
loc_1c61c3: // 0160:1c61c3
    if (ah & 0x80)
        goto loc_1c61ca;
    dh = ah;
loc_1c61ca: // 0160:1c61ca
    edx = rol32(edx, 0x10);
loc_1c61cd: // 0160:1c61cd
    memoryASet32(ds, edi + 292, edx);
    eax = memoryAGet32(ds, esi + 296);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c6212;
    edx = memoryAGet32(ds, edi + 296);
    if (eax == 0x80808080)
        goto loc_1c6212;
    if (al & 0x80)
        goto loc_1c61f5;
    dl = al;
loc_1c61f5: // 0160:1c61f5
    if (ah & 0x80)
        goto loc_1c61fc;
    dh = ah;
loc_1c61fc: // 0160:1c61fc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c6208;
    dl = al;
loc_1c6208: // 0160:1c6208
    if (ah & 0x80)
        goto loc_1c620f;
    dh = ah;
loc_1c620f: // 0160:1c620f
    edx = rol32(edx, 0x10);
loc_1c6212: // 0160:1c6212
    memoryASet32(ds, edi + 296, edx);
    eax = memoryAGet32(ds, esi + 300);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c6257;
    edx = memoryAGet32(ds, edi + 300);
    if (eax == 0x80808080)
        goto loc_1c6257;
    if (al & 0x80)
        goto loc_1c623a;
    dl = al;
loc_1c623a: // 0160:1c623a
    if (ah & 0x80)
        goto loc_1c6241;
    dh = ah;
loc_1c6241: // 0160:1c6241
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c624d;
    dl = al;
loc_1c624d: // 0160:1c624d
    if (ah & 0x80)
        goto loc_1c6254;
    dh = ah;
loc_1c6254: // 0160:1c6254
    edx = rol32(edx, 0x10);
loc_1c6257: // 0160:1c6257
    memoryASet32(ds, edi + 300, edx);
    eax = memoryAGet32(ds, esi + 304);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c629c;
    edx = memoryAGet32(ds, edi + 304);
    if (eax == 0x80808080)
        goto loc_1c629c;
    if (al & 0x80)
        goto loc_1c627f;
    dl = al;
loc_1c627f: // 0160:1c627f
    if (ah & 0x80)
        goto loc_1c6286;
    dh = ah;
loc_1c6286: // 0160:1c6286
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c6292;
    dl = al;
loc_1c6292: // 0160:1c6292
    if (ah & 0x80)
        goto loc_1c6299;
    dh = ah;
loc_1c6299: // 0160:1c6299
    edx = rol32(edx, 0x10);
loc_1c629c: // 0160:1c629c
    memoryASet32(ds, edi + 304, edx);
    eax = memoryAGet32(ds, esi + 308);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c62e1;
    edx = memoryAGet32(ds, edi + 308);
    if (eax == 0x80808080)
        goto loc_1c62e1;
    if (al & 0x80)
        goto loc_1c62c4;
    dl = al;
loc_1c62c4: // 0160:1c62c4
    if (ah & 0x80)
        goto loc_1c62cb;
    dh = ah;
loc_1c62cb: // 0160:1c62cb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c62d7;
    dl = al;
loc_1c62d7: // 0160:1c62d7
    if (ah & 0x80)
        goto loc_1c62de;
    dh = ah;
loc_1c62de: // 0160:1c62de
    edx = rol32(edx, 0x10);
loc_1c62e1: // 0160:1c62e1
    memoryASet32(ds, edi + 308, edx);
    eax = memoryAGet32(ds, esi + 312);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c6326;
    edx = memoryAGet32(ds, edi + 312);
    if (eax == 0x80808080)
        goto loc_1c6326;
    if (al & 0x80)
        goto loc_1c6309;
    dl = al;
loc_1c6309: // 0160:1c6309
    if (ah & 0x80)
        goto loc_1c6310;
    dh = ah;
loc_1c6310: // 0160:1c6310
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c631c;
    dl = al;
loc_1c631c: // 0160:1c631c
    if (ah & 0x80)
        goto loc_1c6323;
    dh = ah;
loc_1c6323: // 0160:1c6323
    edx = rol32(edx, 0x10);
loc_1c6326: // 0160:1c6326
    memoryASet32(ds, edi + 312, edx);
    eax = memoryAGet32(ds, esi + 316);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c636b;
    edx = memoryAGet32(ds, edi + 316);
    if (eax == 0x80808080)
        goto loc_1c636b;
    if (al & 0x80)
        goto loc_1c634e;
    dl = al;
loc_1c634e: // 0160:1c634e
    if (ah & 0x80)
        goto loc_1c6355;
    dh = ah;
loc_1c6355: // 0160:1c6355
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c6361;
    dl = al;
loc_1c6361: // 0160:1c6361
    if (ah & 0x80)
        goto loc_1c6368;
    dh = ah;
loc_1c6368: // 0160:1c6368
    edx = rol32(edx, 0x10);
loc_1c636b: // 0160:1c636b
    memoryASet32(ds, edi + 316, edx);
    esi += 0x00000280;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_1c4f04;
    stop("disassembly failed at 160:1c6384 popal ");
    esp += 4;
}
void sub_1c6386() // 0160:1c6386 +long
{
    esp -= 4;
    stop("disassembly failed at 160:1c6386 pushal ");
    esi = eax;
    edi = edx;
    ecx = ebx;
    goto loc_1c638f;
loc_1c638f: // 0160:1c638f
    goto loc_1c6391;
loc_1c6391: // 0160:1c6391
    goto loc_1c6394;
    // gap 1 bytes
loc_1c6394: // 0160:1c6394
    eax = memoryAGet32(ds, esi);
    if (!eax)
        goto loc_1c63ca;
    if (!ax)
        goto loc_1c63af;
    if (al)
        goto loc_1c63a5;
    al = memoryAGet(ds, edi);
loc_1c63a5: // 0160:1c63a5
    if (ah)
        goto loc_1c63ac;
    ah = memoryAGet(ds, edi + 1);
loc_1c63ac: // 0160:1c63ac
    memoryASet16(ds, edi, ax);
loc_1c63af: // 0160:1c63af
    ax = memoryAGet16(ds, esi + 2);
    if (!ax)
        goto loc_1c63ca;
    if (al)
        goto loc_1c63bf;
    al = memoryAGet(ds, edi + 2);
loc_1c63bf: // 0160:1c63bf
    if (ah)
        goto loc_1c63c6;
    ah = memoryAGet(ds, edi + 3);
loc_1c63c6: // 0160:1c63c6
    memoryASet16(ds, edi + 2, ax);
loc_1c63ca: // 0160:1c63ca
    eax = memoryAGet32(ds, esi + 4);
    if (!eax)
        goto loc_1c6403;
    if (!ax)
        goto loc_1c63e8;
    if (al)
        goto loc_1c63dd;
    al = memoryAGet(ds, edi + 4);
loc_1c63dd: // 0160:1c63dd
    if (ah)
        goto loc_1c63e4;
    ah = memoryAGet(ds, edi + 5);
loc_1c63e4: // 0160:1c63e4
    memoryASet16(ds, edi + 4, ax);
loc_1c63e8: // 0160:1c63e8
    ax = memoryAGet16(ds, esi + 6);
    if (!ax)
        goto loc_1c6403;
    if (al)
        goto loc_1c63f8;
    al = memoryAGet(ds, edi + 6);
loc_1c63f8: // 0160:1c63f8
    if (ah)
        goto loc_1c63ff;
    ah = memoryAGet(ds, edi + 7);
loc_1c63ff: // 0160:1c63ff
    memoryASet16(ds, edi + 6, ax);
loc_1c6403: // 0160:1c6403
    eax = memoryAGet32(ds, esi + 8);
    if (!eax)
        goto loc_1c643c;
    if (!ax)
        goto loc_1c6421;
    if (al)
        goto loc_1c6416;
    al = memoryAGet(ds, edi + 8);
loc_1c6416: // 0160:1c6416
    if (ah)
        goto loc_1c641d;
    ah = memoryAGet(ds, edi + 9);
loc_1c641d: // 0160:1c641d
    memoryASet16(ds, edi + 8, ax);
loc_1c6421: // 0160:1c6421
    ax = memoryAGet16(ds, esi + 10);
    if (!ax)
        goto loc_1c643c;
    if (al)
        goto loc_1c6431;
    al = memoryAGet(ds, edi + 10);
loc_1c6431: // 0160:1c6431
    if (ah)
        goto loc_1c6438;
    ah = memoryAGet(ds, edi + 11);
loc_1c6438: // 0160:1c6438
    memoryASet16(ds, edi + 10, ax);
loc_1c643c: // 0160:1c643c
    eax = memoryAGet32(ds, esi + 12);
    if (!eax)
        goto loc_1c6475;
    if (!ax)
        goto loc_1c645a;
    if (al)
        goto loc_1c644f;
    al = memoryAGet(ds, edi + 12);
loc_1c644f: // 0160:1c644f
    if (ah)
        goto loc_1c6456;
    ah = memoryAGet(ds, edi + 13);
loc_1c6456: // 0160:1c6456
    memoryASet16(ds, edi + 12, ax);
loc_1c645a: // 0160:1c645a
    ax = memoryAGet16(ds, esi + 14);
    if (!ax)
        goto loc_1c6475;
    if (al)
        goto loc_1c646a;
    al = memoryAGet(ds, edi + 14);
loc_1c646a: // 0160:1c646a
    if (ah)
        goto loc_1c6471;
    ah = memoryAGet(ds, edi + 15);
loc_1c6471: // 0160:1c6471
    memoryASet16(ds, edi + 14, ax);
loc_1c6475: // 0160:1c6475
    eax = memoryAGet32(ds, esi + 16);
    if (!eax)
        goto loc_1c64ae;
    if (!ax)
        goto loc_1c6493;
    if (al)
        goto loc_1c6488;
    al = memoryAGet(ds, edi + 16);
loc_1c6488: // 0160:1c6488
    if (ah)
        goto loc_1c648f;
    ah = memoryAGet(ds, edi + 17);
loc_1c648f: // 0160:1c648f
    memoryASet16(ds, edi + 16, ax);
loc_1c6493: // 0160:1c6493
    ax = memoryAGet16(ds, esi + 18);
    if (!ax)
        goto loc_1c64ae;
    if (al)
        goto loc_1c64a3;
    al = memoryAGet(ds, edi + 18);
loc_1c64a3: // 0160:1c64a3
    if (ah)
        goto loc_1c64aa;
    ah = memoryAGet(ds, edi + 19);
loc_1c64aa: // 0160:1c64aa
    memoryASet16(ds, edi + 18, ax);
loc_1c64ae: // 0160:1c64ae
    eax = memoryAGet32(ds, esi + 20);
    if (!eax)
        goto loc_1c64e7;
    if (!ax)
        goto loc_1c64cc;
    if (al)
        goto loc_1c64c1;
    al = memoryAGet(ds, edi + 20);
loc_1c64c1: // 0160:1c64c1
    if (ah)
        goto loc_1c64c8;
    ah = memoryAGet(ds, edi + 21);
loc_1c64c8: // 0160:1c64c8
    memoryASet16(ds, edi + 20, ax);
loc_1c64cc: // 0160:1c64cc
    ax = memoryAGet16(ds, esi + 22);
    if (!ax)
        goto loc_1c64e7;
    if (al)
        goto loc_1c64dc;
    al = memoryAGet(ds, edi + 22);
loc_1c64dc: // 0160:1c64dc
    if (ah)
        goto loc_1c64e3;
    ah = memoryAGet(ds, edi + 23);
loc_1c64e3: // 0160:1c64e3
    memoryASet16(ds, edi + 22, ax);
loc_1c64e7: // 0160:1c64e7
    eax = memoryAGet32(ds, esi + 24);
    if (!eax)
        goto loc_1c6520;
    if (!ax)
        goto loc_1c6505;
    if (al)
        goto loc_1c64fa;
    al = memoryAGet(ds, edi + 24);
loc_1c64fa: // 0160:1c64fa
    if (ah)
        goto loc_1c6501;
    ah = memoryAGet(ds, edi + 25);
loc_1c6501: // 0160:1c6501
    memoryASet16(ds, edi + 24, ax);
loc_1c6505: // 0160:1c6505
    ax = memoryAGet16(ds, esi + 26);
    if (!ax)
        goto loc_1c6520;
    if (al)
        goto loc_1c6515;
    al = memoryAGet(ds, edi + 26);
loc_1c6515: // 0160:1c6515
    if (ah)
        goto loc_1c651c;
    ah = memoryAGet(ds, edi + 27);
loc_1c651c: // 0160:1c651c
    memoryASet16(ds, edi + 26, ax);
loc_1c6520: // 0160:1c6520
    eax = memoryAGet32(ds, esi + 28);
    if (!eax)
        goto loc_1c6559;
    if (!ax)
        goto loc_1c653e;
    if (al)
        goto loc_1c6533;
    al = memoryAGet(ds, edi + 28);
loc_1c6533: // 0160:1c6533
    if (ah)
        goto loc_1c653a;
    ah = memoryAGet(ds, edi + 29);
loc_1c653a: // 0160:1c653a
    memoryASet16(ds, edi + 28, ax);
loc_1c653e: // 0160:1c653e
    ax = memoryAGet16(ds, esi + 30);
    if (!ax)
        goto loc_1c6559;
    if (al)
        goto loc_1c654e;
    al = memoryAGet(ds, edi + 30);
loc_1c654e: // 0160:1c654e
    if (ah)
        goto loc_1c6555;
    ah = memoryAGet(ds, edi + 31);
loc_1c6555: // 0160:1c6555
    memoryASet16(ds, edi + 30, ax);
loc_1c6559: // 0160:1c6559
    eax = memoryAGet32(ds, esi + 32);
    if (!eax)
        goto loc_1c6592;
    if (!ax)
        goto loc_1c6577;
    if (al)
        goto loc_1c656c;
    al = memoryAGet(ds, edi + 32);
loc_1c656c: // 0160:1c656c
    if (ah)
        goto loc_1c6573;
    ah = memoryAGet(ds, edi + 33);
loc_1c6573: // 0160:1c6573
    memoryASet16(ds, edi + 32, ax);
loc_1c6577: // 0160:1c6577
    ax = memoryAGet16(ds, esi + 34);
    if (!ax)
        goto loc_1c6592;
    if (al)
        goto loc_1c6587;
    al = memoryAGet(ds, edi + 34);
loc_1c6587: // 0160:1c6587
    if (ah)
        goto loc_1c658e;
    ah = memoryAGet(ds, edi + 35);
loc_1c658e: // 0160:1c658e
    memoryASet16(ds, edi + 34, ax);
loc_1c6592: // 0160:1c6592
    eax = memoryAGet32(ds, esi + 36);
    if (!eax)
        goto loc_1c65cb;
    if (!ax)
        goto loc_1c65b0;
    if (al)
        goto loc_1c65a5;
    al = memoryAGet(ds, edi + 36);
loc_1c65a5: // 0160:1c65a5
    if (ah)
        goto loc_1c65ac;
    ah = memoryAGet(ds, edi + 37);
loc_1c65ac: // 0160:1c65ac
    memoryASet16(ds, edi + 36, ax);
loc_1c65b0: // 0160:1c65b0
    ax = memoryAGet16(ds, esi + 38);
    if (!ax)
        goto loc_1c65cb;
    if (al)
        goto loc_1c65c0;
    al = memoryAGet(ds, edi + 38);
loc_1c65c0: // 0160:1c65c0
    if (ah)
        goto loc_1c65c7;
    ah = memoryAGet(ds, edi + 39);
loc_1c65c7: // 0160:1c65c7
    memoryASet16(ds, edi + 38, ax);
loc_1c65cb: // 0160:1c65cb
    eax = memoryAGet32(ds, esi + 40);
    if (!eax)
        goto loc_1c6604;
    if (!ax)
        goto loc_1c65e9;
    if (al)
        goto loc_1c65de;
    al = memoryAGet(ds, edi + 40);
loc_1c65de: // 0160:1c65de
    if (ah)
        goto loc_1c65e5;
    ah = memoryAGet(ds, edi + 41);
loc_1c65e5: // 0160:1c65e5
    memoryASet16(ds, edi + 40, ax);
loc_1c65e9: // 0160:1c65e9
    ax = memoryAGet16(ds, esi + 42);
    if (!ax)
        goto loc_1c6604;
    if (al)
        goto loc_1c65f9;
    al = memoryAGet(ds, edi + 42);
loc_1c65f9: // 0160:1c65f9
    if (ah)
        goto loc_1c6600;
    ah = memoryAGet(ds, edi + 43);
loc_1c6600: // 0160:1c6600
    memoryASet16(ds, edi + 42, ax);
loc_1c6604: // 0160:1c6604
    eax = memoryAGet32(ds, esi + 44);
    if (!eax)
        goto loc_1c663d;
    if (!ax)
        goto loc_1c6622;
    if (al)
        goto loc_1c6617;
    al = memoryAGet(ds, edi + 44);
loc_1c6617: // 0160:1c6617
    if (ah)
        goto loc_1c661e;
    ah = memoryAGet(ds, edi + 45);
loc_1c661e: // 0160:1c661e
    memoryASet16(ds, edi + 44, ax);
loc_1c6622: // 0160:1c6622
    ax = memoryAGet16(ds, esi + 46);
    if (!ax)
        goto loc_1c663d;
    if (al)
        goto loc_1c6632;
    al = memoryAGet(ds, edi + 46);
loc_1c6632: // 0160:1c6632
    if (ah)
        goto loc_1c6639;
    ah = memoryAGet(ds, edi + 47);
loc_1c6639: // 0160:1c6639
    memoryASet16(ds, edi + 46, ax);
loc_1c663d: // 0160:1c663d
    eax = memoryAGet32(ds, esi + 48);
    if (!eax)
        goto loc_1c6676;
    if (!ax)
        goto loc_1c665b;
    if (al)
        goto loc_1c6650;
    al = memoryAGet(ds, edi + 48);
loc_1c6650: // 0160:1c6650
    if (ah)
        goto loc_1c6657;
    ah = memoryAGet(ds, edi + 49);
loc_1c6657: // 0160:1c6657
    memoryASet16(ds, edi + 48, ax);
loc_1c665b: // 0160:1c665b
    ax = memoryAGet16(ds, esi + 50);
    if (!ax)
        goto loc_1c6676;
    if (al)
        goto loc_1c666b;
    al = memoryAGet(ds, edi + 50);
loc_1c666b: // 0160:1c666b
    if (ah)
        goto loc_1c6672;
    ah = memoryAGet(ds, edi + 51);
loc_1c6672: // 0160:1c6672
    memoryASet16(ds, edi + 50, ax);
loc_1c6676: // 0160:1c6676
    eax = memoryAGet32(ds, esi + 52);
    if (!eax)
        goto loc_1c66af;
    if (!ax)
        goto loc_1c6694;
    if (al)
        goto loc_1c6689;
    al = memoryAGet(ds, edi + 52);
loc_1c6689: // 0160:1c6689
    if (ah)
        goto loc_1c6690;
    ah = memoryAGet(ds, edi + 53);
loc_1c6690: // 0160:1c6690
    memoryASet16(ds, edi + 52, ax);
loc_1c6694: // 0160:1c6694
    ax = memoryAGet16(ds, esi + 54);
    if (!ax)
        goto loc_1c66af;
    if (al)
        goto loc_1c66a4;
    al = memoryAGet(ds, edi + 54);
loc_1c66a4: // 0160:1c66a4
    if (ah)
        goto loc_1c66ab;
    ah = memoryAGet(ds, edi + 55);
loc_1c66ab: // 0160:1c66ab
    memoryASet16(ds, edi + 54, ax);
loc_1c66af: // 0160:1c66af
    eax = memoryAGet32(ds, esi + 56);
    if (!eax)
        goto loc_1c66e8;
    if (!ax)
        goto loc_1c66cd;
    if (al)
        goto loc_1c66c2;
    al = memoryAGet(ds, edi + 56);
loc_1c66c2: // 0160:1c66c2
    if (ah)
        goto loc_1c66c9;
    ah = memoryAGet(ds, edi + 57);
loc_1c66c9: // 0160:1c66c9
    memoryASet16(ds, edi + 56, ax);
loc_1c66cd: // 0160:1c66cd
    ax = memoryAGet16(ds, esi + 58);
    if (!ax)
        goto loc_1c66e8;
    if (al)
        goto loc_1c66dd;
    al = memoryAGet(ds, edi + 58);
loc_1c66dd: // 0160:1c66dd
    if (ah)
        goto loc_1c66e4;
    ah = memoryAGet(ds, edi + 59);
loc_1c66e4: // 0160:1c66e4
    memoryASet16(ds, edi + 58, ax);
loc_1c66e8: // 0160:1c66e8
    eax = memoryAGet32(ds, esi + 60);
    if (!eax)
        goto loc_1c6721;
    if (!ax)
        goto loc_1c6706;
    if (al)
        goto loc_1c66fb;
    al = memoryAGet(ds, edi + 60);
loc_1c66fb: // 0160:1c66fb
    if (ah)
        goto loc_1c6702;
    ah = memoryAGet(ds, edi + 61);
loc_1c6702: // 0160:1c6702
    memoryASet16(ds, edi + 60, ax);
loc_1c6706: // 0160:1c6706
    ax = memoryAGet16(ds, esi + 62);
    if (!ax)
        goto loc_1c6721;
    if (al)
        goto loc_1c6716;
    al = memoryAGet(ds, edi + 62);
loc_1c6716: // 0160:1c6716
    if (ah)
        goto loc_1c671d;
    ah = memoryAGet(ds, edi + 63);
loc_1c671d: // 0160:1c671d
    memoryASet16(ds, edi + 62, ax);
loc_1c6721: // 0160:1c6721
    eax = memoryAGet32(ds, esi + 64);
    if (!eax)
        goto loc_1c675a;
    if (!ax)
        goto loc_1c673f;
    if (al)
        goto loc_1c6734;
    al = memoryAGet(ds, edi + 64);
loc_1c6734: // 0160:1c6734
    if (ah)
        goto loc_1c673b;
    ah = memoryAGet(ds, edi + 65);
loc_1c673b: // 0160:1c673b
    memoryASet16(ds, edi + 64, ax);
loc_1c673f: // 0160:1c673f
    ax = memoryAGet16(ds, esi + 66);
    if (!ax)
        goto loc_1c675a;
    if (al)
        goto loc_1c674f;
    al = memoryAGet(ds, edi + 66);
loc_1c674f: // 0160:1c674f
    if (ah)
        goto loc_1c6756;
    ah = memoryAGet(ds, edi + 67);
loc_1c6756: // 0160:1c6756
    memoryASet16(ds, edi + 66, ax);
loc_1c675a: // 0160:1c675a
    eax = memoryAGet32(ds, esi + 68);
    if (!eax)
        goto loc_1c6793;
    if (!ax)
        goto loc_1c6778;
    if (al)
        goto loc_1c676d;
    al = memoryAGet(ds, edi + 68);
loc_1c676d: // 0160:1c676d
    if (ah)
        goto loc_1c6774;
    ah = memoryAGet(ds, edi + 69);
loc_1c6774: // 0160:1c6774
    memoryASet16(ds, edi + 68, ax);
loc_1c6778: // 0160:1c6778
    ax = memoryAGet16(ds, esi + 70);
    if (!ax)
        goto loc_1c6793;
    if (al)
        goto loc_1c6788;
    al = memoryAGet(ds, edi + 70);
loc_1c6788: // 0160:1c6788
    if (ah)
        goto loc_1c678f;
    ah = memoryAGet(ds, edi + 71);
loc_1c678f: // 0160:1c678f
    memoryASet16(ds, edi + 70, ax);
loc_1c6793: // 0160:1c6793
    eax = memoryAGet32(ds, esi + 72);
    if (!eax)
        goto loc_1c67cc;
    if (!ax)
        goto loc_1c67b1;
    if (al)
        goto loc_1c67a6;
    al = memoryAGet(ds, edi + 72);
loc_1c67a6: // 0160:1c67a6
    if (ah)
        goto loc_1c67ad;
    ah = memoryAGet(ds, edi + 73);
loc_1c67ad: // 0160:1c67ad
    memoryASet16(ds, edi + 72, ax);
loc_1c67b1: // 0160:1c67b1
    ax = memoryAGet16(ds, esi + 74);
    if (!ax)
        goto loc_1c67cc;
    if (al)
        goto loc_1c67c1;
    al = memoryAGet(ds, edi + 74);
loc_1c67c1: // 0160:1c67c1
    if (ah)
        goto loc_1c67c8;
    ah = memoryAGet(ds, edi + 75);
loc_1c67c8: // 0160:1c67c8
    memoryASet16(ds, edi + 74, ax);
loc_1c67cc: // 0160:1c67cc
    eax = memoryAGet32(ds, esi + 76);
    if (!eax)
        goto loc_1c6805;
    if (!ax)
        goto loc_1c67ea;
    if (al)
        goto loc_1c67df;
    al = memoryAGet(ds, edi + 76);
loc_1c67df: // 0160:1c67df
    if (ah)
        goto loc_1c67e6;
    ah = memoryAGet(ds, edi + 77);
loc_1c67e6: // 0160:1c67e6
    memoryASet16(ds, edi + 76, ax);
loc_1c67ea: // 0160:1c67ea
    ax = memoryAGet16(ds, esi + 78);
    if (!ax)
        goto loc_1c6805;
    if (al)
        goto loc_1c67fa;
    al = memoryAGet(ds, edi + 78);
loc_1c67fa: // 0160:1c67fa
    if (ah)
        goto loc_1c6801;
    ah = memoryAGet(ds, edi + 79);
loc_1c6801: // 0160:1c6801
    memoryASet16(ds, edi + 78, ax);
loc_1c6805: // 0160:1c6805
    eax = memoryAGet32(ds, esi + 80);
    if (!eax)
        goto loc_1c683e;
    if (!ax)
        goto loc_1c6823;
    if (al)
        goto loc_1c6818;
    al = memoryAGet(ds, edi + 80);
loc_1c6818: // 0160:1c6818
    if (ah)
        goto loc_1c681f;
    ah = memoryAGet(ds, edi + 81);
loc_1c681f: // 0160:1c681f
    memoryASet16(ds, edi + 80, ax);
loc_1c6823: // 0160:1c6823
    ax = memoryAGet16(ds, esi + 82);
    if (!ax)
        goto loc_1c683e;
    if (al)
        goto loc_1c6833;
    al = memoryAGet(ds, edi + 82);
loc_1c6833: // 0160:1c6833
    if (ah)
        goto loc_1c683a;
    ah = memoryAGet(ds, edi + 83);
loc_1c683a: // 0160:1c683a
    memoryASet16(ds, edi + 82, ax);
loc_1c683e: // 0160:1c683e
    eax = memoryAGet32(ds, esi + 84);
    if (!eax)
        goto loc_1c6877;
    if (!ax)
        goto loc_1c685c;
    if (al)
        goto loc_1c6851;
    al = memoryAGet(ds, edi + 84);
loc_1c6851: // 0160:1c6851
    if (ah)
        goto loc_1c6858;
    ah = memoryAGet(ds, edi + 85);
loc_1c6858: // 0160:1c6858
    memoryASet16(ds, edi + 84, ax);
loc_1c685c: // 0160:1c685c
    ax = memoryAGet16(ds, esi + 86);
    if (!ax)
        goto loc_1c6877;
    if (al)
        goto loc_1c686c;
    al = memoryAGet(ds, edi + 86);
loc_1c686c: // 0160:1c686c
    if (ah)
        goto loc_1c6873;
    ah = memoryAGet(ds, edi + 87);
loc_1c6873: // 0160:1c6873
    memoryASet16(ds, edi + 86, ax);
loc_1c6877: // 0160:1c6877
    eax = memoryAGet32(ds, esi + 88);
    if (!eax)
        goto loc_1c68b0;
    if (!ax)
        goto loc_1c6895;
    if (al)
        goto loc_1c688a;
    al = memoryAGet(ds, edi + 88);
loc_1c688a: // 0160:1c688a
    if (ah)
        goto loc_1c6891;
    ah = memoryAGet(ds, edi + 89);
loc_1c6891: // 0160:1c6891
    memoryASet16(ds, edi + 88, ax);
loc_1c6895: // 0160:1c6895
    ax = memoryAGet16(ds, esi + 90);
    if (!ax)
        goto loc_1c68b0;
    if (al)
        goto loc_1c68a5;
    al = memoryAGet(ds, edi + 90);
loc_1c68a5: // 0160:1c68a5
    if (ah)
        goto loc_1c68ac;
    ah = memoryAGet(ds, edi + 91);
loc_1c68ac: // 0160:1c68ac
    memoryASet16(ds, edi + 90, ax);
loc_1c68b0: // 0160:1c68b0
    eax = memoryAGet32(ds, esi + 92);
    if (!eax)
        goto loc_1c68e9;
    if (!ax)
        goto loc_1c68ce;
    if (al)
        goto loc_1c68c3;
    al = memoryAGet(ds, edi + 92);
loc_1c68c3: // 0160:1c68c3
    if (ah)
        goto loc_1c68ca;
    ah = memoryAGet(ds, edi + 93);
loc_1c68ca: // 0160:1c68ca
    memoryASet16(ds, edi + 92, ax);
loc_1c68ce: // 0160:1c68ce
    ax = memoryAGet16(ds, esi + 94);
    if (!ax)
        goto loc_1c68e9;
    if (al)
        goto loc_1c68de;
    al = memoryAGet(ds, edi + 94);
loc_1c68de: // 0160:1c68de
    if (ah)
        goto loc_1c68e5;
    ah = memoryAGet(ds, edi + 95);
loc_1c68e5: // 0160:1c68e5
    memoryASet16(ds, edi + 94, ax);
loc_1c68e9: // 0160:1c68e9
    eax = memoryAGet32(ds, esi + 96);
    if (!eax)
        goto loc_1c6922;
    if (!ax)
        goto loc_1c6907;
    if (al)
        goto loc_1c68fc;
    al = memoryAGet(ds, edi + 96);
loc_1c68fc: // 0160:1c68fc
    if (ah)
        goto loc_1c6903;
    ah = memoryAGet(ds, edi + 97);
loc_1c6903: // 0160:1c6903
    memoryASet16(ds, edi + 96, ax);
loc_1c6907: // 0160:1c6907
    ax = memoryAGet16(ds, esi + 98);
    if (!ax)
        goto loc_1c6922;
    if (al)
        goto loc_1c6917;
    al = memoryAGet(ds, edi + 98);
loc_1c6917: // 0160:1c6917
    if (ah)
        goto loc_1c691e;
    ah = memoryAGet(ds, edi + 99);
loc_1c691e: // 0160:1c691e
    memoryASet16(ds, edi + 98, ax);
loc_1c6922: // 0160:1c6922
    eax = memoryAGet32(ds, esi + 100);
    if (!eax)
        goto loc_1c695b;
    if (!ax)
        goto loc_1c6940;
    if (al)
        goto loc_1c6935;
    al = memoryAGet(ds, edi + 100);
loc_1c6935: // 0160:1c6935
    if (ah)
        goto loc_1c693c;
    ah = memoryAGet(ds, edi + 101);
loc_1c693c: // 0160:1c693c
    memoryASet16(ds, edi + 100, ax);
loc_1c6940: // 0160:1c6940
    ax = memoryAGet16(ds, esi + 102);
    if (!ax)
        goto loc_1c695b;
    if (al)
        goto loc_1c6950;
    al = memoryAGet(ds, edi + 102);
loc_1c6950: // 0160:1c6950
    if (ah)
        goto loc_1c6957;
    ah = memoryAGet(ds, edi + 103);
loc_1c6957: // 0160:1c6957
    memoryASet16(ds, edi + 102, ax);
loc_1c695b: // 0160:1c695b
    eax = memoryAGet32(ds, esi + 104);
    if (!eax)
        goto loc_1c6994;
    if (!ax)
        goto loc_1c6979;
    if (al)
        goto loc_1c696e;
    al = memoryAGet(ds, edi + 104);
loc_1c696e: // 0160:1c696e
    if (ah)
        goto loc_1c6975;
    ah = memoryAGet(ds, edi + 105);
loc_1c6975: // 0160:1c6975
    memoryASet16(ds, edi + 104, ax);
loc_1c6979: // 0160:1c6979
    ax = memoryAGet16(ds, esi + 106);
    if (!ax)
        goto loc_1c6994;
    if (al)
        goto loc_1c6989;
    al = memoryAGet(ds, edi + 106);
loc_1c6989: // 0160:1c6989
    if (ah)
        goto loc_1c6990;
    ah = memoryAGet(ds, edi + 107);
loc_1c6990: // 0160:1c6990
    memoryASet16(ds, edi + 106, ax);
loc_1c6994: // 0160:1c6994
    eax = memoryAGet32(ds, esi + 108);
    if (!eax)
        goto loc_1c69cd;
    if (!ax)
        goto loc_1c69b2;
    if (al)
        goto loc_1c69a7;
    al = memoryAGet(ds, edi + 108);
loc_1c69a7: // 0160:1c69a7
    if (ah)
        goto loc_1c69ae;
    ah = memoryAGet(ds, edi + 109);
loc_1c69ae: // 0160:1c69ae
    memoryASet16(ds, edi + 108, ax);
loc_1c69b2: // 0160:1c69b2
    ax = memoryAGet16(ds, esi + 110);
    if (!ax)
        goto loc_1c69cd;
    if (al)
        goto loc_1c69c2;
    al = memoryAGet(ds, edi + 110);
loc_1c69c2: // 0160:1c69c2
    if (ah)
        goto loc_1c69c9;
    ah = memoryAGet(ds, edi + 111);
loc_1c69c9: // 0160:1c69c9
    memoryASet16(ds, edi + 110, ax);
loc_1c69cd: // 0160:1c69cd
    eax = memoryAGet32(ds, esi + 112);
    if (!eax)
        goto loc_1c6a06;
    if (!ax)
        goto loc_1c69eb;
    if (al)
        goto loc_1c69e0;
    al = memoryAGet(ds, edi + 112);
loc_1c69e0: // 0160:1c69e0
    if (ah)
        goto loc_1c69e7;
    ah = memoryAGet(ds, edi + 113);
loc_1c69e7: // 0160:1c69e7
    memoryASet16(ds, edi + 112, ax);
loc_1c69eb: // 0160:1c69eb
    ax = memoryAGet16(ds, esi + 114);
    if (!ax)
        goto loc_1c6a06;
    if (al)
        goto loc_1c69fb;
    al = memoryAGet(ds, edi + 114);
loc_1c69fb: // 0160:1c69fb
    if (ah)
        goto loc_1c6a02;
    ah = memoryAGet(ds, edi + 115);
loc_1c6a02: // 0160:1c6a02
    memoryASet16(ds, edi + 114, ax);
loc_1c6a06: // 0160:1c6a06
    eax = memoryAGet32(ds, esi + 116);
    if (!eax)
        goto loc_1c6a3f;
    if (!ax)
        goto loc_1c6a24;
    if (al)
        goto loc_1c6a19;
    al = memoryAGet(ds, edi + 116);
loc_1c6a19: // 0160:1c6a19
    if (ah)
        goto loc_1c6a20;
    ah = memoryAGet(ds, edi + 117);
loc_1c6a20: // 0160:1c6a20
    memoryASet16(ds, edi + 116, ax);
loc_1c6a24: // 0160:1c6a24
    ax = memoryAGet16(ds, esi + 118);
    if (!ax)
        goto loc_1c6a3f;
    if (al)
        goto loc_1c6a34;
    al = memoryAGet(ds, edi + 118);
loc_1c6a34: // 0160:1c6a34
    if (ah)
        goto loc_1c6a3b;
    ah = memoryAGet(ds, edi + 119);
loc_1c6a3b: // 0160:1c6a3b
    memoryASet16(ds, edi + 118, ax);
loc_1c6a3f: // 0160:1c6a3f
    eax = memoryAGet32(ds, esi + 120);
    if (!eax)
        goto loc_1c6a78;
    if (!ax)
        goto loc_1c6a5d;
    if (al)
        goto loc_1c6a52;
    al = memoryAGet(ds, edi + 120);
loc_1c6a52: // 0160:1c6a52
    if (ah)
        goto loc_1c6a59;
    ah = memoryAGet(ds, edi + 121);
loc_1c6a59: // 0160:1c6a59
    memoryASet16(ds, edi + 120, ax);
loc_1c6a5d: // 0160:1c6a5d
    ax = memoryAGet16(ds, esi + 122);
    if (!ax)
        goto loc_1c6a78;
    if (al)
        goto loc_1c6a6d;
    al = memoryAGet(ds, edi + 122);
loc_1c6a6d: // 0160:1c6a6d
    if (ah)
        goto loc_1c6a74;
    ah = memoryAGet(ds, edi + 123);
loc_1c6a74: // 0160:1c6a74
    memoryASet16(ds, edi + 122, ax);
loc_1c6a78: // 0160:1c6a78
    eax = memoryAGet32(ds, esi + 124);
    if (!eax)
        goto loc_1c6ab1;
    if (!ax)
        goto loc_1c6a96;
    if (al)
        goto loc_1c6a8b;
    al = memoryAGet(ds, edi + 124);
loc_1c6a8b: // 0160:1c6a8b
    if (ah)
        goto loc_1c6a92;
    ah = memoryAGet(ds, edi + 125);
loc_1c6a92: // 0160:1c6a92
    memoryASet16(ds, edi + 124, ax);
loc_1c6a96: // 0160:1c6a96
    ax = memoryAGet16(ds, esi + 126);
    if (!ax)
        goto loc_1c6ab1;
    if (al)
        goto loc_1c6aa6;
    al = memoryAGet(ds, edi + 126);
loc_1c6aa6: // 0160:1c6aa6
    if (ah)
        goto loc_1c6aad;
    ah = memoryAGet(ds, edi + 127);
loc_1c6aad: // 0160:1c6aad
    memoryASet16(ds, edi + 126, ax);
loc_1c6ab1: // 0160:1c6ab1
    eax = memoryAGet32(ds, esi + 128);
    if (!eax)
        goto loc_1c6b02;
    if (!ax)
        goto loc_1c6adb;
    if (al)
        goto loc_1c6aca;
    al = memoryAGet(ds, edi + 128);
loc_1c6aca: // 0160:1c6aca
    if (ah)
        goto loc_1c6ad4;
    ah = memoryAGet(ds, edi + 129);
loc_1c6ad4: // 0160:1c6ad4
    memoryASet16(ds, edi + 128, ax);
loc_1c6adb: // 0160:1c6adb
    ax = memoryAGet16(ds, esi + 130);
    if (!ax)
        goto loc_1c6b02;
    if (al)
        goto loc_1c6af1;
    al = memoryAGet(ds, edi + 130);
loc_1c6af1: // 0160:1c6af1
    if (ah)
        goto loc_1c6afb;
    ah = memoryAGet(ds, edi + 131);
loc_1c6afb: // 0160:1c6afb
    memoryASet16(ds, edi + 130, ax);
loc_1c6b02: // 0160:1c6b02
    eax = memoryAGet32(ds, esi + 132);
    if (!eax)
        goto loc_1c6b53;
    if (!ax)
        goto loc_1c6b2c;
    if (al)
        goto loc_1c6b1b;
    al = memoryAGet(ds, edi + 132);
loc_1c6b1b: // 0160:1c6b1b
    if (ah)
        goto loc_1c6b25;
    ah = memoryAGet(ds, edi + 133);
loc_1c6b25: // 0160:1c6b25
    memoryASet16(ds, edi + 132, ax);
loc_1c6b2c: // 0160:1c6b2c
    ax = memoryAGet16(ds, esi + 134);
    if (!ax)
        goto loc_1c6b53;
    if (al)
        goto loc_1c6b42;
    al = memoryAGet(ds, edi + 134);
loc_1c6b42: // 0160:1c6b42
    if (ah)
        goto loc_1c6b4c;
    ah = memoryAGet(ds, edi + 135);
loc_1c6b4c: // 0160:1c6b4c
    memoryASet16(ds, edi + 134, ax);
loc_1c6b53: // 0160:1c6b53
    eax = memoryAGet32(ds, esi + 136);
    if (!eax)
        goto loc_1c6ba4;
    if (!ax)
        goto loc_1c6b7d;
    if (al)
        goto loc_1c6b6c;
    al = memoryAGet(ds, edi + 136);
loc_1c6b6c: // 0160:1c6b6c
    if (ah)
        goto loc_1c6b76;
    ah = memoryAGet(ds, edi + 137);
loc_1c6b76: // 0160:1c6b76
    memoryASet16(ds, edi + 136, ax);
loc_1c6b7d: // 0160:1c6b7d
    ax = memoryAGet16(ds, esi + 138);
    if (!ax)
        goto loc_1c6ba4;
    if (al)
        goto loc_1c6b93;
    al = memoryAGet(ds, edi + 138);
loc_1c6b93: // 0160:1c6b93
    if (ah)
        goto loc_1c6b9d;
    ah = memoryAGet(ds, edi + 139);
loc_1c6b9d: // 0160:1c6b9d
    memoryASet16(ds, edi + 138, ax);
loc_1c6ba4: // 0160:1c6ba4
    eax = memoryAGet32(ds, esi + 140);
    if (!eax)
        goto loc_1c6bf5;
    if (!ax)
        goto loc_1c6bce;
    if (al)
        goto loc_1c6bbd;
    al = memoryAGet(ds, edi + 140);
loc_1c6bbd: // 0160:1c6bbd
    if (ah)
        goto loc_1c6bc7;
    ah = memoryAGet(ds, edi + 141);
loc_1c6bc7: // 0160:1c6bc7
    memoryASet16(ds, edi + 140, ax);
loc_1c6bce: // 0160:1c6bce
    ax = memoryAGet16(ds, esi + 142);
    if (!ax)
        goto loc_1c6bf5;
    if (al)
        goto loc_1c6be4;
    al = memoryAGet(ds, edi + 142);
loc_1c6be4: // 0160:1c6be4
    if (ah)
        goto loc_1c6bee;
    ah = memoryAGet(ds, edi + 143);
loc_1c6bee: // 0160:1c6bee
    memoryASet16(ds, edi + 142, ax);
loc_1c6bf5: // 0160:1c6bf5
    eax = memoryAGet32(ds, esi + 144);
    if (!eax)
        goto loc_1c6c46;
    if (!ax)
        goto loc_1c6c1f;
    if (al)
        goto loc_1c6c0e;
    al = memoryAGet(ds, edi + 144);
loc_1c6c0e: // 0160:1c6c0e
    if (ah)
        goto loc_1c6c18;
    ah = memoryAGet(ds, edi + 145);
loc_1c6c18: // 0160:1c6c18
    memoryASet16(ds, edi + 144, ax);
loc_1c6c1f: // 0160:1c6c1f
    ax = memoryAGet16(ds, esi + 146);
    if (!ax)
        goto loc_1c6c46;
    if (al)
        goto loc_1c6c35;
    al = memoryAGet(ds, edi + 146);
loc_1c6c35: // 0160:1c6c35
    if (ah)
        goto loc_1c6c3f;
    ah = memoryAGet(ds, edi + 147);
loc_1c6c3f: // 0160:1c6c3f
    memoryASet16(ds, edi + 146, ax);
loc_1c6c46: // 0160:1c6c46
    eax = memoryAGet32(ds, esi + 148);
    if (!eax)
        goto loc_1c6c97;
    if (!ax)
        goto loc_1c6c70;
    if (al)
        goto loc_1c6c5f;
    al = memoryAGet(ds, edi + 148);
loc_1c6c5f: // 0160:1c6c5f
    if (ah)
        goto loc_1c6c69;
    ah = memoryAGet(ds, edi + 149);
loc_1c6c69: // 0160:1c6c69
    memoryASet16(ds, edi + 148, ax);
loc_1c6c70: // 0160:1c6c70
    ax = memoryAGet16(ds, esi + 150);
    if (!ax)
        goto loc_1c6c97;
    if (al)
        goto loc_1c6c86;
    al = memoryAGet(ds, edi + 150);
loc_1c6c86: // 0160:1c6c86
    if (ah)
        goto loc_1c6c90;
    ah = memoryAGet(ds, edi + 151);
loc_1c6c90: // 0160:1c6c90
    memoryASet16(ds, edi + 150, ax);
loc_1c6c97: // 0160:1c6c97
    eax = memoryAGet32(ds, esi + 152);
    if (!eax)
        goto loc_1c6ce8;
    if (!ax)
        goto loc_1c6cc1;
    if (al)
        goto loc_1c6cb0;
    al = memoryAGet(ds, edi + 152);
loc_1c6cb0: // 0160:1c6cb0
    if (ah)
        goto loc_1c6cba;
    ah = memoryAGet(ds, edi + 153);
loc_1c6cba: // 0160:1c6cba
    memoryASet16(ds, edi + 152, ax);
loc_1c6cc1: // 0160:1c6cc1
    ax = memoryAGet16(ds, esi + 154);
    if (!ax)
        goto loc_1c6ce8;
    if (al)
        goto loc_1c6cd7;
    al = memoryAGet(ds, edi + 154);
loc_1c6cd7: // 0160:1c6cd7
    if (ah)
        goto loc_1c6ce1;
    ah = memoryAGet(ds, edi + 155);
loc_1c6ce1: // 0160:1c6ce1
    memoryASet16(ds, edi + 154, ax);
loc_1c6ce8: // 0160:1c6ce8
    eax = memoryAGet32(ds, esi + 156);
    if (!eax)
        goto loc_1c6d39;
    if (!ax)
        goto loc_1c6d12;
    if (al)
        goto loc_1c6d01;
    al = memoryAGet(ds, edi + 156);
loc_1c6d01: // 0160:1c6d01
    if (ah)
        goto loc_1c6d0b;
    ah = memoryAGet(ds, edi + 157);
loc_1c6d0b: // 0160:1c6d0b
    memoryASet16(ds, edi + 156, ax);
loc_1c6d12: // 0160:1c6d12
    ax = memoryAGet16(ds, esi + 158);
    if (!ax)
        goto loc_1c6d39;
    if (al)
        goto loc_1c6d28;
    al = memoryAGet(ds, edi + 158);
loc_1c6d28: // 0160:1c6d28
    if (ah)
        goto loc_1c6d32;
    ah = memoryAGet(ds, edi + 159);
loc_1c6d32: // 0160:1c6d32
    memoryASet16(ds, edi + 158, ax);
loc_1c6d39: // 0160:1c6d39
    eax = memoryAGet32(ds, esi + 160);
    if (!eax)
        goto loc_1c6d8a;
    if (!ax)
        goto loc_1c6d63;
    if (al)
        goto loc_1c6d52;
    al = memoryAGet(ds, edi + 160);
loc_1c6d52: // 0160:1c6d52
    if (ah)
        goto loc_1c6d5c;
    ah = memoryAGet(ds, edi + 161);
loc_1c6d5c: // 0160:1c6d5c
    memoryASet16(ds, edi + 160, ax);
loc_1c6d63: // 0160:1c6d63
    ax = memoryAGet16(ds, esi + 162);
    if (!ax)
        goto loc_1c6d8a;
    if (al)
        goto loc_1c6d79;
    al = memoryAGet(ds, edi + 162);
loc_1c6d79: // 0160:1c6d79
    if (ah)
        goto loc_1c6d83;
    ah = memoryAGet(ds, edi + 163);
loc_1c6d83: // 0160:1c6d83
    memoryASet16(ds, edi + 162, ax);
loc_1c6d8a: // 0160:1c6d8a
    eax = memoryAGet32(ds, esi + 164);
    if (!eax)
        goto loc_1c6ddb;
    if (!ax)
        goto loc_1c6db4;
    if (al)
        goto loc_1c6da3;
    al = memoryAGet(ds, edi + 164);
loc_1c6da3: // 0160:1c6da3
    if (ah)
        goto loc_1c6dad;
    ah = memoryAGet(ds, edi + 165);
loc_1c6dad: // 0160:1c6dad
    memoryASet16(ds, edi + 164, ax);
loc_1c6db4: // 0160:1c6db4
    ax = memoryAGet16(ds, esi + 166);
    if (!ax)
        goto loc_1c6ddb;
    if (al)
        goto loc_1c6dca;
    al = memoryAGet(ds, edi + 166);
loc_1c6dca: // 0160:1c6dca
    if (ah)
        goto loc_1c6dd4;
    ah = memoryAGet(ds, edi + 167);
loc_1c6dd4: // 0160:1c6dd4
    memoryASet16(ds, edi + 166, ax);
loc_1c6ddb: // 0160:1c6ddb
    eax = memoryAGet32(ds, esi + 168);
    if (!eax)
        goto loc_1c6e2c;
    if (!ax)
        goto loc_1c6e05;
    if (al)
        goto loc_1c6df4;
    al = memoryAGet(ds, edi + 168);
loc_1c6df4: // 0160:1c6df4
    if (ah)
        goto loc_1c6dfe;
    ah = memoryAGet(ds, edi + 169);
loc_1c6dfe: // 0160:1c6dfe
    memoryASet16(ds, edi + 168, ax);
loc_1c6e05: // 0160:1c6e05
    ax = memoryAGet16(ds, esi + 170);
    if (!ax)
        goto loc_1c6e2c;
    if (al)
        goto loc_1c6e1b;
    al = memoryAGet(ds, edi + 170);
loc_1c6e1b: // 0160:1c6e1b
    if (ah)
        goto loc_1c6e25;
    ah = memoryAGet(ds, edi + 171);
loc_1c6e25: // 0160:1c6e25
    memoryASet16(ds, edi + 170, ax);
loc_1c6e2c: // 0160:1c6e2c
    eax = memoryAGet32(ds, esi + 172);
    if (!eax)
        goto loc_1c6e7d;
    if (!ax)
        goto loc_1c6e56;
    if (al)
        goto loc_1c6e45;
    al = memoryAGet(ds, edi + 172);
loc_1c6e45: // 0160:1c6e45
    if (ah)
        goto loc_1c6e4f;
    ah = memoryAGet(ds, edi + 173);
loc_1c6e4f: // 0160:1c6e4f
    memoryASet16(ds, edi + 172, ax);
loc_1c6e56: // 0160:1c6e56
    ax = memoryAGet16(ds, esi + 174);
    if (!ax)
        goto loc_1c6e7d;
    if (al)
        goto loc_1c6e6c;
    al = memoryAGet(ds, edi + 174);
loc_1c6e6c: // 0160:1c6e6c
    if (ah)
        goto loc_1c6e76;
    ah = memoryAGet(ds, edi + 175);
loc_1c6e76: // 0160:1c6e76
    memoryASet16(ds, edi + 174, ax);
loc_1c6e7d: // 0160:1c6e7d
    eax = memoryAGet32(ds, esi + 176);
    if (!eax)
        goto loc_1c6ece;
    if (!ax)
        goto loc_1c6ea7;
    if (al)
        goto loc_1c6e96;
    al = memoryAGet(ds, edi + 176);
loc_1c6e96: // 0160:1c6e96
    if (ah)
        goto loc_1c6ea0;
    ah = memoryAGet(ds, edi + 177);
loc_1c6ea0: // 0160:1c6ea0
    memoryASet16(ds, edi + 176, ax);
loc_1c6ea7: // 0160:1c6ea7
    ax = memoryAGet16(ds, esi + 178);
    if (!ax)
        goto loc_1c6ece;
    if (al)
        goto loc_1c6ebd;
    al = memoryAGet(ds, edi + 178);
loc_1c6ebd: // 0160:1c6ebd
    if (ah)
        goto loc_1c6ec7;
    ah = memoryAGet(ds, edi + 179);
loc_1c6ec7: // 0160:1c6ec7
    memoryASet16(ds, edi + 178, ax);
loc_1c6ece: // 0160:1c6ece
    eax = memoryAGet32(ds, esi + 180);
    if (!eax)
        goto loc_1c6f1f;
    if (!ax)
        goto loc_1c6ef8;
    if (al)
        goto loc_1c6ee7;
    al = memoryAGet(ds, edi + 180);
loc_1c6ee7: // 0160:1c6ee7
    if (ah)
        goto loc_1c6ef1;
    ah = memoryAGet(ds, edi + 181);
loc_1c6ef1: // 0160:1c6ef1
    memoryASet16(ds, edi + 180, ax);
loc_1c6ef8: // 0160:1c6ef8
    ax = memoryAGet16(ds, esi + 182);
    if (!ax)
        goto loc_1c6f1f;
    if (al)
        goto loc_1c6f0e;
    al = memoryAGet(ds, edi + 182);
loc_1c6f0e: // 0160:1c6f0e
    if (ah)
        goto loc_1c6f18;
    ah = memoryAGet(ds, edi + 183);
loc_1c6f18: // 0160:1c6f18
    memoryASet16(ds, edi + 182, ax);
loc_1c6f1f: // 0160:1c6f1f
    eax = memoryAGet32(ds, esi + 184);
    if (!eax)
        goto loc_1c6f70;
    if (!ax)
        goto loc_1c6f49;
    if (al)
        goto loc_1c6f38;
    al = memoryAGet(ds, edi + 184);
loc_1c6f38: // 0160:1c6f38
    if (ah)
        goto loc_1c6f42;
    ah = memoryAGet(ds, edi + 185);
loc_1c6f42: // 0160:1c6f42
    memoryASet16(ds, edi + 184, ax);
loc_1c6f49: // 0160:1c6f49
    ax = memoryAGet16(ds, esi + 186);
    if (!ax)
        goto loc_1c6f70;
    if (al)
        goto loc_1c6f5f;
    al = memoryAGet(ds, edi + 186);
loc_1c6f5f: // 0160:1c6f5f
    if (ah)
        goto loc_1c6f69;
    ah = memoryAGet(ds, edi + 187);
loc_1c6f69: // 0160:1c6f69
    memoryASet16(ds, edi + 186, ax);
loc_1c6f70: // 0160:1c6f70
    eax = memoryAGet32(ds, esi + 188);
    if (!eax)
        goto loc_1c6fc1;
    if (!ax)
        goto loc_1c6f9a;
    if (al)
        goto loc_1c6f89;
    al = memoryAGet(ds, edi + 188);
loc_1c6f89: // 0160:1c6f89
    if (ah)
        goto loc_1c6f93;
    ah = memoryAGet(ds, edi + 189);
loc_1c6f93: // 0160:1c6f93
    memoryASet16(ds, edi + 188, ax);
loc_1c6f9a: // 0160:1c6f9a
    ax = memoryAGet16(ds, esi + 190);
    if (!ax)
        goto loc_1c6fc1;
    if (al)
        goto loc_1c6fb0;
    al = memoryAGet(ds, edi + 190);
loc_1c6fb0: // 0160:1c6fb0
    if (ah)
        goto loc_1c6fba;
    ah = memoryAGet(ds, edi + 191);
loc_1c6fba: // 0160:1c6fba
    memoryASet16(ds, edi + 190, ax);
loc_1c6fc1: // 0160:1c6fc1
    eax = memoryAGet32(ds, esi + 192);
    if (!eax)
        goto loc_1c7012;
    if (!ax)
        goto loc_1c6feb;
    if (al)
        goto loc_1c6fda;
    al = memoryAGet(ds, edi + 192);
loc_1c6fda: // 0160:1c6fda
    if (ah)
        goto loc_1c6fe4;
    ah = memoryAGet(ds, edi + 193);
loc_1c6fe4: // 0160:1c6fe4
    memoryASet16(ds, edi + 192, ax);
loc_1c6feb: // 0160:1c6feb
    ax = memoryAGet16(ds, esi + 194);
    if (!ax)
        goto loc_1c7012;
    if (al)
        goto loc_1c7001;
    al = memoryAGet(ds, edi + 194);
loc_1c7001: // 0160:1c7001
    if (ah)
        goto loc_1c700b;
    ah = memoryAGet(ds, edi + 195);
loc_1c700b: // 0160:1c700b
    memoryASet16(ds, edi + 194, ax);
loc_1c7012: // 0160:1c7012
    eax = memoryAGet32(ds, esi + 196);
    if (!eax)
        goto loc_1c7063;
    if (!ax)
        goto loc_1c703c;
    if (al)
        goto loc_1c702b;
    al = memoryAGet(ds, edi + 196);
loc_1c702b: // 0160:1c702b
    if (ah)
        goto loc_1c7035;
    ah = memoryAGet(ds, edi + 197);
loc_1c7035: // 0160:1c7035
    memoryASet16(ds, edi + 196, ax);
loc_1c703c: // 0160:1c703c
    ax = memoryAGet16(ds, esi + 198);
    if (!ax)
        goto loc_1c7063;
    if (al)
        goto loc_1c7052;
    al = memoryAGet(ds, edi + 198);
loc_1c7052: // 0160:1c7052
    if (ah)
        goto loc_1c705c;
    ah = memoryAGet(ds, edi + 199);
loc_1c705c: // 0160:1c705c
    memoryASet16(ds, edi + 198, ax);
loc_1c7063: // 0160:1c7063
    eax = memoryAGet32(ds, esi + 200);
    if (!eax)
        goto loc_1c70b4;
    if (!ax)
        goto loc_1c708d;
    if (al)
        goto loc_1c707c;
    al = memoryAGet(ds, edi + 200);
loc_1c707c: // 0160:1c707c
    if (ah)
        goto loc_1c7086;
    ah = memoryAGet(ds, edi + 201);
loc_1c7086: // 0160:1c7086
    memoryASet16(ds, edi + 200, ax);
loc_1c708d: // 0160:1c708d
    ax = memoryAGet16(ds, esi + 202);
    if (!ax)
        goto loc_1c70b4;
    if (al)
        goto loc_1c70a3;
    al = memoryAGet(ds, edi + 202);
loc_1c70a3: // 0160:1c70a3
    if (ah)
        goto loc_1c70ad;
    ah = memoryAGet(ds, edi + 203);
loc_1c70ad: // 0160:1c70ad
    memoryASet16(ds, edi + 202, ax);
loc_1c70b4: // 0160:1c70b4
    eax = memoryAGet32(ds, esi + 204);
    if (!eax)
        goto loc_1c7105;
    if (!ax)
        goto loc_1c70de;
    if (al)
        goto loc_1c70cd;
    al = memoryAGet(ds, edi + 204);
loc_1c70cd: // 0160:1c70cd
    if (ah)
        goto loc_1c70d7;
    ah = memoryAGet(ds, edi + 205);
loc_1c70d7: // 0160:1c70d7
    memoryASet16(ds, edi + 204, ax);
loc_1c70de: // 0160:1c70de
    ax = memoryAGet16(ds, esi + 206);
    if (!ax)
        goto loc_1c7105;
    if (al)
        goto loc_1c70f4;
    al = memoryAGet(ds, edi + 206);
loc_1c70f4: // 0160:1c70f4
    if (ah)
        goto loc_1c70fe;
    ah = memoryAGet(ds, edi + 207);
loc_1c70fe: // 0160:1c70fe
    memoryASet16(ds, edi + 206, ax);
loc_1c7105: // 0160:1c7105
    eax = memoryAGet32(ds, esi + 208);
    if (!eax)
        goto loc_1c7156;
    if (!ax)
        goto loc_1c712f;
    if (al)
        goto loc_1c711e;
    al = memoryAGet(ds, edi + 208);
loc_1c711e: // 0160:1c711e
    if (ah)
        goto loc_1c7128;
    ah = memoryAGet(ds, edi + 209);
loc_1c7128: // 0160:1c7128
    memoryASet16(ds, edi + 208, ax);
loc_1c712f: // 0160:1c712f
    ax = memoryAGet16(ds, esi + 210);
    if (!ax)
        goto loc_1c7156;
    if (al)
        goto loc_1c7145;
    al = memoryAGet(ds, edi + 210);
loc_1c7145: // 0160:1c7145
    if (ah)
        goto loc_1c714f;
    ah = memoryAGet(ds, edi + 211);
loc_1c714f: // 0160:1c714f
    memoryASet16(ds, edi + 210, ax);
loc_1c7156: // 0160:1c7156
    eax = memoryAGet32(ds, esi + 212);
    if (!eax)
        goto loc_1c71a7;
    if (!ax)
        goto loc_1c7180;
    if (al)
        goto loc_1c716f;
    al = memoryAGet(ds, edi + 212);
loc_1c716f: // 0160:1c716f
    if (ah)
        goto loc_1c7179;
    ah = memoryAGet(ds, edi + 213);
loc_1c7179: // 0160:1c7179
    memoryASet16(ds, edi + 212, ax);
loc_1c7180: // 0160:1c7180
    ax = memoryAGet16(ds, esi + 214);
    if (!ax)
        goto loc_1c71a7;
    if (al)
        goto loc_1c7196;
    al = memoryAGet(ds, edi + 214);
loc_1c7196: // 0160:1c7196
    if (ah)
        goto loc_1c71a0;
    ah = memoryAGet(ds, edi + 215);
loc_1c71a0: // 0160:1c71a0
    memoryASet16(ds, edi + 214, ax);
loc_1c71a7: // 0160:1c71a7
    eax = memoryAGet32(ds, esi + 216);
    if (!eax)
        goto loc_1c71f8;
    if (!ax)
        goto loc_1c71d1;
    if (al)
        goto loc_1c71c0;
    al = memoryAGet(ds, edi + 216);
loc_1c71c0: // 0160:1c71c0
    if (ah)
        goto loc_1c71ca;
    ah = memoryAGet(ds, edi + 217);
loc_1c71ca: // 0160:1c71ca
    memoryASet16(ds, edi + 216, ax);
loc_1c71d1: // 0160:1c71d1
    ax = memoryAGet16(ds, esi + 218);
    if (!ax)
        goto loc_1c71f8;
    if (al)
        goto loc_1c71e7;
    al = memoryAGet(ds, edi + 218);
loc_1c71e7: // 0160:1c71e7
    if (ah)
        goto loc_1c71f1;
    ah = memoryAGet(ds, edi + 219);
loc_1c71f1: // 0160:1c71f1
    memoryASet16(ds, edi + 218, ax);
loc_1c71f8: // 0160:1c71f8
    eax = memoryAGet32(ds, esi + 220);
    if (!eax)
        goto loc_1c7249;
    if (!ax)
        goto loc_1c7222;
    if (al)
        goto loc_1c7211;
    al = memoryAGet(ds, edi + 220);
loc_1c7211: // 0160:1c7211
    if (ah)
        goto loc_1c721b;
    ah = memoryAGet(ds, edi + 221);
loc_1c721b: // 0160:1c721b
    memoryASet16(ds, edi + 220, ax);
loc_1c7222: // 0160:1c7222
    ax = memoryAGet16(ds, esi + 222);
    if (!ax)
        goto loc_1c7249;
    if (al)
        goto loc_1c7238;
    al = memoryAGet(ds, edi + 222);
loc_1c7238: // 0160:1c7238
    if (ah)
        goto loc_1c7242;
    ah = memoryAGet(ds, edi + 223);
loc_1c7242: // 0160:1c7242
    memoryASet16(ds, edi + 222, ax);
loc_1c7249: // 0160:1c7249
    eax = memoryAGet32(ds, esi + 224);
    if (!eax)
        goto loc_1c729a;
    if (!ax)
        goto loc_1c7273;
    if (al)
        goto loc_1c7262;
    al = memoryAGet(ds, edi + 224);
loc_1c7262: // 0160:1c7262
    if (ah)
        goto loc_1c726c;
    ah = memoryAGet(ds, edi + 225);
loc_1c726c: // 0160:1c726c
    memoryASet16(ds, edi + 224, ax);
loc_1c7273: // 0160:1c7273
    ax = memoryAGet16(ds, esi + 226);
    if (!ax)
        goto loc_1c729a;
    if (al)
        goto loc_1c7289;
    al = memoryAGet(ds, edi + 226);
loc_1c7289: // 0160:1c7289
    if (ah)
        goto loc_1c7293;
    ah = memoryAGet(ds, edi + 227);
loc_1c7293: // 0160:1c7293
    memoryASet16(ds, edi + 226, ax);
loc_1c729a: // 0160:1c729a
    eax = memoryAGet32(ds, esi + 228);
    if (!eax)
        goto loc_1c72eb;
    if (!ax)
        goto loc_1c72c4;
    if (al)
        goto loc_1c72b3;
    al = memoryAGet(ds, edi + 228);
loc_1c72b3: // 0160:1c72b3
    if (ah)
        goto loc_1c72bd;
    ah = memoryAGet(ds, edi + 229);
loc_1c72bd: // 0160:1c72bd
    memoryASet16(ds, edi + 228, ax);
loc_1c72c4: // 0160:1c72c4
    ax = memoryAGet16(ds, esi + 230);
    if (!ax)
        goto loc_1c72eb;
    if (al)
        goto loc_1c72da;
    al = memoryAGet(ds, edi + 230);
loc_1c72da: // 0160:1c72da
    if (ah)
        goto loc_1c72e4;
    ah = memoryAGet(ds, edi + 231);
loc_1c72e4: // 0160:1c72e4
    memoryASet16(ds, edi + 230, ax);
loc_1c72eb: // 0160:1c72eb
    eax = memoryAGet32(ds, esi + 232);
    if (!eax)
        goto loc_1c733c;
    if (!ax)
        goto loc_1c7315;
    if (al)
        goto loc_1c7304;
    al = memoryAGet(ds, edi + 232);
loc_1c7304: // 0160:1c7304
    if (ah)
        goto loc_1c730e;
    ah = memoryAGet(ds, edi + 233);
loc_1c730e: // 0160:1c730e
    memoryASet16(ds, edi + 232, ax);
loc_1c7315: // 0160:1c7315
    ax = memoryAGet16(ds, esi + 234);
    if (!ax)
        goto loc_1c733c;
    if (al)
        goto loc_1c732b;
    al = memoryAGet(ds, edi + 234);
loc_1c732b: // 0160:1c732b
    if (ah)
        goto loc_1c7335;
    ah = memoryAGet(ds, edi + 235);
loc_1c7335: // 0160:1c7335
    memoryASet16(ds, edi + 234, ax);
loc_1c733c: // 0160:1c733c
    eax = memoryAGet32(ds, esi + 236);
    if (!eax)
        goto loc_1c738d;
    if (!ax)
        goto loc_1c7366;
    if (al)
        goto loc_1c7355;
    al = memoryAGet(ds, edi + 236);
loc_1c7355: // 0160:1c7355
    if (ah)
        goto loc_1c735f;
    ah = memoryAGet(ds, edi + 237);
loc_1c735f: // 0160:1c735f
    memoryASet16(ds, edi + 236, ax);
loc_1c7366: // 0160:1c7366
    ax = memoryAGet16(ds, esi + 238);
    if (!ax)
        goto loc_1c738d;
    if (al)
        goto loc_1c737c;
    al = memoryAGet(ds, edi + 238);
loc_1c737c: // 0160:1c737c
    if (ah)
        goto loc_1c7386;
    ah = memoryAGet(ds, edi + 239);
loc_1c7386: // 0160:1c7386
    memoryASet16(ds, edi + 238, ax);
loc_1c738d: // 0160:1c738d
    eax = memoryAGet32(ds, esi + 240);
    if (!eax)
        goto loc_1c73de;
    if (!ax)
        goto loc_1c73b7;
    if (al)
        goto loc_1c73a6;
    al = memoryAGet(ds, edi + 240);
loc_1c73a6: // 0160:1c73a6
    if (ah)
        goto loc_1c73b0;
    ah = memoryAGet(ds, edi + 241);
loc_1c73b0: // 0160:1c73b0
    memoryASet16(ds, edi + 240, ax);
loc_1c73b7: // 0160:1c73b7
    ax = memoryAGet16(ds, esi + 242);
    if (!ax)
        goto loc_1c73de;
    if (al)
        goto loc_1c73cd;
    al = memoryAGet(ds, edi + 242);
loc_1c73cd: // 0160:1c73cd
    if (ah)
        goto loc_1c73d7;
    ah = memoryAGet(ds, edi + 243);
loc_1c73d7: // 0160:1c73d7
    memoryASet16(ds, edi + 242, ax);
loc_1c73de: // 0160:1c73de
    eax = memoryAGet32(ds, esi + 244);
    if (!eax)
        goto loc_1c742f;
    if (!ax)
        goto loc_1c7408;
    if (al)
        goto loc_1c73f7;
    al = memoryAGet(ds, edi + 244);
loc_1c73f7: // 0160:1c73f7
    if (ah)
        goto loc_1c7401;
    ah = memoryAGet(ds, edi + 245);
loc_1c7401: // 0160:1c7401
    memoryASet16(ds, edi + 244, ax);
loc_1c7408: // 0160:1c7408
    ax = memoryAGet16(ds, esi + 246);
    if (!ax)
        goto loc_1c742f;
    if (al)
        goto loc_1c741e;
    al = memoryAGet(ds, edi + 246);
loc_1c741e: // 0160:1c741e
    if (ah)
        goto loc_1c7428;
    ah = memoryAGet(ds, edi + 247);
loc_1c7428: // 0160:1c7428
    memoryASet16(ds, edi + 246, ax);
loc_1c742f: // 0160:1c742f
    eax = memoryAGet32(ds, esi + 248);
    if (!eax)
        goto loc_1c7480;
    if (!ax)
        goto loc_1c7459;
    if (al)
        goto loc_1c7448;
    al = memoryAGet(ds, edi + 248);
loc_1c7448: // 0160:1c7448
    if (ah)
        goto loc_1c7452;
    ah = memoryAGet(ds, edi + 249);
loc_1c7452: // 0160:1c7452
    memoryASet16(ds, edi + 248, ax);
loc_1c7459: // 0160:1c7459
    ax = memoryAGet16(ds, esi + 250);
    if (!ax)
        goto loc_1c7480;
    if (al)
        goto loc_1c746f;
    al = memoryAGet(ds, edi + 250);
loc_1c746f: // 0160:1c746f
    if (ah)
        goto loc_1c7479;
    ah = memoryAGet(ds, edi + 251);
loc_1c7479: // 0160:1c7479
    memoryASet16(ds, edi + 250, ax);
loc_1c7480: // 0160:1c7480
    eax = memoryAGet32(ds, esi + 252);
    if (!eax)
        goto loc_1c74d1;
    if (!ax)
        goto loc_1c74aa;
    if (al)
        goto loc_1c7499;
    al = memoryAGet(ds, edi + 252);
loc_1c7499: // 0160:1c7499
    if (ah)
        goto loc_1c74a3;
    ah = memoryAGet(ds, edi + 253);
loc_1c74a3: // 0160:1c74a3
    memoryASet16(ds, edi + 252, ax);
loc_1c74aa: // 0160:1c74aa
    ax = memoryAGet16(ds, esi + 254);
    if (!ax)
        goto loc_1c74d1;
    if (al)
        goto loc_1c74c0;
    al = memoryAGet(ds, edi + 254);
loc_1c74c0: // 0160:1c74c0
    if (ah)
        goto loc_1c74ca;
    ah = memoryAGet(ds, edi + 255);
loc_1c74ca: // 0160:1c74ca
    memoryASet16(ds, edi + 254, ax);
loc_1c74d1: // 0160:1c74d1
    eax = memoryAGet32(ds, esi + 256);
    if (!eax)
        goto loc_1c7522;
    if (!ax)
        goto loc_1c74fb;
    if (al)
        goto loc_1c74ea;
    al = memoryAGet(ds, edi + 256);
loc_1c74ea: // 0160:1c74ea
    if (ah)
        goto loc_1c74f4;
    ah = memoryAGet(ds, edi + 257);
loc_1c74f4: // 0160:1c74f4
    memoryASet16(ds, edi + 256, ax);
loc_1c74fb: // 0160:1c74fb
    ax = memoryAGet16(ds, esi + 258);
    if (!ax)
        goto loc_1c7522;
    if (al)
        goto loc_1c7511;
    al = memoryAGet(ds, edi + 258);
loc_1c7511: // 0160:1c7511
    if (ah)
        goto loc_1c751b;
    ah = memoryAGet(ds, edi + 259);
loc_1c751b: // 0160:1c751b
    memoryASet16(ds, edi + 258, ax);
loc_1c7522: // 0160:1c7522
    eax = memoryAGet32(ds, esi + 260);
    if (!eax)
        goto loc_1c7573;
    if (!ax)
        goto loc_1c754c;
    if (al)
        goto loc_1c753b;
    al = memoryAGet(ds, edi + 260);
loc_1c753b: // 0160:1c753b
    if (ah)
        goto loc_1c7545;
    ah = memoryAGet(ds, edi + 261);
loc_1c7545: // 0160:1c7545
    memoryASet16(ds, edi + 260, ax);
loc_1c754c: // 0160:1c754c
    ax = memoryAGet16(ds, esi + 262);
    if (!ax)
        goto loc_1c7573;
    if (al)
        goto loc_1c7562;
    al = memoryAGet(ds, edi + 262);
loc_1c7562: // 0160:1c7562
    if (ah)
        goto loc_1c756c;
    ah = memoryAGet(ds, edi + 263);
loc_1c756c: // 0160:1c756c
    memoryASet16(ds, edi + 262, ax);
loc_1c7573: // 0160:1c7573
    eax = memoryAGet32(ds, esi + 264);
    if (!eax)
        goto loc_1c75c4;
    if (!ax)
        goto loc_1c759d;
    if (al)
        goto loc_1c758c;
    al = memoryAGet(ds, edi + 264);
loc_1c758c: // 0160:1c758c
    if (ah)
        goto loc_1c7596;
    ah = memoryAGet(ds, edi + 265);
loc_1c7596: // 0160:1c7596
    memoryASet16(ds, edi + 264, ax);
loc_1c759d: // 0160:1c759d
    ax = memoryAGet16(ds, esi + 266);
    if (!ax)
        goto loc_1c75c4;
    if (al)
        goto loc_1c75b3;
    al = memoryAGet(ds, edi + 266);
loc_1c75b3: // 0160:1c75b3
    if (ah)
        goto loc_1c75bd;
    ah = memoryAGet(ds, edi + 267);
loc_1c75bd: // 0160:1c75bd
    memoryASet16(ds, edi + 266, ax);
loc_1c75c4: // 0160:1c75c4
    eax = memoryAGet32(ds, esi + 268);
    if (!eax)
        goto loc_1c7615;
    if (!ax)
        goto loc_1c75ee;
    if (al)
        goto loc_1c75dd;
    al = memoryAGet(ds, edi + 268);
loc_1c75dd: // 0160:1c75dd
    if (ah)
        goto loc_1c75e7;
    ah = memoryAGet(ds, edi + 269);
loc_1c75e7: // 0160:1c75e7
    memoryASet16(ds, edi + 268, ax);
loc_1c75ee: // 0160:1c75ee
    ax = memoryAGet16(ds, esi + 270);
    if (!ax)
        goto loc_1c7615;
    if (al)
        goto loc_1c7604;
    al = memoryAGet(ds, edi + 270);
loc_1c7604: // 0160:1c7604
    if (ah)
        goto loc_1c760e;
    ah = memoryAGet(ds, edi + 271);
loc_1c760e: // 0160:1c760e
    memoryASet16(ds, edi + 270, ax);
loc_1c7615: // 0160:1c7615
    eax = memoryAGet32(ds, esi + 272);
    if (!eax)
        goto loc_1c7666;
    if (!ax)
        goto loc_1c763f;
    if (al)
        goto loc_1c762e;
    al = memoryAGet(ds, edi + 272);
loc_1c762e: // 0160:1c762e
    if (ah)
        goto loc_1c7638;
    ah = memoryAGet(ds, edi + 273);
loc_1c7638: // 0160:1c7638
    memoryASet16(ds, edi + 272, ax);
loc_1c763f: // 0160:1c763f
    ax = memoryAGet16(ds, esi + 274);
    if (!ax)
        goto loc_1c7666;
    if (al)
        goto loc_1c7655;
    al = memoryAGet(ds, edi + 274);
loc_1c7655: // 0160:1c7655
    if (ah)
        goto loc_1c765f;
    ah = memoryAGet(ds, edi + 275);
loc_1c765f: // 0160:1c765f
    memoryASet16(ds, edi + 274, ax);
loc_1c7666: // 0160:1c7666
    eax = memoryAGet32(ds, esi + 276);
    if (!eax)
        goto loc_1c76b7;
    if (!ax)
        goto loc_1c7690;
    if (al)
        goto loc_1c767f;
    al = memoryAGet(ds, edi + 276);
loc_1c767f: // 0160:1c767f
    if (ah)
        goto loc_1c7689;
    ah = memoryAGet(ds, edi + 277);
loc_1c7689: // 0160:1c7689
    memoryASet16(ds, edi + 276, ax);
loc_1c7690: // 0160:1c7690
    ax = memoryAGet16(ds, esi + 278);
    if (!ax)
        goto loc_1c76b7;
    if (al)
        goto loc_1c76a6;
    al = memoryAGet(ds, edi + 278);
loc_1c76a6: // 0160:1c76a6
    if (ah)
        goto loc_1c76b0;
    ah = memoryAGet(ds, edi + 279);
loc_1c76b0: // 0160:1c76b0
    memoryASet16(ds, edi + 278, ax);
loc_1c76b7: // 0160:1c76b7
    eax = memoryAGet32(ds, esi + 280);
    if (!eax)
        goto loc_1c7708;
    if (!ax)
        goto loc_1c76e1;
    if (al)
        goto loc_1c76d0;
    al = memoryAGet(ds, edi + 280);
loc_1c76d0: // 0160:1c76d0
    if (ah)
        goto loc_1c76da;
    ah = memoryAGet(ds, edi + 281);
loc_1c76da: // 0160:1c76da
    memoryASet16(ds, edi + 280, ax);
loc_1c76e1: // 0160:1c76e1
    ax = memoryAGet16(ds, esi + 282);
    if (!ax)
        goto loc_1c7708;
    if (al)
        goto loc_1c76f7;
    al = memoryAGet(ds, edi + 282);
loc_1c76f7: // 0160:1c76f7
    if (ah)
        goto loc_1c7701;
    ah = memoryAGet(ds, edi + 283);
loc_1c7701: // 0160:1c7701
    memoryASet16(ds, edi + 282, ax);
loc_1c7708: // 0160:1c7708
    eax = memoryAGet32(ds, esi + 284);
    if (!eax)
        goto loc_1c7759;
    if (!ax)
        goto loc_1c7732;
    if (al)
        goto loc_1c7721;
    al = memoryAGet(ds, edi + 284);
loc_1c7721: // 0160:1c7721
    if (ah)
        goto loc_1c772b;
    ah = memoryAGet(ds, edi + 285);
loc_1c772b: // 0160:1c772b
    memoryASet16(ds, edi + 284, ax);
loc_1c7732: // 0160:1c7732
    ax = memoryAGet16(ds, esi + 286);
    if (!ax)
        goto loc_1c7759;
    if (al)
        goto loc_1c7748;
    al = memoryAGet(ds, edi + 286);
loc_1c7748: // 0160:1c7748
    if (ah)
        goto loc_1c7752;
    ah = memoryAGet(ds, edi + 287);
loc_1c7752: // 0160:1c7752
    memoryASet16(ds, edi + 286, ax);
loc_1c7759: // 0160:1c7759
    eax = memoryAGet32(ds, esi + 288);
    if (!eax)
        goto loc_1c77aa;
    if (!ax)
        goto loc_1c7783;
    if (al)
        goto loc_1c7772;
    al = memoryAGet(ds, edi + 288);
loc_1c7772: // 0160:1c7772
    if (ah)
        goto loc_1c777c;
    ah = memoryAGet(ds, edi + 289);
loc_1c777c: // 0160:1c777c
    memoryASet16(ds, edi + 288, ax);
loc_1c7783: // 0160:1c7783
    ax = memoryAGet16(ds, esi + 290);
    if (!ax)
        goto loc_1c77aa;
    if (al)
        goto loc_1c7799;
    al = memoryAGet(ds, edi + 290);
loc_1c7799: // 0160:1c7799
    if (ah)
        goto loc_1c77a3;
    ah = memoryAGet(ds, edi + 291);
loc_1c77a3: // 0160:1c77a3
    memoryASet16(ds, edi + 290, ax);
loc_1c77aa: // 0160:1c77aa
    eax = memoryAGet32(ds, esi + 292);
    if (!eax)
        goto loc_1c77fb;
    if (!ax)
        goto loc_1c77d4;
    if (al)
        goto loc_1c77c3;
    al = memoryAGet(ds, edi + 292);
loc_1c77c3: // 0160:1c77c3
    if (ah)
        goto loc_1c77cd;
    ah = memoryAGet(ds, edi + 293);
loc_1c77cd: // 0160:1c77cd
    memoryASet16(ds, edi + 292, ax);
loc_1c77d4: // 0160:1c77d4
    ax = memoryAGet16(ds, esi + 294);
    if (!ax)
        goto loc_1c77fb;
    if (al)
        goto loc_1c77ea;
    al = memoryAGet(ds, edi + 294);
loc_1c77ea: // 0160:1c77ea
    if (ah)
        goto loc_1c77f4;
    ah = memoryAGet(ds, edi + 295);
loc_1c77f4: // 0160:1c77f4
    memoryASet16(ds, edi + 294, ax);
loc_1c77fb: // 0160:1c77fb
    eax = memoryAGet32(ds, esi + 296);
    if (!eax)
        goto loc_1c784c;
    if (!ax)
        goto loc_1c7825;
    if (al)
        goto loc_1c7814;
    al = memoryAGet(ds, edi + 296);
loc_1c7814: // 0160:1c7814
    if (ah)
        goto loc_1c781e;
    ah = memoryAGet(ds, edi + 297);
loc_1c781e: // 0160:1c781e
    memoryASet16(ds, edi + 296, ax);
loc_1c7825: // 0160:1c7825
    ax = memoryAGet16(ds, esi + 298);
    if (!ax)
        goto loc_1c784c;
    if (al)
        goto loc_1c783b;
    al = memoryAGet(ds, edi + 298);
loc_1c783b: // 0160:1c783b
    if (ah)
        goto loc_1c7845;
    ah = memoryAGet(ds, edi + 299);
loc_1c7845: // 0160:1c7845
    memoryASet16(ds, edi + 298, ax);
loc_1c784c: // 0160:1c784c
    eax = memoryAGet32(ds, esi + 300);
    if (!eax)
        goto loc_1c789d;
    if (!ax)
        goto loc_1c7876;
    if (al)
        goto loc_1c7865;
    al = memoryAGet(ds, edi + 300);
loc_1c7865: // 0160:1c7865
    if (ah)
        goto loc_1c786f;
    ah = memoryAGet(ds, edi + 301);
loc_1c786f: // 0160:1c786f
    memoryASet16(ds, edi + 300, ax);
loc_1c7876: // 0160:1c7876
    ax = memoryAGet16(ds, esi + 302);
    if (!ax)
        goto loc_1c789d;
    if (al)
        goto loc_1c788c;
    al = memoryAGet(ds, edi + 302);
loc_1c788c: // 0160:1c788c
    if (ah)
        goto loc_1c7896;
    ah = memoryAGet(ds, edi + 303);
loc_1c7896: // 0160:1c7896
    memoryASet16(ds, edi + 302, ax);
loc_1c789d: // 0160:1c789d
    eax = memoryAGet32(ds, esi + 304);
    if (!eax)
        goto loc_1c78ee;
    if (!ax)
        goto loc_1c78c7;
    if (al)
        goto loc_1c78b6;
    al = memoryAGet(ds, edi + 304);
loc_1c78b6: // 0160:1c78b6
    if (ah)
        goto loc_1c78c0;
    ah = memoryAGet(ds, edi + 305);
loc_1c78c0: // 0160:1c78c0
    memoryASet16(ds, edi + 304, ax);
loc_1c78c7: // 0160:1c78c7
    ax = memoryAGet16(ds, esi + 306);
    if (!ax)
        goto loc_1c78ee;
    if (al)
        goto loc_1c78dd;
    al = memoryAGet(ds, edi + 306);
loc_1c78dd: // 0160:1c78dd
    if (ah)
        goto loc_1c78e7;
    ah = memoryAGet(ds, edi + 307);
loc_1c78e7: // 0160:1c78e7
    memoryASet16(ds, edi + 306, ax);
loc_1c78ee: // 0160:1c78ee
    eax = memoryAGet32(ds, esi + 308);
    if (!eax)
        goto loc_1c793f;
    if (!ax)
        goto loc_1c7918;
    if (al)
        goto loc_1c7907;
    al = memoryAGet(ds, edi + 308);
loc_1c7907: // 0160:1c7907
    if (ah)
        goto loc_1c7911;
    ah = memoryAGet(ds, edi + 309);
loc_1c7911: // 0160:1c7911
    memoryASet16(ds, edi + 308, ax);
loc_1c7918: // 0160:1c7918
    ax = memoryAGet16(ds, esi + 310);
    if (!ax)
        goto loc_1c793f;
    if (al)
        goto loc_1c792e;
    al = memoryAGet(ds, edi + 310);
loc_1c792e: // 0160:1c792e
    if (ah)
        goto loc_1c7938;
    ah = memoryAGet(ds, edi + 311);
loc_1c7938: // 0160:1c7938
    memoryASet16(ds, edi + 310, ax);
loc_1c793f: // 0160:1c793f
    eax = memoryAGet32(ds, esi + 312);
    if (!eax)
        goto loc_1c7990;
    if (!ax)
        goto loc_1c7969;
    if (al)
        goto loc_1c7958;
    al = memoryAGet(ds, edi + 312);
loc_1c7958: // 0160:1c7958
    if (ah)
        goto loc_1c7962;
    ah = memoryAGet(ds, edi + 313);
loc_1c7962: // 0160:1c7962
    memoryASet16(ds, edi + 312, ax);
loc_1c7969: // 0160:1c7969
    ax = memoryAGet16(ds, esi + 314);
    if (!ax)
        goto loc_1c7990;
    if (al)
        goto loc_1c797f;
    al = memoryAGet(ds, edi + 314);
loc_1c797f: // 0160:1c797f
    if (ah)
        goto loc_1c7989;
    ah = memoryAGet(ds, edi + 315);
loc_1c7989: // 0160:1c7989
    memoryASet16(ds, edi + 314, ax);
loc_1c7990: // 0160:1c7990
    eax = memoryAGet32(ds, esi + 316);
    if (!eax)
        goto loc_1c79e1;
    if (!ax)
        goto loc_1c79ba;
    if (al)
        goto loc_1c79a9;
    al = memoryAGet(ds, edi + 316);
loc_1c79a9: // 0160:1c79a9
    if (ah)
        goto loc_1c79b3;
    ah = memoryAGet(ds, edi + 317);
loc_1c79b3: // 0160:1c79b3
    memoryASet16(ds, edi + 316, ax);
loc_1c79ba: // 0160:1c79ba
    ax = memoryAGet16(ds, esi + 318);
    if (!ax)
        goto loc_1c79e1;
    if (al)
        goto loc_1c79d0;
    al = memoryAGet(ds, edi + 318);
loc_1c79d0: // 0160:1c79d0
    if (ah)
        goto loc_1c79da;
    ah = memoryAGet(ds, edi + 319);
loc_1c79da: // 0160:1c79da
    memoryASet16(ds, edi + 318, ax);
loc_1c79e1: // 0160:1c79e1
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_1c6394;
    stop("disassembly failed at 160:1c79f4 popal ");
    esp += 4;
}
void sub_1c79f6() // 0160:1c79f6 +long
{
    esp -= 4;
    stop("disassembly failed at 160:1c79f6 pushal ");
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    eax = memoryAGet32(ds, esi + 480);
    memoryASet32(ds, edi + 640, eax);
    eax = memoryAGet32(ds, esi + 484);
    memoryASet32(ds, edi + 644, eax);
    eax = memoryAGet32(ds, esi + 960);
    memoryASet32(ds, edi + 1280, eax);
    eax = memoryAGet32(ds, esi + 964);
    memoryASet32(ds, edi + 1284, eax);
    eax = memoryAGet32(ds, esi + 1440);
    memoryASet32(ds, edi + 1920, eax);
    eax = memoryAGet32(ds, esi + 1444);
    memoryASet32(ds, edi + 1924, eax);
    eax = memoryAGet32(ds, esi + 1920);
    memoryASet32(ds, edi + 2560, eax);
    eax = memoryAGet32(ds, esi + 1924);
    memoryASet32(ds, edi + 2564, eax);
    eax = memoryAGet32(ds, esi + 2400);
    memoryASet32(ds, edi + 3200, eax);
    eax = memoryAGet32(ds, esi + 2404);
    memoryASet32(ds, edi + 3204, eax);
    eax = memoryAGet32(ds, esi + 2880);
    memoryASet32(ds, edi + 3840, eax);
    eax = memoryAGet32(ds, esi + 2884);
    memoryASet32(ds, edi + 3844, eax);
    eax = memoryAGet32(ds, esi + 3360);
    memoryASet32(ds, edi + 4480, eax);
    eax = memoryAGet32(ds, esi + 3364);
    memoryASet32(ds, edi + 4484, eax);
    stop("disassembly failed at 160:1c7aad popal ");
    esp += 4;
}
void sub_1c7aaf() // 0160:1c7aaf +long
{
    esp -= 4;
    stop("disassembly failed at 160:1c7aaf pushal ");
    esi = eax;
    edi = edx;
    if ((int32_t)ebx <= (int32_t)0x00000000)
        goto loc_1c7b5c;
    if (ecx)
        goto loc_1c7b5c;
loc_1c7ac5: // 0160:1c7ac5
    ax = memoryAGet16(ds, esi);
    if (!ax)
        goto loc_1c7add;
    if (al)
        goto loc_1c7ad3;
    al = memoryAGet(ds, edi);
loc_1c7ad3: // 0160:1c7ad3
    if (ah)
        goto loc_1c7ada;
    ah = memoryAGet(ds, edi + 1);
loc_1c7ada: // 0160:1c7ada
    memoryASet16(ds, edi, ax);
loc_1c7add: // 0160:1c7add
    ax = memoryAGet16(ds, esi + 2);
    if (!ax)
        goto loc_1c7af8;
    if (al)
        goto loc_1c7aed;
    al = memoryAGet(ds, edi + 2);
loc_1c7aed: // 0160:1c7aed
    if (ah)
        goto loc_1c7af4;
    ah = memoryAGet(ds, edi + 3);
loc_1c7af4: // 0160:1c7af4
    memoryASet16(ds, edi + 2, ax);
loc_1c7af8: // 0160:1c7af8
    ax = memoryAGet16(ds, esi + 4);
    if (!ax)
        goto loc_1c7b13;
    if (al)
        goto loc_1c7b08;
    al = memoryAGet(ds, edi + 4);
loc_1c7b08: // 0160:1c7b08
    if (ah)
        goto loc_1c7b0f;
    ah = memoryAGet(ds, edi + 5);
loc_1c7b0f: // 0160:1c7b0f
    memoryASet16(ds, edi + 4, ax);
loc_1c7b13: // 0160:1c7b13
    ax = memoryAGet16(ds, esi + 6);
    if (!ax)
        goto loc_1c7b2e;
    if (al)
        goto loc_1c7b23;
    al = memoryAGet(ds, edi + 6);
loc_1c7b23: // 0160:1c7b23
    if (ah)
        goto loc_1c7b2a;
    ah = memoryAGet(ds, edi + 7);
loc_1c7b2a: // 0160:1c7b2a
    memoryASet16(ds, edi + 6, ax);
loc_1c7b2e: // 0160:1c7b2e
    ax = memoryAGet16(ds, esi + 8);
    if (!ax)
        goto loc_1c7b49;
    if (al)
        goto loc_1c7b3e;
    al = memoryAGet(ds, edi + 8);
loc_1c7b3e: // 0160:1c7b3e
    if (ah)
        goto loc_1c7b45;
    ah = memoryAGet(ds, edi + 9);
loc_1c7b45: // 0160:1c7b45
    memoryASet16(ds, edi + 8, ax);
loc_1c7b49: // 0160:1c7b49
    esi += 0x00000140;
    edi += 0x00000140;
    ebx--;
    if (ebx)
        goto loc_1c7ac5;
loc_1c7b5c: // 0160:1c7b5c
    stop("disassembly failed at 160:1c7b5c popal ");
    esp += 4;
}
void sub_1c7b60() // 0160:1c7b60 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    if (eax == edx)
        goto loc_1c7bd4;
loc_1c7b68: // 0160:1c7b68
    eax = memoryAGet32(ds, ebx);
    ecx = memoryAGet32(ds, edx);
    if (ecx != eax)
        goto loc_1c7bd9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1c7bd4;
    eax = memoryAGet32(ds, ebx + 4);
    ecx = memoryAGet32(ds, edx + 4);
    if (ecx != eax)
        goto loc_1c7bd9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1c7bd4;
    eax = memoryAGet32(ds, ebx + 8);
    ecx = memoryAGet32(ds, edx + 8);
    if (ecx != eax)
        goto loc_1c7bd9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1c7bd4;
    eax = memoryAGet32(ds, ebx + 12);
    ecx = memoryAGet32(ds, edx + 12);
    if (ecx != eax)
        goto loc_1c7bd9;
    ebx += 0x00000010;
    edx += 0x00000010;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (!eax)
        goto loc_1c7b68;
loc_1c7bd4: // 0160:1c7bd4
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7bd9: // 0160:1c7bd9
    flags.carry = al < cl;
    if (al != cl)
        goto loc_1c7bfa;
    if (al == 0x00)
        goto loc_1c7bd4;
    flags.carry = ah < ch;
    if (ah != ch)
        goto loc_1c7bfa;
    if (ah == 0x00)
        goto loc_1c7bd4;
    eax >>= 16;
    ecx >>= 16;
    flags.carry = al < cl;
    if (al != cl)
        goto loc_1c7bfa;
    if (al == 0x00)
        goto loc_1c7bd4;
    flags.carry = ah < ch;
loc_1c7bfa: // 0160:1c7bfa
    eax = -flags.carry;
    al |= 0x01;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7c02() // 0160:1c7c02 +long
{
    esp -= 4;
    push32(eax);
    memoryASet16(ds, esp, fnstcw());
    push32(memoryAGet32(ds, esp));
    memoryASet(ds, esp + 1, 0x1f);
    fldcw(memoryAGet16(ds, esp));
    frndtint();
    fldcw(memoryAGet16(ds, esp + 4));
    esp = esp + 8;
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c7c1f() // 0160:1c7c1f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x00000024;
    edx = eax;
    eax = esp;
    sub_1c8d0b();
    if ((int32_t)eax < (int32_t)0x000001f4)
        goto loc_1c7c37;
    memoryASet32(ds, esp, memoryAGet32(ds, esp) + 1);
loc_1c7c37: // 0160:1c7c37
    eax = esp;
    sub_1c8dce();
    ebx = eax;
    if (!edx)
        goto loc_1c7c46;
    memoryASet32(ds, edx, eax);
loc_1c7c46: // 0160:1c7c46
    esp += 0x00000024;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7c4c()
{
  sub_1c7cc4();
}

void sub_1c7cc4() // 0160:1c7cc4 +long
{
    esp -= 4;
    flags.interrupts = 1;
    esp &= 0xfffffffc;
    ebx = esp;
    memoryASet32(ds, 0x1dfd30, ebx);
    memoryASet32(ds, 0x1dfd1c, ebx);
    ax = 0x0024;
    memoryASet16(ds, 0x1dfd28, ax);
    ebx = 0x50484152;
    eax = 0;
    ah = 0x30;
    interrupt(0x21);
    memoryASet(ds, 0x1dfd53, al);
    memoryASet(ds, 0x1dfd54, ah);
    ecx = eax;
    esi = 0;
    edi = 0x00000081;
    eax >>= 16;
    if (ax != 0x4458)
        goto loc_1c7d46;
    bl -= 0x30;
    al = bl;
    ah = 0x00;
    push32(eax);
    es = memoryAGet16(ds, 0x1dfd28);
    ebx = memoryAGet32(es, 0x005c);
    ebx += 0x00000fff;
    ebx &= 0xfffff000;
    memoryASet32(ds, 0x1dfd1c, ebx);
    ebx >>= 12;
    ax = ds;
    es = eax;
    ah = 0x4a;
    interrupt(0x21);
    eax = pop32();
    bx = ds;
    cx = 0x002c;
    goto loc_1c7d7e;
loc_1c7d46: // 0160:1c7d46
    if (ax != 0x4243)
        goto loc_1c7d80;
    memoryASet32(ds, 0x1dfcf4, edx);
    esi = edx;
    edx = memoryAGet32(ds, esi + 28);
    ebx = esp;
    ebx -= edx;
    ah = 0x4a;
    interrupt(0x21);
    bx = ds;
    memoryASet16(ds, 0x1dfd28, ds);
    eax = memoryAGet32(ds, esi + 16);
    edi += eax;
    esi = 0;
    si = memoryAGet16(ds, eax + 44);
    esi <<= 4;
    cx = ds;
    al = 0x09;
    ah = 0x00;
loc_1c7d7e: // 0160:1c7d7e
    goto loc_1c7dd9;
loc_1c7d80: // 0160:1c7d80
    dx = 0x0078;
    ax = 0xff00;
    interrupt(0x21);
    if (al == 0x00)
        goto loc_1c7dc2;
    ax = gs;
    if (ax == 0x0000)
        goto loc_1c7d9d;
    memoryASet16(ds, 0x1dfcf8, ax);
loc_1c7d9d: // 0160:1c7d9d
    ax = 0x0006;
    bx = ds;
    interrupt(0x31);
    al = 0x01;
    ah = 0x00;
    dx |= cx;
    if (!dx)
        goto loc_1c7db1;
    ah = 0x01;
loc_1c7db1: // 0160:1c7db1
    memoryASet16(ds, 0x1dfd28, es);
    cx = memoryAGet16(es, 0x002c);
    goto loc_1c7dd9;
loc_1c7dc2: // 0160:1c7dc2
    dx = ds;
    cx = 0x0024;
    ds = ecx;
    cx = 0x002c;
    ds = edx;
    bx = 0x0017;
    al = 0x00;
    ah = 0x00;
loc_1c7dd9: // 0160:1c7dd9
    assert(al==1&&ah==0);
    memoryASet(ds, 0x1dfd4a, al);
    memoryASet(ds, 0x1dfd4b, ah);
    es = ebx;
    memoryASet16(es, 0x1c7f21, ds);
    memoryASet32(ds, 0x1dfd4d, esi);
    memoryASet16(ds, 0x1dfd51, cx);
    push32(esi);
    es = memoryAGet16(ds, 0x1dfd28);
    edx = 0x003f3f74;
    edx += 0x0000000f;
    dl &= 0xf0;
    ecx = 0;
    cl = memoryAGet(es, edi + -1);
    flags.direction = 0;
    al = 0x20;
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) scasb_inv<ES_EDI>(al);
    esi = edi + -1;
    edi = edx;
    bx = es;
    dx = ds;
    ds = ebx;
    es = edx;
    if (flags.zero)
        goto loc_1c7e2e;
    ecx++;
    for (; cx != 0; --cx) movsb<ES_EDI, DS_ESI>();
loc_1c7e2e: // 0160:1c7e2e
    al = 0;
    stosb<ES_EDI>(al);
    stosb<ES_EDI>(al);
    esi = pop32();
    edi--;
    push32(edi);
    push32(edx);
    ds = memoryAGet16(es, 0x1dfd51);
    ebp = 0;
loc_1c7e40: // 0160:1c7e40
    eax = memoryAGet32(ds, esi);
    eax |= 0x20202020;
    if (eax != 0x37386f6e)
        goto loc_1c7e55;
    if (memoryAGet(ds, esi + 4) != 0x3d)
        goto loc_1c7e55;
    ebp++;
loc_1c7e55: // 0160:1c7e55
    al = lodsb<DS_ESI>();
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1c7e55;
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1c7e40;
    al = lodsb<DS_ESI>();
    esi++;
    esi++;
loc_1c7e63: // 0160:1c7e63
    movsb<ES_EDI, DS_ESI>();
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1c7e63;
    ds = pop();
    esi = pop32();
    ebx = esp;
    memoryASet16(ds, 0x1dfd48, bp);
    memoryASet32(ds, 0x1dfd2c, edi);
    memoryASet32(ds, 0x1dfd18, ebx);
    ecx = 0x003f3f74;
    edi = 0x001e01c0;
    ecx -= edi;
    if (memoryAGet(ds, 0x1dfd4a) != 0x01)
        goto loc_1c7ea4;
    if (ecx <= 0x00001000)
        goto loc_1c7ea4;
    ecx = 0x00001000;
loc_1c7ea4: // 0160:1c7ea4
    dl = cl;
    ecx >>= 2;
    eax = 0;
    for (; cx != 0; --cx) stosd<ES_EDI>(eax);
    cl = dl;
    cl &= 0x03;
    for (; cx != 0; --cx) stosb<ES_EDI>(al);
    eax = 0x003f3f74;
    eax += 0x0000000f;
    al &= 0xf0;
    memoryASet32(ds, 0x1dfd20, eax);
    memoryASet32(ds, 0x1dfd24, esi);
    eax = 0x000000ff;
    sub_1c8f72();
    ebp = 0;
    sub_1c8f22();
    goto loc_1c7f00;
    // gap 35 bytes
loc_1c7f00: // 0160:1c7f00
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1c8fbd();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_1c7edd() // 0160:1c7edd +long error message
{
    esp -= 4;
    push32(edx);
    push32(eax);
    edx = 0x001c7cc0;
    ax = 0x3d01;
    interrupt(0x21);
    bx = ax;
    edx = pop32();
    esi = edx;
    flags.direction = 0;
loc_1c7ef1: // 0160:1c7ef1
    al = lodsb<DS_ESI>();
    if (al != 0x00)
        goto loc_1c7ef1;
    ecx = esi;
    ecx -= edx;
    ecx--;
    ah = 0x40;
    interrupt(0x21);
    eax = pop32();
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1c8fbd();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_1c7f24()
{
  sub_1c9028();
}

void sub_1c7f2e() // 0160:1c7f2e +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x00000004;
    ebx = esp + 20;
    eax = 0x001dfdc2;
    edx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp, ebx);
    ebx = esp;
    sub_1c9318();
    esp += 0x00000004;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7f51() // 0160:1c7f51 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    indirectCall(cs, memoryAGet32(ds, 0x1dfd00)); // 0160:1c7f54;
    indirectCall(cs, memoryAGet32(ds, 0x1dfd04)); // 0160:1c7f5a;
    eax = edx;
    sub_1c7f69();
    edx = pop32();
    esp += 4;
}
void sub_1c7f69() // 0160:1c7f69 +long
{
    esp -= 4;
    goto loc_1c7f69;
loc_1c7edb: // 0160:1c7edb
    goto loc_1c7f00;
    // gap 35 bytes
loc_1c7f00: // 0160:1c7f00
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1c8fbd();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
    // gap 84 bytes
loc_1c7f69: // 0160:1c7f69
    push32(edx);
    edx = eax;
    indirectCall(cs, memoryAGet32(ds, 0x1dfd04)); // 0160:1c7f6c;
    indirectCall(cs, memoryAGet32(ds, 0x1dfd08)); // 0160:1c7f72;
    eax = edx;
    goto loc_1c7edb;
}
void sub_1c7f7f() // 0160:1c7f7f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    edx = eax;
    al = cl;
    out8(dx, al);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7fa7() // 0160:1c7fa7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ah = memoryAGet(ds, 0x1dfd4a);
    if (ah < 0x02)
        goto loc_1c7fc4;
    if (ah > 0x08)
        goto loc_1c7fc4;
    eax = 0x00002502;
    cl = bl;
    goto loc_1c7fd0;
loc_1c7fc4: // 0160:1c7fc4
    eax = ebx;
    eax &= 0x000000ff;
    cl = 0;
    ah |= 0x35;
loc_1c7fd0: // 0160:1c7fd0
    push(es);
    interrupt(0x21);
    edx = es;
    es = pop();
    eax = ebx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7fdb() // 0160:1c7fdb +long
{
    esp -= 4;
    push32(edx);
    edx = ebx;
    bl = memoryAGet(ds, 0x1dfd4a);
    if (bl < 0x02)
        goto loc_1c7ffc;
    if (bl > 0x08)
        goto loc_1c7ffc;
    push(ds);
    ds = ecx;
    cl = al;
    al = 0x04;
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    edx = pop32();
    esp += 4;
    return;
loc_1c7ffc: // 0160:1c7ffc
    push(ds);
    ds = ecx;
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    edx = pop32();
    esp += 4;
}
void sub_1c8010() // 0160:1c8010 +long
{
    esp -= 4;
    if (!ecx)
        goto loc_1c8040;
loc_1c8016: // 0160:1c8016
    if (!(al & 0x03))
        goto loc_1c8023;
    memoryASet(ds, eax, dl);
    eax++;
    edx = ror32(edx, 0x08);
    ecx--;
    if (ecx)
        goto loc_1c8016;
loc_1c8023: // 0160:1c8023
    push32(ecx);
    ecx >>= 2;
    sub_1c8047();
    ecx = pop32();
    ecx &= 0x00000003;
    if (!ecx)
        goto loc_1c8040;
    memoryASet(ds, eax, dl);
    ecx--;
    if (!ecx)
        goto loc_1c8040;
    memoryASet(ds, eax + 1, dh);
    ecx--;
    if (!ecx)
        goto loc_1c8040;
    memoryASet(ds, eax + 2, dl);
loc_1c8040: // 0160:1c8040
    esp += 4;
    return;
}
void sub_1c8047() // 0160:1c8047 +long
{
    esp -= 4;
    if (!ecx)
        goto loc_1c80b2;
loc_1c804b: // 0160:1c804b
    if (!(al & 0x1f))
        goto loc_1c8057;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (ecx)
        goto loc_1c804b;
loc_1c8057: // 0160:1c8057
    push32(ecx);
    ecx >>= 2;
    if (!ecx)
        goto loc_1c8097;
    ecx--;
    if (!ecx)
        goto loc_1c8089;
loc_1c8060: // 0160:1c8060
    memoryASet32(ds, eax, edx);
    memoryASet32(ds, eax + 4, edx);
    ecx--;
    memoryASet32(ds, eax + 8, edx);
    memoryASet32(ds, eax + 12, edx);
    if (!ecx)
        goto loc_1c8086;
    memoryASet32(ds, eax + 16, edx);
    memoryASet32(ds, eax + 20, edx);
    ecx--;
    memoryASet32(ds, eax + 24, edx);
    memoryASet32(ds, eax + 28, edx);
    eax = eax + 32;
    if (ecx)
        goto loc_1c8060;
    eax = eax + -16;
loc_1c8086: // 0160:1c8086
    eax = eax + 16;
loc_1c8089: // 0160:1c8089
    memoryASet32(ds, eax, edx);
    memoryASet32(ds, eax + 4, edx);
    memoryASet32(ds, eax + 8, edx);
    memoryASet32(ds, eax + 12, edx);
    eax = eax + 16;
loc_1c8097: // 0160:1c8097
    ecx = pop32();
    ecx &= 0x00000003;
    if (!ecx)
        goto loc_1c80b2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (!ecx)
        goto loc_1c80b2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (!ecx)
        goto loc_1c80b2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
loc_1c80b2: // 0160:1c80b2
    esp += 4;
    return;
}
void sub_1c80b3() // 0160:1c80b3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    edx = eax;
    eax = 0;
    al = memoryAGet(ds, edx);
    ebx = 0;
    sub_1c939d();
    memoryASet(ds, esp, al);
    if (al == 0x72)
        goto loc_1c80e6;
    if (al == 0x77)
        goto loc_1c80e6;
    if (al == 0x61)
        goto loc_1c80e6;
    eax = 0x00000009;
    sub_1c93b0();
    eax = 0;
    goto loc_1c8160;
loc_1c80e6: // 0160:1c80e6
    eax = ebx;
    cl = memoryAGet(ds, edx + 1);
    al |= 0x03;
    if (cl != 0x2b)
        goto loc_1c8113;
    ebx = eax;
    cl = memoryAGet(ds, edx + 2);
    al |= 0x40;
    if (cl == 0x62)
        goto loc_1c810f;
    if (cl == 0x74)
        goto loc_1c8146;
    flags.zero = memoryAGet32(ds, 0x1dffb1) == 0x00000200;
loc_1c810d: // 0160:1c810d
    if (!flags.zero)
        goto loc_1c8146;
loc_1c810f: // 0160:1c810f
    ebx = eax;
    goto loc_1c8146;
loc_1c8113: // 0160:1c8113
    ecx = ebx;
    cl |= 0x40;
    if (memoryAGet(ds, edx + 1) != 0x62)
        goto loc_1c812c;
    al = memoryAGet(ds, edx + 2);
    ebx = ecx;
    if (al != 0x2b)
        goto loc_1c8146;
    cl |= 0x03;
    goto loc_1c8144;
loc_1c812c: // 0160:1c812c
    if (memoryAGet(ds, edx + 1) != 0x74)
        goto loc_1c8138;
    flags.zero = memoryAGet(ds, edx + 2) == 0x2b;
    goto loc_1c810d;
loc_1c8138: // 0160:1c8138
    if (memoryAGet32(ds, 0x1dffb1) != 0x00000200)
        goto loc_1c8146;
loc_1c8144: // 0160:1c8144
    ebx = ecx;
loc_1c8146: // 0160:1c8146
    al = memoryAGet(ds, esp);
    if (al != 0x77)
        goto loc_1c8152;
    bl |= 0x02;
    goto loc_1c815e;
loc_1c8152: // 0160:1c8152
    if (al != 0x61)
        goto loc_1c815b;
    bl |= 0x82;
    goto loc_1c815e;
loc_1c815b: // 0160:1c815b
    bl |= 0x01;
loc_1c815e: // 0160:1c815e
    eax = ebx;
loc_1c8160: // 0160:1c8160
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8167() // 0160:1c8167 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = eax;
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) & 0xfc);
    eax = edx;
    sub_1c80b3();
    edi = memoryAGet32(ds, ecx + 12);
    edi |= eax;
    eax = 0;
    memoryASet32(ds, ecx + 12, edi);
    al = memoryAGet(ds, edx);
    sub_1c939d();
    dl = al;
    if (al != 0x72)
        goto loc_1c81ae;
    dh = memoryAGet(ds, ecx + 12);
    eax = 0;
    if (!(dh & 0x02))
        goto loc_1c819c;
    eax = 0x00000002;
loc_1c819c: // 0160:1c819c
    if (!(memoryAGet(ds, ecx + 12) & 0x40))
        goto loc_1c81a7;
    ah |= 0x02;
    goto loc_1c81aa;
loc_1c81a7: // 0160:1c81a7
    ah |= 0x01;
loc_1c81aa: // 0160:1c81aa
    push32(0x00000000);
    goto loc_1c81db;
loc_1c81ae: // 0160:1c81ae
    stop("setne");
    eax &= 0x000000ff;
    eax += 0x00000021;
    if (dl != 0x61)
        goto loc_1c81c6;
    al |= 0x10;
    goto loc_1c81c8;
loc_1c81c6: // 0160:1c81c6
    al |= 0x40;
loc_1c81c8: // 0160:1c81c8
    if (!(memoryAGet(ds, ecx + 12) & 0x40))
        goto loc_1c81d3;
    ah |= 0x02;
    goto loc_1c81d6;
loc_1c81d3: // 0160:1c81d3
    ah |= 0x01;
loc_1c81d6: // 0160:1c81d6
    push32(0x00000180);
loc_1c81db: // 0160:1c81db
    push32(ebx);
    push32(eax);
    push32(esi);
    sub_1c940a();
    esp += 0x00000010;
    memoryASet32(ds, ecx + 16, eax);
    if (memoryAGet32(ds, ecx + 16) != 0xffffffff)
        goto loc_1c81fb;
    eax = ecx;
    sub_1c96dc();
    eax = 0;
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1c81fb: // 0160:1c81fb
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx + 8, 0x00000000);
    memoryASet32(ds, ecx + 20, 0x00000000);
    if (dl != 0x61)
        goto loc_1c8223;
    ebx = 0x00000002;
    eax = ecx;
    edx = 0;
    sub_1c8322();
loc_1c8223: // 0160:1c8223
    eax = ecx;
    sub_1c9733();
    eax = ecx;
    edi = pop32();
    esi = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c822f() // 0160:1c822f +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = eax;
    eax = 0;
    sub_1c9634();
    ecx = eax;
    if (!eax)
        goto loc_1c8247;
    eax = esi;
    sub_1c8167();
loc_1c8247: // 0160:1c8247
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1c824a() // 0160:1c824a +long
{
    esp -= 4;
    push32(ebx);
    ebx = 0;
    sub_1c822f();
    ebx = pop32();
    esp += 4;
}
void sub_1c82e0() // 0160:1c82e0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) & 0xef);
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, edx + 4))
        goto loc_1c830c;
    ebx = memoryAGet32(ds, edx + 8);
    ecx = memoryAGet32(ds, edx);
    ebx -= ecx;
    if ((int32_t)eax < (int32_t)ebx)
        goto loc_1c830c;
    edi = memoryAGet32(ds, edx + 4);
    esi = ecx + eax;
    edi -= eax;
    memoryASet32(ds, edx, esi);
    eax = 0;
    memoryASet32(ds, edx + 4, edi);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c830c: // 0160:1c830c
    eax = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx, eax);
    eax = 0x00000001;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8322() // 0160:1c8322 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    if (!(memoryAGet(ds, eax + 12) & 0x06))
        goto loc_1c838a;
    if (!(memoryAGet(ds, ecx + 13) & 0x10))
        goto loc_1c835b;
    eax = ecx;
    sub_1c9764();
    if (!eax)
        goto loc_1c836f;
    if (ebx)
        goto loc_1c8352;
    if (stop("postCondition"))
        goto loc_1c8352;
loc_1c8348: // 0160:1c8348
    eax = 0x00000009;
    sub_1c93b0();
loc_1c8352: // 0160:1c8352
    eax = 0xffffffff;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1c835b: // 0160:1c835b
    if (ebx != 0x00000001)
        goto loc_1c8363;
    esi -= memoryAGet32(ds, ecx + 4);
loc_1c8363: // 0160:1c8363
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
loc_1c836f: // 0160:1c836f
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) & 0xeb);
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1c9823();
    if (eax != 0xffffffff)
        goto loc_1c8418;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1c838a: // 0160:1c838a
    if (ebx < 0x00000001)
        goto loc_1c8398;
    if (ebx <= 0x00000001)
        goto loc_1c839e;
    if (ebx == 0x00000002)
        goto loc_1c83f4;
    goto loc_1c8348;
loc_1c8398: // 0160:1c8398
    if (!ebx)
        goto loc_1c83c3;
    goto loc_1c8348;
loc_1c839e: // 0160:1c839e
    eax = edx;
    edx = ecx;
    edi = memoryAGet32(ds, ecx + 4);
    sub_1c82e0();
    if (!eax)
        goto loc_1c8418;
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    edx -= edi;
    sub_1c9823();
    if (eax != 0xffffffff)
        goto loc_1c8418;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1c83c3: // 0160:1c83c3
    eax = memoryAGet32(ds, ecx + 16);
    sub_1c9864();
    edx = memoryAGet32(ds, ecx + 4);
    edi = esi;
    eax -= edx;
    edi -= eax;
    edx = ecx;
    eax = edi;
    sub_1c82e0();
    if (!eax)
        goto loc_1c8418;
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1c9823();
    if (eax != 0xffffffff)
        goto loc_1c8418;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1c83f4: // 0160:1c83f4
    eax = memoryAGet32(ds, ecx + 8);
    dl = memoryAGet(ds, ecx + 12);
    memoryASet32(ds, ecx, eax);
    dl &= 0xef;
    eax = memoryAGet32(ds, ecx + 16);
    memoryASet(ds, ecx + 12, dl);
    edx = esi;
    memoryASet32(ds, ecx + 4, 0x00000000);
    sub_1c9823();
    if (eax == 0xffffffff)
        goto loc_1c841a;
loc_1c8418: // 0160:1c8418
    eax = 0;
loc_1c841a: // 0160:1c841a
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1c841e() // 0160:1c841e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, eax + 16);
    sub_1c9864();
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_1c844a;
    ecx = memoryAGet32(ds, edx + 4);
    if (!ecx)
        goto loc_1c844a;
    if (!(memoryAGet(ds, edx + 13) & 0x10))
        goto loc_1c8446;
    eax = ecx + ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c8446: // 0160:1c8446
    eax = ebx;
    eax -= ecx;
loc_1c844a: // 0160:1c844a
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c844e() // 0160:1c844e +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x3f3eb0);
loc_1c8457: // 0160:1c8457
    if (eax)
        goto loc_1c8463;
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c8463: // 0160:1c8463
    ebx = memoryAGet32(ds, eax + 4);
    if (edx == ebx)
        goto loc_1c846e;
    eax = memoryAGet32(ds, eax);
    goto loc_1c8457;
loc_1c846e: // 0160:1c846e
    edx = 0x00000001;
    eax = ebx;
    sub_1c847d();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c847d() // 0160:1c847d +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    sub_1c8507();
    edx = eax;
    eax = ebx;
    sub_1c96dc();
    eax = edx;
    ebx = pop32();
    esp += 4;
}
void sub_1c8492() // 0160:1c8492 +long
{
    esp -= 4;
    eax += 0x00000030;
    if ((int32_t)eax <= (int32_t)0x00000039)
        goto loc_1c849d;
    eax += 0x00000027;
loc_1c849d: // 0160:1c849d
    esp += 4;
    return;
}
void sub_1c849e() // 0160:1c849e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    edi = edx;
    sub_1c9875();
    edx = 0x00000004;
    ebx = eax;
    esi = ecx;
    memoryASet(ds, ecx, 0x74);
    edx += ecx;
loc_1c84b9: // 0160:1c84b9
    eax = ebx;
    eax &= 0x0000000f;
    sub_1c8492();
    memoryASet(ds, edx, al);
    edx--;
    ebx >>= 4;
    if (edx != esi)
        goto loc_1c84b9;
    eax = edi;
    eax = sar32(eax, 0x04);
    eax &= 0x0000000f;
    memoryASet(ds, ecx + 5, 0x5f);
    sub_1c8492();
    memoryASet(ds, ecx + 6, al);
    eax = edi;
    eax &= 0x0000000f;
    sub_1c8492();
    memoryASet(ds, ecx + 8, 0x2e);
    memoryASet(ds, ecx + 9, 0x74);
    memoryASet(ds, ecx + 10, 0x6d);
    memoryASet(ds, ecx + 11, 0x70);
    memoryASet(ds, ecx + 12, 0x00);
    memoryASet(ds, ecx + 7, al);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8507() // 0160:1c8507 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000010;
    ecx = eax;
    edi = edx;
    if (memoryAGet32(ds, eax + 12) != 0x00000000)
        goto loc_1c851f;
    esi = 0xffffffff;
    goto loc_1c8586;
loc_1c851f: // 0160:1c851f
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_1c8532;
    eax = ecx;
    sub_1c9764();
    esi = eax;
loc_1c8532: // 0160:1c8532
    eax = ecx;
    sub_1c841e();
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1c854a;
    eax = memoryAGet32(ds, ecx + 16);
    ebx = 0;
    sub_1c9823();
loc_1c854a: // 0160:1c854a
    if (!edi)
        goto loc_1c8558;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1c987b();
    esi |= eax;
loc_1c8558: // 0160:1c8558
    if (!(memoryAGet(ds, ecx + 12) & 0x08))
        goto loc_1c856d;
    eax = memoryAGet32(ds, ecx + 8);
    sub_1c8c94();
    memoryASet32(ds, ecx + 8, 0x00000000);
loc_1c856d: // 0160:1c856d
    if (!(memoryAGet(ds, ecx + 13) & 0x08))
        goto loc_1c8586;
    edx = 0;
    eax = esp;
    dl = memoryAGet(ds, ecx + 25);
    sub_1c849e();
    eax = esp;
    sub_1c98ad();
loc_1c8586: // 0160:1c8586
    eax = esi;
    esp += 0x00000010;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8590() // 0160:1c8590 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    push32(eax);
    push32(edx);
    ebp = ecx;
    if (memoryAGet(ds, ecx + 12) & 0x01)
        goto loc_1c85ba;
    eax = 0x00000004;
    sub_1c93b0();
    dh = memoryAGet(ds, ecx + 12);
    dh |= 0x20;
    eax = 0;
    memoryASet(ds, ecx + 12, dh);
    goto loc_1c8753;
loc_1c85ba: // 0160:1c85ba
    ebx = (int32_t)ebx * (int32_t)edx;
//    stop("imul ebx * edx");
    if (ebx)
        goto loc_1c85c8;
    eax = ebx;
    goto loc_1c8753;
loc_1c85c8: // 0160:1c85c8
    if (memoryAGet32(ds, ecx + 8) != 0x00000000)
        goto loc_1c85d5;
    eax = ebp;
    sub_1c98b2();
loc_1c85d5: // 0160:1c85d5
    esi = 0;
    dl = memoryAGet(ss, ebp + 12);
    memoryASet32(ds, esp + 12, esi);
    if (!(dl & 0x40))
        goto loc_1c86d4;
    memoryASet32(ds, esp + 8, ebx);
loc_1c85eb: // 0160:1c85eb
    edx = memoryAGet32(ss, ebp + 4);
    if (!edx)
        goto loc_1c8646;
    ebx = memoryAGet32(ds, esp + 8);
    if (edx <= ebx)
        goto loc_1c85fc;
    edx = ebx;
loc_1c85fc: // 0160:1c85fc
    edi = memoryAGet32(ds, esp + 4);
    ecx = edx;
    esi = memoryAGet32(ss, ebp);
    ebx = memoryAGet32(ds, esp + 12);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) movsd<ES_EDI, DS_ESI>(); // TODO!!!!
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ss, ebp);
    esi = edi + edx;
    ebx += edx;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 12, ebx);
    edi = memoryAGet32(ss, ebp + 4);
    ecx += edx;
    eax -= edx;
    edi -= edx;
    memoryASet32(ss, ebp, ecx);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ss, ebp + 4, edi);
loc_1c8646: // 0160:1c8646
    ecx = memoryAGet32(ds, esp + 8);
    if (!ecx)
        goto loc_1c8748;
    if (ecx >= memoryAGet32(ss, ebp + 20))
        goto loc_1c865d;
    if (!(memoryAGet(ss, ebp + 13) & 0x04))
        goto loc_1c86c0;
loc_1c865d: // 0160:1c865d
    cl = memoryAGet(ss, ebp + 13);
    ebx = memoryAGet32(ds, esp + 8);
    if (cl & 0x04)
        goto loc_1c8676;
    if (ebx <= 0x00000200)
        goto loc_1c8676;
    bh &= 0xfe;
    bl = 0;
loc_1c8676: // 0160:1c8676
    edx = memoryAGet32(ds, esp + 4);
    eax = memoryAGet32(ss, ebp + 16);
    sub_1c9929();
    if (eax != 0xffffffff)
        goto loc_1c8690;
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x20);
    goto loc_1c8748;
loc_1c8690: // 0160:1c8690
    if (eax)
        goto loc_1c869d;
loc_1c8694: // 0160:1c8694
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x10);
    goto loc_1c8748;
loc_1c869d: // 0160:1c869d
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 12);
    edx += eax;
    ebx -= eax;
    ecx += eax;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 12, ecx);
    goto loc_1c85eb;
loc_1c86c0: // 0160:1c86c0
    eax = ebp;
    sub_1c9a00();
    if (!eax)
        goto loc_1c8748;
    goto loc_1c85eb;
loc_1c86d4: // 0160:1c86d4
    edx = memoryAGet32(ds, esp + 4);
    ebx += edx;
loc_1c86da: // 0160:1c86da
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_1c86eb;
    eax = ebp;
    sub_1c9a00();
    if (!eax)
        goto loc_1c8748;
loc_1c86eb: // 0160:1c86eb
    ecx = memoryAGet32(ss, ebp + 4);
    eax = memoryAGet32(ss, ebp);
    ecx--;
    esi = eax + 1;
    memoryASet32(ss, ebp + 4, ecx);
    memoryASet32(ss, ebp, esi);
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
    if (eax != 0x0000000d)
        goto loc_1c872f;
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_1c8718;
    eax = ebp;
    sub_1c9a00();
    if (!eax)
        goto loc_1c8748;
loc_1c8718: // 0160:1c8718
    edi = memoryAGet32(ss, ebp + 4);
    eax = memoryAGet32(ss, ebp);
    edi--;
    esi = eax + 1;
    memoryASet32(ss, ebp + 4, edi);
    memoryASet32(ss, ebp, esi);
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
loc_1c872f: // 0160:1c872f
    if (eax == 0x0000001a)
        goto loc_1c8694;
    memoryASet(ds, edx, al);
    eax = memoryAGet32(ds, esp + 12);
    eax++;
    edx++;
    memoryASet32(ds, esp + 12, eax);
    if (edx != ebx)
        goto loc_1c86da;
loc_1c8748: // 0160:1c8748
    eax = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, esp);
    edx = 0;
    div32(esi);
loc_1c8753: // 0160:1c8753
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c875a() // 0160:1c875a +long
{
    esp -= 4;
    push32(ebx);
loc_1c875b: // 0160:1c875b
    bl = memoryAGet(ds, eax);
    bh = memoryAGet(ds, edx);
    if (bl < 0x41)
        goto loc_1c876c;
    if (bl > 0x5a)
        goto loc_1c876c;
    bl += 0x20;
loc_1c876c: // 0160:1c876c
    if (bh < 0x41)
        goto loc_1c8779;
    if (bh > 0x5a)
        goto loc_1c8779;
    bh += 0x20;
loc_1c8779: // 0160:1c8779
    if (bl != bh)
        goto loc_1c8785;
    if (!bh)
        goto loc_1c8785;
    eax++;
    edx++;
    goto loc_1c875b;
loc_1c8785: // 0160:1c8785
    edx = 0;
    eax = 0;
    dl = bl;
    al = bh;
    edx -= eax;
    eax = edx;
    ebx = pop32();
    esp += 4;
}
void sub_1c897a() // 0160:1c897a +long
{
    esp -= 4;
    push32(ecx);
    esp -= 0x0000000c;
    ecx = eax;
    eax = esp;
    sub_1c9d20();
    eax = ecx;
    ecx = esp;
    sub_1c8cf2();
    esp += 0x0000000c;
    ecx = pop32();
    esp += 4;
}
void sub_1c8995() // 0160:1c8995 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax = 0;
    al = in8(dx);
    edx = pop32();
    esp += 4;
}
void sub_1c899d() // 0160:1c899d +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = eax;
    eax = ebx;
    out16(dx, ax);
    ebx = pop32();
    esp += 4;
}
void sub_1c89b1() // 0160:1c89b1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    esi = memoryAGet32(ds, 0x1dffbc);
    if (!esi)
        goto loc_1c8a02;
    if (!eax)
        goto loc_1c8a02;
    edi = eax;
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    edi = ecx;
    goto loc_1c89fc;
loc_1c89dd: // 0160:1c89dd
    eax = ecx;
    edx = ebp;
    ebx = edi;
    sub_1c9d48();
    if (eax)
        goto loc_1c89f9;
    if (memoryAGet(ds, ecx + edi) != 0x3d)
        goto loc_1c89f9;
    eax = edi + 1;
    eax += ecx;
    goto loc_1c8a04;
loc_1c89f9: // 0160:1c89f9
    esi += 0x00000004;
loc_1c89fc: // 0160:1c89fc
    ecx = memoryAGet32(ds, esi);
    if (ecx)
        goto loc_1c89dd;
loc_1c8a02: // 0160:1c8a02
    eax = 0;
loc_1c8a04: // 0160:1c8a04
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8a0b() // 0160:1c8a0b +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
loc_1c8a0f: // 0160:1c8a0f
    dl = memoryAGet(ds, eax);
    if (!dl)
        goto loc_1c8a25;
    dl -= 0x61;
    if (dl > 0x19)
        goto loc_1c8a22;
    dl += 0x41;
    memoryASet(ds, eax, dl);
loc_1c8a22: // 0160:1c8a22
    eax++;
    goto loc_1c8a0f;
loc_1c8a25: // 0160:1c8a25
    eax = ebx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8a2a()
{
  sub_1c9dd1();
}

void sub_1c8bb1() // 0160:1c8bb1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    push(gs);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    if (!eax)
        goto loc_1c8bca;
    if (eax <= 0xffd4) // TODO CICO 0xffffffd4 -> 0xffd4
        goto loc_1c8bd1;
loc_1c8bca: // 0160:1c8bca
    eax = 0;
    goto loc_1c8c85;
loc_1c8bd1: // 0160:1c8bd1
    ebp = 0x001dfd0c;
    edi = esi + 3;
    ah = 0;
    ebx = 0;
    memoryASet(ds, esp, ah);
    di &= 0xfffc;
loc_1c8be4: // 0160:1c8be4
    eax = edi;
    if (edi >= 0x0000000c)
        goto loc_1c8bf0;
    eax = 0x0000000c;
loc_1c8bf0: // 0160:1c8bf0
    if (eax <= memoryAGet32(ds, 0x1dfd14))
        goto loc_1c8c10;
    ecx = memoryAGet32(ds, 0x1dfd10);
//    assert(ecx == 0x15d008);
    if (ecx)
        goto loc_1c8c48;
loc_1c8c02: // 0160:1c8c02
    memoryASet32(ds, 0x1dfd14, ecx);
    ecx = memoryAGet32(ds, 0x1dfd0c);
    goto loc_1c8c48;
loc_1c8c10: // 0160:1c8c10
    ecx = 0;
    goto loc_1c8c02;
loc_1c8c14: // 0160:1c8c14
    edx = ds;
    eax = ebp;
    memoryASet32(ds, 0x1dfd10, ecx); // ecx=15d008
    edx &= 0x0000ffff;
    eax = esi;
    ebx = ecx;
    sub_1c9e7c();
    ebx = eax;
    if (eax)
        goto loc_1c8c7b;
    eax = memoryAGet32(ds, 0x1dfd14);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= eax)
        goto loc_1c8c45;
    memoryASet32(ds, 0x1dfd14, edx);
loc_1c8c45: // 0160:1c8c45
    ecx = memoryAGet32(ds, ecx + 8);
loc_1c8c48: // 0160:1c8c48
    if (ecx)
        goto loc_1c8c14;
    if (memoryAGet(ds, esp) != 0x00)
        goto loc_1c8c5d;
//    assert(esi == 0x39); // 0x0e
    eax = esi;
    sub_1ca413();
    assert(eax == 1);
    if (eax)
        goto loc_1c8c72;
loc_1c8c5d: // 0160:1c8c5d
    eax = esi;
    sub_1ca5ce();
    if (!eax)
        goto loc_1c8c7b;
    cl = 0;
    memoryASet(ds, esp, cl);
    goto loc_1c8be4;
loc_1c8c72: // 0160:1c8c72
    memoryASet(ds, esp, 0x01);
    goto loc_1c8be4;
loc_1c8c7b: // 0160:1c8c7b
    ch = 0;
    eax = ebx;
    memoryASet(ds, 0x3f3eb9, ch);
loc_1c8c85: // 0160:1c8c85
    esp += 0x00000004;
    ebp = pop32();
    gs = pop();
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8c94() // 0160:1c8c94 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    ebx = eax;
    ecx = memoryAGet32(ds, 0x1dfd0c);
    goto loc_1c8cad;
loc_1c8ca2: // 0160:1c8ca2
    if (ecx > ebx)
        goto loc_1c8caa;
    if (ebx < edx)
        goto loc_1c8cb4;
loc_1c8caa: // 0160:1c8caa
    ecx = memoryAGet32(ds, ecx + 8);
loc_1c8cad: // 0160:1c8cad
    edx = memoryAGet32(ds, ecx + 8);
    if (edx)
        goto loc_1c8ca2;
loc_1c8cb4: // 0160:1c8cb4
    eax = 0x001dfd0c;
    edx = ds;
    edx &= 0x0000ffff;
    eax = ebx;
    ebx = ecx;
    sub_1c9f24();
    if (ecx == memoryAGet32(ds, 0x1dfd10))
        goto loc_1c8ce5;
    ebp = memoryAGet32(ds, 0x1dfd14);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= ebp)
        goto loc_1c8ce5;
    memoryASet32(ds, 0x1dfd14, edx);
loc_1c8ce5: // 0160:1c8ce5
    ah = 0;
    memoryASet(ds, 0x3f3eb9, ah);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8cf2() // 0160:1c8cf2 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = ebx;
    ebx = ecx;
    esi = eax;
    edi = edx;
    edx = ebp;
    sub_1ca5d2();
    eax = memoryAGet32(ss, ebp);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1c8d0b() // 0160:1c8d0b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x0000000c;
    ebx = eax;
    ah = 0x2a;
    interrupt(0x21);
    cx -= 0x076c;
    ch = al;
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp + 4, ecx);
    eax = 0;
    al = memoryAGet(ds, esp + 6);
    memoryASet32(ds, ebx + 20, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 5);
    assert(al == 9);
    eax--;
    memoryASet32(ds, ebx + 16, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 4);
    memoryASet32(ds, ebx + 12, eax);
    ah = 0x2c;
    interrupt(0x21);
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp, ecx);
    eax = 0;
    al = memoryAGet(ds, esp + 3);
    edx = 0;
    memoryASet32(ds, ebx + 8, eax);
    eax = 0;
    dl = memoryAGet(ds, esp);
    al = memoryAGet(ds, esp + 2);
    esi = edx;
    memoryASet32(ds, ebx + 4, eax);
    eax = 0;
    esi <<= 2;
    al = memoryAGet(ds, esp + 1);
    esi += edx;
    memoryASet32(ds, ebx, eax);
    ah = 0x2a;
    interrupt(0x21);
    cx -= 0x076c;
    ch = al;
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp + 8, ecx);
    ah = memoryAGet(ds, esp + 4);
    al = memoryAGet(ds, esp + 8);
    esi += esi;
    if (al == ah)
        goto loc_1c8dbd;
    if (memoryAGet32(ds, ebx + 8) == 0x00000017)
        goto loc_1c8dbd;
    eax = 0;
    al = memoryAGet(ds, esp + 10);
    memoryASet32(ds, ebx + 20, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 9);
    eax--;
    memoryASet32(ds, ebx + 16, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 8);
    memoryASet32(ds, ebx + 12, eax);
loc_1c8dbd: // 0160:1c8dbd
    eax = esi;
    memoryASet32(ds, ebx + 32, 0xffffffff);
    esp += 0x0000000c;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8dce() // 0160:1c8dce +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    esi = 0x0000000c;
    edx = memoryAGet32(ss, ebp + 16);
    eax = memoryAGet32(ds, eax + 16);
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = 0x001d23dc;
    esi = memoryAGet32(ss, ebp + 20);
    edi = edx;
    if ((int32_t)esi >= (int32_t)0xf4fb7ea1)
        goto loc_1c8e02;
loc_1c8df8: // 0160:1c8df8
    eax = 0xffffffff;
    goto loc_1c8f1b;
loc_1c8e02: // 0160:1c8e02
    eax = memoryAGet32(ss, ebp + 16);
    edx = eax;
    ecx = 0x0000000c;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    esi += eax;
loc_1c8e13: // 0160:1c8e13
    if ((int32_t)edi>=0)
        goto loc_1c8e1d;
    esi--;
    edi += 0x0000000c;
    goto loc_1c8e13;
loc_1c8e1d: // 0160:1c8e1d
    if ((int32_t)esi<0)
        goto loc_1c8df8;
    eax = esi + 1900;
    sub_1ca9b0();
    if (!eax)
        goto loc_1c8e35;
    ebx = 0x001d23f6;
loc_1c8e35: // 0160:1c8e35
    eax = esi;
    eax <<= 3;
    eax += esi;
    eax <<= 3;
    eax += esi;
    ecx = esi + 3;
    edx = eax;
    eax <<= 2;
    ecx = sar32(ecx, 0x02);
    eax += edx;
    edx = eax + ecx;
    eax = (int32_t)memoryAGet16(ds, ebx+edi*2);
//    stop("disassembly failed at 160:1c8e51 movsx eax, word ptr [ebx + edi*2]");
    edi = memoryAGet32(ss, ebp + 12);
    eax += edx;
    edi += eax;
    edi--;
    if (!esi)
        goto loc_1c8e62;
    edi--;
loc_1c8e62: // 0160:1c8e62
    edx = memoryAGet32(ss, ebp + 8);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 2;
    edx = memoryAGet32(ss, ebp + 4);
    edx += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    esi = memoryAGet32(ss, ebp);
    eax <<= 2;
    esi += eax;
loc_1c8e83: // 0160:1c8e83
    if ((int32_t)esi >= 0)
        goto loc_1c8e90;
    edi--;
    esi += 0x00015180;
    goto loc_1c8e83;
loc_1c8e90: // 0160:1c8e90
    eax = edi;
    edx = esi;
    ecx = ebp;
    ebx = 0;
    sub_1caddb();
    sub_1caf1a();
    edx = memoryAGet32(ds, 0x1e0020);
    ebx = memoryAGet32(ss, ebp + 32);
    esi += edx;
    if ((int32_t)ebx >= 0)
        goto loc_1c8eb8;
    eax = ebp;
    sub_1caaf8();
loc_1c8eb8: // 0160:1c8eb8
    if ((int32_t)memoryAGet32(ss, ebp + 32) <= (int32_t)0x00000000)
        goto loc_1c8ec4;
    esi -= memoryAGet32(ds, 0x1e0024);
loc_1c8ec4: // 0160:1c8ec4
    if ((int32_t)esi >= 0)
        goto loc_1c8ed1;
    edi--;
    esi += 0x00015180;
    goto loc_1c8ec4;
loc_1c8ed1: // 0160:1c8ed1
    if ((int32_t)edi < (int32_t)0x000063de)
        goto loc_1c8df8;
    if (edi != 0x000063de)
        goto loc_1c8efb;
    eax = memoryAGet32(ds, 0x1e0020);
    esi -= 0x00015180;
    if ((int32_t)(eax & eax) <= 0)
        goto loc_1c8df8;
    if (stop("postCondition"))
        goto loc_1c8f19;
    goto loc_1c8df8;
loc_1c8efb: // 0160:1c8efb
    eax = edi + -25567;
    edi = eax;
    edi <<= 3;
    edi -= eax;
    edi <<= 5;
    edi += eax;
    edi <<= 7;
    eax = edi;
    edi <<= 2;
    edi -= eax;
    esi += edi;
loc_1c8f19: // 0160:1c8f19
    eax = esi;
loc_1c8f1b: // 0160:1c8f1b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8f22() // 0160:1c8f22 +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    ebp = esp;
    edx = memoryAGet32(ds, 0x1dfd34);
    edx += 0x00000003;
    dl &= 0xfc;
    sub_1cb1ea();
    if (edx >= eax)
        goto loc_1c8f43;
    eax = edx;
    esp -= eax;
    eax = esp;
    goto loc_1c8f45;
loc_1c8f43: // 0160:1c8f43
    eax = 0;
loc_1c8f45: // 0160:1c8f45
    edx = memoryAGet32(ds, 0x1dfd34);
    eax += edx;
    memoryASet32(ds, 0x1dfd38, eax);
    sub_1cb1f3();
    edx = memoryAGet32(ds, 0x3f3ee4);
    eax = memoryAGet32(ds, 0x3f3ee0);
    sub_19ac48();
    sub_1c7f51();
    esp = ebp;
    ebp = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1c8f72() // 0160:1c8f72 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebx);
    push32(edx);
    push(es);
    edx = eax;
loc_1c8f79: // 0160:1c8f79
    esi = 0x001e0188;
    edi = 0x001e01b2;
    ebx = edi;
    al = dl;
loc_1c8f89: // 0160:1c8f89
    if (esi >= edi)
        goto loc_1c8fa1;
    if (memoryAGet(ds, esi) == 0x02)
        goto loc_1c8f9c;
    if (memoryAGet(ds, esi + 1) > al)
        goto loc_1c8f9c;
    ebx = esi;
    al = memoryAGet(ds, esi + 1);
loc_1c8f9c: // 0160:1c8f9c
    esi += 0x00000006;
    goto loc_1c8f89;
loc_1c8fa1: // 0160:1c8fa1
    if (ebx == edi)
        goto loc_1c8fb7;
    eax = memoryAGet32(ds, ebx + 2);
    if (!eax)
        goto loc_1c8fb2;
    push(ds);
    es = pop();
    push32(edx);
    switch (eax)
    {
        case 0x1c7f24: sub_1c7f24(); break;
        case 0x1c9028: sub_1c9028(); break;
        case 0x1c92c7: sub_1c92c7(); break;
        case 0x1cf330: sub_1cf330(); break;
        case 0x1cf378: sub_1cf378(); break;
        case 0x1cf168: sub_1cf168(); break;
        case 0x1c9d9f: sub_1c9d9f(); break;
        case 0x1c900d: sub_1c900d(); break;
        default:
            stop("ind 0160:1c8faf");
    }
    edx = pop32();
loc_1c8fb2: // 0160:1c8fb2
    memoryASet(ds, ebx, 0x02);
    goto loc_1c8f79;
loc_1c8fb7: // 0160:1c8fb7
    es = pop();
    edx = pop32();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1c8fbd() // 0160:1c8fbd +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebx);
    push(es);
    dh = dl;
    dl = al;
loc_1c8fc5: // 0160:1c8fc5
    esi = 0x001e01b2;
    edi = 0x001e01be;
    ebx = edi;
    al = dl;
loc_1c8fd5: // 0160:1c8fd5
    if (esi >= edi)
        goto loc_1c8fed;
    if (memoryAGet(ds, esi) == 0x02)
        goto loc_1c8fe8;
    if (al > memoryAGet(ds, esi + 1))
        goto loc_1c8fe8;
    ebx = esi;
    al = memoryAGet(ds, esi + 1);
loc_1c8fe8: // 0160:1c8fe8
    esi += 0x00000006;
    goto loc_1c8fd5;
loc_1c8fed: // 0160:1c8fed
    if (ebx == edi)
        goto loc_1c9007;
    if (al > dh)
        goto loc_1c9002;
    eax = memoryAGet32(ds, ebx + 2);
    if (!eax)
        goto loc_1c9002;
    push(ds);
    es = pop();
    push32(edx);
    indirectCall(cs, eax); // 0160:1c8fff; //1cf1e0
    edx = pop32();
loc_1c9002: // 0160:1c9002
    memoryASet(ds, ebx, 0x02);
    goto loc_1c8fc5;
loc_1c9007: // 0160:1c9007
    es = pop();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1c900d() // 0160:1c900d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x001cb1fe;
    ebx = 0x001cb323;
    memoryASet32(ds, 0x1e0074, edx);
    memoryASet32(ds, 0x1e0078, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9028() // 0160:1c9028 +long
{
    return;
    esp -= 4;
    push(es);
    push32(ecx);
    push32(ebx);
    push32(edx);
    stop("disassembly failed at 160:1c902c fninit ");
    push32(eax);
    memoryASet16(ds, esp, fnstcw());
    eax = pop32();
    if (ah == 0x03)
        goto loc_1c9039;
    ebp++;
loc_1c9039: // 0160:1c9039
    flags.zero = !ebp;
    flags.sign = stop("nosave");
    if (flags.zero)
        goto loc_1c9042;
    sub_1c9058();
    stop("propagate sign flag", "0160:1c903d");
loc_1c9042: // 0160:1c9042
    stop("disassembly failed at 160:1c9043 fninit ");
    fldcw(memoryAGet16(ds, 0x1e00fc));
    stop("disassembly failed at 160:1c904b fldz ");
    stop("disassembly failed at 160:1c904d fldz ");
    stop("disassembly failed at 160:1c904f fldz ");
    stop("disassembly failed at 160:1c9051 fldz ");
    edx = pop32();
    ebx = pop32();
    ecx = pop32();
    es = pop();
    esp += 4;
}
void sub_1c9058() // 0160:1c9058 +long +returnZero
{
    esp -= 4;
    memoryASet(ds, 0x1dfcfc, 0x03);
    memoryASet(ds, 0x1dfda4, 0x01);
    stop("disassembly failed at 160:1c9066 smsw word ptr [0x1dfda2]");
    memoryASet16(ds, 0x1dfda2, memoryAGet16(ds, 0x1dfda2) & 0x0006);
    esp -= 0x00000008;
    stop("disassembly failed at 160:1c9079 sidt [esp]");
    ebx = memoryAGet32(ds, esp + 2);
    ebx += 0x00000038;
    esp += 0x00000008;
    if (memoryAGet(ds, 0x1dfd4c) == 0x00)
        goto loc_1c90aa;
    sub_1c9123();
    es = memoryAGet16(ds, 0x1dfcfa);
    memoryASet32(es, ebx, edx);
    memoryASet32(es, ebx + 4, ecx);
    sub_1c918d();
    goto loc_1c9122;
loc_1c90aa: // 0160:1c90aa
    if (memoryAGet(ds, 0x1dfd4a) != 0x00)
        goto loc_1c90ce;
    ax = 0x2507;
    push(ds);
    cx = cs;
    ds = ecx;
    edx = 0x1cb72c;
    interrupt(0x21);
    ds = pop();
    al = 0x04;
    ah = 0xf3;
    flags.zero = stop("nosave");
    interrupt(0x21);
    goto loc_1c9122;
loc_1c90ce: // 0160:1c90ce
    if (memoryAGet(ds, 0x1dfd4a) != 0x09)
        goto loc_1c90f6;
    sub_1c9123();
    memoryASet32(ds, ebx, edx);
    memoryASet32(ds, ebx + 4, ecx);
    eax = 0x00000e02;
    ebx = 0x00000004;
    ecx = memoryAGet32(ds, 0x1dfcf4);
    indirectCall(cs, memoryAGet32(ds, ecx + 48)); // 0160:1c90f1;
    stop("callee must return zero", "0160:1c90f1");
    goto loc_1c9122;
loc_1c90f6: // 0160:1c90f6
    if (memoryAGet(ds, 0x1dfd4a) != 0x01)
        goto loc_1c910f;
    dx = memoryAGet16(ds, 0x1dfcf8);
    eax = 0;
    sub_1ce56a();
    goto loc_1c9122;
loc_1c910f: // 0160:1c910f
    dx = 0;
    eax = 0;
    sub_1ce56a();
    flags.zero = al == 0x01;
    if (flags.zero)
        goto loc_1c9122;
    sub_1c9140();
loc_1c9122: // 0160:1c9122
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_1c9123() // 0160:1c9123 +long
{
    esp -= 4;
    ecx = 0x1cb72c;
    dx = cs;
    edx <<= 16;
    dx = cx;
    cx = cs;
    cl &= 0x03;
    cx <<= 13;
    ch |= 0x8e;
    esp += 4;
}
void sub_1c9140() // 0160:1c9140 +long +returnZero
{
    bool temp_cond0;

    esp -= 4;
    cl = 0x07;
    ax = 0x2502;
    interrupt(0x21);
    memoryASet32(ds, 0x1dfd9c, ebx);
    memoryASet16(ds, 0x1dfda0, es);
    temp_cond0 = stop("preCondition");
    temp_cond0 = stop("preCondition");
    cl = 0x07;
    ax = 0x2504;
    push(ds);
    push(cs);
    ds = pop();
    if (stop("xxx multi precond"))
        goto loc_1c9177;
    edx = 0x1cb6bc;
    interrupt(0x21);
    ds = pop();
    sub_1c918d();
    goto loc_1c918c;
loc_1c9177: // 0160:1c9177
    edx = 0x1cb72c;
    interrupt(0x21);
    ds = pop();
    ecx = cr0;
    ecx |= 0x00000004;
    flags.zero = !(ecx & 0xfffffffd);
    ecx &= 0xfffffffd;
    cr0 = ecx;
loc_1c918c: // 0160:1c918c
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_1c918d() // 0160:1c918d +long +returnZero
{
    esp -= 4;
    ebx = 0;
    edx = 0x1dfd5c;
    ax = 0x2535;
    interrupt(0x21);
    memoryASet32(ds, 0x1dfd5c, memoryAGet32(ds, 0x1dfd5c) | 0x00000004);
    memoryASet32(ds, 0x1dfd5c, memoryAGet32(ds, 0x1dfd5c) & 0xfffffffd);
    ebx++;
    interrupt(0x21);
    esp += 4;
}
void sub_1c928c() // 0160:1c928c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet(ds, 0x1dfcfd) == 0x00)
        goto loc_1c92ad;
    edx = 0x001c9283;
    ebx = 0x001c9288;
    memoryASet32(ds, 0x1e0100, edx);
    memoryASet32(ds, 0x1e0104, ebx);
loc_1c92ad: // 0160:1c92ad
    eax = 0;
    ax = memoryAGet16(ds, 0x1e00fc);
    sub_1ce68e();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c92c7() // 0160:1c92c7 +long
{
    return;
    esp -= 4;
    push32(edx);
    ah = memoryAGet(ds, 0x1dfcfc);
    if (ah)
        goto loc_1c9305;
    memoryASet(ds, 0x1dfcfd, ah);
    eax = 0;
    push32(eax);
    stop("disassembly failed at 160:1c92db fninit ");
    memoryASet16(ds, esp, fnstcw());
    eax = pop32();
    al = ah;
    dl = 0;
    if (al != 0x03)
        goto loc_1c92f0;
    sub_1c928c();
    dl = al;
loc_1c92f0: // 0160:1c92f0
    if (memoryAGet(ds, 0x1dfd48) != 0x00)
        goto loc_1c9305;
    memoryASet(ds, 0x1dfcfc, dl);
    memoryASet(ds, 0x1dfcfd, dl);
loc_1c9305: // 0160:1c9305
    edx = pop32();
    esp += 4;
}
void sub_1c9307() // 0160:1c9307 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    eax = edx;
    edx = memoryAGet32(ds, ebx);
    sub_1c9c7c();
    memoryASet32(ds, ebx + 16, memoryAGet32(ds, ebx + 16) + 1);
    ebx = pop32();
    esp += 4;
}
void sub_1c9318() // 0160:1c9318 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    ebp = memoryAGet32(ds, eax + 12);
    ah = memoryAGet(ds, eax + 12);
    ecx = memoryAGet32(ds, esi + 8);
    ah &= 0xcf;
    ebp &= 0x00000030;
    memoryASet(ds, esi + 12, ah);
    if (ecx)
        goto loc_1c933b;
    eax = esi;
    sub_1c98b2();
loc_1c933b: // 0160:1c933b
    cl = memoryAGet(ds, esi + 13);
    edi = 0;
    if (!(cl & 0x04))
        goto loc_1c9359;
    ch = cl;
    ch &= 0xfa;
    al = ch;
    memoryASet(ds, esi + 13, ch);
    al |= 0x01;
    edi = 0x00000001;
    memoryASet(ds, esi + 13, al);
loc_1c9359: // 0160:1c9359
    ecx = 0x001c9307;
    eax = esi;
    sub_1ce6b5();
    edx = eax;
    if (!edi)
        goto loc_1c9383;
    ah = memoryAGet(ds, esi + 13);
    ah &= 0xfa;
    bl = ah;
    memoryASet(ds, esi + 13, ah);
    bl |= 0x04;
    eax = esi;
    memoryASet(ds, esi + 13, bl);
    sub_1c9764();
loc_1c9383: // 0160:1c9383
    if (!(memoryAGet(ds, esi + 12) & 0x20))
        goto loc_1c938e;
    edx = 0xffffffff;
loc_1c938e: // 0160:1c938e
    edi = memoryAGet32(ds, esi + 12);
    edi |= ebp;
    eax = edx;
    memoryASet32(ds, esi + 12, edi);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1c939d() // 0160:1c939d +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000041)
        goto loc_1c93aa;
    if ((int32_t)eax > (int32_t)0x0000005a)
        goto loc_1c93aa;
    eax += 0x00000020;
loc_1c93aa: // 0160:1c93aa
    esp += 4;
    return;
}
void sub_1c93b0() // 0160:1c93b0 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    sub_1cf0af();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_1c93d3() // 0160:1c93d3 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    sub_1cf0b5();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_1c940a() // 0160:1c940a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x0000000c;
    esi = memoryAGet32(ds, esp + 36);
loc_1c9416: // 0160:1c9416
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1c941e;
    esi++;
    goto loc_1c9416;
loc_1c941e: // 0160:1c941e
    eax = memoryAGet32(ds, esp + 40);
    eax &= 0x00000083;
    memoryASet32(ds, esp, eax);
    dl = memoryAGet(ds, esp + 44);
    al = memoryAGet(ds, esp);
    al |= dl;
    edx = esi;
    edi = 0xffffffff;
    ah = 0x3d;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1c9451;
    edi = 0;
    di = memoryAGet16(ds, esp + 4);
loc_1c9451: // 0160:1c9451
    dh = memoryAGet(ds, esp + 40);
    if (!(dh & 0x03))
        goto loc_1c94cb;
    if (edi == 0xffffffff)
        goto loc_1c94cb;
    eax = edi;
    sub_1cf0bb();
    if (eax)
        goto loc_1c94cb;
    if (!(memoryAGet(ds, esp + 41) & 0x04))
        goto loc_1c9493;
    ebx = edi;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    eax = 0x00000007;
    sub_1c93b0();
    eax = 0xffffffff;
    goto loc_1c95c6;
loc_1c9493: // 0160:1c9493
    if (!(dh & 0x40))
        goto loc_1c94cb;
    edx = esp + 8;
    ebx = edi;
    ecx = 0;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if (stop("postCondition"))
        goto loc_1c94cb;
    ebx = edi;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
loc_1c94ba: // 0160:1c94ba
    eax = 0;
    ax = memoryAGet16(ds, esp + 4);
    sub_1c9e15();
    goto loc_1c95c6;
loc_1c94cb: // 0160:1c94cb
    if (edi != 0xffffffff)
        goto loc_1c9559;
    if (!(memoryAGet(ds, esp + 40) & 0x20))
        goto loc_1c94ba;
    if (memoryAGet16(ds, esp + 4) != 0x0002)
        goto loc_1c94ba;
    eax = esp + 48;
    eax += 0x00000004;
    eax = memoryAGet32(ds, eax + -4);
    if (eax)
        goto loc_1c94f6;
    eax = 0x00000180;
loc_1c94f6: // 0160:1c94f6
    eax ^= memoryAGet32(ds, 0x1e0108);
    ecx = 0;
    if (al & 0x80)
        goto loc_1c9507;
    ecx = 0x00000001;
loc_1c9507: // 0160:1c9507
    edx = esi;
    ecx &= 0x000000ff;
    ah = 0x3c;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if (stop("postCondition"))
        goto loc_1c94ba;
    ebx = memoryAGet32(ds, esp + 4);
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if (stop("postCondition"))
        goto loc_1c94ba;
    al = memoryAGet(ds, esp);
    ch = memoryAGet(ds, esp + 44);
    edx = esi;
    al |= ch;
    ah = 0x3d;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if (stop("postCondition"))
        goto loc_1c94ba;
    edi = 0;
    di = memoryAGet16(ds, esp + 4);
loc_1c9559: // 0160:1c9559
    eax = edi;
    sub_1cf0d9();
    al &= 0x3c;
    edx = eax;
    eax = edi;
    sub_1cf0bb();
    if (!eax)
        goto loc_1c9572;
    dh |= 0x20;
loc_1c9572: // 0160:1c9572
    memoryASet(ds, esp, memoryAGet(ds, esp) & 0x7f);
    if (memoryAGet32(ds, esp) != 0x00000002)
        goto loc_1c957f;
    dl |= 0x03;
loc_1c957f: // 0160:1c957f
    if (memoryAGet32(ds, esp) != 0x00000000)
        goto loc_1c9588;
    dl |= 0x01;
loc_1c9588: // 0160:1c9588
    if (memoryAGet32(ds, esp) != 0x00000001)
        goto loc_1c9591;
    dl |= 0x02;
loc_1c9591: // 0160:1c9591
    if (!(memoryAGet(ds, esp + 40) & 0x10))
        goto loc_1c959b;
    dl |= 0x80;
loc_1c959b: // 0160:1c959b
    eax = edx;
    bl = memoryAGet(ds, esp + 41);
    al |= 0x40;
    if (!(bl & 0x03))
        goto loc_1c95af;
    if (!(bl & 0x02))
        goto loc_1c95bd;
    goto loc_1c95bb;
loc_1c95af: // 0160:1c95af
    if (memoryAGet32(ds, 0x1dffb1) != 0x00000200)
        goto loc_1c95bd;
loc_1c95bb: // 0160:1c95bb
    edx = eax;
loc_1c95bd: // 0160:1c95bd
    eax = edi;
    sub_1cf12e();
    eax = edi;
loc_1c95c6: // 0160:1c95c6
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9634() // 0160:1c9634 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = memoryAGet32(ds, 0x3f3eac);
    if (!esi)
        goto loc_1c965c;
    ecx = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, ecx + 12);
    eax = memoryAGet32(ds, esi);
    edi &= 0x00004003;
    memoryASet32(ds, 0x3f3eac, eax);
    di |= 0x0003;
    goto loc_1c96a5;
loc_1c965c: // 0160:1c965c
    ecx = 0x001dfda8;
    goto loc_1c9683;
loc_1c9663: // 0160:1c9663
    if (memoryAGet(ds, ecx + 12) & 0x03)
        goto loc_1c9680;
    eax = 0x00000008;
    sub_1c8bb1();
    esi = eax;
    if (!eax)
        goto loc_1c96ca;
    edi = 0x00000003;
    goto loc_1c96a5;
loc_1c9680: // 0160:1c9680
    ecx += 0x0000001a;
loc_1c9683: // 0160:1c9683
    if (ecx < 0x001dffb0)
        goto loc_1c9663;
    eax = 0x00000022;
    edi = 0x00004003;
    sub_1c8bb1();
    ecx = eax;
    esi = eax;
    if (!eax)
        goto loc_1c96ca;
    ecx = eax + 8;
loc_1c96a5: // 0160:1c96a5
    ebx = 0x0000001a;
    eax = ecx;
    edx = 0;
    sub_1cf150();
    memoryASet32(ds, ecx + 12, edi);
    eax = memoryAGet32(ds, 0x3f3eb0);
    memoryASet32(ds, esi + 4, ecx);
    memoryASet32(ds, 0x3f3eb0, esi);
    memoryASet32(ds, esi, eax);
    eax = ecx;
    goto loc_1c96d6;
loc_1c96ca: // 0160:1c96ca
    eax = 0x00000005;
    sub_1c93b0();
    eax = 0;
loc_1c96d6: // 0160:1c96d6
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c96dc() // 0160:1c96dc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    edx = 0x003f3eb0;
loc_1c96e6: // 0160:1c96e6
    eax = memoryAGet32(ds, edx);
    if (!eax)
        goto loc_1c9711;
    ecx = memoryAGet32(ds, eax + 4);
    if (ebx == ecx)
        goto loc_1c96f7;
    edx = eax;
    goto loc_1c96e6;
loc_1c96f7: // 0160:1c96f7
    cl = memoryAGet(ds, ecx + 12);
    cl |= 0x03;
    memoryASet(ds, ebx + 12, cl);
    ebx = memoryAGet32(ds, eax);
    memoryASet32(ds, edx, ebx);
    edx = memoryAGet32(ds, 0x3f3eac);
    memoryASet32(ds, 0x3f3eac, eax);
    memoryASet32(ds, eax, edx);
loc_1c9711: // 0160:1c9711
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9733() // 0160:1c9733 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    if (memoryAGet(ds, eax + 13) & 0x20)
        goto loc_1c9760;
    eax = memoryAGet32(ds, edx + 16);
    sub_1cf0bb();
    if (!eax)
        goto loc_1c9760;
    bl = memoryAGet(ds, edx + 13);
    bl |= 0x20;
    memoryASet(ds, edx + 13, bl);
    if (bl & 0x07)
        goto loc_1c9760;
    cl = bl;
    cl |= 0x02;
    memoryASet(ds, edx + 13, cl);
loc_1c9760: // 0160:1c9760
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9764() // 0160:1c9764 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_1c97d1;
    bh = memoryAGet(ds, ecx + 13);
    bh &= 0xef;
    al = memoryAGet(ds, ecx + 12);
    memoryASet(ds, ecx + 13, bh);
    if (!(al & 0x02))
        goto loc_1c9810;
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_1c9810;
    ebx = memoryAGet32(ds, ecx + 4);
    edx = memoryAGet32(ds, ecx + 8);
    eax = memoryAGet32(ds, ecx + 16);
    sub_1cf243();
    if (eax != 0xffffffff)
        goto loc_1c97b2;
    dl = memoryAGet(ds, ecx + 12);
    dl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, dl);
    goto loc_1c9810;
loc_1c97b2: // 0160:1c97b2
    if (eax == memoryAGet32(ds, ecx + 4))
        goto loc_1c9810;
    eax = 0x0000000c;
    sub_1c93b0();
    ah = memoryAGet(ds, ecx + 12);
    ah |= 0x20;
    esi = 0xffffffff;
    memoryASet(ds, ecx + 12, ah);
    goto loc_1c9810;
loc_1c97d1: // 0160:1c97d1
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_1c9810;
    dl = memoryAGet(ds, ecx + 12);
    dl &= 0xef;
    dh = memoryAGet(ds, ecx + 13);
    memoryASet(ds, ecx + 12, dl);
    if (dh & 0x20)
        goto loc_1c9810;
    eax = memoryAGet32(ds, ecx + 4);
    if (!eax)
        goto loc_1c9800;
    edx = eax;
    ebx = 0x00000001;
    edx = -edx;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1c9823();
loc_1c9800: // 0160:1c9800
    if (eax != 0xffffffff)
        goto loc_1c9810;
    bl = memoryAGet(ds, ecx + 12);
    bl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, bl);
loc_1c9810: // 0160:1c9810
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
    eax = esi;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9823() // 0160:1c9823 +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    esp -= 0x00000004;
    ecx = eax;
    eax = ebx;
    edi = esp;
    ebx = ecx;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    memoryASet16(ss, edi, ax);
    memoryASet16(ss, edi + 2, dx);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_1c985b;
    eax &= 0x0000ffff;
    sub_1c9e15();
    eax = 0xffffffff;
    goto loc_1c985e;
loc_1c985b: // 0160:1c985b
    eax = memoryAGet32(ds, esp);
loc_1c985e: // 0160:1c985e
    esp += 0x00000004;
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1c9864() // 0160:1c9864 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = 0x00000001;
    edx = 0;
    sub_1c9823();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9875() // 0160:1c9875 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x1dfd28);
    esp += 4;
}
void sub_1c987b() // 0160:1c987b +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    ebx = eax;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax < 0)
        goto loc_1c989b;
    eax = edx;
    edx = 0;
    sub_1cf12e();
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c989b: // 0160:1c989b
    eax = 0x00000004;
    sub_1c93b0();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c98ad()
{
  sub_1cf2bf();
}

void sub_1c98b2() // 0160:1c98b2 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    edx = eax;
    sub_1c9733();
    if (memoryAGet32(ds, edx + 20) != 0x00000000)
        goto loc_1c98e7;
    ah = memoryAGet(ds, edx + 13);
    if (!(ah & 0x02))
        goto loc_1c98d2;
    memoryASet32(ds, edx + 20, 0x00000086);
    goto loc_1c98e7;
loc_1c98d2: // 0160:1c98d2
    if (!(ah & 0x04))
        goto loc_1c98e0;
    memoryASet32(ds, edx + 20, 0x00000001);
    goto loc_1c98e7;
loc_1c98e0: // 0160:1c98e0
    memoryASet32(ds, edx + 20, 0x00001000);
loc_1c98e7: // 0160:1c98e7
    eax = memoryAGet32(ds, edx + 20);
    sub_1c8bb1();
    memoryASet32(ds, edx + 8, eax);
    if (eax)
        goto loc_1c9916;
    eax = edx + 24;
    cl = memoryAGet(ds, edx + 13);
    memoryASet32(ds, edx + 20, 0x00000001);
    cl &= 0xf8;
    memoryASet32(ds, edx + 8, eax);
    ch = cl;
    memoryASet(ds, edx + 13, cl);
    ch |= 0x04;
    memoryASet(ds, edx + 13, ch);
    goto loc_1c991a;
loc_1c9916: // 0160:1c9916
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) | 0x08);
loc_1c991a: // 0160:1c991a
    eax = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx, eax);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1c9929() // 0160:1c9929 +long
{
    esp -= 4;
    push32(ecx);
    ecx = ebx;
    ebx = eax;
    ah = 0x3f;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1c9946;
    eax &= 0x0000ffff;
    sub_1c9e15();
loc_1c9946: // 0160:1c9946
    ecx = pop32();
    esp += 4;
}
void sub_1c9a00() // 0160:1c9a00 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    if (memoryAGet32(ds, eax + 8) != 0x00000000)
        goto loc_1c9a11;
    sub_1c98b2();
loc_1c9a11: // 0160:1c9a11
    ah = memoryAGet(ds, ecx + 13);
    if (!(ah & 0x20))
        goto loc_1c9a28;
    if (!(ah & 0x06))
        goto loc_1c9a28;
    eax = 0x00002000;
    sub_1cf2e3();
loc_1c9a28: // 0160:1c9a28
    edx = memoryAGet32(ds, ecx + 12);
    bl = memoryAGet(ds, ecx + 12);
    eax = memoryAGet32(ds, ecx + 8);
    bl &= 0xfb;
    memoryASet32(ds, ecx, eax);
    edx &= 0x00002400;
    memoryASet(ds, ecx + 12, bl);
    if (edx != 0x00002400)
        goto loc_1c9a68;
    ebx = memoryAGet32(ds, ecx + 16);
    if (ebx)
        goto loc_1c9a68;
    memoryASet32(ds, ecx + 4, ebx);
    sub_1cf312();
    if (eax == 0xffffffff)
        goto loc_1c9a85;
    ebx = memoryAGet32(ds, ecx);
    memoryASet(ds, ebx, al);
    memoryASet32(ds, ecx + 4, 0x00000001);
    goto loc_1c9a85;
loc_1c9a68: // 0160:1c9a68
    if (!(memoryAGet(ds, ecx + 13) & 0x04))
        goto loc_1c9a75;
    ebx = 0x00000001;
    goto loc_1c9a78;
loc_1c9a75: // 0160:1c9a75
    ebx = memoryAGet32(ds, ecx + 20);
loc_1c9a78: // 0160:1c9a78
    edx = memoryAGet32(ds, ecx);
    eax = memoryAGet32(ds, ecx + 16);
    sub_1c9929();
    memoryASet32(ds, ecx + 4, eax);
loc_1c9a85: // 0160:1c9a85
    esi = memoryAGet32(ds, ecx + 4);
    if ((int32_t)esi > 0)
        goto loc_1c9aa3;
    if (esi)
        goto loc_1c9a94;
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) | 0x10);
    goto loc_1c9aa3;
loc_1c9a94: // 0160:1c9a94
    al = memoryAGet(ds, ecx + 12);
    memoryASet32(ds, ecx + 4, 0x00000000);
    al |= 0x20;
    memoryASet(ds, ecx + 12, al);
loc_1c9aa3: // 0160:1c9aa3
    eax = memoryAGet32(ds, ecx + 4);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9c7c() // 0160:1c9c7c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (memoryAGet(ds, edx + 12) & 0x02)
        goto loc_1c9ca1;
    eax = 0x00000004;
    sub_1c93b0();
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) | 0x20);
loc_1c9c97: // 0160:1c9c97
    eax = 0xffffffff;
    goto loc_1c9d1a;
loc_1c9ca1: // 0160:1c9ca1
    if (memoryAGet32(ds, edx + 8) != 0x00000000)
        goto loc_1c9cae;
    eax = edx;
    sub_1c98b2();
loc_1c9cae: // 0160:1c9cae
    ecx = 0x00000400;
    if (ebx != 0x0000000a)
        goto loc_1c9ceb;
    al = memoryAGet(ds, edx + 12);
    ecx = 0x00000600;
    if (al & 0x40)
        goto loc_1c9ceb;
    memoryASet(ds, edx + 13, memoryAGet(ds, edx + 13) | 0x10);
    eax = memoryAGet32(ds, edx);
    memoryASet(ds, eax, 0x0d);
    esi = memoryAGet32(ds, edx);
    esi++;
    edi = memoryAGet32(ds, edx + 4);
    memoryASet32(ds, edx, esi);
    edi++;
    ebp = memoryAGet32(ds, edx + 20);
    memoryASet32(ds, edx + 4, edi);
    if (edi != ebp)
        goto loc_1c9ceb;
    eax = edx;
    sub_1c9764();
    if (eax)
        goto loc_1c9c97;
loc_1c9ceb: // 0160:1c9ceb
    memoryASet(ds, edx + 13, memoryAGet(ds, edx + 13) | 0x10);
    eax = memoryAGet32(ds, edx);
    memoryASet(ds, eax, bl);
    eax = memoryAGet32(ds, edx);
    eax++;
    esi = memoryAGet32(ds, edx + 4);
    memoryASet32(ds, edx, eax);
    esi++;
    edi = memoryAGet32(ds, edx + 12);
    memoryASet32(ds, edx + 4, esi);
    if (ecx & edi)
        goto loc_1c9d0b;
    if (esi != memoryAGet32(ds, edx + 20))
        goto loc_1c9d16;
loc_1c9d0b: // 0160:1c9d0b
    eax = edx;
    sub_1c9764();
    if (eax)
        goto loc_1c9c97;
loc_1c9d16: // 0160:1c9d16
    eax = 0;
    al = bl;
loc_1c9d1a: // 0160:1c9d1a
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9d20() // 0160:1c9d20 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax = cs;
    memoryASet16(ds, edx + 2, ax);
    eax = ds;
    memoryASet16(ds, edx + 6, ax);
    eax = es;
    memoryASet16(ds, edx, ax);
    eax = ss;
    memoryASet16(ds, edx + 4, ax);
    eax = fs;
    memoryASet16(ds, edx + 8, ax);
    eax = gs;
    memoryASet16(ds, edx + 10, ax);
    edx = pop32();
    esp += 4;
}
void sub_1c9d48() // 0160:1c9d48 +long
{
    esp -= 4;
    push32(ecx);
    esp -= 0x00000004;
loc_1c9d4c: // 0160:1c9d4c
    if (ebx)
        goto loc_1c9d57;
loc_1c9d50: // 0160:1c9d50
    eax = 0;
    esp += 0x00000004;
    ecx = pop32();
    esp += 4;
    return;
loc_1c9d57: // 0160:1c9d57
    ch = memoryAGet(ds, edx);
    cl = memoryAGet(ds, eax);
    memoryASet(ds, esp, ch);
    if (cl < 0x41)
        goto loc_1c9d6b;
    if (cl > 0x5a)
        goto loc_1c9d6b;
    cl += 0x20;
loc_1c9d6b: // 0160:1c9d6b
    ch = memoryAGet(ds, esp);
    if (ch < 0x41)
        goto loc_1c9d7e;
    if (ch > 0x5a)
        goto loc_1c9d7e;
    ch += 0x20;
    memoryASet(ds, esp, ch);
loc_1c9d7e: // 0160:1c9d7e
    ch = memoryAGet(ds, esp);
    if (cl == ch)
        goto loc_1c9d96;
    edx = 0;
    eax = 0;
    dl = cl;
    al = ch;
    edx -= eax;
    eax = edx;
    esp += 0x00000004;
    ecx = pop32();
    esp += 4;
    return;
loc_1c9d96: // 0160:1c9d96
    if (!ch)
        goto loc_1c9d50;
    eax++;
    edx++;
    ebx--;
    goto loc_1c9d4c;
}
void sub_1c9d9f() // 0160:1c9d9f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ah = 0x2c;
    interrupt(0x21);
    eax = 0;
    al = dh;
    ebx = eax;
loc_1c9dad: // 0160:1c9dad
    ah = 0x2c;
    interrupt(0x21);
    eax = 0;
    al = dh;
    if (ebx == eax)
        goto loc_1c9dad;
    esi = 0;
    bl = al;
loc_1c9dbd: // 0160:1c9dbd
    ah = 0x2c;
    interrupt(0x21);
    esi++;
    if (bl == dh)
        goto loc_1c9dbd;
    memoryASet32(ds, 0x3f3eb4, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9dd1() // 0160:1c9dd1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (!eax)
        goto loc_1c9e04;
    stop("imul eax * memoryAGet32(ds, 0x3f3eb4)");
    esi = 0x000003e8;
    eax += 0x000001f4;
    edx = 0;
    div32(esi);
    esi = eax;
    if (eax)
        goto loc_1c9df7;
    esi = eax + 1;
loc_1c9df7: // 0160:1c9df7
    eax = 0;
    bl = al;
loc_1c9dfb: // 0160:1c9dfb
    ah = 0x2c;
    interrupt(0x21);
    esi--;
    if (esi)
        goto loc_1c9dfb;
loc_1c9e04: // 0160:1c9e04
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9e15() // 0160:1c9e15 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    bl = al;
    eax = 0;
    al = dl;
    sub_1c93d3();
    if (edx >= 0x00000100)
        goto loc_1c9e64;
    if (memoryAGet(ds, 0x1dfd53) < 0x03)
        goto loc_1c9e4e;
    if (dl != 0x50)
        goto loc_1c9e3e;
    bl = 0x0e;
    goto loc_1c9e4e;
loc_1c9e3e: // 0160:1c9e3e
    if (dl < 0x22)
        goto loc_1c9e47;
    bl = 0x13;
    goto loc_1c9e4e;
loc_1c9e47: // 0160:1c9e47
    if (dl < 0x20)
        goto loc_1c9e4e;
    bl = 0x05;
loc_1c9e4e: // 0160:1c9e4e
    if (bl <= 0x13)
        goto loc_1c9e55;
    bl = 0x13;
loc_1c9e55: // 0160:1c9e55
    edx = 0;
    dl = bl;
    eax = memoryAGet32(ds, edx + 1966017);
    eax = sar32(eax, 0x18);
    goto loc_1c9e6e;
loc_1c9e64: // 0160:1c9e64
    eax = edx;
    eax >>= 8;
    eax &= 0x000000ff;
loc_1c9e6e: // 0160:1c9e6e
    sub_1c93b0();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c9e7c() // 0160:1c9e7c +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ecx);
    push(ds);
    ds = edx;
    if (!eax)
        goto loc_1c9ecb;
    flags.carry = (eax + 0x00000007) >= 0x100000000ull;
    eax += 0x00000007;
    if (flags.carry)
        goto loc_1c9ecb;
    al &= 0xfc;
    edx = 0x0000000c;
    flags.carry = eax < edx;
    eax -= edx;
    flags.carry = !flags.carry;
    ecx = -flags.carry;
    eax &= ecx;
    eax += edx;
    if (eax > memoryAGet32(ds, ebx + 20))
        goto loc_1c9ecb;
    esi = memoryAGet32(ds, ebx + 12);
    edi = memoryAGet32(ds, ebx + 16);
    if (eax > edi)
        goto loc_1c9eaf;
    esi = memoryAGet32(ds, ebx + 40);
    edi = 0;
loc_1c9eaf: // 0160:1c9eaf
    edx = memoryAGet32(ds, esi);
    if (eax <= edx)
        goto loc_1c9ecf;
    flags.carry = edi < edx;
    edi -= edx;
    flags.carry = !flags.carry;
    ecx = -flags.carry;
    edi &= ecx;
    edi += edx;
    edx = ebx + 32;
    esi = memoryAGet32(ds, esi + 8);
    if (esi != edx)
        goto loc_1c9eaf;
    memoryASet32(ds, ebx + 20, edi);
loc_1c9ecb: // 0160:1c9ecb
    eax = 0;
    goto loc_1c9f1a;
loc_1c9ecf: // 0160:1c9ecf
    edx -= eax;
    memoryASet32(ds, ebx + 16, edi);
    memoryASet32(ds, ebx + 24, memoryAGet32(ds, ebx + 24) + 1);
    ecx = memoryAGet32(ds, esi + 8);
    if (edx < 0x0000000c)
        goto loc_1c9efd;
    edi = esi;
    edi += eax;
    memoryASet32(ds, ebx + 12, edi);
    memoryASet32(ds, edi, edx);
    memoryASet32(ds, esi, eax);
    ebx = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, ebx);
    memoryASet32(ds, edi + 8, ecx);
    memoryASet32(ds, ebx + 8, edi);
    ebx = ecx;
    memoryASet32(ds, ebx + 4, edi);
    goto loc_1c9f12;
loc_1c9efd: // 0160:1c9efd
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) - 1);
    eax = esi;
    edi = ecx;
    esi = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, esi + 8, edi);
    memoryASet32(ds, edi + 4, esi);
    memoryASet32(ds, ebx + 12, esi);
    esi = eax;
loc_1c9f12: // 0160:1c9f12
    memoryASet32(ds, esi, memoryAGet32(ds, esi) | 0x00000001);
    eax = esi;
    eax += 0x00000004;
loc_1c9f1a: // 0160:1c9f1a
    ds = pop();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1c9f24() // 0160:1c9f24 +long
{
    esp -= 4;
    goto loc_1c9f24;
loc_1c9f1f: // 0160:1c9f1f
    goto loc_1ca02a;
loc_1c9f24: // 0160:1c9f24
    push32(esi);
    push32(edi);
    push32(ecx);
    push(ds);
    ds = edx;
    if (!eax)
        goto loc_1c9f1f;
    esi = eax;
    esi -= 0x00000004;
    eax = memoryAGet32(ds, esi);
    if (!(al & 0x01))
        goto loc_1c9f1f;
    al &= 0xfe;
    edi = esi;
    edi += eax;
    if (memoryAGet32(ds, edi) & 0x00000001)
        goto loc_1c9f66;
    if (edi != memoryAGet32(ds, ebx + 12))
        goto loc_1c9f4f;
    memoryASet32(ds, ebx + 12, esi);
loc_1c9f4f: // 0160:1c9f4f
    eax += memoryAGet32(ds, edi);
    memoryASet32(ds, esi, eax);
    push32(ebx);
    ebx = memoryAGet32(ds, edi + 4);
    edi = memoryAGet32(ds, edi + 8);
    memoryASet32(ds, ebx + 8, edi);
    memoryASet32(ds, edi + 4, ebx);
    ebx = pop32();
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) - 1);
    goto loc_1c9fe2;
loc_1c9f66: // 0160:1c9f66
    memoryASet32(ds, esi, eax);
    edi = memoryAGet32(ds, ebx + 12);
    if (esi >= edi)
        goto loc_1c9f7d;
    if (esi > memoryAGet32(ds, edi + 4))
        goto loc_1c9fe2;
    edi = memoryAGet32(ds, ebx + 40);
    if (esi < edi)
        goto loc_1c9fe2;
    goto loc_1c9f8c;
loc_1c9f7d: // 0160:1c9f7d
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1c9fe2;
    edi = ebx + 32;
    if (esi > memoryAGet32(ds, ebx + 36))
        goto loc_1c9fe2;
loc_1c9f8c: // 0160:1c9f8c
    edx = 0;
    eax = memoryAGet32(ds, ebx + 24);
    ecx = memoryAGet32(ds, ebx + 28);
    ecx++;
    div32(ecx);
    ecx--;
    if (eax >= ecx)
        goto loc_1c9fc1;
    edx = memoryAGet32(ds, ebx + 24);
    edx -= ecx;
    eax += eax;
    if (edx > ecx)
        goto loc_1c9fa9;
    eax = 0;
loc_1c9fa9: // 0160:1c9fa9
    edi = esi;
    edi += memoryAGet32(ds, esi);
loc_1c9fad: // 0160:1c9fad
    edx = memoryAGet32(ds, edi);
    if (!(dl & 0x01))
        goto loc_1c9fe2;
    if (edx == 0xffffffff)
        goto loc_1c9fc1;
    dl &= 0xfe;
    edi += edx;
    eax--;
    if (eax)
        goto loc_1c9fad;
loc_1c9fc1: // 0160:1c9fc1
    edi = memoryAGet32(ds, ebx + 12);
    if (esi >= edi)
        goto loc_1c9fcb;
    edi = memoryAGet32(ds, ebx + 40);
loc_1c9fcb: // 0160:1c9fcb
    if (esi < edi)
        goto loc_1c9fe2;
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1c9fe2;
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1c9fe2;
    edi = memoryAGet32(ds, edi + 8);
    goto loc_1c9fcb;
loc_1c9fe2: // 0160:1c9fe2
    edx = memoryAGet32(ds, edi + 4);
    ecx = memoryAGet32(ds, esi);
    etx = edx; edx = edi; edi = etx;
    eax = edi;
    eax += memoryAGet32(ds, edi);
    if (eax != esi)
        goto loc_1ca001;
    ecx += memoryAGet32(ds, edi);
    memoryASet32(ds, edi, ecx);
    if (esi != memoryAGet32(ds, ebx + 12))
        goto loc_1c9ffd;
    memoryASet32(ds, ebx + 12, edi);
loc_1c9ffd: // 0160:1c9ffd
    esi = edi;
    goto loc_1ca012;
loc_1ca001: // 0160:1ca001
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) + 1);
    memoryASet32(ds, esi + 8, edx);
    memoryASet32(ds, esi + 4, edi);
    memoryASet32(ds, edi + 8, esi);
    edi = edx;
    memoryASet32(ds, edi + 4, esi);
loc_1ca012: // 0160:1ca012
    memoryASet32(ds, ebx + 24, memoryAGet32(ds, ebx + 24) - 1);
    if (esi >= memoryAGet32(ds, ebx + 12))
        goto loc_1ca022;
    if (ecx <= memoryAGet32(ds, ebx + 16))
        goto loc_1ca022;
    memoryASet32(ds, ebx + 16, ecx);
loc_1ca022: // 0160:1ca022
    if (ecx <= memoryAGet32(ds, ebx + 20))
        goto loc_1ca02a;
    memoryASet32(ds, ebx + 20, ecx);
loc_1ca02a: // 0160:1ca02a
    ds = pop();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1ca02f() // 0160:1ca02f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1dfd10);
    if (eax != edx)
        goto loc_1ca044;
    edx = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, 0x1dfd10, edx);
loc_1ca044: // 0160:1ca044
    ebx = memoryAGet32(ds, 0x1dfd0c);
    if (eax != ebx)
        goto loc_1ca057;
    edx = memoryAGet32(ds, ebx + 8);
    memoryASet32(ds, 0x1dfd0c, edx);
loc_1ca057: // 0160:1ca057
    edx = memoryAGet32(ds, eax + 4);
    eax = memoryAGet32(ds, eax + 8);
    if (!edx)
        goto loc_1ca064;
    memoryASet32(ds, edx + 8, eax);
loc_1ca064: // 0160:1ca064
    if (!eax)
        goto loc_1ca06b;
    memoryASet32(ds, eax + 4, edx);
loc_1ca06b: // 0160:1ca06b
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ca06e() // 0160:1ca06e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x1dfd0c);
loc_1ca079: // 0160:1ca079
    if (!edx)
        goto loc_1ca35e;
    eax = memoryAGet32(ds, edx + 36);
    eax = memoryAGet32(ds, eax);
    ebx = memoryAGet32(ds, edx);
    eax += 0x0000002c;
    if (eax != ebx)
        goto loc_1ca0c7;
    ebx = edx + -8;
    eax = edx;
    ecx = memoryAGet32(ds, edx + 8);
    sub_1ca02f();
    edx = ecx;
    ecx = memoryAGet32(ds, ebx + 4);
    if (ecx)
        goto loc_1ca0b7;
    eax = memoryAGet32(ds, ebx);
    eax >>= 16;
    di = memoryAGet16(ds, ebx);
    esi = eax;
    ah = 0x05;
    al = 0x02;
    interrupt(0x31);
    goto loc_1ca079;
loc_1ca0b7: // 0160:1ca0b7
    eax = ecx;
    push(es);
    es = eax;
    ah = 0x49;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    es = pop();
    goto loc_1ca079;
loc_1ca0c7: // 0160:1ca0c7
    edx = memoryAGet32(ds, edx + 8);
    goto loc_1ca079;
    // gap 658 bytes
loc_1ca35e: // 0160:1ca35e
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ca1cf() // 0160:1ca1cf +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x1dfd0c);
    ebx = 0;
    goto loc_1ca1e5;
loc_1ca1dc: // 0160:1ca1dc
    if (edx < eax)
        goto loc_1ca1e9;
    ebx = eax;
    eax = memoryAGet32(ds, eax + 8);
loc_1ca1e5: // 0160:1ca1e5
    if (eax)
        goto loc_1ca1dc;
loc_1ca1e9: // 0160:1ca1e9
    memoryASet32(ds, edx + 4, ebx);
    memoryASet32(ds, edx + 8, eax);
    if (!ebx)
        goto loc_1ca1f8;
    memoryASet32(ds, ebx + 8, edx);
    goto loc_1ca1fe;
loc_1ca1f8: // 0160:1ca1f8
    memoryASet32(ds, 0x1dfd0c, edx);
loc_1ca1fe: // 0160:1ca1fe
    if (!eax)
        goto loc_1ca205;
    memoryASet32(ds, eax + 4, edx);
loc_1ca205: // 0160:1ca205
    ebx = edx + 32;
    eax = memoryAGet32(ds, edx);
    edx += 0x0000002c;
    memoryASet32(ds, edx + -12, 0x00000000);
    memoryASet32(ds, edx + -28, 0x00000000);
    memoryASet32(ds, edx + -20, 0x00000000);
    memoryASet32(ds, edx + -16, 0x00000000);
    memoryASet32(ds, edx + -8, ebx);
    memoryASet32(ds, edx + -4, ebx);
    eax -= 0x0000002c;
    memoryASet32(ds, edx + -32, ebx);
    memoryASet32(ds, edx, eax);
    memoryASet32(ds, edx + eax, 0xffffffff);
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ca243() // 0160:1ca243 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1dfd0c);
    if (!edx)
        goto loc_1ca28c;
    edx = memoryAGet32(ds, edx + 36);
    ebx = memoryAGet32(ds, edx);
    ebx += edx;
    ah = memoryAGet(ds, 0x1dfd4a);
    ebx += 0x00000004;
    if (ah < 0x02)
        goto loc_1ca27f;
    if (ah > 0x08)
        goto loc_1ca27f;
    if (memoryAGet(ds, 0x1dfd4c) != 0x00)
        goto loc_1ca27f;
    eax = 0;
    eax = ds;
    stop("disassembly failed at 160:1ca276 lsl eax, eax");
    eax++;
    memoryASet32(ds, 0x1dfd1c, eax);
loc_1ca27f: // 0160:1ca27f
    if (ebx != memoryAGet32(ds, 0x1dfd1c))
        goto loc_1ca28c;
    eax = memoryAGet32(ds, edx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ca28c: // 0160:1ca28c
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ca291() // 0160:1ca291 +long allocator
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(eax);
    sub_1ca06e();
    eax = memoryAGet32(ds, esp);
    eax >>= 16;
    ecx = memoryAGet32(ds, esp);
    ebx = eax;
    ah = 0x05;
    al = 0x01;
    interrupt(0x31);
    eax = -flags.carry;
    eax++;
    if (!eax)
        goto loc_1ca2c2;
    ax = bx;
    eax <<= 16;
    ax = cx;
    memoryASet16(ds, eax, di);
    memoryASet16(ds, eax + 2, si);
loc_1ca2c2: // 0160:1ca2c2
    if (!eax)
        goto loc_1ca2df;
    ebx = memoryAGet32(ds, esp);
    edx = eax + 8;
    ebx -= 0x00000008;
    memoryASet32(ds, edx, ebx);
    memoryASet32(ds, eax + 4, 0x00000000);
    eax = edx;
    goto loc_1ca35b;
loc_1ca2df: // 0160:1ca2df
    if (!(memoryAGet16(ds, 0x3f3f72) & 0xfff0))
        goto loc_1ca2f4;
    memoryASet32(ds, 0x3f3f70, 0x000fffff);
loc_1ca2f4: // 0160:1ca2f4
    if (memoryAGet32(ds, esp) > 0x00010000)
        goto loc_1ca359;
    ebx = memoryAGet32(ds, 0x3f3f70);
    ebx >>= 4;
    bl |= 0x01;
    ah = 0x48;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    if (stop("postCondition"))
        goto loc_1ca359;
    ebx = memoryAGet32(ds, esp);
    ebx >>= 4;
    ah = 0x48;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    ebx = eax;
    eax = edx;
    push(es);
    es = eax;
    ah = 0x49;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    es = pop();
    if (stop("postCondition"))
        goto loc_1ca359;
    ah = 0x00;
    al = 0x06;
    interrupt(0x31);
    eax = ecx;
    eax <<= 16;
    ax = dx;
    eax += 0x00000008;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, eax + -4, esi);
    edx -= 0x00000008;
    memoryASet32(ds, eax, edx);
    goto loc_1ca35b;
loc_1ca359: // 0160:1ca359
    eax = 0;
loc_1ca35b: // 0160:1ca35b
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1ca364() // 0160:1ca364 +long
{
    esp -= 4;
    goto loc_1ca364;
loc_1ca35b: // 0160:1ca35b
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1ca364: // 0160:1ca364
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(eax);
    if (memoryAGet32(ds, 0x1e0178) != 0x00000000)
        goto loc_1ca377;
loc_1ca373: // 0160:1ca373
    eax = 0;
    goto loc_1ca35b;
loc_1ca377: // 0160:1ca377
    if (memoryAGet32(ds, 0x1dfd1c) == 0xfffffffe)
        goto loc_1ca373;
    eax = esp;
    sub_1ca557();
    if (!eax)
        goto loc_1ca35b;
    if (memoryAGet(ds, 0x1dfd4a) != 0x01)
        goto loc_1ca3ab;
    eax = memoryAGet32(ds, esp);
    sub_1ca291();
    ebx = eax;
    edx = eax;
    if (!eax)
        goto loc_1ca3c6;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
    goto loc_1ca3c6;
loc_1ca3ab: // 0160:1ca3ab
    ebx = memoryAGet32(ds, esp);
    eax = 0x80004800;
    interrupt(0x21);
    ebx = -flags.carry;
    ebx = ~ebx;
    eax &= ebx;
    ecx = memoryAGet32(ds, esp);
    ecx -= 0x00000004;
    edx = eax;
    memoryASet32(ds, esp, ecx);
loc_1ca3c6: // 0160:1ca3c6
    if (!edx)
        goto loc_1ca373;
    eax = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp);
    eax -= 0x00000004;
    if (eax > esi)
        goto loc_1ca373;
    memoryASet32(ds, esp, eax);
    if (eax < 0x00000038)
        goto loc_1ca373;
    memoryASet32(ds, edx, eax);
    eax = edx;
    sub_1ca1cf();
    ebx = eax;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
    al |= 0x01;
    memoryASet32(ds, ebx, eax);
    edi = memoryAGet32(ds, edx + 24);
    memoryASet32(ds, edx + 20, 0xffffffff);
    edi++;
    eax = ebx + 4;
    memoryASet32(ds, edx + 24, edi);
    sub_1c8c94();
    eax = 0x00000001;
    goto loc_1ca35b;
}
void sub_1ca413() // 0160:1ca413 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    push32(eax);
    if (memoryAGet(ds, 0x1dfd4a) != 0x01)
        goto loc_1ca42b;
    assert(memoryAGet(ds, 0x1dfd4b) == 0);
    if (memoryAGet(ds, 0x1dfd4b) == 0x00)
        goto loc_1ca434;
loc_1ca42b: // 0160:1ca42b
    if (memoryAGet(ds, 0x1dfd4a) != 0x09)
        goto loc_1ca441;
loc_1ca434: // 0160:1ca434
    eax = memoryAGet32(ds, esp);
    sub_1ca364();
    goto loc_1ca54e;
loc_1ca441: // 0160:1ca441
    if (memoryAGet32(ds, 0x1e0178) != 0x00000000)
        goto loc_1ca451;
loc_1ca44a: // 0160:1ca44a
    eax = 0;
    goto loc_1ca54e;
loc_1ca451: // 0160:1ca451
    if (memoryAGet32(ds, 0x1dfd1c) == 0xfffffffe)
        goto loc_1ca44a;
    eax = esp;
    sub_1ca557();
    if (!eax)
        goto loc_1ca54e;
    bl = memoryAGet(ds, 0x1dfd4a);
    if (bl < 0x02)
        goto loc_1ca48f;
    if (bl > 0x08)
        goto loc_1ca48f;
    if (memoryAGet(ds, 0x1dfd4c) != 0x00)
        goto loc_1ca48f;
    eax = 0;
    eax = ds;
    stop("disassembly failed at 160:1ca486 lsl eax, eax");
    eax++;
    memoryASet32(ds, 0x1dfd1c, eax);
loc_1ca48f: // 0160:1ca48f
    edx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, 0x1dfd1c);
    edx += ecx;
    if (edx >= ecx)
        goto loc_1ca4a3;
    edx = 0xfffffffe;
loc_1ca4a3: // 0160:1ca4a3
    eax = edx;
    sub_1cf51b();
    if (eax == 0xffffffff)
        goto loc_1ca44a;
    ebx = eax;
    if (eax > 0xfffffff8)
        goto loc_1ca44a;
    if (edx <= eax)
        goto loc_1ca44a;
    edx -= eax;
    eax = edx + -4;
    memoryASet32(ds, esp, edx);
    if (eax > edx)
        goto loc_1ca44a;
    edx = memoryAGet32(ds, 0x1dfd0c);
    memoryASet32(ds, esp, eax);
    goto loc_1ca4e3;
loc_1ca4d1: // 0160:1ca4d1
    ebp = memoryAGet32(ds, edx + 8);
    if (!ebp)
        goto loc_1ca4e7;
    if (edx > ebx)
        goto loc_1ca4e0;
    if (ebx < ebp)
        goto loc_1ca4e7;
loc_1ca4e0: // 0160:1ca4e0
    edx = memoryAGet32(ds, edx + 8);
loc_1ca4e3: // 0160:1ca4e3
    if (edx)
        goto loc_1ca4d1;
loc_1ca4e7: // 0160:1ca4e7
    if (!edx)
        goto loc_1ca511;
    eax = memoryAGet32(ds, edx);
    ecx = ebx + -4;
    eax += edx;
    if (ecx != eax)
        goto loc_1ca511;
    esi = memoryAGet32(ds, esp);
    esi += 0x00000004;
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, edx, memoryAGet32(ds, edx) + esi);
    ebp = memoryAGet32(ds, esp);
    ecx = eax + ebp;
    ebx = eax;
    memoryASet32(ds, ecx, 0xffffffff);
    goto loc_1ca530;
loc_1ca511: // 0160:1ca511
    if (memoryAGet32(ds, esp) < 0x00000038)
        goto loc_1ca44a;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, ebx, eax);
    eax = ebx;
    edx = ebx;
    sub_1ca1cf();
    ebx = eax;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
loc_1ca530: // 0160:1ca530
    eax = memoryAGet32(ds, esp);
    al |= 0x01;
    memoryASet32(ds, ebx, eax);
    memoryASet32(ds, edx + 24, memoryAGet32(ds, edx + 24) + 1);
    eax = ebx + 4;
    memoryASet32(ds, edx + 20, 0xffffffff);
    sub_1c8c94();
    eax = 0x00000001;
loc_1ca54e: // 0160:1ca54e
    esp += 0x00000004;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1ca557() // 0160:1ca557 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    ebx = eax;
    edx = memoryAGet32(ds, eax);
    edx += 0x00000003;
    dl &= 0xfc;
    if (edx)
        goto loc_1ca56e;
loc_1ca568: // 0160:1ca568
    eax = 0;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ca56e: // 0160:1ca56e
    if (memoryAGet(ds, 0x1dfd4a) != 0x01)
        goto loc_1ca580;
    if (memoryAGet(ds, 0x1dfd4b) == 0x00)
        goto loc_1ca589;
loc_1ca580: // 0160:1ca580
    if (memoryAGet(ds, 0x1dfd4a) != 0x09)
        goto loc_1ca58e;
loc_1ca589: // 0160:1ca589
    edx += 0x00000008;
    goto loc_1ca595;
loc_1ca58e: // 0160:1ca58e
    sub_1ca243();
    edx -= eax;
loc_1ca595: // 0160:1ca595
    memoryASet32(ds, ebx, edx);
    edx += 0x0000003c;
    if (edx < memoryAGet32(ds, ebx))
        goto loc_1ca568;
    esi = memoryAGet32(ds, 0x1e017c);
    if (edx >= esi)
        goto loc_1ca5ad;
    edx = esi;
    dl &= 0xfe;
loc_1ca5ad: // 0160:1ca5ad
    memoryASet32(ds, ebx, edx);
    edx += 0x00000fff;
    if (edx < memoryAGet32(ds, ebx))
        goto loc_1ca568;
    dh &= 0xf0;
    dl = 0;
    memoryASet32(ds, ebx, edx);
    //stop("setne");
    eax &= 0x000000ff;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ca5ce() // 0160:1ca5ce +long
{
    esp -= 4;
    eax = 0;
    esp += 4;
}
void sub_1ca5d2() // 0160:1ca5d2 +long
{
    esp -= 4;
    push32(ebp);
    push(es);
    push32(ebx);
    push(ds);
    //assert(esp == 0x3f4ed8);
    push32(edx);
    sub_1ca60a();
    push(ds);
    push32(edi);
    ebp = esp;
    edi = memoryAGet32(ss, ebp + 8);
    ds = memoryAGet16(ss, ebp + 12); // 168:3f4ed8
    assert(ds == 0x168);
    memoryASet32(ds, edi, eax);
    memoryASet32(ds, edi + 4, ebx);
    memoryASet32(ds, edi + 8, ecx);
    memoryASet32(ds, edi + 12, edx);
    memoryASet32(ds, edi + 16, esi);
    memoryASet32(ds, edi + 20, pop32());
    eax = -flags.carry;
    memoryASet32(ds, edi + 24, eax);
    eax = pop32();
    ebx = pop32();
    ebx = pop32();
    ebx = pop32();
    memoryASet16(ds, ebx + 6, ax);
    memoryASet16(ds, ebx, es);
    es = pop();
    ebp = pop32();
    esp += 4;
}
void sub_1ca60a() // 0160:1ca60a +long +returnCarry
{
    esp -= 4;
    esi = esi + esi*2;
    eax = esi + 1877680;
    push32(eax);
    es = memoryAGet16(ds, ebx);
    bp = memoryAGet16(ds, ebx + 6);
    eax = memoryAGet32(ds, edi);
    ebx = memoryAGet32(ds, edi + 4);
    ecx = memoryAGet32(ds, edi + 8);
    edx = memoryAGet32(ds, edi + 12);
    esi = memoryAGet32(ds, edi + 16);
    edi = memoryAGet32(ds, edi + 20);
    ds = ebp;
    switch (memoryAGet16(cs, pop32()))
    {
        case 0x33cd: interrupt(0x33); break;
        case 0x10cd: interrupt(0x10); break;
        default:
            assert(0);
    }
//    assert(0); // code continues 160:1ca62f?? NO!
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1ca9b0() // 0160:1ca9b0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (bl & 0x03)
        goto loc_1ca9e5;
    edx = eax;
    ecx = 0x00000064;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    if (!edx)
        goto loc_1ca9d3;
loc_1ca9ca: // 0160:1ca9ca
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ca9d3: // 0160:1ca9d3
    ecx = 0x00000190;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    if (!edx)
        goto loc_1ca9ca;
loc_1ca9e5: // 0160:1ca9e5
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ca9eb() // 0160:1ca9eb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000024;
    ebx = eax;
    ecx = memoryAGet32(ds, eax + 32);
    if (ecx)
        goto loc_1caab8;
    eax = edx + 1900;
    sub_1ca9b0();
    if (!eax)
        goto loc_1caa22;
    eax = memoryAGet32(ds, ebx + 16);
    esi = memoryAGet32(ds, eax*2 + 0x1d23f6);
    eax = memoryAGet32(ds, eax*2 + 0x1d23f4);
    goto loc_1caa33;
loc_1caa22: // 0160:1caa22
    eax = memoryAGet32(ds, ebx + 16);
    esi = memoryAGet32(ds, eax*2 + 0x1d23dc);
    eax = memoryAGet32(ds, eax*2 + 0x1d23da);
loc_1caa33: // 0160:1caa33
    esi = sar32(esi, 0x10);
    eax = sar32(eax, 0x10);
    esi -= eax;
    edi = 0;
    ecx = 0x00000001;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, edi);
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp + 12, ecx);
    eax = memoryAGet32(ds, ebx + 16);
    memoryASet32(ds, esp + 16, eax);
    memoryASet32(ds, esp + 20, edx);
    eax = esp;
    memoryASet32(ds, esp + 32, edi);
    sub_1c8dce();
    ebp = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, ebx + 24);
    edx -= ebp;
    edx += 0x00000007;
    ecx = 0x00000007;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = memoryAGet32(ds, ebx + 12);
    if (eax != 0x00000005)
        goto loc_1caaa6;
    ecx = eax + -1;
    edi = ecx;
    edi <<= 3;
    eax = edx + 1;
    edi -= ecx;
    eax += edi;
    if ((int32_t)eax <= (int32_t)esi)
        goto loc_1caaa2;
    eax = memoryAGet32(ds, ebx + 12);
    eax -= 0x00000002;
    goto loc_1caaa7;
loc_1caaa2: // 0160:1caaa2
    eax = ecx;
    goto loc_1caaa7;
loc_1caaa6: // 0160:1caaa6
    eax--;
loc_1caaa7: // 0160:1caaa7
    ebx = memoryAGet32(ds, esp + 28);
    ebx += edx;
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax += ebx;
    goto loc_1caac7;
loc_1caab8: // 0160:1caab8
    if (ecx != 0x00000001)
        goto loc_1caac4;
    eax = memoryAGet32(ds, eax + 28);
    eax -= ecx;
    goto loc_1caac7;
loc_1caac4: // 0160:1caac4
    eax = memoryAGet32(ds, eax + 28);
loc_1caac7: // 0160:1caac7
    esp += 0x00000024;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1caad0() // 0160:1caad0 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = edx;
    edx = ebx;
    sub_1ca9eb();
    edi = eax;
    edx = ebx;
    eax = esi;
    ecx = 0;
    sub_1ca9eb();
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_1caaf2;
    ecx = 0x00000001;
loc_1caaf2: // 0160:1caaf2
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1caaf8() // 0160:1caaf8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ecx = eax;
    eax = memoryAGet32(ds, 0x1e006e);
    dl = memoryAGet(ds, eax);
    edi = 0;
    if (!dl)
        goto loc_1cad9c;
    eax = 0x001dffd8;
    edx = 0x001dfffc;
    ebx = memoryAGet32(ds, ecx + 20);
    sub_1caad0();
    memoryASet32(ds, esp + 16, eax);
    if (!eax)
        goto loc_1cab3a;
    ebx = 0x001dfffc;
    esi = 0x001dffd8;
    goto loc_1cab44;
loc_1cab3a: // 0160:1cab3a
    ebx = 0x001dffd8;
    esi = 0x001dfffc;
loc_1cab44: // 0160:1cab44
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    ebp = memoryAGet32(ds, ecx + 16);
    sub_1ca9b0();
    edx = eax;
    eax = ebp + ebp;
    if (!edx)
        goto loc_1cab6c;
    edx = memoryAGet32(ds, eax + 1909750);
    eax = memoryAGet32(ds, eax + 1909748);
    goto loc_1cab78;
loc_1cab6c: // 0160:1cab6c
    edx = memoryAGet32(ds, eax + 1909724);
    eax = memoryAGet32(ds, eax + 1909722);
loc_1cab78: // 0160:1cab78
    edx = sar32(edx, 0x10);
    eax = sar32(eax, 0x10);
    edx -= eax;
    memoryASet32(ds, esp + 12, edx);
    edx = 0;
    eax = memoryAGet32(ds, ebx + 32);
    memoryASet32(ds, esp + 20, edx);
    if (eax)
        goto loc_1cac48;
    eax = memoryAGet32(ds, ebx + 16);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1caba6;
    edi = 0x00000001;
    goto loc_1cac81;
loc_1caba6: // 0160:1caba6
    if (ebp != eax)
        goto loc_1cac81;
    edx = memoryAGet32(ds, ecx + 24);
    eax = memoryAGet32(ds, ebx + 24);
    edx += 0x00000007;
    edx -= eax;
    memoryASet32(ds, esp + 24, 0x00000007);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 24));
    eax = memoryAGet32(ds, ecx + 12);
    eax -= edx;
    edx = memoryAGet32(ds, ecx + 24);
    memoryASet32(ds, esp, eax);
    edx += 0x00000006;
    edx -= memoryAGet32(ds, ebx + 24);
    memoryASet32(ds, esp + 24, 0x00000007);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 24));
    eax = memoryAGet32(ds, ecx + 12);
    eax--;
    eax -= edx;
    edx = memoryAGet32(ds, ebx + 12);
    memoryASet32(ds, esp + 8, eax);
    if (edx != 0x00000005)
        goto loc_1cac21;
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp);
    eax -= 0x00000007;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1cac81;
    edx = memoryAGet32(ds, esp + 8);
    edi = 0x00000001;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1cac81;
    goto loc_1cac7d;
loc_1cac21: // 0160:1cac21
    eax = edx + -1;
    memoryASet32(ds, esp + 24, eax);
    edx = memoryAGet32(ds, esp + 24);
    eax <<= 3;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax++;
    if ((int32_t)eax > (int32_t)edx)
        goto loc_1cac81;
    edx = memoryAGet32(ds, esp + 8);
    edi = 0x00000001;
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_1cac81;
    goto loc_1cac7d;
loc_1cac48: // 0160:1cac48
    edx = memoryAGet32(ds, ebx + 28);
    if (eax != 0x00000001)
        goto loc_1cac6f;
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    sub_1ca9b0();
    if (!eax)
        goto loc_1cac6e;
    eax = memoryAGet32(ds, 0x1d23de);
    eax = sar32(eax, 0x10);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_1cac6e;
    edx++;
loc_1cac6e: // 0160:1cac6e
    edx--;
loc_1cac6f: // 0160:1cac6f
    eax = memoryAGet32(ds, ecx + 28);
    if ((int32_t)edx > (int32_t)eax)
        goto loc_1cac81;
    edi = 0x00000001;
    if (edx != eax)
        goto loc_1cac81;
loc_1cac7d: // 0160:1cac7d
    memoryASet32(ds, esp + 20, edi);
loc_1cac81: // 0160:1cac81
    if (memoryAGet32(ds, esp + 20) == 0x00000000)
        goto loc_1cac99;
    eax = ecx;
    edx = ebx;
    sub_1cadab();
    flags.zero = !(eax & eax);
    stop("disassembly failed at 160:1cac93 sete al");
    edi = al;
loc_1cac99: // 0160:1cac99
    if (edi)
        goto loc_1cacb0;
    esi = memoryAGet32(ds, esp + 16);
    if (!esi)
        goto loc_1cad9c;
    edi = esi;
    goto loc_1cad9c;
loc_1cacb0: // 0160:1cacb0
    eax = memoryAGet32(ds, esi + 32);
    ebx = 0;
    if (eax)
        goto loc_1cad46;
    eax = memoryAGet32(ds, esi + 16);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1caccb;
    edi = 0;
    goto loc_1cad7f;
loc_1caccb: // 0160:1caccb
    if (ebp != eax)
        goto loc_1cad7f;
    edx = memoryAGet32(ds, ecx + 24);
    ebp = memoryAGet32(ds, esi + 24);
    edx += 0x00000007;
    edx -= ebp;
    ebp = 0x00000007;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    eax = memoryAGet32(ds, ecx + 12);
    eax -= edx;
    edx = memoryAGet32(ds, ecx + 24);
    memoryASet32(ds, esp + 4, eax);
    edx += 0x00000006;
    eax = memoryAGet32(ds, esi + 24);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebp = memoryAGet32(ds, ecx + 12);
    ebp--;
    ebp -= edx;
    edx = memoryAGet32(ds, esi + 12);
    edi = 0;
    if (edx != 0x00000005)
        goto loc_1cad2f;
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 4);
    eax -= 0x00000007;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1cad29;
loc_1cad22: // 0160:1cad22
    edi = 0x00000001;
    goto loc_1cad7f;
loc_1cad29: // 0160:1cad29
    if ((int32_t)ebp > (int32_t)eax)
        goto loc_1cad7f;
    goto loc_1cad7a;
loc_1cad2f: // 0160:1cad2f
    edx--;
    eax = edx;
    eax <<= 3;
    eax -= edx;
    edx = memoryAGet32(ds, esp + 4);
    eax++;
    if ((int32_t)eax > (int32_t)edx)
        goto loc_1cad22;
    if ((int32_t)ebp >= (int32_t)eax)
        goto loc_1cad7f;
    goto loc_1cad7a;
loc_1cad46: // 0160:1cad46
    edx = memoryAGet32(ds, esi + 28);
    if (eax != 0x00000001)
        goto loc_1cad6d;
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    sub_1ca9b0();
    if (!eax)
        goto loc_1cad6c;
    eax = memoryAGet32(ds, 0x1d23de);
    eax = sar32(eax, 0x10);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_1cad6c;
    edx++;
loc_1cad6c: // 0160:1cad6c
    edx--;
loc_1cad6d: // 0160:1cad6d
    eax = memoryAGet32(ds, ecx + 28);
    if ((int32_t)edx > (int32_t)eax)
        goto loc_1cad7f;
    edi = 0;
    if (edx != eax)
        goto loc_1cad7f;
loc_1cad7a: // 0160:1cad7a
    ebx = 0x00000001;
loc_1cad7f: // 0160:1cad7f
    if (!ebx)
        goto loc_1cad8e;
    eax = ecx;
    edx = esi;
    sub_1cadab();
    edi = eax;
loc_1cad8e: // 0160:1cad8e
    ebx = memoryAGet32(ds, esp + 16);
    if (!ebx)
        goto loc_1cad9c;
    eax = ebx;
    eax -= edi;
    edi = eax;
loc_1cad9c: // 0160:1cad9c
    eax = edi;
    memoryASet32(ds, ecx + 32, edi);
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cadab() // 0160:1cadab +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(ebp);
    ecx = memoryAGet32(ds, eax + 8);
    esi = memoryAGet32(ds, edx + 8);
    ebx = 0;
    if ((int32_t)ecx < (int32_t)esi)
        goto loc_1cadcf;
    if (ecx != esi)
        goto loc_1cadd4;
    ecx = memoryAGet32(ds, eax + 4);
    ebp = memoryAGet32(ds, edx + 4);
    if ((int32_t)ecx < (int32_t)ebp)
        goto loc_1cadcf;
    if (ecx != ebp)
        goto loc_1cadd4;
    eax = memoryAGet32(ds, eax);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, edx))
        goto loc_1cadd4;
loc_1cadcf: // 0160:1cadcf
    ebx = 0x00000001;
loc_1cadd4: // 0160:1cadd4
    eax = ebx;
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1caddb() // 0160:1caddb +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    eax = ebx;
    if (edx >= 0x0000a8c0)
        goto loc_1cae08;
    if ((int32_t)(ebx & ebx) <= 0)
        goto loc_1cae08;
    esi = edx + 86400;
    esi -= ebx;
    edx = 0;
    ebx = 0x00015180;
    eax = esi;
    div32(ebx);
    edi += eax;
    edi--;
    goto loc_1cae17;
loc_1cae08: // 0160:1cae08
    ebx = 0x00015180;
    esi -= eax;
    edx = 0;
    eax = esi;
    div32(ebx);
    edi += eax;
loc_1cae17: // 0160:1cae17
    ebx = 0x00015180;
    eax = esi;
    edx = 0;
    div32(ebx);
    ebx = edx;
    esi = 0x00000e10;
    eax = ebx;
    edx = 0;
    div32(esi);
    edx = 0;
    memoryASet32(ds, ecx + 8, eax);
    eax = ebx;
    div32(esi);
    ebx = edx;
    esi = 0x0000003c;
    eax = ebx;
    edx = 0;
    div32(esi);
    edx = 0;
    memoryASet32(ds, ecx + 4, eax);
    eax = ebx;
    div32(esi);
    ebx = 0x0000016e;
    eax = edi;
    memoryASet32(ds, ecx, edx);
    edx = 0;
    div32(ebx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    eax += edx;
    ebx = eax;
    eax <<= 2;
    eax += ebx;
    ebx = edi;
    ebx -= eax;
    if (edx <= 0)
        goto loc_1cae7e;
    eax = edx + -1;
    eax >>= 2;
    ebx -= eax;
loc_1cae7e: // 0160:1cae7e
    eax = edx + 1900;
    sub_1ca9b0();
    eax += 0x0000016d;
loc_1cae8e: // 0160:1cae8e
    if (ebx < eax)
        goto loc_1cae97;
    edx++;
    ebx -= eax;
    goto loc_1cae8e;
loc_1cae97: // 0160:1cae97
    esi = 0x001d23dc;
    memoryASet32(ds, ecx + 28, ebx);
    eax = edx + 1900;
    memoryASet32(ds, ecx + 20, edx);
    sub_1ca9b0();
    if (!eax)
        goto loc_1caeb6;
    esi = 0x001d23f6;
loc_1caeb6: // 0160:1caeb6
    ebp = 0x0000001f;
    eax = ebx;
    edx = 0;
    div32(ebp);
    edx = eax;
    edx = memoryAGet32(ds, esi + edx*2);
    edx = sar32(edx, 0x10);
    if (ebx < edx)
        goto loc_1caece;
    eax++;
loc_1caece: // 0160:1caece
    memoryASet32(ds, ecx + 16, eax);
    eax = (int16_t)memoryAGet16(ds, esi+eax*2);
//    stop("disassembly failed at 160:1caed1 movsx eax, word ptr [esi + eax*2]");
    ebx -= eax;
    edx = 0;
    ebx++;
    eax = edi + 1;
    memoryASet32(ds, ecx + 12, ebx);
    ebx = 0x00000007;
    div32(ebx);
    eax = ecx;
    memoryASet32(ds, ecx + 24, edx);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1caf1a() // 0160:1caf1a +long
{
    esp -= 4;
    eax = 0x001d2364;
    sub_1c89b1();
    if (eax)
        goto loc_1cb15b;
    esp += 4;
    return;
    // gap 558 bytes
loc_1cb15b: // 0160:1cb15b
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    edx = 0;
    ebx = 0x001e0020;
    memoryASet32(ds, 0x1e0028, edx);
    edx = 0x001e002c;
    sub_1caf53();
    edx = eax;
    ah = memoryAGet(ds, eax);
    if (ah)
        goto loc_1cb188;
    memoryASet(ds, 0x1e004b, ah);
    goto loc_1cb1e3;
loc_1cb188: // 0160:1cb188
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x1e0020);
    memoryASet32(ds, 0x1e0028, ebx);
    eax -= 0x00000e10;
    ebx = esp;
    memoryASet32(ds, esp, eax);
    eax = edx;
    edx = 0x001e004b;
    sub_1caf53();
    ecx = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, 0x1e0020);
    ebx -= ecx;
    memoryASet32(ds, 0x1e0024, ebx);
    bl = memoryAGet(ds, eax);
    edx = eax;
    if (bl != 0x2c)
        goto loc_1cb1d3;
    edx = 0x001dffd8;
    eax++;
    sub_1cb069();
loc_1cb1d3: // 0160:1cb1d3
    if (memoryAGet(ds, eax) != 0x2c)
        goto loc_1cb1e3;
    edx = 0x001dfffc;
    eax++;
    sub_1cb069();
loc_1cb1e3: // 0160:1cb1e3
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1caf2d() // 0160:1caf2d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = edx;
    edx = 0;
loc_1caf33: // 0160:1caf33
    bl = memoryAGet(ds, eax);
    if (bl < 0x30)
        goto loc_1caf4e;
    if (bl > 0x39)
        goto loc_1caf4e;
    edx = edx * 0x0000000a;
    ebx = 0;
    bl = memoryAGet(ds, eax);
    edx += ebx;
    eax++;
    edx -= 0x00000030;
    goto loc_1caf33;
loc_1caf4e: // 0160:1caf4e
    memoryASet32(ds, ecx, edx);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1caf53() // 0160:1caf53 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebp = eax;
    memoryASet32(ds, esp + 16, edx);
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_1caf66;
    ebp++;
loc_1caf66: // 0160:1caf66
    esi = ebp;
loc_1caf68: // 0160:1caf68
    dl = memoryAGet(ss, ebp);
    if (!dl)
        goto loc_1caf8b;
    if (dl == 0x2c)
        goto loc_1caf8b;
    if (dl == 0x2d)
        goto loc_1caf8b;
    if (dl == 0x2b)
        goto loc_1caf8b;
    if (dl < 0x30)
        goto loc_1caf88;
    if (dl <= 0x39)
        goto loc_1caf8b;
loc_1caf88: // 0160:1caf88
    ebp++;
    goto loc_1caf68;
loc_1caf8b: // 0160:1caf8b
    eax = ebp;
    eax -= esi;
    memoryASet32(ds, esp + 12, eax);
    if ((int32_t)eax <= (int32_t)0x0000001e)
        goto loc_1cafa0;
    memoryASet32(ds, esp + 12, 0x0000001e);
loc_1cafa0: // 0160:1cafa0
    edi = memoryAGet32(ds, esp + 16);
    ecx = memoryAGet32(ds, esp + 12);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    ecx = memoryAGet32(ds, esp + 12);
    eax = edi + ecx;
    esi = 0;
    memoryASet(ds, eax, 0x00);
    eax = ebp + 1;
    if (dl != 0x2d)
        goto loc_1cafd9;
    esi = 0x00000001;
    goto loc_1cafde;
loc_1cafd9: // 0160:1cafd9
    if (dl != 0x2b)
        goto loc_1cafe0;
loc_1cafde: // 0160:1cafde
    ebp = eax;
loc_1cafe0: // 0160:1cafe0
    al = memoryAGet(ss, ebp);
    if (al < 0x30)
        goto loc_1cb05f;
    if (al > 0x39)
        goto loc_1cb05f;
    edx = esp + 8;
    edi = 0;
    eax = ebp;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, edi);
    memoryASet32(ds, esp + 8, edi);
    sub_1caf2d();
    edx = eax;
    cl = memoryAGet(ds, eax);
    ebp = eax;
    if (cl != 0x3a)
        goto loc_1cb030;
    edx = esp + 4;
    eax++;
    sub_1caf2d();
    edx = eax;
    ch = memoryAGet(ds, eax);
    ebp = eax;
    if (ch != cl)
        goto loc_1cb030;
    edx = esp;
    eax++;
    sub_1caf2d();
    ebp = eax;
loc_1cb030: // 0160:1cb030
    edx = memoryAGet32(ds, esp + 8);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    edx += eax;
    memoryASet32(ds, ebx, edx);
    if (!esi)
        goto loc_1cb05f;
    ecx = edx;
    ecx = -ecx;
    memoryASet32(ds, ebx, ecx);
loc_1cb05f: // 0160:1cb05f
    eax = ebp;
    esp += 0x00000014;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cb069() // 0160:1cb069 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esp -= 0x00000010;
    ebx = eax;
    ecx = edx;
    ah = memoryAGet(ds, eax);
    esi = 0xffffffff;
    if (ah != 0x4a)
        goto loc_1cb086;
    esi = 0x00000001;
    ebx += esi;
loc_1cb086: // 0160:1cb086
    if (memoryAGet(ds, ebx) != 0x4d)
        goto loc_1cb08e;
    ebx++;
    esi = 0;
loc_1cb08e: // 0160:1cb08e
    edx = esp + 12;
    eax = ebx;
    memoryASet32(ds, ecx + 32, esi);
    sub_1caf2d();
    edx = eax;
    ebx = eax;
    if (!esi)
        goto loc_1cb0ad;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 28, eax);
    goto loc_1cb0f2;
loc_1cb0ad: // 0160:1cb0ad
    eax = memoryAGet32(ds, esp + 12);
    eax--;
    memoryASet32(ds, ecx + 16, eax);
    if (memoryAGet(ds, edx) != 0x2e)
        goto loc_1cb0eb;
    eax = edx + 1;
    edx = esp + 12;
    sub_1caf2d();
    edx = eax;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 12, eax);
    if (memoryAGet(ds, edx) != 0x2e)
        goto loc_1cb0eb;
    eax = edx + 1;
    edx = esp + 12;
    sub_1caf2d();
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 24, eax);
loc_1cb0eb: // 0160:1cb0eb
    memoryASet32(ds, ecx + 28, 0x00000000);
loc_1cb0f2: // 0160:1cb0f2
    edx = 0x00000002;
    esi = 0;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, esp + 4, esi);
    if (memoryAGet(ds, ebx) != 0x2f)
        goto loc_1cb13f;
    edx = esp + 8;
    eax = ebx + 1;
    sub_1caf2d();
    edx = eax;
    ebx = eax;
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_1cb13f;
    eax = edx + 1;
    edx = esp + 4;
    sub_1caf2d();
    edx = eax;
    ebx = eax;
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_1cb13f;
    eax = edx + 1;
    edx = esp;
    sub_1caf2d();
    ebx = eax;
loc_1cb13f: // 0160:1cb13f
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, ecx, eax);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, ecx + 4, eax);
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, ecx + 8, eax);
    eax = ebx;
    esp += 0x00000010;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cb1ea() // 0160:1cb1ea +long
{
    esp -= 4;
    eax = esp;
    eax -= memoryAGet32(ds, 0x1dfd2c);
    esp += 4;
}
void sub_1cb1f3() // 0160:1cb1f3 +long
{
    esp -= 4;
    memoryASet32(ds, 0x1e017c, 0x00008000);
    esp += 4;
}
void sub_1ce56a() // 0160:1ce56a +long +returnZero
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    push32(edx);
    ebp = eax;
    ax = 0x1600;
    interrupt(0x2f);
    if (!al)
        goto loc_1ce5d0;
    if (al == 0x80)
        goto loc_1ce5d0;
    al = 0;
    edx = 0;
    ecx = 0;
    ebx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    if (ax != 0x0666)
        goto loc_1ce5d0;
    al = 0x22;
    edx = 0;
    ecx = 0;
    ebx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    if (ax)
        goto loc_1ce5d0;
    dh = 0x01;
    al = 0x1e;
    ecx = 0;
    ebx = 0;
    memoryASet(ds, 0x1e00f9, dh);
    edx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    eax = cs;
    ebx = 0x003f3ee8;
    edx = eax;
    ecx = ebx;
    al = 0x20;
    ecx >>= 16;
    ah = 0xfa;
    interrupt(0x2f);
    al = 0x01;
    goto loc_1ce62a;
loc_1ce5d0: // 0160:1ce5d0
    edx = memoryAGet32(ds, esp);
    if (ebp)
        goto loc_1ce5dc;
    if (!dx)
        goto loc_1ce628;
loc_1ce5dc: // 0160:1ce5dc
    esi = 0x001d238c;
    eax = 0x00000a00;
    push(es);
    interrupt(0x31);
    eax = -flags.carry;
    es = pop();
    if (eax)
        goto loc_1ce628;
    eax = 0x00000007;
    ebx = 0x001cb72c;
    ecx = cs;
    sub_1c7fdb();
    es = memoryAGet16(ds, esp);
    ah = memoryAGet(es, ebp + 64);
    memoryASet(es, ebp + 62, 0x01);
    ah |= 0x04;
    memoryASet(es, ebp + 64, ah);
    eax = cr0;
    al |= 0x04;
    dl = 0x01;
    cr0 = eax;
    ah = 0x30;
    interrupt(0x21);
    memoryASet(ds, 0x1e00f8, dl);
loc_1ce628: // 0160:1ce628
    al = 0;
loc_1ce62a: // 0160:1ce62a
    esp += 0x00000004;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    flags.zero = !esp;
    esp += 4;
}
void sub_1ce68e() // 0160:1ce68e +long
{
    esp -= 4;
    push(ax);
    stop("disassembly failed at 160:1ce691 fninit ");
    fld1();
    stop("disassembly failed at 160:1ce695 fldz ");
    stop("disassembly failed at 160:1ce697 fdivp st(1)");
    //fld80(st(0));
    stop("disassembly failed at 160:1ce69b fchs ");
    stop("disassembly failed at 160:1ce69d fcompp ");
    ax = fnstsw();
    al = 0x02;
    sahf();
    if (flags.zero)
        goto loc_1ce6a8;
    al = 0x03;
loc_1ce6a8: // 0160:1ce6a8
    stop("disassembly failed at 160:1ce6a9 fninit ");
    fldcw(memoryAGet16(ds, esp));
    tx = memoryAGet16(ds, esp); memoryASet16(ds, esp, ax); ax = tx;
    ax = pop();
    esp += 4;
}
void sub_1ce6b5() // 0160:1ce6b5 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x0000004c;
    esi = ebx;
    memoryASet32(ds, esp + 68, ecx);
    bl = 0;
    memoryASet32(ds, esp + 40, eax);
    memoryASet(ds, esp + 72, bl);
    memoryASet(ds, esp + 60, bl);
    ebx = 0;
    edi = edx;
    memoryASet32(ds, esp + 56, ebx);
    ebp = 0x00000004;
    goto loc_1ce738;
loc_1ce6df: // 0160:1ce6df
    ebx = esp + 40;
    edx = esi;
    sub_1ce936();
    edi = eax;
    al = memoryAGet(ds, eax);
    edi++;
    memoryASet(ds, esp + 61, al);
    if (!al)
        goto loc_1ce92a;
    if (al != 0x6e)
        goto loc_1ce7da;
    bl = memoryAGet(ds, esp + 60);
    if (!(bl & 0x20))
        goto loc_1ce765;
    if (!(bl & 0x80))
        goto loc_1ce724;
    ecx = memoryAGet32(ds, esi);
    ecx += 0x00000008;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet16(ds, ecx + -8); es = memoryAGet32(ds, ecx + -8 + 2);
loc_1ce71b: // 0160:1ce71b
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(es, edx, eax);
    goto loc_1ce738;
loc_1ce724: // 0160:1ce724
    if (!(bl & 0x40))
        goto loc_1ce75a;
    ebx = memoryAGet32(ds, esi);
    ebx += ebp;
    memoryASet32(ds, esi, ebx);
    edx = memoryAGet32(ds, ebx + -4);
loc_1ce732: // 0160:1ce732
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, edx, eax);
loc_1ce738: // 0160:1ce738
    cl = memoryAGet(ds, edi);
    if (!cl)
        goto loc_1ce92a;
    eax = edi + 1;
    if (cl == 0x25)
        goto loc_1ce6df;
    edi = eax;
    edx = 0;
    eax = esp + 40;
    dl = cl;
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x1c9307: sub_1c9307(); break;
        default:
            stop("ind 0160:1ce754");
    }
    goto loc_1ce738;
loc_1ce75a: // 0160:1ce75a
    edx = memoryAGet32(ds, esi);
    edx += ebp;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    goto loc_1ce732;
loc_1ce765: // 0160:1ce765
    if (!(bl & 0x10))
        goto loc_1ce7a5;
    if (!(bl & 0x80))
        goto loc_1ce783;
    eax = memoryAGet32(ds, esi);
    eax += 0x00000008;
    memoryASet32(ds, esi, eax);
    edx = memoryAGet16(ds, eax + -8); es = memoryAGet32(ds, eax + -8 + 2);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet16(es, edx, ax);
    goto loc_1ce738;
loc_1ce783: // 0160:1ce783
    if (!(bl & 0x40))
        goto loc_1ce79a;
    ecx = memoryAGet32(ds, esi);
    ecx += ebp;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet32(ds, ecx + -4);
loc_1ce791: // 0160:1ce791
    eax = memoryAGet32(ds, esp + 56);
    memoryASet16(ds, edx, ax);
    goto loc_1ce738;
loc_1ce79a: // 0160:1ce79a
    ebx = memoryAGet32(ds, esi);
    ebx += ebp;
    memoryASet32(ds, esi, ebx);
    edx = memoryAGet32(ds, ebx + -4);
    goto loc_1ce791;
loc_1ce7a5: // 0160:1ce7a5
    if (!(bl & 0x80))
        goto loc_1ce7b9;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000008;
    memoryASet32(ds, esi, edx);
    {int tmp1 = memoryAGet16(ds, edx + -8); int tmp2 = memoryAGet32(ds, edx + -8 + 2); edx = tmp1; es = tmp2; /*ggg2!!check*/};
    goto loc_1ce71b;
loc_1ce7b9: // 0160:1ce7b9
    if (!(bl & 0x40))
        goto loc_1ce7cc;
    eax = memoryAGet32(ds, esi);
    eax += ebp;
    memoryASet32(ds, esi, eax);
    edx = memoryAGet32(ds, eax + -4);
    goto loc_1ce732;
loc_1ce7cc: // 0160:1ce7cc
    ecx = memoryAGet32(ds, esi);
    ecx += ebp;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet32(ds, ecx + -4);
    goto loc_1ce732;
loc_1ce7da: // 0160:1ce7da
    eax = esp;
    ebx = esp + 40;
    ecx = esp + 72;
    edx = esi;
    sub_1cec4e();
    es = edx;
    dl = memoryAGet(ds, esp + 60);
    ebx = eax;
    if (dl & 0x08)
        goto loc_1ce81c;
    if (memoryAGet(ds, esp + 62) != 0x20)
        goto loc_1ce81c;
loc_1ce7ff: // 0160:1ce7ff
    eax = memoryAGet32(ds, esp + 44);
    eax--;
    memoryASet32(ds, esp + 44, eax);
    if (stop("postCondition"))
        goto loc_1ce81c;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(ds, esp + 62);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ce816;
    goto loc_1ce7ff;
loc_1ce81c: // 0160:1ce81c
    ecx = esp + 63;
loc_1ce820: // 0160:1ce820
    al = memoryAGet(ds, ecx);
    if (!al)
        goto loc_1ce835;
    edx = 0;
    dl = al;
    eax = esp + 40;
    ecx++;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ce82f;
    goto loc_1ce820;
loc_1ce835: // 0160:1ce835
    eax = memoryAGet32(ds, esp + 52);
    ecx = eax + -1;
    memoryASet32(ds, esp + 52, ecx);
    if (!eax)
        goto loc_1ce853;
    eax = esp + 40;
    edx = 0x00000030;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ce84d;
    goto loc_1ce835;
loc_1ce853: // 0160:1ce853
    if (memoryAGet(ds, esp + 60) & 0x08)
        goto loc_1ce87e;
    if (memoryAGet(ds, esp + 62) == 0x20)
        goto loc_1ce87e;
loc_1ce861: // 0160:1ce861
    eax = memoryAGet32(ds, esp + 44);
    eax--;
    memoryASet32(ds, esp + 44, eax);
    if (stop("postCondition"))
        goto loc_1ce87e;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(ds, esp + 62);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ce878;
    goto loc_1ce861;
loc_1ce87e: // 0160:1ce87e
    dh = memoryAGet(ds, esp + 61);
    if (dh == 0x73)
        goto loc_1ce88c;
    if (dh != 0x53)
        goto loc_1ce8d3;
loc_1ce88c: // 0160:1ce88c
    if (!(memoryAGet(ds, esp + 60) & 0x20))
        goto loc_1ce8b4;
loc_1ce893: // 0160:1ce893
    eax = memoryAGet32(ds, esp + 48);
    ecx = eax + -1;
    memoryASet32(ds, esp + 48, ecx);
    if (!eax)
        goto loc_1ce8f2;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ce8ab;
    ebx += 0x00000002;
    goto loc_1ce893;
loc_1ce8b4: // 0160:1ce8b4
    eax = memoryAGet32(ds, esp + 48);
    edx = eax + -1;
    memoryASet32(ds, esp + 48, edx);
    if (!eax)
        goto loc_1ce8f2;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ce8cc;
    ebx++;
    goto loc_1ce8b4;
loc_1ce8d3: // 0160:1ce8d3
    eax = memoryAGet32(ds, esp + 48);
    ecx = eax + -1;
    memoryASet32(ds, esp + 48, ecx);
    if (!eax)
        goto loc_1ce8f2;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ce8eb;
    ebx++;
    goto loc_1ce8d3;
loc_1ce8f2: // 0160:1ce8f2
    if (!(memoryAGet(ds, esp + 60) & 0x08))
        goto loc_1ce738;
    if ((int32_t)memoryAGet32(ds, esp + 44) <= (int32_t)0x00000000)
        goto loc_1ce738;
loc_1ce908: // 0160:1ce908
    eax = memoryAGet32(ds, esp + 44);
    edx = eax + -1;
    memoryASet32(ds, esp + 44, edx);
    if (!eax)
        goto loc_1ce738;
    eax = esp + 40;
    edx = 0x00000020;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ce924;
    goto loc_1ce908;
loc_1ce92a: // 0160:1ce92a
    eax = memoryAGet32(ds, esp + 56);
    esp += 0x0000004c;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1ce936() // 0160:1ce936 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = edx;
    memoryASet(ds, ebx + 23, 0x00);
    edx = ebx;
    memoryASet(ds, ebx + 22, 0x20);
    sub_1cea69();
    memoryASet32(ds, ebx + 4, 0x00000000);
    cl = memoryAGet(ds, eax);
    edx = eax;
    if (cl < 0x30)
        goto loc_1ce97e;
    if (cl > 0x39)
        goto loc_1ce97e;
loc_1ce95f: // 0160:1ce95f
    ecx = memoryAGet32(ds, ebx + 4) * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    edx -= 0x00000030;
    ecx += edx;
    eax++;
    memoryASet32(ds, ebx + 4, ecx);
    cl = memoryAGet(ds, eax);
    if (cl < 0x30)
        goto loc_1ce9a5;
    if (cl <= 0x39)
        goto loc_1ce95f;
    goto loc_1ce9a5;
loc_1ce97e: // 0160:1ce97e
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_1ce9a5;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000004;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    memoryASet32(ds, ebx + 4, edx);
    if (stop("postCondition"))
        goto loc_1ce9a4;
    edi = edx;
    dh = memoryAGet(ds, ebx + 20);
    edi = -edi;
    dh |= 0x08;
    memoryASet32(ds, ebx + 4, edi);
    memoryASet(ds, ebx + 20, dh);
loc_1ce9a4: // 0160:1ce9a4
    eax++;
loc_1ce9a5: // 0160:1ce9a5
    memoryASet32(ds, ebx + 8, 0xffffffff);
    if (memoryAGet(ds, eax) != 0x2e)
        goto loc_1ce9f8;
    eax++;
    memoryASet32(ds, ebx + 8, 0x00000000);
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_1ce9d9;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000004;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    memoryASet32(ds, ebx + 8, edx);
    if (stop("postCondition"))
        goto loc_1ce9d6;
    memoryASet32(ds, ebx + 8, 0xffffffff);
loc_1ce9d6: // 0160:1ce9d6
    eax++;
    goto loc_1ce9f8;
loc_1ce9d9: // 0160:1ce9d9
    cl = memoryAGet(ds, eax);
    if (cl < 0x30)
        goto loc_1ce9f8;
    if (cl > 0x39)
        goto loc_1ce9f8;
    ecx = memoryAGet32(ds, ebx + 8) * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    edx -= 0x00000030;
    ecx += edx;
    eax++;
    memoryASet32(ds, ebx + 8, ecx);
    goto loc_1ce9d9;
loc_1ce9f8: // 0160:1ce9f8
    cl = memoryAGet(ds, eax);
    edx = eax + 1;
    if (cl < 0x4e)
        goto loc_1cea1d;
    if (cl <= 0x4e)
        goto loc_1cea5a;
    if (cl < 0x6c)
        goto loc_1cea14;
    if (cl <= 0x6c)
        goto loc_1cea2d;
    if (cl == 0x77)
        goto loc_1cea2d;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cea14: // 0160:1cea14
    if (cl == 0x68)
        goto loc_1cea3b;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cea1d: // 0160:1cea1d
    if (cl < 0x46)
        goto loc_1cea65;
    if (cl <= 0x46)
        goto loc_1cea54;
    if (cl == 0x4c)
        goto loc_1cea4a;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cea2d: // 0160:1cea2d
    dl = memoryAGet(ds, ebx + 20);
    dl |= 0x20;
    eax++;
    memoryASet(ds, ebx + 20, dl);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cea3b: // 0160:1cea3b
    cl = memoryAGet(ds, ebx + 20);
    cl |= 0x10;
    eax = edx;
    memoryASet(ds, ebx + 20, cl);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cea4a: // 0160:1cea4a
    memoryASet(ds, ebx + 20, memoryAGet(ds, ebx + 20) | 0x40);
loc_1cea4e: // 0160:1cea4e
    eax = edx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cea54: // 0160:1cea54
    memoryASet(ds, ebx + 20, memoryAGet(ds, ebx + 20) | 0x80);
    goto loc_1cea4e;
loc_1cea5a: // 0160:1cea5a
    ch = memoryAGet(ds, ebx + 20);
    ch |= 0x40;
    eax = edx;
    memoryASet(ds, ebx + 20, ch);
loc_1cea65: // 0160:1cea65
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cea69() // 0160:1cea69 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    memoryASet(ds, edx + 20, 0x00);
loc_1cea6f: // 0160:1cea6f
    bl = memoryAGet(ds, eax);
    if (bl != 0x2d)
        goto loc_1cea7c;
    memoryASet(ds, edx + 20, memoryAGet(ds, edx + 20) | 0x08);
    goto loc_1ceabe;
loc_1cea7c: // 0160:1cea7c
    if (bl != 0x23)
        goto loc_1cea87;
    memoryASet(ds, edx + 20, memoryAGet(ds, edx + 20) | 0x01);
    goto loc_1ceabe;
loc_1cea87: // 0160:1cea87
    if (bl != 0x2b)
        goto loc_1cea9f;
    ch = memoryAGet(ds, edx + 20);
    ch |= 0x04;
    bl = ch;
    memoryASet(ds, edx + 20, ch);
    bl &= 0xfd;
    memoryASet(ds, edx + 20, bl);
    goto loc_1ceabe;
loc_1cea9f: // 0160:1cea9f
    if (bl != 0x20)
        goto loc_1ceab6;
    bh = memoryAGet(ds, edx + 20);
    if (bh & 0x04)
        goto loc_1ceabe;
    cl = bh;
    cl |= 0x02;
    memoryASet(ds, edx + 20, cl);
    goto loc_1ceabe;
loc_1ceab6: // 0160:1ceab6
    if (bl != 0x30)
        goto loc_1ceac1;
    memoryASet(ds, edx + 22, bl);
loc_1ceabe: // 0160:1ceabe
    eax++;
    goto loc_1cea6f;
loc_1ceac1: // 0160:1ceac1
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ceac4() // 0160:1ceac4 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    esi = edx;
    edi = ebx;
    edx = eax;
    eax = 0;
loc_1cead0: // 0160:1cead0
    es = esi;
    ebx = edx;
    cl = memoryAGet(es, ebx);
    edx++;
    if (!cl)
        goto loc_1ceae3;
    if (eax == edi)
        goto loc_1ceae3;
    eax++;
    goto loc_1cead0;
loc_1ceae3: // 0160:1ceae3
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ceae8() // 0160:1ceae8 +long
{
    esp -= 4;
    goto loc_1ceae8;
loc_1ceae3: // 0160:1ceae3
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1ceae8: // 0160:1ceae8
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    ecx = edx;
    esi = ebx;
    edx = eax;
    eax = 0;
loc_1ceaf4: // 0160:1ceaf4
    es = ecx;
    ebx = edx;
    di = memoryAGet16(es, ebx);
    edx += 0x00000002;
    if (!di)
        goto loc_1ceae3;
    if (eax == esi)
        goto loc_1ceae3;
    eax++;
    goto loc_1ceaf4;
}
void sub_1ceb0b() // 0160:1ceb0b +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = edx;
    memoryASet32(ds, esp, ebx);
    ebx = 0x00000010;
    edi = ebp;
    sub_1cfbdb();
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    eax = memoryAGet32(ds, esp);
    esi = ecx;
    edi = ebp;
    eax--;
    edx = ecx + ebp;
    ebx = eax + ebp;
    goto loc_1ceb4b;
loc_1ceb43: // 0160:1ceb43
    edx--;
    esi--;
    cl = memoryAGet(ds, edx);
    eax--;
    memoryASet(ds, ebx, cl);
    ebx--;
loc_1ceb4b: // 0160:1ceb4b
    if (edx != edi)
        goto loc_1ceb43;
    edx = eax + ebp;
loc_1ceb52: // 0160:1ceb52
    if (stop("postCondition"))
        goto loc_1ceb5d;
    eax--;
    memoryASet(ds, edx, 0x30);
    edx--;
    goto loc_1ceb52;
loc_1ceb5d: // 0160:1ceb5d
    ebp += memoryAGet32(ds, esp);
    memoryASet(ss, ebp, 0x00);
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ceb6c() // 0160:1ceb6c +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    ecx = eax;
    esi = ebx;
    memoryASet32(ds, esp, edx);
    if (stop("postCondition"))
        goto loc_1ceb88;
    edx = -edx;
    ecx = eax + 1;
    memoryASet(ds, eax, 0x2d);
    memoryASet32(ds, esp, edx);
loc_1ceb88: // 0160:1ceb88
    if (memoryAGet32(ds, esi + 8) != 0xffffffff)
        goto loc_1ceb95;
    memoryASet32(ds, esi + 8, 0x00000004);
loc_1ceb95: // 0160:1ceb95
    ebx = 0x0000000a;
    eax = 0;
    edx = ecx;
    ax = memoryAGet16(ds, esp + 2);
    sub_1cfbdb();
    ebx = ecx;
loc_1cebaa: // 0160:1cebaa
    ah = memoryAGet(ds, ecx);
    edx = ecx + 1;
    if (!ah)
        goto loc_1cebb7;
    ecx = edx;
    goto loc_1cebaa;
loc_1cebb7: // 0160:1cebb7
    if (memoryAGet32(ds, esi + 8) == 0x00000000)
        goto loc_1cebe9;
    memoryASet(ds, ecx, 0x2e);
    eax = 0;
    ecx = edx;
    goto loc_1cebe1;
loc_1cebc6: // 0160:1cebc6
    edx = 0;
    memoryASet16(ds, esp + 2, dx);
    edi = memoryAGet32(ds, esp);
    edx = edi * 0x0000000a;
    memoryASet32(ds, esp, edx);
    dl = memoryAGet(ds, esp + 2);
    dl += 0x30;
    eax++;
    memoryASet(ds, ecx, dl);
    ecx++;
loc_1cebe1: // 0160:1cebe1
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esi + 8))
        goto loc_1cebc6;
    memoryASet(ds, ecx, 0x00);
loc_1cebe9: // 0160:1cebe9
    if (!(memoryAGet(ds, esp + 1) & 0x80))
        goto loc_1cec40;
loc_1cebf0: // 0160:1cebf0
    if (ecx != ebx)
        goto loc_1cec26;
    ecx = ebx + 1;
    memoryASet(ds, ebx, 0x31);
loc_1cebfa: // 0160:1cebfa
    dl = memoryAGet(ds, ecx);
    eax = ecx + 1;
    if (dl != 0x30)
        goto loc_1cec08;
    ecx = eax;
    goto loc_1cebfa;
loc_1cec08: // 0160:1cec08
    if (dl != 0x2e)
        goto loc_1cec1d;
    memoryASet(ds, ecx, 0x30);
    ecx = eax + 1;
    memoryASet(ds, eax, dl);
loc_1cec15: // 0160:1cec15
    if (memoryAGet(ds, ecx) != 0x30)
        goto loc_1cec1d;
    ecx++;
    goto loc_1cec15;
loc_1cec1d: // 0160:1cec1d
    memoryASet(ds, ecx, 0x30);
    ecx++;
    memoryASet(ds, ecx, 0x00);
    goto loc_1cec40;
loc_1cec26: // 0160:1cec26
    ecx--;
    if (memoryAGet(ds, ecx) != 0x2e)
        goto loc_1cec2d;
    ecx--;
loc_1cec2d: // 0160:1cec2d
    al = memoryAGet(ds, ecx);
    if (al == 0x39)
        goto loc_1cec3b;
    ah = al;
    ah++;
    memoryASet(ds, ecx, ah);
    goto loc_1cec40;
loc_1cec3b: // 0160:1cec3b
    memoryASet(ds, ecx, 0x30);
    goto loc_1cebf0;
loc_1cec40: // 0160:1cec40
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cec47() // 0160:1cec47 +long
{
    esp -= 4;
    indirectCall(cs, memoryAGet32(ds, 0x1e0074)); // 0160:1cec47;
    esp += 4;
}
void sub_1cec4e() // 0160:1cec4e +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    ebx = 0x00000001;
    eax = ds;
    ecx = edi;
    memoryASet32(ds, esp + 4, ebx);
    es = eax;
    al = memoryAGet(ds, esi + 21);
    memoryASet32(ds, esi + 12, 0x00000000);
    if (al < 0x69)
        goto loc_1cec8f;
    if (al <= 0x69)
        goto loc_1ceccf;
    if (al < 0x75)
        goto loc_1cec8b;
    if (al <= 0x75)
        goto loc_1cec9b;
    flags.zero = al == 0x78;
loc_1cec87: // 0160:1cec87
    if (flags.zero)
        goto loc_1cec9b;
    goto loc_1cecd9;
loc_1cec8b: // 0160:1cec8b
    flags.zero = al == 0x6f;
    goto loc_1cec87;
loc_1cec8f: // 0160:1cec8f
    if (al < 0x58)
        goto loc_1cecd9;
    if (al <= 0x58)
        goto loc_1cec9b;
    if (al == 0x64)
        goto loc_1ceccf;
    goto loc_1cecd9;
loc_1cec9b: // 0160:1cec9b
    ah = memoryAGet(ds, esi + 20);
    if (!(ah & 0x20))
        goto loc_1cecaf;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    ebp = memoryAGet32(ds, ebx + -4);
    goto loc_1ceccb;
loc_1cecaf: // 0160:1cecaf
    if (!(ah & 0x10))
        goto loc_1cecc1;
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ebp = memoryAGet16(ds, eax + -4);
    goto loc_1ceccb;
loc_1cecc1: // 0160:1cecc1
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    ebp = memoryAGet32(ss, ebp + -4);
loc_1ceccb: // 0160:1ceccb
    memoryASet(ds, esi + 20, memoryAGet(ds, esi + 20) & 0xf9);
loc_1ceccf: // 0160:1ceccf
    if (memoryAGet32(ds, esi + 8) == 0xffffffff)
        goto loc_1cecd9;
    memoryASet(ds, esi + 22, 0x20);
loc_1cecd9: // 0160:1cecd9
    al = memoryAGet(ds, esi + 21);
    ebx = 0x0000000a;
    if (al < 0x65)
        goto loc_1ced3e;
    if (al <= 0x65)
        goto loc_1cedaf;
    if (al < 0x6f)
        goto loc_1ced27;
    if (al <= 0x6f)
        goto loc_1cedc3;
    if (al < 0x73)
        goto loc_1ced1a;
    if (al <= 0x73)
        goto loc_1cee3e;
    if (al < 0x75)
        goto loc_1cefd2;
    if (al <= 0x75)
        goto loc_1cef07;
    if (al == 0x78)
        goto loc_1ceeea;
    goto loc_1cefd2;
loc_1ced1a: // 0160:1ced1a
    if (al == 0x70)
        goto loc_1cef26;
    goto loc_1cefd2;
loc_1ced27: // 0160:1ced27
    if (al < 0x67)
        goto loc_1ced85;
    if (al <= 0x67)
        goto loc_1cedaf;
    if (al == 0x69)
        goto loc_1cedfe;
    goto loc_1cefd2;
loc_1ced3e: // 0160:1ced3e
    if (al < 0x50)
        goto loc_1ced72;
    if (al <= 0x50)
        goto loc_1cef26;
    if (al < 0x58)
        goto loc_1ced65;
    if (al <= 0x58)
        goto loc_1ceeea;
    if (al < 0x63)
        goto loc_1cefd2;
    if (al <= 0x63)
        goto loc_1cefa5;
    goto loc_1cedfe;
loc_1ced65: // 0160:1ced65
    if (al == 0x53)
        goto loc_1cee3e;
    goto loc_1cefd2;
loc_1ced72: // 0160:1ced72
    if (al < 0x46)
        goto loc_1ced81;
    if (al <= 0x46)
        goto loc_1ced85;
    flags.zero = al == 0x47;
loc_1ced7a: // 0160:1ced7a
    if (flags.zero)
        goto loc_1cedaf;
    goto loc_1cefd2;
loc_1ced81: // 0160:1ced81
    flags.zero = al == 0x45;
    goto loc_1ced7a;
loc_1ced85: // 0160:1ced85
    if (!(memoryAGet(ds, esi + 20) & 0x10))
        goto loc_1cedaf;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    eax = edi;
    edx = memoryAGet32(ds, ebx + -4);
    ebx = esi;
    sub_1ceb6c();
    ebx = 0xffffffff;
    eax = ds;
    edx = ds;
    es = eax;
    eax = edi;
    ecx = edi;
    goto loc_1cedf4;
loc_1cedaf: // 0160:1cedaf
    eax = edi;
    ebx = esi;
    sub_1cec47();
    ebx = 0xffffffff;
    es = edx;
    ecx = eax;
    goto loc_1cedf4;
loc_1cedc3: // 0160:1cedc3
    al = memoryAGet(ds, esi + 20);
    ebx = 0x00000008;
    if (!(al & 0x01))
        goto loc_1cedd3;
    memoryASet(ds, edi, 0x30);
    edi++;
loc_1cedd3: // 0160:1cedd3
    eax = ebp;
    edx = edi;
    sub_1cfc64();
loc_1ceddc: // 0160:1ceddc
    if (memoryAGet32(ds, esi + 8) != 0x00000000)
        goto loc_1cedeb;
    if (memoryAGet(ds, edi) != 0x30)
        goto loc_1cedeb;
    memoryASet(es, ecx, 0x00);
loc_1cedeb: // 0160:1cedeb
    ebx = 0xffffffff;
    edx = es;
    eax = ecx;
loc_1cedf4: // 0160:1cedf4
    sub_1ceac4();
    goto loc_1ceffc;
loc_1cedfe: // 0160:1cedfe
    al = memoryAGet(ds, esi + 20);
    if (!(al & 0x20))
        goto loc_1cee18;
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
loc_1cee11: // 0160:1cee11
    sub_1cfc64();
    goto loc_1ceddc;
loc_1cee18: // 0160:1cee18
    if (!(al & 0x10))
        goto loc_1cee2b;
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    edx = edi;
    stop("disassembly failed at 160:1cee25 movsx eax, word ptr [eax - 4]");
    goto loc_1cee11;
loc_1cee2b: // 0160:1cee2b
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1cfbdb();
    goto loc_1ceddc;
loc_1cee3e: // 0160:1cee3e
    ah = memoryAGet(ds, esi + 20);
    if (!(ah & 0x80))
        goto loc_1cee68;
    ecx = memoryAGet32(ds, edx);
    ecx += 0x00000008;
    memoryASet32(ds, edx, ecx);
    dx = memoryAGet16(ds, ecx + -4);
    ecx = memoryAGet32(ds, ecx + -8);
    if (ecx)
        goto loc_1cee5d;
    if (!dx)
        goto loc_1cee61;
loc_1cee5d: // 0160:1cee5d
    es = edx;
    goto loc_1cee94;
loc_1cee61: // 0160:1cee61
    eax = ds;
    ecx = memoryAGet32(ds, esp);
    goto loc_1cee92;
loc_1cee68: // 0160:1cee68
    if (!(ah & 0x40))
        goto loc_1cee7f;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    ecx = memoryAGet32(ds, ebx + -4);
    if (!ecx)
        goto loc_1cee61;
loc_1cee7b: // 0160:1cee7b
    eax = ds;
    goto loc_1cee92;
loc_1cee7f: // 0160:1cee7f
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ecx = memoryAGet32(ds, eax + -4);
    if (ecx)
        goto loc_1cee7b;
    eax = ds;
    ecx = memoryAGet32(ds, esp);
loc_1cee92: // 0160:1cee92
    es = eax;
loc_1cee94: // 0160:1cee94
    bh = memoryAGet(ds, esi + 20);
    al = memoryAGet(ds, esi + 21);
    edi = 0;
    bh &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, bh);
    if (al != 0x53)
        goto loc_1ceec8;
    if (!(bh & 0x20))
        goto loc_1ceebd;
    eax = 0;
    ax = memoryAGet16(es, ecx);
    ecx += 0x00000002;
    goto loc_1ceffc;
loc_1ceebd: // 0160:1ceebd
    eax = 0;
    al = memoryAGet(es, ecx);
    ecx++;
    goto loc_1ceffc;
loc_1ceec8: // 0160:1ceec8
    if (!(bh & 0x20))
        goto loc_1ceede;
    edx = es;
    eax = ecx;
    ebx = memoryAGet32(ds, esi + 8);
    sub_1ceae8();
    goto loc_1ceffc;
loc_1ceede: // 0160:1ceede
    edx = es;
    eax = ecx;
    ebx = memoryAGet32(ds, esi + 8);
    goto loc_1cedf4;
loc_1ceeea: // 0160:1ceeea
    if (!(memoryAGet(ds, esi + 20) & 0x01))
        goto loc_1cef02;
    if (!ebp)
        goto loc_1cef02;
    memoryASet(ds, esi + 23, 0x30);
    al = memoryAGet(ds, esi + 21);
    memoryASet(ds, esi + 25, 0x00);
    memoryASet(ds, esi + 24, al);
loc_1cef02: // 0160:1cef02
    ebx = 0x00000010;
loc_1cef07: // 0160:1cef07
    eax = ebp;
    edx = edi;
    sub_1cfc1b();
    if (memoryAGet(ds, esi + 21) != 0x58)
        goto loc_1ceddc;
    eax = edi;
    sub_1cf097();
    goto loc_1ceddc;
loc_1cef26: // 0160:1cef26
    if (memoryAGet32(ds, esi + 4) != 0x00000000)
        goto loc_1cef42;
    if (!(memoryAGet(ds, esi + 20) & 0x80))
        goto loc_1cef3b;
    memoryASet32(ds, esi + 4, 0x0000000d);
    goto loc_1cef42;
loc_1cef3b: // 0160:1cef3b
    memoryASet32(ds, esi + 4, 0x00000008);
loc_1cef42: // 0160:1cef42
    memoryASet(ds, esi + 20, memoryAGet(ds, esi + 20) & 0xf9);
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    bl = memoryAGet(ds, esi + 20);
    ebp = memoryAGet32(ds, eax + -4);
    if (!(bl & 0x80))
        goto loc_1cef81;
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ebx = 0x00000004;
    eax = memoryAGet32(ds, eax + -4);
    edx = edi;
    eax &= 0x0000ffff;
    sub_1ceb0b();
    ebx = 0x00000008;
    edx = edi + 5;
    eax = ebp;
    memoryASet(ds, edi + 4, 0x3a);
    goto loc_1cef8a;
loc_1cef81: // 0160:1cef81
    ebx = 0x00000008;
    eax = ebp;
    edx = edi;
loc_1cef8a: // 0160:1cef8a
    sub_1ceb0b();
    if (memoryAGet(ds, esi + 21) != 0x50)
        goto loc_1cedeb;
    eax = edi;
    sub_1cf097();
    goto loc_1cedeb;
loc_1cefa5: // 0160:1cefa5
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    al = memoryAGet(ds, ebx + -4);
    memoryASet(ds, edi + 1, 0x00);
    memoryASet(ds, edi, al);
    memoryASet32(ds, esi + 8, 0x00000001);
    eax = 0x00000001;
    dh = memoryAGet(ds, esi + 20);
    edi = 0;
    dh &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, dh);
    goto loc_1ceffc;
loc_1cefd2: // 0160:1cefd2
    memoryASet32(ds, esi + 4, 0x00000000);
    al = memoryAGet(ds, esi + 21);
    memoryASet(ds, edi + 1, 0x00);
    memoryASet(ds, edi, al);
    memoryASet32(ds, esi + 8, 0x00000001);
    al = memoryAGet(ds, esi + 20);
    edi = 0;
    al &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, al);
    eax = 0x00000001;
loc_1ceffc: // 0160:1ceffc
    if (memoryAGet32(ds, esp + 4) == 0x00000000)
        goto loc_1cf042;
    dl = memoryAGet(es, ecx);
    if (dl != 0x2d)
        goto loc_1cf016;
    ecx++;
    memoryASet(ds, esi + 24, 0x00);
    eax--;
    memoryASet(ds, esi + 23, dl);
    goto loc_1cf031;
loc_1cf016: // 0160:1cf016
    dh = memoryAGet(ds, esi + 20);
    if (!(dh & 0x02))
        goto loc_1cf024;
    memoryASet(ds, esi + 23, 0x20);
    goto loc_1cf02d;
loc_1cf024: // 0160:1cf024
    if (!(dh & 0x04))
        goto loc_1cf031;
    memoryASet(ds, esi + 23, 0x2b);
loc_1cf02d: // 0160:1cf02d
    memoryASet(ds, esi + 24, 0x00);
loc_1cf031: // 0160:1cf031
    edx = memoryAGet32(ds, esi + 8);
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_1cf03d;
    memoryASet32(ds, esi + 8, eax);
    goto loc_1cf042;
loc_1cf03d: // 0160:1cf03d
    edx -= eax;
    memoryASet32(ds, esi + 12, edx);
loc_1cf042: // 0160:1cf042
    if (memoryAGet(ds, esi + 22) != 0x2a)
        goto loc_1cf055;
    dl = memoryAGet(ds, esi + 20);
    memoryASet(ds, esi + 23, 0x00);
    dl &= 0xf9;
    memoryASet(ds, esi + 20, dl);
loc_1cf055: // 0160:1cf055
    ebx = memoryAGet32(ds, esi + 8);
    if (ebx == 0xffffffff)
        goto loc_1cf061;
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_1cf06a;
loc_1cf061: // 0160:1cf061
    if (memoryAGet(ds, esi + 21) == 0x63)
        goto loc_1cf06a;
    memoryASet32(ds, esi + 8, eax);
loc_1cf06a: // 0160:1cf06a
    ebx = 0xffffffff;
    eax = esi + 23;
    edx = ds;
    sub_1ceac4();
    ebp = memoryAGet32(ds, esi + 8);
    edx = memoryAGet32(ds, esi + 12);
    eax += ebp;
    ebx = memoryAGet32(ds, esi + 4);
    eax += edx;
    edx = es;
    ebx -= eax;
    eax = ecx;
    memoryASet32(ds, esi + 4, ebx);
    esp += 0x00000008;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1cf097() // 0160:1cf097 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
loc_1cf09a: // 0160:1cf09a
    if (memoryAGet(ds, edx) == 0x00)
        goto loc_1cf0ad;
    eax = 0;
    al = memoryAGet(ds, edx);
    sub_1cfc7f();
    memoryASet(ds, edx, al);
    edx++;
    goto loc_1cf09a;
loc_1cf0ad: // 0160:1cf0ad
    edx = pop32();
    esp += 4;
}
void sub_1cf0af() // 0160:1cf0af +long
{
    esp -= 4;
    eax = 0x003f3f6c;
    esp += 4;
}
void sub_1cf0b5() // 0160:1cf0b5 +long
{
    esp -= 4;
    eax = 0x003f3f68;
    esp += 4;
}
void sub_1cf0bb() // 0160:1cf0bb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    al = 0x00;
    ah = 0x44;
    interrupt(0x21);
//    edx = rcl32(edx, 0x00000001);
//    edx = ror32(edx, 0x00000001);
//    //stop("setne");
    eax = 0; // gabo!
    eax &= 0x000000ff;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf0d9() // 0160:1cf0d9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    if (eax < memoryAGet32(ds, 0x1e010c))
        goto loc_1cf0ec;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1cf0ec: // 0160:1cf0ec
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_1cf122;
    ebx = eax;
    eax = memoryAGet32(ds, 0x1e0160);
    ebx <<= 2;
    eax += ebx;
    cl = memoryAGet(ds, eax + 1);
    if (cl & 0x40)
        goto loc_1cf122;
    ch = cl;
    ch |= 0x40;
    memoryASet(ds, eax + 1, ch);
    eax = edx;
    sub_1cf0bb();
    if (!eax)
        goto loc_1cf122;
    eax = memoryAGet32(ds, 0x1e0160);
    memoryASet(ds, ebx + eax + 1, memoryAGet(ds, ebx + eax + 1) | 0x20);
loc_1cf122: // 0160:1cf122
    eax = memoryAGet32(ds, 0x1e0160);
    eax = memoryAGet32(ds, eax + edx*4);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf12e() // 0160:1cf12e +long
{
    esp -= 4;
    push32(ebx);
    dh |= 0x40;
    ebx = edx;
    edx = eax;
    eax = memoryAGet32(ds, 0x1e0160);
    edx <<= 2;
    memoryASet32(ds, edx + eax, ebx);
    ebx = pop32();
    esp += 4;
}
void sub_1cf150() // 0160:1cf150 +long
{
    esp -= 4;
    push32(eax);
    push32(ecx);
    dh = dl;
    edx <<= 8;
    dl = dh;
    edx <<= 8;
    dl = dh;
    ecx = ebx;
    sub_1c8010();
    ecx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1cf168() // 0160:1cf168 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ah = memoryAGet(ds, 0x1dfde9);
    ah &= 0xf8;
    dl = ah;
    memoryASet(ds, 0x1dfde9, ah);
    dl |= 0x04;
    ecx = 0x001dfda8;
    memoryASet(ds, 0x1dfde9, dl);
    goto loc_1cf1cf;
loc_1cf18c: // 0160:1cf18c
    eax = 0x00000008;
    sub_1c8bb1(); //
//    assert(eax == 0x15d090);
    ebx = eax;
    if (eax)
        goto loc_1cf1bb;
    eax = 0x00000008;
    sub_1c8bb1();
    ebx = eax;
    if (eax)
        goto loc_1cf1bb;
    eax = 0x001d239c;
    edx = 0x00000001;
    sub_1cfb4f();
loc_1cf1bb: // 0160:1cf1bb
    edx = memoryAGet32(ds, 0x3f3eb0);
    memoryASet32(ds, ebx + 4, ecx);
    memoryASet32(ds, 0x3f3eb0, ebx);
    ecx += 0x0000001a;
    memoryASet32(ds, ebx, edx);
loc_1cf1cf: // 0160:1cf1cf
    edx = memoryAGet32(ds, ecx + 12);
    if (edx)
        goto loc_1cf18c;
    memoryASet32(ds, 0x3f3eac, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf243() // 0160:1cf243 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    memoryASet32(ds, esp, edx);
    ebp = ebx;
    sub_1cf0d9();
    if (!(al & 0x80))
        goto loc_1cf287;
    al = 0x02;
    ebx = esi;
    edx = 0;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    dx = rcl16(dx, 0x0001);
    dx = ror16(dx, 0x0001);
    edx <<= 16;
    dx = ax;
    edi = edx;
    if (stop("postCondition"))
        goto loc_1cf287;
    eax = 0;
    ax = dx;
loc_1cf280: // 0160:1cf280
    sub_1c9e15();
    goto loc_1cf2b7;
loc_1cf287: // 0160:1cf287
    edx = memoryAGet32(ds, esp);
    ebx = esi;
    ecx = ebp;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    edi = eax;
    edx = eax;
    if (stop("postCondition"))
        goto loc_1cf2a7;
    eax = 0;
    ax = si;
    goto loc_1cf280;
loc_1cf2a7: // 0160:1cf2a7
    if (eax == ebp)
        goto loc_1cf2b5;
    eax = 0x0000000c;
    sub_1c93b0();
loc_1cf2b5: // 0160:1cf2b5
    eax = edx;
loc_1cf2b7: // 0160:1cf2b7
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cf2bf() // 0160:1cf2bf +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    ah = 0x41;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if (stop("postCondition"))
        goto loc_1cf2da;
    eax &= 0x0000ffff;
    sub_1c9e15();
    edx = pop32();
    esp += 4;
    return;
loc_1cf2da: // 0160:1cf2da
    eax = 0;
    edx = pop32();
    esp += 4;
}
void sub_1cf2e3() // 0160:1cf2e3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    edx = memoryAGet32(ds, 0x3f3eb0);
    ebx = 0;
    goto loc_1cf308;
loc_1cf2f2: // 0160:1cf2f2
    eax = memoryAGet32(ds, edx + 4);
    if (!(memoryAGet32(ds, eax + 12) & ecx))
        goto loc_1cf306;
    ebx++;
    if (!(memoryAGet(ds, eax + 13) & 0x10))
        goto loc_1cf306;
    sub_1c9764();
loc_1cf306: // 0160:1cf306
    edx = memoryAGet32(ds, edx);
loc_1cf308: // 0160:1cf308
    if (edx)
        goto loc_1cf2f2;
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf312() // 0160:1cf312 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = memoryAGet32(ds, 0x1dfd3c);
    memoryASet32(ds, 0x1dfd3c, edx);
    if (eax)
        goto loc_1cf32d;
    ah = 0x01;
    interrupt(0x21);
    eax &= 0x000000ff;
loc_1cf32d: // 0160:1cf32d
    edx = pop32();
    esp += 4;
}
void sub_1cf330() // 0160:1cf330 +long
{
    esp -= 4;
    memoryASet16(ds, 0x1e0164, ss);
    esp += 4;
}
void sub_1cf378() // 0160:1cf378 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    if (memoryAGet32(ds, 0x1dffbc) != 0x00000000)
        goto loc_1cf443;
    fs = memoryAGet16(ds, 0x1dfd51);
    ecx = 0;
    dl = 0;
    eax = fs;
    edi = memoryAGet32(ds, 0x1dfd4d);
    es = eax;
    eax = edi;
loc_1cf3a3: // 0160:1cf3a3
    if (dl == memoryAGet(es, eax))
        goto loc_1cf3bb;
loc_1cf3a8: // 0160:1cf3a8
    dh = memoryAGet(es, eax);
    ebx = eax + 1;
    if (dl == dh)
        goto loc_1cf3b6;
    eax = ebx;
    goto loc_1cf3a8;
loc_1cf3b6: // 0160:1cf3b6
    ecx++;
    eax = ebx;
    goto loc_1cf3a3;
loc_1cf3bb: // 0160:1cf3bb
    eax -= edi;
    if (eax)
        goto loc_1cf3c4;
    eax = 0x00000001;
loc_1cf3c4: // 0160:1cf3c4
    assert(eax == 0x39 && bx == 0x39 && cx == 3);
    sub_1c8bb1();
    edx = eax;
    ebx = eax;
    if (!eax)
        goto loc_1cf443;
    eax = ecx;
    eax <<= 2;
    eax += 0x00000004;
    eax += ecx;
    sub_1c8bb1();
    if (!eax)
        goto loc_1cf43c;
    memoryASet32(ds, 0x1dffbc, eax);
    esi = 0;
    eax = fs;
    ecx = 0;
    es = eax;
    eax = edi;
loc_1cf3f7: // 0160:1cf3f7
    if (memoryAGet(es, eax) == 0x00)
        goto loc_1cf417;
    edx = memoryAGet32(ds, 0x1dffbc);
    memoryASet32(ds, ecx + edx, ebx);
loc_1cf406: // 0160:1cf406
    dl = memoryAGet(es, eax);
    eax++;
    memoryASet(ds, ebx, dl);
    ebx++;
    if (dl)
        goto loc_1cf406;
    ecx += 0x00000004;
    esi++;
    goto loc_1cf3f7;
loc_1cf417: // 0160:1cf417
    edx = memoryAGet32(ds, 0x1dffbc);
    memoryASet32(ds, ecx + edx, 0x00000000);
    ecx += 0x00000004;
    edx += ecx;
    ebx = esi;
    memoryASet32(ds, 0x1dffc0, edx);
    eax = edx;
    edx = 0;
    sub_1cf150();
    goto loc_1cf443;
loc_1cf43c: // 0160:1cf43c
    eax = edx;
    sub_1c8c94();
loc_1cf443: // 0160:1cf443
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf51b() // 0160:1cf51b +long
{
    esp -= 4;
    goto loc_1cf51b;
loc_1cf515: // 0160:1cf515
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1cf51b: // 0160:1cf51b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    push32(eax);
    if (eax < memoryAGet32(ds, 0x1dfd30))
        goto loc_1cf582;
    if (memoryAGet(ds, 0x1dfd4a) != 0x00)
        goto loc_1cf594;
    ebp = memoryAGet32(ds, esp);
    ebp += 0x0000000f;
    ebp >>= 4;
    if (ebp)
        goto loc_1cf546;
    ebp = 0x0fffffff;
loc_1cf546: // 0160:1cf546
    ebx = 0;
    eax = ds;
    bx = ax;
    ah = 0xed;
    interrupt(0x21);
    eax <<= 31;
    edi &= 0x0000ffff;
    edi |= eax;
    if (stop("postCondition"))
        goto loc_1cf570;
    es = edi;
    ebx = ebp;
    ah = 0x4a;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if (stop("postCondition"))
        goto loc_1cf582;
loc_1cf570: // 0160:1cf570
    eax = ds;
    es = eax;
    ebx = ebp;
loc_1cf576: // 0160:1cf576
    ah = 0x4a;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if (stop("postCondition"))
        goto loc_1cf5c5;
loc_1cf582: // 0160:1cf582
    sub_1cf0af();
    memoryASet32(ds, eax, 0x00000005);
    eax = 0xffffffff;
    goto loc_1cf5d3;
loc_1cf594: // 0160:1cf594
    ebx = memoryAGet32(ds, esp);
    ebx += 0x00000fff;
    ebx >>= 12;
    if (ebx)
        goto loc_1cf5a9;
    ebx = 0x000fffff;
loc_1cf5a9: // 0160:1cf5a9
    dl = memoryAGet(ds, 0x1dfd4a);
    if (dl != 0x01)
        goto loc_1cf5bf;
    if (dl != memoryAGet(ds, 0x1dfd4b))
        goto loc_1cf5bf;
    ebx <<= 8;
loc_1cf5bf: // 0160:1cf5bf
    eax = ds;
    es = eax;
    goto loc_1cf576;
loc_1cf5c5: // 0160:1cf5c5
    ebx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, 0x1dfd1c);
    memoryASet32(ds, 0x1dfd1c, ebx);
loc_1cf5d3: // 0160:1cf5d3
    esp += 0x00000004;
    ebp = pop32();
    es = pop();
    goto loc_1cf515;
}
void sub_1cfb4f() // 0160:1cfb4f +long error
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    edx = ds;
    sub_1d0188();
    if (eax)
        goto loc_1cfb69;
    eax = ebx;
    edx = ecx;
    sub_1c7edd(); // error message
loc_1cfb69: // 0160:1cfb69
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cfb91() // 0160:1cfb91 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    ebp = edx;
    edi = ebx;
    esi = edx;
    dl = 0;
    ecx = esp + 1;
    memoryASet(ds, esp, dl);
loc_1cfba7: // 0160:1cfba7
    ebx = esp + 36;
    memoryASet32(ds, esp + 36, edi);
    edx = 0;
    div32(memoryAGet32(ds, ebx));
    memoryASet32(ds, ebx, eax);
    al = memoryAGet(cs, edx + 1899372);
    memoryASet(ds, ecx, al);
    eax = memoryAGet32(ds, esp + 36);
    ecx++;
    if (eax)
        goto loc_1cfba7;
loc_1cfbc7: // 0160:1cfbc7
    ecx--;
    al = memoryAGet(ds, ecx);
    memoryASet(ds, esi, al);
    esi++;
    if (al)
        goto loc_1cfbc7;
    eax = ebp;
    esp += 0x00000028;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cfbdb() // 0160:1cfbdb +long
{
    esp -= 4;
    push32(ecx);
    ecx = edx;
    if (ebx != 0x0000000a)
        goto loc_1cfbed;
    if (stop("postCondition"))
        goto loc_1cfbed;
    eax = -eax;
    memoryASet(ds, edx, 0x2d);
    edx++;
loc_1cfbed: // 0160:1cfbed
    sub_1cfb91();
    eax = ecx;
    ecx = pop32();
    esp += 4;
}
void sub_1cfc1b() // 0160:1cfc1b +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(ebp);
    esp -= 0x00000028;
    push32(edx);
    ebp = ebx;
    esi = edx;
    dl = 0;
    ecx = esp + 5;
    memoryASet(ds, esp + 4, dl);
loc_1cfc30: // 0160:1cfc30
    ebx = esp + 40;
    memoryASet32(ds, esp + 40, ebp);
    edx = 0;
    div32(memoryAGet32(ds, ebx));
    memoryASet32(ds, ebx, edx);
    edx = memoryAGet32(ds, esp + 40);
    dl = memoryAGet(cs, edx + 1899510);
    memoryASet(ds, ecx, dl);
    ecx++;
    if (eax)
        goto loc_1cfc30;
loc_1cfc50: // 0160:1cfc50
    ecx--;
    al = memoryAGet(ds, ecx);
    memoryASet(ds, esi, al);
    esi++;
    if (al)
        goto loc_1cfc50;
    eax = memoryAGet32(ds, esp);
    esp += 0x0000002c;
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1cfc64() // 0160:1cfc64 +long
{
    esp -= 4;
    push32(ecx);
    ecx = edx;
    if (ebx != 0x0000000a)
        goto loc_1cfc76;
    if (stop("postCondition"))
        goto loc_1cfc76;
    eax = -eax;
    memoryASet(ds, edx, 0x2d);
    edx++;
loc_1cfc76: // 0160:1cfc76
    sub_1cfc1b();
    eax = ecx;
    ecx = pop32();
    esp += 4;
}
void sub_1cfc7f() // 0160:1cfc7f +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000061)
        goto loc_1cfc8c;
    if ((int32_t)eax > (int32_t)0x0000007a)
        goto loc_1cfc8c;
    eax -= 0x00000020;
loc_1cfc8c: // 0160:1cfc8c
    esp += 4;
    return;
}
void sub_1d0188() // 0160:1d0188 +long
{
    esp -= 4;
    if (memoryAGet(ds, 0x1e0184) == 0x00)
        goto loc_1d01ab;
    edx &= 0x0000ffff;
    push32(edx);
    push32(eax);
    stop("breakpoint");
    goto loc_1d01a2;
    // gap 6 bytes
loc_1d01a2: // 0160:1d01a2
    eax = 0x00000001;
    esp += 0x00000008;
    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1d01ab: // 0160:1d01ab
    eax = 0;
    esp += 4;
}
void fixReloc(uint16_t seg)
{
}

int GetProcAt(int seg, int ofs)
{
    int map[] = {
        0x196010, 0x160, 0x196010, 0x160, 0x19602a, 0x19602a, 0x160, 0x19602a, 0x160, 0x196049, 
        0x196049, 0x160, 0x196049, 0x160, 0x196500, 0x196049, 0x160, 0x196658, 0x160, 0x19665f, 
        0x196528, 0x160, 0x196528, 0x160, 0x1965da, 0x196528, 0x160, 0x196646, 0x160, 0x19665f, 
        0x196688, 0x160, 0x196688, 0x160, 0x1966e7, 0x196688, 0x160, 0x196864, 0x160, 0x1968a6, 
        0x1968c6, 0x160, 0x1968c6, 0x160, 0x1969ec, 0x1969ec, 0x160, 0x1969ec, 0x160, 0x196a3e, 
        0x196a3e, 0x160, 0x196a3e, 0x160, 0x196afc, 0x196afc, 0x160, 0x196afc, 0x160, 0x196b5f, 
        0x196b5f, 0x160, 0x196b5f, 0x160, 0x196b84, 0x196b5f, 0x160, 0x196b89, 0x160, 0x196b8c, 
        0x196b8d, 0x160, 0x196658, 0x160, 0x19665f, 0x196b8d, 0x160, 0x196b8d, 0x160, 0x196c52, 
        0x196c52, 0x160, 0x196c52, 0x160, 0x196ca9, 0x196ca9, 0x160, 0x196ca9, 0x160, 0x196d9a, 
        0x196ca9, 0x160, 0x198141, 0x160, 0x198146, 0x196d9a, 0x160, 0x196655, 0x160, 0x19665f, 
        0x196d9a, 0x160, 0x196d9a, 0x160, 0x196e87, 0x196e87, 0x160, 0x196658, 0x160, 0x19665f, 
        0x196e87, 0x160, 0x196e87, 0x160, 0x196f97, 0x196f97, 0x160, 0x196658, 0x160, 0x19665f, 
        0x196f97, 0x160, 0x196f97, 0x160, 0x197034, 0x197034, 0x160, 0x196659, 0x160, 0x19665e, 
        0x197034, 0x160, 0x197034, 0x160, 0x197094, 0x197034, 0x160, 0x197099, 0x160, 0x1970c0, 
        0x197034, 0x160, 0x1970c5, 0x160, 0x1970f5, 0x1970f5, 0x160, 0x1970f5, 0x160, 0x19731d, 
        0x19731d, 0x160, 0x19731d, 0x160, 0x197391, 0x197391, 0x160, 0x197391, 0x160, 0x1973e5, 
        0x1973e5, 0x160, 0x196658, 0x160, 0x19665f, 0x1973e5, 0x160, 0x1973e5, 0x160, 0x197664, 
        0x197664, 0x160, 0x196658, 0x160, 0x19665f, 0x197664, 0x160, 0x197664, 0x160, 0x1977cd, 
        0x1977cd, 0x160, 0x1977cd, 0x160, 0x1978a8, 0x1977cd, 0x160, 0x198141, 0x160, 0x198147, 
        0x197910, 0x160, 0x197910, 0x160, 0x197a01, 0x197910, 0x160, 0x197a2c, 0x160, 0x197a35, 
        0x197b3b, 0x160, 0x196659, 0x160, 0x19665f, 0x197b3b, 0x160, 0x197b3b, 0x160, 0x197c71, 
        0x197c71, 0x160, 0x197c71, 0x160, 0x197ce5, 0x197c71, 0x160, 0x197cea, 0x160, 0x197d30, 
        0x197c71, 0x160, 0x197d35, 0x160, 0x197d4e, 0x197c71, 0x160, 0x197d53, 0x160, 0x197d77, 
        0x197c71, 0x160, 0x198141, 0x160, 0x198147, 0x197d77, 0x160, 0x197d77, 0x160, 0x197f05, 
        0x197d77, 0x160, 0x198141, 0x160, 0x198146, 0x197f05, 0x160, 0x196658, 0x160, 0x19665f, 
        0x197f05, 0x160, 0x196f8f, 0x160, 0x196f97, 0x197f05, 0x160, 0x197f05, 0x160, 0x197f7a, 
        0x197f7a, 0x160, 0x196655, 0x160, 0x19665f, 0x197f7a, 0x160, 0x197f7a, 0x160, 0x1980de, 
        0x1980de, 0x160, 0x1980de, 0x160, 0x1980f9, 0x1980f9, 0x160, 0x1980f9, 0x160, 0x198147, 
        0x198147, 0x160, 0x19813e, 0x160, 0x19818b, 0x19818b, 0x160, 0x196659, 0x160, 0x19665f, 
        0x19818b, 0x160, 0x19818b, 0x160, 0x19823d, 0x19823d, 0x160, 0x19823d, 0x160, 0x1982da, 
        0x1982da, 0x160, 0x1982da, 0x160, 0x1982e5, 0x1982da, 0x160, 0x19cf97, 0x160, 0x19cf9d, 
        0x1982da, 0x160, 0x19e865, 0x160, 0x19e8ec, 0x1982e5, 0x160, 0x1982e5, 0x160, 0x198554, 
        0x198554, 0x160, 0x196658, 0x160, 0x19665f, 0x198554, 0x160, 0x198554, 0x160, 0x198725, 
        0x198725, 0x160, 0x198725, 0x160, 0x19878d, 0x19878d, 0x160, 0x196658, 0x160, 0x19665f, 
        0x19878d, 0x160, 0x19878d, 0x160, 0x198b0e, 0x198b0e, 0x160, 0x196658, 0x160, 0x19665f, 
        0x198b0e, 0x160, 0x198b0e, 0x160, 0x198cd4, 0x198cd4, 0x160, 0x198cd4, 0x160, 0x198cff, 
        0x198cff, 0x160, 0x196658, 0x160, 0x19665f, 0x198cff, 0x160, 0x198cff, 0x160, 0x198efd, 
        0x198efd, 0x160, 0x198efd, 0x160, 0x198f64, 0x198f64, 0x160, 0x196658, 0x160, 0x19665f, 
        0x198f64, 0x160, 0x198f64, 0x160, 0x199062, 0x199062, 0x160, 0x199062, 0x160, 0x1990e5, 
        0x199062, 0x160, 0x1990ea, 0x160, 0x1990ee, 0x199163, 0x160, 0x196659, 0x160, 0x19665f, 
        0x199163, 0x160, 0x199163, 0x160, 0x1992d0, 0x1992d0, 0x160, 0x1992d0, 0x160, 0x199313, 
        0x19934d, 0x160, 0x19934d, 0x160, 0x199435, 0x199435, 0x160, 0x199435, 0x160, 0x1994a3, 
        0x1994a3, 0x160, 0x196658, 0x160, 0x19665f, 0x1994a3, 0x160, 0x1994a3, 0x160, 0x199775, 
        0x199775, 0x160, 0x199775, 0x160, 0x1997d1, 0x1997d1, 0x160, 0x1997d1, 0x160, 0x19982d, 
        0x19982d, 0x160, 0x19982d, 0x160, 0x199889, 0x199889, 0x160, 0x199889, 0x160, 0x199917, 
        0x199917, 0x160, 0x199917, 0x160, 0x199993, 0x199993, 0x160, 0x199993, 0x160, 0x1999e9, 
        0x1999e9, 0x160, 0x1999e9, 0x160, 0x199ab8, 0x199ab8, 0x160, 0x199ab8, 0x160, 0x199ae8, 
        0x199ae8, 0x160, 0x196658, 0x160, 0x19665f, 0x199ae8, 0x160, 0x199ae8, 0x160, 0x199c0e, 
        0x199c0e, 0x160, 0x196658, 0x160, 0x19665f, 0x199c0e, 0x160, 0x199c0e, 0x160, 0x199dd1, 
        0x199dd1, 0x160, 0x196658, 0x160, 0x19665f, 0x199dd1, 0x160, 0x199dd1, 0x160, 0x199f56, 
        0x199f56, 0x160, 0x196659, 0x160, 0x19665f, 0x199f56, 0x160, 0x199f56, 0x160, 0x19a0dc, 
        0x19a0dc, 0x160, 0x19a0dc, 0x160, 0x19a217, 0x19a217, 0x160, 0x19a217, 0x160, 0x19a255, 
        0x19a217, 0x160, 0x19a25a, 0x160, 0x19a2a3, 0x19a217, 0x160, 0x19a2a8, 0x160, 0x19a2ac, 
        0x19a2ac, 0x160, 0x19a2ac, 0x160, 0x19a32e, 0x19a2ac, 0x160, 0x19a333, 0x160, 0x19a337, 
        0x19a337, 0x160, 0x19a337, 0x160, 0x19a526, 0x19a526, 0x160, 0x19a526, 0x160, 0x19a5b1, 
        0x19a640, 0x160, 0x19a640, 0x160, 0x19a69d, 0x19a69d, 0x160, 0x19a69d, 0x160, 0x19a6d2, 
        0x19a6d2, 0x160, 0x198141, 0x160, 0x198147, 0x19a6d2, 0x160, 0x19a6d2, 0x160, 0x19a865, 
        0x19a865, 0x160, 0x196658, 0x160, 0x19665f, 0x19a865, 0x160, 0x19a865, 0x160, 0x19ab49, 
        0x19abcd, 0x160, 0x19abcd, 0x160, 0x19ac27, 0x19ac27, 0x160, 0x19ac27, 0x160, 0x19ac48, 
        0x19ac48, 0x160, 0x196658, 0x160, 0x19665f, 0x19ac48, 0x160, 0x19ac48, 0x160, 0x19af26, 
        0x19af26, 0x160, 0x19af26, 0x160, 0x19af3f, 0x19af3f, 0x160, 0x19af3f, 0x160, 0x19af54, 
        0x19af54, 0x160, 0x19af54, 0x160, 0x19af98, 0x19af98, 0x160, 0x19af98, 0x160, 0x19afcd, 
        0x19afcd, 0x160, 0x19afcd, 0x160, 0x19aff6, 0x19aff6, 0x160, 0x19aff6, 0x160, 0x19b090, 
        0x19b091, 0x160, 0x19b091, 0x160, 0x19b0d1, 0x19b153, 0x160, 0x19b153, 0x160, 0x19b1d2, 
        0x19b1d2, 0x160, 0x19b1d2, 0x160, 0x19b1f5, 0x19b1f5, 0x160, 0x19b1f5, 0x160, 0x19b200, 
        0x19b200, 0x160, 0x19b200, 0x160, 0x19b22b, 0x19b2ba, 0x160, 0x19b2ba, 0x160, 0x19b31e, 
        0x19b31e, 0x160, 0x19b31e, 0x160, 0x19b33a, 0x19b33a, 0x160, 0x19b33a, 0x160, 0x19b38b, 
        0x19b38b, 0x160, 0x19b38b, 0x160, 0x19b431, 0x19b431, 0x160, 0x19b08b, 0x160, 0x19b091, 
        0x19b431, 0x160, 0x19b431, 0x160, 0x19b50c, 0x19b55e, 0x160, 0x19b55e, 0x160, 0x19b588, 
        0x19b588, 0x160, 0x19b588, 0x160, 0x19b5c8, 0x19b5c8, 0x160, 0x19b5c2, 0x160, 0x19b66a, 
        0x19b66a, 0x160, 0x19b66a, 0x160, 0x19b679, 0x19b679, 0x160, 0x19b679, 0x160, 0x19b766, 
        0x19b766, 0x160, 0x19b766, 0x160, 0x19b794, 0x19b794, 0x160, 0x19af92, 0x160, 0x19af98, 
        0x19b794, 0x160, 0x19b794, 0x160, 0x19b80e, 0x19b80e, 0x160, 0x19b5c2, 0x160, 0x19b5c8, 
        0x19b80e, 0x160, 0x19b80e, 0x160, 0x19b82f, 0x19b8ca, 0x160, 0x19b8ca, 0x160, 0x19bdd8, 
        0x19bdd9, 0x160, 0x19bdd9, 0x160, 0x19c589, 0x19c58a, 0x160, 0x19c58a, 0x160, 0x19c7ca, 
        0x19c7ca, 0x160, 0x19c7ca, 0x160, 0x19c91e, 0x19c7ca, 0x160, 0x19ca95, 0x160, 0x19ca9b, 
        0x19c91e, 0x160, 0x19c91e, 0x160, 0x19ca9b, 0x19ca9b, 0x160, 0x19ca9b, 0x160, 0x19cb51, 
        0x19cb51, 0x160, 0x19cb51, 0x160, 0x19cb74, 0x19cb74, 0x160, 0x19cb74, 0x160, 0x19cbc0, 
        0x19cbc0, 0x160, 0x19ca94, 0x160, 0x19ca9b, 0x19cbc0, 0x160, 0x19cbc0, 0x160, 0x19cc15, 
        0x19cc15, 0x160, 0x19cc15, 0x160, 0x19ccf4, 0x19ccf4, 0x160, 0x19ccf4, 0x160, 0x19cd59, 
        0x19cd59, 0x160, 0x19cd59, 0x160, 0x19cdc5, 0x19cdc5, 0x160, 0x19cdc5, 0x160, 0x19cde3, 
        0x19cde3, 0x160, 0x19cde3, 0x160, 0x19ce21, 0x19ce21, 0x160, 0x19ce21, 0x160, 0x19ce55, 
        0x19ce55, 0x160, 0x19ce55, 0x160, 0x19ceb7, 0x19ceb7, 0x160, 0x19ceb7, 0x160, 0x19cf11, 
        0x19cf11, 0x160, 0x19cf11, 0x160, 0x19cf9d, 0x19cf9d, 0x160, 0x19cf96, 0x160, 0x19d0f3, 
        0x19d0f3, 0x160, 0x19cf96, 0x160, 0x19cf9d, 0x19d0f3, 0x160, 0x19d0f3, 0x160, 0x19d1d6, 
        0x19d1d6, 0x160, 0x19d1d6, 0x160, 0x19d338, 0x19d338, 0x160, 0x19d338, 0x160, 0x19d389, 
        0x19d389, 0x160, 0x19d389, 0x160, 0x19d416, 0x19d416, 0x160, 0x19d416, 0x160, 0x19d4cb, 
        0x19d4cb, 0x160, 0x19cf97, 0x160, 0x19cf9d, 0x19d4cb, 0x160, 0x19d4cb, 0x160, 0x19d55b, 
        0x19d55b, 0x160, 0x19d55b, 0x160, 0x19d5f1, 0x19d5f1, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x19d5f1, 0x160, 0x19d5f1, 0x160, 0x19d86c, 0x19d86c, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x19d86c, 0x160, 0x19d86c, 0x160, 0x19dad1, 0x19dad1, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x19dad1, 0x160, 0x19dad1, 0x160, 0x19dc9c, 0x19dc9c, 0x160, 0x19dc9c, 0x160, 0x19dceb, 
        0x19dceb, 0x160, 0x19dceb, 0x160, 0x19dd20, 0x19dd20, 0x160, 0x19cf97, 0x160, 0x19cf9d, 
        0x19dd20, 0x160, 0x19dd20, 0x160, 0x19de2c, 0x19de2c, 0x160, 0x19de2c, 0x160, 0x19de6a, 
        0x19de6a, 0x160, 0x19cf93, 0x160, 0x19cf9d, 0x19de6a, 0x160, 0x19de6a, 0x160, 0x19dfc7, 
        0x19dfc7, 0x160, 0x19cf96, 0x160, 0x19cf9d, 0x19dfc7, 0x160, 0x19dfc7, 0x160, 0x19e865, 
        0x19e865, 0x160, 0x19cf97, 0x160, 0x19cf9d, 0x19e865, 0x160, 0x19e865, 0x160, 0x19e8ec, 
        0x19e8ec, 0x160, 0x19e8ec, 0x160, 0x19e906, 0x19e906, 0x160, 0x19e906, 0x160, 0x19e929, 
        0x19e929, 0x160, 0x19e929, 0x160, 0x19e96d, 0x19e96d, 0x160, 0x19e96d, 0x160, 0x19e997, 
        0x19e997, 0x160, 0x19e997, 0x160, 0x19e9d5, 0x19e9d5, 0x160, 0x19e9d5, 0x160, 0x19eabf, 
        0x19eabf, 0x160, 0x19eabf, 0x160, 0x19ead2, 0x19eabf, 0x160, 0x19eb43, 0x160, 0x19eb4c, 
        0x19ead2, 0x160, 0x19ead2, 0x160, 0x19eb13, 0x19ead2, 0x160, 0x19eb43, 0x160, 0x19eb4c, 
        0x19eb13, 0x160, 0x19eb13, 0x160, 0x19eb2c, 0x19eb13, 0x160, 0x19eb43, 0x160, 0x19eb4c, 
        0x19eb2c, 0x160, 0x19eb2c, 0x160, 0x19eb4c, 0x19eb4c, 0x160, 0x19eb3e, 0x160, 0x19eb60, 
        0x19eb60, 0x160, 0x19eb60, 0x160, 0x19eb98, 0x19eb60, 0x160, 0x19ec4a, 0x160, 0x19ec53, 
        0x19eb98, 0x160, 0x19eb98, 0x160, 0x19ebc0, 0x19ebc0, 0x160, 0x19ebc0, 0x160, 0x19ebd9, 
        0x19ebc0, 0x160, 0x19ec4a, 0x160, 0x19ec53, 0x19ebd9, 0x160, 0x19ebd9, 0x160, 0x19ec33, 
        0x19ec33, 0x160, 0x19ec33, 0x160, 0x19ec53, 0x19ec53, 0x160, 0x19ec53, 0x160, 0x19ec81, 
        0x19ec81, 0x160, 0x19ec45, 0x160, 0x19ec53, 0x19ec81, 0x160, 0x19ec81, 0x160, 0x19ec95, 
        0x19ec95, 0x160, 0x19ec95, 0x160, 0x19ecf9, 0x19ecf9, 0x160, 0x19ecf0, 0x160, 0x19ed3a, 
        0x19ed3a, 0x160, 0x19ec2a, 0x160, 0x19ec33, 0x19ed3a, 0x160, 0x19ed3a, 0x160, 0x19ed7f, 
        0x19ed7f, 0x160, 0x19ed7f, 0x160, 0x19edc0, 0x19edc0, 0x160, 0x19edc0, 0x160, 0x19ede8, 
        0x19ede7, 0x160, 0x19ede7, 0x160, 0x19ede8, 0x19ede8, 0x160, 0x19ec2a, 0x160, 0x19ec33, 
        0x19ede8, 0x160, 0x19ede8, 0x160, 0x19ee35, 0x19ee35, 0x160, 0x19ec2a, 0x160, 0x19ec33, 
        0x19ee35, 0x160, 0x19ee35, 0x160, 0x19ee93, 0x19ee93, 0x160, 0x19ecf0, 0x160, 0x19ecf9, 
        0x19ee93, 0x160, 0x19ee93, 0x160, 0x19eeac, 0x19eeac, 0x160, 0x19eeac, 0x160, 0x19eed3, 
        0x19eed3, 0x160, 0x19eed3, 0x160, 0x19eefa, 0x19eefa, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x19eefa, 0x160, 0x19eefa, 0x160, 0x19f50a, 0x19f50a, 0x160, 0x19cf97, 0x160, 0x19cf9d, 
        0x19f50a, 0x160, 0x19de02, 0x160, 0x19de0c, 0x19f50a, 0x160, 0x19f50a, 0x160, 0x19f612, 
        0x19f612, 0x160, 0x19f612, 0x160, 0x19f8bd, 0x19f8bd, 0x160, 0x19f8b7, 0x160, 0x19fa00, 
        0x19fa00, 0x160, 0x19fa00, 0x160, 0x19fb74, 0x19fb74, 0x160, 0x19fb74, 0x160, 0x19fd16, 
        0x19fd16, 0x160, 0x19cf97, 0x160, 0x19cf9d, 0x19fd16, 0x160, 0x19fd16, 0x160, 0x19fdd1, 
        0x19fdd1, 0x160, 0x19d332, 0x160, 0x19d338, 0x19fdd1, 0x160, 0x19fdd1, 0x160, 0x19ffe1, 
        0x19ffe1, 0x160, 0x19d332, 0x160, 0x19d338, 0x19ffe1, 0x160, 0x19ffe1, 0x160, 0x1a0111, 
        0x1a0111, 0x160, 0x1a0111, 0x160, 0x1a01b1, 0x1a01b1, 0x160, 0x19fd10, 0x160, 0x19fd16, 
        0x1a01b1, 0x160, 0x1a01b1, 0x160, 0x1a0265, 0x1a0265, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a0265, 0x160, 0x1a0265, 0x160, 0x1a08f5, 0x1a08f5, 0x160, 0x1a08f5, 0x160, 0x1a0a8e, 
        0x1a0a8f, 0x160, 0x1a0a8f, 0x160, 0x1a0ac5, 0x1a0ac5, 0x160, 0x1a0ac5, 0x160, 0x1a0ae9, 
        0x1a0ae9, 0x160, 0x1a0ae9, 0x160, 0x1a0b1f, 0x1a0b1f, 0x160, 0x1a0b1f, 0x160, 0x1a0b6b, 
        0x1a0b6b, 0x160, 0x1a0b62, 0x160, 0x1a0bb0, 0x1a0bb0, 0x160, 0x1a0bb0, 0x160, 0x1a0edd, 
        0x1a0bb0, 0x160, 0x1a0ee2, 0x160, 0x1a1150, 0x1a1150, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a1150, 0x160, 0x1a1150, 0x160, 0x1a178b, 0x1a178b, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a178b, 0x160, 0x1a178b, 0x160, 0x1a19aa, 0x1a19aa, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a19aa, 0x160, 0x1a19aa, 0x160, 0x1a1ab7, 0x1a1ab7, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a1ab7, 0x160, 0x1a1ab7, 0x160, 0x1a1c1b, 0x1a1c1b, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a1c1b, 0x160, 0x1a1c1b, 0x160, 0x1a21af, 0x1a21af, 0x160, 0x1a21af, 0x160, 0x1a221e, 
        0x1a21af, 0x160, 0x1a221f, 0x160, 0x1a2222, 0x1a2223, 0x160, 0x19f8b7, 0x160, 0x19f8bd, 
        0x1a2223, 0x160, 0x1a2223, 0x160, 0x1a2467, 0x1a2467, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a2467, 0x160, 0x1a2467, 0x160, 0x1a2510, 0x1a2510, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a2510, 0x160, 0x1a1783, 0x160, 0x1a178b, 0x1a2510, 0x160, 0x1a2510, 0x160, 0x1a2846, 
        0x1a28a1, 0x160, 0x19f8b7, 0x160, 0x19f8bd, 0x1a28a1, 0x160, 0x1a28a1, 0x160, 0x1a2cc8, 
        0x1a2cc8, 0x160, 0x19f8b7, 0x160, 0x19f8bd, 0x1a2cc8, 0x160, 0x1a2cc8, 0x160, 0x1a3029, 
        0x1a3029, 0x160, 0x19f8b7, 0x160, 0x19f8bd, 0x1a3029, 0x160, 0x1a3029, 0x160, 0x1a31e0, 
        0x1a31e0, 0x160, 0x1a31e0, 0x160, 0x1a3223, 0x1a3223, 0x160, 0x1a3223, 0x160, 0x1a33f1, 
        0x1a33f1, 0x160, 0x1a33f1, 0x160, 0x1a3484, 0x1a3484, 0x160, 0x1a3484, 0x160, 0x1a3503, 
        0x1a3503, 0x160, 0x1a3503, 0x160, 0x1a35e4, 0x1a35e4, 0x160, 0x19cf96, 0x160, 0x19cf9d, 
        0x1a35e4, 0x160, 0x1a35e4, 0x160, 0x1a3660, 0x1a3660, 0x160, 0x1a3660, 0x160, 0x1a3924, 
        0x1a3924, 0x160, 0x19cf96, 0x160, 0x19cf9d, 0x1a3924, 0x160, 0x1a3924, 0x160, 0x1a39f0, 
        0x1a39f0, 0x160, 0x19cf96, 0x160, 0x19cf9d, 0x1a39f0, 0x160, 0x1a39f0, 0x160, 0x1a3dab, 
        0x1a3dab, 0x160, 0x19cf96, 0x160, 0x19cf9a, 0x1a3dab, 0x160, 0x19cf9b, 0x160, 0x19cf9c, 
        0x1a3dab, 0x160, 0x1a3dab, 0x160, 0x1a3fb3, 0x1a3fb3, 0x160, 0x19cf93, 0x160, 0x19cf9d, 
        0x1a3fb3, 0x160, 0x1a3fb3, 0x160, 0x1a408b, 0x1a40e4, 0x160, 0x1a40e4, 0x160, 0x1a40f3, 
        0x1a40f3, 0x160, 0x1a40d5, 0x160, 0x1a40e4, 0x1a40f3, 0x160, 0x1a40f3, 0x160, 0x1a40fa, 
        0x1a413d, 0x160, 0x1a413d, 0x160, 0x1a4196, 0x1a4196, 0x160, 0x1a4196, 0x160, 0x1a41bf, 
        0x1a41bf, 0x160, 0x1a41bf, 0x160, 0x1a41da, 0x1a41d7, 0x160, 0x1a41d7, 0x160, 0x1a41da, 
        0x1a41da, 0x160, 0x1a41da, 0x160, 0x1a41ee, 0x1a41ee, 0x160, 0x1a41ee, 0x160, 0x1a4206, 
        0x1a4206, 0x160, 0x1a41f9, 0x160, 0x1a4210, 0x1a4210, 0x160, 0x1a4210, 0x160, 0x1a4261, 
        0x1a4261, 0x160, 0x1a41f9, 0x160, 0x1a4206, 0x1a4261, 0x160, 0x1a4261, 0x160, 0x1a426e, 
        0x1a426e, 0x160, 0x1a426e, 0x160, 0x1a4288, 0x1a4288, 0x160, 0x1a4288, 0x160, 0x1a4408, 
        0x1a4288, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a4408, 0x160, 0x1a4286, 0x160, 0x1a4288, 
        0x1a4408, 0x160, 0x1a4408, 0x160, 0x1a4432, 0x1a4432, 0x160, 0x1a4432, 0x160, 0x1a448f, 
        0x1a448f, 0x160, 0x1a448f, 0x160, 0x1a44d2, 0x1a44d2, 0x160, 0x1a44d2, 0x160, 0x1a44ff, 
        0x1a44ff, 0x160, 0x1a44ff, 0x160, 0x1a45ae, 0x1a45ae, 0x160, 0x1a45ae, 0x160, 0x1a45e9, 
        0x1a45e9, 0x160, 0x1a45e9, 0x160, 0x1a4626, 0x1a4626, 0x160, 0x1a4626, 0x160, 0x1a46ed, 
        0x1a46ed, 0x160, 0x1a46ed, 0x160, 0x1a4760, 0x1a4760, 0x160, 0x1a4760, 0x160, 0x1a47d9, 
        0x1a47d9, 0x160, 0x1a45a8, 0x160, 0x1a45ae, 0x1a47d9, 0x160, 0x1a47d9, 0x160, 0x1a484f, 
        0x1a484f, 0x160, 0x1a484f, 0x160, 0x1a488e, 0x1a488e, 0x160, 0x1a488e, 0x160, 0x1a4932, 
        0x1a488e, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a4932, 0x160, 0x1a4932, 0x160, 0x1a4983, 
        0x1a4983, 0x160, 0x1a4983, 0x160, 0x1a499a, 0x1a499a, 0x160, 0x1a499a, 0x160, 0x1a49c6, 
        0x1a49c6, 0x160, 0x1a49c6, 0x160, 0x1a4a08, 0x1a4a08, 0x160, 0x1a4a08, 0x160, 0x1a4a30, 
        0x1a4a30, 0x160, 0x1a4a30, 0x160, 0x1a4b85, 0x1a4a30, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a4b85, 0x160, 0x1a4b85, 0x160, 0x1a4c10, 0x1a4b85, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a4b85, 0x160, 0x1a5969, 0x160, 0x1a5973, 0x1a4b85, 0x160, 0x1a5d7c, 0x160, 0x1a5d8b, 
        0x1a4c10, 0x160, 0x1a4c10, 0x160, 0x1a4c45, 0x1a4c45, 0x160, 0x1a47d5, 0x160, 0x1a47d9, 
        0x1a4c45, 0x160, 0x1a4c45, 0x160, 0x1a4c9b, 0x1a4c9b, 0x160, 0x1a4c9b, 0x160, 0x1a4dc6, 
        0x1a4dc6, 0x160, 0x1a4dbf, 0x160, 0x1a4ebf, 0x1a4ebf, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 
        0x1a4ebf, 0x160, 0x1a4ebf, 0x160, 0x1a4f9d, 0x1a4f9d, 0x160, 0x1a4f9d, 0x160, 0x1a501b, 
        0x1a501b, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a501b, 0x160, 0x1a501b, 0x160, 0x1a5262, 
        0x1a5262, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a5262, 0x160, 0x1a5262, 0x160, 0x1a541a, 
        0x1a541a, 0x160, 0x1a541a, 0x160, 0x1a543c, 0x1a543c, 0x160, 0x1a543c, 0x160, 0x1a5460, 
        0x1a5460, 0x160, 0x1a5460, 0x160, 0x1a5541, 0x1a5541, 0x160, 0x1a492a, 0x160, 0x1a4932, 
        0x1a5541, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a5541, 0x160, 0x1a5541, 0x160, 0x1a55b1, 
        0x1a55b1, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a55b1, 0x160, 0x1a55b1, 0x160, 0x1a56f7, 
        0x1a56f7, 0x160, 0x1a56f7, 0x160, 0x1a5723, 0x1a5723, 0x160, 0x1a5723, 0x160, 0x1a5767, 
        0x1a5767, 0x160, 0x1a5767, 0x160, 0x1a5862, 0x1a5767, 0x160, 0x1a5b6b, 0x160, 0x1a5b7a, 
        0x1a5862, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a5862, 0x160, 0x1a5862, 0x160, 0x1a591a, 
        0x1a591a, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a591a, 0x160, 0x1a591a, 0x160, 0x1a5973, 
        0x1a591a, 0x160, 0x1a5d7c, 0x160, 0x1a5d8b, 0x1a5973, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a5973, 0x160, 0x1a5973, 0x160, 0x1a5a09, 0x1a5973, 0x160, 0x1a5d7c, 0x160, 0x1a5d8b, 
        0x1a5a09, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 0x1a5a09, 0x160, 0x1a5a09, 0x160, 0x1a5a79, 
        0x1a5a79, 0x160, 0x1a5a79, 0x160, 0x1a5aa6, 0x1a5aa6, 0x160, 0x1a5aa6, 0x160, 0x1a5af8, 
        0x1a5af8, 0x160, 0x1a5af8, 0x160, 0x1a5b7a, 0x1a5b7a, 0x160, 0x1a5b7a, 0x160, 0x1a5bab, 
        0x1a5bab, 0x160, 0x1a5bab, 0x160, 0x1a5bde, 0x1a5c69, 0x160, 0x1a5bde, 0x160, 0x1a5d2f, 
        0x1a5d2f, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a5d2f, 0x160, 0x1a5d2f, 0x160, 0x1a5d8b, 
        0x1a5d8b, 0x160, 0x1a5d8b, 0x160, 0x1a5df1, 0x1a5e0f, 0x160, 0x1a5e0f, 0x160, 0x1a5e27, 
        0x1a5e0f, 0x160, 0x1a5ee8, 0x160, 0x1a5eec, 0x1a5eec, 0x160, 0x1a5b61, 0x160, 0x1a5b7a, 
        0x1a5eec, 0x160, 0x1a5eec, 0x160, 0x1a5f40, 0x1a5f40, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a5f40, 0x160, 0x1a5d7c, 0x160, 0x1a5d8b, 0x1a5f40, 0x160, 0x1a5f40, 0x160, 0x1a5f9f, 
        0x1a5f9f, 0x160, 0x1a5f9f, 0x160, 0x1a60a8, 0x1a60a8, 0x160, 0x1a60a8, 0x160, 0x1a60fb, 
        0x1a60fb, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 0x1a60fb, 0x160, 0x1a60fb, 0x160, 0x1a6163, 
        0x1a6163, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a6163, 0x160, 0x1a5d64, 0x160, 0x1a5d8b, 
        0x1a6163, 0x160, 0x1a6163, 0x160, 0x1a619d, 0x1a619d, 0x160, 0x1a619d, 0x160, 0x1a626e, 
        0x1a626e, 0x160, 0x1a5b61, 0x160, 0x1a5b7a, 0x1a626e, 0x160, 0x1a626e, 0x160, 0x1a62b7, 
        0x1a62b7, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a62b7, 0x160, 0x1a5d64, 0x160, 0x1a5d8b, 
        0x1a62b7, 0x160, 0x1a62b7, 0x160, 0x1a62f1, 0x1a63ad, 0x160, 0x1a63ad, 0x160, 0x1a63f0, 
        0x1a63f0, 0x160, 0x1a63f0, 0x160, 0x1a645e, 0x1a645e, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a645e, 0x160, 0x1a5957, 0x160, 0x1a5973, 0x1a645e, 0x160, 0x1a5d7c, 0x160, 0x1a5d8b, 
        0x1a645e, 0x160, 0x1a645e, 0x160, 0x1a64a0, 0x1a64a0, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a64a0, 0x160, 0x1a56ef, 0x160, 0x1a56f7, 0x1a64a0, 0x160, 0x1a64a0, 0x160, 0x1a66c0, 
        0x1a66c0, 0x160, 0x1a5b61, 0x160, 0x1a5b7a, 0x1a66c0, 0x160, 0x1a66c0, 0x160, 0x1a671d, 
        0x1a671d, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a671d, 0x160, 0x1a5d64, 0x160, 0x1a5d8b, 
        0x1a671d, 0x160, 0x1a671d, 0x160, 0x1a675c, 0x1a675c, 0x160, 0x1a675c, 0x160, 0x1a679f, 
        0x1a679f, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a679f, 0x160, 0x1a5952, 0x160, 0x1a5973, 
        0x1a679f, 0x160, 0x1a5d7c, 0x160, 0x1a5d8b, 0x1a679f, 0x160, 0x1a679f, 0x160, 0x1a6813, 
        0x1a6813, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 0x1a6813, 0x160, 0x1a5a68, 0x160, 0x1a5a79, 
        0x1a6813, 0x160, 0x1a6813, 0x160, 0x1a6877, 0x1a68a3, 0x160, 0x1a68a3, 0x160, 0x1a68ba, 
        0x1a68a3, 0x160, 0x1a6a2b, 0x160, 0x1a6a30, 0x1a6a30, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 
        0x1a6a30, 0x160, 0x1a6154, 0x160, 0x1a6163, 0x1a6a30, 0x160, 0x1a6a30, 0x160, 0x1a6aa9, 
        0x1a6aa9, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a6aa9, 0x160, 0x1a5d64, 0x160, 0x1a5d8b, 
        0x1a6aa9, 0x160, 0x1a6aa9, 0x160, 0x1a6ae3, 0x1a6ae3, 0x160, 0x1a6ae3, 0x160, 0x1a6b49, 
        0x1a6b49, 0x160, 0x1a5b61, 0x160, 0x1a5b7a, 0x1a6b49, 0x160, 0x1a6b49, 0x160, 0x1a6b97, 
        0x1a6b97, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a6b97, 0x160, 0x1a5d64, 0x160, 0x1a5d8b, 
        0x1a6b97, 0x160, 0x1a6b97, 0x160, 0x1a6bd1, 0x1a6bd1, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a6bd1, 0x160, 0x1a6bd1, 0x160, 0x1a6cdc, 0x1a6cdc, 0x160, 0x1a6cdc, 0x160, 0x1a6d43, 
        0x1a6d43, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 0x1a6d43, 0x160, 0x1a6d43, 0x160, 0x1a6dd0, 
        0x1a6dd0, 0x160, 0x1a6dd0, 0x160, 0x1a6de0, 0x1a6de0, 0x160, 0x1a6de0, 0x160, 0x1a6e11, 
        0x1a6e11, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 0x1a6e11, 0x160, 0x1a6e11, 0x160, 0x1a6ea9, 
        0x1a6ea9, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 0x1a6ea9, 0x160, 0x1a6e9f, 0x160, 0x1a6f7e, 
        0x1a6f7e, 0x160, 0x1a6f7e, 0x160, 0x1a6fee, 0x1a6fee, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a6fee, 0x160, 0x1a6fee, 0x160, 0x1a705e, 0x1a705e, 0x160, 0x1a705e, 0x160, 0x1a710d, 
        0x1a710d, 0x160, 0x1a6fdc, 0x160, 0x1a6fee, 0x1a710d, 0x160, 0x1a710d, 0x160, 0x1a7176, 
        0x1a7176, 0x160, 0x1a7176, 0x160, 0x1a71d2, 0x1a71d2, 0x160, 0x1a71d2, 0x160, 0x1a7205, 
        0x1a7205, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a7205, 0x160, 0x1a59fe, 0x160, 0x1a5a09, 
        0x1a7205, 0x160, 0x1a5d7c, 0x160, 0x1a5d8b, 0x1a7205, 0x160, 0x1a7205, 0x160, 0x1a725c, 
        0x1a725c, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a725c, 0x160, 0x1a725c, 0x160, 0x1a73f7, 
        0x1a73f7, 0x160, 0x1a45a8, 0x160, 0x1a45ad, 0x1a73f7, 0x160, 0x1a73f7, 0x160, 0x1a7497, 
        0x1a7497, 0x160, 0x1a7497, 0x160, 0x1a7548, 0x1a7548, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a7548, 0x160, 0x1a5d64, 0x160, 0x1a5d8b, 0x1a7548, 0x160, 0x1a7548, 0x160, 0x1a7582, 
        0x1a7582, 0x160, 0x1a7582, 0x160, 0x1a75c5, 0x1a75c5, 0x160, 0x1a7535, 0x160, 0x1a7548, 
        0x1a75c5, 0x160, 0x1a75c5, 0x160, 0x1a761d, 0x1a761d, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a761d, 0x160, 0x1a5d64, 0x160, 0x1a5d8b, 0x1a761d, 0x160, 0x1a761d, 0x160, 0x1a7657, 
        0x1a7657, 0x160, 0x1a7657, 0x160, 0x1a768f, 0x1a76bf, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a76bf, 0x160, 0x1a76bf, 0x160, 0x1a7927, 0x1a76bf, 0x160, 0x1a796e, 0x160, 0x1a79ad, 
        0x1a76bf, 0x160, 0x1a7a40, 0x160, 0x1a7a65, 0x1a76bf, 0x160, 0x1a7a84, 0x160, 0x1a7af5, 
        0x1a7af5, 0x160, 0x1a7af5, 0x160, 0x1a7b52, 0x1a7bba, 0x160, 0x1a7bba, 0x160, 0x1a7ca1, 
        0x1a7ca1, 0x160, 0x1a7ca1, 0x160, 0x1a7ccd, 0x1a7d1f, 0x160, 0x1a7d1f, 0x160, 0x1a7d4b, 
        0x1a7d4b, 0x160, 0x1a5b6b, 0x160, 0x1a5b7a, 0x1a7d4b, 0x160, 0x1a7d4b, 0x160, 0x1a7dac, 
        0x1a7dac, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a7dac, 0x160, 0x1a5d64, 0x160, 0x1a5d8b, 
        0x1a7dac, 0x160, 0x1a7dac, 0x160, 0x1a7de6, 0x1a7de6, 0x160, 0x1a7de6, 0x160, 0x1a7e16, 
        0x1a7e16, 0x160, 0x1a7e16, 0x160, 0x1a7efc, 0x1a7f44, 0x160, 0x1a7f44, 0x160, 0x1a7f75, 
        0x1a7f75, 0x160, 0x1a7f75, 0x160, 0x1a7fb4, 0x1a7fb4, 0x160, 0x1a7fb4, 0x160, 0x1a8011, 
        0x1a8011, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a8011, 0x160, 0x1a8011, 0x160, 0x1a8157, 
        0x1a8178, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 0x1a8178, 0x160, 0x1a8178, 0x160, 0x1a83f1, 
        0x1a83f1, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a83f1, 0x160, 0x1a6ccb, 0x160, 0x1a6cdc, 
        0x1a83f1, 0x160, 0x1a83f1, 0x160, 0x1a84f3, 0x1a84f3, 0x160, 0x1a84f3, 0x160, 0x1a8545, 
        0x1a8545, 0x160, 0x1a8545, 0x160, 0x1a86f4, 0x1a86f4, 0x160, 0x1a60a2, 0x160, 0x1a60a8, 
        0x1a86f4, 0x160, 0x1a7b52, 0x160, 0x1a7bba, 0x1a86f4, 0x160, 0x1a86f4, 0x160, 0x1a87d4, 
        0x1a87d4, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a87d4, 0x160, 0x1a87d4, 0x160, 0x1a881e, 
        0x1a881e, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a881e, 0x160, 0x1a881e, 0x160, 0x1a88d5, 
        0x1a88d5, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a88d5, 0x160, 0x1a88d5, 0x160, 0x1a8984, 
        0x1a8984, 0x160, 0x1a8984, 0x160, 0x1a89de, 0x1a89de, 0x160, 0x1a4dbf, 0x160, 0x1a4dc5, 
        0x1a89de, 0x160, 0x1a89de, 0x160, 0x1a8b51, 0x1a8b51, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a8b51, 0x160, 0x1a8b51, 0x160, 0x1a8c57, 0x1a8d71, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a8d71, 0x160, 0x1a8d71, 0x160, 0x1a8fd7, 0x1a8fd7, 0x160, 0x1a4dc0, 0x160, 0x1a4dc6, 
        0x1a8fd7, 0x160, 0x1a8fd7, 0x160, 0x1a9122, 0x1a9122, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a9122, 0x160, 0x1a8b49, 0x160, 0x1a8b51, 0x1a9122, 0x160, 0x1a9122, 0x160, 0x1a9280, 
        0x1a92b5, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a92b5, 0x160, 0x1a92b5, 0x160, 0x1a937c, 
        0x1a937c, 0x160, 0x1a4dbc, 0x160, 0x1a4dc6, 0x1a937c, 0x160, 0x1a937c, 0x160, 0x1a953d, 
        0x1a953d, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 0x1a953d, 0x160, 0x1a953d, 0x160, 0x1a9702, 
        0x1a9702, 0x160, 0x1a9702, 0x160, 0x1a972c, 0x1a972c, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a972c, 0x160, 0x1a972c, 0x160, 0x1a9969, 0x1a9969, 0x160, 0x1a9969, 0x160, 0x1a999d, 
        0x1a999d, 0x160, 0x1a4489, 0x160, 0x1a448f, 0x1a999d, 0x160, 0x1a999d, 0x160, 0x1a9a89, 
        0x1a9b45, 0x160, 0x1a9b45, 0x160, 0x1a9b6a, 0x1a9b6a, 0x160, 0x1a4dbf, 0x160, 0x1a4dc6, 
        0x1a9b6a, 0x160, 0x1a9b6a, 0x160, 0x1a9caa, 0x1a9caa, 0x160, 0x1a9caa, 0x160, 0x1a9cc8, 
        0x1a9cc8, 0x160, 0x1a9cc8, 0x160, 0x1a9cfc, 0x1a9cfc, 0x160, 0x1a9cfc, 0x160, 0x1a9d32, 
        0x1a9d32, 0x160, 0x1a9d32, 0x160, 0x1a9e1e, 0x1a9ef6, 0x160, 0x1a9ef6, 0x160, 0x1a9f0b, 
        0x1a9f6e, 0x160, 0x1a9f6e, 0x160, 0x1aa241, 0x1aa241, 0x160, 0x1aa241, 0x160, 0x1aa2cb, 
        0x1aa2cb, 0x160, 0x1aa2cb, 0x160, 0x1aa365, 0x1aa2cb, 0x160, 0x1aa4d0, 0x160, 0x1aa4d6, 
        0x1aa365, 0x160, 0x1aa365, 0x160, 0x1aa4d6, 0x1aa4d6, 0x160, 0x1aa4cc, 0x160, 0x1aa5ff, 
        0x1aa617, 0x160, 0x1aa4cf, 0x160, 0x1aa4d6, 0x1aa617, 0x160, 0x1aa617, 0x160, 0x1aa6f5, 
        0x1aa6f5, 0x160, 0x1aa6f5, 0x160, 0x1aa739, 0x1aa739, 0x160, 0x1aa739, 0x160, 0x1aa77b, 
        0x1aa77b, 0x160, 0x1aa77b, 0x160, 0x1aa7bd, 0x1aa7bd, 0x160, 0x1aa7bd, 0x160, 0x1aa7e9, 
        0x1aa7e9, 0x160, 0x1aa7e9, 0x160, 0x1aa9c7, 0x1aa9c8, 0x160, 0x1aa9c8, 0x160, 0x1aaaf1, 
        0x1aa9c8, 0x160, 0x1afe30, 0x160, 0x1afe37, 0x1aaaf1, 0x160, 0x1aaaf1, 0x160, 0x1aac35, 
        0x1aaaf1, 0x160, 0x1afe2d, 0x160, 0x1afe37, 0x1aac35, 0x160, 0x1aac35, 0x160, 0x1aac47, 
        0x1aac47, 0x160, 0x1aac47, 0x160, 0x1aac71, 0x1aac75, 0x160, 0x1aac75, 0x160, 0x1aad07, 
        0x1aad07, 0x160, 0x1aad07, 0x160, 0x1aad47, 0x1aae8f, 0x160, 0x1aae8f, 0x160, 0x1aaeb4, 
        0x1aaeb4, 0x160, 0x1aaeb4, 0x160, 0x1aaf5d, 0x1aaeb4, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1aaf5d, 0x160, 0x1aaf5d, 0x160, 0x1ab045, 0x1ab048, 0x160, 0x1ab048, 0x160, 0x1ab0bd, 
        0x1ab0bd, 0x160, 0x1ab0bd, 0x160, 0x1ab1a0, 0x1ab1a0, 0x160, 0x1ab1a0, 0x160, 0x1ab28b, 
        0x1ab28b, 0x160, 0x1ab28b, 0x160, 0x1ab3b0, 0x1ab3b0, 0x160, 0x1ab3b0, 0x160, 0x1ab4d5, 
        0x1ab4d5, 0x160, 0x1ab4d5, 0x160, 0x1ab614, 0x1ab4d5, 0x160, 0x1afe31, 0x160, 0x1afe37, 
        0x1ab614, 0x160, 0x1ab614, 0x160, 0x1ab7bc, 0x1ab7bc, 0x160, 0x1ab042, 0x160, 0x1ab048, 
        0x1ab7bc, 0x160, 0x1ab7bc, 0x160, 0x1abac7, 0x1abac7, 0x160, 0x1abac7, 0x160, 0x1abc5e, 
        0x1abac7, 0x160, 0x1acf3b, 0x160, 0x1acf41, 0x1abc5e, 0x160, 0x1abc5e, 0x160, 0x1abc81, 
        0x1abc81, 0x160, 0x1abc81, 0x160, 0x1abcdb, 0x1abcdb, 0x160, 0x1abcdb, 0x160, 0x1abd3c, 
        0x1abd3c, 0x160, 0x1abd3c, 0x160, 0x1abdc2, 0x1abd3c, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1abdc2, 0x160, 0x1abdc2, 0x160, 0x1abe6f, 0x1abdc2, 0x160, 0x1afe31, 0x160, 0x1afe37, 
        0x1abe6f, 0x160, 0x1abe6f, 0x160, 0x1ac076, 0x1ac076, 0x160, 0x1ac076, 0x160, 0x1ac0ac, 
        0x1ac0ac, 0x160, 0x1ac0ac, 0x160, 0x1ac0e6, 0x1ac0e6, 0x160, 0x1ac0e6, 0x160, 0x1ac14b, 
        0x1ac14b, 0x160, 0x1ac14b, 0x160, 0x1ac319, 0x1ac14b, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1ac6c2, 0x160, 0x1ac6c2, 0x160, 0x1acf41, 0x1acf41, 0x160, 0x1acf41, 0x160, 0x1acf83, 
        0x1acf85, 0x160, 0x1acf85, 0x160, 0x1acfbc, 0x1acfbe, 0x160, 0x1acfbe, 0x160, 0x1ad021, 
        0x1ad023, 0x160, 0x1ad023, 0x160, 0x1ad0a9, 0x1ad023, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1ad0a9, 0x160, 0x1ad0a9, 0x160, 0x1ad60c, 0x1ad0a9, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1ad60c, 0x160, 0x1abe65, 0x160, 0x1abe6f, 0x1ad60c, 0x160, 0x1ad60c, 0x160, 0x1ad6ac, 
        0x1ad60c, 0x160, 0x1afe31, 0x160, 0x1afe37, 0x1ad6ac, 0x160, 0x1ad6ac, 0x160, 0x1adb5e, 
        0x1ad6ac, 0x160, 0x1afe30, 0x160, 0x1afe37, 0x1adb5e, 0x160, 0x1adb5e, 0x160, 0x1add0c, 
        0x1adb5e, 0x160, 0x1afe30, 0x160, 0x1afe37, 0x1add0c, 0x160, 0x1add0c, 0x160, 0x1addbd, 
        0x1addbd, 0x160, 0x1addbd, 0x160, 0x1aded3, 0x1aded4, 0x160, 0x1adecd, 0x160, 0x1aded3, 
        0x1aded4, 0x160, 0x1aded4, 0x160, 0x1adfd8, 0x1ae085, 0x160, 0x1ae085, 0x160, 0x1ae150, 
        0x1ae150, 0x160, 0x1ae150, 0x160, 0x1ae178, 0x1ae178, 0x160, 0x1ae178, 0x160, 0x1ae440, 
        0x1ae440, 0x160, 0x1ae440, 0x160, 0x1ae4cd, 0x1ae4cd, 0x160, 0x1ae4cd, 0x160, 0x1aeb5f, 
        0x1ae4cd, 0x160, 0x1afe30, 0x160, 0x1afe37, 0x1aeb5f, 0x160, 0x1aeb5f, 0x160, 0x1aebd1, 
        0x1aebd1, 0x160, 0x1aebd1, 0x160, 0x1aecd8, 0x1aebd1, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1aecd8, 0x160, 0x1acf38, 0x160, 0x1acf3e, 0x1aecd8, 0x160, 0x1aecd8, 0x160, 0x1af1f8, 
        0x1af1f8, 0x160, 0x1acf3b, 0x160, 0x1acf3e, 0x1af1f8, 0x160, 0x1af1f8, 0x160, 0x1af790, 
        0x1af790, 0x160, 0x1af790, 0x160, 0x1af8ac, 0x1af8ad, 0x160, 0x1af8a5, 0x160, 0x1af8ac, 
        0x1af8ad, 0x160, 0x1af8ad, 0x160, 0x1af9a5, 0x1af9a5, 0x160, 0x1af9a5, 0x160, 0x1afa94, 
        0x1afa94, 0x160, 0x1afa94, 0x160, 0x1afb99, 0x1afb99, 0x160, 0x1afb99, 0x160, 0x1afc31, 
        0x1afc31, 0x160, 0x1afc31, 0x160, 0x1afcc3, 0x1afcc3, 0x160, 0x1afcc3, 0x160, 0x1afe37, 
        0x1afe37, 0x160, 0x1afe31, 0x160, 0x1aff0f, 0x1aff0f, 0x160, 0x1aff0f, 0x160, 0x1affa8, 
        0x1affa8, 0x160, 0x1afe25, 0x160, 0x1afe37, 0x1affa8, 0x160, 0x1affa8, 0x160, 0x1b010b, 
        0x1b010b, 0x160, 0x1afe30, 0x160, 0x1afe32, 0x1b010b, 0x160, 0x1afe33, 0x160, 0x1afe36, 
        0x1b010b, 0x160, 0x1b010b, 0x160, 0x1b01ef, 0x1b01ef, 0x160, 0x1afe30, 0x160, 0x1afe32, 
        0x1b01ef, 0x160, 0x1afe33, 0x160, 0x1afe36, 0x1b01ef, 0x160, 0x1b01e5, 0x160, 0x1b02ce, 
        0x1b02ce, 0x160, 0x1afe30, 0x160, 0x1afe32, 0x1b02ce, 0x160, 0x1afe33, 0x160, 0x1afe36, 
        0x1b02ce, 0x160, 0x1b01e5, 0x160, 0x1b01ef, 0x1b02ce, 0x160, 0x1b02ce, 0x160, 0x1b03ad, 
        0x1b03ad, 0x160, 0x1aaae9, 0x160, 0x1aaaf1, 0x1b03ad, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1b03ad, 0x160, 0x1b03ad, 0x160, 0x1b0578, 0x1b0578, 0x160, 0x1acf3c, 0x160, 0x1acf3e, 
        0x1b0578, 0x160, 0x1b0578, 0x160, 0x1b05c1, 0x1b0578, 0x160, 0x1b05c6, 0x160, 0x1b06c0, 
        0x1b0578, 0x160, 0x1b06c5, 0x160, 0x1b06e9, 0x1b06e9, 0x160, 0x1acf3c, 0x160, 0x1acf3e, 
        0x1b06e9, 0x160, 0x1b06e9, 0x160, 0x1b075f, 0x1b06e9, 0x160, 0x1b0764, 0x160, 0x1b087f, 
        0x1b06e9, 0x160, 0x1b0884, 0x160, 0x1b08a8, 0x1b08a8, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1b08a8, 0x160, 0x1b08a8, 0x160, 0x1b0956, 0x1b0956, 0x160, 0x1b0956, 0x160, 0x1b09c0, 
        0x1b09c0, 0x160, 0x1aeb57, 0x160, 0x1aeb5f, 0x1b09c0, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1b09c0, 0x160, 0x1b09c0, 0x160, 0x1b0ce8, 0x1b0ce8, 0x160, 0x1afe31, 0x160, 0x1afe37, 
        0x1b0ce8, 0x160, 0x1b0ce8, 0x160, 0x1b0d5d, 0x1b0d5d, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1b0d5d, 0x160, 0x1b0d5d, 0x160, 0x1b0f94, 0x1b0f94, 0x160, 0x1afe31, 0x160, 0x1afe37, 
        0x1b0f94, 0x160, 0x1b0f94, 0x160, 0x1b106c, 0x1b106c, 0x160, 0x1b106c, 0x160, 0x1b1153, 
        0x1b1153, 0x160, 0x1aeb57, 0x160, 0x1aeb5f, 0x1b1153, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1b1153, 0x160, 0x1b1153, 0x160, 0x1b13ae, 0x1b13ae, 0x160, 0x1afe31, 0x160, 0x1afe37, 
        0x1b13ae, 0x160, 0x1b13ae, 0x160, 0x1b1477, 0x1b1477, 0x160, 0x1acf3b, 0x160, 0x1acf41, 
        0x1b1477, 0x160, 0x1b1477, 0x160, 0x1b1589, 0x1b1589, 0x160, 0x1afb93, 0x160, 0x1afb99, 
        0x1b1589, 0x160, 0x1b1589, 0x160, 0x1b1620, 0x1b1589, 0x160, 0x1b1625, 0x160, 0x1b162d, 
        0x1b162d, 0x160, 0x1b162d, 0x160, 0x1b1714, 0x1b162d, 0x160, 0x1b1719, 0x160, 0x1b1720, 
        0x1b1722, 0x160, 0x1afc2a, 0x160, 0x1afc2f, 0x1b1722, 0x160, 0x1b1722, 0x160, 0x1b183d, 
        0x1b1722, 0x160, 0x1b1842, 0x160, 0x1b1875, 0x1b1722, 0x160, 0x1b187a, 0x160, 0x1b1884, 
        0x1b1884, 0x160, 0x1afe31, 0x160, 0x1afe37, 0x1b1884, 0x160, 0x1b1884, 0x160, 0x1b199d, 
        0x1b199d, 0x160, 0x1afe30, 0x160, 0x1afe37, 0x1b199d, 0x160, 0x1b199d, 0x160, 0x1b1ae5, 
        0x1b1b53, 0x160, 0x1afe30, 0x160, 0x1afe37, 0x1b1b53, 0x160, 0x1b1b53, 0x160, 0x1b1bcf, 
        0x1b1bcf, 0x160, 0x1b1bcf, 0x160, 0x1b1c30, 0x1b1c2f, 0x160, 0x1b1c2f, 0x160, 0x1b1c30, 
        0x1b1c89, 0x160, 0x1b1c89, 0x160, 0x1b1d43, 0x1b1dfc, 0x160, 0x1ab042, 0x160, 0x1ab048, 
        0x1b1dfc, 0x160, 0x1b1dfc, 0x160, 0x1b1ed1, 0x1b1ed1, 0x160, 0x1afe2d, 0x160, 0x1afe34, 
        0x1b1ed1, 0x160, 0x1afe35, 0x160, 0x1afe36, 0x1b1ed1, 0x160, 0x1b1ed1, 0x160, 0x1b2062, 
        0x1b2062, 0x160, 0x1b2062, 0x160, 0x1b2097, 0x1b2097, 0x160, 0x1afe30, 0x160, 0x1afe37, 
        0x1b2097, 0x160, 0x1b2097, 0x160, 0x1b22a7, 0x1b2507, 0x160, 0x1b2507, 0x160, 0x1b2508, 
        0x1b2706, 0x160, 0x1aaf55, 0x160, 0x1aaf5d, 0x1b2706, 0x160, 0x1afe30, 0x160, 0x1afe32, 
        0x1b2706, 0x160, 0x1afe33, 0x160, 0x1afe36, 0x1b2706, 0x160, 0x1b2706, 0x160, 0x1b2853, 
        0x1b2c74, 0x160, 0x1b2c74, 0x160, 0x1b2c75, 0x1b32d4, 0x160, 0x1b32d4, 0x160, 0x1b331f, 
        0x1b331f, 0x160, 0x1afe30, 0x160, 0x1afe37, 0x1b331f, 0x160, 0x1b331f, 0x160, 0x1b348a, 
        0x1b348a, 0x160, 0x1afe2d, 0x160, 0x1afe37, 0x1b348a, 0x160, 0x1b348a, 0x160, 0x1b3589, 
        0x1b3780, 0x160, 0x1b3780, 0x160, 0x1b38b7, 0x1b396c, 0x160, 0x1b396c, 0x160, 0x1b396d, 
        0x1b39a9, 0x160, 0x1b39a9, 0x160, 0x1b3a39, 0x1b39a9, 0x160, 0x1b69f3, 0x160, 0x1b69fa, 
        0x1b3a39, 0x160, 0x1b3a39, 0x160, 0x1b3a4f, 0x1b3e6c, 0x160, 0x1b3e6c, 0x160, 0x1b3ea0, 
        0x1b403a, 0x160, 0x1b403a, 0x160, 0x1b427c, 0x1b43e8, 0x160, 0x1b3c2e, 0x160, 0x1b3c34, 
        0x1b43e8, 0x160, 0x1b43e8, 0x160, 0x1b465a, 0x1b47fd, 0x160, 0x1b47fd, 0x160, 0x1b483f, 
        0x1b483f, 0x160, 0x1b483f, 0x160, 0x1b48b1, 0x1b742d, 0x160, 0x1b69f3, 0x160, 0x1b69fa, 
        0x1b742d, 0x160, 0x1b742d, 0x160, 0x1b7463, 0x1b7a0e, 0x160, 0x1b7a0e, 0x160, 0x1b7a70, 
        0x1b7a70, 0x160, 0x1b7a70, 0x160, 0x1b7ace, 0x1b7ace, 0x160, 0x1b7ace, 0x160, 0x1b7b0e, 
        0x1b7b0e, 0x160, 0x1b7b0e, 0x160, 0x1b7b4c, 0x1b7b4c, 0x160, 0x1b7b4c, 0x160, 0x1b7b8f, 
        0x1b7b8f, 0x160, 0x1b7b8f, 0x160, 0x1b7bb4, 0x1b7bb4, 0x160, 0x1b7bb4, 0x160, 0x1b7c94, 
        0x1b7de6, 0x160, 0x1b7de6, 0x160, 0x1b7e2c, 0x1b7e2c, 0x160, 0x1b7e27, 0x160, 0x1b7e4f, 
        0x1b7e84, 0x160, 0x1b7e84, 0x160, 0x1b7ece, 0x1b7f05, 0x160, 0x1b7ec8, 0x160, 0x1b7ece, 
        0x1b7f05, 0x160, 0x1b7f05, 0x160, 0x1b7f2d, 0x1b7f2d, 0x160, 0x1b7f2d, 0x160, 0x1b7f5b, 
        0x1b7f5b, 0x160, 0x1b7f5b, 0x160, 0x1b7f89, 0x1b7fe1, 0x160, 0x1b7fe1, 0x160, 0x1b8023, 
        0x1b8023, 0x160, 0x1b8023, 0x160, 0x1b8061, 0x1b8061, 0x160, 0x1b8061, 0x160, 0x1b8106, 
        0x1b8158, 0x160, 0x1b8158, 0x160, 0x1b819a, 0x1b819a, 0x160, 0x1b819a, 0x160, 0x1b8222, 
        0x1b8222, 0x160, 0x1b8222, 0x160, 0x1b8403, 0x1b8406, 0x160, 0x1b8406, 0x160, 0x1b8571, 
        0x1b8571, 0x160, 0x1b8571, 0x160, 0x1b85c3, 0x1b85c3, 0x160, 0x1b85c3, 0x160, 0x1b85ea, 
        0x1b85ea, 0x160, 0x1b85ea, 0x160, 0x1b86db, 0x1b86db, 0x160, 0x1b86db, 0x160, 0x1b87da, 
        0x1b87da, 0x160, 0x1b87da, 0x160, 0x1b883f, 0x1b883f, 0x160, 0x1b883f, 0x160, 0x1b8896, 
        0x1b8896, 0x160, 0x1b8896, 0x160, 0x1b88e9, 0x1b88e9, 0x160, 0x1b88e9, 0x160, 0x1b8929, 
        0x1b8929, 0x160, 0x1b8929, 0x160, 0x1b89c2, 0x1b89c2, 0x160, 0x1b89c2, 0x160, 0x1b8a03, 
        0x1b8a03, 0x160, 0x1b8a03, 0x160, 0x1b8c22, 0x1b8c22, 0x160, 0x1b8c22, 0x160, 0x1b8cbb, 
        0x1b8cbe, 0x160, 0x1b8cbe, 0x160, 0x1b8e52, 0x1b8fa1, 0x160, 0x1b8fa1, 0x160, 0x1b9045, 
        0x1b9045, 0x160, 0x1b9045, 0x160, 0x1b9118, 0x1b9118, 0x160, 0x1b8c1b, 0x160, 0x1b8c22, 
        0x1b9118, 0x160, 0x1b9118, 0x160, 0x1b923b, 0x1b923b, 0x160, 0x1b923b, 0x160, 0x1b92e3, 
        0x1b923b, 0x160, 0x1b938c, 0x160, 0x1b939a, 0x1b92e3, 0x160, 0x1b92e3, 0x160, 0x1b939a, 
        0x1b939a, 0x160, 0x1b9316, 0x160, 0x1b93d9, 0x1b93d9, 0x160, 0x1b93d9, 0x160, 0x1b940e, 
        0x1b93d9, 0x160, 0x1b9413, 0x160, 0x1b9489, 0x1b9489, 0x160, 0x1b9489, 0x160, 0x1b95d0, 
        0x1b95d0, 0x160, 0x1b95d0, 0x160, 0x1b9691, 0x1b9691, 0x160, 0x1b95d0, 0x160, 0x1b969f, 
        0x1b969f, 0x160, 0x1b969f, 0x160, 0x1b976b, 0x1b976b, 0x160, 0x1b85c3, 0x160, 0x1b85ea, 
        0x1b976b, 0x160, 0x1b976b, 0x160, 0x1b97ac, 0x1b97ac, 0x160, 0x1b97ac, 0x160, 0x1b9817, 
        0x1b9817, 0x160, 0x1b9817, 0x160, 0x1b988f, 0x1b988f, 0x160, 0x1b988f, 0x160, 0x1b99fe, 
        0x1b9b4a, 0x160, 0x1b8c1b, 0x160, 0x1b8c22, 0x1b9b4a, 0x160, 0x1b9b4a, 0x160, 0x1b9c1d, 
        0x1b9c1d, 0x160, 0x1b9c1d, 0x160, 0x1b9c93, 0x1b9c93, 0x160, 0x1b8c1c, 0x160, 0x1b8c21, 
        0x1b9c93, 0x160, 0x1b9c93, 0x160, 0x1b9df4, 0x1b9df4, 0x160, 0x1b9df4, 0x160, 0x1b9e03, 
        0x1b9df4, 0x160, 0x1c8c94, 0x160, 0x1c8cf2, 0x1b9e65, 0x160, 0x1b9e65, 0x160, 0x1b9e8f, 
        0x1b9ebd, 0x160, 0x1b9ebd, 0x160, 0x1b9ef6, 0x1b9ef6, 0x160, 0x1b8c1c, 0x160, 0x1b8c22, 
        0x1b9ef6, 0x160, 0x1b9ef6, 0x160, 0x1b9f2c, 0x1b9f2c, 0x160, 0x1b9f2c, 0x160, 0x1b9f73, 
        0x1b9f73, 0x160, 0x1b9f73, 0x160, 0x1b9fce, 0x1ba305, 0x160, 0x1ba305, 0x160, 0x1ba31d, 
        0x1ba31d, 0x160, 0x1ba31d, 0x160, 0x1ba34f, 0x1ba3f2, 0x160, 0x1ba3f2, 0x160, 0x1ba422, 
        0x1ba491, 0x160, 0x1ba491, 0x160, 0x1ba4b5, 0x1ba4b5, 0x160, 0x1ba4b5, 0x160, 0x1ba52c, 
        0x1ba52c, 0x160, 0x1ba52c, 0x160, 0x1ba547, 0x1ba547, 0x160, 0x1b9394, 0x160, 0x1b939a, 
        0x1ba547, 0x160, 0x1ba547, 0x160, 0x1ba636, 0x1bae66, 0x160, 0x1b9394, 0x160, 0x1b939a, 
        0x1bae66, 0x160, 0x1bae66, 0x160, 0x1bb04a, 0x1bb45a, 0x160, 0x1b8c1b, 0x160, 0x1b8c22, 
        0x1bb45a, 0x160, 0x1bb45a, 0x160, 0x1bb57d, 0x1bc02f, 0x160, 0x1bc02f, 0x160, 0x1bce73, 
        0x1bce74, 0x160, 0x1bce74, 0x160, 0x1bd88b, 0x1bce74, 0x160, 0x1bd88c, 0x160, 0x1bdb99, 
        0x1bdba0, 0x160, 0x1bdba0, 0x160, 0x1bdc69, 0x1bdba0, 0x160, 0x1bdc6c, 0x160, 0x1c05c3, 
        0x1c05c4, 0x160, 0x1c05c4, 0x160, 0x1c0707, 0x1c05c4, 0x160, 0x1c0708, 0x160, 0x1c46f3, 
        0x1c4758, 0x160, 0x1c4758, 0x160, 0x1c4a7b, 0x1c4a7b, 0x160, 0x1c4a7b, 0x160, 0x1c4d1e, 
        0x1c4d1e, 0x160, 0x1c4d1e, 0x160, 0x1c4d61, 0x1c4d61, 0x160, 0x1c4d61, 0x160, 0x1c4dac, 
        0x1c4e46, 0x160, 0x1c4e46, 0x160, 0x1c4e75, 0x1c4e75, 0x160, 0x1c4e75, 0x160, 0x1c4ef2, 
        0x1c4ef3, 0x160, 0x1c4ef3, 0x160, 0x1c4f03, 0x1c4ef3, 0x160, 0x1c4f04, 0x160, 0x1c6386, 
        0x1c6386, 0x160, 0x1c6386, 0x160, 0x1c6393, 0x1c6386, 0x160, 0x1c6394, 0x160, 0x1c79f6, 
        0x1c79f6, 0x160, 0x1c79f6, 0x160, 0x1c7aaf, 0x1c7aaf, 0x160, 0x1c7aaf, 0x160, 0x1c7b5e, 
        0x1c7b60, 0x160, 0x1c7b60, 0x160, 0x1c7c01, 0x1c7c02, 0x160, 0x1c7c02, 0x160, 0x1c7c1e, 
        0x1c7c1f, 0x160, 0x1c7c1f, 0x160, 0x1c7c4c, 0x1c7c4c, 0x160, 0x1c7c4c, 0x160, 0x1c7c4e, 
        0x1c7cc4, 0x160, 0x1c7cc4, 0x160, 0x1c7edd, 0x1c7cc4, 0x160, 0x1c7f00, 0x160, 0x1c7f15, 
        0x1c7edd, 0x160, 0x1c7edd, 0x160, 0x1c7f15, 0x1c7f24, 0x160, 0x1c7f24, 0x160, 0x1c7f29, 
        0x1c7f2e, 0x160, 0x1c7f2e, 0x160, 0x1c7f50, 0x1c7f51, 0x160, 0x1c7f51, 0x160, 0x1c7f69, 
        0x1c7f69, 0x160, 0x1c7edb, 0x160, 0x1c7edd, 0x1c7f69, 0x160, 0x1c7f00, 0x160, 0x1c7f15, 
        0x1c7f69, 0x160, 0x1c7f69, 0x160, 0x1c7f7f, 0x1c7f7f, 0x160, 0x1c7f7f, 0x160, 0x1c7f8d, 
        0x1c7fa7, 0x160, 0x1c7fa7, 0x160, 0x1c7fdb, 0x1c7fdb, 0x160, 0x1c7fdb, 0x160, 0x1c8006, 
        0x1c8010, 0x160, 0x1c8010, 0x160, 0x1c8041, 0x1c8047, 0x160, 0x1c8047, 0x160, 0x1c80b3, 
        0x1c80b3, 0x160, 0x1c80b3, 0x160, 0x1c8167, 0x1c8167, 0x160, 0x1c8167, 0x160, 0x1c81fa, 
        0x1c8167, 0x160, 0x1c81fb, 0x160, 0x1c822e, 0x1c822f, 0x160, 0x1c822f, 0x160, 0x1c824a, 
        0x1c824a, 0x160, 0x1c824a, 0x160, 0x1c8254, 0x1c82e0, 0x160, 0x1c82e0, 0x160, 0x1c8322, 
        0x1c8322, 0x160, 0x1c8322, 0x160, 0x1c841e, 0x1c841e, 0x160, 0x1c841e, 0x160, 0x1c844e, 
        0x1c844e, 0x160, 0x1c844e, 0x160, 0x1c847d, 0x1c847d, 0x160, 0x1c847d, 0x160, 0x1c8492, 
        0x1c8492, 0x160, 0x1c8492, 0x160, 0x1c849e, 0x1c849e, 0x160, 0x1c849e, 0x160, 0x1c8507, 
        0x1c8507, 0x160, 0x1c8507, 0x160, 0x1c8590, 0x1c8590, 0x160, 0x1c8590, 0x160, 0x1c8759, 
        0x1c875a, 0x160, 0x1c875a, 0x160, 0x1c8793, 0x1c897a, 0x160, 0x1c897a, 0x160, 0x1c8995, 
        0x1c8995, 0x160, 0x1c8995, 0x160, 0x1c899d, 0x1c899d, 0x160, 0x1c899d, 0x160, 0x1c89a8, 
        0x1c89b1, 0x160, 0x1c89b1, 0x160, 0x1c8a0b, 0x1c8a0b, 0x160, 0x1c8a0b, 0x160, 0x1c8a2a, 
        0x1c8a2a, 0x160, 0x1c8a2a, 0x160, 0x1c8a2f, 0x1c8bb1, 0x160, 0x1c8bb1, 0x160, 0x1c8c94, 
        0x1c8c94, 0x160, 0x1c8c94, 0x160, 0x1c8cf2, 0x1c8cf2, 0x160, 0x1c8cf2, 0x160, 0x1c8d0b, 
        0x1c8d0b, 0x160, 0x1c8d0b, 0x160, 0x1c8dce, 0x1c8dce, 0x160, 0x1c8dce, 0x160, 0x1c8f22, 
        0x1c8f22, 0x160, 0x1c8f22, 0x160, 0x1c8f71, 0x1c8f72, 0x160, 0x1c8f72, 0x160, 0x1c8fbd, 
        0x1c8fbd, 0x160, 0x1c8fbd, 0x160, 0x1c900c, 0x1c900d, 0x160, 0x1c900d, 0x160, 0x1c9028, 
        0x1c9028, 0x160, 0x1c9028, 0x160, 0x1c903d, 0x1c9028, 0x160, 0x1c9042, 0x160, 0x1c9058, 
        0x1c9058, 0x160, 0x1c9058, 0x160, 0x1c90f1, 0x1c9058, 0x160, 0x1c90f4, 0x160, 0x1c9123, 
        0x1c9123, 0x160, 0x1c9123, 0x160, 0x1c9140, 0x1c9140, 0x160, 0x1c9140, 0x160, 0x1c918d, 
        0x1c918d, 0x160, 0x1c918d, 0x160, 0x1c91ad, 0x1c928c, 0x160, 0x1c928c, 0x160, 0x1c92bd, 
        0x1c92c7, 0x160, 0x1c92c7, 0x160, 0x1c9307, 0x1c9307, 0x160, 0x1c9307, 0x160, 0x1c9318, 
        0x1c9318, 0x160, 0x1c9318, 0x160, 0x1c939d, 0x1c939d, 0x160, 0x1c939d, 0x160, 0x1c93ab, 
        0x1c93b0, 0x160, 0x1c93b0, 0x160, 0x1c93bc, 0x1c93d3, 0x160, 0x1c93d3, 0x160, 0x1c93df, 
        0x1c940a, 0x160, 0x1c940a, 0x160, 0x1c95cf, 0x1c9634, 0x160, 0x1c9634, 0x160, 0x1c96dc, 
        0x1c96dc, 0x160, 0x1c96dc, 0x160, 0x1c9715, 0x1c9733, 0x160, 0x1c9733, 0x160, 0x1c9764, 
        0x1c9764, 0x160, 0x1c9764, 0x160, 0x1c9823, 0x1c9823, 0x160, 0x1c9823, 0x160, 0x1c9864, 
        0x1c9864, 0x160, 0x1c9864, 0x160, 0x1c9875, 0x1c9875, 0x160, 0x1c9875, 0x160, 0x1c987b, 
        0x1c987b, 0x160, 0x1c987b, 0x160, 0x1c98ad, 0x1c98ad, 0x160, 0x1c98ad, 0x160, 0x1c98b2, 
        0x1c98b2, 0x160, 0x1c98b2, 0x160, 0x1c9929, 0x1c9929, 0x160, 0x1c9929, 0x160, 0x1c9948, 
        0x1c9a00, 0x160, 0x1c9a00, 0x160, 0x1c9aab, 0x1c9c7c, 0x160, 0x1c9c7c, 0x160, 0x1c9d20, 
        0x1c9d20, 0x160, 0x1c9d20, 0x160, 0x1c9d48, 0x1c9d48, 0x160, 0x1c9d48, 0x160, 0x1c9d9f, 
        0x1c9d9f, 0x160, 0x1c9d9f, 0x160, 0x1c9dd1, 0x1c9dd1, 0x160, 0x1c9dd1, 0x160, 0x1c9e09, 
        0x1c9e15, 0x160, 0x1c9e15, 0x160, 0x1c9e7b, 0x1c9e7c, 0x160, 0x1c9e7c, 0x160, 0x1c9f1f, 
        0x1c9f24, 0x160, 0x1c9f1f, 0x160, 0x1ca02f, 0x1ca02f, 0x160, 0x1ca02f, 0x160, 0x1ca06e, 
        0x1ca06e, 0x160, 0x1ca06e, 0x160, 0x1ca0cc, 0x1ca06e, 0x160, 0x1ca35e, 0x160, 0x1ca364, 
        0x1ca1cf, 0x160, 0x1ca1cf, 0x160, 0x1ca243, 0x1ca243, 0x160, 0x1ca243, 0x160, 0x1ca291, 
        0x1ca291, 0x160, 0x1ca291, 0x160, 0x1ca363, 0x1ca364, 0x160, 0x1ca35b, 0x160, 0x1ca363, 
        0x1ca364, 0x160, 0x1ca364, 0x160, 0x1ca413, 0x1ca413, 0x160, 0x1ca413, 0x160, 0x1ca556, 
        0x1ca557, 0x160, 0x1ca557, 0x160, 0x1ca5ce, 0x1ca5ce, 0x160, 0x1ca5ce, 0x160, 0x1ca5d1, 
        0x1ca5d2, 0x160, 0x1ca5d2, 0x160, 0x1ca60a, 0x1ca60a, 0x160, 0x1ca60a, 0x160, 0x1ca62e, 
        0x1ca9b0, 0x160, 0x1ca9b0, 0x160, 0x1ca9eb, 0x1ca9eb, 0x160, 0x1ca9eb, 0x160, 0x1caad0, 
        0x1caad0, 0x160, 0x1caad0, 0x160, 0x1caaf8, 0x1caaf8, 0x160, 0x1caaf8, 0x160, 0x1cadab, 
        0x1cadab, 0x160, 0x1cadab, 0x160, 0x1caddb, 0x1caddb, 0x160, 0x1caddb, 0x160, 0x1caef0, 
        0x1caf1a, 0x160, 0x1caf1a, 0x160, 0x1caf2d, 0x1caf1a, 0x160, 0x1cb15b, 0x160, 0x1cb1ea, 
        0x1caf2d, 0x160, 0x1caf2d, 0x160, 0x1caf53, 0x1caf53, 0x160, 0x1caf53, 0x160, 0x1cb069, 
        0x1cb069, 0x160, 0x1cb069, 0x160, 0x1cb15b, 0x1cb1ea, 0x160, 0x1cb1ea, 0x160, 0x1cb1f3, 
        0x1cb1f3, 0x160, 0x1cb1f3, 0x160, 0x1cb1fe, 0x1ce56a, 0x160, 0x1ce56a, 0x160, 0x1ce633, 
        0x1ce68e, 0x160, 0x1ce68e, 0x160, 0x1ce6b5, 0x1ce6b5, 0x160, 0x1ce6b5, 0x160, 0x1ce936, 
        0x1ce936, 0x160, 0x1ce936, 0x160, 0x1cea69, 0x1cea69, 0x160, 0x1cea69, 0x160, 0x1ceac4, 
        0x1ceac4, 0x160, 0x1ceac4, 0x160, 0x1ceae8, 0x1ceae8, 0x160, 0x1ceae3, 0x160, 0x1ceb0b, 
        0x1ceb0b, 0x160, 0x1ceb0b, 0x160, 0x1ceb6c, 0x1ceb6c, 0x160, 0x1ceb6c, 0x160, 0x1cec47, 
        0x1cec47, 0x160, 0x1cec47, 0x160, 0x1cec4e, 0x1cec4e, 0x160, 0x1cec4e, 0x160, 0x1cf097, 
        0x1cf097, 0x160, 0x1cf097, 0x160, 0x1cf0af, 0x1cf0af, 0x160, 0x1cf0af, 0x160, 0x1cf0b5, 
        0x1cf0b5, 0x160, 0x1cf0b5, 0x160, 0x1cf0bb, 0x1cf0bb, 0x160, 0x1cf0bb, 0x160, 0x1cf0d9, 
        0x1cf0d9, 0x160, 0x1cf0d9, 0x160, 0x1cf12e, 0x1cf12e, 0x160, 0x1cf12e, 0x160, 0x1cf143, 
        0x1cf150, 0x160, 0x1cf150, 0x160, 0x1cf168, 0x1cf168, 0x160, 0x1cf168, 0x160, 0x1cf1e0, 
        0x1cf243, 0x160, 0x1cf243, 0x160, 0x1cf2bf, 0x1cf2bf, 0x160, 0x1cf2bf, 0x160, 0x1cf2de, 
        0x1cf2e3, 0x160, 0x1cf2e3, 0x160, 0x1cf312, 0x1cf312, 0x160, 0x1cf312, 0x160, 0x1cf32f, 
        0x1cf330, 0x160, 0x1cf330, 0x160, 0x1cf338, 0x1cf378, 0x160, 0x1cf378, 0x160, 0x1cf44c, 
        0x1cf51b, 0x160, 0x1cf515, 0x160, 0x1cf51a, 0x1cf51b, 0x160, 0x1cf51b, 0x160, 0x1cf5dd, 
        0x1cfb4f, 0x160, 0x1cfb4f, 0x160, 0x1cfb6c, 0x1cfb91, 0x160, 0x1cfb91, 0x160, 0x1cfbdb, 
        0x1cfbdb, 0x160, 0x1cfbdb, 0x160, 0x1cfbf6, 0x1cfc1b, 0x160, 0x1cfc1b, 0x160, 0x1cfc63, 
        0x1cfc64, 0x160, 0x1cfc64, 0x160, 0x1cfc7f, 0x1cfc7f, 0x160, 0x1cfc7f, 0x160, 0x1cfc8d, 
        0x1d0188, 0x160, 0x1d0188, 0x160, 0x1d019c, 0x1d0188, 0x160, 0x1d01a2, 0x160, 0x1d01aa, 
        0x1d0188, 0x160, 0x1d01ab, 0x160, 0x1d01ae,     };

    for (int i=0; i<sizeof(map)/sizeof(map[0]); i+=5)
        if (seg * 16 + ofs >= map[i+1]*16 + map[i+2] && seg * 16 + ofs < map[i+3]*16 + map[i+4])
            return map[i];
    return 0;
}

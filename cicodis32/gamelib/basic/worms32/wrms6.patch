diff --git a/wrms.cpp b/Users/gabrielvalky/Documents/git/Projects/cicodis32/cico32run/cico32run/wrms.cpp
index c1d7006..cb35d74 100644
--- a/wrms.cpp
+++ b/Users/gabrielvalky/Documents/git/Projects/cicodis32/cico32run/cico32run/wrms.cpp
@@ -1551,7 +1551,7 @@ loc_196d9a: // 0160:196d9a
     memoryASet32(ds, esp + 4, edx);
     edx = eax;
     edx = sar32(edx, 0x1f);
-    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
+    flags.carry = !!((edx<<1) & 0x80000000);
     edx <<= 2;
     eax = eax - edx - flags.carry;
     eax = sar32(eax, 0x02);
@@ -1684,7 +1684,7 @@ loc_196ee4: // 0160:196ee4
     edx = ebp;
     eax = ebp;
     edx = sar32(edx, 0x1f);
-    flags.carry = !!((edx<<1) & 0x80000000) & stop("xxx");
+    flags.carry = !!((edx<<1) & 0x80000000);
     edx <<= 2;
     eax = eax - edx - flags.carry;
     eax = sar32(eax, 0x02);
@@ -3437,7 +3437,7 @@ loc_19e865: // 0160:19e865
     esi <<= 2;
     edx = memoryAGet32(ds, 0x39f09c);
     esi += ebx;
-    eax += memoryAGet32(ds, stop("GetOpAddress"));
+    eax += memoryAGet32(ds, edx*4 + 0x1dc242);
     ebx = edx + esi;
     ebx <<= 2;
     edx = eax + 1;
@@ -4097,7 +4097,7 @@ loc_198b1a: // 0160:198b1a
     edi = 0xffffffff;
     memoryASet32(ds, ebx + 3791902, ebp);
     memoryASet32(ds, ebx + 3791946, edi);
-    eax = memoryAGet32(ds, stop("GetOpAddress"));
+    eax = memoryAGet32(ds, eax*4 + 0x1dc044);
     edx = 0x00000010;
     memoryASet32(ds, ebx + 3791930, eax);
     ebp = 0x00000096;
@@ -6537,7 +6537,7 @@ loc_19ac48: // 0160:19ac48
     push32(ebp);
     sub_196049();
     sub_19ac27();
-    sub_19b588();
+    sub_19b588(); //gabo skip!
     edx = memoryAGet32(ds, 0x1df5c0);
     eax = edx;
     eax <<= 5;
@@ -6548,7 +6548,7 @@ loc_19ac48: // 0160:19ac48
     eax += 0x00001388;
     sub_1b9c93();
     eax = 0x00000013;
-    sub_19b80e();
+    sub_19b80e(); // gabo skip video set?
     eax = 0;
     edx = 0x00000001;
     sub_1a413d();
@@ -6556,7 +6556,7 @@ loc_19ac48: // 0160:19ac48
     sub_19b153();
     sub_19b2ba();
     sub_198cff();
-    sub_19a69d();
+    sub_19a69d();  /// splash
     sub_1968c6();
     sub_198cff();
     memoryASet32(ds, 0x1dc030, edx);
@@ -6887,10 +6887,14 @@ loc_19b049: // 0160:19b049
     if (!eax)
         goto loc_19b014;
     ebx = memoryAGet32(ds, esp);
-    ecx = ebx + 1;
-    memoryASet32(ds, esp, ecx);
+    ecx = ebx + 1; // enty 160:1ca5d7
+    memoryASet32(ds, esp, ecx); // 160:19b059 "0160:0019B059"
+
     bl = memoryAGet(ds, ebx);
+    
+
     eax--;
+
     memoryASet(ds, edx, bl);
     edx++;
     goto loc_19b049;
@@ -6916,7 +6920,7 @@ loc_19b086: // 0160:19b086
     esi = pop32();
     ecx = pop32();
     ebx = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_19b091() // 0160:19b091 +long
@@ -8248,7 +8252,8 @@ loc_19c10c: // 0160:19c10c
     sub_1c05c4();
     esp += 0x00000034;
     edx = memoryAGet32(ds, esp + 40);
-    stop("imul edx * memoryAGet32(ds, esp + 128)");
+    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, esp + 128);
+    //stop("imul edx * memoryAGet32(ds, esp + 128)");
     eax = memoryAGet32(ds, esp + 96);
     eax <<= 3;
     memoryASet32(ds, esp + 56, eax);
@@ -9972,7 +9977,7 @@ loc_19d538: // 0160:19d538
     if ((int32_t)edi < (int32_t)0x00000004)
         goto loc_19d4e8;
     ebx = memoryAGet32(ds, esp + 4);
-    if (stop("postCondition"))
+    if ((int32_t)ebx<0)
         goto loc_19d553;
     eax = memoryAGet32(ds, esp);
     memoryASet32(ds, 0x39ef98, ebx);
@@ -18485,7 +18490,7 @@ void sub_1a4288() // 0160:1a4288 +long
     eax = edx;
     edx = sar32(edx, 0x1f);
     idiv32(ebx);
-    if (stop("postCondition"))
+    if ((int32_t)eax < 0)
         goto loc_1a42c5;
     if ((int32_t)eax <= (int32_t)0x000000c8)
         goto loc_1a42d3;
@@ -18533,7 +18538,8 @@ loc_1a432e: // 0160:1a432e
 loc_1a4350: // 0160:1a4350
     edx = 0;
     dl = memoryAGet(ds, ebx + 3783080);
-    stop("imul edx * ebp");
+    edx = (int32_t)edx * (int32_t)ebp;
+//    stop("imul edx * ebp");
     eax = edx;
     edx = sar32(edx, 0x1f);
     idiv32(esi);
@@ -18614,6 +18620,7 @@ loc_1a4408: // 0160:1a4408
     memoryASet32(ds, 0x1df65c, edx);
     memoryASet32(ds, 0x1df654, eax);
 loc_1a441a: // 0160:1a441a
+    sync();
     eax = memoryAGet32(ds, 0x1df650);
     if (eax == memoryAGet32(ds, 0x1df654))
         goto loc_1a4286;
@@ -26569,7 +26576,9 @@ void sub_1a9cc8() // 0160:1a9cc8 +long
     ebx += esi;
     edx++;
     ebx &= 0x0000ffff;
-    stop("imul edx * ebx");
+    edx = (int32_t)edx * (int32_t)ebx;
+//    edx *= ebx;
+//    stop("imul edx * ebx");
     edx >>= 16;
     memoryASet32(ds, 0x39ef88, ebx);
     eax += edx;
@@ -41700,7 +41709,7 @@ loc_1b8c1c: // 0160:1b8c1c
     edx = pop32();
     ecx = pop32();
     ebx = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
     return;
     // gap 4209 bytes
@@ -59231,6 +59240,7 @@ loc_1c7dc2: // 0160:1c7dc2
     al = 0x00;
     ah = 0x00;
 loc_1c7dd9: // 0160:1c7dd9
+    assert(al==1&&ah==0);
     memoryASet(ds, 0x1dfd4a, al);
     memoryASet(ds, 0x1dfd4b, ah);
     es = ebx;
@@ -59331,7 +59341,7 @@ loc_1c7f00: // 0160:1c7f00
     interrupt(0x21);
     stop("terminating");
 }
-void sub_1c7edd() // 0160:1c7edd +long
+void sub_1c7edd() // 0160:1c7edd +long error message
 {
     esp -= 4;
     push32(edx);
@@ -59766,7 +59776,7 @@ loc_1c8223: // 0160:1c8223
     eax = ecx;
     edi = pop32();
     esi = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_1c822f() // 0160:1c822f +long
@@ -60167,7 +60177,8 @@ void sub_1c8590() // 0160:1c8590 +long
     memoryASet(ds, ecx + 12, dh);
     goto loc_1c8753;
 loc_1c85ba: // 0160:1c85ba
-    stop("imul ebx * edx");
+    ebx = (int32_t)ebx * (int32_t)edx;
+//    stop("imul ebx * edx");
     if (ebx)
         goto loc_1c85c8;
     eax = ebx;
@@ -60203,7 +60214,7 @@ loc_1c85fc: // 0160:1c85fc
     push32(edi);
     eax = ecx;
     ecx >>= 2;
-    movsd<ES_EDI, DS_ESI>();
+    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) movsd<ES_EDI, DS_ESI>(); // TODO!!!!
     cl = al;
     cl &= 0x03;
     for (flags.zero = 0; cx != 0 && !flags.zero; --cx) movsb<ES_EDI, DS_ESI>();
@@ -60326,7 +60337,7 @@ loc_1c8753: // 0160:1c8753
     ebp = pop32();
     edi = pop32();
     esi = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_1c875a() // 0160:1c875a +long
@@ -60503,7 +60514,7 @@ void sub_1c8bb1() // 0160:1c8bb1 +long
     esi = eax;
     if (!eax)
         goto loc_1c8bca;
-    if (eax <= 0xffffffd4)
+    if (eax <= 0xffd4) // TODO CICO 0xffffffd4 -> 0xffd4
         goto loc_1c8bd1;
 loc_1c8bca: // 0160:1c8bca
     eax = 0;
@@ -60524,6 +60535,7 @@ loc_1c8bf0: // 0160:1c8bf0
     if (eax <= memoryAGet32(ds, 0x1dfd14))
         goto loc_1c8c10;
     ecx = memoryAGet32(ds, 0x1dfd10);
+//    assert(ecx == 0x15d008);
     if (ecx)
         goto loc_1c8c48;
 loc_1c8c02: // 0160:1c8c02
@@ -60536,7 +60548,7 @@ loc_1c8c10: // 0160:1c8c10
 loc_1c8c14: // 0160:1c8c14
     edx = ds;
     eax = ebp;
-    memoryASet32(ds, 0x1dfd10, ecx);
+    memoryASet32(ds, 0x1dfd10, ecx); // ecx=15d008
     edx &= 0x0000ffff;
     eax = esi;
     ebx = ecx;
@@ -60556,8 +60568,10 @@ loc_1c8c48: // 0160:1c8c48
         goto loc_1c8c14;
     if (memoryAGet(ds, esp) != 0x00)
         goto loc_1c8c5d;
+//    assert(esi == 0x39); // 0x0e
     eax = esi;
     sub_1ca413();
+    assert(eax == 1);
     if (eax)
         goto loc_1c8c72;
 loc_1c8c5d: // 0160:1c8c5d
@@ -60671,6 +60685,7 @@ void sub_1c8d0b() // 0160:1c8d0b +long
     memoryASet32(ds, ebx + 20, eax);
     eax = 0;
     al = memoryAGet(ds, esp + 5);
+    assert(al == 9);
     eax--;
     memoryASet32(ds, ebx + 16, eax);
     eax = 0;
@@ -60760,13 +60775,13 @@ loc_1c8e02: // 0160:1c8e02
     idiv32(ecx);
     esi += eax;
 loc_1c8e13: // 0160:1c8e13
-    if (stop("postCondition"))
+    if ((int32_t)edi>=0)
         goto loc_1c8e1d;
     esi--;
     edi += 0x0000000c;
     goto loc_1c8e13;
 loc_1c8e1d: // 0160:1c8e1d
-    if (stop("postCondition"))
+    if ((int32_t)esi<0)
         goto loc_1c8df8;
     eax = esi + 1900;
     sub_1ca9b0();
@@ -60785,7 +60800,8 @@ loc_1c8e35: // 0160:1c8e35
     ecx = sar32(ecx, 0x02);
     eax += edx;
     edx = eax + ecx;
-    stop("disassembly failed at 160:1c8e51 movsx eax, word ptr [ebx + edi*2]");
+    eax = (int32_t)memoryAGet16(ds, ebx+edi*2);
+//    stop("disassembly failed at 160:1c8e51 movsx eax, word ptr [ebx + edi*2]");
     edi = memoryAGet32(ss, ebp + 12);
     eax += edx;
     edi += eax;
@@ -60808,7 +60824,7 @@ loc_1c8e62: // 0160:1c8e62
     eax <<= 2;
     esi += eax;
 loc_1c8e83: // 0160:1c8e83
-    if (stop("postCondition"))
+    if ((int32_t)esi >= 0)
         goto loc_1c8e90;
     edi--;
     esi += 0x00015180;
@@ -60823,7 +60839,7 @@ loc_1c8e90: // 0160:1c8e90
     edx = memoryAGet32(ds, 0x1e0020);
     ebx = memoryAGet32(ss, ebp + 32);
     esi += edx;
-    if (stop("postCondition"))
+    if ((int32_t)ebx >= 0)
         goto loc_1c8eb8;
     eax = ebp;
     sub_1caaf8();
@@ -60832,7 +60848,7 @@ loc_1c8eb8: // 0160:1c8eb8
         goto loc_1c8ec4;
     esi -= memoryAGet32(ds, 0x1e0024);
 loc_1c8ec4: // 0160:1c8ec4
-    if (stop("postCondition"))
+    if ((int32_t)esi >= 0)
         goto loc_1c8ed1;
     edi--;
     esi += 0x00015180;
@@ -60941,14 +60957,14 @@ loc_1c8fa1: // 0160:1c8fa1
     push32(edx);
     switch (eax)
     {
-        case 0x1c7f24: sub_1c7f24();
-        case 0x1c9028: sub_1c9028();
-        case 0x1c92c7: sub_1c92c7();
-        case 0x1cf330: sub_1cf330();
-        case 0x1cf378: sub_1cf378();
-        case 0x1cf168: sub_1cf168();
-        case 0x1c9d9f: sub_1c9d9f();
-        case 0x1c900d: sub_1c900d();
+        case 0x1c7f24: sub_1c7f24(); break;
+        case 0x1c9028: sub_1c9028(); break;
+        case 0x1c92c7: sub_1c92c7(); break;
+        case 0x1cf330: sub_1cf330(); break;
+        case 0x1cf378: sub_1cf378(); break;
+        case 0x1cf168: sub_1cf168(); break;
+        case 0x1c9d9f: sub_1c9d9f(); break;
+        case 0x1c900d: sub_1c900d(); break;
         default:
             stop("ind 0160:1c8faf");
     }
@@ -61001,7 +61017,7 @@ loc_1c8fed: // 0160:1c8fed
     push(ds);
     es = pop();
     push32(edx);
-    indirectCall(cs, eax); // 0160:1c8fff;
+    indirectCall(cs, eax); // 0160:1c8fff; //1cf1e0
     edx = pop32();
 loc_1c9002: // 0160:1c9002
     memoryASet(ds, ebx, 0x02);
@@ -61028,6 +61044,7 @@ void sub_1c900d() // 0160:1c900d +long
 }
 void sub_1c9028() // 0160:1c9028 +long
 {
+    return;
     esp -= 4;
     push(es);
     push32(ecx);
@@ -61212,6 +61229,7 @@ loc_1c92ad: // 0160:1c92ad
 }
 void sub_1c92c7() // 0160:1c92c7 +long
 {
+    return;
     esp -= 4;
     push32(edx);
     ah = memoryAGet(ds, 0x1dfcfc);
@@ -61371,7 +61389,7 @@ loc_1c941e: // 0160:1c941e
     eax = rcl32(eax, 0x00000001);
     eax = ror32(eax, 0x00000001);
     memoryASet32(ds, esp + 4, eax);
-    if (stop("postCondition"))
+    if ((int32_t)eax < 0)
         goto loc_1c9451;
     edi = 0;
     di = memoryAGet16(ds, esp + 4);
@@ -61744,7 +61762,7 @@ void sub_1c9823() // 0160:1c9823 +long
     memoryASet16(ss, edi + 2, dx);
     eax = rcl32(eax, 0x00000001);
     eax = ror32(eax, 0x00000001);
-    if (stop("postCondition"))
+    if ((int32_t)eax >= 0)
         goto loc_1c985b;
     eax &= 0x0000ffff;
     sub_1c9e15();
@@ -61787,7 +61805,7 @@ void sub_1c987b() // 0160:1c987b +long
     interrupt(0x21);
     eax = rcl32(eax, 0x00000001);
     eax = ror32(eax, 0x00000001);
-    if (stop("postCondition"))
+    if ((int32_t)eax < 0)
         goto loc_1c989b;
     eax = edx;
     edx = 0;
@@ -61868,7 +61886,7 @@ void sub_1c9929() // 0160:1c9929 +long
     eax = rcl32(eax, 0x00000001);
     eax = ror32(eax, 0x00000001);
     edx = eax;
-    if (stop("postCondition"))
+    if ((int32_t)eax >= 0)
         goto loc_1c9946;
     eax &= 0x0000ffff;
     sub_1c9e15();
@@ -61930,7 +61948,7 @@ loc_1c9a78: // 0160:1c9a78
     memoryASet32(ds, ecx + 4, eax);
 loc_1c9a85: // 0160:1c9a85
     esi = memoryAGet32(ds, ecx + 4);
-    if (stop("postCondition"))
+    if ((int32_t)esi > 0)
         goto loc_1c9aa3;
     if (esi)
         goto loc_1c9a94;
@@ -62618,7 +62636,7 @@ loc_1ca28c: // 0160:1ca28c
     ebx = pop32();
     esp += 4;
 }
-void sub_1ca291() // 0160:1ca291 +long
+void sub_1ca291() // 0160:1ca291 +long allocator
 {
     esp -= 4;
     push32(ebx);
@@ -62710,7 +62728,7 @@ loc_1ca35b: // 0160:1ca35b
     edx = pop32();
     ecx = pop32();
     ebx = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_1ca364() // 0160:1ca364 +long
@@ -62724,7 +62742,7 @@ loc_1ca35b: // 0160:1ca35b
     edx = pop32();
     ecx = pop32();
     ebx = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
     return;
 loc_1ca364: // 0160:1ca364
@@ -62807,6 +62825,7 @@ void sub_1ca413() // 0160:1ca413 +long
     push32(eax);
     if (memoryAGet(ds, 0x1dfd4a) != 0x01)
         goto loc_1ca42b;
+    assert(memoryAGet(ds, 0x1dfd4b) == 0);
     if (memoryAGet(ds, 0x1dfd4b) == 0x00)
         goto loc_1ca434;
 loc_1ca42b: // 0160:1ca42b
@@ -62923,7 +62942,7 @@ loc_1ca54e: // 0160:1ca54e
     edx = pop32();
     ecx = pop32();
     ebx = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_1ca557() // 0160:1ca557 +long
@@ -62977,7 +62996,7 @@ loc_1ca5ad: // 0160:1ca5ad
     dh &= 0xf0;
     dl = 0;
     memoryASet32(ds, ebx, edx);
-    stop("setne");
+    //stop("setne");
     eax &= 0x000000ff;
     esi = pop32();
     edx = pop32();
@@ -62997,13 +63016,15 @@ void sub_1ca5d2() // 0160:1ca5d2 +long
     push(es);
     push32(ebx);
     push(ds);
+    //assert(esp == 0x3f4ed8);
     push32(edx);
     sub_1ca60a();
     push(ds);
     push32(edi);
     ebp = esp;
     edi = memoryAGet32(ss, ebp + 8);
-    ds = memoryAGet16(ss, ebp + 12);
+    ds = memoryAGet16(ss, ebp + 12); // 168:3f4ed8
+    assert(ds == 0x168);
     memoryASet32(ds, edi, eax);
     memoryASet32(ds, edi + 4, ebx);
     memoryASet32(ds, edi + 8, ecx);
@@ -63037,7 +63058,15 @@ void sub_1ca60a() // 0160:1ca60a +long +returnCarry
     esi = memoryAGet32(ds, edi + 16);
     edi = memoryAGet32(ds, edi + 20);
     ds = ebp;
-    stop("stack_unbalanced");
+    switch (memoryAGet16(cs, pop32()))
+    {
+        case 0x33cd: interrupt(0x33); break;
+        case 0x10cd: interrupt(0x10); break;
+        default:
+            assert(0);
+    }
+//    assert(0); // code continues 160:1ca62f?? NO!
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_1ca9b0() // 0160:1ca9b0 +long
@@ -63095,13 +63124,13 @@ void sub_1ca9eb() // 0160:1ca9eb +long
     if (!eax)
         goto loc_1caa22;
     eax = memoryAGet32(ds, ebx + 16);
-    esi = memoryAGet32(ds, stop("GetOpAddress"));
-    eax = memoryAGet32(ds, stop("GetOpAddress"));
+    esi = memoryAGet32(ds, eax*2 + 0x1d23f6);
+    eax = memoryAGet32(ds, eax*2 + 0x1d23f4);
     goto loc_1caa33;
 loc_1caa22: // 0160:1caa22
     eax = memoryAGet32(ds, ebx + 16);
-    esi = memoryAGet32(ds, stop("GetOpAddress"));
-    eax = memoryAGet32(ds, stop("GetOpAddress"));
+    esi = memoryAGet32(ds, eax*2 + 0x1d23dc);
+    eax = memoryAGet32(ds, eax*2 + 0x1d23da);
 loc_1caa33: // 0160:1caa33
     esi = sar32(esi, 0x10);
     eax = sar32(eax, 0x10);
@@ -63561,7 +63590,7 @@ loc_1cae17: // 0160:1cae17
     eax += ebx;
     ebx = edi;
     ebx -= eax;
-    if (stop("postCondition"))
+    if (edx <= 0)
         goto loc_1cae7e;
     eax = edx + -1;
     eax >>= 2;
@@ -63598,7 +63627,8 @@ loc_1caeb6: // 0160:1caeb6
     eax++;
 loc_1caece: // 0160:1caece
     memoryASet32(ds, ecx + 16, eax);
-    stop("disassembly failed at 160:1caed1 movsx eax, word ptr [esi + eax*2]");
+    eax = (int16_t)memoryAGet16(ds, esi+eax*2);
+//    stop("disassembly failed at 160:1caed1 movsx eax, word ptr [esi + eax*2]");
     ebx -= eax;
     edx = 0;
     ebx++;
@@ -64038,7 +64068,7 @@ void sub_1ce68e() // 0160:1ce68e +long
     fld1();
     stop("disassembly failed at 160:1ce695 fldz ");
     stop("disassembly failed at 160:1ce697 fdivp st(1)");
-    fld80(st(0));
+    //fld80(st(0));
     stop("disassembly failed at 160:1ce69b fchs ");
     stop("disassembly failed at 160:1ce69d fcompp ");
     ax = fnstsw();
@@ -64121,7 +64151,7 @@ loc_1ce738: // 0160:1ce738
     dl = cl;
     switch (memoryAGet32(ds, esp + 68))
     {
-        case 0x1c9307: sub_1c9307();
+        case 0x1c9307: sub_1c9307(); break;
         default:
             stop("ind 0160:1ce754");
     }
@@ -65249,9 +65279,10 @@ void sub_1cf0bb() // 0160:1cf0bb +long
     al = 0x00;
     ah = 0x44;
     interrupt(0x21);
-    edx = rcl32(edx, 0x00000001);
-    edx = ror32(edx, 0x00000001);
-    stop("setne");
+//    edx = rcl32(edx, 0x00000001);
+//    edx = ror32(edx, 0x00000001);
+//    //stop("setne");
+    eax = 0; // gabo!
     eax &= 0x000000ff;
     edx = pop32();
     ecx = pop32();
@@ -65345,7 +65376,8 @@ void sub_1cf168() // 0160:1cf168 +long
     goto loc_1cf1cf;
 loc_1cf18c: // 0160:1cf18c
     eax = 0x00000008;
-    sub_1c8bb1();
+    sub_1c8bb1(); //
+//    assert(eax == 0x15d090);
     ebx = eax;
     if (eax)
         goto loc_1cf1bb;
@@ -65548,6 +65580,7 @@ loc_1cf3bb: // 0160:1cf3bb
         goto loc_1cf3c4;
     eax = 0x00000001;
 loc_1cf3c4: // 0160:1cf3c4
+    assert(eax == 0x39 && bx == 0x39 && cx == 3);
     sub_1c8bb1();
     edx = eax;
     ebx = eax;
@@ -65700,7 +65733,7 @@ loc_1cf5d3: // 0160:1cf5d3
     es = pop();
     goto loc_1cf515;
 }
-void sub_1cfb4f() // 0160:1cfb4f +long
+void sub_1cfb4f() // 0160:1cfb4f +long error
 {
     esp -= 4;
     push32(ebx);
@@ -65713,7 +65746,7 @@ void sub_1cfb4f() // 0160:1cfb4f +long
         goto loc_1cfb69;
     eax = ebx;
     edx = ecx;
-    sub_1c7edd();
+    sub_1c7edd(); // error message
 loc_1cfb69: // 0160:1cfb69
     ecx = pop32();
     ebx = pop32();

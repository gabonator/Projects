diff --git a/./bumpy.cpp b/Users/gabrielvalky/Documents/git/Projects/CicoJit/cicorun/cicorun/game.cpp
index 8036ee3..86285bd 100644
--- a/./bumpy.cpp
+++ b/Users/gabrielvalky/Documents/git/Projects/CicoJit/cicorun/cicorun/game.cpp
@@ -1,9 +1,9 @@
 #include "cicoemu.h"
 using namespace CicoContext;
-
+#include <stdio.h>
 void sub_1ed0();
 void fixReloc(uint16_t seg);
-
+void syncKeyb();
 void start()
 {
     headerSize = 0x1200;
@@ -1932,6 +1932,7 @@ void sub_2042()
 }
 void sub_206f()
 {
+    push(0x7777);
 loc_206f:
     ah = 0xff;
     dx = di;
@@ -1950,7 +1951,10 @@ loc_2088:
     goto loc_2075;
 loc_208d:
     if (dx == di)
+    {
+        assert(pop() == 0x7777);
         return;
+    }
     bx = dx;
     push(ds);
     es = pop();
@@ -2418,6 +2422,8 @@ loc_2445:
 }
 void sub_24b7()
 {
+    sync();
+    return;
     push(0x7777);
     push(bp);
     bp = sp;
@@ -2599,7 +2605,7 @@ loc_2731:
 loc_2776:
     al = memoryAGet(ss, bp + 8);
     memoryASet(ss, bp + 8, memoryAGet(ss, bp + 8) - 1);
-    if (stop(/*condition!*/))
+    if (al)
         goto loc_2731;
     push(memoryAGet16(ss, bp + 12));
     push(memoryAGet16(ss, bp + 10));
@@ -4930,7 +4936,9 @@ loc_3cac:
 }
 void sub_3cae()
 {
-    push(0x7777);
+    syncKeyb();
+
+    push(0x7777);// setkeyb
     push(bp);
     bp = sp;
     sp--;
@@ -7402,6 +7411,7 @@ loc_508d:
     memoryASet(ds, 0x8244, 0x00);
     goto loc_50a0;
 loc_5094:
+    sync();
     sub_3cae();
     ax = memoryAGet16(ds, 0x119c);
     ax += 0x0007;
@@ -7471,6 +7481,7 @@ loc_50ba:
 }
 void sub_515f()
 {
+    sync();
     push(0x7777);
     push(bp);
     bp = sp;
@@ -7994,7 +8005,11 @@ loc_56cd:
     sp++;
     sp++;
     if (al)
+    {
+        sync();
+        // wait while pressed
         goto loc_56cd;
+    }
 loc_56d9:
     if (memoryAGet(ss, bp - 6) != 0xff)
         goto loc_56e2;
@@ -10407,17 +10423,21 @@ void sub_6a96()
     sub_ca53();
 loc_6aa5:
     al = memoryAGet(ss, bp + 4);
+    if (al) {
     memoryASet(ds, 0x8562, al);
     ah = 0x00;
     ax <<= 1;
     ax <<= 1;
     bx = ax;
     ax = memoryAGet16(ds, bx + 9506);
+    assert(es);
     dx = memoryAGet16(ds, bx + 9504);
+    printf("sub_6a96 - %02x %04x:%04x\n", memoryAGet(ss, bp + 4), ax, dx);
     memoryASet16(ss, bp - 4, dx);
     memoryASet16(ss, bp - 2, ax);
     bx = memoryAGet16(ss, bp - 4);
     es = memoryAGet16(ss, bp - 4 + 2);
+    assert(es);
     al = memoryAGet(es, bx);
     memoryASet(ds, 0xa1b0, al);
     al = memoryAGet(es, bx + 1);
@@ -10426,6 +10446,7 @@ loc_6aa5:
     dx = memoryAGet16(es, bx + 2);
     memoryASet16(ds, 0xa0ba, dx);
     memoryASet16(ds, 0xa0bc, ax);
+    }
     sp = bp;
     bp = pop();
     assert(pop() == 0x7777);
@@ -12101,6 +12122,8 @@ loc_7b48:
 }
 void sub_7b57()
 {
+//    al = 3; // set 3.level    
+//    return;
     push(0x7777);
     push(bp);
     bp = sp;
@@ -12568,7 +12591,7 @@ loc_7f59:
 loc_7f9e:
     al = memoryAGet(ss, bp + 8);
     memoryASet(ss, bp + 8, memoryAGet(ss, bp + 8) - 1);
-    if (stop(/*condition!*/))
+    if (al)
         goto loc_7f59;
     bx = memoryAGet16(ds, 0x8884);
     es = memoryAGet16(ds, 0x8884 + 2);
@@ -14235,14 +14258,15 @@ loc_8bb3:
 loc_8bd3:
     if (memoryAGet(ds, 0x79b8) != 0x2f)
         goto loc_8be2;
+    flags.carry = (memoryAGet16(ds, 0xa0d4) + 0x2616) > 0x10000;
     memoryASet16(ds, 0xa0d4, memoryAGet16(ds, 0xa0d4) + 0x2616);
     goto loc_8bef;
 loc_8be2:
     if (memoryAGet(ds, 0x79b8) != 0x30)
         goto loc_8bf4;
+    flags.carry = (memoryAGet16(ds, 0xa0d4) + 0xc256) > 0x10000;
     memoryASet16(ds, 0xa0d4, memoryAGet16(ds, 0xa0d4) + 0xc256);
 loc_8bef:
-    stop(/*8*/); // inject carry failed
     memoryASet16(ds, 0xa0d6, memoryAGet16(ds, 0xa0d6) + flags.carry);
 loc_8bf4:
     bp = pop();
@@ -18896,7 +18920,7 @@ loc_bc2c:
     memoryASet16(es, bx + 14, ax);
     if (di == 0x0002)
         goto loc_bcb0;
-    if (stop(/*condition!*/))
+    if (!si)
         goto loc_bcb0;
     memoryASet16(ds, 0x6984, 0x9f25);
     ax = memoryAGet16(ss, bp + 8);
@@ -20012,7 +20036,6 @@ loc_c662:
 void sub_c7be()
 {
     push(0x7777);
-    stop(/*override stack*/);
     cx = pop();
     push(cs);
     push(cx);
@@ -20063,8 +20086,8 @@ loc_c81f:
     flags.carry = !!(ax & 0x8000);
     ax <<= 1;
     dx = rcl(dx, 0x0001);
-    si = rcl(si, 0x0001);
-    di = rcl(di, 0x0001);
+    si = rcl((uint16_t)si, 0x0001);
+    di = rcl((uint16_t)di, 0x0001);
     if (di < bp)
         goto loc_c836;
     if (di > bp)
@@ -20113,7 +20136,7 @@ loc_c861:
 }
 void sub_c865()
 {
-    stop(/*override stack*/);
+    push(0x7777);
     es = pop();
     push(cs);
     push(es);
@@ -20141,7 +20164,8 @@ loc_c880:
     dx += ax;
     al = ch;
     ax &= 0x000f;
-    cs = pop();
+//    cs = pop();
+    es = 0x99b0; pop(); pop(); // wtf?
     return;
     //   gap of 19 bytes
 loc_c8a7:
@@ -20161,12 +20185,11 @@ loc_c8af:
     dx += ax;
     al = ch;
     ax &= 0x000f;
-    cs = pop();
+//    cs = pop();
 }
 void sub_c8c5()
 {
     push(0x7777);
-    stop(/*override stack*/);
     es = pop();
     push(cs);
     push(es);
@@ -20190,7 +20213,7 @@ void sub_c8c5()
     si = pop();
     bp = pop();
     assert(pop() == 0x7777);
-    cs = pop();
+//    cs = pop();
     sp += 8;
 }
 void sub_c8e4()
@@ -20211,7 +20234,7 @@ loc_c8ed:
     tx = ax;
     ax = cx;
     cx = tx;
-    mul(si);
+    mul((uint16_t)si);
     ax += cx;
 loc_c8f4:
     tx = ax;
@@ -20366,7 +20389,7 @@ loc_c991:
     if (!flags.zero && !flags.carry)
         goto loc_c99d;
 loc_c996:
-    if (stop(/*1*/))
+    if (flags.carry)
         goto loc_c9d8;
     sub_c9ad();
     if (!flags.zero && !flags.carry)
@@ -20411,7 +20434,7 @@ loc_ca06:
     lodsb_ss<MemAuto, DirAuto>();
     if (--cx && al)
         goto loc_ca06;
-    if (stop(/*1*/))
+    if (false)
         goto loc_c9fb;
 loc_ca0e:
     ax = 0;
@@ -20428,7 +20451,7 @@ loc_ca0e:
     memoryASet16(ds, 0x006d, ax);
     ax = memoryAGet16(ds, 0x6bac);
     memoryASet16(ds, 0x006b, ax);
-    stop(/*2*/); // 01ed:ab6d jmp word ptr [0x6bb0] - jump Indirect memoryAGet16(ds, 0x6bb0)
+//    stop(/*2*/); // 01ed:ab6d jmp word ptr [0x6bb0] - jump Indirect memoryAGet16(ds, 0x6bb0)
 }
 // INJECT: Error: cannot inject flag in sub_c9ad() because of being label!
 void sub_c9ad()
@@ -20447,22 +20470,36 @@ loc_c9b8:
     al = 0;
     flags.carry = true;
     if (cx == 0)
+    {
+        flags.zero = true;
         goto loc_c9d4;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
     al -= 0x22;
     if (al == 0)
+    {
+        flags.zero = true;
         goto loc_c9d4;
+    }
     al += 0x22;
     if (al != 0x5c)
+    {
+        flags.zero = false;
         goto loc_c9d2;
+    }
     if (memoryAGet(ds, si) != 0x22)
+    {
+        flags.zero = false;
         goto loc_c9d2;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
+    flags.zero = cx == 0;
 loc_c9d2:
+    flags.carry = false;
 loc_c9d4:
-    stop(/*inject ret*/);
+    return;
 }
 void sub_ca53()
 {
@@ -20656,7 +20693,8 @@ void sub_cc5f()
     push(es);
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
-    stop(/*2*/); // 0ca6:020a jmp word ptr [bx + 0x545d] - jump Indirect memoryAGet16(ds, bx + 21597)
+//    stop(/*2*/); // 0ca6:020a jmp word ptr [bx + 0x545d] - jump Indirect memoryAGet16(ds, bx + 21597)
+    assert(bx==4);
 loc_cc6e:
     ax = 0x000d;
     interrupt(0x10);
@@ -20713,7 +20751,7 @@ loc_cc9e:
     cl--;
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
-    stop(/*2*/); // 0ca6:0264 jmp word ptr [bx + 0x5469] - jump Indirect memoryAGet16(ds, bx + 21609)
+//    stop(/*2*/); // 0ca6:0264 jmp word ptr [bx + 0x5469] - jump Indirect memoryAGet16(ds, bx + 21609)
 loc_ccc8:
     memoryASet16(ds, si + 2, 0xa000);
     memoryASet16(ds, si, 0x0000);
@@ -20799,6 +20837,7 @@ loc_cd70:
     if (--cx)
         goto loc_cd5d;
 loc_cd76:
+    sync();
     al = 0x3c;
     push(cs);
     cs = 0x01ed;
@@ -20852,7 +20891,8 @@ void sub_cdb1()
     si = 0x5415;
     bp = memoryAGet16(ds, 0x541d);
     bp <<= 1;
-    stop(/*2*/); // 01ed:af04 jmp word ptr ds:[bp + 0x5475] - jump Indirect memoryAGet16(ds, bp + 21621)
+    assert(bp==4);
+//    stop(/*2*/); // 01ed:af04 jmp word ptr ds:[bp + 0x5475] - jump Indirect memoryAGet16(ds, bp + 21621)
 loc_cdd9:
     sub_d121();
 loc_cdde:
@@ -21749,6 +21789,7 @@ void sub_d7d7()
     memoryASet(ds, 0x5420, 0x01);
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
+    assert(bx == 4);
     callIndirect(cs*16+memoryAGet16(ds, bx + 21854));
 loc_d802:
     es = pop();
@@ -21863,6 +21904,7 @@ void sub_da88()
     memoryASet(ds, 0x5420, 0x00);
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
+    assert(bx==4);
     callIndirect(cs*16+memoryAGet16(ds, bx + 22168));
 loc_dab2:
     es = pop();
@@ -24584,7 +24626,6 @@ loc_fe36:
 }
 void sub_fe71()
 {
-    push(0x7777);
     goto loc_fe71;
 loc_f9b4:
     push(ax);
@@ -24707,7 +24748,12 @@ loc_ff5a:
 loc_ff5c:
     cx += cx;
     memoryASet16(cs, 0x3211, cx);
-    stop(/*2*/); // 0ed9:11d3 jmp ax - jump Indirect ax
+    switch (ax)
+    {
+        case 0x210b: goto loc_10e9b;
+        default: assert(0);
+    }
+//    stop(/*2*/); // 0ed9:11d3 jmp ax - jump Indirect ax
     //   gap of 3441 bytes
 loc_10cd6:
     ax = memoryAGet16(es, bp);
@@ -24970,12 +25016,20 @@ loc_10ec9:
     ax = 0xff08;
     out(dx, ax);
     ds = pop();
-    assert(pop() == 0x7777);
     return;
     //   gap of 1183 bytes
 loc_11371:
     ax = 0x0000;
-    stop(/*2*/); // 0ed9:25e4 jmp ax - jump Indirect ax
+//    stop(/*2*/); // 0ed9:25e4 jmp ax - jump Indirect ax
+    ax = memoryAGet16(cs, 0x25e2);
+    switch (ax)
+    {
+        case 0x2004: goto loc_10d94; break; //ed9:2004
+        case 0x2063: goto loc_10df3; break;
+        case 0x1f46: goto loc_10cd6; break; //ed9:1f46
+        default:
+            assert(0);
+    }
 }
 void sub_11a7d()
 {
@@ -25046,6 +25100,7 @@ void sub_11afd()
     di = memoryAGet16(ds, 0x541d);
     di += di;
     ax = memoryAGet16(cs, bx + di);
+    assert(di == 4);
     callIndirect(cs*16+ax);
     es = pop();
     ds = pop();
@@ -25652,6 +25707,7 @@ loc_121d2:
     if (--cx)
         goto loc_121bf;
 loc_121d8:
+    sync();
     al = 0x3f;
     push(cs);
     cs = 0x01ed;
@@ -25711,6 +25767,7 @@ void sub_12230()
     push(es);
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
+    assert(bx == 4);
     callIndirect(cs*16+memoryAGet16(ds, bx + 26998));
     es = pop();
     ds = pop();
@@ -25721,6 +25778,7 @@ void sub_12230()
 }
 void sub_12245()
 {
+    sync();
     dx = 0x03da;
 loc_12248:
     in(al, dx);

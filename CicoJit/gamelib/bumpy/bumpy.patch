diff --git a/./bumpy.cpp b/Users/gabrielvalky/Documents/git/Projects/CicoJit/cicorun/cicorun/game.cpp
index f179407..21a6d08 100644
--- a/./bumpy.cpp
+++ b/Users/gabrielvalky/Documents/git/Projects/CicoJit/cicorun/cicorun/game.cpp
@@ -1906,7 +1906,8 @@ void sub_2042() // 01ed:0172
 }
 void sub_206f() // 01ed:019f
 {
-    CStackGuard sg(0, false);
+//    CStackGuard sg(0, false);
+    push(0x7777);
 loc_206f: // 01ed:019f
     ah = 0xff;
     dx = di;
@@ -1925,7 +1926,10 @@ loc_2088: // 01ed:01b8
     goto loc_2075;
 loc_208d: // 01ed:01bd
     if (dx == di)
+    {
+        assert(pop() == 0x7777);
         return;
+    }
     bx = dx;
     push(ds);
     es = pop();
@@ -2586,7 +2590,7 @@ loc_2731: // 01ed:0861
 loc_2776: // 01ed:08a6
     al = memoryAGet(ss, bp + 8);
     memoryASet(ss, bp + 8, memoryAGet(ss, bp + 8) - 1);
-    if (stop(/*condition!*/))
+    if (al) // dec, or, ja
         goto loc_2731;
     push(memoryAGet16(ss, bp + 12));
     push(memoryAGet16(ss, bp + 10));
@@ -7084,6 +7088,7 @@ loc_508d: // 01ed:31bd
     memoryASet(ds, 0x8244, 0x00);
     goto loc_50a0;
 loc_5094: // 01ed:31c4
+    sync();
     sub_3cae();
     ax = memoryAGet16(ds, 0x119c);
     ax += 0x0007;
@@ -7165,6 +7170,7 @@ loc_516b: // 01ed:329b
     memoryASet(ds, 0x8244, 0x00);
     goto loc_5175;
 loc_5172: // 01ed:32a2
+    sync();
     sub_3cae();
 loc_5175: // 01ed:32a5
     al = memoryAGet(ds, 0x8244);
@@ -7655,7 +7661,13 @@ loc_5696: // 01ed:37c6
     if (bx > 0x0003)
         goto loc_56c8;
     bx <<= 1;
-    stop(/*2*/); // (jmp word ptr cs:[bx + 0x384a]) jump Indirect memoryAGet16(cs, bx + 14410)
+    // go to menu?
+    assert(bx == 0);
+    goto loc_56b0;
+//    printf("indirect call: %04x:  %04x %04x %04x %04x\n", memory16(cs, 0+0x384a),
+//           memory16(cs, 2+0x384a), memory16(cs, 4+0x384a), memory16(cs, 6+0x384a));
+    
+//    stop(/*2*/); // (jmp word ptr cs:[bx + 0x384a]) jump Indirect memoryAGet16(cs, bx + 14410)
 loc_56b0: // 01ed:37e0
     al = memoryAGet(ss, bp - 5);
     memoryASet(ss, bp - 6, al);
@@ -7668,6 +7680,7 @@ loc_56b8: // 01ed:37e8
 loc_56c8: // 01ed:37f8
     memoryASet(ds, 0x8244, 0x00);
 loc_56cd: // 01ed:37fd
+    sync();
     al = 0x00;
     push(ax);
     sub_9472();
@@ -7873,6 +7886,7 @@ loc_580c: // 01ed:393c
     sub_5958();
     goto loc_5944;
 loc_58ec: // 01ed:3a1c
+    sync();
     sub_3cae();
     if (!(memoryAGet(ds, 0x8244) & 0x01))
         goto loc_58fb;
@@ -9060,6 +9074,22 @@ loc_6597: // 01ed:46c7
     if (bx > 0x0003)
         goto loc_65ea;
     bx <<= 1;
+    switch (bx)
+    {
+        case 0: goto loc_65c2; //loc 01ed:46f2 01ed:46f7 01ed:46fc 01ed:4701
+        case 2: goto loc_65c7;
+        case 4: goto loc_65cc;
+        case 6: goto loc_65d1;
+        default:
+            assert(0);
+    }
+//    printf("indirect jump bx=%02x, %04x:%04x\n", bx, cs, memory16(cs, bx+0x4725));
+//    printf("%04x:%04x %04x:%04x %04x:%04x %04x:%04x\n",
+//           cs, memory16(cs, 0+0x4725),
+//           cs, memory16(cs, 2+0x4725),
+//           cs, memory16(cs, 4+0x4725),
+//           cs, memory16(cs, 6+0x4725));
+    
     stop(/*2*/); // (jmp word ptr cs:[bx + 0x4725]) jump Indirect memoryAGet16(cs, bx + 18213)
 loc_65b1: // 01ed:46e1
     if (ax == 0x0009)
@@ -13231,14 +13261,15 @@ loc_8bb3: // 01ed:6ce3
 loc_8bd3: // 01ed:6d03
     if (memoryAGet(ds, 0x79b8) != 0x2f)
         goto loc_8be2;
+    flags.carry = (memoryAGet16(ds, 0xa0d4) + 0x2616) > 0x10000;
     memoryASet16(ds, 0xa0d4, memoryAGet16(ds, 0xa0d4) + 0x2616);
     goto loc_8bef;
 loc_8be2: // 01ed:6d12
     if (memoryAGet(ds, 0x79b8) != 0x30)
         goto loc_8bf4;
+    flags.carry = (memoryAGet16(ds, 0xa0d4) + 0xc256) > 0x10000;
     memoryASet16(ds, 0xa0d4, memoryAGet16(ds, 0xa0d4) + 0xc256);
 loc_8bef: // 01ed:6d1f
-    stop(/*8*/); // inject carry failed
     memoryASet16(ds, 0xa0d6, memoryAGet16(ds, 0xa0d6) + flags.carry);
 loc_8bf4: // 01ed:6d24
     bp = pop();
@@ -14503,6 +14534,7 @@ void sub_998b() // 01ed:7abb
     di = pop();
     bx = pop();
     ds = pop();
+    flags.zero = ax == 0; // todo CICO skipped instruction before end
 }
 void sub_99d1() // 01ed:7b01
 {
@@ -17576,7 +17608,7 @@ loc_bc2c: // 01ed:9d5c
     memoryASet16(es, bx + 14, ax);
     if (di == 0x0002)
         goto loc_bcb0;
-    if (stop(/*condition!*/))
+    if (!si)
         goto loc_bcb0;
     memoryASet16(ds, 0x6984, 0x9f25);
     ax = memoryAGet16(ss, bp + 8);
@@ -18717,9 +18749,8 @@ loc_c662: // 01ed:a792
 }
 void sub_c7be() // 01ed:a8ee
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(8, true);
     push(0x7777);
-    stop(/*override stack*/);
     cx = pop();
     push(cs);
     push(cx);
@@ -18820,8 +18851,8 @@ loc_c861: // 01ed:a991
 }
 void sub_c865() // 01ed:a995
 {
-    CStackGuardFar sg(0, false);
-    stop(/*override stack*/);
+//    CStackGuardFar sg(0, false);
+    push(0x7777);
     es = pop();
     push(cs);
     push(es);
@@ -18849,7 +18880,8 @@ loc_c880: // 01ed:a9b0
     dx += ax;
     al = ch;
     ax &= 0x000f;
-    cs = pop();
+//    cs = pop();
+    es = 0x99b0; pop(); pop(); // wtf?
     return;
     //   gap of 19 bytes
 loc_c8a7: // 01ed:a9d7
@@ -18869,13 +18901,13 @@ loc_c8af: // 01ed:a9df
     dx += ax;
     al = ch;
     ax &= 0x000f;
-    cs = pop();
+//    cs = pop();
+    assert(pop() == 0x7777);
 }
 void sub_c8c5() // 01ed:a9f5
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(8-2, true);
     push(0x7777);
-    stop(/*override stack*/);
     es = pop();
     push(cs);
     push(es);
@@ -18889,9 +18921,9 @@ void sub_c8c5() // 01ed:a9f5
     di = memoryAGet16(ss, bp + 10);
     es = memoryAGet16(ss, bp + 10 + 2);
     flags.direction = false;
+    flags.carry = cx & 1;
     cx >>= 1;
     rep_movsw<MemAuto, MemAuto, DirAuto>();
-    stop(/*8*/); // inject carry failed
     cx += cx + flags.carry;
     rep_movsb<MemAuto, MemAuto, DirAuto>();
     ds = pop();
@@ -18956,7 +18988,7 @@ void sub_c8fb() // 01ed:aa2b
 }
 void sub_c91e() // 01ed:aa4e
 {
-    CStackGuard sg(0, true);
+//    CStackGuard sg(0, true);
     push(0x7777);
     goto loc_c91e;
 loc_20ba: // 01ed:01ea
@@ -19078,7 +19110,7 @@ loc_c991: // 01ed:aac1
     if (!flags.zero && !flags.carry)
         goto loc_c99d;
 loc_c996: // 01ed:aac6
-    if (stop(/*1*/))
+    if (flags.carry)
         goto loc_c9d8;
     sub_c9ad();
     if (!flags.zero && !flags.carry)
@@ -19123,7 +19155,7 @@ loc_ca06: // 01ed:ab36
     lodsb_ss<MemAuto, DirAuto>();
     if (--cx && al)
         goto loc_ca06;
-    if (stop(/*1*/))
+    if (false)
         goto loc_c9fb;
 loc_ca0e: // 01ed:ab3e
     ax = 0;
@@ -19140,7 +19172,7 @@ loc_ca0e: // 01ed:ab3e
     memoryASet16(ds, 0x006d, ax);
     ax = memoryAGet16(ds, 0x6bac);
     memoryASet16(ds, 0x006b, ax);
-    stop(/*2*/); // (jmp word ptr [0x6bb0]) jump Indirect memoryAGet16(ds, 0x6bb0)
+//    stop(/*2*/); // (jmp word ptr [0x6bb0]) jump Indirect memoryAGet16(ds, 0x6bb0)
 }
 // INJECT: Error: cannot inject flag in sub_c9ad() because of being label!
 void sub_c9ad() // 01ed:aadd
@@ -19160,22 +19192,36 @@ loc_c9b8: // 01ed:aae8
     al = 0;
     flags.carry = true;
     if (cx == 0)
+    {
+        flags.zero = true;
         goto loc_c9d4;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
     al -= 0x22;
     if (al == 0)
+    {
+        flags.zero = true;
         goto loc_c9d4;
+    }
     al += 0x22;
     if (al != 0x5c)
+    {
+        flags.zero = false;
         goto loc_c9d2;
+    }
     if (memoryAGet(ds, si) != 0x22)
+    {
+        flags.zero = false;
         goto loc_c9d2;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
+    flags.zero = cx == 0;
 loc_c9d2: // 01ed:ab02
+    flags.carry = false;
 loc_c9d4: // 01ed:ab04
-    stop(/*inject ret*/);
+    return;
 }
 void sub_ca53() // 01ed:ab83
 {
@@ -19379,7 +19425,8 @@ void sub_cc5f() // 0ca6:01ff
     push(es);
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
-    stop(/*2*/); // (jmp word ptr [bx + 0x545d]) jump Indirect memoryAGet16(ds, bx + 21597)
+    assert(bx == 4);
+    //stop(/*2*/); // (jmp word ptr [bx + 0x545d]) jump Indirect memoryAGet16(ds, bx + 21597)
 loc_cc6e: // 0ca6:020e
     ax = 0x000d;
     interrupt(0x10);
@@ -19442,7 +19489,9 @@ loc_cc9e: // 0ca6:023e
     cl--;
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
-    stop(/*2*/); // (jmp word ptr [bx + 0x5469]) jump Indirect memoryAGet16(ds, bx + 21609)
+    assert(bx == 4);
+    goto loc_ccc8;
+    //stop(/*2*/); // (jmp word ptr [bx + 0x5469]) jump Indirect memoryAGet16(ds, bx + 21609)
 loc_ccc8: // 0ca6:0268
     memoryASet16(ds, si + 2, 0xa000);
     memoryASet16(ds, si, 0x0000);
@@ -19532,6 +19581,7 @@ loc_cd70: // 0ca6:0310
     if (--cx)
         goto loc_cd5d;
 loc_cd76: // 0ca6:0316
+    sync();
     al = 0x3c;
     push(cs);
     cs = 0x01ed;
@@ -19587,7 +19637,8 @@ void sub_cdb1() // 01ed:aee1
     si = 0x5415;
     bp = memoryAGet16(ds, 0x541d);
     bp <<= 1;
-    stop(/*2*/); // (jmp word ptr ds:[bp + 0x5475]) jump Indirect memoryAGet16(ds, bp + 21621)
+    assert(bp == 4);
+//    stop(/*2*/); // (jmp word ptr ds:[bp + 0x5475]) jump Indirect memoryAGet16(ds, bp + 21621)
 loc_cdd9: // 0ca6:0379
     sub_d121();
 loc_cdde: // 0ca6:037e
@@ -23418,7 +23469,7 @@ loc_fe36: // 0ed9:10a6
 void sub_fe71() // 0ed9:10e1
 {
     CStackGuard sg(0, true);
-    push(0x7777);
+//    push(0x7777);
     goto loc_fe71;
 loc_f9b4: // 0ed9:0c24
     push(ax);
@@ -23541,8 +23592,13 @@ loc_ff5a: // 0ed9:11ca
 loc_ff5c: // 0ed9:11cc
     cx += cx;
     memoryASet16(cs, 0x3211, cx);
-    stop(/*2*/); // (jmp ax) jump Indirect ax
-    //   gap of 3441 bytes
+    switch (ax)
+    {
+        case 0x210b: goto loc_10e9b;
+        default: assert(0);
+    }
+    //stop(/*2*/); // (jmp ax) jump Indirect ax
+    //   gap of 3631 bytes
 loc_10cd6: // 0ed9:1f46
     ax = memoryAGet16(es, bp);
     dx = memoryAGet16(es, bp + 2);
@@ -23804,13 +23860,24 @@ loc_10ec9: // 0ed9:2139
     ax = 0xff08;
     out(dx, ax);
     ds = pop();
-    assert(pop() == 0x7777);
     return;
     //   gap of 1183 bytes
 loc_11371: // 0ed9:25e1
     ax = 0x0000;
-    stop(/*2*/); // (jmp ax) jump Indirect ax
+//    stop(/*2*/); // (jmp ax) jump Indirect ax
+    ax = memoryAGet16(cs, 0x25e2);
+    switch (ax)
+    {
+        case 0x2004: goto loc_10d94; break; //ed9:2004
+        case 0x2063: goto loc_10df3; break;
+        case 0x1f46: goto loc_10cd6; break; //ed9:1f46
+        default:
+            assert(0);
+
+            
+    }    //stop();
 }
+
 void sub_11a7d() // 0ed9:2ced
 {
     CStackGuardFar sg(0, true);
@@ -24504,6 +24571,7 @@ loc_121d2: // 1219:0042
     if (--cx)
         goto loc_121bf;
 loc_121d8: // 1219:0048
+    sync();
     al = 0x3f;
     push(cs);
     cs = 0x01ed;

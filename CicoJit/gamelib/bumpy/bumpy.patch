diff --git a/./bumpy.clean b/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/bumpy/cicorun/./bumpy.cpp
index e9dc744..2e6f6e5 100644
--- a/./bumpy.clean
+++ b/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/bumpy/cicorun/./bumpy.cpp
@@ -1,6 +1,9 @@
 #include "cicoemu.h"
 using namespace CicoContext;
 
+int bumpyStartupLevel = 4;
+const char* bumpyScene = "";
+
 void sub_1ed0();
 void fixReloc(uint16_t seg);
 
@@ -1537,7 +1540,7 @@ void sub_d59c();
 void sub_d65d();
 void sub_d665();
 void sub_d66d();
-void sub_d69e();
+void sub_d69e(uint8_t opcode);
 void sub_d6df();
 void sub_d6e0();
 void sub_d6e6();
@@ -2265,6 +2268,7 @@ void sub_2042()
 }
 void sub_206f()
 {
+    push(0x7777);
 loc_206f:
     ah = 0xff;
     dx = di;
@@ -2283,7 +2287,10 @@ loc_2088:
     goto loc_2075;
 loc_208d:
     if (dx == di)
+    {
+        assert(pop() == 0x7777);
         return;
+    }
     bx = dx;
     push(ds);
     es = pop();
@@ -2291,7 +2298,7 @@ loc_208d:
     tl = memoryAGet(ds, bx);
     memoryASet(ds, bx, 0xff);
     ds = memoryAGet16(cs, 0x01ff);
-    if (stop("check inject: cmp byte ptr [bx], 0") && tl == 0x00)
+    if (tl == 0x00)
         goto loc_20aa;
     push(cs);
     cs = memoryAGet16(es, bx + 2 + 2);
@@ -2361,7 +2368,7 @@ void sub_2128()
         goto loc_2134;
     sub_ca53();
 loc_2134:
-    memoryASet(ds, 0x79b2, 0x01);
+    memoryASet(ds, 0x79b2, bumpyStartupLevel);
     sub_722e();
     sub_8cb3();
 loc_213f:
@@ -2751,6 +2758,8 @@ loc_2445:
 }
 void sub_24b7()
 {
+    sync();
+    return;
     push(0x7777);
     push(bp);
     bp = sp;
@@ -2932,7 +2941,7 @@ loc_2731:
 loc_2776:
     al = memoryAGet(ss, bp + 8);
     memoryASet(ss, bp + 8, memoryAGet(ss, bp + 8) - 1);
-    if (stop(/*condition!*/))
+    if (al)
         goto loc_2731;
     push(memoryAGet16(ss, bp + 12));
     push(memoryAGet16(ss, bp + 10));
@@ -3393,6 +3402,7 @@ loc_2b42:
     sub_6a1e();
     goto loc_2c19;
 loc_2baa:
+    bumpyScene = "game";
     sub_b281();
     memoryASet(ds, 0x79b3, al);
     sub_325c();
@@ -3660,6 +3670,7 @@ loc_2e1c:
     if (memoryAGet(ss, bp - 12) < 0x06)
         goto loc_2de2;
 loc_2e22:
+    sync();
     al = 0x00;
     push(ax);
     sub_9472();
@@ -7268,7 +7279,7 @@ loc_4bf4:
     ah = 0x00;
     if (ax)
         goto loc_4c0b;
-    sub_5ee5();
+    //sub_5ee5(); // ask for platform number
 loc_4c0b:
     if (memoryAGet(ds, 0x119a) != 0xff)
         goto loc_4c17;
@@ -7735,6 +7746,8 @@ loc_508d:
     memoryASet(ds, 0x8244, 0x00);
     goto loc_50a0;
 loc_5094:
+    bumpyScene = "splash";
+    sync();
     sub_3cae();
     ax = memoryAGet16(ds, 0x119c);
     ax += 0x0007;
@@ -7804,6 +7817,7 @@ loc_50ba:
 }
 void sub_515f()
 {
+    sync();
     push(0x7777);
     push(bp);
     bp = sp;
@@ -7814,6 +7828,7 @@ loc_516b:
     memoryASet(ds, 0x8244, 0x00);
     goto loc_5175;
 loc_5172:
+    sync();
     sub_3cae();
 loc_5175:
     al = memoryAGet(ds, 0x8244);
@@ -8227,6 +8242,7 @@ loc_552d:
     sp++;
     goto loc_56d9;
 loc_55cf:
+    bumpyScene = "menu";
     al = memoryAGet(ds, 0x79b5);
     ah = 0x00;
     ax <<= 1;
@@ -8327,7 +8343,11 @@ loc_56cd:
     sp++;
     sp++;
     if (al)
+    {
+        sync();
+        // wait while pressed
         goto loc_56cd;
+    }
 loc_56d9:
     if (memoryAGet(ss, bp - 6) != 0xff)
         goto loc_56e2;
@@ -8525,6 +8545,8 @@ loc_580c:
     sub_5958();
     goto loc_5944;
 loc_58ec:
+    bumpyScene = "levels";
+    sync();
     sub_3cae();
     if (!(memoryAGet(ds, 0x8244) & 0x01))
         goto loc_58fb;
@@ -9339,7 +9361,7 @@ loc_5fe3:
     si = ax;
     if ((short)ax < (short)0x0002)
         goto loc_5fe3;
-    al = memoryAGet(ss, bp + si + 65482);
+    al = memoryAGet(ss, bp + si - 54);
     memoryASet(ss, bp - 4, al);
     al = 0x00;
     memoryASet(ss, bp - 3, al);
@@ -10740,6 +10762,7 @@ void sub_6a96()
     sub_ca53();
 loc_6aa5:
     al = memoryAGet(ss, bp + 4);
+    if (al) {
     memoryASet(ds, 0x8562, al);
     ah = 0x00;
     ax <<= 1;
@@ -10759,6 +10782,7 @@ loc_6aa5:
     dx = memoryAGet16(es, bx + 2);
     memoryASet16(ds, 0xa0ba, dx);
     memoryASet16(ds, 0xa0bc, ax);
+    }
     sp = bp;
     bp = pop();
     assert(pop() == 0x7777);
@@ -12183,6 +12207,7 @@ loc_78b2:
     sp += 0x0008;
     goto loc_7b30;
 loc_791a:
+    bumpyScene = "highscores";
     if (!(memoryAGet(ss, bp - 1) & 0x01))
         goto loc_7984;
     if ((short)memoryAGet16(ss, bp - 6) <= (short)0x01ac)
@@ -12901,7 +12926,7 @@ loc_7f59:
 loc_7f9e:
     al = memoryAGet(ss, bp + 8);
     memoryASet(ss, bp + 8, memoryAGet(ss, bp + 8) - 1);
-    if (stop(/*condition!*/))
+    if (al)
         goto loc_7f59;
     bx = memoryAGet16(ds, 0x8884);
     es = memoryAGet16(ds, 0x8884 + 2);
@@ -14568,14 +14593,15 @@ loc_8bb3:
 loc_8bd3:
     if (memoryAGet(ds, 0x79b8) != 0x2f)
         goto loc_8be2;
+    flags.carry = (memoryAGet16(ds, 0xa0d4) + 0x2616) > 0x10000;
     memoryASet16(ds, 0xa0d4, memoryAGet16(ds, 0xa0d4) + 0x2616);
     goto loc_8bef;
 loc_8be2:
     if (memoryAGet(ds, 0x79b8) != 0x30)
         goto loc_8bf4;
+    flags.carry = (memoryAGet16(ds, 0xa0d4) + 0xc256) > 0x10000;
     memoryASet16(ds, 0xa0d4, memoryAGet16(ds, 0xa0d4) + 0xc256);
 loc_8bef:
-    stop(/*8*/); // inject carry failed
     memoryASet16(ds, 0xa0d6, memoryAGet16(ds, 0xa0d6) + flags.carry);
 loc_8bf4:
     bp = pop();
@@ -16050,6 +16076,7 @@ void sub_998b()
     di = pop();
     bx = pop();
     ds = pop();
+    flags.zero = ax == 0;
 }
 void sub_99d1()
 {
@@ -19140,7 +19167,7 @@ loc_bc2c:
     memoryASet16(es, bx + 14, ax);
     if (di == 0x0002)
         goto loc_bcb0;
-    if (stop(/*condition!*/))
+    if (!si)
         goto loc_bcb0;
     memoryASet16(ds, 0x6984, 0x9f25);
     ax = memoryAGet16(ss, bp + 8);
@@ -20256,7 +20283,6 @@ loc_c662:
 void sub_c7be()
 {
     push(0x7777);
-    stop(/*override stack*/);
     cx = pop();
     push(cs);
     push(cx);
@@ -20307,8 +20333,8 @@ loc_c81f:
     flags.carry = !!(ax & 0x8000);
     ax <<= 1;
     dx = rcl(dx, 0x0001);
-    si = rcl(si, 0x0001);
-    di = rcl(di, 0x0001);
+    si = rcl((uint16_t)si, 0x0001);
+    di = rcl((uint16_t)di, 0x0001);
     if (di < bp)
         goto loc_c836;
     if (di > bp)
@@ -20357,7 +20383,7 @@ loc_c861:
 }
 void sub_c865()
 {
-    stop(/*override stack*/);
+    push(0x7777);
     es = pop();
     push(cs);
     push(es);
@@ -20385,7 +20411,8 @@ loc_c880:
     dx += ax;
     al = ch;
     ax &= 0x000f;
-    cs = pop();
+//    cs = pop();
+    es = 0x99b0; pop(); pop(); // wtf?
     return;
     //   gap of 19 bytes
 loc_c8a7:
@@ -20405,12 +20432,11 @@ loc_c8af:
     dx += ax;
     al = ch;
     ax &= 0x000f;
-    cs = pop();
+//    cs = pop();
 }
 void sub_c8c5()
 {
     push(0x7777);
-    stop(/*override stack*/);
     es = pop();
     push(cs);
     push(es);
@@ -20434,7 +20460,7 @@ void sub_c8c5()
     si = pop();
     bp = pop();
     assert(pop() == 0x7777);
-    cs = pop();
+//    cs = pop();
     sp += 8;
 }
 void sub_c8e4()
@@ -20455,7 +20481,7 @@ loc_c8ed:
     tx = cx;
     cx = ax;
     ax = tx;
-    mul(si);
+    mul((uint16_t)si);
     ax += cx;
 loc_c8f4:
     tx = si;
@@ -20610,7 +20636,7 @@ loc_c991:
     if (!flags.zero && !flags.carry)
         goto loc_c99d;
 loc_c996:
-    if (stop(/*1 - jb loc_c9d8*/))
+    if (flags.carry)
         goto loc_c9d8;
     sub_c9ad();
     if (!flags.zero && !flags.carry)
@@ -20672,7 +20698,7 @@ loc_ca0e:
     memoryASet16(ds, 0x006d, ax);
     ax = memoryAGet16(ds, 0x6bac);
     memoryASet16(ds, 0x006b, ax);
-    jumpIndirect(cs, memoryAGet16(ds, 0x6bb0));
+//    jumpIndirect(cs, memoryAGet16(ds, 0x6bb0));
 }
 // INJECT: Error: cannot inject zero flag in sub_c9ad()!
 // INJECT: Error: cannot inject carry flag in sub_c9ad()!
@@ -20692,22 +20718,36 @@ loc_c9b8:
     al = 0;
     flags.carry = true;
     if (cx == 0)
+    {
+        flags.zero = true;
         goto loc_c9d4;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
     al -= 0x22;
     if (al == 0)
+    {
+        flags.zero = true;
         goto loc_c9d4;
+    }
     al += 0x22;
     if (al != 0x5c)
+    {
+        flags.zero = false;
         goto loc_c9d2;
+    }
     if (memoryAGet(ds, si) != 0x22)
+    {
+        flags.zero = false;
         goto loc_c9d2;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
+    flags.zero = cx == 0;
 loc_c9d2:
+    flags.carry = false;
 loc_c9d4:
-    stop(/*inject ret*/);
+    return;
 }
 void sub_ca53()
 {
@@ -21314,6 +21354,8 @@ loc_cd70:
     if (--cx)
         goto loc_cd5d;
 loc_cd76:
+    bumpyScene = "startup";
+    sync();
     al = 0x3c;
     push(cs);
     cs = 0x01ed;
@@ -22383,10 +22425,6 @@ loc_d5d2:
 }
 void sub_d65d()
 {
-    memoryASet(cs, 0x0c63, 0x21);
-    goto loc_d673;
-    //   gap of 14 bytes
-loc_d673:
     dx = 0x03ce;
     al = 0x04;
     out(dx, al);
@@ -22406,7 +22444,7 @@ loc_d683:
     tl = al;
     al = ah;
     ah = tl;
-    sub_d69e();
+    sub_d69e(0x21);
     al++;
     ah <<= 1;
     if ((char)al > (char)0x03)
@@ -22417,10 +22455,6 @@ loc_d683:
 }
 void sub_d665()
 {
-    memoryASet(cs, 0x0c63, 0x09);
-    goto loc_d673;
-    //   gap of 6 bytes
-loc_d673:
     dx = 0x03ce;
     al = 0x04;
     out(dx, al);
@@ -22440,7 +22474,7 @@ loc_d683:
     tl = al;
     al = ah;
     ah = tl;
-    sub_d69e();
+    sub_d69e(0x09);
     al++;
     ah <<= 1;
     if ((char)al > (char)0x03)
@@ -22451,7 +22485,6 @@ loc_d683:
 }
 void sub_d66d()
 {
-    memoryASet(cs, 0x0c63, 0x31);
     dx = 0x03ce;
     al = 0x04;
     out(dx, al);
@@ -22471,7 +22504,7 @@ loc_d683:
     tl = al;
     al = ah;
     ah = tl;
-    sub_d69e();
+    sub_d69e(0x31);
     al++;
     ah <<= 1;
     if ((char)al > (char)0x03)
@@ -22480,7 +22513,7 @@ loc_d683:
     goto loc_d683;
     //   gap of 64 bytes
 }
-void sub_d69e()
+void sub_d69e(uint8_t opcode)
 {
     push(ax);
     push(si);
@@ -22502,7 +22535,15 @@ loc_d6b8:
     cx >>= 1;
 loc_d6c0:
     ax = memoryAGet16(ds, si);
-    memoryASet16(es, di, memoryAGet16(es, di) & ax);
+    switch (opcode)
+    {
+        // 26 21 05    and word ptr es:[di], ax
+        case 0x21: memoryAAnd16(es, di, ax); break;
+        // 26 09 05    or word ptr es:[di], ax
+        case 0x09: memoryAOr16(es, di, ax); break;
+        // 26 31 05    xor word ptr es:[di], ax
+        case 0x31: memoryAXor16(es, di, ax); break;
+    }
     si += 0x0002;
     di += 0x0002;
     if (--cx)
@@ -22551,6 +22592,7 @@ void sub_d7d7()
     memoryASet(ds, 0x5420, 0x01);
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
+    assert(bx == 4);
     callIndirect(cs, memoryAGet16(ds, bx + 21854));
 loc_d802:
     es = pop();
@@ -22664,6 +22706,7 @@ void sub_da88()
     memoryASet(ds, 0x5420, 0x00);
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
+    assert(bx==4);
     callIndirect(cs, memoryAGet16(ds, bx + 22168));
 loc_dab2:
     es = pop();
@@ -23796,7 +23839,7 @@ loc_e55b:
     memoryASet(ds, 0x4e16, memoryAGet(ds, 0x4e16) - 1);
     tl = memoryAGet(ds, 0x4e16);
     ds = bp;
-    if (stop("check inject: dec byte ptr [0x4e16]") && tl != 0)
+    if (tl != 0)
         goto loc_e527;
     goto loc_e590;
 loc_e565:
@@ -25769,6 +25812,7 @@ loc_10ec9:
     //   gap of 1183 bytes
 loc_11371:
     ax = 0x0000;
+    ax = memoryAGet16(cs, 0x25e2);
     switch (ax)
     {
         case 0x2004: goto loc_10d94;
@@ -25815,6 +25859,7 @@ void sub_11aa5()
     di = memoryAGet16(ds, 0x541d);
     di += di;
     ax = memoryAGet16(cs, bx + di);
+    assert(di == 4);
     callIndirect(cs, ax);
     es = pop();
     ds = pop();
@@ -26448,6 +26493,7 @@ loc_121d2:
     if (--cx)
         goto loc_121bf;
 loc_121d8:
+    sync();
     al = 0x3f;
     push(cs);
     cs = 0x01ed;
@@ -26507,6 +26553,7 @@ void sub_12230()
     push(es);
     bx = memoryAGet16(ds, 0x541d);
     bx <<= 1;
+    assert(bx == 4);
     callIndirect(cs, memoryAGet16(ds, bx + 26998));
     es = pop();
     ds = pop();
@@ -26517,6 +26564,7 @@ void sub_12230()
 }
 void sub_12245()
 {
+    sync();
     dx = 0x03da;
 loc_12248:
     in(al, dx);

diff --git a/./tunneler.clean b/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/tuneller/dos/cicorun/./tunneler.cpp
index 2b382e3..f4bf377 100644
--- a/./tunneler.clean
+++ b/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/tuneller/dos/cicorun/./tunneler.cpp
@@ -6641,11 +6641,13 @@ loc_52eb: // 01ed:341b
     push(bp);
     sub_422d();
 loc_52ef: // 01ed:341f
+    sync();
     si = 0x0040;
     es = si;
     ax = memoryAGet16(es, 0x006c);
-    if (ax == memoryAGet16(ss, bp + 55070))
-        goto loc_52ef;
+    // todo: gabo skip
+//    if (ax == memoryAGet16(ss, bp + 55070))
+//        goto loc_52ef;
     si = 0x0040;
     es = si;
     ax = memoryAGet16(es, 0x006c);
@@ -6677,7 +6679,8 @@ loc_533b: // 01ed:346b
     es = pop();
     memoryASet(es, di, 0xff);
 loc_5352: // 01ed:3482
-    if (memoryAGet(ss, bp + 55075) != 0x00)
+    // gabo skip
+//    if (memoryAGet(ss, bp + 55075) != 0x00)
         goto loc_535c;
     goto loc_4c1b;
 loc_535c: // 01ed:348c
@@ -7096,7 +7099,7 @@ loc_56d5: // 01ed:3805
     ax = memoryAGet16(ss, bp - 4);
     memoryASet16(ss, bp - 2, ax);
     di = memoryAGet16(ss, bp - 4);
-    stop(); // lea!
+    di = bp+di-0x0206;// stop(); // lea! TODO: CICO!
     push(ss);
     push(di);
     di = memoryAGet16(ds, 0x1321);
@@ -10958,7 +10961,7 @@ loc_7c86: // 01ed:5db6
 loc_7ca6: // 01ed:5dd6
     sub_78e5();
 loc_7ca9: // 01ed:5dd9
-    al = memoryAGet(ds, 0x131c);
+    al = memoryAGet(ds, 0x131c); // check keyboard
     if (al != 0x3c)
         goto loc_7cb6;
     sub_6a18();
@@ -10984,7 +10987,8 @@ loc_7cc0: // 01ed:5df0
     sub_8fdd();
     assert(cs == 0x01ed);
     sub_21da();
-    if ((short)memoryAGet16(ds, 0x1323) <= (short)0x0000)
+    memoryASet16(ds, 0x1323, 0xffff); // gabo hack!
+    if ((short)memoryAGet16(ds, 0x1323) <= (short)0x0000) // not ready!
         goto loc_7d20;
     al = 0x01;
     push(ax);
@@ -12159,11 +12163,13 @@ void sub_8b5a() // 081e:097a
     CStackGuard sg(0, false);
     if (cl < 0x02)
         goto loc_8b68;
+    flags.carry = cl < 6; // TODO: CICO!
     flags.carry = !flags.carry;
-    if (stop(/*1 - jae loc_8b68*/))
+    if (!flags.carry) // gabo check!
         goto loc_8b68;
+    flags.carry = cl < 8; // TODO: CICO!
 loc_8b68: // 081e:0988
-    stop(/*inject ret*/);
+    return;
 }
 void sub_8b69() // 081e:0989
 {
@@ -12191,7 +12197,7 @@ void sub_8b8a() // 081e:09aa
 {
     CStackGuard sg(0, false);
     al = 0;
-    stop(/*inject ret*/);
+    flags.zero = true;
 }
 void sub_8b9e() // 081e:09be
 {
@@ -12453,6 +12459,7 @@ void sub_8db2() // 08d0:00b2
     push(ds);
     bp = sp;
     al = memoryAGet(ss, bp + 12);
+    int intval = al;
     memoryASet(cs, 0x00dd, al);
     si = memoryAGet16(ss, bp + 8);
     ds = memoryAGet16(ss, bp + 8 + 2);
@@ -12478,7 +12485,7 @@ void sub_8db2() // 08d0:00b2
     ds = pop();
     si = pop();
     ax = pop();
-    interrupt(0x0);
+    interrupt(intval);
     tx = flags.carry | (flags.zero << 1);
     push(tx);
     push(es);
@@ -12690,10 +12697,13 @@ loc_8f59: // 08e1:0149
 }
 void sub_8fa0() // 08e1:0190
 {
-    stop(/*unk call conv*/);
+//    stop(/*unk call conv*/);
     if (memoryAGet(ds, 0x1593) != 0x00)
+    {
+        assert(0);
         goto loc_8fa8;
-    stop(/*unk call conv*/);
+    }
+//    stop(/*unk call conv*/);
     return;
 loc_8fa8: // 08e1:0198
     memoryASet(ds, 0x1593, 0x00);
@@ -12951,7 +12961,7 @@ void sub_9189() // 08e1:0379
     push(ds);
     di = memoryAGet16(ss, bx + 4);
     ds = memoryAGet16(ss, bx + 4 + 2);
-    memoryASet16(ds, di + 2, 0xd7b0);
+    memoryASet16(ds, di + 2, 0xd7b0); // wr4 d7b0
     memoryASet16(ds, di + 4, 0x0080);
     ax = di + 0x80;
     memoryASet16(ds, di + 12, ax);
@@ -12977,7 +12987,7 @@ void sub_91b4() // 08e1:03a4
     cx = bx;
     if (memoryAGet16(ds, di + 2) == 0xd7b1)
         goto loc_91d4;
-    memoryASet16(ds, di + 2, 0xd7b2);
+    memoryASet16(ds, di + 2, 0xd7b2); // wr6 d7b2
     ax = 0x0489;
     bx = ax;
 loc_91d4: // 08e1:03c4
@@ -13578,7 +13588,7 @@ loc_972a: // 0947:02ba
 }
 void sub_9730() // 0947:02c0
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(6, true); // TODO: CICO!
     push(0x7777);
     goto loc_9730;
 loc_965c: // 0947:01ec
@@ -13755,8 +13765,10 @@ loc_985c: // 0947:03ec
 loc_9875: // 0947:0405
     if (bx > dx)
         goto loc_987f;
+    flags.carry = bx < dx;
     if (bx < dx)
         goto loc_989c;
+    flags.carry = cx < ax;
     if (cx < ax)
         goto loc_989c;
 loc_987f: // 0947:040f
@@ -13773,7 +13785,6 @@ loc_9894: // 0947:0424
     memoryASet16(ds, 0x179c, dx);
     flags.carry = false;
 loc_989c: // 0947:042c
-    stop(/*inject ret*/);
     return;
 loc_989d: // 0947:042d
     cx = memoryAGet16(es, di + 4);
@@ -14114,7 +14125,7 @@ loc_9d99: // 0947:0929
     push(bp);
     bp = di;
     bp ^= dx;
-    tx = flags.carry | (flags.zero << 1);
+    tx = flags.carry | (flags.zero << 1) | (bp & 0x8000);
     push(tx);
     bp = di;
     dh |= 0x80;
@@ -14152,7 +14163,7 @@ loc_9de2: // 0947:0972
     tx = pop();
     flags.carry = tx & 1;
     flags.zero = (tx << 1) & 1;
-    if (stop(/*1 - js loc_9dfa*/))
+    if (tx & 0x8000)
         goto loc_9dfa;
     flags.carry = (ah + ch) >= 0x100;
     ah += ch;
@@ -14185,10 +14196,13 @@ loc_9dfa: // 0947:098a
     dx = tx;
     flags.carry = ah < ch;
     ah -= ch;
-    stop(/*74*/);
+    tl = bx < si + flags.carry;
     bx -= si + flags.carry;
+    flags.carry = tl;
+    tl = dx < di + flags.carry;
     dx -= di + flags.carry;
-    if (stop(/*70*/))
+    flags.carry = tl;
+    if (!flags.carry)
         goto loc_9e1b;
     bp ^= 0x8000;
     ah = ~ah;
@@ -14278,7 +14292,7 @@ loc_9d99: // 0947:0929
     push(bp);
     bp = di;
     bp ^= dx;
-    tx = flags.carry | (flags.zero << 1);
+    tx = flags.carry | (flags.zero << 1) | (bp & 0x8000);
     push(tx);
     bp = di;
     dh |= 0x80;
@@ -14316,7 +14330,7 @@ loc_9de2: // 0947:0972
     tx = pop();
     flags.carry = tx & 1;
     flags.zero = (tx << 1) & 1;
-    if (stop(/*1 - js loc_9dfa*/))
+    if (tx & 0x8000)
         goto loc_9dfa;
     flags.carry = (ah + ch) >= 0x100;
     ah += ch;
@@ -14349,10 +14363,13 @@ loc_9dfa: // 0947:098a
     dx = tx;
     flags.carry = ah < ch;
     ah -= ch;
-    stop(/*74*/);
+    tl = bx < si + flags.carry;
     bx -= si + flags.carry;
+    flags.carry = tl;
+    tl = dx < di + flags.carry;
     dx -= di + flags.carry;
-    if (stop(/*70*/))
+    flags.carry = tl;
+    if (!flags.carry)
         goto loc_9e1b;
     bp ^= 0x8000;
     ah = ~ah;
@@ -14425,22 +14442,26 @@ void sub_9ed4() // 0947:0a64
     bp += 0x0005;
     cl = 0x08;
 loc_9eed: // 0947:0a7d
+    flags.carry = dx < di;
     if (dx != di)
         goto loc_9ef7;
+    flags.carry = bx < si;
     if (bx != si)
         goto loc_9ef7;
 loc_9ef7: // 0947:0a87
-    if (stop(/*1 - jb loc_9eff*/))
+    if (flags.carry)
         goto loc_9eff;
     flags.carry = ah < ch;
     ah -= ch;
-    stop(/*74*/);
+    tl = bx < si + flags.carry;
     bx -= si + flags.carry;
+    flags.carry = tl;
+    tl = dx < di + flags.carry;
     dx -= di + flags.carry;
+    flags.carry = tl;
 loc_9eff: // 0947:0a8f
     flags.carry = !flags.carry;
 loc_9f00: // 0947:0a90
-    stop(/*carry2*/);
     al = rcl(al, 0x01);
     tl = cl;
     cl--;
@@ -14455,8 +14476,10 @@ loc_9f06: // 0947:0a96
         goto loc_9eed;
     flags.carry = ah < ch;
     ah -= ch;
-    stop(/*74*/);
+    tl = bx < si + flags.carry;
     bx -= si + flags.carry;
+    flags.carry = tl;
+    tl = dx < di + flags.carry;
     dx -= di + flags.carry;
     flags.carry = true;
     goto loc_9f00;
@@ -14482,7 +14505,6 @@ loc_9f18: // 0947:0aa8
 loc_9f34: // 0947:0ac4
     flags.carry = !flags.carry;
 loc_9f35: // 0947:0ac5
-    stop(/*carry2*/);
     si = rcl(si, 0x0001);
     ax = pop();
     bx = pop();
@@ -14491,7 +14513,6 @@ loc_9f35: // 0947:0ac5
     bp = pop();
     if (dh & 0x80)
         goto loc_9f4b;
-    stop(/*carry1*/);
     si = rcr(si, 0x0001);
     ah = rcl(ah, 0x01);
     bx = rcl(bx, 0x0001);
@@ -14500,7 +14521,7 @@ loc_9f35: // 0947:0ac5
 loc_9f4b: // 0947:0adb
     al++;
     flags.carry = true;
-    if (stop(/*70*/))
+    if (al == 0)
         goto loc_9f5c;
 loc_9f50: // 0947:0ae0
     dh ^= cl;
@@ -14516,7 +14537,7 @@ loc_9f5c: // 0947:0aec
 void sub_9f5d() // 0947:0aed
 {
     CStackGuard sg(0, false);
-    if (stop(/*1 - jb loc_9f6a*/))
+    if (flags.carry)
         goto loc_9f6a;
     flags.carry = (al + 0x80) >= 0x100;
     al += 0x80;
@@ -14544,8 +14565,9 @@ loc_9f6e: // 0947:0afe
     tx = di;
     di = ax;
     ax = tx;
+    flags.zero = false;
 loc_9f7f: // 0947:0b0f
-    stop(/*inject ret*/);
+    return;
 }
 void sub_9faa() // 0947:0b3a
 {
@@ -14604,6 +14626,7 @@ void sub_9fe9() // 0947:0b79
     cl -= bl;
     if (tl < bl)
         goto loc_a03e;
+    flags.carry = false;
     if (cl > 0x1f)
         goto loc_a040;
     cl++;
@@ -14628,9 +14651,9 @@ loc_a018: // 0947:0ba8
     ax = rcr(ax, 0x0001);
     flags.carry = cl == 0;
     cl--;
-    if (stop(/*inject_t::temp - dec cl*/))
+    if (cl != 0) // CICO TODO!
         goto loc_a018;
-    if (stop(/*inject_t::carry*/))
+    if (!flags.carry)
         goto loc_a02e;
     if (!ch)
         goto loc_a02e;
@@ -14656,7 +14679,6 @@ loc_a03e: // 0947:0bce
 loc_a040: // 0947:0bd0
     ax = 0;
     dx = 0;
-    stop(/*inject ret*/);
 }
 void sub_a06b() // 0947:0bfb
 {
@@ -14975,8 +14997,10 @@ loc_a5c9: // 0947:1159
     al++;
     flags.carry = bx < memoryAGet16(cs, si);
     bx -= memoryAGet16(cs, si);
+    tl = dx < memoryAGet16(cs, si + 2) + flags.carry;;
     dx -= memoryAGet16(cs, si + 2) + flags.carry;
-    if (stop(/*70*/))
+    flags.carry = tl;
+    if (!flags.carry)
         goto loc_a5c9;
     flags.carry = (bx + memoryAGet16(cs, si)) >= 0x10000;
     bx += memoryAGet16(cs, si);
@@ -15005,7 +15029,7 @@ void sub_a6a9() // 0947:1239
     ax = 0;
     stosw<MemAuto, DirAuto>();
     ax = 0xd7b0;
-    stosw<MemAuto, DirAuto>();
+    stosw<MemAuto, DirAuto>(); // es:di = 0ac3:1596
     ax = 0x0080;
     stosw<MemAuto, DirAuto>();
     ax = 0;
@@ -15103,14 +15127,23 @@ loc_a747: // 0947:12d7
     dx = pop();
 loc_a74c: // 0947:12dc
     ax = 0;
-    memoryASet16(es, di + 2, dx);
+    {
+        static int pass = 0;
+        if (pass==0)
+            assert(dx == 0xd7b2);
+        if (pass==2)
+            assert(dx == 0xd7b2);
+        pass++;
+    }
+    memoryASet16(es, di + 2, dx); // wr1,wr5 d7b2
     memoryASet16(es, di + 8, ax);
     memoryASet16(es, di + 10, ax);
     bx = 0x0010;
     sub_a7bc();
+    assert(flags.zero);
     if (flags.zero)
         goto loc_a768;
-    memoryASet16(es, di + 2, 0xd7b0);
+    memoryASet16(es, di + 2, 0xd7b0); // wr3,wr7 d7b0
 loc_a768: // 0947:12f8
     assert(pop() == 0x7777);
     cs = pop();
@@ -15172,13 +15205,13 @@ void sub_a7bc() // 0947:134c
     cs = memoryAGet16(es, bx + di + 2);
     callIndirect(memoryAGet16(es, bx + di + 2), memoryAGet16(es, bx + di));
     assert(cs == 0x0947);
+    flags.zero = !ax;
     if (!ax)
         goto loc_a7ca;
     memoryASet16(ds, 0x17cb, ax);
 loc_a7ca: // 0947:135a
     di = pop();
     es = pop();
-    stop(/*inject ret*/);
 }
 void sub_a7cd() // 0947:135d
 {
@@ -15225,7 +15258,7 @@ loc_a826: // 0947:13b6
     ax = 0x146a;
     bx = 0x1435;
 loc_a82c: // 0947:13bc
-    memoryASet16(ds, di + 2, 0xd7b2);
+    memoryASet16(ds, di + 2, 0xd7b2); // wr2 d7b2
 loc_a831: // 0947:13c1
     memoryASet16(ds, di + 20, ax);
     memoryASet16(ds, di + 22, cs);
@@ -15368,12 +15401,18 @@ void sub_a9a3() // 0947:1533
 // INJECT: Error: cannot inject flag in sub_a9ad() because of being label!
 void sub_a9ad() // 0947:153d
 {
-    CStackGuard sg(0, false);
-    if (memoryAGet16(es, di + 2) != 0xd7b2)
+    if (memoryAGet16(es, di + 2) != 0xd7b2) // wr8 0ac3:1696 0c41:1696
+    {
+        assert(0);
         goto loc_a9ce;
+    }
+    flags.zero = memoryAGet16(ds, 0x17cb) == 0x0000;
     if (memoryAGet16(ds, 0x17cb) != 0x0000)
+    {
+        assert(0);
         goto loc_a9d4;
-    si = pop();
+    }
+    si = 0xff66; //pop(); return address!
     push(ds);
     push(es);
     push(di);
@@ -15382,11 +15421,14 @@ void sub_a9ad() // 0947:153d
     tx = di;
     di = memoryAGet16(es, tx + 12);
     es = memoryAGet16(es, tx + 12 + 2);
-    stop(/*2*/); // 0947:155c jmp si - jump Indirect si
+    //stop(/*2*/); // 0947:155c jmp si - jump Indirect si 0947:16b6, 15fb, 16b6, 1658, 15fb,, 1658, 16b6
+    return;
 loc_a9ce: // 0947:155e
     memoryASet16(ds, 0x17cb, 0x0069);
 loc_a9d4: // 0947:1564
-    stop(/*inject ret*/);
+    assert(0);
+    return;
+    //stop(/*inject ret*/);
 }
 void sub_a9d5() // 0947:1565
 {
@@ -15427,13 +15469,13 @@ loc_a9f8: // 0947:1588
 }
 void sub_aa0b() // 0947:159b
 {
-    stop(/*override stack*/);
-    si = pop();
+//    stop(/*override stack*/);
+//    si = pop();
     di = pop();
     es = pop();
     ds = pop();
     memoryASet16(es, di + 8, bx);
-    stop(/*2*/); // 0947:15a3 jmp si - jump Indirect si
+//    stop(/*2*/); // 0947:15a3 jmp si - jump Indirect si
 }
 void sub_aa15() // 0947:15a5
 {
@@ -15489,7 +15531,7 @@ loc_aa5d: // 0947:15ed
 }
 void sub_aa62() // 0947:15f2
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(4, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -15533,7 +15575,7 @@ loc_aaa0: // 0947:1630
 }
 void sub_aa7b() // 0947:160b
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(4, true);
     push(0x7777);
     bx = sp;
     di = memoryAGet16(ss, bx + 4);
@@ -15574,7 +15616,7 @@ void sub_aabf() // 0947:164f
         goto loc_aae0;
     cx = memoryAGet16(ss, bp + 6);
     cx--;
-    if (stop(/*82 - dec -> jle*/))
+    if ((int16_t)cx <= 0)
         goto loc_aad7;
 loc_aad0: // 0947:1660
     al = 0x20;
@@ -15594,12 +15636,12 @@ loc_aae0: // 0947:1670
 void sub_ab1d() // 0947:16ad
 {
     CStackGuardFar sg(6, true);
-    push(0x7777);
+    push(0x7774);
     push(bp);
     bp = sp;
     di = memoryAGet16(ss, bp + 12);
     es = memoryAGet16(ss, bp + 12 + 2);
-    sub_a9ad();
+    sub_a9ad(); // gabo si=16b6 no match
     if (!flags.zero)
         goto loc_ab4d;
     si = memoryAGet16(ss, bp + 8);
@@ -15633,7 +15675,7 @@ loc_ab4a: // 0947:16da
     sub_aa0b();
 loc_ab4d: // 0947:16dd
     bp = pop();
-    assert(pop() == 0x7777);
+    assert(pop() == 0x7774);
     cs = pop();
     sp += 6;
 }

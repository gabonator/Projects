diff --git a/./historik.cpp b/Users/gabrielvalky/Documents/git/Projects/CicoJit/cicorun/cicorun/./game.cpp
index 1f7a507..4d44a85 100644
--- a/./historik.cpp
+++ b/Users/gabrielvalky/Documents/git/Projects/CicoJit/cicorun/cicorun/./game.cpp
@@ -1,5 +1,6 @@
 #include "cicoemu.h"
 using namespace CicoContext;
+#include <stdio.h>
 
 class CStackGuard
 {
@@ -2433,8 +2434,8 @@ void sub_1f809();
 // INJECT: Error: cannot inject flag in sub_2286() because of being label!
 void sub_1ed0() // 01ed:0000
 {
-    CStackGuardFar sg(0, true);
-    push(0x7777);
+//    CStackGuardFar sg(0, true);
+//    push(0x7777);
     flags.interrupts = true;
     dx = 0x1f86;
     memoryASet16(cs, 0x0172, dx);
@@ -2930,7 +2931,7 @@ void sub_2022() // 01ed:0152
 }
 void sub_2044() // 01ed:0174
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(8, true);
     push(0x7777);
     cl = 0x03;
     goto loc_2052;
@@ -3023,7 +3024,7 @@ loc_20c9: // 01ed:01f9
 }
 void sub_204c() // 01ed:017c
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(8, true);
     push(0x7777);
     cl = 0x01;
     goto loc_2052;
@@ -3116,7 +3117,7 @@ loc_20c9: // 01ed:01f9
 }
 void sub_2050() // 01ed:0180
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(8, true);
     push(0x7777);
     cx = 0;
     push(bp);
@@ -3382,7 +3383,7 @@ void sub_219f() // 01ed:02cf
 }
 void sub_21c4() // 01ed:02f4
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(8, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -3421,9 +3422,10 @@ loc_21e7: // 01ed:0317
 }
 void sub_21f8() // 01ed:0328
 {
-    stop(/*unk call conv*/);
-    stop(/*override stack*/);
-    memoryASet16(cs, 0x0320, pop());
+    push(0x7777);
+//    stop(/*unk call conv*/);
+//    stop(/*override stack*/);
+    memoryASet16(cs, 0x0320, pop()); // checkpoint ok
     memoryASet16(cs, 0x0322, pop());
     memoryASet16(cs, 0x0324, ds);
     flags.direction = false;
@@ -3488,7 +3490,7 @@ loc_226a: // 01ed:039a
     if (!flags.zero && !flags.carry)
         goto loc_2276;
 loc_226f: // 01ed:039f
-    if (stop(/*1*/))
+    if (flags.carry)
         goto loc_22b3;
     sub_2286();
     if (!flags.zero && !flags.carry)
@@ -3533,13 +3535,13 @@ loc_22e1: // 01ed:0411
     lodsb_ss<MemAuto, DirAuto>();
     if (--cx && al)
         goto loc_22e1;
-    if (stop(/*1*/))
+    if (false)
         goto loc_22d6;
 loc_22e9: // 01ed:0419
     ax = 0;
     memoryASet16(ss, bp, ax);
     memoryASet16(ss, bp + 2, ax);
-    stop(); // ljmp cs:[0x320]
+//    stop(); // ljmp cs:[0x320]
 }
 // INJECT: Error: cannot inject flag in sub_2286() because of being label!
 void sub_2286() // 01ed:03b6
@@ -3559,34 +3561,48 @@ loc_2291: // 01ed:03c1
     al = 0;
     flags.carry = true;
     if (cx == 0)
+    {
+        flags.zero = true;
         goto loc_22ad;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
     al -= 0x22;
     if (al == 0)
+    {
+        flags.zero = true;
         goto loc_22ad;
+    }
     al += 0x22;
     if (al != 0x5c)
+    {
+        flags.zero = false;
         goto loc_22ab;
+    }
     if (memoryAGet(ds, si) != 0x22)
+    {
+        flags.zero = false;
         goto loc_22ab;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
+    flags.zero = cx == 0;
 loc_22ab: // 01ed:03db
+    flags.carry = false;
 loc_22ad: // 01ed:03dd
-    stop(/*inject ret*/);
+    return;
 }
 void sub_22f6() // 01ed:0426
 {
     CStackGuardFar sg(0, true);
     push(0x7777);
-    es = memoryAGet16(ds, 0x006b);
+    es = memoryAGet16(ds, 0x006b); // checkpoint OK
     di = 0;
     push(es);
     push(memoryAGet16(ds, 0x006d));
     push(cs);
     cs = 0x1f23;
-    sub_1f231();
+    sub_1f231(); // checkpoint crash
     assert(cs == 0x01ed);
     sp += 0x0002;
     bx = ax;
@@ -12447,7 +12463,7 @@ void sub_7bd0() // 06c1:0fc0
     memoryASet16(ss, bp - 8, ax);
     if (false)
         goto loc_7c0e;
-    if (stop(/*condition!*/))
+    if (dx)
         goto loc_7c09;
     if (ax <= 0xfa00)
         goto loc_7c0e;
@@ -14515,6 +14531,7 @@ loc_8d13: // 06c1:2103
     push(ax);
     push(si);
     push(cs);
+    sync();
     sub_88fc();
     sp += 0x000a;
     push(si);
@@ -16914,12 +16931,14 @@ loc_a1ff: // 06c1:35ef
     ax = memoryAGet16(ss, bp - 4);
     flags.carry = ax < memoryAGet16(ss, bp - 8);
     ax -= memoryAGet16(ss, bp - 8);
+    tl = dx < memoryAGet16(ss, bp - 6) + flags.carry;
     dx -= memoryAGet16(ss, bp - 6) + flags.carry;
+    flags.carry = tl;
     memoryASet16(ss, bp - 2, dx);
     memoryASet16(ss, bp - 4, ax);
-    if (stop(/*condition!*/))
+    if (flags.carry == 0 && dx == 0)
         goto loc_a225;
-    if (false)
+    if (flags.carry)
         goto loc_a21c;
     if (ax >= 0x4e20)
         goto loc_a225;
@@ -17505,10 +17524,12 @@ loc_a9d5: // 0a34:0695
     if (al)
         goto loc_a9d5;
 loc_a9dd: // 0a34:069d
+    sync();
     push(cs);
     sub_a78f();
-    if (!al)
-        goto loc_a9dd;
+    // todo: gabo skip loop
+//    if (!al)
+//        goto loc_a9dd;
 loc_a9e5: // 0a34:06a5
     push(cs);
     sub_a78f();
@@ -19435,9 +19456,10 @@ void sub_b9cf() // 0a34:168f
         goto loc_b9dd;
     si--;
 loc_b9dd: // 0a34:169d
-    ax = memoryAGet16(ds, 0x8dd8);
-    if (ax < si)
-        goto loc_b9dd;
+    sync();
+//    ax = memoryAGet16(ds, 0x8dd8);
+//    if (ax < si)
+//        goto loc_b9dd;
     memoryASet16(ds, 0x8dd8, 0x0000);
     bp = pop();
     si = pop();
@@ -19457,6 +19479,7 @@ void sub_b9ed() // 0a34:16ad
         goto loc_b9fb;
     si--;
 loc_b9fb: // 0a34:16bb
+    sync();
     ax = memoryAGet16(ds, 0x8dd8);
     if (ax >= si)
         goto loc_ba0b;
@@ -25559,6 +25582,7 @@ void sub_f223() // 0ee7:03b3
 }
 void sub_f23f() // 0ee7:03cf
 {
+//    assert(0);
     CStackGuardFar sg(0, true);
     push(0x7777);
     push(memoryAGet16(ds, 0x8de0));
@@ -25850,8 +25874,11 @@ loc_f423: // 0ee7:05b3
     push(ax);
     push(cs);
     cs = 0x11cd;
-    sub_11cd0();
+    sub_11cd0(); // joystick
     assert(cs == 0x0ee7);
+    // gabo fake
+    ax = 1;
+//    assert(ax == 1);
     sp++;
     sp++;
     if (!ax)
@@ -25870,6 +25897,8 @@ loc_f443: // 0ee7:05d3
     push(ax);
     push(cs);
     sub_f25d();
+    //gabo fake
+    ax = 1;
     sp++;
     sp++;
     if (!ax)
@@ -28033,7 +28062,9 @@ void sub_1061f() // 0ee7:17af
     assert(cs == 0x0ee7);
     memoryASet16(ds, 0x8de4, ax);
     push(cs);
-    sub_f38a();
+    sub_f38a(); // joystick
+    ax = 1; //gabo fake
+    assert(ax==1);
     memoryASet(ds, 0x8812, 0x00);
     if (memoryAGet(ds, 0x881b) != 0x00)
         goto loc_10654;
@@ -31340,14 +31371,17 @@ loc_1269a: // 11cd:09ca
     assert(pop() == 0x7777);
     cs = pop();
 }
-void sub_126a0() // 126a:0000
+void sub_126a0() // 126a:0000 not called
 {
-    CStackGuardFar sg(0, false);
-    cx = ds;
-    push(cx);
-    cx = 0x0000;
-    push(cx);
-    stop(/*inject ret*/);
+//    CStackGuardFar sg(0, false);
+//    cx = ds;
+//    push(cx);
+//    cx = 0x0000;
+//    push(cx);
+//    stop(/*inject ret*/);
+//    cs = pop();
+    // call DS:0000
+    printf("dont know 126a:0000\n");
     cs = pop();
 }
 void sub_126a8() // 126a:0008
@@ -32011,7 +32045,7 @@ loc_12f53: // 129d:0583
     flags.carry = ax < bx;
     ax -= bx;
     cx -= flags.carry;
-    if (stop(/*70*/))
+    if (cx != 0)
         goto loc_12f53;
     if (ax != 0)
         goto loc_12f53;
@@ -33316,7 +33350,7 @@ loc_13ae2: // 12f9:0b52
     assert(cs == 0x12f9);
     memoryASet16(ds, 0x8b8e, dx);
     memoryASet16(ds, 0x8b8c, ax);
-    if (stop(/*condition!*/))
+    if (dx)
         goto loc_13b42;
     if (false)
         goto loc_13b36;
@@ -53265,7 +53299,6 @@ loc_1e0fd: // 1dc4:04bd
 }
 void sub_1e0fe() // 1dc4:04be
 {
-    stop(/*unk call conv*/);
     push(cs);
     sub_1e0c4();
 loc_1e102: // 1dc4:04c2
@@ -53758,6 +53791,7 @@ void sub_1e3e9() // 1dc4:07a9
     si = 0x0002;
     goto loc_1e456;
 loc_1e422: // 1dc4:07e2
+    sync();
     ax = 0;
     push(ax);
     push(si);
@@ -54044,6 +54078,7 @@ void sub_1e59e() // 1dc4:095e
     si = 0x0026;
     goto loc_1e64c;
 loc_1e612: // 1dc4:09d2
+    sync();
     ax = 0x00cb;
     push(ax);
     ax = si;
@@ -54123,6 +54158,8 @@ loc_1e64c: // 1dc4:0a0c
 }
 void sub_1e69a() // 1e69:000a
 {
+    cs = pop();
+    return;
     CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
@@ -54208,7 +54245,7 @@ loc_1e712: // 1e6d:0042
     ax = sar(ax, 1);
     ax = sar(ax, 1);
     ax = sar(ax, 1);
-    if (stop(/*70*/))
+    if ((int16_t)ax >= 0)
         goto loc_1e727;
     ax = 0;
     goto loc_1e72f;
@@ -55511,10 +55548,33 @@ loc_1f144: // 1f0d:0074
     si = memoryAGet16(ds, si + 8);
     ds = pop();
     es = pop();
-    push(cs);
-    cs = memoryAGet16(ss, bp - 14 + 2);
-    callIndirect(memoryAGet16(ss, bp - 14 + 2)*16 + memoryAGet16(ss, bp - 14));
-    assert(cs == 0x1f0d);
+//    push(cs);
+//    cs = memoryAGet16(ss, bp - 14 + 2);
+    {
+        uint8_t buf[] = {
+            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)),
+            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+1),
+            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+2),
+            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+3),
+            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+4),
+            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+5),
+        };
+        if (buf[0] == 0x55 && buf[1] == 0xcd && buf[3] == 0x5d && buf[4] == 0xcb)
+        {
+            interrupt(buf[2]);
+        } else
+        {
+            printf("indigen %02x %02x %02x %02x %02x %02x\n",
+                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
+            assert(0);
+        }
+    }
+//    printf("indicall 1f0d:0092 -> %04x:%04x (ofs at %04x:%04x)\n",
+//           memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14), ss, bp-14);
+    // 21e8, 21e2, 21d4*, 21d8, 21e0 "conversion by movie interactive", 21e8*******
+    // 55 (push bp), cd 10, 5d (pop bp), cb (retf)
+//    callIndirect(memoryAGet16(ss, bp - 14 + 2)*16 + memoryAGet16(ss, bp - 14));
+//    assert(cs == 0x1f0d);
     tx = flags.carry | (flags.zero << 1);
     push(tx);
     tx = flags.carry | (flags.zero << 1);
@@ -56307,7 +56367,7 @@ loc_1f670: // 1f66:0010
     if (!al)
         goto loc_1f696;
     flags.zero = memoryAGet(es, di++) == al;
-    if (stop(/*1*/))
+    if (flags.zero)
         goto loc_1f670;
     if (al < 0x61)
         goto loc_1f685;
@@ -56534,3 +56594,4 @@ loc_1f851: // 1f80:0051
     assert(pop() == 0x7777);
     cs = pop();
 }
+

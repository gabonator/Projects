#include "cicoemu.h"
using namespace CicoContext;

const int prehistorikLevel = 1;

class CStackGuard
{
    uint16_t minit;
    bool uses;
public:
    CStackGuard(int ofs, bool use):minit(sp+ofs),uses(use) { if (!uses) push(0xabcd);}
    ~CStackGuard() {
        if (!uses)
            assert(pop() == 0xabcd);
        assert(minit == sp);
    }
};

class CStackGuardFar
{
    uint16_t minit;
public:
    CStackGuardFar(int ofs, bool use):minit(sp+ofs) {}
    ~CStackGuardFar() { assert(minit == sp-2); }
};

void sub_1ed0();
void fixReloc(uint16_t seg);

void start()
{
    headerSize = 0x2000;
    loadAddress = 0x01ed;
    cs = 0x01ed;
    ds = 0x01dd;
    es = 0x01dd;
    ss = 0x2956;
    sp = 0x0080;
    load("/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/prehistorik/dos", "HISTORIK.EXE", 164166);
    fixReloc(cs);
    sub_1ed0();
}
void fixReloc(uint16_t seg)
{
    memory16(0x0000 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x000c + seg, 0x0005) += seg; // 0000 -> 01ed
    memory16(0x000c + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x000f + seg, 0x0009) += seg; // 110c -> 12f9
    memory16(0x000f + seg, 0x000f) += seg; // 1cbc -> 1ea9
    memory16(0x0010 + seg, 0x0009) += seg; // 0000 -> 01ed
    memory16(0x0017 + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x003e + seg, 0x0001) += seg; // 0000 -> 01ed
    memory16(0x0043 + seg, 0x0004) += seg; // 1d36 -> 1f23
    memory16(0x0044 + seg, 0x000d) += seg; // 0000 -> 01ed
    memory16(0x0049 + seg, 0x0009) += seg; // 0000 -> 01ed
    memory16(0x004b + seg, 0x0001) += seg; // 0000 -> 01ed
    memory16(0x0050 + seg, 0x0008) += seg; // 09b4 -> 0ba1
    memory16(0x0054 + seg, 0x0008) += seg; // 1d20 -> 1f0d
    memory16(0x0056 + seg, 0x0005) += seg; // 1d20 -> 1f0d
    memory16(0x005c + seg, 0x0007) += seg; // 1d20 -> 1f0d
    memory16(0x0060 + seg, 0x000c) += seg; // 0caa -> 0e97
    memory16(0x0065 + seg, 0x0005) += seg; // 1d36 -> 1f23
    memory16(0x007f + seg, 0x000d) += seg; // 1d14 -> 1f01
    memory16(0x0081 + seg, 0x0008) += seg; // 1d36 -> 1f23
    memory16(0x00a1 + seg, 0x0003) += seg; // 1d14 -> 1f01
    memory16(0x00a2 + seg, 0x000c) += seg; // 1d36 -> 1f23
    memory16(0x00b1 + seg, 0x0007) += seg; // 1d14 -> 1f01
    memory16(0x00b3 + seg, 0x0007) += seg; // 1d36 -> 1f23
    memory16(0x00c1 + seg, 0x000e) += seg; // 1d14 -> 1f01
    memory16(0x00c3 + seg, 0x000f) += seg; // 1d36 -> 1f23
    memory16(0x00cc + seg, 0x000b) += seg; // 1d36 -> 1f23
    memory16(0x00d3 + seg, 0x0003) += seg; // 1d14 -> 1f01
    memory16(0x00d5 + seg, 0x0006) += seg; // 0847 -> 0a34
    memory16(0x00d9 + seg, 0x0003) += seg; // 1d20 -> 1f0d
    memory16(0x00dd + seg, 0x0009) += seg; // 09b4 -> 0ba1
    memory16(0x00de + seg, 0x000a) += seg; // 09b4 -> 0ba1
    memory16(0x00e4 + seg, 0x000f) += seg; // 09b4 -> 0ba1
    memory16(0x00e8 + seg, 0x000d) += seg; // 0caa -> 0e97
    memory16(0x00ec + seg, 0x000f) += seg; // 0c24 -> 0e11
    memory16(0x00ee + seg, 0x0006) += seg; // 0847 -> 0a34
    memory16(0x00f4 + seg, 0x0000) += seg; // 1d20 -> 1f0d
    memory16(0x00f8 + seg, 0x0008) += seg; // 0847 -> 0a34
    memory16(0x00fa + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x00ff + seg, 0x000b) += seg; // 0ad5 -> 0cc2
    memory16(0x0106 + seg, 0x000b) += seg; // 0847 -> 0a34
    memory16(0x0119 + seg, 0x0001) += seg; // 0847 -> 0a34
    memory16(0x011d + seg, 0x000b) += seg; // 0caa -> 0e97
    memory16(0x011f + seg, 0x000d) += seg; // 0847 -> 0a34
    memory16(0x0138 + seg, 0x000d) += seg; // 0ad5 -> 0cc2
    memory16(0x0145 + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x0155 + seg, 0x000d) += seg; // 0ad5 -> 0cc2
    memory16(0x0172 + seg, 0x0003) += seg; // 0ad5 -> 0cc2
    memory16(0x0175 + seg, 0x0001) += seg; // 0ad5 -> 0cc2
    memory16(0x0181 + seg, 0x0008) += seg; // 0ad5 -> 0cc2
    memory16(0x0185 + seg, 0x0006) += seg; // 0ad5 -> 0cc2
    memory16(0x018d + seg, 0x0007) += seg; // 0ad5 -> 0cc2
    memory16(0x018f + seg, 0x0004) += seg; // 0ad5 -> 0cc2
    memory16(0x0199 + seg, 0x0004) += seg; // 0ad5 -> 0cc2
    memory16(0x01a3 + seg, 0x000a) += seg; // 0ad5 -> 0cc2
    memory16(0x01b4 + seg, 0x0005) += seg; // 09b4 -> 0ba1
    memory16(0x01c1 + seg, 0x0006) += seg; // 0c24 -> 0e11
    memory16(0x01d2 + seg, 0x000c) += seg; // 09b4 -> 0ba1
    memory16(0x01e2 + seg, 0x000e) += seg; // 0c24 -> 0e11
    memory16(0x01e9 + seg, 0x0009) += seg; // 1d20 -> 1f0d
    memory16(0x01f0 + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x01f2 + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x01f8 + seg, 0x0003) += seg; // 1d20 -> 1f0d
    memory16(0x0203 + seg, 0x0007) += seg; // 0847 -> 0a34
    memory16(0x020a + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x020c + seg, 0x0008) += seg; // 09b4 -> 0ba1
    memory16(0x020e + seg, 0x0001) += seg; // 0c24 -> 0e11
    memory16(0x020f + seg, 0x000a) += seg; // 0caa -> 0e97
    memory16(0x0211 + seg, 0x000d) += seg; // 09b4 -> 0ba1
    memory16(0x0215 + seg, 0x0004) += seg; // 0847 -> 0a34
    memory16(0x0218 + seg, 0x0001) += seg; // 0ad5 -> 0cc2
    memory16(0x021c + seg, 0x0009) += seg; // 09b4 -> 0ba1
    memory16(0x0220 + seg, 0x0005) += seg; // 0c24 -> 0e11
    memory16(0x0222 + seg, 0x000c) += seg; // 0caa -> 0e97
    memory16(0x0224 + seg, 0x000f) += seg; // 09b4 -> 0ba1
    memory16(0x0242 + seg, 0x0004) += seg; // 0c24 -> 0e11
    memory16(0x0247 + seg, 0x000b) += seg; // 0caa -> 0e97
    memory16(0x0260 + seg, 0x0000) += seg; // 09b4 -> 0ba1
    memory16(0x026b + seg, 0x000b) += seg; // 1d37 -> 1f24
    memory16(0x026d + seg, 0x0003) += seg; // 1d37 -> 1f24
    memory16(0x0277 + seg, 0x0004) += seg; // 1d37 -> 1f24
    memory16(0x0278 + seg, 0x000c) += seg; // 1d37 -> 1f24
    memory16(0x02b3 + seg, 0x0003) += seg; // 09b4 -> 0ba1
    memory16(0x02b5 + seg, 0x000a) += seg; // 09b4 -> 0ba1
    memory16(0x02d0 + seg, 0x0001) += seg; // 0c24 -> 0e11
    memory16(0x02d2 + seg, 0x0008) += seg; // 0c24 -> 0e11
    memory16(0x02ea + seg, 0x000d) += seg; // 0caa -> 0e97
    memory16(0x02ed + seg, 0x0006) += seg; // 0caa -> 0e97
    memory16(0x02f4 + seg, 0x0005) += seg; // 0ad5 -> 0cc2
    memory16(0x02fd + seg, 0x000c) += seg; // 09b4 -> 0ba1
    memory16(0x0306 + seg, 0x0008) += seg; // 0c24 -> 0e11
    memory16(0x0332 + seg, 0x000a) += seg; // 09b4 -> 0ba1
    memory16(0x034c + seg, 0x0007) += seg; // 0c24 -> 0e11
    memory16(0x0361 + seg, 0x0008) += seg; // 0caa -> 0e97
    memory16(0x03b0 + seg, 0x000c) += seg; // 0ad5 -> 0cc2
    memory16(0x03b4 + seg, 0x0004) += seg; // 0caa -> 0e97
    memory16(0x03bb + seg, 0x0005) += seg; // 09b4 -> 0ba1
    memory16(0x03bf + seg, 0x000f) += seg; // 0c24 -> 0e11
    memory16(0x03c2 + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x03c7 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x03e9 + seg, 0x0007) += seg; // 0000 -> 01ed
    memory16(0x0412 + seg, 0x000c) += seg; // 1d37 -> 1f24
    memory16(0x0414 + seg, 0x0009) += seg; // 1d37 -> 1f24
    memory16(0x0419 + seg, 0x0002) += seg; // 1d37 -> 1f24
    memory16(0x041a + seg, 0x000f) += seg; // 1d37 -> 1f24
    memory16(0x042f + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x0434 + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x0437 + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x043a + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x0447 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x0449 + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x044b + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x044c + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x0458 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x0459 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x045d + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x046c + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x046d + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x046e + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x0472 + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x0479 + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x047b + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x047c + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x047f + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x04b8 + seg, 0x0005) += seg; // 0000 -> 01ed
    memory16(0x04bc + seg, 0x000d) += seg; // 0000 -> 01ed
    memory16(0x04be + seg, 0x000b) += seg; // 0000 -> 01ed
    memory16(0x04c8 + seg, 0x000f) += seg; // 0847 -> 0a34
    memory16(0x04f1 + seg, 0x0001) += seg; // 10b0 -> 129d
    memory16(0x04f1 + seg, 0x0008) += seg; // 10b0 -> 129d
    memory16(0x04f3 + seg, 0x0000) += seg; // 10b0 -> 129d
    memory16(0x04f3 + seg, 0x0007) += seg; // 10b0 -> 129d
    memory16(0x04f6 + seg, 0x000a) += seg; // 1d5d -> 1f4a
    memory16(0x0507 + seg, 0x0009) += seg; // 09b4 -> 0ba1
    memory16(0x0508 + seg, 0x000f) += seg; // 1d3e -> 1f2b
    memory16(0x050a + seg, 0x0001) += seg; // 1d3e -> 1f2b
    memory16(0x050a + seg, 0x0008) += seg; // 09b4 -> 0ba1
    memory16(0x050c + seg, 0x0004) += seg; // 1d15 -> 1f02
    memory16(0x050e + seg, 0x000e) += seg; // 0000 -> 01ed
    memory16(0x0510 + seg, 0x0004) += seg; // 0000 -> 01ed
    memory16(0x0518 + seg, 0x0000) += seg; // 1d3e -> 1f2b
    memory16(0x0519 + seg, 0x0005) += seg; // 1cab -> 1e98
    memory16(0x051a + seg, 0x0005) += seg; // 1d3e -> 1f2b
    memory16(0x051b + seg, 0x000a) += seg; // 1cab -> 1e98
    memory16(0x051d + seg, 0x0009) += seg; // 1d3e -> 1f2b
    memory16(0x051e + seg, 0x000e) += seg; // 1cab -> 1e98
    memory16(0x051f + seg, 0x000e) += seg; // 1d3e -> 1f2b
    memory16(0x0521 + seg, 0x0003) += seg; // 1cab -> 1e98
    memory16(0x0524 + seg, 0x0001) += seg; // 0847 -> 0a34
    memory16(0x0525 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x0529 + seg, 0x0007) += seg; // 041e -> 060b
    memory16(0x052a + seg, 0x0006) += seg; // 041e -> 060b
    memory16(0x052a + seg, 0x000e) += seg; // 041e -> 060b
    memory16(0x052b + seg, 0x0003) += seg; // 0847 -> 0a34
    memory16(0x052b + seg, 0x0008) += seg; // 041e -> 060b
    memory16(0x052d + seg, 0x0009) += seg; // 0847 -> 0a34
    memory16(0x0530 + seg, 0x0000) += seg; // 041e -> 060b
    memory16(0x0531 + seg, 0x0003) += seg; // 041e -> 060b
    memory16(0x0534 + seg, 0x0003) += seg; // 1d3e -> 1f2b
    memory16(0x0537 + seg, 0x0000) += seg; // 041e -> 060b
    memory16(0x0538 + seg, 0x0003) += seg; // 041e -> 060b
    memory16(0x053b + seg, 0x0004) += seg; // 1d3e -> 1f2b
    memory16(0x053d + seg, 0x000a) += seg; // 1d5d -> 1f4a
    memory16(0x053f + seg, 0x0007) += seg; // 1d5d -> 1f4a
    memory16(0x0540 + seg, 0x0009) += seg; // 1d5d -> 1f4a
    memory16(0x0543 + seg, 0x0005) += seg; // 1d5d -> 1f4a
    memory16(0x0545 + seg, 0x0007) += seg; // 1d79 -> 1f66
    memory16(0x0547 + seg, 0x000a) += seg; // 1d33 -> 1f20
    memory16(0x054d + seg, 0x0004) += seg; // 1cab -> 1e98
    memory16(0x0552 + seg, 0x0009) += seg; // 1cab -> 1e98
    memory16(0x0555 + seg, 0x0009) += seg; // 1cab -> 1e98
    memory16(0x0559 + seg, 0x0008) += seg; // 1cab -> 1e98
    memory16(0x055e + seg, 0x000d) += seg; // 1cab -> 1e98
    memory16(0x0561 + seg, 0x000d) += seg; // 1cab -> 1e98
    memory16(0x0563 + seg, 0x0000) += seg; // 1cab -> 1e98
    memory16(0x0564 + seg, 0x0008) += seg; // 1d14 -> 1f01
    memory16(0x056a + seg, 0x0008) += seg; // 041e -> 060b
    memory16(0x0579 + seg, 0x0007) += seg; // 1d36 -> 1f23
    memory16(0x057b + seg, 0x0009) += seg; // 1d5d -> 1f4a
    memory16(0x057e + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x057f + seg, 0x0009) += seg; // 1d5d -> 1f4a
    memory16(0x0583 + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x0584 + seg, 0x0006) += seg; // 1d5d -> 1f4a
    memory16(0x0587 + seg, 0x000d) += seg; // 0000 -> 01ed
    memory16(0x0589 + seg, 0x0003) += seg; // 1d5d -> 1f4a
    memory16(0x0590 + seg, 0x000b) += seg; // 1d36 -> 1f23
    memory16(0x0592 + seg, 0x0001) += seg; // 1cbc -> 1ea9
    memory16(0x0599 + seg, 0x0002) += seg; // 1d36 -> 1f23
    memory16(0x059a + seg, 0x0008) += seg; // 1cbc -> 1ea9
    memory16(0x059f + seg, 0x000b) += seg; // 041e -> 060b
    memory16(0x05a0 + seg, 0x000d) += seg; // 041e -> 060b
    memory16(0x05a2 + seg, 0x0001) += seg; // 041e -> 060b
    memory16(0x05a2 + seg, 0x0009) += seg; // 041e -> 060b
    memory16(0x05a2 + seg, 0x000e) += seg; // 0847 -> 0a34
    memory16(0x05a3 + seg, 0x000b) += seg; // 0847 -> 0a34
    memory16(0x05a4 + seg, 0x0007) += seg; // 0847 -> 0a34
    memory16(0x05a5 + seg, 0x0005) += seg; // 041e -> 060b
    memory16(0x05aa + seg, 0x0002) += seg; // 1d72 -> 1f5f
    memory16(0x05ab + seg, 0x0005) += seg; // 1d72 -> 1f5f
    memory16(0x05ae + seg, 0x000b) += seg; // 1d3e -> 1f2b
    memory16(0x05af + seg, 0x000e) += seg; // 041e -> 060b
    memory16(0x05b8 + seg, 0x0002) += seg; // 1d5d -> 1f4a
    memory16(0x05ba + seg, 0x0000) += seg; // 1cab -> 1e98
    memory16(0x05be + seg, 0x0006) += seg; // 1d72 -> 1f5f
    memory16(0x05bf + seg, 0x0009) += seg; // 1d72 -> 1f5f
    memory16(0x05c4 + seg, 0x0002) += seg; // 1d3e -> 1f2b
    memory16(0x05c5 + seg, 0x0005) += seg; // 041e -> 060b
    memory16(0x05cd + seg, 0x0009) += seg; // 1d7e -> 1f6b
    memory16(0x05cf + seg, 0x0007) += seg; // 1cab -> 1e98
    memory16(0x05f2 + seg, 0x0000) += seg; // 1d36 -> 1f23
    memory16(0x0604 + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x0605 + seg, 0x0008) += seg; // 0000 -> 01ed
    memory16(0x0608 + seg, 0x0004) += seg; // 0000 -> 01ed
    memory16(0x061e + seg, 0x0009) += seg; // 1d14 -> 1f01
    memory16(0x063d + seg, 0x000f) += seg; // 1d36 -> 1f23
    memory16(0x0650 + seg, 0x0005) += seg; // 0000 -> 01ed
    memory16(0x0651 + seg, 0x0009) += seg; // 0000 -> 01ed
    memory16(0x0653 + seg, 0x000f) += seg; // 0000 -> 01ed
    memory16(0x0663 + seg, 0x000a) += seg; // 1d14 -> 1f01
    memory16(0x0687 + seg, 0x0002) += seg; // 1d36 -> 1f23
    memory16(0x0689 + seg, 0x0000) += seg; // 1cbc -> 1ea9
    memory16(0x0690 + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x0691 + seg, 0x0007) += seg; // 0000 -> 01ed
    memory16(0x0694 + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x069f + seg, 0x0004) += seg; // 1d14 -> 1f01
    memory16(0x06a4 + seg, 0x0003) += seg; // 09b4 -> 0ba1
    memory16(0x06a9 + seg, 0x0001) += seg; // 1d36 -> 1f23
    memory16(0x06b1 + seg, 0x000b) += seg; // 09b4 -> 0ba1
    memory16(0x06b6 + seg, 0x0005) += seg; // 0c24 -> 0e11
    memory16(0x06ba + seg, 0x000f) += seg; // 1d14 -> 1f01
    memory16(0x06c3 + seg, 0x000f) += seg; // 1d76 -> 1f63
    memory16(0x06cf + seg, 0x0008) += seg; // 1d76 -> 1f63
    memory16(0x06d2 + seg, 0x0009) += seg; // 1d76 -> 1f63
    memory16(0x06d5 + seg, 0x0005) += seg; // 1d76 -> 1f63
    memory16(0x06dd + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x06e2 + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x06e3 + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x06e7 + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x06f5 + seg, 0x000e) += seg; // 1d36 -> 1f23
    memory16(0x070b + seg, 0x0007) += seg; // 1d14 -> 1f01
    memory16(0x0711 + seg, 0x0008) += seg; // 1d36 -> 1f23
    memory16(0x0713 + seg, 0x0006) += seg; // 1cbc -> 1ea9
    memory16(0x071c + seg, 0x000f) += seg; // 1d14 -> 1f01
    memory16(0x073a + seg, 0x000f) += seg; // 1d36 -> 1f23
    memory16(0x074d + seg, 0x0006) += seg; // 0000 -> 01ed
    memory16(0x074e + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x0751 + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x0753 + seg, 0x0002) += seg; // 110c -> 12f9
    memory16(0x0757 + seg, 0x0005) += seg; // 0c24 -> 0e11
    memory16(0x0759 + seg, 0x0000) += seg; // 0c24 -> 0e11
    memory16(0x075c + seg, 0x0008) += seg; // 1d14 -> 1f01
    memory16(0x0760 + seg, 0x0008) += seg; // 1d36 -> 1f23
    memory16(0x0763 + seg, 0x0007) += seg; // 09b4 -> 0ba1
    memory16(0x0785 + seg, 0x0007) += seg; // 1d36 -> 1f23
    memory16(0x0795 + seg, 0x0007) += seg; // 0000 -> 01ed
    memory16(0x0796 + seg, 0x000b) += seg; // 0000 -> 01ed
    memory16(0x0799 + seg, 0x0001) += seg; // 0000 -> 01ed
    memory16(0x079e + seg, 0x000a) += seg; // 09b4 -> 0ba1
    memory16(0x07a0 + seg, 0x0005) += seg; // 09b4 -> 0ba1
    memory16(0x07a3 + seg, 0x000d) += seg; // 1d14 -> 1f01
    memory16(0x07a5 + seg, 0x0004) += seg; // 1d14 -> 1f01
    memory16(0x07b2 + seg, 0x000f) += seg; // 1d36 -> 1f23
    memory16(0x07b4 + seg, 0x000d) += seg; // 1cbc -> 1ea9
    memory16(0x07d9 + seg, 0x0003) += seg; // 1d36 -> 1f23
    memory16(0x07db + seg, 0x0001) += seg; // 1cbc -> 1ea9
    memory16(0x07e1 + seg, 0x000d) += seg; // 0000 -> 01ed
    memory16(0x07e3 + seg, 0x0001) += seg; // 0000 -> 01ed
    memory16(0x07e5 + seg, 0x000c) += seg; // 0000 -> 01ed
    memory16(0x07f3 + seg, 0x000f) += seg; // 1d14 -> 1f01
    memory16(0x07f5 + seg, 0x0006) += seg; // 1d14 -> 1f01
    memory16(0x0804 + seg, 0x000f) += seg; // 1d76 -> 1f63
    memory16(0x0810 + seg, 0x0008) += seg; // 1d76 -> 1f63
    memory16(0x0813 + seg, 0x0009) += seg; // 1d76 -> 1f63
    memory16(0x081b + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x081b + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x081c + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x081f + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x0822 + seg, 0x000e) += seg; // 09b4 -> 0ba1
    memory16(0x0827 + seg, 0x0006) += seg; // 1d36 -> 1f23
    memory16(0x082e + seg, 0x0002) += seg; // 1d14 -> 1f01
    memory16(0x082e + seg, 0x000a) += seg; // 1cd4 -> 1ec1
    memory16(0x0835 + seg, 0x000b) += seg; // 1d36 -> 1f23
    memory16(0x083a + seg, 0x000b) += seg; // 0000 -> 01ed
    memory16(0x083b + seg, 0x000e) += seg; // 1d3e -> 1f2b
    memory16(0x083d + seg, 0x0001) += seg; // 1cf9 -> 1ee6
    memory16(0x083e + seg, 0x0002) += seg; // 1d36 -> 1f23
    memory16(0x0842 + seg, 0x0005) += seg; // 1d5d -> 1f4a
    memory16(0x0843 + seg, 0x0000) += seg; // 1cab -> 1e98
    memory16(0x0846 + seg, 0x000d) += seg; // 1d14 -> 1f01
    memory16(0x0848 + seg, 0x0009) += seg; // 110c -> 12f9
    memory16(0x0849 + seg, 0x000c) += seg; // 108f -> 127c
    memory16(0x084a + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x084d + seg, 0x0004) += seg; // 0ac7 -> 0cb4
    memory16(0x084d + seg, 0x000b) += seg; // 0ac7 -> 0cb4
    memory16(0x084e + seg, 0x0003) += seg; // 0ac7 -> 0cb4
    memory16(0x0862 + seg, 0x0004) += seg; // 1d20 -> 1f0d
    memory16(0x086e + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x0870 + seg, 0x000b) += seg; // 1d20 -> 1f0d
    memory16(0x0879 + seg, 0x0003) += seg; // 1d20 -> 1f0d
    memory16(0x087c + seg, 0x0005) += seg; // 1d20 -> 1f0d
    memory16(0x087e + seg, 0x000d) += seg; // 1d20 -> 1f0d
    memory16(0x0880 + seg, 0x0008) += seg; // 1d1c -> 1f09
    memory16(0x0882 + seg, 0x0001) += seg; // 0847 -> 0a34
    memory16(0x0883 + seg, 0x0001) += seg; // 0847 -> 0a34
    memory16(0x0885 + seg, 0x0001) += seg; // 1d1c -> 1f09
    memory16(0x0886 + seg, 0x0001) += seg; // 0847 -> 0a34
    memory16(0x0889 + seg, 0x0000) += seg; // 0847 -> 0a34
    memory16(0x088a + seg, 0x0009) += seg; // 0847 -> 0a34
    memory16(0x088b + seg, 0x0009) += seg; // 0847 -> 0a34
    memory16(0x088d + seg, 0x000e) += seg; // 0ac7 -> 0cb4
    memory16(0x0896 + seg, 0x0001) += seg; // 1d20 -> 1f0d
    memory16(0x089b + seg, 0x0005) += seg; // 0ac7 -> 0cb4
    memory16(0x08a3 + seg, 0x0008) += seg; // 1d20 -> 1f0d
    memory16(0x08af + seg, 0x000c) += seg; // 1cb1 -> 1e9e
    memory16(0x08b2 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x08b4 + seg, 0x000c) += seg; // 0ac7 -> 0cb4
    memory16(0x08b5 + seg, 0x0003) += seg; // 0ac7 -> 0cb4
    memory16(0x08b5 + seg, 0x000a) += seg; // 0ac7 -> 0cb4
    memory16(0x08bd + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x08c3 + seg, 0x0006) += seg; // 09b4 -> 0ba1
    memory16(0x08e6 + seg, 0x0005) += seg; // 1d99 -> 1f86
    memory16(0x08e7 + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x08e9 + seg, 0x0001) += seg; // 1d1c -> 1f09
    memory16(0x08ea + seg, 0x0003) += seg; // 1d1c -> 1f09
    memory16(0x08eb + seg, 0x0005) += seg; // 1d1c -> 1f09
    memory16(0x08ef + seg, 0x0005) += seg; // 1d1c -> 1f09
    memory16(0x08f0 + seg, 0x0008) += seg; // 1d1c -> 1f09
    memory16(0x08f1 + seg, 0x0001) += seg; // 09b4 -> 0ba1
    memory16(0x08f1 + seg, 0x000c) += seg; // 1d1c -> 1f09
    memory16(0x08f3 + seg, 0x0001) += seg; // 1d1c -> 1f09
    memory16(0x08f4 + seg, 0x0005) += seg; // 1d1c -> 1f09
    memory16(0x08f5 + seg, 0x0009) += seg; // 1d1c -> 1f09
    memory16(0x0908 + seg, 0x0006) += seg; // 0ad5 -> 0cc2
    memory16(0x0914 + seg, 0x0009) += seg; // 0ad5 -> 0cc2
    memory16(0x0920 + seg, 0x000c) += seg; // 0ad5 -> 0cc2
    memory16(0x0932 + seg, 0x0004) += seg; // 09b4 -> 0ba1
    memory16(0x093f + seg, 0x000a) += seg; // 0c24 -> 0e11
    memory16(0x094a + seg, 0x0009) += seg; // 0caa -> 0e97
    memory16(0x0960 + seg, 0x0001) += seg; // 09b4 -> 0ba1
    memory16(0x0962 + seg, 0x0004) += seg; // 09b4 -> 0ba1
    memory16(0x0973 + seg, 0x0003) += seg; // 0c24 -> 0e11
    memory16(0x0975 + seg, 0x0006) += seg; // 0c24 -> 0e11
    memory16(0x0981 + seg, 0x0009) += seg; // 0caa -> 0e97
    memory16(0x0993 + seg, 0x0009) += seg; // 09b4 -> 0ba1
    memory16(0x09a1 + seg, 0x0003) += seg; // 0c24 -> 0e11
    memory16(0x09ac + seg, 0x0004) += seg; // 0caa -> 0e97
    memory16(0x09b3 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x09b6 + seg, 0x0001) += seg; // 0847 -> 0a34
    memory16(0x0a8f + seg, 0x000d) += seg; // 09b4 -> 0ba1
    memory16(0x0b25 + seg, 0x0007) += seg; // 0ad5 -> 0cc2
    memory16(0x0b25 + seg, 0x000d) += seg; // 0ad5 -> 0cc2
    memory16(0x0b2d + seg, 0x0005) += seg; // 0ad5 -> 0cc2
    memory16(0x0b2d + seg, 0x000b) += seg; // 0ad5 -> 0cc2
    memory16(0x0b33 + seg, 0x000b) += seg; // 0ad5 -> 0cc2
    memory16(0x0b34 + seg, 0x0001) += seg; // 0ad5 -> 0cc2
    memory16(0x0c5c + seg, 0x0006) += seg; // 0c24 -> 0e11
    memory16(0x0c61 + seg, 0x0007) += seg; // 0c24 -> 0e11
    memory16(0x0c68 + seg, 0x0008) += seg; // 0c24 -> 0e11
    memory16(0x0c6c + seg, 0x0005) += seg; // 0c24 -> 0e11
    memory16(0x0d0b + seg, 0x0005) += seg; // 1d99 -> 1f86
    memory16(0x0d0f + seg, 0x000f) += seg; // 1d1c -> 1f09
    memory16(0x0d11 + seg, 0x0008) += seg; // 1d1c -> 1f09
    memory16(0x0d12 + seg, 0x0004) += seg; // 1d1c -> 1f09
    memory16(0x0d13 + seg, 0x0003) += seg; // 09b4 -> 0ba1
    memory16(0x0d13 + seg, 0x000e) += seg; // 1d1c -> 1f09
    memory16(0x0d15 + seg, 0x0003) += seg; // 1d1c -> 1f09
    memory16(0x0d16 + seg, 0x0007) += seg; // 1d1c -> 1f09
    memory16(0x0d1f + seg, 0x0001) += seg; // 1d20 -> 1f0d
    memory16(0x0d20 + seg, 0x000c) += seg; // 1d20 -> 1f0d
    memory16(0x0d24 + seg, 0x0007) += seg; // 0ac7 -> 0cb4
    memory16(0x0d25 + seg, 0x0005) += seg; // 0ac7 -> 0cb4
    memory16(0x0d27 + seg, 0x0002) += seg; // 1d1c -> 1f09
    memory16(0x0d29 + seg, 0x0007) += seg; // 1d20 -> 1f0d
    memory16(0x0d2d + seg, 0x0003) += seg; // 1d20 -> 1f0d
    memory16(0x0d33 + seg, 0x0008) += seg; // 1d20 -> 1f0d
    memory16(0x0d35 + seg, 0x000a) += seg; // 1d6f -> 1f5c
    memory16(0x0d36 + seg, 0x0005) += seg; // 1cb1 -> 1e9e
    memory16(0x0d36 + seg, 0x000c) += seg; // 1d6f -> 1f5c
    memory16(0x0d37 + seg, 0x0006) += seg; // 108f -> 127c
    memory16(0x0d38 + seg, 0x0003) += seg; // 108f -> 127c
    memory16(0x0d38 + seg, 0x000a) += seg; // 108f -> 127c
    memory16(0x0d3b + seg, 0x0000) += seg; // 1cb1 -> 1e9e
    memory16(0x0d3d + seg, 0x000b) += seg; // 1cb1 -> 1e9e
    memory16(0x0d41 + seg, 0x0000) += seg; // 1cb1 -> 1e9e
    memory16(0x0d43 + seg, 0x0006) += seg; // 1cb1 -> 1e9e
    memory16(0x0d46 + seg, 0x000b) += seg; // 1cb1 -> 1e9e
    memory16(0x0d48 + seg, 0x000f) += seg; // 1cb1 -> 1e9e
    memory16(0x0d56 + seg, 0x0006) += seg; // 0fe0 -> 11cd
    memory16(0x0d6f + seg, 0x0000) += seg; // 1cb1 -> 1e9e
    memory16(0x0dc9 + seg, 0x0005) += seg; // 1d36 -> 1f23
    memory16(0x0df2 + seg, 0x0004) += seg; // 1d14 -> 1f01
    memory16(0x0df5 + seg, 0x000d) += seg; // 1d36 -> 1f23
    memory16(0x0e17 + seg, 0x0002) += seg; // 1d14 -> 1f01
    memory16(0x0e75 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x0e7a + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x0e7b + seg, 0x0003) += seg; // 1cbc -> 1ea9
    memory16(0x0e7c + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x0e7d + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x0e7d + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x0e7f + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x0e82 + seg, 0x000a) += seg; // 1cbc -> 1ea9
    memory16(0x0e96 + seg, 0x0001) += seg; // 1ca6 -> 1e93
    memory16(0x0e96 + seg, 0x0007) += seg; // 04d4 -> 06c1
    memory16(0x0e98 + seg, 0x0006) += seg; // 1d3e -> 1f2b
    memory16(0x0e99 + seg, 0x000f) += seg; // 1d7e -> 1f6b
    memory16(0x0e9b + seg, 0x0001) += seg; // 1d7e -> 1f6b
    memory16(0x0e9c + seg, 0x0003) += seg; // 1d7e -> 1f6b
    memory16(0x0e9d + seg, 0x0005) += seg; // 1d7e -> 1f6b
    memory16(0x0e9e + seg, 0x0007) += seg; // 1d7e -> 1f6b
    memory16(0x0e9f + seg, 0x0009) += seg; // 1d7e -> 1f6b
    memory16(0x0ea0 + seg, 0x0002) += seg; // 1cab -> 1e98
    memory16(0x0ea1 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x0ea6 + seg, 0x000d) += seg; // 1d1c -> 1f09
    memory16(0x0ea9 + seg, 0x0004) += seg; // 1d1c -> 1f09
    memory16(0x0eae + seg, 0x0007) += seg; // 1d1c -> 1f09
    memory16(0x0eaf + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x0eb2 + seg, 0x0001) += seg; // 0000 -> 01ed
    memory16(0x0eb4 + seg, 0x000c) += seg; // 0000 -> 01ed
    memory16(0x0eb7 + seg, 0x0005) += seg; // 0000 -> 01ed
    memory16(0x0ebd + seg, 0x0005) += seg; // 0ac7 -> 0cb4
    memory16(0x0ebd + seg, 0x000c) += seg; // 0ac7 -> 0cb4
    memory16(0x0ebe + seg, 0x0004) += seg; // 0ac7 -> 0cb4
    memory16(0x0ec2 + seg, 0x0001) += seg; // 1ca6 -> 1e93
    memory16(0x0ec5 + seg, 0x000b) += seg; // 1ca5 -> 1e92
    memory16(0x0ece + seg, 0x0004) += seg; // 1c8d -> 1e7a
    memory16(0x0ed1 + seg, 0x000b) += seg; // 0ecd -> 10ba
    memory16(0x0ed2 + seg, 0x0002) += seg; // 0ecd -> 10ba
    memory16(0x0ed3 + seg, 0x0005) += seg; // 1c8d -> 1e7a
    memory16(0x0ed8 + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x0ee6 + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x0ef9 + seg, 0x0007) += seg; // 0ecd -> 10ba
    memory16(0x0efa + seg, 0x0003) += seg; // 1c8d -> 1e7a
    memory16(0x0efb + seg, 0x0000) += seg; // 0ecd -> 10ba
    memory16(0x0efb + seg, 0x0009) += seg; // 1c8d -> 1e7a
    memory16(0x0efe + seg, 0x0006) += seg; // 0000 -> 01ed
    memory16(0x0f00 + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x0f00 + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x0f01 + seg, 0x0008) += seg; // 1c8d -> 1e7a
    memory16(0x0f15 + seg, 0x000a) += seg; // 0fe0 -> 11cd
    memory16(0x0f17 + seg, 0x0009) += seg; // 0fe0 -> 11cd
    memory16(0x0f18 + seg, 0x000c) += seg; // 0fe0 -> 11cd
    memory16(0x0f1b + seg, 0x0000) += seg; // 10ad -> 129a
    memory16(0x0f1c + seg, 0x0002) += seg; // 10ad -> 129a
    memory16(0x0f1d + seg, 0x0000) += seg; // 10ad -> 129a
    memory16(0x0f24 + seg, 0x0002) += seg; // 10ad -> 129a
    memory16(0x0f25 + seg, 0x0000) += seg; // 10ad -> 129a
    memory16(0x0f26 + seg, 0x0001) += seg; // 10ad -> 129a
    memory16(0x0f2a + seg, 0x0007) += seg; // 10ad -> 129a
    memory16(0x0f2b + seg, 0x0004) += seg; // 10ad -> 129a
    memory16(0x0f31 + seg, 0x000c) += seg; // 0fe0 -> 11cd
    memory16(0x0f32 + seg, 0x000f) += seg; // 10a7 -> 1294
    memory16(0x0f38 + seg, 0x000a) += seg; // 10a7 -> 1294
    memory16(0x0f3d + seg, 0x000a) += seg; // 0fe0 -> 11cd
    memory16(0x0f41 + seg, 0x000d) += seg; // 0fe0 -> 11cd
    memory16(0x0f46 + seg, 0x000b) += seg; // 0fe0 -> 11cd
    memory16(0x0f4e + seg, 0x0009) += seg; // 0fe0 -> 11cd
    memory16(0x0f50 + seg, 0x0006) += seg; // 0fe0 -> 11cd
    memory16(0x0f56 + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x0f58 + seg, 0x000d) += seg; // 0000 -> 01ed
    memory16(0x0f76 + seg, 0x000d) += seg; // 0fe0 -> 11cd
    memory16(0x0f77 + seg, 0x0005) += seg; // 0fe0 -> 11cd
    memory16(0x0f79 + seg, 0x0001) += seg; // 0fe0 -> 11cd
    memory16(0x0f7b + seg, 0x0005) += seg; // 10ad -> 129a
    memory16(0x0f7c + seg, 0x0005) += seg; // 10ad -> 129a
    memory16(0x0f7d + seg, 0x0004) += seg; // 10ad -> 129a
    memory16(0x0f80 + seg, 0x0002) += seg; // 0ecd -> 10ba
    memory16(0x0f83 + seg, 0x0001) += seg; // 1d6f -> 1f5c
    memory16(0x0f85 + seg, 0x000e) += seg; // 0847 -> 0a34
    memory16(0x0f88 + seg, 0x0006) += seg; // 10ad -> 129a
    memory16(0x0f89 + seg, 0x0004) += seg; // 10ad -> 129a
    memory16(0x0f8a + seg, 0x0006) += seg; // 10ad -> 129a
    memory16(0x0f8b + seg, 0x0005) += seg; // 10ad -> 129a
    memory16(0x0f8c + seg, 0x0004) += seg; // 10ad -> 129a
    memory16(0x0f8f + seg, 0x0002) += seg; // 1d14 -> 1f01
    memory16(0x0f95 + seg, 0x0007) += seg; // 0847 -> 0a34
    memory16(0x0f98 + seg, 0x0004) += seg; // 0fe0 -> 11cd
    memory16(0x0fde + seg, 0x000d) += seg; // 0ecd -> 10ba
    memory16(0x0fdf + seg, 0x0008) += seg; // 0847 -> 0a34
    memory16(0x0fe0 + seg, 0x000d) += seg; // 0fe0 -> 11cd
    memory16(0x0fe1 + seg, 0x0006) += seg; // 0fe0 -> 11cd
    memory16(0x0fe2 + seg, 0x000c) += seg; // 1c7c -> 1e69
    memory16(0x0fe4 + seg, 0x0003) += seg; // 1c7c -> 1e69
    memory16(0x0fe7 + seg, 0x000b) += seg; // 0fe0 -> 11cd
    memory16(0x0fe8 + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x0fe9 + seg, 0x0003) += seg; // 0fe0 -> 11cd
    memory16(0x0fe9 + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x0fec + seg, 0x0001) += seg; // 0fe0 -> 11cd
    memory16(0x0fed + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x0fef + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x0fef + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x0ff2 + seg, 0x000c) += seg; // 1c7c -> 1e69
    memory16(0x0ff4 + seg, 0x0001) += seg; // 1c7c -> 1e69
    memory16(0x0ff7 + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x0ff8 + seg, 0x0005) += seg; // 0fe0 -> 11cd
    memory16(0x1000 + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x1002 + seg, 0x0009) += seg; // 0fe0 -> 11cd
    memory16(0x1008 + seg, 0x000f) += seg; // 0fe0 -> 11cd
    memory16(0x100a + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x100e + seg, 0x0002) += seg; // 0fe0 -> 11cd
    memory16(0x1011 + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x1013 + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x1016 + seg, 0x0005) += seg; // 0fe0 -> 11cd
    memory16(0x1017 + seg, 0x0000) += seg; // 0fe0 -> 11cd
    memory16(0x1018 + seg, 0x0004) += seg; // 0fe0 -> 11cd
    memory16(0x101b + seg, 0x000d) += seg; // 1c7c -> 1e69
    memory16(0x101e + seg, 0x0001) += seg; // 0fe0 -> 11cd
    memory16(0x1020 + seg, 0x0000) += seg; // 0fe0 -> 11cd
    memory16(0x1021 + seg, 0x0003) += seg; // 0fe0 -> 11cd
    memory16(0x1023 + seg, 0x0004) += seg; // 0fe0 -> 11cd
    memory16(0x1024 + seg, 0x0008) += seg; // 0fe0 -> 11cd
    memory16(0x1025 + seg, 0x000c) += seg; // 0fe0 -> 11cd
    memory16(0x1027 + seg, 0x0000) += seg; // 0fe0 -> 11cd
    memory16(0x1028 + seg, 0x0004) += seg; // 0fe0 -> 11cd
    memory16(0x1029 + seg, 0x0008) += seg; // 0fe0 -> 11cd
    memory16(0x102c + seg, 0x0001) += seg; // 0fe0 -> 11cd
    memory16(0x1031 + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x103a + seg, 0x0001) += seg; // 0fe0 -> 11cd
    memory16(0x103a + seg, 0x000a) += seg; // 0fe0 -> 11cd
    memory16(0x103b + seg, 0x0004) += seg; // 0fe0 -> 11cd
    memory16(0x103b + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x103c + seg, 0x0008) += seg; // 0fe0 -> 11cd
    memory16(0x103d + seg, 0x0002) += seg; // 0fe0 -> 11cd
    memory16(0x103d + seg, 0x000c) += seg; // 0fe0 -> 11cd
    memory16(0x103e + seg, 0x0006) += seg; // 0fe0 -> 11cd
    memory16(0x103f + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x103f + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x1040 + seg, 0x0006) += seg; // 0fe0 -> 11cd
    memory16(0x1040 + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x1041 + seg, 0x0006) += seg; // 0fe0 -> 11cd
    memory16(0x1041 + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x1042 + seg, 0x0006) += seg; // 0fe0 -> 11cd
    memory16(0x1042 + seg, 0x000e) += seg; // 0fe0 -> 11cd
    memory16(0x104d + seg, 0x000f) += seg; // 1c7c -> 1e69
    memory16(0x1050 + seg, 0x0000) += seg; // 1c7c -> 1e69
    memory16(0x1054 + seg, 0x000d) += seg; // 1c7c -> 1e69
    memory16(0x1059 + seg, 0x0002) += seg; // 1c7c -> 1e69
    memory16(0x105d + seg, 0x0007) += seg; // 1c7c -> 1e69
    memory16(0x1066 + seg, 0x0009) += seg; // 1c7c -> 1e69
    memory16(0x106a + seg, 0x000e) += seg; // 1c7c -> 1e69
    memory16(0x106e + seg, 0x0009) += seg; // 1c7c -> 1e69
    memory16(0x1070 + seg, 0x000f) += seg; // 1c80 -> 1e6d
    memory16(0x1072 + seg, 0x000c) += seg; // 1c7c -> 1e69
    memory16(0x1073 + seg, 0x000c) += seg; // 1c7c -> 1e69
    memory16(0x1074 + seg, 0x0008) += seg; // 1d1f -> 1f0c
    memory16(0x1075 + seg, 0x0009) += seg; // 1c7c -> 1e69
    memory16(0x1076 + seg, 0x0009) += seg; // 1c7c -> 1e69
    memory16(0x1077 + seg, 0x0009) += seg; // 1d1f -> 1f0c
    memory16(0x1078 + seg, 0x000b) += seg; // 1d1f -> 1f0c
    memory16(0x1079 + seg, 0x000d) += seg; // 1c7c -> 1e69
    memory16(0x107a + seg, 0x000d) += seg; // 1c7c -> 1e69
    memory16(0x107e + seg, 0x000e) += seg; // 107d -> 126a
    memory16(0x1080 + seg, 0x000f) += seg; // 107d -> 126a
    memory16(0x1083 + seg, 0x0006) += seg; // 107d -> 126a
    memory16(0x1085 + seg, 0x000d) += seg; // 107d -> 126a
    memory16(0x1088 + seg, 0x0006) += seg; // 107d -> 126a
    memory16(0x108a + seg, 0x000f) += seg; // 107d -> 126a
    memory16(0x108d + seg, 0x0000) += seg; // 107d -> 126a
    memory16(0x108f + seg, 0x0001) += seg; // 107d -> 126a
    memory16(0x1093 + seg, 0x0003) += seg; // 107d -> 126a
    memory16(0x1094 + seg, 0x000f) += seg; // 107d -> 126a
    memory16(0x1096 + seg, 0x0009) += seg; // 107d -> 126a
    memory16(0x1099 + seg, 0x0000) += seg; // 107d -> 126a
    memory16(0x109b + seg, 0x0000) += seg; // 107d -> 126a
    memory16(0x109c + seg, 0x0004) += seg; // 107d -> 126a
    memory16(0x109d + seg, 0x000d) += seg; // 107d -> 126a
    memory16(0x10a1 + seg, 0x000f) += seg; // 107d -> 126a
    memory16(0x10a3 + seg, 0x0004) += seg; // 107d -> 126a
    memory16(0x10a7 + seg, 0x0003) += seg; // 0847 -> 0a34
    memory16(0x10ab + seg, 0x000a) += seg; // 1d6f -> 1f5c
    memory16(0x10ac + seg, 0x0003) += seg; // 1d6f -> 1f5c
    memory16(0x10ad + seg, 0x0001) += seg; // 1d6f -> 1f5c
    memory16(0x10f6 + seg, 0x0003) += seg; // 10b0 -> 129d
    memory16(0x10fa + seg, 0x000f) += seg; // 10b0 -> 129d
    memory16(0x10fd + seg, 0x0009) += seg; // 10b0 -> 129d
    memory16(0x1114 + seg, 0x0000) += seg; // 1d36 -> 1f23
    memory16(0x1117 + seg, 0x0005) += seg; // 0000 -> 01ed
    memory16(0x1118 + seg, 0x0007) += seg; // 0000 -> 01ed
    memory16(0x1119 + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x1119 + seg, 0x0009) += seg; // 04d4 -> 06c1
    memory16(0x1119 + seg, 0x000e) += seg; // 0cfa -> 0ee7
    memory16(0x111b + seg, 0x0001) += seg; // 1d3e -> 1f2b
    memory16(0x111d + seg, 0x0001) += seg; // 1d5d -> 1f4a
    memory16(0x111e + seg, 0x0003) += seg; // 1d5d -> 1f4a
    memory16(0x111f + seg, 0x0005) += seg; // 1d5d -> 1f4a
    memory16(0x1120 + seg, 0x0007) += seg; // 1d5d -> 1f4a
    memory16(0x1121 + seg, 0x0009) += seg; // 1d5d -> 1f4a
    memory16(0x1122 + seg, 0x000b) += seg; // 1d5d -> 1f4a
    memory16(0x1123 + seg, 0x0004) += seg; // 1cab -> 1e98
    memory16(0x1129 + seg, 0x000a) += seg; // 0cfa -> 0ee7
    memory16(0x1131 + seg, 0x000d) += seg; // 0847 -> 0a34
    memory16(0x1132 + seg, 0x000e) += seg; // 0cfa -> 0ee7
    memory16(0x1133 + seg, 0x000f) += seg; // 0ecd -> 10ba
    memory16(0x1134 + seg, 0x000b) += seg; // 0f75 -> 1162
    memory16(0x113a + seg, 0x0000) += seg; // 0847 -> 0a34
    memory16(0x113b + seg, 0x0001) += seg; // 1cd4 -> 1ec1
    memory16(0x113c + seg, 0x0008) += seg; // 0847 -> 0a34
    memory16(0x113d + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x113d + seg, 0x000b) += seg; // 1cbc -> 1ea9
    memory16(0x113e + seg, 0x000e) += seg; // 1cd4 -> 1ec1
    memory16(0x1140 + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x1141 + seg, 0x0001) += seg; // 1cd4 -> 1ec1
    memory16(0x1142 + seg, 0x0002) += seg; // 1cd4 -> 1ec1
    memory16(0x1143 + seg, 0x0003) += seg; // 1cd4 -> 1ec1
    memory16(0x1144 + seg, 0x000b) += seg; // 1cd4 -> 1ec1
    memory16(0x1145 + seg, 0x000c) += seg; // 0847 -> 0a34
    memory16(0x1146 + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x1146 + seg, 0x000f) += seg; // 1cbc -> 1ea9
    memory16(0x1148 + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x1149 + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x114a + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x114b + seg, 0x0008) += seg; // 0cfa -> 0ee7
    memory16(0x114c + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x114d + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1151 + seg, 0x0004) += seg; // 1d36 -> 1f23
    memory16(0x1155 + seg, 0x0004) += seg; // 1d36 -> 1f23
    memory16(0x1158 + seg, 0x0008) += seg; // 1d36 -> 1f23
    memory16(0x115c + seg, 0x0003) += seg; // 1d36 -> 1f23
    memory16(0x115d + seg, 0x0005) += seg; // 1d36 -> 1f23
    memory16(0x115e + seg, 0x0007) += seg; // 1d36 -> 1f23
    memory16(0x1183 + seg, 0x0006) += seg; // 1d36 -> 1f23
    memory16(0x1184 + seg, 0x0008) += seg; // 1d36 -> 1f23
    memory16(0x1185 + seg, 0x000a) += seg; // 1d36 -> 1f23
    memory16(0x118e + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x1190 + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x1191 + seg, 0x0002) += seg; // 1d36 -> 1f23
    memory16(0x1193 + seg, 0x0000) += seg; // 1d36 -> 1f23
    memory16(0x1194 + seg, 0x000e) += seg; // 1d36 -> 1f23
    memory16(0x11ab + seg, 0x0003) += seg; // 1d36 -> 1f23
    memory16(0x11ac + seg, 0x000c) += seg; // 1d36 -> 1f23
    memory16(0x11ae + seg, 0x0005) += seg; // 1d36 -> 1f23
    memory16(0x11b3 + seg, 0x000c) += seg; // 1d36 -> 1f23
    memory16(0x11b5 + seg, 0x0005) += seg; // 1d36 -> 1f23
    memory16(0x11b6 + seg, 0x000e) += seg; // 1d36 -> 1f23
    memory16(0x11bc + seg, 0x0002) += seg; // 1d36 -> 1f23
    memory16(0x11bd + seg, 0x000b) += seg; // 1d36 -> 1f23
    memory16(0x11c2 + seg, 0x0005) += seg; // 1cd4 -> 1ec1
    memory16(0x11c3 + seg, 0x0004) += seg; // 0000 -> 01ed
    memory16(0x11c4 + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x11c5 + seg, 0x0002) += seg; // 0000 -> 01ed
    memory16(0x11ca + seg, 0x000c) += seg; // 04d4 -> 06c1
    memory16(0x11cc + seg, 0x0000) += seg; // 04d4 -> 06c1
    memory16(0x11d0 + seg, 0x000c) += seg; // 1bd7 -> 1dc4
    memory16(0x11d1 + seg, 0x000f) += seg; // 1d14 -> 1f01
    memory16(0x11d2 + seg, 0x000f) += seg; // 1d14 -> 1f01
    memory16(0x11d3 + seg, 0x000f) += seg; // 1d14 -> 1f01
    memory16(0x11d4 + seg, 0x000f) += seg; // 1d14 -> 1f01
    memory16(0x11d7 + seg, 0x000b) += seg; // 1d14 -> 1f01
    memory16(0x11d8 + seg, 0x000b) += seg; // 1d14 -> 1f01
    memory16(0x11d9 + seg, 0x000b) += seg; // 1d14 -> 1f01
    memory16(0x11da + seg, 0x000b) += seg; // 1d14 -> 1f01
    memory16(0x11db + seg, 0x000b) += seg; // 1cd6 -> 1ec3
    memory16(0x11dc + seg, 0x000b) += seg; // 1d14 -> 1f01
    memory16(0x11dd + seg, 0x000b) += seg; // 1d14 -> 1f01
    memory16(0x11df + seg, 0x0004) += seg; // 1d14 -> 1f01
    memory16(0x11e0 + seg, 0x0004) += seg; // 1d14 -> 1f01
    memory16(0x11e1 + seg, 0x0004) += seg; // 1d14 -> 1f01
    memory16(0x11e2 + seg, 0x0003) += seg; // 0f75 -> 1162
    memory16(0x11e2 + seg, 0x0008) += seg; // 0fe0 -> 11cd
    memory16(0x11e2 + seg, 0x000d) += seg; // 0ecd -> 10ba
    memory16(0x11e4 + seg, 0x0001) += seg; // 1d14 -> 1f01
    memory16(0x11e5 + seg, 0x0000) += seg; // 108f -> 127c
    memory16(0x11e5 + seg, 0x0005) += seg; // 108f -> 127c
    memory16(0x11e6 + seg, 0x0001) += seg; // 0f75 -> 1162
    memory16(0x11ea + seg, 0x0009) += seg; // 1d14 -> 1f01
    memory16(0x11ed + seg, 0x0009) += seg; // 1d14 -> 1f01
    memory16(0x11f0 + seg, 0x0009) += seg; // 1d14 -> 1f01
    memory16(0x11f1 + seg, 0x0007) += seg; // 0847 -> 0a34
    memory16(0x11f2 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x11f2 + seg, 0x000a) += seg; // 1cbc -> 1ea9
    memory16(0x11fb + seg, 0x000c) += seg; // 170a -> 18f7
    memory16(0x11fc + seg, 0x0007) += seg; // 1d36 -> 1f23
    memory16(0x11fe + seg, 0x0002) += seg; // 04d4 -> 06c1
    memory16(0x11ff + seg, 0x000c) += seg; // 04d4 -> 06c1
    memory16(0x1200 + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x1201 + seg, 0x000c) += seg; // 04d4 -> 06c1
    memory16(0x1203 + seg, 0x000a) += seg; // 04d4 -> 06c1
    memory16(0x1204 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1205 + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x1206 + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x1206 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1207 + seg, 0x000c) += seg; // 170a -> 18f7
    memory16(0x1208 + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x1209 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x120a + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x120b + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x120c + seg, 0x0002) += seg; // 0f75 -> 1162
    memory16(0x120e + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1210 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x1211 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x1212 + seg, 0x000e) += seg; // 17f7 -> 19e4
    memory16(0x1214 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x1215 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x1217 + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x1218 + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x1218 + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x1219 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1219 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x121a + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x121a + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x121a + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x121e + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x1222 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x1223 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x1223 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x1224 + seg, 0x0006) += seg; // 1a04 -> 1bf1
    memory16(0x1224 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x1229 + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x122b + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x1232 + seg, 0x0003) += seg; // 0847 -> 0a34
    memory16(0x1234 + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x1236 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x1236 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x1237 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x1239 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x123b + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x123d + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1240 + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x1241 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1243 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x1245 + seg, 0x0009) += seg; // 1bd7 -> 1dc4
    memory16(0x1246 + seg, 0x0000) += seg; // 1bd7 -> 1dc4
    memory16(0x1246 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1247 + seg, 0x000d) += seg; // 0847 -> 0a34
    memory16(0x1248 + seg, 0x0004) += seg; // 0847 -> 0a34
    memory16(0x1250 + seg, 0x0005) += seg; // 1759 -> 1946
    memory16(0x1254 + seg, 0x0003) += seg; // 1759 -> 1946
    memory16(0x1257 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x125f + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x1268 + seg, 0x000b) += seg; // 1759 -> 1946
    memory16(0x126e + seg, 0x0001) += seg; // 1759 -> 1946
    memory16(0x1270 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1272 + seg, 0x0009) += seg; // 1759 -> 1946
    memory16(0x1274 + seg, 0x0000) += seg; // 1d14 -> 1f01
    memory16(0x1274 + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x1276 + seg, 0x0002) += seg; // 170a -> 18f7
    memory16(0x1279 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x127a + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x127c + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x127e + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x1280 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x1282 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x1284 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x1286 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x1288 + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x128b + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x1296 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x1297 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x129b + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x129d + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x12a0 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x12a2 + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x12ad + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x12af + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x12b1 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x12b1 + seg, 0x000f) += seg; // 0847 -> 0a34
    memory16(0x12b5 + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x12b6 + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x12b6 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x12b6 + seg, 0x000e) += seg; // 17f7 -> 19e4
    memory16(0x12b7 + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x12b9 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x12c3 + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x12c6 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x12c9 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x12cb + seg, 0x0007) += seg; // 1d5a -> 1f47
    memory16(0x12cc + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x12ce + seg, 0x0009) += seg; // 1d5a -> 1f47
    memory16(0x12cf + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x12d2 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x12d3 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x12d5 + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x12d7 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x12d9 + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x12db + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x12db + seg, 0x000d) += seg; // 0847 -> 0a34
    memory16(0x12de + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x12e6 + seg, 0x0009) += seg; // 170a -> 18f7
    memory16(0x12e7 + seg, 0x0004) += seg; // 1d36 -> 1f23
    memory16(0x12e9 + seg, 0x000a) += seg; // 04d4 -> 06c1
    memory16(0x12ea + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x12eb + seg, 0x000a) += seg; // 04d4 -> 06c1
    memory16(0x12ed + seg, 0x0002) += seg; // 04d4 -> 06c1
    memory16(0x12ef + seg, 0x0001) += seg; // 04d4 -> 06c1
    memory16(0x12f0 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x12f0 + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x12f1 + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x12f2 + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x12f3 + seg, 0x0003) += seg; // 170a -> 18f7
    memory16(0x12f3 + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x12f5 + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x12f5 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x12f6 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x12f7 + seg, 0x0009) += seg; // 1759 -> 1946
    memory16(0x12f9 + seg, 0x0001) += seg; // 04d4 -> 06c1
    memory16(0x12fa + seg, 0x0000) += seg; // 0f75 -> 1162
    memory16(0x12fc + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x1300 + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x1302 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x1303 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x1305 + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x1306 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1306 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x1307 + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x1307 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x1308 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x1308 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1308 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x130c + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1310 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x1311 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1311 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x1312 + seg, 0x0007) += seg; // 1a04 -> 1bf1
    memory16(0x1312 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x1313 + seg, 0x000f) += seg; // 0847 -> 0a34
    memory16(0x1316 + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x1316 + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x1318 + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x1319 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x131c + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x131d + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x1320 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x1324 + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1324 + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x1326 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x1329 + seg, 0x0001) += seg; // 1bd7 -> 1dc4
    memory16(0x1329 + seg, 0x000c) += seg; // 1bd7 -> 1dc4
    memory16(0x132a + seg, 0x0007) += seg; // 1bd7 -> 1dc4
    memory16(0x132b + seg, 0x0002) += seg; // 1bd7 -> 1dc4
    memory16(0x132b + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x132c + seg, 0x000f) += seg; // 0847 -> 0a34
    memory16(0x132d + seg, 0x0006) += seg; // 0847 -> 0a34
    memory16(0x1340 + seg, 0x0002) += seg; // 1759 -> 1946
    memory16(0x1341 + seg, 0x000a) += seg; // 04d4 -> 06c1
    memory16(0x1354 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x1358 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x135a + seg, 0x000c) += seg; // 1759 -> 1946
    memory16(0x135d + seg, 0x0005) += seg; // 1759 -> 1946
    memory16(0x135e + seg, 0x0009) += seg; // 1d14 -> 1f01
    memory16(0x135f + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x1360 + seg, 0x000b) += seg; // 170a -> 18f7
    memory16(0x1369 + seg, 0x0002) += seg; // 170a -> 18f7
    memory16(0x1369 + seg, 0x000d) += seg; // 1d36 -> 1f23
    memory16(0x136b + seg, 0x000e) += seg; // 04d4 -> 06c1
    memory16(0x136d + seg, 0x0008) += seg; // 04d4 -> 06c1
    memory16(0x136e + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x136f + seg, 0x0008) += seg; // 04d4 -> 06c1
    memory16(0x1371 + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1372 + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x1373 + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1373 + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x1374 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1375 + seg, 0x0005) += seg; // 170a -> 18f7
    memory16(0x1376 + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x1377 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x1377 + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x1378 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x1379 + seg, 0x000b) += seg; // 0f75 -> 1162
    memory16(0x137b + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x137d + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x137e + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x137f + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x1381 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x1382 + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x1383 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x1384 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x1385 + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x1385 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x1385 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x1386 + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x1386 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x1389 + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x138e + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x138f + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x138f + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x1390 + seg, 0x0000) += seg; // 1a04 -> 1bf1
    memory16(0x1390 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x1398 + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x139a + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x139c + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x139e + seg, 0x0002) += seg; // 0847 -> 0a34
    memory16(0x13a0 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x13a1 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x13a2 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x13a4 + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x13ab + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x13ad + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x13b1 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x13b1 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x13b3 + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x13b6 + seg, 0x0000) += seg; // 1bd7 -> 1dc4
    memory16(0x13b6 + seg, 0x0007) += seg; // 1bd7 -> 1dc4
    memory16(0x13b7 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x13b8 + seg, 0x0004) += seg; // 0847 -> 0a34
    memory16(0x13b8 + seg, 0x000b) += seg; // 0847 -> 0a34
    memory16(0x13c1 + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x13c5 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x13c8 + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x13ca + seg, 0x000e) += seg; // 1759 -> 1946
    memory16(0x13cc + seg, 0x000b) += seg; // 1d14 -> 1f01
    memory16(0x13cd + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x13ce + seg, 0x000d) += seg; // 170a -> 18f7
    memory16(0x13d0 + seg, 0x000d) += seg; // 041e -> 060b
    memory16(0x13d4 + seg, 0x0009) += seg; // 041e -> 060b
    memory16(0x13d7 + seg, 0x0006) += seg; // 041e -> 060b
    memory16(0x13d7 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x13dc + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x13df + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x13eb + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x1404 + seg, 0x0002) += seg; // 1bd7 -> 1dc4
    memory16(0x1414 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x1416 + seg, 0x0007) += seg; // 0000 -> 01ed
    memory16(0x1417 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x1420 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x1425 + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x1428 + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1429 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x142d + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x142f + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x1430 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x1432 + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1433 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1437 + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x143a + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x143d + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x1441 + seg, 0x000f) += seg; // 1d5a -> 1f47
    memory16(0x1446 + seg, 0x000b) += seg; // 1d5a -> 1f47
    memory16(0x1448 + seg, 0x0001) += seg; // 1d5a -> 1f47
    memory16(0x1451 + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x1455 + seg, 0x0009) += seg; // 1bd7 -> 1dc4
    memory16(0x145a + seg, 0x0009) += seg; // 1bd7 -> 1dc4
    memory16(0x1467 + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x1471 + seg, 0x000f) += seg; // 170a -> 18f7
    memory16(0x1473 + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1476 + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1477 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x1478 + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1479 + seg, 0x0004) += seg; // 170a -> 18f7
    memory16(0x147a + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x147c + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x147e + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x1480 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1482 + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x1483 + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x1484 + seg, 0x0006) += seg; // 0f75 -> 1162
    memory16(0x1485 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x1487 + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x1489 + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x148a + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x148c + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1491 + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x1494 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x1495 + seg, 0x0004) += seg; // 1d5a -> 1f47
    memory16(0x149a + seg, 0x0004) += seg; // 1bd7 -> 1dc4
    memory16(0x149e + seg, 0x0005) += seg; // 0847 -> 0a34
    memory16(0x14a0 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x14a6 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x14a7 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x14a8 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x14a9 + seg, 0x0009) += seg; // 0847 -> 0a34
    memory16(0x14aa + seg, 0x0000) += seg; // 0847 -> 0a34
    memory16(0x14ab + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x14ae + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x14af + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x14b0 + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x14b2 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x14b4 + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x14b6 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x14b7 + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x14b9 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x14bb + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x14bc + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x14be + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x14c0 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x14c1 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x14c3 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x14c6 + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x14c7 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x14c8 + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x14c9 + seg, 0x0007) += seg; // 0847 -> 0a34
    memory16(0x14ca + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x14cb + seg, 0x000c) += seg; // 170a -> 18f7
    memory16(0x14d5 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x14de + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x14e1 + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x14e4 + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x14e7 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x14e9 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x14ec + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x14f2 + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x14fb + seg, 0x000f) += seg; // 170a -> 18f7
    memory16(0x14fd + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1500 + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1501 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x1501 + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x1502 + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x1503 + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1503 + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x1504 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1505 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x1505 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1506 + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x1507 + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x1507 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1508 + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x1509 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x1509 + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x150a + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x150b + seg, 0x0008) += seg; // 170a -> 18f7
    memory16(0x150c + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x150e + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x150f + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x1510 + seg, 0x0006) += seg; // 0f75 -> 1162
    memory16(0x1511 + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x1512 + seg, 0x0001) += seg; // 13cf -> 15bc
    memory16(0x151c + seg, 0x0007) += seg; // 1bd7 -> 1dc4
    memory16(0x1520 + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x1520 + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x1528 + seg, 0x000b) += seg; // 0847 -> 0a34
    memory16(0x152b + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x152b + seg, 0x0005) += seg; // 13cf -> 15bc
    memory16(0x152b + seg, 0x000a) += seg; // 13cf -> 15bc
    memory16(0x152c + seg, 0x000d) += seg; // 13cf -> 15bc
    memory16(0x1530 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x1531 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x1531 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1534 + seg, 0x0005) += seg; // 0847 -> 0a34
    memory16(0x1534 + seg, 0x000c) += seg; // 0847 -> 0a34
    memory16(0x153e + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x1541 + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x1544 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1549 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x154a + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x154b + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x154b + seg, 0x000c) += seg; // 0847 -> 0a34
    memory16(0x154c + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x154d + seg, 0x000b) += seg; // 170a -> 18f7
    memory16(0x154e + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x1554 + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x155b + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x155e + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x155e + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x156b + seg, 0x0001) += seg; // 1bd7 -> 1dc4
    memory16(0x156d + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x156e + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x156f + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1572 + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x1573 + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x157b + seg, 0x0003) += seg; // 170a -> 18f7
    memory16(0x157c + seg, 0x0007) += seg; // 04d4 -> 06c1
    memory16(0x157e + seg, 0x0001) += seg; // 04d4 -> 06c1
    memory16(0x157f + seg, 0x000d) += seg; // 04d4 -> 06c1
    memory16(0x1581 + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1582 + seg, 0x000b) += seg; // 04d4 -> 06c1
    memory16(0x1584 + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1585 + seg, 0x0006) += seg; // 170a -> 18f7
    memory16(0x1585 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1586 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x1588 + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x158a + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x158b + seg, 0x0003) += seg; // 0f75 -> 1162
    memory16(0x158c + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x158c + seg, 0x000e) += seg; // 13cf -> 15bc
    memory16(0x158f + seg, 0x000d) += seg; // 0847 -> 0a34
    memory16(0x1592 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x1592 + seg, 0x0007) += seg; // 13cf -> 15bc
    memory16(0x1592 + seg, 0x000c) += seg; // 13cf -> 15bc
    memory16(0x1593 + seg, 0x000f) += seg; // 13cf -> 15bc
    memory16(0x1597 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x1598 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x1599 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x159b + seg, 0x0007) += seg; // 0847 -> 0a34
    memory16(0x159b + seg, 0x000e) += seg; // 0847 -> 0a34
    memory16(0x159f + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x15a0 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x15a1 + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x15a5 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x15a7 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x15a8 + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x15ac + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x15ad + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x15ae + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x15af + seg, 0x0004) += seg; // 0847 -> 0a34
    memory16(0x15b0 + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x15b1 + seg, 0x0003) += seg; // 170a -> 18f7
    memory16(0x15b2 + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x15b4 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x15b8 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x15b9 + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x15ba + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x15bc + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x15be + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x15c7 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x15ca + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x15d4 + seg, 0x0001) += seg; // 170a -> 18f7
    memory16(0x15d4 + seg, 0x000c) += seg; // 1d36 -> 1f23
    memory16(0x15d6 + seg, 0x000d) += seg; // 04d4 -> 06c1
    memory16(0x15d8 + seg, 0x0007) += seg; // 04d4 -> 06c1
    memory16(0x15d9 + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x15da + seg, 0x0007) += seg; // 04d4 -> 06c1
    memory16(0x15db + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x15dc + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x15dd + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x15dd + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x15de + seg, 0x000c) += seg; // 170a -> 18f7
    memory16(0x15df + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x15e0 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x15e1 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x15e2 + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x15e3 + seg, 0x0002) += seg; // 0f75 -> 1162
    memory16(0x15e5 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x15e7 + seg, 0x000e) += seg; // 17f7 -> 19e4
    memory16(0x15e9 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x15ea + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x15ec + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x15ed + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x15ed + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x15ee + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x15ee + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x15ef + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x15ef + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x15ef + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x15f3 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x15f7 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x15f8 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x15f8 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x15f9 + seg, 0x0006) += seg; // 1a04 -> 1bf1
    memory16(0x15f9 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x15fa + seg, 0x000e) += seg; // 0847 -> 0a34
    memory16(0x15fd + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x15fd + seg, 0x000e) += seg; // 17f7 -> 19e4
    memory16(0x15ff + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x1600 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x1602 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1604 + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x1608 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x1608 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x160a + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x160d + seg, 0x0000) += seg; // 1bd7 -> 1dc4
    memory16(0x160d + seg, 0x000b) += seg; // 1bd7 -> 1dc4
    memory16(0x160e + seg, 0x0006) += seg; // 1bd7 -> 1dc4
    memory16(0x160f + seg, 0x0001) += seg; // 1bd7 -> 1dc4
    memory16(0x160f + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1610 + seg, 0x000e) += seg; // 0847 -> 0a34
    memory16(0x1611 + seg, 0x0005) += seg; // 0847 -> 0a34
    memory16(0x1632 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x1635 + seg, 0x0002) += seg; // 1759 -> 1946
    memory16(0x1639 + seg, 0x0007) += seg; // 1d14 -> 1f01
    memory16(0x163a + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x163b + seg, 0x0009) += seg; // 170a -> 18f7
    memory16(0x163c + seg, 0x0008) += seg; // 0ad5 -> 0cc2
    memory16(0x1678 + seg, 0x0001) += seg; // 0ad5 -> 0cc2
    memory16(0x167e + seg, 0x0006) += seg; // 0ad5 -> 0cc2
    memory16(0x1684 + seg, 0x000b) += seg; // 0ad5 -> 0cc2
    memory16(0x168f + seg, 0x0000) += seg; // 0ad5 -> 0cc2
    memory16(0x1698 + seg, 0x000c) += seg; // 09b4 -> 0ba1
    memory16(0x16a1 + seg, 0x000b) += seg; // 0c24 -> 0e11
    memory16(0x16a5 + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x16b3 + seg, 0x0003) += seg; // 09b4 -> 0ba1
    memory16(0x16b6 + seg, 0x000d) += seg; // 09b4 -> 0ba1
    memory16(0x16bf + seg, 0x000c) += seg; // 0c24 -> 0e11
    memory16(0x16d2 + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x16d4 + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x16e9 + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x16f6 + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x16f7 + seg, 0x0008) += seg; // 0000 -> 01ed
    memory16(0x16f8 + seg, 0x0002) += seg; // 04d4 -> 06c1
    memory16(0x16fa + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x1703 + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x171e + seg, 0x0009) += seg; // 041e -> 060b
    memory16(0x1726 + seg, 0x000d) += seg; // 0f75 -> 1162
    memory16(0x1727 + seg, 0x0005) += seg; // 0f75 -> 1162
    memory16(0x1728 + seg, 0x000b) += seg; // 04d4 -> 06c1
    memory16(0x1729 + seg, 0x000d) += seg; // 04d4 -> 06c1
    memory16(0x172a + seg, 0x000c) += seg; // 0f75 -> 1162
    memory16(0x172d + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x172d + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x172e + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x1739 + seg, 0x000f) += seg; // 0847 -> 0a34
    memory16(0x173f + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x1745 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x1746 + seg, 0x0006) += seg; // 0847 -> 0a34
    memory16(0x1747 + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x1748 + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x1749 + seg, 0x0008) += seg; // 0cfa -> 0ee7
    memory16(0x174a + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x174d + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x1752 + seg, 0x0006) += seg; // 041e -> 060b
    memory16(0x1757 + seg, 0x0009) += seg; // 041e -> 060b
    memory16(0x1758 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x177e + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x177e + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x1780 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1781 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x1783 + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1786 + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x1789 + seg, 0x0006) += seg; // 0052 -> 023f
    memory16(0x178a + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x178d + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x178f + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1793 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x1795 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x1798 + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x1799 + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x179c + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x179e + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x17a1 + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x17a4 + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x17a5 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x17a9 + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x17b3 + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x17b4 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x17b7 + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x17ba + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x17bb + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x17c8 + seg, 0x0005) += seg; // 04d4 -> 06c1
    memory16(0x17cc + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x17d0 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x17d1 + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x17d2 + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x17d2 + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x17d2 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x17d3 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x17d3 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x17d6 + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x17db + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x17db + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x17dc + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x17dc + seg, 0x000c) += seg; // 1a04 -> 1bf1
    memory16(0x17dd + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x17de + seg, 0x0004) += seg; // 0847 -> 0a34
    memory16(0x17e0 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x17e0 + seg, 0x000e) += seg; // 17f7 -> 19e4
    memory16(0x17e1 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x17e2 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x17e6 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x17e7 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x17e8 + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x17e9 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x17ea + seg, 0x000a) += seg; // 0847 -> 0a34
    memory16(0x17eb + seg, 0x0001) += seg; // 0847 -> 0a34
    memory16(0x17f2 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x17f6 + seg, 0x000e) += seg; // 04d4 -> 06c1
    memory16(0x17f8 + seg, 0x0009) += seg; // 04d4 -> 06c1
    memory16(0x17f9 + seg, 0x000c) += seg; // 04d4 -> 06c1
    memory16(0x17fa + seg, 0x0004) += seg; // 04d4 -> 06c1
    memory16(0x1809 + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x1812 + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x1817 + seg, 0x000d) += seg; // 1759 -> 1946
    memory16(0x181c + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x181d + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x181f + seg, 0x000d) += seg; // 1d5a -> 1f47
    memory16(0x1821 + seg, 0x0000) += seg; // 1d5a -> 1f47
    memory16(0x1821 + seg, 0x000f) += seg; // 1d5a -> 1f47
    memory16(0x1822 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x182f + seg, 0x000e) += seg; // 1d5a -> 1f47
    memory16(0x1835 + seg, 0x0008) += seg; // 1d5a -> 1f47
    memory16(0x183b + seg, 0x0008) += seg; // 1d5a -> 1f47
    memory16(0x183e + seg, 0x0009) += seg; // 1d5a -> 1f47
    memory16(0x1840 + seg, 0x0005) += seg; // 1d5a -> 1f47
    memory16(0x1843 + seg, 0x0001) += seg; // 1d5a -> 1f47
    memory16(0x1845 + seg, 0x000d) += seg; // 1d5a -> 1f47
    memory16(0x1849 + seg, 0x000d) += seg; // 1d5a -> 1f47
    memory16(0x184b + seg, 0x0000) += seg; // 1d5a -> 1f47
    memory16(0x184d + seg, 0x0005) += seg; // 1d5a -> 1f47
    memory16(0x186a + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x186c + seg, 0x000e) += seg; // 0052 -> 023f
    memory16(0x1875 + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x1878 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x187b + seg, 0x0000) += seg; // 1bd7 -> 1dc4
    memory16(0x1885 + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x188a + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x18af + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x18b2 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x18b8 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x18ba + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x18bf + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x18c0 + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x18c4 + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x18c5 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x18c7 + seg, 0x000d) += seg; // 1d5a -> 1f47
    memory16(0x18d8 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x18dc + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x18e6 + seg, 0x000b) += seg; // 1bd7 -> 1dc4
    memory16(0x18ec + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x18f1 + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x18f2 + seg, 0x000b) += seg; // 17f7 -> 19e4
    memory16(0x18f7 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x18f9 + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x18fb + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x18fd + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x18ff + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x1909 + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x190e + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x1916 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x191a + seg, 0x0003) += seg; // 1759 -> 1946
    memory16(0x191d + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x1920 + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x1922 + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x192a + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x192c + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1938 + seg, 0x0003) += seg; // 041e -> 060b
    memory16(0x193b + seg, 0x000f) += seg; // 041e -> 060b
    memory16(0x1942 + seg, 0x0002) += seg; // 041e -> 060b
    memory16(0x1942 + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x1943 + seg, 0x000b) += seg; // 0000 -> 01ed
    memory16(0x1946 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x1949 + seg, 0x0005) += seg; // 041e -> 060b
    memory16(0x194b + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x1950 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1951 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x1952 + seg, 0x000e) += seg; // 041e -> 060b
    memory16(0x1956 + seg, 0x000a) += seg; // 041e -> 060b
    memory16(0x195c + seg, 0x000d) += seg; // 041e -> 060b
    memory16(0x195d + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x195f + seg, 0x0004) += seg; // 041e -> 060b
    memory16(0x1963 + seg, 0x0000) += seg; // 041e -> 060b
    memory16(0x196b + seg, 0x0006) += seg; // 041e -> 060b
    memory16(0x196b + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1972 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x1976 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x1978 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x197a + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x197c + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x197e + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x197f + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1981 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x1982 + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x198f + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1990 + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1992 + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x1995 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1999 + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x19af + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x19b7 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x19b9 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x19bb + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x19bd + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x19dd + seg, 0x000c) += seg; // 1bd7 -> 1dc4
    memory16(0x19ed + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x19ef + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x19f0 + seg, 0x000c) += seg; // 0000 -> 01ed
    memory16(0x19f1 + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x19fd + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x19ff + seg, 0x0001) += seg; // 0847 -> 0a34
    memory16(0x1a11 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x1a21 + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1a23 + seg, 0x0005) += seg; // 17f7 -> 19e4
    memory16(0x1a28 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1a2a + seg, 0x0003) += seg; // 1d5a -> 1f47
    memory16(0x1a2f + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x1a36 + seg, 0x0005) += seg; // 1bd7 -> 1dc4
    memory16(0x1a39 + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x1a3c + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x1a46 + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x1a48 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1a4b + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x1a52 + seg, 0x000b) += seg; // 1bd7 -> 1dc4
    memory16(0x1a57 + seg, 0x000d) += seg; // 17f7 -> 19e4
    memory16(0x1a5b + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x1a62 + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x1a62 + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x1a6a + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x1a6a + seg, 0x000a) += seg; // 1bd7 -> 1dc4
    memory16(0x1a6f + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x1a74 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1a77 + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x1a79 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x1a7b + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x1a7f + seg, 0x0006) += seg; // 163c -> 1829
    memory16(0x1a86 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1a88 + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x1a8a + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x1a8c + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x1a8d + seg, 0x000f) += seg; // 17f7 -> 19e4
    memory16(0x1a91 + seg, 0x0000) += seg; // 163c -> 1829
    memory16(0x1a95 + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x1a9a + seg, 0x000b) += seg; // 163c -> 1829
    memory16(0x1aa2 + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x1aa4 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1aa9 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x1ab3 + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x1ab9 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x1abd + seg, 0x000e) += seg; // 1bd7 -> 1dc4
    memory16(0x1ac2 + seg, 0x0002) += seg; // 163c -> 1829
    memory16(0x1acc + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x1acf + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1ad9 + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x1add + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x1ae5 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1ae9 + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x1aec + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1af3 + seg, 0x0002) += seg; // 1d5a -> 1f47
    memory16(0x1af4 + seg, 0x000e) += seg; // 1d5a -> 1f47
    memory16(0x1afd + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x1b00 + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x1b04 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1b08 + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x1b0d + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x1b11 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x1b14 + seg, 0x0001) += seg; // 163c -> 1829
    memory16(0x1b17 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x1b30 + seg, 0x000e) += seg; // 17f7 -> 19e4
    memory16(0x1b32 + seg, 0x000c) += seg; // 17f7 -> 19e4
    memory16(0x1b34 + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x1b39 + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x1b3f + seg, 0x0009) += seg; // 17f7 -> 19e4
    memory16(0x1b40 + seg, 0x000e) += seg; // 17f7 -> 19e4
    memory16(0x1b44 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1b4a + seg, 0x0002) += seg; // 1bd7 -> 1dc4
    memory16(0x1b4d + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x1b4e + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x1b50 + seg, 0x0003) += seg; // 163c -> 1829
    memory16(0x1b58 + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x1b5c + seg, 0x0008) += seg; // 17f7 -> 19e4
    memory16(0x1b60 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x1b6c + seg, 0x000a) += seg; // 17f7 -> 19e4
    memory16(0x1b75 + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x1b76 + seg, 0x000e) += seg; // 163c -> 1829
    memory16(0x1b7a + seg, 0x000d) += seg; // 163c -> 1829
    memory16(0x1b7f + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x1b82 + seg, 0x000a) += seg; // 1d5a -> 1f47
    memory16(0x1b87 + seg, 0x0003) += seg; // 17f7 -> 19e4
    memory16(0x1b8a + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1b8e + seg, 0x000f) += seg; // 163c -> 1829
    memory16(0x1b94 + seg, 0x000c) += seg; // 163c -> 1829
    memory16(0x1b9c + seg, 0x0001) += seg; // 17f7 -> 19e4
    memory16(0x1b9e + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x1ba3 + seg, 0x0007) += seg; // 17f7 -> 19e4
    memory16(0x1ba6 + seg, 0x0006) += seg; // 17f7 -> 19e4
    memory16(0x1ba8 + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x1baa + seg, 0x0004) += seg; // 163c -> 1829
    memory16(0x1bad + seg, 0x000b) += seg; // 1d5a -> 1f47
    memory16(0x1bb1 + seg, 0x0008) += seg; // 163c -> 1829
    memory16(0x1bb4 + seg, 0x000f) += seg; // 1d5a -> 1f47
    memory16(0x1bb9 + seg, 0x000a) += seg; // 163c -> 1829
    memory16(0x1bbd + seg, 0x0005) += seg; // 163c -> 1829
    memory16(0x1bbf + seg, 0x000f) += seg; // 1d5a -> 1f47
    memory16(0x1bc6 + seg, 0x0002) += seg; // 17f7 -> 19e4
    memory16(0x1bcd + seg, 0x0009) += seg; // 163c -> 1829
    memory16(0x1bd2 + seg, 0x0000) += seg; // 17f7 -> 19e4
    memory16(0x1bd4 + seg, 0x0007) += seg; // 163c -> 1829
    memory16(0x1bd6 + seg, 0x0004) += seg; // 17f7 -> 19e4
    memory16(0x1bd9 + seg, 0x0004) += seg; // 0f75 -> 1162
    memory16(0x1bda + seg, 0x000b) += seg; // 10ad -> 129a
    memory16(0x1bdc + seg, 0x0005) += seg; // 108f -> 127c
    memory16(0x1bdd + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x1bde + seg, 0x0007) += seg; // 0fe0 -> 11cd
    memory16(0x1bdf + seg, 0x000b) += seg; // 0ecd -> 10ba
    memory16(0x1be2 + seg, 0x0004) += seg; // 10ad -> 129a
    memory16(0x1be3 + seg, 0x000e) += seg; // 108f -> 127c
    memory16(0x1be5 + seg, 0x0000) += seg; // 0fe0 -> 11cd
    memory16(0x1be6 + seg, 0x0000) += seg; // 0fe0 -> 11cd
    memory16(0x1be7 + seg, 0x0004) += seg; // 0ecd -> 10ba
    memory16(0x1be9 + seg, 0x000d) += seg; // 10ad -> 129a
    memory16(0x1beb + seg, 0x0006) += seg; // 108f -> 127c
    memory16(0x1bec + seg, 0x0008) += seg; // 0fe0 -> 11cd
    memory16(0x1bed + seg, 0x0008) += seg; // 0fe0 -> 11cd
    memory16(0x1bee + seg, 0x000c) += seg; // 0ecd -> 10ba
    memory16(0x1bf0 + seg, 0x000f) += seg; // 04d4 -> 06c1
    memory16(0x1bf2 + seg, 0x0001) += seg; // 04d4 -> 06c1
    memory16(0x1bf3 + seg, 0x0005) += seg; // 04d4 -> 06c1
    memory16(0x1bf4 + seg, 0x000a) += seg; // 04d4 -> 06c1
    memory16(0x1bf6 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x1bf6 + seg, 0x000f) += seg; // 0f75 -> 1162
    memory16(0x1bfb + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x1bfd + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x1bfe + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x1c00 + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x1c01 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1c01 + seg, 0x000a) += seg; // 0847 -> 0a34
    memory16(0x1c02 + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x1c03 + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1c04 + seg, 0x0005) += seg; // 0f75 -> 1162
    memory16(0x1c04 + seg, 0x000d) += seg; // 0f75 -> 1162
    memory16(0x1c06 + seg, 0x0009) += seg; // 04d4 -> 06c1
    memory16(0x1c07 + seg, 0x000b) += seg; // 04d4 -> 06c1
    memory16(0x1c09 + seg, 0x0000) += seg; // 04d4 -> 06c1
    memory16(0x1c09 + seg, 0x000c) += seg; // 0f75 -> 1162
    memory16(0x1c0b + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1c0b + seg, 0x000e) += seg; // 0847 -> 0a34
    memory16(0x1c0c + seg, 0x0005) += seg; // 0f75 -> 1162
    memory16(0x1c0c + seg, 0x000d) += seg; // 0f75 -> 1162
    memory16(0x1c0e + seg, 0x0004) += seg; // 04d4 -> 06c1
    memory16(0x1c0f + seg, 0x0006) += seg; // 04d4 -> 06c1
    memory16(0x1c11 + seg, 0x0002) += seg; // 04d4 -> 06c1
    memory16(0x1c12 + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x1c13 + seg, 0x0007) += seg; // 0f75 -> 1162
    memory16(0x1c15 + seg, 0x0003) += seg; // 04d4 -> 06c1
    memory16(0x1c16 + seg, 0x0009) += seg; // 0052 -> 023f
    memory16(0x1c17 + seg, 0x0005) += seg; // 0847 -> 0a34
    memory16(0x1c18 + seg, 0x0009) += seg; // 04d4 -> 06c1
    memory16(0x1c19 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x1c1a + seg, 0x000b) += seg; // 0847 -> 0a34
    memory16(0x1c1b + seg, 0x000f) += seg; // 04d4 -> 06c1
    memory16(0x1c1d + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x1c1d + seg, 0x000d) += seg; // 0847 -> 0a34
    memory16(0x1c1e + seg, 0x0002) += seg; // 0f75 -> 1162
    memory16(0x1c1e + seg, 0x000a) += seg; // 0f75 -> 1162
    memory16(0x1c20 + seg, 0x0006) += seg; // 04d4 -> 06c1
    memory16(0x1c21 + seg, 0x0007) += seg; // 04d4 -> 06c1
    memory16(0x1c22 + seg, 0x0008) += seg; // 04d4 -> 06c1
    memory16(0x1c25 + seg, 0x000a) += seg; // 04d4 -> 06c1
    memory16(0x1c26 + seg, 0x000c) += seg; // 04d4 -> 06c1
    memory16(0x1c27 + seg, 0x0004) += seg; // 11f3 -> 13e0
    memory16(0x1c27 + seg, 0x0009) += seg; // 0f75 -> 1162
    memory16(0x1c28 + seg, 0x0001) += seg; // 0f75 -> 1162
    memory16(0x1c29 + seg, 0x000e) += seg; // 04d4 -> 06c1
    memory16(0x1c2b + seg, 0x0000) += seg; // 04d4 -> 06c1
    memory16(0x1c2b + seg, 0x0008) += seg; // 13cf -> 15bc
    memory16(0x1c2b + seg, 0x000d) += seg; // 0f75 -> 1162
    memory16(0x1c2c + seg, 0x0005) += seg; // 0f75 -> 1162
    memory16(0x1c2e + seg, 0x0002) += seg; // 04d4 -> 06c1
    memory16(0x1c2f + seg, 0x0004) += seg; // 04d4 -> 06c1
    memory16(0x1c2f + seg, 0x000c) += seg; // 1361 -> 154e
    memory16(0x1c30 + seg, 0x0001) += seg; // 0f75 -> 1162
    memory16(0x1c30 + seg, 0x0009) += seg; // 0f75 -> 1162
    memory16(0x1c32 + seg, 0x0006) += seg; // 04d4 -> 06c1
    memory16(0x1c33 + seg, 0x0008) += seg; // 04d4 -> 06c1
    memory16(0x1c34 + seg, 0x0000) += seg; // 14cc -> 16b9
    memory16(0x1c34 + seg, 0x0005) += seg; // 0f75 -> 1162
    memory16(0x1c34 + seg, 0x000d) += seg; // 0f75 -> 1162
    memory16(0x1c36 + seg, 0x000a) += seg; // 04d4 -> 06c1
    memory16(0x1c37 + seg, 0x000c) += seg; // 04d4 -> 06c1
    memory16(0x1c38 + seg, 0x0004) += seg; // 1276 -> 1463
    memory16(0x1c38 + seg, 0x0009) += seg; // 0f75 -> 1162
    memory16(0x1c39 + seg, 0x0001) += seg; // 0f75 -> 1162
    memory16(0x1c3a + seg, 0x000e) += seg; // 04d4 -> 06c1
    memory16(0x1c3c + seg, 0x0000) += seg; // 04d4 -> 06c1
    memory16(0x1c3c + seg, 0x0008) += seg; // 154f -> 173c
    memory16(0x1c3c + seg, 0x000d) += seg; // 0f75 -> 1162
    memory16(0x1c3d + seg, 0x0005) += seg; // 0f75 -> 1162
    memory16(0x1c3f + seg, 0x0002) += seg; // 04d4 -> 06c1
    memory16(0x1c40 + seg, 0x0004) += seg; // 04d4 -> 06c1
    memory16(0x1c40 + seg, 0x000c) += seg; // 15b2 -> 179f
    memory16(0x1c41 + seg, 0x0001) += seg; // 0f75 -> 1162
    memory16(0x1c41 + seg, 0x0009) += seg; // 0f75 -> 1162
    memory16(0x1c45 + seg, 0x0003) += seg; // 0ad5 -> 0cc2
    memory16(0x1c47 + seg, 0x0001) += seg; // 0052 -> 023f
    memory16(0x1c4b + seg, 0x0008) += seg; // 0ad5 -> 0cc2
    memory16(0x1c4d + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x1c4e + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1c50 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1c50 + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x1c53 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x1c57 + seg, 0x0006) += seg; // 0ad5 -> 0cc2
    memory16(0x1c59 + seg, 0x0003) += seg; // 0052 -> 023f
    memory16(0x1c5a + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x1c5b + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1c5c + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x1c5e + seg, 0x000b) += seg; // 0052 -> 023f
    memory16(0x1c60 + seg, 0x0000) += seg; // 0052 -> 023f
    memory16(0x1c60 + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1c62 + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1c66 + seg, 0x000f) += seg; // 0ad5 -> 0cc2
    memory16(0x1c68 + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1c6a + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1c6b + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x1c6c + seg, 0x0004) += seg; // 0052 -> 023f
    memory16(0x1c6e + seg, 0x0005) += seg; // 0052 -> 023f
    memory16(0x1c6f + seg, 0x000a) += seg; // 0052 -> 023f
    memory16(0x1c70 + seg, 0x0007) += seg; // 0052 -> 023f
    memory16(0x1c71 + seg, 0x000c) += seg; // 0052 -> 023f
    memory16(0x1c76 + seg, 0x000c) += seg; // 0ad5 -> 0cc2
    memory16(0x1c78 + seg, 0x0008) += seg; // 0052 -> 023f
    memory16(0x1c79 + seg, 0x000d) += seg; // 0052 -> 023f
    memory16(0x1c7b + seg, 0x0002) += seg; // 0052 -> 023f
    memory16(0x1c7b + seg, 0x000f) += seg; // 0052 -> 023f
    memory16(0x1c8a + seg, 0x000c) += seg; // 1c7c -> 1e69
    memory16(0x1c8c + seg, 0x000e) += seg; // 1c7c -> 1e69
    memory16(0x1c92 + seg, 0x0007) += seg; // 1c8d -> 1e7a
    memory16(0x1c93 + seg, 0x0003) += seg; // 1c8d -> 1e7a
    memory16(0x1c97 + seg, 0x0009) += seg; // 1c8d -> 1e7a
    memory16(0x1c9e + seg, 0x000f) += seg; // 0ecd -> 10ba
    memory16(0x1ca8 + seg, 0x0004) += seg; // 1d2f -> 1f1c
    memory16(0x1cab + seg, 0x0008) += seg; // 1d2f -> 1f1c
    memory16(0x1cad + seg, 0x0003) += seg; // 1d2f -> 1f1c
    memory16(0x1cae + seg, 0x0005) += seg; // 1cae -> 1e9b
    memory16(0x1cb0 + seg, 0x000a) += seg; // 1d2f -> 1f1c
    memory16(0x1cbb + seg, 0x0002) += seg; // 1cb1 -> 1e9e
    memory16(0x1cbf + seg, 0x0007) += seg; // 0000 -> 01ed
    memory16(0x1cc4 + seg, 0x000c) += seg; // 1d6d -> 1f5a
    memory16(0x1cca + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x1ccb + seg, 0x0008) += seg; // 0000 -> 01ed
    memory16(0x1cce + seg, 0x000c) += seg; // 0000 -> 01ed
    memory16(0x1cd0 + seg, 0x0005) += seg; // 0000 -> 01ed
    memory16(0x1cd1 + seg, 0x000a) += seg; // 0000 -> 01ed
    memory16(0x1cd6 + seg, 0x0001) += seg; // 0000 -> 01ed
    memory16(0x1cd8 + seg, 0x0004) += seg; // 0000 -> 01ed
    memory16(0x1cdb + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x1cdc + seg, 0x0003) += seg; // 0000 -> 01ed
    memory16(0x1cdd + seg, 0x000f) += seg; // 0000 -> 01ed
    memory16(0x1cdf + seg, 0x000f) += seg; // 0000 -> 01ed
    memory16(0x1ce1 + seg, 0x000b) += seg; // 0000 -> 01ed
    memory16(0x1ce3 + seg, 0x0005) += seg; // 0000 -> 01ed
    memory16(0x1ce4 + seg, 0x0005) += seg; // 0000 -> 01ed
    memory16(0x1ceb + seg, 0x0000) += seg; // 0000 -> 01ed
    memory16(0x1ceb + seg, 0x000b) += seg; // 0000 -> 01ed
    memory16(0x1cf1 + seg, 0x000f) += seg; // 0000 -> 01ed
    memory16(0x1cf2 + seg, 0x000e) += seg; // 1cbf -> 1eac
    memory16(0x1cf3 + seg, 0x0007) += seg; // 0000 -> 01ed
    memory16(0x1cf6 + seg, 0x0007) += seg; // 0000 -> 01ed
    memory16(0x1cf8 + seg, 0x000a) += seg; // 1cbf -> 1eac
    memory16(0x1cfd + seg, 0x0009) += seg; // 1d2f -> 1f1c
    memory16(0x1d0a + seg, 0x0006) += seg; // 0000 -> 01ed
    memory16(0x1d10 + seg, 0x000b) += seg; // 1cbf -> 1eac
    memory16(0x1d15 + seg, 0x0009) += seg; // 1cd6 -> 1ec3
    memory16(0x1d21 + seg, 0x0002) += seg; // 1d6c -> 1f59
    memory16(0x1d22 + seg, 0x000d) += seg; // 1d20 -> 1f0d
    memory16(0x1d2c + seg, 0x0009) += seg; // 1d2f -> 1f1c
    memory16(0x1d2f + seg, 0x0009) += seg; // 1d2f -> 1f1c
    memory16(0x1d35 + seg, 0x000c) += seg; // 1d2f -> 1f1c
    memory16(0x1d36 + seg, 0x000e) += seg; // 1cfe -> 1eeb
    memory16(0x1d38 + seg, 0x0009) += seg; // 0000 -> 01ed
    memory16(0x1d3f + seg, 0x000f) += seg; // 1d2f -> 1f1c
    memory16(0x1d44 + seg, 0x000d) += seg; // 1d2f -> 1f1c
    memory16(0x1d45 + seg, 0x000b) += seg; // 1ca9 -> 1e96
    memory16(0x1d48 + seg, 0x0008) += seg; // 1d2f -> 1f1c
    memory16(0x1d4b + seg, 0x0004) += seg; // 1cae -> 1e9b
    memory16(0x1d4e + seg, 0x0005) += seg; // 1d55 -> 1f42
    memory16(0x1d4f + seg, 0x0009) += seg; // 1d2d -> 1f1a
    memory16(0x1d52 + seg, 0x000f) += seg; // 1ca9 -> 1e96
    memory16(0x1d5a + seg, 0x0003) += seg; // 1d2f -> 1f1c
    memory16(0x1d5c + seg, 0x0009) += seg; // 0000 -> 01ed
    memory16(0x1d61 + seg, 0x0001) += seg; // 1d6a -> 1f57
    memory16(0x1d66 + seg, 0x0002) += seg; // 1d6a -> 1f57
    memory16(0x1d68 + seg, 0x0007) += seg; // 1d33 -> 1f20
    memory16(0x1d6b + seg, 0x000c) += seg; // 1d2f -> 1f1c
    memory16(0x1d6f + seg, 0x0004) += seg; // 1d2f -> 1f1c
    memory16(0x1d73 + seg, 0x0008) += seg; // 1d7c -> 1f69
    memory16(0x1d74 + seg, 0x0007) += seg; // 1d7c -> 1f69
    memory16(0x1d75 + seg, 0x000e) += seg; // 1d37 -> 1f24
    memory16(0x1d81 + seg, 0x000a) += seg; // 1d93 -> 1f80
    memory16(0x1d8a + seg, 0x000e) += seg; // 1d93 -> 1f80
    memory16(0x1d90 + seg, 0x000a) += seg; // 1d93 -> 1f80
    memory16(0x1d95 + seg, 0x0007) += seg; // 1d33 -> 1f20
    memory16(0x1d97 + seg, 0x000f) += seg; // 1d2f -> 1f1c
    memory16(0x1da1 + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1da2 + seg, 0x0000) += seg; // 1d99 -> 1f86
    memory16(0x1da2 + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x1da2 + seg, 0x0008) += seg; // 1d99 -> 1f86
    memory16(0x1da2 + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1da3 + seg, 0x0000) += seg; // 1d99 -> 1f86
    memory16(0x1da3 + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x1da3 + seg, 0x0008) += seg; // 1d99 -> 1f86
    memory16(0x1da3 + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1da4 + seg, 0x0000) += seg; // 1d99 -> 1f86
    memory16(0x1da4 + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x1da4 + seg, 0x0008) += seg; // 1d99 -> 1f86
    memory16(0x1da4 + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1da5 + seg, 0x0000) += seg; // 1d99 -> 1f86
    memory16(0x1da5 + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x1da5 + seg, 0x0008) += seg; // 1d99 -> 1f86
    memory16(0x1da5 + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1da6 + seg, 0x0000) += seg; // 1d99 -> 1f86
    memory16(0x1da6 + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x1da6 + seg, 0x0008) += seg; // 1d99 -> 1f86
    memory16(0x1da6 + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1dbc + seg, 0x0000) += seg; // 1d99 -> 1f86
    memory16(0x1dbc + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x1dbc + seg, 0x0008) += seg; // 1d99 -> 1f86
    memory16(0x1dbc + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1dbd + seg, 0x0000) += seg; // 1d99 -> 1f86
    memory16(0x1dbd + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x1dbd + seg, 0x0008) += seg; // 1d99 -> 1f86
    memory16(0x1dbd + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1dbe + seg, 0x0000) += seg; // 1d99 -> 1f86
    memory16(0x1dbe + seg, 0x0004) += seg; // 1d99 -> 1f86
    memory16(0x1dbe + seg, 0x0008) += seg; // 1d99 -> 1f86
    memory16(0x1dbe + seg, 0x000c) += seg; // 1d99 -> 1f86
    memory16(0x1df5 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1df5 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1df5 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1df5 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1df6 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1df6 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1df6 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1df6 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1df7 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1df7 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1df7 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1df7 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1df8 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1df8 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1df8 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1df8 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1df9 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1df9 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1df9 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1df9 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1dfa + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1dfa + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1dfa + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1dfa + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1dfb + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1dfb + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1dfb + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1dfb + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1dfc + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1dfc + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1dfc + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1dfc + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1dfd + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1dfd + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1dfd + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1dfd + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1dfe + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1dfe + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1dfe + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1dfe + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1dff + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1dff + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1dff + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1dff + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e00 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e00 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e00 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e00 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e01 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e01 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e01 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e01 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e02 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e02 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e02 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e02 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e03 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e03 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e03 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e03 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e04 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e04 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e04 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e04 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e05 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e05 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e05 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e05 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e06 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e06 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e06 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e06 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e07 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e07 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e07 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e07 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e08 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e08 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e08 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e08 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e09 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e09 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e09 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e09 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e0a + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e0a + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e0a + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e0a + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e0b + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e0b + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e0b + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e0b + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e0c + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e0c + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e0c + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e0c + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e0d + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e0d + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e0d + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e0d + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e0e + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e0e + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e0e + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e0e + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e0f + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e0f + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e0f + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e0f + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e10 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e10 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e10 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e10 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e11 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e11 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e11 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e11 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e12 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e12 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e12 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e12 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e13 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e13 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e13 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e13 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e14 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e14 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e14 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e14 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e15 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e15 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e15 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e15 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e16 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e16 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e16 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e16 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e17 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e17 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e17 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e17 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e18 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e18 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e18 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e18 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e19 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e19 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e19 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e19 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e1a + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e1a + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e1a + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e1a + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e1b + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e1b + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e1b + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e1b + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e1c + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e1c + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e1c + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e1c + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e1d + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e1d + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e1d + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e1d + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e1e + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e1e + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e1e + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e1e + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e1f + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e1f + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e1f + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e1f + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e20 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e20 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e20 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e20 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e21 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e21 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e21 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e21 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e22 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e22 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e22 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e22 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e23 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e23 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e23 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e23 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e24 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e24 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e24 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e24 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e25 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e25 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e25 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e25 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e26 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e26 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e26 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e26 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e27 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e27 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e27 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e27 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e28 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e28 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e28 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e28 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e29 + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e29 + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e29 + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e29 + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e2a + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e2a + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e2a + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e2a + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e2b + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e2b + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e2b + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e2b + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e2c + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e2c + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e2c + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e2c + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e2d + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e2d + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e2d + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e2d + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e2e + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e2e + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e2e + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x1e2e + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x1e2f + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x1e2f + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x1e2f + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x255c + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x255c + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x255c + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x255c + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x255d + seg, 0x0002) += seg; // 1d99 -> 1f86
    memory16(0x255d + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x255d + seg, 0x000a) += seg; // 1d99 -> 1f86
    memory16(0x255d + seg, 0x000e) += seg; // 1d99 -> 1f86
    memory16(0x2609 + seg, 0x000c) += seg; // 1cbc -> 1ea9
    memory16(0x260a + seg, 0x0000) += seg; // 1cbc -> 1ea9
    memory16(0x260a + seg, 0x0004) += seg; // 1cbc -> 1ea9
    memory16(0x260d + seg, 0x0006) += seg; // 1d99 -> 1f86
    memory16(0x260d + seg, 0x000a) += seg; // 1d99 -> 1f86
}
void sub_1ed0();
void sub_1fd1();
void sub_1fe9();
void sub_1ff2();
void sub_200e();
void sub_201a();
void sub_2021();
void sub_2022();
void sub_2044();
void sub_204c();
void sub_2050();
void sub_20cf();
void sub_20f5();
void sub_2109();
void sub_2122();
void sub_217d();
void sub_219f();
void sub_21c4();
void sub_21f8();
void sub_2286();
void sub_22f6();
void sub_23f1();
void sub_23fc();
void sub_241e();
void sub_2445();
void sub_2473();
void sub_24c6();
void sub_2518();
void sub_26db();
void sub_28ec();
void sub_29f7();
void sub_2af9();
void sub_2b8c();
void sub_2c13();
void sub_2dbc();
void sub_2dcd();
void sub_2e17();
void sub_2f41();
void sub_3005();
void sub_30d5();
void sub_3108();
void sub_3268();
void sub_3448();
void sub_3d09();
void sub_3d18();
void sub_3d27();
void sub_3d44();
void sub_3d6f();
void sub_3d95();
void sub_3e28();
void sub_3e59();
void sub_402c();
void sub_412a();
void sub_44db();
void sub_4679();
void sub_4856();
void sub_4a35();
void sub_4c03();
void sub_4db1();
void sub_4e20();
void sub_4eb7();
void sub_4f43();
void sub_4faa();
void sub_5ada();
void sub_5c67();
void sub_5d4f();
void sub_5e61();
void sub_5e86();
void sub_60b0();
void sub_60db();
void sub_6372();
void sub_6388();
void sub_63a1();
void sub_6410();
void sub_6604();
void sub_66dd();
void sub_690a();
void sub_69ed();
void sub_6a15();
void sub_6ae8();
void sub_6c11();
void sub_6c63();
void sub_6cbb();
void sub_6d22();
void sub_6d7e();
void sub_6e15();
void sub_6e6a();
void sub_6f42();
void sub_6fe0();
void sub_71b1();
void sub_7221();
void sub_7292();
void sub_736f();
void sub_7433();
void sub_74f7();
void sub_7530();
void sub_779c();
void sub_7bd0();
void sub_7c14();
void sub_80de();
void sub_852f();
void sub_88e4();
void sub_88fc();
void sub_8a8a();
void sub_8d3a();
void sub_90aa();
void sub_94b8();
void sub_993b();
void sub_99b4();
void sub_9e3d();
void sub_a10f();
void sub_a186();
void sub_a263();
void sub_a34f();
void sub_a5a8();
void sub_a672();
void sub_a6c3();
void sub_a70c();
void sub_a73c();
void sub_a78f();
void sub_a99a();
void sub_a9d5();
void sub_a9f3();
void sub_aa9a();
void sub_ad5a();
void sub_adf2();
void sub_ae2f();
void sub_af61();
void sub_b024();
void sub_b0e7();
void sub_b384();
void sub_b6f4();
void sub_b99f();
void sub_b9ae();
void sub_b9cf();
void sub_b9ed();
void sub_ba29();
void sub_ba46();
void sub_ba4d();
void sub_bacb();
void sub_bb20();
void sub_bb3c();
void sub_bbd5();
void sub_bc26();
void sub_be10();
void sub_be37();
void sub_be9f();
void sub_bef8();
void sub_c416();
void sub_c6ac();
void sub_c707();
void sub_c774();
void sub_c7ba();
void sub_c7e2();
void sub_c9bc();
void sub_cb4e();
void sub_cb77();
void sub_cba0();
void sub_cbee();
void sub_cbf3();
void sub_cbf8();
void sub_d069();
void sub_d113();
void sub_d191();
void sub_d1f7();
void sub_d472();
void sub_d4ec();
void sub_d539();
void sub_d5a0();
void sub_d63e();
void sub_d711();
void sub_d8d2();
void sub_d929();
void sub_d99b();
void sub_da6c();
void sub_e0ea();
void sub_e15f();
void sub_e1c6();
void sub_e20c();
void sub_e25c();
void sub_e318();
void sub_e35e();
void sub_e3b9();
void sub_e418();
void sub_e465();
void sub_e5db();
void sub_e680();
void sub_e806();
void sub_e84e();
void sub_e8f3();
void sub_ec4a();
void sub_ec66();
void sub_ec9e();
void sub_ece3();
void sub_ed32();
void sub_edb1();
void sub_edd8();
void sub_ee10();
void sub_ee3e();
void sub_ee7b();
void sub_eed0();
void sub_ef25();
void sub_ef7b();
void sub_efc8();
void sub_f014();
void sub_f03d();
void sub_f09b();
void sub_f111();
void sub_f132();
void sub_f1af();
void sub_f1e6();
void sub_f223();
void sub_f23f();
void sub_f25d();
void sub_f38a();
void sub_f46d();
void sub_f4ad();
void sub_f533();
void sub_f54d();
void sub_f5c9();
void sub_f925();
void sub_f981();
void sub_f9cd();
void sub_fa02();
void sub_fad1();
void sub_fb39();
void sub_fe01();
void sub_10052();
void sub_100e9();
void sub_101ff();
void sub_10315();
void sub_1041e();
void sub_10509();
void sub_1061f();
void sub_10a05();
void sub_10a9e();
void sub_10aba();
void sub_10baa();
void sub_10bc1();
void sub_10bfb();
void sub_10c0d();
void sub_10c39();
void sub_10c89();
void sub_10ced();
void sub_10d7f();
void sub_10e28();
void sub_10e78();
void sub_10e83();
void sub_10e8e();
void sub_10ffa();
void sub_11620();
void sub_11673();
void sub_116b1();
void sub_11704();
void sub_11745();
void sub_1179a();
void sub_117db();
void sub_11cd0();
void sub_11cef();
void sub_11d74();
void sub_11dd5();
void sub_11e18();
void sub_11e36();
void sub_11e5b();
void sub_11f04();
void sub_11fba();
void sub_1205c();
void sub_120b8();
void sub_12197();
void sub_121f0();
void sub_122bd();
void sub_12305();
void sub_123ba();
void sub_123d6();
void sub_12425();
void sub_1246a();
void sub_124af();
void sub_12541();
void sub_12585();
void sub_125c0();
void sub_125ea();
void sub_126a0();
void sub_126a8();
void sub_126c9();
void sub_126ea();
void sub_12738();
void sub_12761();
void sub_1278a();
void sub_127ab();
void sub_127cc();
void sub_127ed();
void sub_12809();
void sub_12825();
void sub_12886();
void sub_128b3();
void sub_128f6();
void sub_1290a();
void sub_129c3();
void sub_12df2();
void sub_12dfc();
void sub_12e24();
void sub_12e56();
void sub_12e8c();
void sub_12ed7();
void sub_12f08();
void sub_12f92();
void sub_12f99();
void sub_1302c();
void sub_13be3();
void sub_13e00();
void sub_13e6f();
void sub_1463d();
void sub_148b2();
void sub_14a09();
void sub_14cbc();
void sub_14d22();
void sub_154e6();
void sub_1554c();
void sub_15bc7();
void sub_15c56();
void sub_15d4b();
void sub_1601f();
void sub_160df();
void sub_1612b();
void sub_16213();
void sub_162ac();
void sub_16560();
void sub_165e0();
void sub_16b97();
void sub_16d9c();
void sub_16e13();
void sub_16e82();
void sub_173c3();
void sub_17438();
void sub_17609();
void sub_17675();
void sub_179fc();
void sub_17b95();
void sub_17bfb();
void sub_18293();
void sub_182d0();
void sub_1831a();
void sub_1839a();
void sub_1841a();
void sub_184a6();
void sub_185ef();
void sub_1865c();
void sub_186c1();
void sub_18726();
void sub_18906();
void sub_18ae8();
void sub_18bc1();
void sub_18c3b();
void sub_18c85();
void sub_18d9b();
void sub_18f79();
void sub_18fb9();
void sub_1903f();
void sub_19059();
void sub_190a3();
void sub_19124();
void sub_19382();
void sub_1946a();
void sub_1946f();
void sub_194a1();
void sub_194d3();
void sub_19517();
void sub_1955b();
void sub_1959f();
void sub_195e3();
void sub_19627();
void sub_1966b();
void sub_196da();
void sub_1979a();
void sub_19888();
void sub_1994e();
void sub_19aa5();
void sub_19e49();
void sub_19e7b();
void sub_19eac();
void sub_19f50();
void sub_1a03f();
void sub_1a10b();
void sub_1a412();
void sub_1a4da();
void sub_1a5d8();
void sub_1a63d();
void sub_1a6df();
void sub_1a77d();
void sub_1b042();
void sub_1b0b7();
void sub_1b107();
void sub_1b19e();
void sub_1b214();
void sub_1b341();
void sub_1b3e8();
void sub_1b4ad();
void sub_1b596();
void sub_1b6d5();
void sub_1b714();
void sub_1b761();
void sub_1b934();
void sub_1b991();
void sub_1bdb2();
void sub_1bebe();
void sub_1bf13();
void sub_1dc46();
void sub_1dcd2();
void sub_1dd4b();
void sub_1ddc3();
void sub_1df27();
void sub_1dfa2();
void sub_1e0c4();
void sub_1e0fe();
void sub_1e303();
void sub_1e32a();
void sub_1e3e9();
void sub_1e4a4();
void sub_1e59e();
void sub_1e69a();
void sub_1e6d6();
void sub_1e7b9();
void sub_1e7d8();
void sub_1e7fc();
void sub_1e844();
void sub_1e859();
void sub_1e924();
void sub_1e958();
void sub_1e96d();
void sub_1e98c();
void sub_1e9bb();
void sub_1e9e2();
void sub_1ea3d();
void sub_1ea99();
void sub_1eacc();
void sub_1eb5f();
void sub_1eba6();
void sub_1ec1f();
void sub_1ec34();
void sub_1ee6d();
void sub_1eeb0();
void sub_1f01d();
void sub_1f09f();
void sub_1f0af();
void sub_1f0c9();
void sub_1f0d4();
void sub_1f106();
void sub_1f1a2();
void sub_1f1cd();
void sub_1f206();
void sub_1f231();
void sub_1f244();
void sub_1f2b8();
void sub_1f2d5();
void sub_1f2e7();
void sub_1f42d();
void sub_1f489();
void sub_1f4af();
void sub_1f572();
void sub_1f590();
void sub_1f5ab();
void sub_1f5c9();
void sub_1f5f5();
void sub_1f63a();
void sub_1f663();
void sub_1f6b7();
void sub_1f809();
// Discard check failed in sub_13e6f: cur=13e0:0597 last=13e0:058d> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
// Discard check failed in sub_14d22: cur=1463:0bb9 last=1463:0baf> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
// Discard check failed in sub_1554c: cur=154e:05be last=154e:05b4> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
// Discard check failed in sub_165e0: cur=15bc:0cae last=15bc:0ca1> memoryAGet16(ds, 0x932c) modifies memoryAGet16(ds, 0x932c)
// Discard check failed in sub_165e0: cur=15bc:0cd9 last=15bc:0ccc> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
// Discard check failed in sub_17bfb: cur=179f:0638 last=179f:062e> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
// Discard check failed in sub_1b991: cur=19e4:1ec1 last=19e4:1eb6> memoryAGet16(ds, 0x97f4) modifies memoryAGet16(ds, 0x97f4)
// INJECT: Error: cannot inject flag in sub_2286() because of `being label!
void sub_1ed0() // 01ed:0000
{
//    CStackGuardFar sg(0, true);
//    push(0x7777);
    flags.interrupts = true;
    dx = 0x1f86;
    memoryASet16(cs, 0x0172, dx);
    ah = 0x30;
    interrupt(0x21);
    bp = memoryAGet16(ds, 0x0002);
    bx = memoryAGet16(ds, 0x002c);
    ds = dx;
    memoryASet16(ds, 0x0071, ax);
    memoryASet16(ds, 0x006f, es);
    memoryASet16(ds, 0x006b, bx);
    memoryASet16(ds, 0x0081, bp);
    memoryASet16(ds, 0x0075, 0xffff);
    sub_1ff2(); // 01ed:0122
    di = memoryAGet16(ds, 0x0069);
    es = memoryAGet16(ds, 0x0069 + 2);
    ax = di;
    bx = ax;
    cx = 0x7fff;
loc_1f0a: // 01ed:003a
    if (memoryAGet16(es, di) != 0x3738)
        goto loc_1f2a;
    dx = memoryAGet16(es, di + 2);
    if (dl != 0x3d)
        goto loc_1f2a;
    dh &= 0xdf;
    memoryASet16(ds, 0x0075, memoryAGet16(ds, 0x0075) + 1);
    if (dh != 0x59)
        goto loc_1f2a;
    memoryASet16(ds, 0x0075, memoryAGet16(ds, 0x0075) + 1);
loc_1f2a: // 01ed:005a
    repne_scasb<MemAuto, DirAuto>(al);
    if (cx == 0)
        goto loc_1f70;
    bx++;
    if (memoryAGet(es, di) != al)
        goto loc_1f0a;
    ch |= 0x80;
    cx = -cx;
    memoryASet16(ds, 0x0069, cx);
    cx = 0x0002;
    bx <<= cl;
    bx += 0x0010;
    bx &= 0xfff0;
    memoryASet16(ds, 0x006d, bx);
    push(cs);
    callIndirect(cs, memoryAGet16(ds, 0x87b0)); // 01ed:007e
    dx = ss;
    bp -= dx;
    di = memoryAGet16(ds, 0x1bf2);
    if (di >= 0x0100)
        goto loc_1f67;
    di = 0x0100;
    memoryASet16(ds, 0x1bf2, di);
loc_1f67: // 01ed:0097
    cl = 0x04;
    di >>= cl;
    di++;
    if (bp >= di)
        goto loc_1f73;
loc_1f70: // 01ed:00a0
    goto loc_202a;
loc_1f73: // 01ed:00a3
    bx = di;
    bx += dx;
    memoryASet16(ds, 0x0079, bx);
    memoryASet16(ds, 0x007d, bx);
    ax = memoryAGet16(ds, 0x006f);
    bx -= ax;
    es = ax;
    ah = 0x4a;
    push(di);
    interrupt(0x21);
    di = pop();
    di <<= cl;
    ss = dx;
    sp = di;
    push(cs);
    cs = 0x01ed;
    sub_21f8(); // 01ed:0328
    assert(cs == 0x01ed);
    push(cs);
    cs = 0x01ed;
    sub_22f6(); // 01ed:0426
    assert(cs == 0x01ed);
    ax = 0;
    es = memoryAGet16(cs, 0x0172);
    di = 0x87b6;
    cx = 0x9cf8;
    cx -= di;
    rep_stosb<MemAuto, DirAuto>();
    push(cs);
    callIndirect(cs, memoryAGet16(ds, 0x87b4)); // 01ed:00de
    push(memoryAGet16(ds, 0x0067));
    push(memoryAGet16(ds, 0x0065));
    push(memoryAGet16(ds, 0x0063));
    push(memoryAGet16(ds, 0x0061));
    push(memoryAGet16(ds, 0x005f));
    push(cs);
    cs = 0x12f9;
    sub_1302c(); // 12f9:009c
    assert(cs == 0x01ed);
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x01ed);
    ds = memoryAGet16(cs, 0x0172);
    push(cs);
    cs = 0x01ed;
    sub_200e(); // 01ed:013e
    assert(cs == 0x01ed);
    push(cs);
    callIndirect(cs, memoryAGet16(ds, 0x87b2)); // 01ed:010c
    bp = sp;
    ah = 0x4c;
    al = memoryAGet(ss, bp + 4);
    interrupt(0x21);
    cx = 0x000e;
    dx = 0x002f;
    goto loc_2031;
    //   gap of 56 bytes
loc_202a: // 01ed:015a
    cx = 0x001e;
    dx = 0x003d;
loc_2031: // 01ed:0161
    ds = memoryAGet16(cs, 0x0172);
    sub_2022(); // 01ed:0152
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x01ed;
    sub_1fd1(); // 01ed:0101
    assert(cs == 0x01ed);
    memoryASet(ds, bx + si, memoryAGet(ds, bx + si) + al);
    cl = 0x03;
    goto loc_2052;
    //   gap of 10 bytes
loc_2052: // 01ed:0182
    push(bp);
    push(si);
    push(di);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    bp = memoryAGet16(ss, bp + 16);
    si = 0;
    if (cl & 0x01)
        goto loc_2089;
    if (!(dx & 0x8000))
        goto loc_2077;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= si + flags.carry;
    cl |= 0x04;
loc_2077: // 01ed:01a7
    if (!(bp & 0x8000))
        goto loc_2089;
    bp = -bp;
    flags.carry = bx != 0;
    bx = -bx;
    bp -= si + flags.carry;
    if (cl & 0x02)
        goto loc_2089;
    cl ^= 0x04;
loc_2089: // 01ed:01b9
    di = bp;
    di |= dx;
    if (di)
        goto loc_2095;
    div(bx);
    tx = dx;
    dx = si;
    si = tx;
    goto loc_20b5;
loc_2095: // 01ed:01c5
    push(cx);
    cx = 0x0020;
    di = si;
loc_209b: // 01ed:01cb
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl(dx, 0x0001);
    si = rcl(si, 0x0001);
    di = rcl(di, 0x0001);
    if (di < bp)
        goto loc_20b2;
    if (di > bp)
        goto loc_20ad;
    if (si < bx)
        goto loc_20b2;
loc_20ad: // 01ed:01dd
    flags.carry = si < bx;
    si -= bx;
    di -= bp + flags.carry;
    ax++;
loc_20b2: // 01ed:01e2
    if (--cx)
        goto loc_209b;
    cx = pop();
loc_20b5: // 01ed:01e5
    if (!(cl & 0x02))
        goto loc_20bd;
    tx = si;
    si = ax;
    ax = tx;
    dx = di;
loc_20bd: // 01ed:01ed
    if (!(cl & 0x04))
        goto loc_20c9;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= flags.carry;
loc_20c9: // 01ed:01f9
    di = pop();
    si = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
    sp += 8;
}
void sub_1fd1() // 01ed:0101
{
    CStackGuardFar sg(8, true);
    push(0x7777);
    ds = memoryAGet16(cs, 0x0172);
    push(cs);
    cs = 0x01ed;
    sub_200e(); // 01ed:013e
    assert(cs == 0x01ed);
    push(cs);
    callIndirect(cs, memoryAGet16(ds, 0x87b2)); // 01ed:010c
    bp = sp;
    ah = 0x4c;
    al = memoryAGet(ss, bp + 4);
    interrupt(0x21);
    cx = 0x000e;
    dx = 0x002f;
    goto loc_2031;
    //   gap of 63 bytes
loc_2031: // 01ed:0161
    ds = memoryAGet16(cs, 0x0172);
    sub_2022(); // 01ed:0152
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x01ed;
    sub_1fd1(); // 01ed:0101
    assert(cs == 0x01ed);
    memoryASet(ds, bx + si, memoryAGet(ds, bx + si) + al);
    cl = 0x03;
    goto loc_2052;
    //   gap of 10 bytes
loc_2052: // 01ed:0182
    push(bp);
    push(si);
    push(di);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    bp = memoryAGet16(ss, bp + 16);
    si = 0;
    if (cl & 0x01)
        goto loc_2089;
    if (!(dx & 0x8000))
        goto loc_2077;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= si + flags.carry;
    cl |= 0x04;
loc_2077: // 01ed:01a7
    if (!(bp & 0x8000))
        goto loc_2089;
    bp = -bp;
    flags.carry = bx != 0;
    bx = -bx;
    bp -= si + flags.carry;
    if (cl & 0x02)
        goto loc_2089;
    cl ^= 0x04;
loc_2089: // 01ed:01b9
    di = bp;
    di |= dx;
    if (di)
        goto loc_2095;
    div(bx);
    tx = dx;
    dx = si;
    si = tx;
    goto loc_20b5;
loc_2095: // 01ed:01c5
    push(cx);
    cx = 0x0020;
    di = si;
loc_209b: // 01ed:01cb
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl(dx, 0x0001);
    si = rcl(si, 0x0001);
    di = rcl(di, 0x0001);
    if (di < bp)
        goto loc_20b2;
    if (di > bp)
        goto loc_20ad;
    if (si < bx)
        goto loc_20b2;
loc_20ad: // 01ed:01dd
    flags.carry = si < bx;
    si -= bx;
    di -= bp + flags.carry;
    ax++;
loc_20b2: // 01ed:01e2
    if (--cx)
        goto loc_209b;
    cx = pop();
loc_20b5: // 01ed:01e5
    if (!(cl & 0x02))
        goto loc_20bd;
    tx = si;
    si = ax;
    ax = tx;
    dx = di;
loc_20bd: // 01ed:01ed
    if (!(cl & 0x04))
        goto loc_20c9;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= flags.carry;
loc_20c9: // 01ed:01f9
    di = pop();
    si = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
    sp += 8;
}
void sub_1fe9() // 01ed:0119
{
    CStackGuardFar sg(8, true);
    push(0x7777);
    cx = 0x000e;
    dx = 0x002f;
    goto loc_2031;
    //   gap of 63 bytes
loc_2031: // 01ed:0161
    ds = memoryAGet16(cs, 0x0172);
    sub_2022(); // 01ed:0152
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x01ed;
    sub_1fd1(); // 01ed:0101
    assert(cs == 0x01ed);
    memoryASet(ds, bx + si, memoryAGet(ds, bx + si) + al);
    cl = 0x03;
    goto loc_2052;
    //   gap of 10 bytes
loc_2052: // 01ed:0182
    push(bp);
    push(si);
    push(di);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    bp = memoryAGet16(ss, bp + 16);
    si = 0;
    if (cl & 0x01)
        goto loc_2089;
    if (!(dx & 0x8000))
        goto loc_2077;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= si + flags.carry;
    cl |= 0x04;
loc_2077: // 01ed:01a7
    if (!(bp & 0x8000))
        goto loc_2089;
    bp = -bp;
    flags.carry = bx != 0;
    bx = -bx;
    bp -= si + flags.carry;
    if (cl & 0x02)
        goto loc_2089;
    cl ^= 0x04;
loc_2089: // 01ed:01b9
    di = bp;
    di |= dx;
    if (di)
        goto loc_2095;
    div(bx);
    tx = dx;
    dx = si;
    si = tx;
    goto loc_20b5;
loc_2095: // 01ed:01c5
    push(cx);
    cx = 0x0020;
    di = si;
loc_209b: // 01ed:01cb
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl(dx, 0x0001);
    si = rcl(si, 0x0001);
    di = rcl(di, 0x0001);
    if (di < bp)
        goto loc_20b2;
    if (di > bp)
        goto loc_20ad;
    if (si < bx)
        goto loc_20b2;
loc_20ad: // 01ed:01dd
    flags.carry = si < bx;
    si -= bx;
    di -= bp + flags.carry;
    ax++;
loc_20b2: // 01ed:01e2
    if (--cx)
        goto loc_209b;
    cx = pop();
loc_20b5: // 01ed:01e5
    if (!(cl & 0x02))
        goto loc_20bd;
    tx = si;
    si = ax;
    ax = tx;
    dx = di;
loc_20bd: // 01ed:01ed
    if (!(cl & 0x04))
        goto loc_20c9;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= flags.carry;
loc_20c9: // 01ed:01f9
    di = pop();
    si = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
    sp += 8;
}
void sub_1ff2() // 01ed:0122
{
    CStackGuard sg(0, false);
    push(ds);
    ax = 0x3500;
    interrupt(0x21);
    memoryASet16(ds, 0x005b, bx);
    memoryASet16(ds, 0x005d, es);
    ax = 0x2500;
    dx = cs;
    ds = dx;
    dx = 0x0119;
    interrupt(0x21);
    ds = pop();
}
void sub_200e() // 01ed:013e
{
    CStackGuardFar sg(0, false);
    push(ds);
    ax = 0x2500;
    dx = memoryAGet16(ds, 0x005b);
    ds = memoryAGet16(ds, 0x005b + 2);
    interrupt(0x21);
    ds = pop();
    cs = pop();
}
void sub_201a() // 01ed:014a
{
    CStackGuardFar sg(0, false);
    memoryASet16(ds, 0x0075, 0x0000);
    cs = pop();
}
void sub_2021() // 01ed:0151
{
    CStackGuardFar sg(0, false);
    cs = pop();
}
void sub_2022() // 01ed:0152
{
    CStackGuard sg(0, false);
    ah = 0x40;
    bx = 0x0002;
    interrupt(0x21);
}
void sub_2044() // 01ed:0174
{
    CStackGuardFar sg(8, true);
    push(0x7777);
    cl = 0x03;
    goto loc_2052;
    //   gap of 10 bytes
loc_2052: // 01ed:0182
    push(bp);
    push(si);
    push(di);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    bp = memoryAGet16(ss, bp + 16);
    si = 0;
    if (cl & 0x01)
        goto loc_2089;
    if (!(dx & 0x8000))
        goto loc_2077;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= si + flags.carry;
    cl |= 0x04;
loc_2077: // 01ed:01a7
    if (!(bp & 0x8000))
        goto loc_2089;
    bp = -bp;
    flags.carry = bx != 0;
    bx = -bx;
    bp -= si + flags.carry;
    if (cl & 0x02)
        goto loc_2089;
    cl ^= 0x04;
loc_2089: // 01ed:01b9
    di = bp;
    di |= dx;
    if (di)
        goto loc_2095;
    div(bx);
    tx = dx;
    dx = si;
    si = tx;
    goto loc_20b5;
loc_2095: // 01ed:01c5
    push(cx);
    cx = 0x0020;
    di = si;
loc_209b: // 01ed:01cb
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl(dx, 0x0001);
    si = rcl(si, 0x0001);
    di = rcl(di, 0x0001);
    if (di < bp)
        goto loc_20b2;
    if (di > bp)
        goto loc_20ad;
    if (si < bx)
        goto loc_20b2;
loc_20ad: // 01ed:01dd
    flags.carry = si < bx;
    si -= bx;
    di -= bp + flags.carry;
    ax++;
loc_20b2: // 01ed:01e2
    if (--cx)
        goto loc_209b;
    cx = pop();
loc_20b5: // 01ed:01e5
    if (!(cl & 0x02))
        goto loc_20bd;
    tx = si;
    si = ax;
    ax = tx;
    dx = di;
loc_20bd: // 01ed:01ed
    if (!(cl & 0x04))
        goto loc_20c9;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= flags.carry;
loc_20c9: // 01ed:01f9
    di = pop();
    si = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
    sp += 8;
}
void sub_204c() // 01ed:017c
{
    CStackGuardFar sg(8, true);
    push(0x7777);
    cl = 0x01;
    goto loc_2052;
    //   gap of 2 bytes
loc_2052: // 01ed:0182
    push(bp);
    push(si);
    push(di);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    bp = memoryAGet16(ss, bp + 16);
    si = 0;
    if (cl & 0x01)
        goto loc_2089;
    if (!(dx & 0x8000))
        goto loc_2077;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= si + flags.carry;
    cl |= 0x04;
loc_2077: // 01ed:01a7
    if (!(bp & 0x8000))
        goto loc_2089;
    bp = -bp;
    flags.carry = bx != 0;
    bx = -bx;
    bp -= si + flags.carry;
    if (cl & 0x02)
        goto loc_2089;
    cl ^= 0x04;
loc_2089: // 01ed:01b9
    di = bp;
    di |= dx;
    if (di)
        goto loc_2095;
    div(bx);
    tx = dx;
    dx = si;
    si = tx;
    goto loc_20b5;
loc_2095: // 01ed:01c5
    push(cx);
    cx = 0x0020;
    di = si;
loc_209b: // 01ed:01cb
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl(dx, 0x0001);
    si = rcl(si, 0x0001);
    di = rcl(di, 0x0001);
    if (di < bp)
        goto loc_20b2;
    if (di > bp)
        goto loc_20ad;
    if (si < bx)
        goto loc_20b2;
loc_20ad: // 01ed:01dd
    flags.carry = si < bx;
    si -= bx;
    di -= bp + flags.carry;
    ax++;
loc_20b2: // 01ed:01e2
    if (--cx)
        goto loc_209b;
    cx = pop();
loc_20b5: // 01ed:01e5
    if (!(cl & 0x02))
        goto loc_20bd;
    tx = si;
    si = ax;
    ax = tx;
    dx = di;
loc_20bd: // 01ed:01ed
    if (!(cl & 0x04))
        goto loc_20c9;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= flags.carry;
loc_20c9: // 01ed:01f9
    di = pop();
    si = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
    sp += 8;
}
void sub_2050() // 01ed:0180
{
    CStackGuardFar sg(8, true);
    push(0x7777);
    cx = 0;
    push(bp);
    push(si);
    push(di);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    bp = memoryAGet16(ss, bp + 16);
    si = 0;
    if (cl & 0x01)
        goto loc_2089;
    if (!(dx & 0x8000))
        goto loc_2077;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= si + flags.carry;
    cl |= 0x04;
loc_2077: // 01ed:01a7
    if (!(bp & 0x8000))
        goto loc_2089;
    bp = -bp;
    flags.carry = bx != 0;
    bx = -bx;
    bp -= si + flags.carry;
    if (cl & 0x02)
        goto loc_2089;
    cl ^= 0x04;
loc_2089: // 01ed:01b9
    di = bp;
    di |= dx;
    if (di)
        goto loc_2095;
    div(bx);
    tx = dx;
    dx = si;
    si = tx;
    goto loc_20b5;
loc_2095: // 01ed:01c5
    push(cx);
    cx = 0x0020;
    di = si;
loc_209b: // 01ed:01cb
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl(dx, 0x0001);
    si = rcl(si, 0x0001);
    di = rcl(di, 0x0001);
    if (di < bp)
        goto loc_20b2;
    if (di > bp)
        goto loc_20ad;
    if (si < bx)
        goto loc_20b2;
loc_20ad: // 01ed:01dd
    flags.carry = si < bx;
    si -= bx;
    di -= bp + flags.carry;
    ax++;
loc_20b2: // 01ed:01e2
    if (--cx)
        goto loc_209b;
    cx = pop();
loc_20b5: // 01ed:01e5
    if (!(cl & 0x02))
        goto loc_20bd;
    tx = si;
    si = ax;
    ax = tx;
    dx = di;
loc_20bd: // 01ed:01ed
    if (!(cl & 0x04))
        goto loc_20c9;
    dx = -dx;
    flags.carry = ax != 0;
    ax = -ax;
    dx -= flags.carry;
loc_20c9: // 01ed:01f9
    di = pop();
    si = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
    sp += 8;
}
void sub_20cf() // 01ed:01ff
{
    CStackGuardFar sg(0, false);
    if (cx <= 0x0020)
        goto loc_20d9;
    ax = 0;
    dx = 0;
    cs = pop();
    return;
loc_20d9: // 01ed:0209
    tx = cx;
    cx--;
    if ((short)tx < 1)
        goto loc_20e2;
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl(dx, 0x0001);
    goto loc_20d9;
loc_20e2: // 01ed:0212
    cs = pop();
}
void sub_20f5() // 01ed:0225
{
    CStackGuardFar sg(0, false);
    if (cx <= 0x0020)
        goto loc_20ff;
    ax = 0;
    dx = 0;
    cs = pop();
    return;
loc_20ff: // 01ed:022f
    tx = cx;
    cx--;
    if ((short)tx < 1)
        goto loc_2108;
    flags.carry = dx & 1;
    dx >>= 1;
    ax = rcr(ax, 0x0001);
    goto loc_20ff;
loc_2108: // 01ed:0238
    cs = pop();
}
void sub_2109() // 01ed:0239
{
    CStackGuardFar sg(0, false);
    push(si);
    tx = si;
    si = ax;
    ax = tx;
    tx = dx;
    dx = ax;
    ax = tx;
    if (!ax)
        goto loc_2112;
    mul(bx);
loc_2112: // 01ed:0242
    tx = cx;
    cx = ax;
    ax = tx;
    if (!ax)
        goto loc_211b;
    mul(si);
    cx += ax;
loc_211b: // 01ed:024b
    tx = si;
    si = ax;
    ax = tx;
    mul(bx);
    dx += cx;
    si = pop();
    cs = pop();
}
void sub_2122() // 01ed:0252
{
    CStackGuardFar sg(0, false);
    if ((short)cx >= 0)
        goto loc_2133;
    bx = ~bx;
    cx = ~cx;
    flags.carry = (bx + 0x0001) >= 0x10000;
    bx += 0x0001;
    cx += flags.carry;
    goto loc_215f;
loc_2133: // 01ed:0263
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    if (!flags.carry)
        goto loc_213b;
    dx += 0x1000;
loc_213b: // 01ed:026b
    ch = cl;
    cl = 0x04;
    ch <<= cl;
    dh += ch;
    ch = al;
    ax >>= cl;
    dx += ax;
    al = ch;
    ax &= 0x000f;
    cs = pop();
    return;
    //   gap of 16 bytes
loc_215f: // 01ed:028f
    flags.carry = ax < bx;
    ax -= bx;
    if (!flags.carry)
        goto loc_2167;
    dx -= 0x1000;
loc_2167: // 01ed:0297
    bh = cl;
    cl = 0x04;
    bh <<= cl;
    bl = 0;
    dx -= bx;
    ch = al;
    ax >>= cl;
    dx += ax;
    al = ch;
    ax &= 0x000f;
    cs = pop();
}
void sub_217d() // 01ed:02ad+zero
{
    CStackGuardFar sg(0, false);
    push(cx);
    ch = al;
    cl = 0x04;
    ax >>= cl;
    dx += ax;
    al = ch;
    ah = bl;
    bx >>= cl;
    cx = pop();
    cx += bx;
    bl = ah;
    ax &= 0x000f;
    bx &= 0x000f;
    flags.carry = dx < cx;
    flags.zero = dx == cx;
    if (dx != cx)
        goto loc_219e;
    flags.carry = ax < bx;
    flags.zero = ax == bx;
loc_219e: // 01ed:02ce
    cs = pop();
}
void sub_219f() // 01ed:02cf
{
    CStackGuardFar sg(0, false);
    push(di);
    di = cx;
    ch = dh;
    cl = 0x04;
    dx <<= cl;
    ch >>= cl;
    flags.carry = (dx + ax) >= 0x10000;
    dx += ax;
    ch += flags.carry;
    ax = di;
    di <<= cl;
    ah >>= cl;
    flags.carry = (bx + di) >= 0x10000;
    bx += di;
    ah += flags.carry;
    flags.carry = dx < bx;
    dx -= bx;
    ch -= ah + flags.carry;
    al = ch;
    cbw();
    tx = dx;
    dx = ax;
    ax = tx;
    di = pop();
    cs = pop();
}
void sub_21c4() // 01ed:02f4
{
    CStackGuardFar sg(8, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    si = memoryAGet16(ss, bp + 6);
    ds = memoryAGet16(ss, bp + 6 + 2);
    di = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    ax = ds;
    dx = es;
    if (ax > dx)
        goto loc_21e7;
    if (si > di)
        goto loc_21e7;
    flags.direction = false;
loc_21dd: // 01ed:030d
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    flags.direction = false;
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
    sp += 8;
    return;
loc_21e7: // 01ed:0317
    si += cx;
    di += cx;
    si--;
    di--;
    flags.direction = true;
    goto loc_21dd;
}
void sub_21f8() // 01ed:0328
{
    push(0x7777);
    memoryASet16(cs, 0x0320, pop());
    memoryASet16(cs, 0x0322, pop());
    memoryASet16(cs, 0x0324, ds);
    flags.direction = false;
    es = memoryAGet16(ds, 0x006f);
    si = 0x0080;
    ax = 0;
    lodsb_es<MemAuto, DirAuto>();
    ax++;
    bp = es;
    tx = si;
    si = dx;
    dx = tx;
    tx = bx;
    bx = ax;
    ax = tx;
    si = memoryAGet16(ds, 0x0069);
    si += 0x0002;
    cx = 0x0001;
    if (memoryAGet(ds, 0x0071) < 0x03)
        goto loc_223b;
    es = memoryAGet16(ds, 0x006b);
    di = si;
    cl = 0x7f;
    al = 0;
    repne_scasb<MemAuto, DirAuto>(al);
    if (cx == 0)
        goto loc_22ae;
    cl ^= 0x7f;
loc_223b: // 01ed:036b
    sp -= 0x0002;
    ax = 0x0001;
    ax += bx;
    ax += cx;
    ax &= 0xfffe;
    di = sp;
    tx = di;
    di -= ax;
    if (tx < ax)
        goto loc_22ae;
    sp = di;
    ax = es;
    ds = ax;
    ax = ss;
    es = ax;
    push(cx);
    cx--;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    al = 0;
    stosb<MemAuto, DirAuto>();
    ds = bp;
    tx = dx;
    dx = si;
    si = tx;
    tx = cx;
    cx = bx;
    bx = tx;
    ax = bx;
    dx = ax;
    bx++;
loc_226a: // 01ed:039a
    sub_2286(); // 01ed:03b6
    if (!flags.zero && !flags.carry)
        goto loc_2276;
loc_226f: // 01ed:039f
    if (flags.carry)
        goto loc_22b3;
    sub_2286(); // 01ed:03b6
    if (!flags.zero && !flags.carry)
        goto loc_226f;
loc_2276: // 01ed:03a6
    if (al == 0x20)
        goto loc_2282;
    if (al == 0x0d)
        goto loc_2282;
    if (al != 0x09)
        goto loc_226a;
loc_2282: // 01ed:03b2
    al = 0;
    goto loc_226a;
    //   gap of 40 bytes
loc_22ae: // 01ed:03de
    stop(); // ljmp 0x1ed:0x15a
loc_22b3: // 01ed:03e3
    cx = pop();
    cx += dx;
    ds = memoryAGet16(cs, 0x0324);
    memoryASet16(ds, 0x005f, bx);
    bx++;
    bx += bx;
    bx += bx;
    si = sp;
    bp = sp;
    tx = bp;
    bp -= bx;
    if (tx < bx)
        goto loc_22ae;
    sp = bp;
    memoryASet16(ds, 0x0061, bp);
    memoryASet16(ds, 0x0063, ss);
loc_22d6: // 01ed:0406
    if (cx == 0)
        goto loc_22e9;
    memoryASet16(ss, bp, si);
    memoryASet16(ss, bp + 2, ss);
    bp += 0x0004;
loc_22e1: // 01ed:0411
    lodsb_ss<MemAuto, DirAuto>();
    if (--cx && al)
        goto loc_22e1;
    if (!al)
        goto loc_22d6;
loc_22e9: // 01ed:0419
    flags.carry = false;
    ax = 0;
    memoryASet16(ss, bp, ax);
    memoryASet16(ss, bp + 2, ax);
    daa();
}
// INJECT: Error: cannot inject zero flag in sub_2286()!
// INJECT: Error: cannot inject carry flag in sub_2286()!
void sub_2286() // 01ed:03b6+zero
{
    CStackGuard sg(0, false);
    if (!ax)
        goto loc_2291;
    dx++;
    stosb<MemAuto, DirAuto>();
    if (al)
        goto loc_2291;
    bx++;
loc_2291: // 01ed:03c1
    tl = al;
    al = ah;
    ah = tl;
    al = 0;
    flags.carry = true;
    if (cx == 0)
    {
        flags.zero = true;
        goto loc_22ad;
    }
    lodsb<MemAuto, DirAuto>();
    cx--;
    al -= 0x22;
    if (al == 0)
    {
        flags.zero = true;
        goto loc_22ad;
    }
    al += 0x22;
    if (al != 0x5c)
    {
        flags.zero = false;
        goto loc_22ab;
    }
    if (memoryAGet(ds, si) != 0x22)
    {
        flags.zero = false;
        goto loc_22ab;
    }
    lodsb<MemAuto, DirAuto>();
    cx--;
    flags.zero = cx == 0;
loc_22ab: // 01ed:03db
    flags.carry = false;
loc_22ad: // 01ed:03dd
    return;
}
void sub_22f6() // 01ed:0426
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    es = memoryAGet16(ds, 0x006b);
    di = 0;
    push(es);
    push(memoryAGet16(ds, 0x006d));
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x01ed);
    sp += 0x0002;
    bx = ax;
    es = pop();
    memoryASet16(ds, 0x0065, ax);
    memoryASet16(ds, 0x0067, dx);
    push(ds);
    ds = dx;
    ax |= dx;
    if (ax)
        goto loc_231f;
    cs = 0x01ed;
    callIndirect(0x01ed, 0x015a);
loc_231f: // 01ed:044f
    ax = 0;
    cx = 0xffff;
loc_2324: // 01ed:0454
    memoryASet16(ds, bx, di);
    memoryASet16(ds, bx + 2, es);
    bx += 0x0004;
    repne_scasb<MemAuto, DirAuto>(al);
    if (memoryAGet(es, di) != al)
        goto loc_2324;
    memoryASet16(ds, bx, ax);
    memoryASet16(ds, bx + 2, ax);
    ds = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_23f1() // 023f:0001
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x0084, ax);
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_23fc() // 023f:000c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    memoryASet16(ds, 0x92e4, 0x2000);
    memoryASet(ds, 0x92e1, 0x01);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_241e() // 023f:002e
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    memoryASet(ds, 0x92e1, 0x0f);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    al = memoryAGet(ds, 0x8d62);
    ah = 0x00;
    si = ax;
    ax = si;
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2445() // 023f:0055
{
    CStackGuardFar sg(0, false);
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_2460;
loc_244c: // 023f:005c
    dx = 0x03ba;
    in(al, dx);
    if (!(al & 0x80))
        goto loc_244c;
loc_2455: // 023f:0065
    dx = 0x03ba;
    in(al, dx);
    if (al & 0x80)
        goto loc_2455;
    goto loc_2472;
loc_2460: // 023f:0070
    dx = 0x03da;
    in(al, dx);
    if (al & 0x08)
        goto loc_2460;
loc_2469: // 023f:0079
    dx = 0x03da;
    in(al, dx);
    if (!(al & 0x08))
        goto loc_2469;
loc_2472: // 023f:0082
    cs = pop();
}
void sub_2473() // 023f:0083
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    si = 0;
    goto loc_24be;
loc_2478: // 023f:0088
    memoryASet(ds, 0x92e1, 0x10);
    memoryASet(ds, 0x92e0, 0x15);
    memoryASet16(ds, 0x92e2, si);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    al = memoryAGet(ds, 0x8d69);
    memoryASet(ds, si + 36740, al);
    memoryASet(ds, si + 37300, al);
    al = memoryAGet(ds, 0x8d67);
    memoryASet(ds, si + 35931, al);
    memoryASet(ds, si + 35434, al);
    al = memoryAGet(ds, 0x8d66);
    memoryASet(ds, si + 37010, al);
    memoryASet(ds, si + 36414, al);
    si++;
loc_24be: // 023f:00ce
    if (si < 0x0100)
        goto loc_2478;
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_24c6() // 023f:00d6
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 10);
    push(memoryAGet16(ss, bp + 14));
    ax = memoryAGet16(ss, bp + 16);
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(si);
    push(cs);
    cs = 0x0e97;
    sub_ee3e(); // 0e97:04ce
    assert(cs == 0x023f);
    sp = bp;
    di = 0;
    goto loc_250f;
loc_24e4: // 023f:00f4
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ds, si + 36740, al);
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    bx = memoryAGet16(ss, bp + 14);
    al = memoryAGet(es, bx);
    memoryASet(ds, si + 35931, al);
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    bx = memoryAGet16(ss, bp + 14);
    al = memoryAGet(es, bx);
    bx = si;
    memoryASet(ds, bx + 37010, al);
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    si++;
    di++;
loc_250f: // 023f:011f
    if (di < memoryAGet16(ss, bp + 12))
        goto loc_24e4;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2518() // 023f:0128
{
    int counter = 0;
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0038;
    ax = 0x0048;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x023f);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ss, bp - 6, 0x00);
    memoryASet(ss, bp - 7, 0x00);
    goto loc_256b;
loc_2539: // 023f:0149
    al = 0x00;
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x18;
    bx += dx;
    memoryASet(ss, bx, al);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x28;
    bx += dx;
    memoryASet(ss, bx, al);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x38;
    bx += dx;
    memoryASet(ss, bx, al);
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) + 1);
loc_256b: // 023f:017b
    if (memoryAGet(ss, bp - 7) < 0x10)
        goto loc_2539;
loc_2571: // 023f:0181
    if (memoryAGet(ss, bp - 6) == 0x00)
        goto loc_257a;
    goto loc_26c4;
loc_257a: // 023f:018a
    memoryASet(ss, bp - 6, 0x00);
    memoryASet(ss, bp - 7, 0x00);
    goto loc_2697;
loc_2585: // 023f:0195
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x38;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    if (al >= memoryAGet(ds, bx + 37300))
        goto loc_25b2;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x38;
    bx += ax;
    memoryASet(ss, bx, memoryAGet(ss, bx) + 1);
    goto loc_25b5;
loc_25b2: // 023f:01c2
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) + 1);
loc_25b5: // 023f:01c5
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x28;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    if (al >= memoryAGet(ds, bx + 35434))
        goto loc_25e2;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x28;
    bx += ax;
    memoryASet(ss, bx, memoryAGet(ss, bx) + 1);
    goto loc_25e5;
loc_25e2: // 023f:01f2
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) + 1);
loc_25e5: // 023f:01f5
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x18;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    if (al >= memoryAGet(ds, bx + 36414))
        goto loc_2612;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x18;
    bx += ax;
    memoryASet(ss, bx, memoryAGet(ss, bx) + 1);
    goto loc_2615;
loc_2612: // 023f:0222
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) + 1);
loc_2615: // 023f:0225
    if (memoryAGet(ss, bp - 7) >= 0x08)
        goto loc_262a;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    dx = 0x0003;
    mul(dx);
    memoryASet(ss, bp - 5, al);
    goto loc_263a;
loc_262a: // 023f:023a
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    ax += 0x0008;
    dx = 0x0003;
    mul(dx);
    memoryASet(ss, bp - 5, al);
loc_263a: // 023f:024a
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x38;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 5);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    bx += dx;
    memoryASet(es, bx, al);
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) + 1);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x28;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 5);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) + 1);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x18;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 5);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) + 1);
loc_2697: // 023f:02a7
    if (memoryAGet(ss, bp - 7) >= 0x10)
        goto loc_26a0;
    goto loc_2585;
loc_26a0: // 023f:02b0
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0018;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_24c6(); // 023f:00d6
    if (counter++ % 5 == 0)
    {sync();} //fade delay
    sp += 0x0008;
    if (memoryAGet(ss, bp - 6) != 0x30)
        goto loc_26bd;
    goto loc_2571;
loc_26bd: // 023f:02cd
    memoryASet(ss, bp - 6, 0x00);
    goto loc_2571;
loc_26c4: // 023f:02d4
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x023f);
    sp += 0x0004;
    memoryASet(ds, 0x8de6, 0x01);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_26db() // 023f:02eb
{
    int counter = 0;
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0038;
    ax = 0x0048;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x023f);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ss, bp - 6, 0x00);
    memoryASet(ss, bp - 7, 0x00);
    goto loc_279c;
loc_26fd: // 023f:030d
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    al = memoryAGet(ds, bx + 36740);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x38;
    bx += dx;
    memoryASet(ss, bx, al);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    al = memoryAGet(ds, bx + 35931);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x28;
    bx += dx;
    memoryASet(ss, bx, al);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    al = memoryAGet(ds, bx + 37010);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x18;
    bx += dx;
    memoryASet(ss, bx, al);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    al = memoryAGet(ds, bx + 36756);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x30;
    bx += dx;
    memoryASet(ss, bx, al);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    al = memoryAGet(ds, bx + 35947);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x20;
    bx += dx;
    memoryASet(ss, bx, al);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    al = memoryAGet(ds, bx + 37026);
    dl = memoryAGet(ss, bp - 7);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x10;
    bx += dx;
    memoryASet(ss, bx, al);
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) + 1);
loc_279c: // 023f:03ac
    if (memoryAGet(ss, bp - 7) >= 0x08)
        goto loc_27a5;
    goto loc_26fd;
loc_27a5: // 023f:03b5
    if (memoryAGet(ss, bp - 6) == 0x00)
        goto loc_27ae;
    goto loc_28da;
loc_27ae: // 023f:03be
    memoryASet(ss, bp - 6, 0x00);
    memoryASet(ss, bp - 7, 0x00);
    goto loc_28ad;
loc_27b9: // 023f:03c9
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x38;
    bx += ax;
    if (memoryAGet(ss, bx) == 0x00)
        goto loc_27dc;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x38;
    bx += ax;
    memoryASet(ss, bx, memoryAGet(ss, bx) - 1);
    goto loc_27df;
loc_27dc: // 023f:03ec
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) + 1);
loc_27df: // 023f:03ef
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x28;
    bx += ax;
    if (memoryAGet(ss, bx) == 0x00)
        goto loc_2802;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x28;
    bx += ax;
    memoryASet(ss, bx, memoryAGet(ss, bx) - 1);
    goto loc_2805;
loc_2802: // 023f:0412
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) + 1);
loc_2805: // 023f:0415
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x18;
    bx += ax;
    if (memoryAGet(ss, bx) == 0x00)
        goto loc_2828;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x18;
    bx += ax;
    memoryASet(ss, bx, memoryAGet(ss, bx) - 1);
    goto loc_282b;
loc_2828: // 023f:0438
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) + 1);
loc_282b: // 023f:043b
    if (memoryAGet(ss, bp - 7) >= 0x08)
        goto loc_2840;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    dx = 0x0003;
    mul(dx);
    memoryASet(ss, bp - 5, al);
    goto loc_2850;
loc_2840: // 023f:0450
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    ax += 0x0008;
    dx = 0x0003;
    mul(dx);
    memoryASet(ss, bp - 5, al);
loc_2850: // 023f:0460
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x38;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 5);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    bx += dx;
    memoryASet(es, bx, al);
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) + 1);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x28;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 5);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) + 1);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x18;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp - 5);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) + 1);
loc_28ad: // 023f:04bd
    if (memoryAGet(ss, bp - 7) >= 0x10)
        goto loc_28b6;
    goto loc_27b9;
loc_28b6: // 023f:04c6
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0018;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_24c6(); // 023f:00d6
    sp += 0x0008;
    if (counter++ % 5 == 0)
    {sync(); } //fade delay
    if (memoryAGet(ss, bp - 6) != 0x30)
        goto loc_28d3;
    goto loc_27a5;
loc_28d3: // 023f:04e3
    memoryASet(ss, bp - 6, 0x00);
    goto loc_27a5;
loc_28da: // 023f:04ea
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x023f);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_28ec() // 023f:04fc
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0186;
    ax = 0x0180;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x023f);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    si = 0;
    goto loc_291c;
loc_290a: // 023f:051a
    al = 0x00;
    memoryASet(ss, bp + si + 65402, al);
    memoryASet(ss, bp + si + 65274, al);
    memoryASet(ss, bp + si + 65146, al);
    si++;
loc_291c: // 023f:052c
    if (si < 0x0080)
        goto loc_290a;
    memoryASet16(ss, bp - 6, 0x003f);
loc_2927: // 023f:0537
    if (memoryAGet16(ss, bp - 6) != 0x0000)
        goto loc_2930;
    goto loc_29de;
loc_2930: // 023f:0540
    si = 0;
    goto loc_29bb;
loc_2935: // 023f:0545
    al = memoryAGet(ss, bp + si + 65146);
    if (al >= memoryAGet(ds, si + 37300))
        goto loc_2950;
    al = memoryAGet(ds, si + 37300);
    ah = 0x00;
    if (ax < memoryAGet16(ss, bp - 6))
        goto loc_2950;
    memoryASet(ss, bp + si + 65146, memoryAGet(ss, bp + si + 65146) + 1);
loc_2950: // 023f:0560
    al = memoryAGet(ss, bp + si + 65274);
    if (al >= memoryAGet(ds, si + 35434))
        goto loc_296b;
    al = memoryAGet(ds, si + 35434);
    ah = 0x00;
    if (ax < memoryAGet16(ss, bp - 6))
        goto loc_296b;
    memoryASet(ss, bp + si + 65274, memoryAGet(ss, bp + si + 65274) + 1);
loc_296b: // 023f:057b
    al = memoryAGet(ss, bp + si + 65402);
    if (al >= memoryAGet(ds, si + 36414))
        goto loc_2986;
    al = memoryAGet(ds, si + 36414);
    ah = 0x00;
    if (ax < memoryAGet16(ss, bp - 6))
        goto loc_2986;
    memoryASet(ss, bp + si + 65402, memoryAGet(ss, bp + si + 65402) + 1);
loc_2986: // 023f:0596
    ax = si;
    dx = 0x0003;
    mul(dx);
    di = ax;
    al = memoryAGet(ss, bp + si + 65146);
    dx = di;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    bx += dx;
    memoryASet(es, bx, al);
    di++;
    al = memoryAGet(ss, bp + si + 65274);
    dx = di;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    di++;
    al = memoryAGet(ss, bp + si + 65402);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + di, al);
    si++;
loc_29bb: // 023f:05cb
    if (si >= 0x0080)
        goto loc_29c4;
    goto loc_2935;
loc_29c4: // 023f:05d4
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0080;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_24c6(); // 023f:00d6
    sp += 0x0008;
    sync();
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) - 1);
    goto loc_2927;
loc_29de: // 023f:05ee
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x023f);
    sp += 0x0004;
    memoryASet(ds, 0x8de6, 0x01);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_29f7() // 023f:0607
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0186;
    ax = 0x0180;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x023f);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 6, 0x0000);
    si = 0;
    goto loc_2a36;
loc_2a1a: // 023f:062a
    al = memoryAGet(ds, si + 36740);
    memoryASet(ss, bp + si + 65146, al);
    al = memoryAGet(ds, si + 35931);
    memoryASet(ss, bp + si + 65274, al);
    al = memoryAGet(ds, si + 37010);
    memoryASet(ss, bp + si + 65402, al);
    si++;
loc_2a36: // 023f:0646
    if (si < 0x0080)
        goto loc_2a1a;
loc_2a3c: // 023f:064c
    if (memoryAGet16(ss, bp - 6) == 0x0000)
        goto loc_2a45;
    goto loc_2ae5;
loc_2a45: // 023f:0655
    memoryASet16(ss, bp - 6, 0x0000);
    si = 0;
    goto loc_2ab9;
loc_2a4e: // 023f:065e
    if (memoryAGet(ss, bp + si + 65146) == 0x00)
        goto loc_2a5d;
    memoryASet(ss, bp + si + 65146, memoryAGet(ss, bp + si + 65146) - 1);
    goto loc_2a60;
loc_2a5d: // 023f:066d
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_2a60: // 023f:0670
    if (memoryAGet(ss, bp + si + 65274) == 0x00)
        goto loc_2a6f;
    memoryASet(ss, bp + si + 65274, memoryAGet(ss, bp + si + 65274) - 1);
    goto loc_2a72;
loc_2a6f: // 023f:067f
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_2a72: // 023f:0682
    if (memoryAGet(ss, bp + si + 65402) == 0x00)
        goto loc_2a81;
    memoryASet(ss, bp + si + 65402, memoryAGet(ss, bp + si + 65402) - 1);
    goto loc_2a84;
loc_2a81: // 023f:0691
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_2a84: // 023f:0694
    ax = si;
    dx = 0x0003;
    mul(dx);
    di = ax;
    al = memoryAGet(ss, bp + si + 65146);
    dx = di;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    bx += dx;
    memoryASet(es, bx, al);
    di++;
    al = memoryAGet(ss, bp + si + 65274);
    dx = di;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    di++;
    al = memoryAGet(ss, bp + si + 65402);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + di, al);
    si++;
loc_2ab9: // 023f:06c9
    if (si < 0x0080)
        goto loc_2a4e;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0080;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_24c6(); // 023f:00d6
    sp += 0x0008;
    sync();
    if (memoryAGet16(ss, bp - 6) != 0x0180)
        goto loc_2add;
    goto loc_2a3c;
loc_2add: // 023f:06ed
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_2a3c;
loc_2ae5: // 023f:06f5
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x023f);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2af9() // 023f:0709
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    if (memoryAGet(ds, 0x8de6) != 0x00)
        goto loc_2b81;
    ax = 0x0048;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x023f);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    si = 0;
    goto loc_2b4e;
loc_2b1d: // 023f:072d
    ax = si;
    dx = 0x0003;
    mul(dx);
    di = ax;
    al = memoryAGet(ds, si + 37300);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx + di, al);
    al = memoryAGet(ds, si + 35434);
    dx = di;
    dx++;
    bx += dx;
    memoryASet(es, bx, al);
    al = memoryAGet(ds, si + 36414);
    dx = di;
    dx += 0x0002;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    si++;
loc_2b4e: // 023f:075e
    if (si < 0x0010)
        goto loc_2b1d;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_24c6(); // 023f:00d6
    sync();
    sp += 0x0008;
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0018;
    push(dx);
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_24c6(); // 023f:00d6
    sync();
    sp += 0x0008;
loc_2b81: // 023f:0791
    memoryASet(ds, 0x8de6, 0x01);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2b8c() // 023f:079c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = 0x0180;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x023f);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet(ds, 0x8de6) != 0x00)
        goto loc_2bfa;
    si = 0;
    di = si;
    goto loc_2be0;
loc_2bb2: // 023f:07c2
    al = memoryAGet(ds, di + 37300);
    dx = si;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    bx += dx;
    memoryASet(es, bx, al);
    si++;
    al = memoryAGet(ds, di + 35434);
    dx = si;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    si++;
    al = memoryAGet(ds, di + 36414);
    dx = si;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx, al);
    si++;
    di++;
loc_2be0: // 023f:07f0
    if (di < 0x0080)
        goto loc_2bb2;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0080;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_24c6(); // 023f:00d6
    sync();
    sp += 0x0008;
loc_2bfa: // 023f:080a
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x023f);
    sp += 0x0004;
    memoryASet(ds, 0x8de6, 0x01);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2c13() // 023f:0823
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    memoryASet(ss, bp - 1, 0x00);
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_2c2c;
    push(cs);
    cs = 0x0a34;
    sub_a70c(); // 0a34:03cc
    assert(cs == 0x023f);
    memoryASet(ss, bp - 1, 0x01);
loc_2c2c: // 023f:083c
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    al = memoryAGet(es, bx + 4);
    memoryASet(ds, 0x8f66, al);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_2c7c;
    memoryASet(ds, 0x92e1, 0x05);
    al = memoryAGet(es, bx + 4);
    memoryASet(ds, 0x92e0, al);
loc_2c49: // 023f:0859
    dx = 0x03da;
    in(al, dx);
    if (al & 0x08)
        goto loc_2c49;
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x023f);
    sp += 0x000a;
loc_2c68: // 023f:0878
    dx = 0x03da;
    in(al, dx);
    if (!(al & 0x08))
        goto loc_2c68;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_2c7c;
    push(cs);
    sub_2af9(); // 023f:0709
loc_2c7c: // 023f:088c
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_2ce6;
    ax = 0x8e20;
    dx = ds;
    if (dx != memoryAGet16(ss, bp + 8))
        goto loc_2c95;
    if (ax != memoryAGet16(ss, bp + 6))
        goto loc_2c95;
    goto loc_2db8;
loc_2c95: // 023f:08a5
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    if (memoryAGet(es, bx + 4) != 0x01)
        goto loc_2cb0;
    dx = 0xb800;
    ax = 0;
    push(dx);
    push(ax);
    push(cs);
    cs = 0x0ba1;
    sub_be10(); // 0ba1:0400
    assert(cs == 0x023f);
    sp += 0x0004;
    goto loc_2cbf;
loc_2cb0: // 023f:08c0
    dx = 0xb000;
    ax = 0;
    push(dx);
    push(ax);
    push(cs);
    cs = 0x0ba1;
    sub_be10(); // 0ba1:0400
    assert(cs == 0x023f);
    sp += 0x0004;
loc_2cbf: // 023f:08cf
    al = memoryAGet(ds, 0x8f66);
    cx = 0x0007;
    al <<= cl;
    al += 0x0a;
    memoryASet(ss, bp - 2, al);
loc_2ccd: // 023f:08dd
    dx = 0x03ba;
    in(al, dx);
    if (!(al & 0x80))
        goto loc_2ccd;
    al = memoryAGet(ss, bp - 2);
    dx = 0x03b8;
    out(dx, al);
loc_2cdd: // 023f:08ed
    dx = 0x03ba;
    in(al, dx);
    if (al & 0x80)
        goto loc_2cdd;
loc_2ce6: // 023f:08f6
    if (memoryAGet(ds, 0x8a2c) == 0x00)
        goto loc_2d2d;
    memoryASet(ds, 0x8f66, 0x00);
loc_2cf2: // 023f:0902
    dx = 0x03da;
    in(al, dx);
    if (al & 0x08)
        goto loc_2cf2;
    ax = 0x8bfa;
    dx = ds;
    if (dx != memoryAGet16(ss, bp + 8))
        goto loc_2d0a;
    if (ax == memoryAGet16(ss, bp + 6))
        goto loc_2d24;
loc_2d0a: // 023f:091a
    ax = 0;
    push(ax);
    ax = 0xb800;
    push(ax);
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    push(memoryAGet16(es, bx));
    ax = memoryAGet16(es, bx + 2);
    push(ax);
    push(cs);
    cs = 0x0ba1;
    sub_bbd5(); // 0ba1:01c5
    assert(cs == 0x023f);
    sp += 0x0008;
loc_2d24: // 023f:0934
    dx = 0x03da;
    in(al, dx);
    if (!(al & 0x08))
        goto loc_2d24;
loc_2d2d: // 023f:093d
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_2d66;
    memoryASet(ds, 0x8f66, 0x00);
    ax = 0x8bfa;
    dx = ds;
    if (dx != memoryAGet16(ss, bp + 8))
        goto loc_2d48;
    if (ax == memoryAGet16(ss, bp + 6))
        goto loc_2d62;
loc_2d48: // 023f:0958
    ax = 0;
    push(ax);
    ax = 0xa000;
    push(ax);
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    push(memoryAGet16(es, bx));
    ax = memoryAGet16(es, bx + 2);
    push(ax);
    push(cs);
    cs = 0x0e97;
    sub_edb1(); // 0e97:0441
    assert(cs == 0x023f);
    sp += 0x0008;
loc_2d62: // 023f:0972
    push(cs);
    sub_2b8c(); // 023f:079c
loc_2d66: // 023f:0976
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_2dad;
    memoryASet(ds, 0x8f66, 0x00);
loc_2d72: // 023f:0982
    dx = 0x03da;
    in(al, dx);
    if (al & 0x08)
        goto loc_2d72;
    ax = 0x8bfa;
    dx = ds;
    if (dx != memoryAGet16(ss, bp + 8))
        goto loc_2d8a;
    if (ax == memoryAGet16(ss, bp + 6))
        goto loc_2da4;
loc_2d8a: // 023f:099a
    ax = 0;
    push(ax);
    ax = 0xb800;
    push(ax);
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    push(memoryAGet16(es, bx));
    ax = memoryAGet16(es, bx + 2);
    push(ax);
    push(cs);
    cs = 0x0e11;
    sub_e20c(); // 0e11:00fc
    assert(cs == 0x023f);
    sp += 0x0008;
loc_2da4: // 023f:09b4
    dx = 0x03da;
    in(al, dx);
    if (!(al & 0x08))
        goto loc_2da4;
loc_2dad: // 023f:09bd
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_2db8;
    push(cs);
    cs = 0x0a34;
    sub_a6c3(); // 0a34:0383
    assert(cs == 0x023f);
loc_2db8: // 023f:09c8
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2dbc() // 023f:09cc
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_2c13(); // 023f:0823
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2dcd() // 023f:09dd
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 10);
    if (si <= 0x0007)
        goto loc_2dea;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_2de7;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_2dea;
loc_2de7: // 023f:09f7
    si += 0x0008;
loc_2dea: // 023f:09fa
    memoryASet(ds, 0x92e1, 0x10);
    memoryASet(ds, 0x92e0, 0x00);
    al = memoryAGet(ss, bp + 8);
    memoryASet(ds, 0x92e2, al);
    ax = si;
    memoryASet(ds, 0x92e3, al);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x023f);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2e17() // 023f:0a27
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    memoryASet(ss, bp - 1, 0x00);
    if (memoryAGet(ss, bp + 14) <= 0x01)
        goto loc_2e30;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    al = memoryAGet(es, bx + 4);
    memoryASet(ds, 0x8f66, al);
loc_2e30: // 023f:0a40
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_2e5e;
    ax = 0x8bfa;
    dx = ds;
    if (dx != memoryAGet16(ss, bp + 8))
        goto loc_2e46;
    if (ax == memoryAGet16(ss, bp + 6))
        goto loc_2e55;
loc_2e46: // 023f:0a56
    ax = 0x8bfa;
    dx = ds;
    if (dx != memoryAGet16(ss, bp + 12))
        goto loc_2e5e;
    if (ax != memoryAGet16(ss, bp + 10))
        goto loc_2e5e;
loc_2e55: // 023f:0a65
    push(cs);
    cs = 0x0a34;
    sub_a70c(); // 0a34:03cc
    assert(cs == 0x023f);
    memoryASet(ss, bp - 1, 0x01);
loc_2e5e: // 023f:0a6e
    if (memoryAGet(ss, bp + 14) != 0x07)
        goto loc_2e7b;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    cs = 0x023f;
    sub_4679(); // 023f:2289
    assert(cs == 0x023f);
    sp += 0x0008;
    goto loc_2f1b;
loc_2e7b: // 023f:0a8b
    if (memoryAGet(ss, bp + 14) != 0x02)
        goto loc_2e8c;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_2e8c;
    push(cs);
    sub_26db(); // 023f:02eb
loc_2e8c: // 023f:0a9c
    if (memoryAGet(ds, 0x8f67) != 0x00)
        goto loc_2eb8;
    if (memoryAGet(ss, bp + 14) != 0x02)
        goto loc_2eb8;
    memoryASet(ss, bp - 2, 0x00);
    goto loc_2eb2;
loc_2e9f: // 023f:0aaf
    ax = 0;
    push(ax);
    al = memoryAGet(ss, bp - 2);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_2dcd(); // 023f:09dd
    sp += 0x0004;
    memoryASet(ss, bp - 2, memoryAGet(ss, bp - 2) + 1);
loc_2eb2: // 023f:0ac2
    if (memoryAGet(ss, bp - 2) < 0x10)
        goto loc_2e9f;
loc_2eb8: // 023f:0ac8
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    ax = memoryAGet16(es, bx + 2);
    push(ax);
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    ax = memoryAGet16(es, bx + 2);
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d472(); // 0cc2:0852
    assert(cs == 0x023f);
    sp += 0x0004;
    if (memoryAGet(ds, 0x8f67) != 0x00)
        goto loc_2f0a;
    if (memoryAGet(ss, bp + 14) != 0x02)
        goto loc_2f0a;
    memoryASet(ss, bp - 2, 0x00);
    goto loc_2f04;
loc_2ee3: // 023f:0af3
    al = memoryAGet(ss, bp - 2);
    ah = 0x00;
    bx = memoryAGet16(ds, 0x8bb0);
    es = memoryAGet16(ds, 0x8bb0 + 2);
    bx += ax;
    al = memoryAGet(es, bx);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 2);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_2dcd(); // 023f:09dd
    sp += 0x0004;
    memoryASet(ss, bp - 2, memoryAGet(ss, bp - 2) + 1);
loc_2f04: // 023f:0b14
    if (memoryAGet(ss, bp - 2) < 0x10)
        goto loc_2ee3;
loc_2f0a: // 023f:0b1a
    if (memoryAGet(ss, bp + 14) != 0x02)
        goto loc_2f1b;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_2f1b;
    push(cs);
    sub_2518(); // 023f:0128
loc_2f1b: // 023f:0b2b
    if (memoryAGet(ss, bp + 14) <= 0x00)
        goto loc_2f32;
    if (memoryAGet(ss, bp + 14) >= 0x07)
        goto loc_2f32;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_2f32;
    push(cs);
    sub_2af9(); // 023f:0709
loc_2f32: // 023f:0b42
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_2f3d;
    push(cs);
    cs = 0x0a34;
    sub_a6c3(); // 0a34:0383
    assert(cs == 0x023f);
loc_2f3d: // 023f:0b4d
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_2f41() // 023f:0b51
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0010;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0xf8c0);
    di = 0;
    goto loc_2f89;
loc_2f61: // 023f:0b71
    si = 0;
    goto loc_2f74;
loc_2f65: // 023f:0b75
    al = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx + si, al);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet(es, bx + si, al);
    si++;
loc_2f74: // 023f:0b84
    if (si < 0x0140)
        goto loc_2f65;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0280);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0280);
    push(cs);
    sub_2445(); // 023f:0055
    di++;
loc_2f89: // 023f:0b99
    if (di < 0x0064)
        goto loc_2f61;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0xf8c0);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0xf8c0);
    push(cs);
    sub_2b8c(); // 023f:079c
    di = 0;
    goto loc_2ffa;
loc_2fbe: // 023f:0bce
    si = 0;
    goto loc_2fdb;
loc_2fc2: // 023f:0bd2
    bx = memoryAGet16(ss, bp - 16);
    es = memoryAGet16(ss, bp - 16 + 2);
    al = memoryAGet(es, bx + si);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet(es, bx + si, al);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    al = memoryAGet(es, bx + si);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx + si, al);
    si++;
loc_2fdb: // 023f:0beb
    if (si < 0x0140)
        goto loc_2fc2;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 0x0280);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - 0x0280);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0280);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0280);
    push(cs);
    sub_2445(); // 023f:0055
    di++;
loc_2ffa: // 023f:0c0a
    if (di < 0x0064)
        goto loc_2fbe;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3005() // 023f:0c15
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet(ss, bp - 13, 0x00);
    if (memoryAGet(ss, bp + 18) <= 0x01)
        goto loc_3039;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    al = memoryAGet(es, bx + 4);
    memoryASet(ds, 0x8f66, al);
loc_3039: // 023f:0c49
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_3067;
    ax = 0x8bfa;
    dx = ds;
    if (dx != memoryAGet16(ss, bp + 12))
        goto loc_304f;
    if (ax == memoryAGet16(ss, bp + 10))
        goto loc_305e;
loc_304f: // 023f:0c5f
    ax = 0x8bfa;
    dx = ds;
    if (dx != memoryAGet16(ss, bp + 16))
        goto loc_3067;
    if (ax != memoryAGet16(ss, bp + 14))
        goto loc_3067;
loc_305e: // 023f:0c6e
    push(cs);
    cs = 0x0a34;
    sub_a70c(); // 0a34:03cc
    assert(cs == 0x023f);
    memoryASet(ss, bp - 13, 0x01);
loc_3067: // 023f:0c77
    if (memoryAGet(ss, bp + 18) != 0x07)
        goto loc_3080;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_2f41(); // 023f:0b51
    sp += 0x0008;
loc_3080: // 023f:0c90
    if (memoryAGet(ss, bp + 18) != 0x02)
        goto loc_308a;
    push(cs);
    sub_29f7(); // 023f:0607
loc_308a: // 023f:0c9a
    if (memoryAGet(ss, bp + 18) == 0x07)
        goto loc_30b0;
    si = memoryAGet16(ss, bp - 6);
    di = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 10, ax);
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(di);
    push(si);
    push(cs);
    cs = 0x0e97;
    sub_edb1(); // 0e97:0441
    assert(cs == 0x023f);
    sp += 0x0008;
loc_30b0: // 023f:0cc0
    if (memoryAGet(ss, bp + 18) != 0x02)
        goto loc_30ba;
    push(cs);
    sub_28ec(); // 023f:04fc
loc_30ba: // 023f:0cca
    if (memoryAGet(ss, bp + 18) <= 0x01)
        goto loc_30c4;
    push(cs);
    sub_2b8c(); // 023f:079c
loc_30c4: // 023f:0cd4
    if (memoryAGet(ss, bp - 13) == 0x00)
        goto loc_30cf;
    push(cs);
    cs = 0x0a34;
    sub_a6c3(); // 0a34:0383
    assert(cs == 0x023f);
loc_30cf: // 023f:0cdf
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_30d5() // 023f:0ce5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_30fe;
loc_30e0: // 023f:0cf0
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    al = memoryAGet(es, bx);
    dl = memoryAGet(ss, bp - 1);
    dh = 0x00;
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    bx += dx;
    memoryASet(es, bx + 5, al);
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) + 1);
loc_30fe: // 023f:0d0e
    if (memoryAGet(ss, bp - 1) < 0x10)
        goto loc_30e0;
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3108() // 023f:0d18
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x001a;
    di = memoryAGet16(ss, bp + 12);
    si = memoryAGet16(ss, bp + 10);
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    bx = 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp + 18, dl);
    if ((short)si >= 0)
        goto loc_312a;
    si = 0;
loc_312a: // 023f:0d3a
    if ((short)di >= 0)
        goto loc_3130;
    di = 0;
loc_3130: // 023f:0d40
    if ((short)si <= (short)0x013f)
        goto loc_3139;
    si = 0x013f;
loc_3139: // 023f:0d49
    if ((short)di <= (short)0x00c7)
        goto loc_3142;
    di = 0x00c7;
loc_3142: // 023f:0d52
    ax = si;
    ax += memoryAGet16(ss, bp + 14);
    if ((short)ax <= (short)0x013f)
        goto loc_3154;
    ax = 0x013f;
    ax -= si;
    memoryASet16(ss, bp + 14, ax);
loc_3154: // 023f:0d64
    ax = di;
    ax += memoryAGet16(ss, bp + 16);
    if ((short)ax <= (short)0x00c7)
        goto loc_3166;
    ax = 0x00c7;
    ax -= di;
    memoryASet16(ss, bp + 16, ax);
loc_3166: // 023f:0d76
    ax = si;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp - 21, dl);
    if (memoryAGet(ss, bp - 21) == 0x00)
        goto loc_3188;
    al = memoryAGet(ss, bp - 21);
    ah = 0x00;
    cx = ax;
    ax = 0x00ff;
    ax = sar(ax, cl);
    memoryASet(ss, bp - 20, al);
    goto loc_318c;
loc_3188: // 023f:0d98
    memoryASet(ss, bp - 20, 0x00);
loc_318c: // 023f:0d9c
    ax = si;
    ax += memoryAGet16(ss, bp + 14);
    ax++;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp - 21, dl);
    if (memoryAGet(ss, bp - 21) == 0x00)
        goto loc_31b3;
    cx = bx;
    al = memoryAGet(ss, bp - 21);
    ah = 0x00;
    cx -= ax;
    al = 0xff;
    al <<= cl;
    memoryASet(ss, bp - 19, al);
    goto loc_31b7;
loc_31b3: // 023f:0dc3
    memoryASet(ss, bp - 19, 0x00);
loc_31b7: // 023f:0dc7
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    memoryASet16(ss, bp - 14, ax);
    ax = si;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 18, ax);
    ax = si;
    ax += memoryAGet16(ss, bp + 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 16, ax);
    ax -= memoryAGet16(ss, bp - 18);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ss, bp - 20) == 0x00)
        goto loc_31e4;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_31e4: // 023f:0df4
    if (memoryAGet(ss, bp - 19) == 0x00)
        goto loc_31ed;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_31ed: // 023f:0dfd
    if ((short)memoryAGet16(ss, bp - 2) >= (short)0x0000)
        goto loc_3202;
    memoryASet16(ss, bp - 2, 0x0000);
    al = memoryAGet(ss, bp - 19);
    memoryASet(ss, bp - 20, memoryAGet(ss, bp - 20) & al);
    memoryASet(ss, bp - 19, 0x00);
loc_3202: // 023f:0e12
    al = memoryAGet(ss, bp - 19);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 20);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 10, ax);
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    ax &= 0x000f;
    memoryASet16(ss, bp - 12, ax);
    ax = di;
    dx = 0x0028;
    mul(dx);
    ax += memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp + 20);
    es = memoryAGet16(ss, bp + 20 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    bx += ax;
    memoryASet16(ss, bp - 26, bx);
    ax = memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 8, ax);
    ax = bx;
    memoryASet16(ss, bp - 6, ax);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0cc2;
    sub_d5a0(); // 0cc2:0980
    assert(cs == 0x023f);
    sp += 0x000c;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3268() // 023f:0e78
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0022;
    si = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 12);
    if ((short)memoryAGet16(ss, bp + 10) >= (short)0x0000)
        goto loc_327f;
    goto loc_3442;
loc_327f: // 023f:0e8f
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax += memoryAGet16(ss, bp + 10);
    if (ax < 0x0140)
        goto loc_32a1;
    goto loc_3442;
loc_32a1: // 023f:0eb1
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    if (ax <= di)
        goto loc_32b9;
    goto loc_3442;
loc_32b9: // 023f:0ec9
    if ((short)di < (short)0x00c8)
        goto loc_32c2;
    goto loc_3442;
loc_32c2: // 023f:0ed2
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    di -= ax;
    if ((short)di >= 0)
        goto loc_32db;
    di = 0;
loc_32db: // 023f:0eeb
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    al = memoryAGet(es, bx + 21);
    ah = 0x00;
    memoryASet16(ss, bp - 12, ax);
    al = memoryAGet(es, bx + 22);
    ah = 0x00;
    memoryASet16(ss, bp - 10, ax);
    if (memoryAGet(es, bx + 23) != 0x00)
        goto loc_332d;
    push(memoryAGet16(ss, bp + 18));
    push(bx);
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    ax--;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax--;
    push(ax);
    push(di);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x023f);
    sp += 0x000e;
loc_332d: // 023f:0f3d
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 18, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 20, ax);
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp - 26, dl);
    if (memoryAGet(ss, bp - 26) != 0x00)
        goto loc_336d;
    memoryASet(ss, bp - 25, 0x00);
    goto loc_3375;
loc_336d: // 023f:0f7d
    al = 0x08;
    al -= memoryAGet(ss, bp - 26);
    memoryASet(ss, bp - 25, al);
loc_3375: // 023f:0f85
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 26);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 16, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    ax = memoryAGet16(ss, bp - 32);
    memoryASet16(ss, bp - 6, ax);
    ax = bx;
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    ax = di;
    dx = 0x0028;
    mul(dx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    bx = cx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 14, dx);
    bx = memoryAGet16(ss, bp - 30);
    bx += dx;
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 2, ax);
    ax = bx;
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    dx = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(es, bx);
    if ((short)dx > (short)memoryAGet16(ss, bp - 22))
        goto loc_3432;
    if ((short)dx < (short)memoryAGet16(ss, bp - 22))
        goto loc_33f9;
    if (ax >= memoryAGet16(ss, bp - 24))
        goto loc_3432;
loc_33f9: // 023f:1009
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    dx = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(es, bx);
    ax += 0x2000;
    if ((short)dx < (short)memoryAGet16(ss, bp - 22))
        goto loc_3432;
    if ((short)dx > (short)memoryAGet16(ss, bp - 22))
        goto loc_3412;
    if (ax <= memoryAGet16(ss, bp - 24))
        goto loc_3432;
loc_3412: // 023f:1022
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0cc2;
    sub_d63e(); // 0cc2:0a1e
    assert(cs == 0x023f);
    sp += 0x0010;
loc_3432: // 023f:1042
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
loc_3442: // 023f:1052
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3448() // 023f:1058
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x001c;
    if ((short)memoryAGet16(ss, bp + 10) < (short)0x0140)
        goto loc_345a;
    goto loc_37c9;
loc_345a: // 023f:106a
    ax = memoryAGet16(ds, 0x0084);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp + 12))
        goto loc_3466;
    goto loc_37c9;
loc_3466: // 023f:1076
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    tx = ax;
    ax += memoryAGet16(ss, bp + 10);
    if ((short)tx + (short)memoryAGet16(ss, bp + 10) > 0)
        goto loc_347f;
    goto loc_37c9;
loc_347f: // 023f:108f
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    tx = ax;
    ax += memoryAGet16(ss, bp + 12);
    if ((short)tx + (short)memoryAGet16(ss, bp + 12) > 0)
        goto loc_3499;
    goto loc_37c9;
loc_3499: // 023f:10a9
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 26, es);
    memoryASet16(ss, bp - 28, bx);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 20, ax);
    if ((short)memoryAGet16(ss, bp + 12) >= (short)0x0000)
        goto loc_350f;
    ax = memoryAGet16(ss, bp + 12);
    if ((short)ax >= 0)
        goto loc_34ea;
    ax = -ax;
loc_34ea: // 023f:10fa
    mul(memoryAGet16(ss, bp - 4));
    memoryASet16(ss, bp - 6, ax);
    ax <<= 1;
    ax <<= 1;
    ax += memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 28);
    es = memoryAGet16(ss, bp - 28 + 2);
    bx += ax;
    memoryASet16(ss, bp - 28, bx);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + ax);
    memoryASet16(ss, bp + 12, 0x0000);
    goto loc_3537;
loc_350f: // 023f:111f
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    ax += memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ds, 0x0084);
    dx++;
    if (ax <= dx)
        goto loc_3537;
    ax = memoryAGet16(ds, 0x0084);
    ax++;
    ax -= memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 20, ax);
loc_3537: // 023f:1147
    bx = memoryAGet16(ss, bp + 18);
    es = memoryAGet16(ss, bp + 18 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    if ((short)memoryAGet16(ss, bp + 10) < (short)0x0000)
        goto loc_354c;
    goto loc_3629;
loc_354c: // 023f:115c
    ax = memoryAGet16(ss, bp + 10);
    if ((short)ax >= 0)
        goto loc_3555;
    ax = -ax;
loc_3555: // 023f:1165
    memoryASet16(ss, bp - 2, ax);
    ax &= 0x0007;
    memoryASet16(ss, bp - 10, ax);
    if (ax)
        goto loc_3566;
    si = 0;
    goto loc_356c;
loc_3566: // 023f:1176
    si = 0x0008;
    si -= memoryAGet16(ss, bp - 10);
loc_356c: // 023f:117c
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0008;
    ax <<= cl;
    ax += si;
    memoryASet16(ss, bp - 8, ax);
    di = memoryAGet16(ss, bp - 2);
    di >>= 1;
    di >>= 1;
    di >>= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - di);
    if (!si)
        goto loc_358c;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 1);
loc_358c: // 023f:119c
    ax = di;
    ax <<= 1;
    ax <<= 1;
    ax += di;
    di = ax;
    bx = memoryAGet16(ss, bp - 28);
    es = memoryAGet16(ss, bp - 28 + 2);
    bx += di;
    memoryASet16(ss, bp - 28, bx);
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0028;
    mul(dx);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    bx += ax;
    memoryASet16(ss, bp - 24, bx);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 18, ax);
    ax = bx;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 14, ax);
    if (!si)
        goto loc_35ff;
    push(memoryAGet16(ss, bp - 12));
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0008;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0005;
    mul(dx);
    ax += di;
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d711(); // 0cc2:0af1
    assert(cs == 0x023f);
    sp += 0x0010;
    di += 0x0005;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 0x0005);
loc_35ff: // 023f:120f
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_3608;
    goto loc_37c9;
loc_3608: // 023f:1218
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 8));
    push(di);
    push(cs);
    cs = 0x0cc2;
    sub_d711(); // 0cc2:0af1
    assert(cs == 0x023f);
    sp += 0x0010;
    goto loc_37c9;
loc_3629: // 023f:1239
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax += memoryAGet16(ss, bp + 10);
    if (ax > 0x0140)
        goto loc_3645;
    goto loc_372e;
loc_3645: // 023f:1255
    si = memoryAGet16(ss, bp + 10);
    si &= 0x0007;
    if (si)
        goto loc_3657;
    memoryASet16(ss, bp - 10, 0x0000);
    goto loc_365f;
loc_3657: // 023f:1267
    ax = 0x0008;
    ax -= si;
    memoryASet16(ss, bp - 10, ax);
loc_365f: // 023f:126f
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0008;
    ax <<= cl;
    ax += si;
    memoryASet16(ss, bp - 8, ax);
    di = memoryAGet16(ss, bp - 4);
    ax = 0x0140;
    ax -= memoryAGet16(ss, bp + 10);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    di -= ax;
    ax = 0x0140;
    ax -= memoryAGet16(ss, bp + 10);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    memoryASet16(ss, bp - 4, ax);
    ax = di;
    ax <<= 1;
    ax <<= 1;
    ax += di;
    di = ax;
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0028;
    mul(dx);
    dx = memoryAGet16(ss, bp + 10);
    dx = sar(dx, 1);
    dx = sar(dx, 1);
    dx = sar(dx, 1);
    ax += dx;
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    bx += ax;
    memoryASet16(ss, bp - 24, bx);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 18, ax);
    ax = bx;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 14, ax);
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_36ed;
    push(memoryAGet16(ss, bp - 12));
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 8));
    push(di);
    push(cs);
    cs = 0x0cc2;
    sub_d711(); // 0cc2:0af1
    assert(cs == 0x023f);
    sp += 0x0010;
loc_36ed: // 023f:12fd
    if (si)
        goto loc_36f4;
    goto loc_37c9;
loc_36f4: // 023f:1304
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0005;
    mul(dx);
    di += ax;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0005;
    mul(dx);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + ax);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + ax);
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    ax = 0;
    push(ax);
    push(si);
    push(di);
    push(cs);
    cs = 0x0cc2;
    sub_d711(); // 0cc2:0af1
    assert(cs == 0x023f);
    sp += 0x0010;
    goto loc_37c9;
loc_372e: // 023f:133e
    si = memoryAGet16(ss, bp + 10);
    si &= 0x0007;
    if (si)
        goto loc_3740;
    memoryASet16(ss, bp - 10, 0x0000);
    goto loc_3748;
loc_3740: // 023f:1350
    ax = 0x0008;
    ax -= si;
    memoryASet16(ss, bp - 10, ax);
loc_3748: // 023f:1358
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0008;
    ax <<= cl;
    ax += si;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0028;
    mul(dx);
    dx = memoryAGet16(ss, bp + 10);
    dx = sar(dx, 1);
    dx = sar(dx, 1);
    dx = sar(dx, 1);
    ax += dx;
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    bx += ax;
    memoryASet16(ss, bp - 24, bx);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 18, ax);
    ax = bx;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 14, ax);
    if (si)
        goto loc_37ae;
    push(memoryAGet16(ss, bp - 12));
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 8));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d711(); // 0cc2:0af1
    assert(cs == 0x023f);
    sp += 0x0010;
    goto loc_37c9;
loc_37ae: // 023f:13be
    push(si);
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(cs);
    cs = 0x0cc2;
    sub_da6c(); // 0cc2:0e4c
    assert(cs == 0x023f);
    sp += 0x000e;
loc_37c9: // 023f:13d9
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3d09() // 023f:1919
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 6);
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet(es, bx + 21, al);
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3d18() // 023f:1928
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 6);
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet(es, bx + 22, al);
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3d27() // 023f:1937
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    if (memoryAGet(ss, bp + 6) != 0x00)
        goto loc_3d3a;
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet(es, bx + 23, 0x00);
    goto loc_3d42;
loc_3d3a: // 023f:194a
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet(es, bx + 23, 0x01);
loc_3d42: // 023f:1952
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3d44() // 023f:1954
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 6);
    memoryASet(ds, 0x92e3, al);
    al = memoryAGet(ss, bp + 8);
    memoryASet(ds, 0x92e2, al);
    memoryASet(ds, 0x92e1, 0x0b);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x023f);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3d6f() // 023f:197f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    if (memoryAGet(ss, bp + 6) < 0x00)
        goto loc_3d93;
    if (memoryAGet(ss, bp + 6) > 0x0f)
        goto loc_3d93;
    al = memoryAGet(ss, bp + 8);
    cx = 0x0004;
    al <<= cl;
    al += memoryAGet(ss, bp + 6);
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_3d44(); // 023f:1954
    sp = bp;
loc_3d93: // 023f:19a3
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3d95() // 023f:19a5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    al = memoryAGet(es, bx + 5);
    memoryASet(ss, bp - 3, al);
    if (memoryAGet(ss, bp - 3) >= 0x00)
        goto loc_3dae;
    goto loc_3e24;
loc_3dae: // 023f:19be
    if (memoryAGet(ss, bp - 3) > 0x05)
        goto loc_3e24;
    al = memoryAGet(es, bx + 6);
    memoryASet(ss, bp - 2, al);
    al = memoryAGet(ss, bp - 3);
    ah = 0x00;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp - 1, dl);
    if (memoryAGet(ss, bp - 3) <= 0x03)
        goto loc_3de3;
    if (memoryAGet(ds, 0x91af) == 0x05)
        goto loc_3e17;
    ax = 0x0005;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x023f);
    sp++;
    sp++;
    goto loc_3e17;
loc_3de3: // 023f:19f3
    if (memoryAGet(ds, 0x91af) == 0x04)
        goto loc_3df5;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x023f);
    sp++;
    sp++;
loc_3df5: // 023f:1a05
    if (memoryAGet(ss, bp - 3) >= 0x02)
        goto loc_3e0a;
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_3d44(); // 023f:1954
    sp += 0x0004;
    goto loc_3e17;
loc_3e0a: // 023f:1a1a
    al = 0x01;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_3d44(); // 023f:1954
    sp += 0x0004;
loc_3e17: // 023f:1a27
    push(memoryAGet16(ss, bp - 1));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_3d6f(); // 023f:197f
    sp += 0x0004;
loc_3e24: // 023f:1a34
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3e28() // 023f:1a38
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    if (memoryAGet(ss, bp + 6) < 0x00)
        goto loc_3e57;
    al = memoryAGet(ss, bp + 6);
    memoryASet(ds, 0x91af, al);
    memoryASet(ds, 0x92e1, 0x00);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ds, 0x92e0, al);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x023f);
    sp = bp;
loc_3e57: // 023f:1a67
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_3e59() // 023f:1a69
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0010;
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_3e7e;
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_2e17(); // 023f:0a27
    sp += 0x000a;
loc_3e7e: // 023f:1a8e
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_3e9b;
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_3005(); // 023f:0c15
    sp += 0x000a;
loc_3e9b: // 023f:1aab
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_3eb3;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_3eb3;
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_3eb3;
    goto loc_4026;
loc_3eb3: // 023f:1ac3
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 12, es);
    memoryASet16(ss, bp - 14, bx);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
    di = memoryAGet16(ss, bp - 12);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 4, ax);
    ax = bx;
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ss, bp - 15, 0x00);
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_3f0d;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    al = memoryAGet(es, bx + 4);
    if (al == memoryAGet(ds, 0x8f66))
        goto loc_3f04;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    al = memoryAGet(es, bx + 4);
    if (al != memoryAGet(ds, 0x8f66))
        goto loc_3f0d;
loc_3f04: // 023f:1b14
    push(cs);
    cs = 0x0a34;
    sub_a70c(); // 0a34:03cc
    assert(cs == 0x023f);
    memoryASet(ss, bp - 15, 0x01);
loc_3f0d: // 023f:1b1d
    if (memoryAGet(ss, bp + 18) <= 0x01)
        goto loc_3f60;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    al = memoryAGet(es, bx + 4);
    memoryASet(ds, 0x8f66, al);
    push(memoryAGet16(ds, 0x8bb2));
    push(memoryAGet16(ds, 0x8bb0));
    push(memoryAGet16(ss, bp + 16));
    push(bx);
    push(cs);
    sub_30d5(); // 023f:0ce5
    sp += 0x0008;
    if (memoryAGet(ds, 0x8a2c) == 0x00)
        goto loc_3f44;
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(cs);
    sub_3d95(); // 023f:19a5
    sp += 0x0004;
loc_3f44: // 023f:1b54
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_3f60;
    si = 0;
    goto loc_3f5b;
loc_3f4f: // 023f:1b5f
    ax = 0;
    push(ax);
    push(si);
    push(cs);
    sub_2dcd(); // 023f:09dd
    sp += 0x0004;
    si++;
loc_3f5b: // 023f:1b6b
    if (si < 0x0010)
        goto loc_3f4f;
loc_3f60: // 023f:1b70
    if (memoryAGet(ss, bp + 18) != 0x07)
        goto loc_3f7d;
    if (memoryAGet(ds, 0x8a2c) == 0x00)
        goto loc_3f7d;
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x023f;
    sub_44db(); // 023f:20eb
    assert(cs == 0x023f);
    sp += 0x0004;
    goto loc_3fcf;
loc_3f7d: // 023f:1b8d
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_3f8b;
    if (memoryAGet(ds, 0x8a2c) == 0x00)
        goto loc_3f9d;
loc_3f8b: // 023f:1b9b
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(di);
    push(cs);
    cs = 0x0ba1;
    sub_bbd5(); // 0ba1:01c5
    assert(cs == 0x023f);
    sp += 0x0008;
loc_3f9d: // 023f:1bad
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_3fb6;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(di);
    push(cs);
    cs = 0x0e11;
    sub_e20c(); // 0e11:00fc
    assert(cs == 0x023f);
    sp += 0x0008;
loc_3fb6: // 023f:1bc6
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_3fcf;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(di);
    push(cs);
    cs = 0x0e97;
    sub_edb1(); // 0e97:0441
    assert(cs == 0x023f);
    sp += 0x0008;
loc_3fcf: // 023f:1bdf
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_3ff2;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    al = memoryAGet(es, bx + 4);
    if (al != memoryAGet(ds, 0x8f66))
        goto loc_3ff2;
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    push(cs);
    cs = 0x0ba1;
    sub_be10(); // 0ba1:0400
    assert(cs == 0x023f);
    sp += 0x0004;
loc_3ff2: // 023f:1c02
    if (memoryAGet(ss, bp + 18) <= 0x01)
        goto loc_401b;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_401b;
    si = 0;
    goto loc_4016;
loc_4003: // 023f:1c13
    bx = memoryAGet16(ds, 0x8bb0);
    es = memoryAGet16(ds, 0x8bb0 + 2);
    al = memoryAGet(es, bx + si);
    ah = 0x00;
    push(ax);
    push(si);
    push(cs);
    sub_2dcd(); // 023f:09dd
    sp += 0x0004;
    si++;
loc_4016: // 023f:1c26
    if (si < 0x0010)
        goto loc_4003;
loc_401b: // 023f:1c2b
    if (memoryAGet(ss, bp - 15) != 0x01)
        goto loc_4026;
    push(cs);
    cs = 0x0a34;
    sub_a6c3(); // 0a34:0383
    assert(cs == 0x023f);
loc_4026: // 023f:1c36
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_402c() // 023f:1c3c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_4059;
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    ax = memoryAGet16(es, bx + 2);
    push(ax);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    bx = 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    push(dx);
    push(cs);
    cs = 0x0cc2;
    sub_d539(); // 0cc2:0919
    assert(cs == 0x023f);
    sp += 0x0004;
    goto loc_4124;
loc_4059: // 023f:1c69
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    di = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 2, ax);
    si = 0;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_4076;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_409e;
loc_4076: // 023f:1c86
    if (memoryAGet(ss, bp + 10) != 0x01)
        goto loc_407f;
    si = 0x5555;
loc_407f: // 023f:1c8f
    if (memoryAGet(ss, bp + 10) != 0x02)
        goto loc_4088;
    si = 0xaaaa;
loc_4088: // 023f:1c98
    if (memoryAGet(ss, bp + 10) != 0x03)
        goto loc_4091;
    si = 0xffff;
loc_4091: // 023f:1ca1
    push(memoryAGet16(ss, bp - 2));
    push(di);
    push(si);
    push(cs);
    cs = 0x0ba1;
    sub_bb20(); // 0ba1:0110
    assert(cs == 0x023f);
    sp += 0x0006;
loc_409e: // 023f:1cae
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_40da;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    si = ax;
    si &= 0x000f;
    ax = si;
    cx = 0x000c;
    ax <<= cl;
    dx = si;
    cx = 0x0008;
    dx <<= cl;
    ax |= dx;
    dx = si;
    cx = 0x0004;
    dx <<= cl;
    ax |= dx;
    ax |= si;
    si = ax;
    push(memoryAGet16(ss, bp - 2));
    push(di);
    push(si);
    push(cs);
    cs = 0x0e11;
    sub_e15f(); // 0e11:004f
    assert(cs == 0x023f);
    sp += 0x0006;
loc_40da: // 023f:1cea
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_4101;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    si = ax;
    cx = 0x0008;
    si <<= cl;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    si += ax;
    push(memoryAGet16(ss, bp - 2));
    push(di);
    push(si);
    push(cs);
    cs = 0x0e97;
    sub_ec4a(); // 0e97:02da
    assert(cs == 0x023f);
    sp += 0x0006;
loc_4101: // 023f:1d11
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_4124;
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    al = memoryAGet(es, bx + 4);
    if (al != memoryAGet(ds, 0x8f66))
        goto loc_4124;
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    push(cs);
    cs = 0x0ba1;
    sub_be10(); // 0ba1:0400
    assert(cs == 0x023f);
    sp += 0x0004;
loc_4124: // 023f:1d34
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_412a() // 023f:1d3a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x001e;
    si = memoryAGet16(ss, bp + 10);
    if ((short)si >= 0)
        goto loc_413b;
    si = 0;
loc_413b: // 023f:1d4b
    if ((short)si <= (short)0x013f)
        goto loc_4144;
    si = 0x013f;
loc_4144: // 023f:1d54
    if ((short)memoryAGet16(ss, bp + 12) >= (short)0x0000)
        goto loc_414f;
    memoryASet16(ss, bp + 12, 0x0000);
loc_414f: // 023f:1d5f
    ax = memoryAGet16(ss, bp + 12);
    if ((short)ax <= (short)memoryAGet16(ds, 0x0084))
        goto loc_415b;
    goto loc_44d5;
loc_415b: // 023f:1d6b
    if ((short)memoryAGet16(ss, bp + 14) >= (short)0x0000)
        goto loc_4166;
    memoryASet16(ss, bp + 14, 0x0000);
loc_4166: // 023f:1d76
    if ((short)memoryAGet16(ss, bp + 16) >= (short)0x0000)
        goto loc_4171;
    memoryASet16(ss, bp + 16, 0x0000);
loc_4171: // 023f:1d81
    ax = si;
    ax += memoryAGet16(ss, bp + 14);
    if ((short)ax <= (short)0x013f)
        goto loc_4183;
    ax = 0x013f;
    ax -= si;
    memoryASet16(ss, bp + 14, ax);
loc_4183: // 023f:1d93
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp + 16);
    if ((short)ax <= (short)memoryAGet16(ds, 0x0084))
        goto loc_4198;
    ax = memoryAGet16(ds, 0x0084);
    ax -= memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp + 16, ax);
loc_4198: // 023f:1da8
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_41bc;
    push(memoryAGet16(ss, bp + 22));
    push(memoryAGet16(ss, bp + 20));
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(si);
    push(cs);
    sub_3108(); // 023f:0d18
    sp += 0x000e;
loc_41bc: // 023f:1dcc
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_41c6;
    goto loc_42f9;
loc_41c6: // 023f:1dd6
    memoryASet(ss, bp + 18, memoryAGet(ss, bp + 18) & 0x0f);
    bx = memoryAGet16(ss, bp + 20);
    es = memoryAGet16(ss, bp + 20 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    ax = si;
    al &= 0x01;
    memoryASet(ss, bp - 21, al);
    if (memoryAGet(ss, bp - 21) == 0x00)
        goto loc_4201;
    al = memoryAGet(ss, bp - 21);
    al <<= 1;
    al <<= 1;
    memoryASet(ss, bp - 21, al);
    cx = 0x0008;
    al = memoryAGet(ss, bp - 21);
    ah = 0x00;
    cx -= ax;
    al = 0xff;
    al <<= cl;
    memoryASet(ss, bp - 20, al);
    goto loc_4205;
loc_4201: // 023f:1e11
    memoryASet(ss, bp - 20, 0x00);
loc_4205: // 023f:1e15
    ax = si;
    al += memoryAGet(ss, bp + 14);
    al++;
    al &= 0x01;
    memoryASet(ss, bp - 21, al);
    if (memoryAGet(ss, bp - 21) == 0x00)
        goto loc_4233;
    al = memoryAGet(ss, bp - 21);
    al <<= 1;
    al <<= 1;
    memoryASet(ss, bp - 21, al);
    al = memoryAGet(ss, bp - 21);
    ah = 0x00;
    cx = ax;
    ax = 0x00ff;
    ax = sar(ax, cl);
    memoryASet(ss, bp - 19, al);
    goto loc_4237;
loc_4233: // 023f:1e43
    memoryASet(ss, bp - 19, 0x00);
loc_4237: // 023f:1e47
    al = memoryAGet(ss, bp - 20);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 19);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    memoryASet16(ss, bp - 12, ax);
    ax = si;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 18, ax);
    ax = si;
    ax += memoryAGet16(ss, bp + 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 16, ax);
    ax -= memoryAGet16(ss, bp - 18);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ss, bp - 20) == 0x00)
        goto loc_4278;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_4278: // 023f:1e88
    if (memoryAGet(ss, bp - 19) == 0x00)
        goto loc_4281;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_4281: // 023f:1e91
    if ((short)memoryAGet16(ss, bp - 2) >= (short)0x0000)
        goto loc_428c;
    memoryASet16(ss, bp - 2, 0x7777);
loc_428c: // 023f:1e9c
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    cx = 0x0004;
    ax <<= cl;
    dl = memoryAGet(ss, bp + 18);
    dh = 0x00;
    ax |= dx;
    memoryASet16(ss, bp - 10, ax);
    di = memoryAGet16(ss, bp + 12);
    di &= 0x0003;
    cx = 0x000d;
    di <<= cl;
    ax = memoryAGet16(ss, bp + 12);
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = 0x00a0;
    mul(dx);
    di += ax;
    di += memoryAGet16(ss, bp - 18);
    ax = memoryAGet16(ss, bp + 12);
    ax &= 0x0003;
    memoryASet16(ss, bp - 14, ax);
    bx = memoryAGet16(ss, bp - 26);
    es = memoryAGet16(ss, bp - 26 + 2);
    bx += di;
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 6, ax);
    ax = bx;
    memoryASet16(ss, bp - 4, ax);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x0e11;
    sub_e5db(); // 0e11:04cb
    assert(cs == 0x023f);
    sp += 0x000e;
loc_42f9: // 023f:1f09
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_4350;
    bx = memoryAGet16(ss, bp + 20);
    es = memoryAGet16(ss, bp + 20 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    memoryASet16(ss, bp + 16, memoryAGet16(ss, bp + 16) + 1);
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    di = memoryAGet16(ss, bp + 12);
    ax = di;
    dx = 0x0140;
    mul(dx);
    di = ax;
    di += si;
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    memoryASet16(ss, bp - 10, ax);
    bx += di;
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 6, ax);
    ax = bx;
    memoryASet16(ss, bp - 4, ax);
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp - 10));
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    cs = 0x0e97;
    sub_ee10(); // 0e97:04a0
    assert(cs == 0x023f);
    sp += 0x000a;
loc_4350: // 023f:1f60
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_4361;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_4361;
    goto loc_44d5;
loc_4361: // 023f:1f71
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp + 18, dl);
    bx = memoryAGet16(ss, bp + 20);
    es = memoryAGet16(ss, bp + 20 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    ax = si;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp - 21, dl);
    if (memoryAGet(ss, bp - 21) == 0x00)
        goto loc_43a7;
    al = memoryAGet(ss, bp - 21);
    al <<= 1;
    memoryASet(ss, bp - 21, al);
    cx = 0x0008;
    al = memoryAGet(ss, bp - 21);
    ah = 0x00;
    cx -= ax;
    al = 0xff;
    al <<= cl;
    memoryASet(ss, bp - 20, al);
    goto loc_43ab;
loc_43a7: // 023f:1fb7
    memoryASet(ss, bp - 20, 0x00);
loc_43ab: // 023f:1fbb
    ax = si;
    ax += memoryAGet16(ss, bp + 14);
    ax++;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp - 21, dl);
    if (memoryAGet(ss, bp - 21) == 0x00)
        goto loc_43d9;
    al = memoryAGet(ss, bp - 21);
    al <<= 1;
    memoryASet(ss, bp - 21, al);
    al = memoryAGet(ss, bp - 21);
    ah = 0x00;
    cx = ax;
    ax = 0x00ff;
    ax = sar(ax, cl);
    memoryASet(ss, bp - 19, al);
    goto loc_43dd;
loc_43d9: // 023f:1fe9
    memoryASet(ss, bp - 19, 0x00);
loc_43dd: // 023f:1fed
    al = memoryAGet(ss, bp - 20);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 19);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    memoryASet16(ss, bp - 12, ax);
    ax = si;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 18, ax);
    ax = si;
    ax += memoryAGet16(ss, bp + 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 16, ax);
    ax -= memoryAGet16(ss, bp - 18);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ss, bp - 20) == 0x00)
        goto loc_441e;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_441e: // 023f:202e
    if (memoryAGet(ss, bp - 19) == 0x00)
        goto loc_4427;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_4427: // 023f:2037
    if ((short)memoryAGet16(ss, bp - 2) >= (short)0x0000)
        goto loc_4432;
    memoryASet16(ss, bp - 2, 0x7777);
loc_4432: // 023f:2042
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    ax--;
    if (ax > 0x0002)
        goto loc_4461;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_444c;
        case 2: goto loc_4453;
        default:
        assert(0);
    }
    //   gap of 6 bytes
loc_444c: // 023f:205c
    memoryASet16(ss, bp - 10, 0x5555);
    goto loc_4466;
loc_4453: // 023f:2063
    memoryASet16(ss, bp - 10, 0xaaaa);
    goto loc_4466;
    //   gap of 7 bytes
loc_4461: // 023f:2071
    memoryASet16(ss, bp - 10, 0x0000);
loc_4466: // 023f:2076
    ax = memoryAGet16(ss, bp + 12);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    di = ax;
    ax = di;
    dx = 0x0050;
    mul(dx);
    di = ax;
    di += memoryAGet16(ss, bp - 18);
    ax = memoryAGet16(ss, bp + 12);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    if (!dx)
        goto loc_449e;
    ax = di;
    ax += 0x2000;
    bx = memoryAGet16(ss, bp - 26);
    es = memoryAGet16(ss, bp - 26 + 2);
    bx += ax;
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    memoryASet16(ss, bp - 14, 0x0000);
    goto loc_44ae;
loc_449e: // 023f:20ae
    bx = memoryAGet16(ss, bp - 26);
    es = memoryAGet16(ss, bp - 26 + 2);
    bx += di;
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    memoryASet16(ss, bp - 14, 0x0050);
loc_44ae: // 023f:20be
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 30);
    memoryASet16(ss, bp - 4, ax);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x0ba1;
    sub_c416(); // 0ba1:0a06
    assert(cs == 0x023f);
    sp += 0x000e;
loc_44d5: // 023f:20e5
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_44db() // 023f:20eb
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0072;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = ss;
    es = bx;
    bx = bp - 0x6e;
    memoryASet16(ss, bp - 26, es);
    memoryASet16(ss, bp - 28, bx);
    memoryASet(ss, bp - 113, 0x00);
    goto loc_4517;
loc_450a: // 023f:211a
    bx = memoryAGet16(ss, bp - 28);
    es = memoryAGet16(ss, bp - 28 + 2);
    memoryASet(es, bx, 0x00);
    memoryASet16(ss, bp - 28, memoryAGet16(ss, bp - 28) + 1);
    memoryASet(ss, bp - 113, memoryAGet(ss, bp - 113) + 1);
loc_4517: // 023f:2127
    if (memoryAGet(ss, bp - 113) < 0x51)
        goto loc_450a;
    memoryASet(ss, bp - 112, 0x00);
    memoryASet(ss, bp - 111, 0x63);
    memoryASet(ss, bp - 113, 0x00);
    goto loc_45b1;
loc_452c: // 023f:213c
    al = memoryAGet(ss, bp - 112);
    ah = 0x00;
    dx = 0x0050;
    mul(dx);
    si = ax;
    al = memoryAGet(ss, bp - 111);
    ah = 0x00;
    dx = 0x0050;
    mul(dx);
    di = ax;
    di += 0x2000;
    bx = ss;
    es = bx;
    bx = bp - 0x6e;
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    bx = ss;
    es = bx;
    bx = bp - 0x6e;
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    bx += si;
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    bx = memoryAGet16(ss, bp - 8);
    bx += di;
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    ax = 0x0050;
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    push(cs);
    cs = 0x1f24;
    sub_1f244(); // 1f24:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    ax = 0x0050;
    push(ax);
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 24));
    push(cs);
    cs = 0x1f24;
    sub_1f244(); // 1f24:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    memoryASet(ss, bp - 112, memoryAGet(ss, bp - 112) + 1);
    memoryASet(ss, bp - 111, memoryAGet(ss, bp - 111) - 1);
    memoryASet(ss, bp - 113, memoryAGet(ss, bp - 113) + 1);
loc_45b1: // 023f:21c1
    if (memoryAGet(ss, bp - 113) >= 0x64)
        goto loc_45ba;
    goto loc_452c;
loc_45ba: // 023f:21ca
    push(memoryAGet16(ds, 0x8bb2));
    push(memoryAGet16(ds, 0x8bb0));
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    sub_30d5(); // 023f:0ce5
    sp += 0x0008;
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    sub_3d95(); // 023f:19a5
    sp += 0x0004;
    memoryASet(ss, bp - 112, 0x00);
    memoryASet(ss, bp - 111, 0x63);
    memoryASet(ss, bp - 113, 0x00);
    goto loc_466a;
loc_45e9: // 023f:21f9
    al = memoryAGet(ss, bp - 112);
    ah = 0x00;
    dx = 0x0050;
    mul(dx);
    si = ax;
    al = memoryAGet(ss, bp - 111);
    ah = 0x00;
    dx = 0x0050;
    mul(dx);
    di = ax;
    di += 0x2000;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += si;
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    bx = memoryAGet16(ss, bp + 10);
    bx += di;
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    bx += si;
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    bx = memoryAGet16(ss, bp - 8);
    bx += di;
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    ax = 0x0050;
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    push(cs);
    cs = 0x1f24;
    sub_1f244(); // 1f24:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    ax = 0x0050;
    push(ax);
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 24));
    push(cs);
    cs = 0x1f24;
    sub_1f244(); // 1f24:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    memoryASet(ss, bp - 112, memoryAGet(ss, bp - 112) + 1);
    memoryASet(ss, bp - 111, memoryAGet(ss, bp - 111) - 1);
    memoryASet(ss, bp - 113, memoryAGet(ss, bp - 113) + 1);
loc_466a: // 023f:227a
    if (memoryAGet(ss, bp - 113) >= 0x64)
        goto loc_4673;
    goto loc_45e9;
loc_4673: // 023f:2283
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4679() // 023f:2289
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0022;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    al = 0x05;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x01;
    dx = 0x03ce;
    out(dx, al);
    al = 0x0f;
    dx = 0x03cf;
    out(dx, al);
    al = 0x00;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x03;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    al = 0xff;
    dx = 0x03cf;
    out(dx, al);
    al = 0x02;
    dx = 0x03c4;
    out(dx, al);
    al = 0x0f;
    dx = 0x03c5;
    out(dx, al);
    memoryASet(es, bx, 0x00);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 25, al);
    al = 0x05;
    dx = 0x03ce;
    out(dx, al);
    al = 0x01;
    dx = 0x03cf;
    out(dx, al);
    memoryASet16(ss, bp - 4, 0x0000);
    memoryASet16(ss, bp - 2, 0x00c7);
    di = 0;
    goto loc_4770;
loc_4705: // 023f:2315
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0028;
    mul(dx);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0028;
    mul(dx);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 30);
    es = memoryAGet16(ss, bp - 30 + 2);
    bx += memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    bx = memoryAGet16(ss, bp - 30);
    bx += ax;
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    si = 0;
    goto loc_475e;
loc_4736: // 023f:2346
    bx = memoryAGet16(ss, bp - 30);
    es = memoryAGet16(ss, bp - 30 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 25, al);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 25, al);
    al = memoryAGet(ss, bp - 25);
    bx = memoryAGet16(ss, bp - 16);
    es = memoryAGet16(ss, bp - 16 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
    al = memoryAGet(ss, bp - 25);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
    si++;
loc_475e: // 023f:236e
    if (si < 0x0028)
        goto loc_4736;
    push(cs);
    sub_2445(); // 023f:0055
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 0x0002);
    di++;
loc_4770: // 023f:2380
    if (di < 0x0064)
        goto loc_4705;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_4780;
    push(cs);
    sub_2af9(); // 023f:0709
loc_4780: // 023f:2390
    if (memoryAGet(ds, 0x8f67) != 0x00)
        goto loc_47a3;
    di = 0;
    goto loc_479e;
loc_478b: // 023f:239b
    bx = memoryAGet16(ds, 0x8bb0);
    es = memoryAGet16(ds, 0x8bb0 + 2);
    al = memoryAGet(es, bx + di);
    ah = 0x00;
    push(ax);
    push(di);
    push(cs);
    sub_2dcd(); // 023f:09dd
    sp += 0x0004;
    di++;
loc_479e: // 023f:23ae
    if (di < 0x0010)
        goto loc_478b;
loc_47a3: // 023f:23b3
    memoryASet16(ss, bp - 4, 0x0000);
    memoryASet16(ss, bp - 2, 0x00c7);
    di = 0;
    goto loc_47b2;
loc_47b1: // 023f:23c1
    di++;
loc_47b2: // 023f:23c2
    if (di < 0x03e8)
        goto loc_47b1;
    di = 0;
    goto loc_4848;
loc_47bd: // 023f:23cd
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0028;
    mul(dx);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0028;
    mul(dx);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 34);
    es = memoryAGet16(ss, bp - 34 + 2);
    bx += memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    bx = memoryAGet16(ss, bp - 34);
    bx += ax;
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    bx = memoryAGet16(ss, bp - 30);
    es = memoryAGet16(ss, bp - 30 + 2);
    bx += memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    bx = memoryAGet16(ss, bp - 30);
    bx += ax;
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    si = 0;
    goto loc_4836;
loc_4805: // 023f:2415
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 25, al);
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + 1);
    al = memoryAGet(ss, bp - 25);
    bx = memoryAGet16(ss, bp - 16);
    es = memoryAGet16(ss, bp - 16 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
    bx = memoryAGet16(ss, bp - 20);
    es = memoryAGet16(ss, bp - 20 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 25, al);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 1);
    al = memoryAGet(ss, bp - 25);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
    si++;
loc_4836: // 023f:2446
    if (si < 0x0028)
        goto loc_4805;
    push(cs);
    sub_2445(); // 023f:0055
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 0x0002);
    di++;
loc_4848: // 023f:2458
    if (di >= 0x0064)
        goto loc_4850;
    goto loc_47bd;
loc_4850: // 023f:2460
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4856() // 023f:2466
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0018;
    si = memoryAGet16(ss, bp + 12);
    di = memoryAGet16(ss, bp + 10);
    if ((short)si <= (short)memoryAGet16(ds, 0x0084))
        goto loc_486d;
    goto loc_4a2f;
loc_486d: // 023f:247d
    if ((short)di <= (short)0x013f)
        goto loc_4876;
    goto loc_4a2f;
loc_4876: // 023f:2486
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 10, ax);
    bx = memoryAGet16(ss, bp + 18);
    es = memoryAGet16(ss, bp + 18 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    if ((short)si >= 0)
        goto loc_48e9;
    ax = si;
    if ((short)ax >= 0)
        goto loc_48d0;
    ax = -ax;
loc_48d0: // 023f:24e0
    si = ax;
    if (si < memoryAGet16(ss, bp - 10))
        goto loc_48da;
    goto loc_4a2f;
loc_48da: // 023f:24ea
    ax = si;
    mul(memoryAGet16(ss, bp - 12));
    ax <<= 1;
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + ax);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) - si);
    si = 0;
loc_48e9: // 023f:24f9
    ax = si;
    ax += memoryAGet16(ss, bp - 10);
    dx = memoryAGet16(ds, 0x0084);
    dx++;
    if (ax <= dx)
        goto loc_4900;
    ax = memoryAGet16(ds, 0x0084);
    ax++;
    ax -= si;
    memoryASet16(ss, bp - 10, ax);
loc_4900: // 023f:2510
    ax = 0x00ff;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 6, 0x0000);
    if ((short)di < 0)
        goto loc_491c;
    ax = di;
    ax &= 0x0003;
    memoryASet16(ss, bp - 16, ax);
    goto loc_496f;
loc_491c: // 023f:252c
    ax = di;
    if ((short)ax >= 0)
        goto loc_4924;
    ax = -ax;
loc_4924: // 023f:2534
    di = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax <<= 1;
    ax <<= 1;
    if (ax > di)
        goto loc_4934;
    goto loc_4a2f;
loc_4934: // 023f:2544
    ax = di;
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax <<= 1;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + ax);
    ax >>= 1;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - ax);
    if (memoryAGet16(ss, bp - 12) != 0x0001)
        goto loc_4950;
    goto loc_4a2f;
loc_4950: // 023f:2560
    ax = di;
    ax &= 0x0003;
    memoryASet16(ss, bp - 16, ax);
    if (!ax)
        goto loc_496d;
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) - 1);
    ax = 0x0004;
    ax -= memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 4, 0x0000);
loc_496d: // 023f:257d
    di = 0;
loc_496f: // 023f:257f
    ax = memoryAGet16(ss, bp - 12);
    ax <<= 1;
    ax <<= 1;
    ax += di;
    if (ax <= 0x0140)
        goto loc_49a9;
    ax = memoryAGet16(ss, bp - 12);
    ax <<= 1;
    ax <<= 1;
    ax += di;
    ax += 0xfec0;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) >> 1);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) >> 1);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - ax);
    if (memoryAGet16(ss, bp - 12) != 0x0001)
        goto loc_49a1;
    goto loc_4a2f;
loc_49a1: // 023f:25b1
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) << 1);
    memoryASet16(ss, bp - 2, 0x0000);
loc_49a9: // 023f:25b9
    ax = si;
    ax &= 0x0001;
    memoryASet16(ss, bp - 14, ax);
    if (!ax)
        goto loc_49ba;
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 0x2000);
loc_49ba: // 023f:25ca
    si = sar(si, 1);
    ax = si;
    dx = 0x0050;
    mul(dx);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + ax);
    ax = di;
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + ax);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) ^ 0x0001);
    if (memoryAGet16(ss, bp - 16) == 0x0000)
        goto loc_4a0a;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 22);
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x0ba1;
    sub_bc26(); // 0ba1:0216
    assert(cs == 0x023f);
    sp += 0x0018;
    goto loc_4a2f;
loc_4a0a: // 023f:261a
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 22);
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x0ba1;
    sub_be9f(); // 0ba1:048f
    assert(cs == 0x023f);
    sp += 0x0012;
loc_4a2f: // 023f:263f
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4a35() // 023f:2645
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0018;
    di = memoryAGet16(ss, bp + 12);
    si = memoryAGet16(ss, bp + 10);
    if ((short)di <= (short)memoryAGet16(ds, 0x0084))
        goto loc_4a4c;
    goto loc_4bfd;
loc_4a4c: // 023f:265c
    if ((short)si <= (short)0x013f)
        goto loc_4a55;
    goto loc_4bfd;
loc_4a55: // 023f:2665
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 10, ax);
    bx = memoryAGet16(ss, bp + 18);
    es = memoryAGet16(ss, bp + 18 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    if ((short)di >= 0)
        goto loc_4ac8;
    ax = di;
    if ((short)ax >= 0)
        goto loc_4aaf;
    ax = -ax;
loc_4aaf: // 023f:26bf
    di = ax;
    if (di < memoryAGet16(ss, bp - 10))
        goto loc_4ab9;
    goto loc_4bfd;
loc_4ab9: // 023f:26c9
    ax = di;
    mul(memoryAGet16(ss, bp - 12));
    ax <<= 1;
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + ax);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) - di);
    di = 0;
loc_4ac8: // 023f:26d8
    ax = di;
    ax += memoryAGet16(ss, bp - 10);
    dx = memoryAGet16(ds, 0x0084);
    dx++;
    if (ax <= dx)
        goto loc_4adf;
    ax = memoryAGet16(ds, 0x0084);
    ax++;
    ax -= di;
    memoryASet16(ss, bp - 10, ax);
loc_4adf: // 023f:26ef
    ax = 0x00ff;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 6, 0x0000);
    if ((short)si < 0)
        goto loc_4afb;
    ax = si;
    ax &= 0x0001;
    memoryASet16(ss, bp - 16, ax);
    goto loc_4b4a;
loc_4afb: // 023f:270b
    ax = si;
    if ((short)ax >= 0)
        goto loc_4b03;
    ax = -ax;
loc_4b03: // 023f:2713
    si = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax <<= 1;
    if (ax > si)
        goto loc_4b11;
    goto loc_4bfd;
loc_4b11: // 023f:2721
    ax = si;
    ax = sar(ax, 1);
    ax <<= 1;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + ax);
    ax >>= 1;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - ax);
    if (memoryAGet16(ss, bp - 12) != 0x0001)
        goto loc_4b2b;
    goto loc_4bfd;
loc_4b2b: // 023f:273b
    ax = si;
    ax &= 0x0001;
    memoryASet16(ss, bp - 16, ax);
    if (!ax)
        goto loc_4b48;
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) - 1);
    ax = 0x0001;
    ax -= memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 4, 0x0000);
loc_4b48: // 023f:2758
    si = 0;
loc_4b4a: // 023f:275a
    ax = memoryAGet16(ss, bp - 12);
    ax <<= 1;
    ax += si;
    if (ax <= 0x0140)
        goto loc_4b7d;
    ax = memoryAGet16(ss, bp - 12);
    ax <<= 1;
    ax += si;
    ax += 0xfec0;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) >> 1);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - ax);
    if (memoryAGet16(ss, bp - 12) != 0x0001)
        goto loc_4b75;
    goto loc_4bfd;
loc_4b75: // 023f:2785
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) << 1);
    memoryASet16(ss, bp - 2, 0x0000);
loc_4b7d: // 023f:278d
    ax = di;
    ax &= 0x0003;
    memoryASet16(ss, bp - 14, ax);
    cx = 0x000d;
    ax <<= cl;
    push(ax);
    ax = di;
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    dx = 0x00a0;
    mul(dx);
    dx = pop();
    dx += ax;
    ax = si;
    ax = sar(ax, 1);
    dx += ax;
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + dx);
    if (memoryAGet16(ss, bp - 16) == 0x0000)
        goto loc_4bd8;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 22);
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x0e11;
    sub_e25c(); // 0e11:014c
    assert(cs == 0x023f);
    sp += 0x0018;
    goto loc_4bfd;
loc_4bd8: // 023f:27e8
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 24));
    ax = memoryAGet16(ss, bp - 22);
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    ax = memoryAGet16(ss, bp - 18);
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x0e11;
    sub_e35e(); // 0e11:024e
    assert(cs == 0x023f);
    sp += 0x0012;
loc_4bfd: // 023f:280d
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4c03() // 023f:2813
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x001e;
    di = memoryAGet16(ss, bp + 12);
    si = memoryAGet16(ss, bp + 10);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_4c2d;
    push(memoryAGet16(ss, bp + 20));
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(di);
    push(si);
    push(cs);
    sub_3448(); // 023f:1058
    sp += 0x000c;
loc_4c2d: // 023f:283d
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_4c3b;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_4c50;
loc_4c3b: // 023f:284b
    push(memoryAGet16(ss, bp + 20));
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(di);
    push(si);
    push(cs);
    sub_4856(); // 023f:2466
    sp += 0x000c;
loc_4c50: // 023f:2860
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_4c6c;
    push(memoryAGet16(ss, bp + 20));
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(di);
    push(si);
    push(cs);
    sub_4a35(); // 023f:2645
    sp += 0x000c;
loc_4c6c: // 023f:287c
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_4c76;
    goto loc_4dab;
loc_4c76: // 023f:2886
    if ((short)di <= (short)0x00c7)
        goto loc_4c7f;
    goto loc_4dab;
loc_4c7f: // 023f:288f
    if ((short)si <= (short)0x013f)
        goto loc_4c88;
    goto loc_4dab;
loc_4c88: // 023f:2898
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) << 1);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) << 1);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) << 1);
    ax = si;
    tx = ax;
    ax += memoryAGet16(ss, bp - 6);
    if ((short)tx + (short)memoryAGet16(ss, bp - 6) > 0)
        goto loc_4cb0;
    goto loc_4dab;
loc_4cb0: // 023f:28c0
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 18, ax);
    if ((short)si >= 0)
        goto loc_4cd4;
    ax = si;
    ax = -ax;
    memoryASet16(ss, bp - 4, ax);
    si = 0;
    goto loc_4cd9;
loc_4cd4: // 023f:28e4
    memoryASet16(ss, bp - 4, 0x0000);
loc_4cd9: // 023f:28e9
    ax = si;
    ax += memoryAGet16(ss, bp - 6);
    if (ax <= 0x0140)
        goto loc_4cf0;
    ax = si;
    ax += memoryAGet16(ss, bp - 6);
    ax += 0xfec0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_4cf5;
loc_4cf0: // 023f:2900
    memoryASet16(ss, bp - 2, 0x0000);
loc_4cf5: // 023f:2905
    if ((short)di >= 0)
        goto loc_4cfb;
    di = 0;
loc_4cfb: // 023f:290b
    ax = di;
    ax += memoryAGet16(ss, bp - 18);
    if (ax <= 0x00c8)
        goto loc_4d0d;
    ax = 0x00c8;
    ax -= di;
    memoryASet16(ss, bp - 18, ax);
loc_4d0d: // 023f:291d
    bx = memoryAGet16(ss, bp + 18);
    es = memoryAGet16(ss, bp + 18 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 20, es);
    memoryASet16(ss, bp - 22, bx);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 16, ax);
    ax = bx;
    memoryASet16(ss, bp - 14, ax);
    ax = di;
    dx = 0x0140;
    mul(dx);
    ax += si;
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ss, bp - 22);
    es = memoryAGet16(ss, bp - 22 + 2);
    bx += ax;
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    ax = memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 12, ax);
    ax = bx;
    memoryASet16(ss, bp - 10, ax);
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_4d84;
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_4d84;
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0e97;
    sub_ec9e(); // 0e97:032e
    assert(cs == 0x023f);
    sp += 0x000c;
    goto loc_4dab;
loc_4d84: // 023f:2994
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 6);
    ax -= memoryAGet16(ss, bp - 4);
    ax -= memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0e97;
    sub_ece3(); // 0e97:0373
    assert(cs == 0x023f);
    sp += 0x0010;
loc_4dab: // 023f:29bb
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4db1() // 023f:29c1
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 14);
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    memoryASet16(ss, bp + 10, sar(memoryAGet16(ss, bp + 10), 1));
    memoryASet16(ss, bp + 10, sar(memoryAGet16(ss, bp + 10), 1));
    memoryASet16(ss, bp + 10, sar(memoryAGet16(ss, bp + 10), 1));
    bx = memoryAGet16(ss, bp + 18);
    es = memoryAGet16(ss, bp + 18 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0028;
    mul(dx);
    ax += memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + ax);
    push(di);
    push(si);
    push(memoryAGet16(ss, bp - 8));
    ax = memoryAGet16(ss, bp - 6);
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    ax = memoryAGet16(ss, bp - 10);
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d99b(); // 0cc2:0d7b
    assert(cs == 0x023f);
    sp += 0x000c;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4e20() // 023f:2a30
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0010;
    si = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 6, ax);
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    memoryASet16(ss, bp + 10, sar(memoryAGet16(ss, bp + 10), 1));
    memoryASet16(ss, bp + 10, sar(memoryAGet16(ss, bp + 10), 1));
    bx = memoryAGet16(ss, bp + 18);
    es = memoryAGet16(ss, bp + 18 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + ax);
    di = si;
    di &= 0x0001;
    si = sar(si, 1);
    if (!di)
        goto loc_4e8a;
    ax = si;
    dx = 0x0050;
    mul(dx);
    ax += 0x2000;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + ax);
    goto loc_4e94;
loc_4e8a: // 023f:2a9a
    ax = si;
    dx = 0x0050;
    mul(dx);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + ax);
loc_4e94: // 023f:2aa4
    push(di);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 12));
    ax = memoryAGet16(ss, bp - 10);
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 14);
    push(ax);
    push(cs);
    cs = 0x0ba1;
    sub_c774(); // 0ba1:0d64
    assert(cs == 0x023f);
    sp += 0x000e;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4eb7() // 023f:2ac7
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0010;
    di = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 6, ax);
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    memoryASet16(ss, bp + 10, sar(memoryAGet16(ss, bp + 10), 1));
    bx = memoryAGet16(ss, bp + 18);
    es = memoryAGet16(ss, bp + 18 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + ax);
    si = di;
    si &= 0x0003;
    di = sar(di, 1);
    di = sar(di, 1);
    ax = di;
    dx = 0x00a0;
    mul(dx);
    dx = si;
    cx = 0x000d;
    dx <<= cl;
    ax += dx;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + ax);
    push(si);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 12));
    ax = memoryAGet16(ss, bp - 10);
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp - 14);
    push(ax);
    push(cs);
    cs = 0x0e11;
    sub_e806(); // 0e11:06f6
    assert(cs == 0x023f);
    sp += 0x000e;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4f43() // 023f:2b53
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 12);
    si = memoryAGet16(ss, bp + 10);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_4f69;
    push(memoryAGet16(ss, bp + 20));
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(di);
    push(si);
    push(cs);
    sub_4db1(); // 023f:29c1
    sp = bp;
loc_4f69: // 023f:2b79
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_4f77;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_4f8b;
loc_4f77: // 023f:2b87
    push(memoryAGet16(ss, bp + 20));
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(di);
    push(si);
    push(cs);
    sub_4e20(); // 023f:2a30
    sp = bp;
loc_4f8b: // 023f:2b9b
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_4fa6;
    push(memoryAGet16(ss, bp + 20));
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(di);
    push(si);
    push(cs);
    sub_4eb7(); // 023f:2ac7
    sp = bp;
loc_4fa6: // 023f:2bb6
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_4faa() // 023f:2bba
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0026;
    si = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 12);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_4fd4;
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(si);
    push(di);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_3268(); // 023f:0e78
    sp += 0x000a;
    goto loc_54fd;
loc_4fd4: // 023f:2be4
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_4fe5;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_4fe5;
    goto loc_5202;
loc_4fe5: // 023f:2bf5
    if ((short)memoryAGet16(ss, bp + 10) >= (short)0x0000)
        goto loc_4ff0;
    memoryASet16(ss, bp + 10, 0x0000);
loc_4ff0: // 023f:2c00
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    ax <<= 1;
    ax <<= 1;
    ax += memoryAGet16(ss, bp + 10);
    if (ax <= 0x013f)
        goto loc_502c;
    ax = 0x013f;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    ax <<= 1;
    ax <<= 1;
    dx = pop();
    dx -= ax;
    memoryASet16(ss, bp + 10, dx);
loc_502c: // 023f:2c3c
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    if ((short)ax <= (short)di)
        goto loc_5044;
    goto loc_54fd;
loc_5044: // 023f:2c54
    if ((short)di <= (short)0x00c7)
        goto loc_504d;
    di = 0x00c7;
loc_504d: // 023f:2c5d
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    al = memoryAGet(es, bx + 21);
    memoryASet(ss, bp - 25, al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 14, ax);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    if (ax > 0x0003)
        goto loc_50ac;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_5092;
        case 2: goto loc_5099;
        case 4: goto loc_50a0;
        case 6: goto loc_50a7;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_5092: // 023f:2ca2
    memoryASet16(ss, bp - 14, 0x0000);
    goto loc_50ac;
loc_5099: // 023f:2ca9
    memoryASet16(ss, bp - 14, 0x5555);
    goto loc_50ac;
loc_50a0: // 023f:2cb0
    memoryASet16(ss, bp - 14, 0xaaaa);
    goto loc_50ac;
loc_50a7: // 023f:2cb7
    memoryASet16(ss, bp - 14, 0xffff);
loc_50ac: // 023f:2cbc
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    al = memoryAGet(es, bx + 22);
    memoryASet(ss, bp - 25, al);
    if (memoryAGet(es, bx + 23) != 0x00)
        goto loc_5108;
    push(memoryAGet16(ss, bp + 18));
    push(bx);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    push(memoryAGet16(es, bx + 2));
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    push(memoryAGet16(es, bx));
    ax = di;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = pop();
    ax -= memoryAGet16(es, bx + 2);
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_412a(); // 023f:1d3a
    sp += 0x000e;
loc_5108: // 023f:2d18
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 12, dx);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 24, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 4, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 36, es);
    memoryASet16(ss, bp - 38, bx);
    ax = memoryAGet16(ss, bp - 36);
    memoryASet16(ss, bp - 22, ax);
    ax = bx;
    memoryASet16(ss, bp - 20, ax);
    ax = di;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    ax -= memoryAGet16(es, bx + 2);
    ax >>= 1;
    memoryASet16(ss, bp - 8, ax);
    dx = 0x0050;
    mul(dx);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + ax);
    ax = di;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = pop();
    ax -= memoryAGet16(es, bx + 2);
    if (!(ax & 0x0001))
        goto loc_51c1;
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x2000;
    bx = memoryAGet16(ss, bp - 30);
    es = memoryAGet16(ss, bp - 30 + 2);
    bx += ax;
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    memoryASet16(ss, bp - 10, 0x0000);
    goto loc_51d2;
loc_51c1: // 023f:2dd1
    bx = memoryAGet16(ss, bp - 30);
    es = memoryAGet16(ss, bp - 30 + 2);
    bx += memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    memoryASet16(ss, bp - 10, 0x0050);
loc_51d2: // 023f:2de2
    ax = memoryAGet16(ss, bp - 32);
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 34);
    memoryASet16(ss, bp - 16, ax);
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(ax);
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    cs = 0x0ba1;
    sub_bef8(); // 0ba1:04e8
    assert(cs == 0x023f);
    sp += 0x0012;
    goto loc_54ed;
loc_5202: // 023f:2e12
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_520c;
    goto loc_539f;
loc_520c: // 023f:2e1c
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    al = memoryAGet(es, bx + 21);
    memoryASet(ss, bp - 25, al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = 0x0004;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax |= dx;
    memoryASet16(ss, bp - 14, ax);
    if (memoryAGet(es, bx + 23) != 0x00)
        goto loc_528f;
    al = memoryAGet(es, bx + 22);
    memoryASet(ss, bp - 25, al);
    push(memoryAGet16(ss, bp + 18));
    push(bx);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    push(memoryAGet16(es, bx + 2));
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    push(memoryAGet16(es, bx));
    ax = di;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = pop();
    ax -= memoryAGet16(es, bx + 2);
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_412a(); // 023f:1d3a
    sp += 0x000e;
loc_528f: // 023f:2e9f
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 4, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 24, ax);
    di -= ax;
    if ((short)memoryAGet16(ss, bp + 10) >= (short)0x0000)
        goto loc_52c4;
    memoryASet16(ss, bp + 10, 0x0000);
loc_52c4: // 023f:2ed4
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    ax += memoryAGet16(ss, bp + 10);
    if (ax <= 0x013f)
        goto loc_52de;
    ax = 0x013f;
    dx = memoryAGet16(ss, bp - 4);
    dx <<= 1;
    ax -= dx;
    memoryASet16(ss, bp + 10, ax);
loc_52de: // 023f:2eee
    if ((short)di >= 0)
        goto loc_52e4;
    di = 0;
loc_52e4: // 023f:2ef4
    ax = di;
    ax += memoryAGet16(ss, bp - 24);
    if (ax <= 0x00c7)
        goto loc_52f4;
    di = 0x00c7;
    di -= memoryAGet16(ss, bp - 24);
loc_52f4: // 023f:2f04
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax &= 0x0001;
    memoryASet16(ss, bp - 12, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 36, es);
    memoryASet16(ss, bp - 38, bx);
    ax = memoryAGet16(ss, bp - 36);
    memoryASet16(ss, bp - 22, ax);
    ax = bx;
    memoryASet16(ss, bp - 20, ax);
    ax = di;
    ax &= 0x0003;
    cx = 0x000d;
    ax <<= cl;
    push(ax);
    ax = di;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = 0x00a0;
    mul(dx);
    dx = pop();
    dx += ax;
    dx += memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ss, bp - 30);
    es = memoryAGet16(ss, bp - 30 + 2);
    bx += dx;
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    ax = memoryAGet16(ss, bp - 32);
    memoryASet16(ss, bp - 18, ax);
    ax = bx;
    memoryASet16(ss, bp - 16, ax);
    ax = di;
    ax &= 0x0003;
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 2, 0x0000);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 4));
    push(ax);
    push(cs);
    cs = 0x0e11;
    sub_e465(); // 0e11:0355
    assert(cs == 0x023f);
    sp += 0x001a;
    goto loc_54ed;
loc_539f: // 023f:2faf
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_53a9;
    goto loc_54fd;
loc_53a9: // 023f:2fb9
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    al = memoryAGet(es, bx + 21);
    memoryASet(ss, bp - 25, al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    memoryASet16(ss, bp - 14, ax);
    if (memoryAGet(es, bx + 23) != 0x00)
        goto loc_5420;
    al = memoryAGet(es, bx + 22);
    memoryASet(ss, bp - 25, al);
    push(memoryAGet16(ss, bp + 18));
    push(bx);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    push(memoryAGet16(es, bx + 2));
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    push(memoryAGet16(es, bx));
    ax = di;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = pop();
    ax -= memoryAGet16(es, bx + 2);
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_412a(); // 023f:1d3a
    sp += 0x000e;
loc_5420: // 023f:3030
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(ss, bp - 4, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 24, ax);
    di -= ax;
    if ((short)memoryAGet16(ss, bp + 10) >= (short)0x0000)
        goto loc_5455;
    memoryASet16(ss, bp + 10, 0x0000);
loc_5455: // 023f:3065
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax += memoryAGet16(ss, bp + 10);
    if (ax <= 0x013f)
        goto loc_5477;
    ax = 0x013f;
    dx = memoryAGet16(ss, bp - 4);
    dx <<= 1;
    dx <<= 1;
    dx <<= 1;
    ax -= dx;
    memoryASet16(ss, bp + 10, ax);
loc_5477: // 023f:3087
    if ((short)di >= 0)
        goto loc_547d;
    di = 0;
loc_547d: // 023f:308d
    ax = di;
    ax += memoryAGet16(ss, bp - 24);
    if (ax <= 0x00c7)
        goto loc_548d;
    di = 0x00c7;
    di -= memoryAGet16(ss, bp - 24);
loc_548d: // 023f:309d
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 36, es);
    memoryASet16(ss, bp - 38, bx);
    ax = memoryAGet16(ss, bp - 36);
    memoryASet16(ss, bp - 22, ax);
    ax = bx;
    memoryASet16(ss, bp - 20, ax);
    ax = di;
    dx = 0x0140;
    mul(dx);
    ax += memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ss, bp - 30);
    es = memoryAGet16(ss, bp - 30 + 2);
    bx += ax;
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    ax = memoryAGet16(ss, bp - 32);
    memoryASet16(ss, bp - 18, ax);
    ax = bx;
    memoryASet16(ss, bp - 16, ax);
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(ax);
    push(memoryAGet16(ss, bp - 18));
    push(cs);
    cs = 0x0e97;
    sub_ed32(); // 0e97:03c2
    assert(cs == 0x023f);
    sp += 0x000e;
loc_54ed: // 023f:30fd
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
loc_54fd: // 023f:310d
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_5ada() // 023f:36ea
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x000a;
loc_5ae0: // 023f:36f0
    dx = 0;
    ax = 0x0005;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x023f);
    dx |= ax;
    if (!dx)
        goto loc_5b00;
    flags.carry = (memoryAGet16(ss, bp + 14) + 0x0001) >= 0x10000;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 0x0001);
    memoryASet16(ss, bp + 16, memoryAGet16(ss, bp + 16) + flags.carry);
    goto loc_5ae0;
loc_5b00: // 023f:3710
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_5b6a;
loc_5b15: // 023f:3725
    ax = 0x0001;
    push(ax);
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    ax += memoryAGet16(ss, bp - 4);
    ax += 0x0004;
    push(dx);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += memoryAGet16(ss, bp - 4);
    ax += 0x0003;
    push(dx);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += memoryAGet16(ss, bp - 4);
    ax += 0x0002;
    push(dx);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += memoryAGet16(ss, bp - 4);
    ax++;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x023f;
    sub_5c67(); // 023f:3877
    assert(cs == 0x023f);
    sp += 0x0016;
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0004);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    flags.carry = (ax + 0x0005) >= 0x10000;
    ax += 0x0005;
    dx += flags.carry;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
loc_5b6a: // 023f:377a
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    if (dx < memoryAGet16(ss, bp + 16))
        goto loc_5b15;
    if (dx != memoryAGet16(ss, bp + 16))
        goto loc_5b7c;
    if (ax < memoryAGet16(ss, bp + 14))
        goto loc_5b15;
loc_5b7c: // 023f:378c
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet16(ss, bp + 8, es);
    memoryASet16(ss, bp + 6, bx);
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_5c4b;
loc_5b92: // 023f:37a2
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    bx += memoryAGet16(ss, bp - 4);
    al = memoryAGet(es, bx);
    al ^= 0xff;
    memoryASet(ss, bp - 9, al);
    if (!(memoryAGet(ss, bp - 9) & 0x80))
        goto loc_5bb0;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, 0xf0);
    goto loc_5bb7;
loc_5bb0: // 023f:37c0
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, 0x00);
loc_5bb7: // 023f:37c7
    if (!(memoryAGet(ss, bp - 9) & 0x40))
        goto loc_5bc7;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, memoryAGet(es, bx) | 0x0f);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
loc_5bc7: // 023f:37d7
    if (!(memoryAGet(ss, bp - 9) & 0x20))
        goto loc_5bd6;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, 0xf0);
    goto loc_5bdd;
loc_5bd6: // 023f:37e6
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, 0x00);
loc_5bdd: // 023f:37ed
    if (!(memoryAGet(ss, bp - 9) & 0x10))
        goto loc_5bed;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, memoryAGet(es, bx) | 0x0f);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
loc_5bed: // 023f:37fd
    if (!(memoryAGet(ss, bp - 9) & 0x08))
        goto loc_5bfc;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, 0xf0);
    goto loc_5c03;
loc_5bfc: // 023f:380c
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, 0x00);
loc_5c03: // 023f:3813
    if (!(memoryAGet(ss, bp - 9) & 0x04))
        goto loc_5c13;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, memoryAGet(es, bx) | 0x0f);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
loc_5c13: // 023f:3823
    if (!(memoryAGet(ss, bp - 9) & 0x02))
        goto loc_5c22;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, 0xf0);
    goto loc_5c29;
loc_5c22: // 023f:3832
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, 0x00);
loc_5c29: // 023f:3839
    if (!(memoryAGet(ss, bp - 9) & 0x01))
        goto loc_5c39;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, memoryAGet(es, bx) | 0x0f);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
loc_5c39: // 023f:3849
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    flags.carry = (ax + 0x0005) >= 0x10000;
    ax += 0x0005;
    dx += flags.carry;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
loc_5c4b: // 023f:385b
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    if (dx >= memoryAGet16(ss, bp + 16))
        goto loc_5c59;
    goto loc_5b92;
loc_5c59: // 023f:3869
    if (dx != memoryAGet16(ss, bp + 16))
        goto loc_5c63;
    if (ax >= memoryAGet16(ss, bp + 14))
        goto loc_5c63;
    goto loc_5b92;
loc_5c63: // 023f:3873
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_5c67() // 023f:3877
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    di = memoryAGet16(ss, bp + 30);
loc_5c72: // 023f:3882
    ax = di;
    di--;
    if (ax)
        goto loc_5c7c;
    goto loc_5d49;
loc_5c7c: // 023f:388c
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 5, al);
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    bx = memoryAGet16(ss, bp + 18);
    es = memoryAGet16(ss, bp + 18 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 4, al);
    memoryASet16(ss, bp + 18, memoryAGet16(ss, bp + 18) + 1);
    bx = memoryAGet16(ss, bp + 22);
    es = memoryAGet16(ss, bp + 22 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 3, al);
    memoryASet16(ss, bp + 22, memoryAGet16(ss, bp + 22) + 1);
    bx = memoryAGet16(ss, bp + 26);
    es = memoryAGet16(ss, bp + 26 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 2, al);
    memoryASet16(ss, bp + 26, memoryAGet16(ss, bp + 26) + 1);
    si = 0;
    goto loc_5d3e;
loc_5cb1: // 023f:38c1
    cx = 0x0007;
    cx -= si;
    al = 0x01;
    al <<= cl;
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    if (!(memoryAGet(ss, bp - 5) & al))
        goto loc_5ccb;
    memoryASet(ss, bp - 6, 0x10);
    goto loc_5ccf;
loc_5ccb: // 023f:38db
    memoryASet(ss, bp - 6, 0x00);
loc_5ccf: // 023f:38df
    al = memoryAGet(ss, bp - 1);
    if (!(memoryAGet(ss, bp - 4) & al))
        goto loc_5cdb;
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) | 0x20);
loc_5cdb: // 023f:38eb
    al = memoryAGet(ss, bp - 1);
    if (!(memoryAGet(ss, bp - 3) & al))
        goto loc_5ce7;
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) | 0x40);
loc_5ce7: // 023f:38f7
    al = memoryAGet(ss, bp - 1);
    if (!(memoryAGet(ss, bp - 2) & al))
        goto loc_5cf3;
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) | 0x80);
loc_5cf3: // 023f:3903
    cx = 0x0006;
    cx -= si;
    al = 0x01;
    al <<= cl;
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    if (!(memoryAGet(ss, bp - 5) & al))
        goto loc_5d0b;
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) | 0x01);
loc_5d0b: // 023f:391b
    al = memoryAGet(ss, bp - 1);
    if (!(memoryAGet(ss, bp - 4) & al))
        goto loc_5d17;
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) | 0x02);
loc_5d17: // 023f:3927
    al = memoryAGet(ss, bp - 1);
    if (!(memoryAGet(ss, bp - 3) & al))
        goto loc_5d23;
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) | 0x04);
loc_5d23: // 023f:3933
    al = memoryAGet(ss, bp - 1);
    if (!(memoryAGet(ss, bp - 2) & al))
        goto loc_5d2f;
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) | 0x08);
loc_5d2f: // 023f:393f
    al = memoryAGet(ss, bp - 6);
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
    si += 0x0002;
loc_5d3e: // 023f:394e
    if (si >= 0x0008)
        goto loc_5d46;
    goto loc_5cb1;
loc_5d46: // 023f:3956
    goto loc_5c72;
loc_5d49: // 023f:3959
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_5d4f() // 023f:395f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
loc_5d57: // 023f:3967
    dx = 0;
    ax = 0x0005;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp + 20));
    push(memoryAGet16(ss, bp + 18));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x023f);
    dx |= ax;
    if (!dx)
        goto loc_5d77;
    flags.carry = (memoryAGet16(ss, bp + 18) + 0x0001) >= 0x10000;
    memoryASet16(ss, bp + 18, memoryAGet16(ss, bp + 18) + 0x0001);
    memoryASet16(ss, bp + 20, memoryAGet16(ss, bp + 20) + flags.carry);
    goto loc_5d57;
loc_5d77: // 023f:3987
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_5e43;
loc_5d8d: // 023f:399d
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += memoryAGet16(ss, bp - 4);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 14, al);
    bx = memoryAGet16(ss, bp + 10);
    bx += memoryAGet16(ss, bp - 4);
    al = memoryAGet(es, bx + 1);
    memoryASet(ss, bp - 13, al);
    bx = memoryAGet16(ss, bp + 10);
    bx += memoryAGet16(ss, bp - 4);
    al = memoryAGet(es, bx + 2);
    memoryASet(ss, bp - 12, al);
    bx = memoryAGet16(ss, bp + 10);
    bx += memoryAGet16(ss, bp - 4);
    al = memoryAGet(es, bx + 3);
    memoryASet(ss, bp - 11, al);
    bx = memoryAGet16(ss, bp + 10);
    bx += memoryAGet16(ss, bp - 4);
    al = memoryAGet(es, bx + 4);
    memoryASet(ss, bp - 10, al);
    di = 0;
    goto loc_5e2c;
loc_5dd1: // 023f:39e1
    si = 0x0080;
    cx = di;
    si = sar(si, cl);
    al = memoryAGet(ss, bp - 14);
    ah = 0x00;
    if (!(si & ax))
        goto loc_5de7;
    memoryASet(ss, bp - 9, 0x80);
    goto loc_5deb;
loc_5de7: // 023f:39f7
    memoryASet(ss, bp - 9, 0x00);
loc_5deb: // 023f:39fb
    al = memoryAGet(ss, bp - 13);
    ah = 0x00;
    if (!(si & ax))
        goto loc_5df8;
    memoryASet(ss, bp - 9, memoryAGet(ss, bp - 9) | 0x01);
loc_5df8: // 023f:3a08
    al = memoryAGet(ss, bp - 12);
    ah = 0x00;
    if (!(si & ax))
        goto loc_5e05;
    memoryASet(ss, bp - 9, memoryAGet(ss, bp - 9) | 0x02);
loc_5e05: // 023f:3a15
    al = memoryAGet(ss, bp - 11);
    ah = 0x00;
    if (!(si & ax))
        goto loc_5e12;
    memoryASet(ss, bp - 9, memoryAGet(ss, bp - 9) | 0x04);
loc_5e12: // 023f:3a22
    al = memoryAGet(ss, bp - 10);
    ah = 0x00;
    if (!(si & ax))
        goto loc_5e1f;
    memoryASet(ss, bp - 9, memoryAGet(ss, bp - 9) | 0x08);
loc_5e1f: // 023f:3a2f
    al = memoryAGet(ss, bp - 9);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    di++;
loc_5e2c: // 023f:3a3c
    if (di < 0x0008)
        goto loc_5dd1;
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    flags.carry = (ax + 0x0005) >= 0x10000;
    ax += 0x0005;
    dx += flags.carry;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
loc_5e43: // 023f:3a53
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    if (dx >= memoryAGet16(ss, bp + 20))
        goto loc_5e51;
    goto loc_5d8d;
loc_5e51: // 023f:3a61
    if (dx != memoryAGet16(ss, bp + 20))
        goto loc_5e5b;
    if (ax >= memoryAGet16(ss, bp + 18))
        goto loc_5e5b;
    goto loc_5d8d;
loc_5e5b: // 023f:3a6b
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_5e61() // 023f:3a71
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 16);
loc_5e68: // 023f:3a78
    ax = si;
    si--;
    if (!ax)
        goto loc_5e83;
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + 1);
    goto loc_5e68;
loc_5e83: // 023f:3a93
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_5e86() // 023f:3a96
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    al = 0x00;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    sub_3e59(); // 023f:1a69
    sp += 0x000a;
    bx = memoryAGet16(ds, 0x8e20);
    es = memoryAGet16(ds, 0x8e20 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = memoryAGet16(ds, 0x92c8);
    es = memoryAGet16(ds, 0x92c8 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_5ec0;
    goto loc_5fbc;
loc_5ec0: // 023f:3ad0
    al = 0x05;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x01;
    dx = 0x03ce;
    out(dx, al);
    al = 0x0f;
    dx = 0x03cf;
    out(dx, al);
    al = 0x00;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x03;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    al = 0xff;
    dx = 0x03cf;
    out(dx, al);
    al = 0x02;
    dx = 0x03c4;
    out(dx, al);
    al = 0x0f;
    dx = 0x03c5;
    out(dx, al);
    al = 0x05;
    dx = 0x03ce;
    out(dx, al);
    al = 0x01;
    dx = 0x03cf;
    out(dx, al);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0168);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0168);
    if (memoryAGet16(ss, bp + 10) != 0x0000)
        goto loc_5f71;
    si = 0;
    goto loc_5f69;
loc_5f28: // 023f:3b38
    ax = 0x0026;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(cs);
    sub_5e61(); // 023f:3a71
    sp += 0x000a;
    ax = 0x0002;
    push(ax);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0026;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_5e61(); // 023f:3a71
    sp += 0x000a;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0028);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0028);
    si++;
loc_5f69: // 023f:3b79
    if (si < 0x00bf)
        goto loc_5f28;
    goto loc_5fbc;
loc_5f71: // 023f:3b81
    si = 0;
    goto loc_5fb6;
loc_5f75: // 023f:3b85
    ax = 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x0026;
    push(dx);
    push(ax);
    push(cs);
    sub_5e61(); // 023f:3a71
    sp += 0x000a;
    ax = 0x0026;
    push(ax);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_5e61(); // 023f:3a71
    sp += 0x000a;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0028);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0028);
    si++;
loc_5fb6: // 023f:3bc6
    if (si < 0x00bf)
        goto loc_5f75;
loc_5fbc: // 023f:3bcc
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_5fcd;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_5fcd;
    goto loc_60aa;
loc_5fcd: // 023f:3bdd
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x2140);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x2140);
    di = 0x0001;
    if (memoryAGet16(ss, bp + 10) != 0x0000)
        goto loc_6046;
    si = 0;
    goto loc_603e;
loc_5fe4: // 023f:3bf4
    ax = 0x004c;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x0004;
    push(dx);
    push(ax);
    push(cs);
    cs = 0x1f24;
    sub_1f244(); // 1f24:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    ax = 0x0004;
    push(ax);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x004c;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x1f24;
    sub_1f244(); // 1f24:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    if (!di)
        goto loc_6030;
    di = 0;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) - 0x1fb0);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x1fb0);
    goto loc_603d;
loc_6030: // 023f:3c40
    di = 0x0001;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x2000);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x2000);
loc_603d: // 023f:3c4d
    si++;
loc_603e: // 023f:3c4e
    if (si < 0x00bf)
        goto loc_5fe4;
    goto loc_60aa;
loc_6046: // 023f:3c56
    si = 0;
    goto loc_60a4;
loc_604a: // 023f:3c5a
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x004c;
    push(dx);
    push(ax);
    push(cs);
    cs = 0x1f24;
    sub_1f244(); // 1f24:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    ax = 0x004c;
    push(ax);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0004;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x1f24;
    sub_1f244(); // 1f24:0004
    assert(cs == 0x023f);
    sp += 0x000a;
    if (!di)
        goto loc_6096;
    di = 0;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) - 0x1fb0);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x1fb0);
    goto loc_60a3;
loc_6096: // 023f:3ca6
    di = 0x0001;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x2000);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x2000);
loc_60a3: // 023f:3cb3
    si++;
loc_60a4: // 023f:3cb4
    if (si < 0x00bf)
        goto loc_604a;
loc_60aa: // 023f:3cba
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_60b0() // 060b:0000
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 8);
    ax <<= 1;
    bx = memoryAGet16(ds, 0x8c54);
    es = memoryAGet16(ds, 0x8c54 + 2);
    bx += ax;
    si = memoryAGet16(es, bx);
    bx = memoryAGet16(ds, 0x8dc8);
    es = memoryAGet16(ds, 0x8dc8 + 2);
    bx += si;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    dx = memoryAGet16(ss, bp - 2);
    ax = bx;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_60db() // 060b:002b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_6119;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_60f7;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_6109;
loc_60f7: // 060b:0047
    if (memoryAGet(ss, bp + 16) != 0x01)
        goto loc_6103;
    memoryASet(ss, bp + 16, 0x0f);
    goto loc_6119;
loc_6103: // 060b:0053
    memoryASet(ss, bp + 16, memoryAGet(ss, bp + 16) & 0x0f);
    goto loc_6119;
loc_6109: // 060b:0059
    if (memoryAGet(ss, bp + 16) != 0x01)
        goto loc_6115;
    memoryASet(ss, bp + 16, 0x03);
    goto loc_6119;
loc_6115: // 060b:0065
    memoryASet(ss, bp + 16, memoryAGet(ss, bp + 16) & 0x03);
loc_6119: // 060b:0069
    if (memoryAGet(ss, bp + 14) != 0x00)
        goto loc_612b;
    si = 0x0100;
    di = 0x0040;
    memoryASet16(ds, 0x92b8, 0x0000);
loc_612b: // 060b:007b
    if (memoryAGet(ss, bp + 14) != 0x01)
        goto loc_613d;
    si = 0x00d8;
    di = 0x00b0;
    memoryASet16(ds, 0x92b8, 0x0000);
loc_613d: // 060b:008d
    if (memoryAGet(ss, bp + 14) != 0x02)
        goto loc_6149;
    si = 0x00a4;
    di = 0x008b;
loc_6149: // 060b:0099
    if (memoryAGet(ss, bp + 14) != 0x03)
        goto loc_6155;
    si = 0x005f;
    di = 0x003e;
loc_6155: // 060b:00a5
    if (memoryAGet(ss, bp + 14) != 0x04)
        goto loc_6161;
    si = 0x007e;
    di = 0x00a7;
loc_6161: // 060b:00b1
    if (memoryAGet(ss, bp + 14) != 0x05)
        goto loc_616d;
    si = 0x0069;
    di = 0x0045;
loc_616d: // 060b:00bd
    if (memoryAGet(ss, bp + 14) != 0x06)
        goto loc_6179;
    si = 0x00d2;
    di = 0x0085;
loc_6179: // 060b:00c9
    if (memoryAGet(ss, bp + 18) == 0x01)
        goto loc_6185;
    if (memoryAGet(ss, bp + 18) != 0x03)
        goto loc_6193;
loc_6185: // 060b:00d5
    ax = 0x0140;
    ax -= si;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp + 10, ax);
loc_6193: // 060b:00e3
    if (memoryAGet(ss, bp + 18) == 0x02)
        goto loc_619f;
    if (memoryAGet(ss, bp + 18) != 0x03)
        goto loc_61ad;
loc_619f: // 060b:00ef
    ax = 0x00c8;
    ax -= di;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp + 12, ax);
loc_61ad: // 060b:00fd
    if (memoryAGet16(ds, 0x92b8) == 0x0000)
        goto loc_61b7;
    goto loc_6253;
loc_61b7: // 060b:0107
    push(memoryAGet16(ds, 0x8bee));
    push(memoryAGet16(ds, 0x8bec));
    ax = 0;
    push(ax);
    push(di);
    push(si);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x060b);
    sp += 0x000e;
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_61f1;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_61e7;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_61ed;
loc_61e7: // 060b:0137
    memoryASet(ss, bp - 1, 0x0c);
    goto loc_61f1;
loc_61ed: // 060b:013d
    memoryASet(ss, bp - 1, 0x02);
loc_61f1: // 060b:0141
    push(memoryAGet16(ds, 0x8bee));
    push(memoryAGet16(ds, 0x8bec));
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    push(ax);
    ax = di;
    ax += 0xfffc;
    push(ax);
    ax = si;
    ax += 0xfffc;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x060b);
    sp += 0x000e;
    push(memoryAGet16(ds, 0x8bee));
    push(memoryAGet16(ds, 0x8bec));
    al = memoryAGet(ss, bp + 16);
    ah = 0x00;
    push(ax);
    ax = di;
    ax += 0xfff8;
    push(ax);
    ax = si;
    ax += 0xfff8;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    ax += 0x0004;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0004;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x060b);
    sp += 0x000e;
    goto loc_6278;
loc_6253: // 060b:01a3
    if (memoryAGet16(ds, 0x92b8) >= 0x03e8)
        goto loc_6278;
    push(memoryAGet16(ds, 0x8bee));
    push(memoryAGet16(ds, 0x8bec));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x92b8));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x060b);
    sp += 0x000c;
loc_6278: // 060b:01c8
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0008;
    dl = memoryAGet(ds, 0x8de8);
    dh = 0x00;
    push(ax);
    ax = dx;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    es = memoryAGet16(ds, 0x8dd2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax += 0x0008;
    dl = memoryAGet(ds, 0x8de8);
    dh = 0x00;
    push(ax);
    ax = dx;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 2, ax);
    ax = si;
    ax += 0xfff0;
    dl = memoryAGet(ds, 0x8de8);
    dh = 0x00;
    push(ax);
    ax = dx;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 4, ax);
    ax = di;
    ax += 0xfff0;
    dl = memoryAGet(ds, 0x8de8);
    dh = 0x00;
    push(ax);
    ax = dx;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 6, ax);
    al = memoryAGet(ds, 0x8de8);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    memoryASet16(es, bx + 8, 0x0000);
    al = memoryAGet(ds, 0x8de8);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    memoryASet16(es, bx + 10, 0x0000);
    memoryASet16(ds, 0x92b8, 0x0000);
    al = memoryAGet(ds, 0x8de8);
    ah = 0x00;
    bx = ax;
    memoryASet(ds, bx + 34742, 0x00);
    memoryASet(ds, 0x8de8, memoryAGet(ds, 0x8de8) + 1);
    al = memoryAGet(ds, 0x8de8);
    al += 0xff;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6372() // 060b:02c2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x060b);
    sp += 0x000a;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6388() // 060b:02d8
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(memoryAGet16(ds, 0x8bee));
    push(memoryAGet16(ds, 0x8bec));
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x060b);
    sp += 0x000a;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_63a1() // 060b:02f1
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    si = 0;
    if (memoryAGet(ss, bp + 14) != 0x00)
        goto loc_63b3;
    di = 0x0020;
    goto loc_63b6;
loc_63b3: // 060b:0303
    di = 0xffc0;
loc_63b6: // 060b:0306
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_63da;
    al = memoryAGet(es, bx);
    cbw();
    ax -= di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    si += ax;
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
    goto loc_63b6;
loc_63da: // 060b:032a
    ax = si;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6410() // 060b:0360
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_644a;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_642c;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_643c;
loc_642c: // 060b:037c
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    bx = 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp + 18, dl);
    goto loc_644a;
loc_643c: // 060b:038c
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp + 18, dl);
loc_644a: // 060b:039a
    push(memoryAGet16(ss, bp + 24));
    push(memoryAGet16(ss, bp + 22));
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3d09(); // 023f:1919
    assert(cs == 0x060b);
    sp += 0x0006;
    push(memoryAGet16(ss, bp + 24));
    push(memoryAGet16(ss, bp + 22));
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3d27(); // 023f:1937
    assert(cs == 0x060b);
    sp += 0x0006;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ss, bp + 20) != 0x00)
        goto loc_6484;
    di = 0x0020;
    goto loc_6487;
loc_6484: // 060b:03d4
    di = 0xffc0;
loc_6487: // 060b:03d7
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_64b0;
    push(memoryAGet16(ss, bp + 24));
    push(memoryAGet16(ss, bp + 22));
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    al = memoryAGet(es, bx);
    cbw();
    ax -= di;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4faa(); // 023f:2bba
    assert(cs == 0x060b);
    sp += 0x000a;
    si += ax;
    goto loc_6487;
loc_64b0: // 060b:0400
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6604() // 060b:0554
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_6655;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_6621;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_663c;
loc_6621: // 060b:0571
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    bx = 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp + 18, dl);
    al = memoryAGet(ss, bp + 20);
    ah = 0x00;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp + 20, dl);
    goto loc_6655;
loc_663c: // 060b:058c
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp + 18, dl);
    al = memoryAGet(ss, bp + 20);
    ah = 0x00;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp + 20, dl);
loc_6655: // 060b:05a5
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    push(memoryAGet16(ss, bp + 26));
    push(memoryAGet16(ss, bp + 24));
    al = memoryAGet(ss, bp + 18);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3d09(); // 023f:1919
    assert(cs == 0x060b);
    sp += 0x0006;
    push(memoryAGet16(ss, bp + 26));
    push(memoryAGet16(ss, bp + 24));
    al = memoryAGet(ss, bp + 20);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3d18(); // 023f:1928
    assert(cs == 0x060b);
    sp += 0x0006;
    push(memoryAGet16(ss, bp + 26));
    push(memoryAGet16(ss, bp + 24));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3d27(); // 023f:1937
    assert(cs == 0x060b);
    sp += 0x0006;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ss, bp + 22) != 0x00)
        goto loc_66ab;
    di = 0x0020;
    goto loc_66ae;
loc_66ab: // 060b:05fb
    di = 0xffc0;
loc_66ae: // 060b:05fe
    bx = memoryAGet16(ss, bp - 6);
    es = memoryAGet16(ss, bp - 6 + 2);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_66d7;
    push(memoryAGet16(ss, bp + 26));
    push(memoryAGet16(ss, bp + 24));
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    al = memoryAGet(es, bx);
    cbw();
    ax -= di;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4faa(); // 023f:2bba
    assert(cs == 0x060b);
    sp += 0x000a;
    si += ax;
    goto loc_66ae;
loc_66d7: // 060b:0627
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_66dd() // 060b:062d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0068;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    bx = ax;
    if (memoryAGet(ds, bx + 34742) != 0x20)
        goto loc_6701;
loc_66f3: // 060b:0643
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    if (memoryAGet(es, bx) != 0x20)
        goto loc_6701;
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + 1);
    goto loc_66f3;
loc_6701: // 060b:0651
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    if (memoryAGet(es, bx) != 0x00)
        goto loc_670d;
    goto loc_68dc;
loc_670d: // 060b:065d
    memoryASet(ss, bp - 1, 0x00);
loc_6711: // 060b:0661
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    if (memoryAGet(es, bx) == 0x20)
        goto loc_6740;
    if (memoryAGet(es, bx) == 0x00)
        goto loc_6740;
    if (memoryAGet(es, bx) == 0x0d)
        goto loc_6740;
    al = memoryAGet(es, bx);
    dl = memoryAGet(ss, bp - 1);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x68;
    bx += dx;
    memoryASet(ss, bx, al);
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + 1);
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) + 1);
    goto loc_6711;
loc_6740: // 060b:0690
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    if (memoryAGet(es, bx) != 0x20)
        goto loc_6761;
    al = memoryAGet(es, bx);
    dl = memoryAGet(ss, bp - 1);
    dh = 0x00;
    bx = dx;
    dx = bp - 0x68;
    bx += dx;
    memoryASet(ss, bx, al);
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + 1);
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) + 1);
loc_6761: // 060b:06b1
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_6781;
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x69;
    bx += ax;
    al = memoryAGet(ss, bx);
    dl = memoryAGet(ss, bp + 10);
    dh = 0x00;
    bx = dx;
    memoryASet(ds, bx + 34742, al);
loc_6781: // 060b:06d1
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    bx = ax;
    ax = bp - 0x68;
    bx += ax;
    memoryASet(ss, bx, 0x00);
    if (memoryAGet(ss, bp - 104) != 0x00)
        goto loc_679a;
    goto loc_6893;
loc_679a: // 060b:06ea
    ax = 0;
    push(ax);
    push(ss);
    ax = bp - 0x68;
    push(ax);
    push(cs);
    sub_63a1(); // 060b:02f1
    sp += 0x0006;
    si = ax;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    es = memoryAGet16(ds, 0x8dd2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 8);
    ax += si;
    dl = memoryAGet(ss, bp + 10);
    dh = 0x00;
    push(ax);
    ax = dx;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    ax = pop();
    if ((short)ax <= (short)memoryAGet16(es, bx + 4))
        goto loc_6806;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    memoryASet16(es, bx + 8, 0x0000);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) + 0x0008);
loc_6806: // 060b:0756
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    es = memoryAGet16(ds, 0x8dd2 + 2);
    bx += ax;
    di = memoryAGet16(es, bx);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    di += memoryAGet16(es, bx + 8);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    dl = memoryAGet(ss, bp + 10);
    dh = 0x00;
    push(ax);
    ax = dx;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    ax = pop();
    ax += memoryAGet16(es, bx + 10);
    memoryASet16(ss, bp - 4, ax);
    push(memoryAGet16(ds, 0x8bee));
    push(memoryAGet16(ds, 0x8bec));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8db0));
    push(ss);
    ax = bp - 0x68;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0008;
    push(ax);
    push(di);
    push(cs);
    sub_6410(); // 060b:0360
    sp += 0x0010;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    es = memoryAGet16(ds, 0x8dd2 + 2);
    bx += ax;
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) + si);
loc_6893: // 060b:07e3
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    if (memoryAGet(es, bx) == 0x0d)
        goto loc_689f;
    goto loc_6701;
loc_689f: // 060b:07ef
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    bx = ax;
    memoryASet(ds, bx + 34742, 0x00);
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + 1);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    es = memoryAGet16(ds, 0x8dd2 + 2);
    bx += ax;
    memoryASet16(es, bx + 8, 0x0000);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) + 0x0008);
    goto loc_6701;
loc_68dc: // 060b:082c
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_690a() // 060b:085a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    es = memoryAGet16(ds, 0x8dd2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 6, ax);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 4, ax);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    si = memoryAGet16(es, bx + 4);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    dx = 0x000c;
    mul(dx);
    bx = memoryAGet16(ds, 0x8dd2);
    bx += ax;
    di = memoryAGet16(es, bx + 6);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_63a1(); // 060b:02f1
    sp += 0x0006;
    memoryASet16(ss, bp - 2, ax);
    if ((short)ax >= (short)si)
        goto loc_69c2;
    ax = si;
    ax -= memoryAGet16(ss, bp - 2);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    si = ax;
    ax = di;
    ax += 0xfff8;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    di = ax;
    push(memoryAGet16(ds, 0x8bee));
    push(memoryAGet16(ds, 0x8bec));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8db0));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    ax = memoryAGet16(ss, bp - 4);
    ax += di;
    ax += 0x0008;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += si;
    push(ax);
    push(cs);
    sub_6410(); // 060b:0360
    sp += 0x0010;
    goto loc_69e7;
loc_69c2: // 060b:0912
    push(ds);
    ax = 0x0086;
    push(ax);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_66dd(); // 060b:062d
    sp += 0x0006;
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_66dd(); // 060b:062d
    sp += 0x0006;
loc_69e7: // 060b:0937
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_69ed() // 060b:093d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_60b0(); // 060b:0000
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    push(dx);
    push(ax);
    al = memoryAGet(ss, bp + 6);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_690a(); // 060b:085a
    sp += 0x0006;
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6a15() // 060b:0965
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x000a;
    memoryASet16(ss, bp - 8, 0x3b9a);
    memoryASet16(ss, bp - 10, 0xca00);
    memoryASet(ss, bp - 1, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax |= memoryAGet16(ss, bp + 12);
    if (ax)
        goto loc_6a3b;
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet(es, bx, 0x30);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_6a3b: // 060b:098b
    ax = memoryAGet16(ss, bp - 10);
    ax |= memoryAGet16(ss, bp - 8);
    if (ax)
        goto loc_6a46;
    goto loc_6ac6;
loc_6a46: // 060b:0996
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x060b);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, ax);
    ax |= dx;
    if (!ax)
        goto loc_6a76;
    al = memoryAGet(ss, bp - 6);
    al += 0x30;
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
    memoryASet(ss, bp - 1, 0x01);
    goto loc_6a86;
loc_6a76: // 060b:09c6
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_6a86;
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet(es, bx, 0x30);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_6a86: // 060b:09d6
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 10);
    cx = memoryAGet16(ss, bp - 4);
    bx = memoryAGet16(ss, bp - 6);
    push(dx);
    push(ax);
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x060b);
    bx = pop();
    cx = pop();
    flags.carry = bx < ax;
    bx -= ax;
    cx -= dx + flags.carry;
    memoryASet16(ss, bp + 12, cx);
    memoryASet16(ss, bp + 10, bx);
    dx = 0;
    ax = 0x000a;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x060b);
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    goto loc_6a3b;
loc_6ac6: // 060b:0a16
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet(es, bx, 0x00);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6ae8() // 060b:0a38
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
loc_6aeb: // 060b:0a3b
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_6af9;
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
    goto loc_6aeb;
loc_6af9: // 060b:0a49
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_6b13;
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
    goto loc_6af9;
loc_6b13: // 060b:0a63
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet(es, bx, 0x00);
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6c11() // 06c1:0001
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    di = 0;
    memoryASet16(ss, bp - 2, di);
loc_6c1d: // 06c1:000d
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    if (memoryAGet(es, bx + di) == 0x2e)
        goto loc_6c29;
    di++;
    goto loc_6c1d;
loc_6c29: // 06c1:0019
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += memoryAGet16(ss, bp - 2);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_6c3a;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    goto loc_6c29;
loc_6c3a: // 06c1:002a
    if (di != memoryAGet16(ss, bp - 2))
        goto loc_6c51;
    si = 0;
    goto loc_6c56;
loc_6c43: // 06c1:0033
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    al = memoryAGet(es, bx + si);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (al == memoryAGet(es, bx + si))
        goto loc_6c55;
loc_6c51: // 06c1:0041
    ax = 0;
    goto loc_6c5d;
loc_6c55: // 06c1:0045
    si++;
loc_6c56: // 06c1:0046
    if (si < di)
        goto loc_6c43;
    ax = 0x0001;
loc_6c5d: // 06c1:004d
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6c63() // 06c1:0053
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    si = 0;
loc_6c6d: // 06c1:005d
    bx = si;
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 138);
    es = memoryAGet16(ds, tx + 138 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    push(memoryAGet16(ss, bp - 2));
    push(bx);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6c11(); // 06c1:0001
    sp += 0x0008;
    if (!ax)
        goto loc_6cb2;
    ax = si;
    cx = 0x0004;
    ax <<= cl;
    si = ax;
    di = 0;
    goto loc_6cab;
loc_6c9f: // 06c1:008f
    bx = si;
    al = memoryAGet(ds, bx + 222);
    memoryASet(ds, di + 36716, al);
    si++;
    di++;
loc_6cab: // 06c1:009b
    if (di < 0x0010)
        goto loc_6c9f;
    goto loc_6cb5;
loc_6cb2: // 06c1:00a2
    si++;
    goto loc_6c6d;
loc_6cb5: // 06c1:00a5
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6cbb() // 06c1:00ab
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    di = 0;
loc_6cc5: // 06c1:00b5
    bx = di;
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 558);
    es = memoryAGet16(ds, tx + 558 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    push(memoryAGet16(ss, bp - 2));
    push(bx);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6c11(); // 06c1:0001
    sp += 0x0008;
    if (!ax)
        goto loc_6d19;
    ax = di;
    dx = 0x0011;
    mul(dx);
    di = ax;
    al = memoryAGet(ds, di + 606);
    memoryASet(ss, bp - 5, al);
    si = 0x0001;
    goto loc_6d0f;
loc_6cff: // 06c1:00ef
    bx = di;
    bx += si;
    al = memoryAGet(ds, bx + 606);
    bx = si;
    bx--;
    memoryASet(ds, bx + 36716, al);
    si++;
loc_6d0f: // 06c1:00ff
    if (si < 0x0011)
        goto loc_6cff;
    al = memoryAGet(ss, bp - 5);
    goto loc_6d1c;
loc_6d19: // 06c1:0109
    di++;
    goto loc_6cc5;
loc_6d1c: // 06c1:010c
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6d22() // 06c1:0112
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    di = 0;
loc_6d2c: // 06c1:011c
    bx = di;
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 558);
    es = memoryAGet16(ds, tx + 558 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    push(memoryAGet16(ss, bp - 2));
    push(bx);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6c11(); // 06c1:0001
    sp += 0x0008;
    if (!ax)
        goto loc_6d75;
    ax = di;
    cx = 0x0004;
    ax <<= cl;
    di = ax;
    si = 0;
    goto loc_6d6e;
loc_6d5e: // 06c1:014e
    bx = di;
    bx += si;
    al = memoryAGet(ds, bx + 810);
    bx = memoryAGet16(ds, 0x8bb0);
    es = memoryAGet16(ds, 0x8bb0 + 2);
    memoryASet(es, bx + si, al);
    si++;
loc_6d6e: // 06c1:015e
    if (si < 0x0010)
        goto loc_6d5e;
    goto loc_6d78;
loc_6d75: // 06c1:0165
    di++;
    goto loc_6d2c;
loc_6d78: // 06c1:0168
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6d7e() // 06c1:016e
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0x87d6, ax);
    if (memoryAGet16(ds, 0x87d8) == 0x0000)
        goto loc_6dc0;
    di = 0;
    si = memoryAGet16(ds, 0x87dc);
    si += 0xff00;
    goto loc_6dac;
loc_6d9c: // 06c1:018c
    bx = memoryAGet16(ds, 0x87de);
    es = memoryAGet16(ds, 0x87de + 2);
    al = memoryAGet(es, bx + si);
    dx = di;
    bx += dx;
    memoryASet(es, bx, al);
    di++;
    si++;
loc_6dac: // 06c1:019c
    if (si < memoryAGet16(ds, 0x87dc))
        goto loc_6d9c;
    memoryASet16(ds, 0x87dc, 0x0100);
    memoryASet16(ds, 0x87d8, 0x0100);
    goto loc_6dec;
loc_6dc0: // 06c1:01b0
    ax = 0;
    memoryASet16(ds, 0x87d8, ax);
    memoryASet16(ds, 0x87dc, ax);
    push(memoryAGet16(ds, 0x87de));
    ax = memoryAGet16(ds, 0x87e0);
    push(ax);
    ax = memoryAGet16(ds, 0x87d4);
    push(ax);
    ax = memoryAGet16(ds, 0x87d2);
    ax &= 0xffff;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x129d;
    sub_12dfc(); // 129d:042c
    assert(cs == 0x06c1);
    sp = bp;
    push(cs);
    cs = 0x129d;
    sub_12e24(); // 129d:0454
    assert(cs == 0x06c1);
    sp = bp;
loc_6dec: // 06c1:01dc
    memoryASet16(ds, 0x87d0, 0x0000);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ds, 0x87dc));
    push(memoryAGet16(ds, 0x87d0));
    push(cs);
    cs = 0x129d;
    sub_12f08(); // 129d:0538
    assert(cs == 0x06c1);
    sp = bp;
    push(cs);
    cs = 0x129d;
    sub_12df2(); // 129d:0422
    assert(cs == 0x06c1);
    sp = bp;
    memoryASet16(ds, 0x87dc, ax);
    memoryASet16(ds, 0x87d0, ax);
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6e15() // 06c1:0205
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0x87d8);
    if (ax != memoryAGet16(ds, 0x87d0))
        goto loc_6e56;
    if (memoryAGet16(ds, 0x919a) != 0x0000)
        goto loc_6e49;
    push(memoryAGet16(ds, 0x8b8c));
    push(memoryAGet16(ds, 0x87e0));
    push(memoryAGet16(ds, 0x87de));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp = bp;
    memoryASet16(ds, 0x87d0, ax);
    memoryASet16(ds, 0x87d8, 0x0000);
    goto loc_6e56;
loc_6e49: // 06c1:0239
    push(memoryAGet16(ds, 0x8b8c));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_6d7e(); // 06c1:016e
    sp = bp;
loc_6e56: // 06c1:0246
    ax = memoryAGet16(ds, 0x87d8);
    memoryASet16(ds, 0x87d8, memoryAGet16(ds, 0x87d8) + 1);
    bx = memoryAGet16(ds, 0x87de);
    es = memoryAGet16(ds, 0x87de + 2);
    bx += ax;
    al = memoryAGet(es, bx);
    ah = 0x00;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6e6a() // 06c1:025a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    di = memoryAGet16(ss, bp + 16);
    memoryASet16(ss, bp - 6, 0x0000);
    if (memoryAGet16(ds, 0x87e2) != 0x0000)
        goto loc_6e9f;
loc_6e81: // 06c1:0271
    ax = di;
    di--;
    if (ax)
        goto loc_6e8b;
    goto loc_6f3c;
loc_6e8b: // 06c1:027b
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + 1);
    goto loc_6e81;
loc_6e9f: // 06c1:028f
    ax = memoryAGet16(ss, bp - 6);
    if (ax != di)
        goto loc_6ea9;
    goto loc_6f3c;
loc_6ea9: // 06c1:0299
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 3, al);
    al = memoryAGet(ss, bp - 3);
    cbw();
    if (ax == 0xff80)
        goto loc_6e9f;
    if ((char)memoryAGet(ss, bp - 3) < (char)0x00)
        goto loc_6ed5;
    if ((char)memoryAGet(ss, bp - 3) > (char)0x7f)
        goto loc_6ed5;
    memoryASet(ss, bp - 2, 0x00);
    al = memoryAGet(ss, bp - 3);
    cbw();
    si = ax;
    si++;
loc_6ed5: // 06c1:02c5
    if ((char)memoryAGet(ss, bp - 3) >= (char)0x00)
        goto loc_6efd;
    al = memoryAGet(ss, bp - 3);
    cbw();
    if ((short)ax < (short)0xff81)
        goto loc_6efd;
    memoryASet(ss, bp - 2, 0x01);
    al = memoryAGet(ss, bp - 3);
    cbw();
    si = ax;
    si = -si;
    si++;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 1, al);
loc_6efd: // 06c1:02ed
    if (memoryAGet(ss, bp - 2) != 0x00)
        goto loc_6f21;
loc_6f03: // 06c1:02f3
    ax = si;
    si--;
    if (!ax)
        goto loc_6e9f;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + 1);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    goto loc_6f03;
loc_6f21: // 06c1:0311
    ax = si;
    si--;
    if (ax)
        goto loc_6f2b;
    goto loc_6e9f;
loc_6f2b: // 06c1:031b
    al = memoryAGet(ss, bp - 1);
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + 1);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    goto loc_6f21;
loc_6f3c: // 06c1:032c
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6f42() // 06c1:0332
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    push(cs);
    cs = 0x0ba1;
    sub_ba46(); // 0ba1:0036
    assert(cs == 0x06c1);
    sp = bp;
    if (memoryAGet16(ss, bp + 8) != 0x0000)
        goto loc_6f65;
    ax = 0x8001;
    push(ax);
    push(ds);
    ax = 0x04cb;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp = bp;
    goto loc_6f75;
loc_6f65: // 06c1:0355
    ax = 0x8001;
    push(ax);
    push(ds);
    ax = 0x04d8;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp = bp;
loc_6f75: // 06c1:0365
    push(cs);
    cs = 0x0ba1;
    sub_ba4d(); // 0ba1:003d
    assert(cs == 0x06c1);
    sp = bp;
    si = ax;
    ax = si;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_6fe0() // 06c1:03d0
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
    memoryASet(ss, bp - 4, 0x00);
    memoryASet(ss, bp - 3, 0x00);
    memoryASet(ss, bp - 1, 0x00);
    if (memoryAGet(ds, 0x91a2) != 0x46)
        goto loc_6ffd;
    di = 0;
loc_6ffd: // 06c1:03ed
    if (memoryAGet(ds, 0x91a2) != 0x49)
        goto loc_7007;
    di = 0x0003;
loc_7007: // 06c1:03f7
    if (memoryAGet(ds, 0x91a2) != 0x47)
        goto loc_7011;
    di = 0x0006;
loc_7011: // 06c1:0401
    if (memoryAGet(ds, 0x91a2) != 0x53)
        goto loc_701b;
    di = 0x0009;
loc_701b: // 06c1:040b
    if (memoryAGet(ds, 0x91a2) != 0x45)
        goto loc_7025;
    di = 0x000c;
loc_7025: // 06c1:0415
    if (memoryAGet(ss, bp + 10) == 0x00)
        goto loc_702e;
    goto loc_70fb;
loc_702e: // 06c1:041e
    al = 0x00;
    memoryASet(ss, bp - 5, al);
    memoryASet(ss, bp - 6, al);
    memoryASet(ss, bp - 7, al);
    memoryASet(ss, bp - 8, al);
    if (memoryAGet16(ds, 0x87da) & 0x0001)
        goto loc_708e;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x04e5;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp += 0x0006;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_7069;
    memoryASet(ss, bp - 8, 0x01);
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_7069: // 06c1:0459
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x04f3;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp += 0x0006;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_708e;
    memoryASet(ss, bp - 7, 0x01);
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_708e: // 06c1:047e
    if (memoryAGet(ds, 0x92b4) <= 0x01)
        goto loc_70e7;
    if (memoryAGet16(ds, 0x87da) & 0x0002)
        goto loc_70e7;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x0501;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp += 0x0006;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_70c2;
    memoryASet(ss, bp - 8, 0x01);
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_70c2: // 06c1:04b2
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x050f;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp += 0x0006;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_70e7;
    memoryASet(ss, bp - 7, 0x01);
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_70e7: // 06c1:04d7
    if (memoryAGet(ss, bp - 8) == 0x00)
        goto loc_70f4;
    memoryASet16(ss, bp - 12, 0x0002);
    goto loc_7100;
loc_70f4: // 06c1:04e4
    memoryASet16(ss, bp - 12, 0x0001);
    goto loc_7100;
loc_70fb: // 06c1:04eb
    memoryASet16(ss, bp - 12, 0x0000);
loc_7100: // 06c1:04f0
    di += memoryAGet16(ss, bp - 12);
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_7113;
    memoryASet(ss, bp - 4, 0x01);
    push(cs);
    cs = 0x0a34;
    sub_a70c(); // 0a34:03cc
    assert(cs == 0x06c1);
loc_7113: // 06c1:0503
    al = memoryAGet(ds, 0x8db0);
    memoryASet(ss, bp - 2, al);
    memoryASet16(ds, 0x8db0, 0x0000);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x06c1);
    sp += 0x000a;
    memoryASet16(ds, 0x8bee, ds);
    memoryASet16(ds, 0x8bec, 0x8bfa);
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_714c;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_7153;
loc_714c: // 06c1:053c
    memoryASet16(ss, bp - 10, 0x000f);
    goto loc_7158;
loc_7153: // 06c1:0543
    memoryASet16(ss, bp - 10, 0x0003);
loc_7158: // 06c1:0548
    ax = 0x0003;
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    ax = 0;
    push(ax);
    push(ax);
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_60db(); // 060b:002b
    assert(cs == 0x06c1);
    sp += 0x000a;
    ah = 0x00;
    memoryASet16(ss, bp - 14, ax);
    push(di);
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_69ed(); // 060b:093d
    assert(cs == 0x06c1);
    sp += 0x0004;
    push(cs);
    cs = 0x060b;
    sub_6388(); // 060b:02d8
    assert(cs == 0x06c1);
    push(cs);
    cs = 0x0a34;
    sub_a9d5(); // 0a34:0695
    assert(cs == 0x06c1);
    push(cs);
    cs = 0x060b;
    sub_6372(); // 060b:02c2
    assert(cs == 0x06c1);
    memoryASet(ds, 0x8de8, memoryAGet(ds, 0x8de8) - 1);
    memoryASet16(ds, 0x8bee, ds);
    memoryASet16(ds, 0x8bec, 0x8b70);
    al = memoryAGet(ss, bp - 2);
    ah = 0x00;
    memoryASet16(ds, 0x8db0, ax);
    if (memoryAGet(ss, bp - 4) == 0x00)
        goto loc_71ab;
    push(cs);
    cs = 0x0a34;
    sub_a6c3(); // 0a34:0383
    assert(cs == 0x06c1);
loc_71ab: // 06c1:059b
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_71b1() // 06c1:05a1
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0028;
    memoryASet(ss, bp - 40, 0x00);
    if (memoryAGet(ds, 0x919c) != 0x00)
        goto loc_71d5;
    push(ds);
    ax = 0x051d;
    push(ax);
    push(ss);
    ax = bp - 0x28;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x06c1);
    sp += 0x0008;
loc_71d5: // 06c1:05c5
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(ss);
    ax = bp - 0x28;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (memoryAGet(ds, 0x919c) != 0x00)
        goto loc_7207;
    ax = 0;
    push(ax);
    push(cs);
    sub_6f42(); // 06c1:0332
    sp++;
    sp++;
    if (!ax)
        goto loc_7207;
    memoryASet16(ds, 0x87da, memoryAGet16(ds, 0x87da) | 0x0001);
    ax = 0xffff;
    goto loc_721c;
loc_7207: // 06c1:05f7
    ax = 0x8001;
    push(ax);
    push(ss);
    ax = bp - 0x28;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp += 0x0006;
    si = ax;
    ax = si;
loc_721c: // 06c1:060c
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_7221() // 06c1:0611
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0028;
    memoryASet(ss, bp - 40, 0x00);
    if (memoryAGet(ds, 0x919c) != 0x00)
        goto loc_7245;
    push(ds);
    ax = 0x0521;
    push(ax);
    push(ss);
    ax = bp - 0x28;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x06c1);
    sp += 0x0008;
loc_7245: // 06c1:0635
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(ss);
    ax = bp - 0x28;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (memoryAGet(ds, 0x919c) != 0x00)
        goto loc_7278;
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_6f42(); // 06c1:0332
    sp++;
    sp++;
    if (!ax)
        goto loc_7278;
    memoryASet16(ds, 0x87da, memoryAGet16(ds, 0x87da) | 0x0002);
    ax = 0xffff;
    goto loc_728d;
loc_7278: // 06c1:0668
    ax = 0x8001;
    push(ax);
    push(ss);
    ax = bp - 0x28;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp += 0x0006;
    si = ax;
    ax = si;
loc_728d: // 06c1:067d
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_7292() // 06c1:0682
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0036;
    di = memoryAGet16(ss, bp + 10);
    ax = 0x0002;
    push(ax);
    push(ss);
    ax = bp - 0x36;
    push(ax);
    push(di);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    ax = memoryAGet16(ss, bp - 54);
    dx = 0;
    memoryASet16(ss, bp - 46, dx);
    memoryASet16(ss, bp - 48, ax);
loc_72ba: // 06c1:06aa
    ax = 0x0002;
    push(ax);
    push(ss);
    ax = bp - 0x34;
    push(ax);
    push(di);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    ax = 0x0002;
    push(ax);
    push(ss);
    ax = bp - 0x32;
    push(ax);
    push(di);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    dx = memoryAGet16(ss, bp - 50);
    ax = memoryAGet16(ss, bp - 52);
    memoryASet16(ss, bp - 42, dx);
    memoryASet16(ss, bp - 44, ax);
    ax |= dx;
    if (ax)
        goto loc_72f2;
    ax = 0;
    goto loc_7369;
loc_72f2: // 06c1:06e2
    si = 0;
loc_72f4: // 06c1:06e4
    ax = 0x0001;
    push(ax);
    ax = bp - 0x28;
    ax += si;
    dx = ss;
    push(dx);
    push(ax);
    push(di);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    si++;
    bx = si;
    bx--;
    ax = bp - 0x28;
    bx += ax;
    if (memoryAGet(ss, bx) != 0x00)
        goto loc_72f4;
    push(ss);
    ax = bp - 0x28;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    cs = 0x1f66;
    sub_1f663(); // 1f66:0003
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (ax)
        goto loc_7354;
    dx = memoryAGet16(ss, bp - 42);
    ax = memoryAGet16(ss, bp - 44);
    memoryASet16(ds, 0x87ce, dx);
    memoryASet16(ds, 0x87cc, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 46));
    push(memoryAGet16(ss, bp - 48));
    push(di);
    push(cs);
    cs = 0x1f20;
    sub_1f206(); // 1f20:0006
    assert(cs == 0x06c1);
    sp += 0x0008;
    ax = 0x0001;
    goto loc_7369;
loc_7354: // 06c1:0744
    dx = memoryAGet16(ss, bp - 46);
    ax = memoryAGet16(ss, bp - 48);
    flags.carry = (ax + memoryAGet16(ss, bp - 44)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 44);
    dx += memoryAGet16(ss, bp - 42) + flags.carry;
    memoryASet16(ss, bp - 46, dx);
    memoryASet16(ss, bp - 48, ax);
    goto loc_72ba;
loc_7369: // 06c1:0759
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_736f() // 06c1:075f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    if (memoryAGet16(ss, bp + 8) == 0x0000)
        goto loc_73d1;
    push(ds);
    ax = 0x0525;
    push(ax);
    push(cs);
    sub_71b1(); // 06c1:05a1
    sp = bp;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_73a8;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7292(); // 06c1:0682
    sp = bp;
    if (!ax)
        goto loc_73a0;
    goto loc_7421;
loc_73a0: // 06c1:0790
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp = bp;
loc_73a8: // 06c1:0798
    push(ds);
    ax = 0x0530;
    push(ax);
    push(cs);
    sub_71b1(); // 06c1:05a1
    sp = bp;
    si = ax;
    ax = si;
    if ((short)ax >= 0)
        goto loc_73be;
    goto loc_742d;
loc_73be: // 06c1:07ae
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7292(); // 06c1:0682
    sp = bp;
    if (ax)
        goto loc_7421;
    goto loc_7425;
loc_73d1: // 06c1:07c1
    push(ds);
    ax = 0x053b;
    push(ax);
    push(cs);
    sub_71b1(); // 06c1:05a1
    sp = bp;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_73fd;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7292(); // 06c1:0682
    sp = bp;
    if (ax)
        goto loc_7421;
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp = bp;
loc_73fd: // 06c1:07ed
    push(ds);
    ax = 0x0546;
    push(ax);
    push(cs);
    sub_71b1(); // 06c1:05a1
    sp = bp;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_742d;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7292(); // 06c1:0682
    sp = bp;
    if (!ax)
        goto loc_7425;
loc_7421: // 06c1:0811
    ax = si;
    goto loc_7430;
loc_7425: // 06c1:0815
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp = bp;
loc_742d: // 06c1:081d
    ax = 0xffff;
loc_7430: // 06c1:0820
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_7433() // 06c1:0823
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    if (memoryAGet16(ss, bp + 8) == 0x0000)
        goto loc_7495;
    push(ds);
    ax = 0x0551;
    push(ax);
    push(cs);
    sub_7221(); // 06c1:0611
    sp = bp;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_746c;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7292(); // 06c1:0682
    sp = bp;
    if (!ax)
        goto loc_7464;
    goto loc_74e5;
loc_7464: // 06c1:0854
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp = bp;
loc_746c: // 06c1:085c
    push(ds);
    ax = 0x055c;
    push(ax);
    push(cs);
    sub_7221(); // 06c1:0611
    sp = bp;
    si = ax;
    ax = si;
    if ((short)ax >= 0)
        goto loc_7482;
    goto loc_74f1;
loc_7482: // 06c1:0872
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7292(); // 06c1:0682
    sp = bp;
    if (ax)
        goto loc_74e5;
    goto loc_74e9;
loc_7495: // 06c1:0885
    push(ds);
    ax = 0x0567;
    push(ax);
    push(cs);
    sub_7221(); // 06c1:0611
    sp = bp;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_74c1;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7292(); // 06c1:0682
    sp = bp;
    if (ax)
        goto loc_74e5;
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp = bp;
loc_74c1: // 06c1:08b1
    push(ds);
    ax = 0x0572;
    push(ax);
    push(cs);
    sub_7221(); // 06c1:0611
    sp = bp;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_74f1;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7292(); // 06c1:0682
    sp = bp;
    if (!ax)
        goto loc_74e9;
loc_74e5: // 06c1:08d5
    ax = si;
    goto loc_74f4;
loc_74e9: // 06c1:08d9
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp = bp;
loc_74f1: // 06c1:08e1
    ax = 0xffff;
loc_74f4: // 06c1:08e4
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_74f7() // 06c1:08e7
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp = bp;
    ax = memoryAGet16(ds, 0x87de);
    ax |= memoryAGet16(ds, 0x87e0);
    if (!ax)
        goto loc_751c;
    push(memoryAGet16(ds, 0x87e0));
    push(memoryAGet16(ds, 0x87de));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp = bp;
loc_751c: // 06c1:090c
    memoryASet16(ds, 0x87e0, 0x0000);
    memoryASet16(ds, 0x87de, 0x0000);
    memoryASet16(ds, 0x919a, 0x0000);
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_7530() // 06c1:0920
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x002c;
    di = 0;
    memoryASet(ss, bp - 44, 0x00);
    if (memoryAGet(ss, bp + 14) == 0x00)
        goto loc_756a;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_7567;
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_7567;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_7567;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_7567;
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_756a;
loc_7567: // 06c1:0957
    di = 0x0001;
loc_756a: // 06c1:095a
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x06c1);
    sp += 0x0008;
    si = 0xffff;
    memoryASet16(ds, 0x87ca, 0x0000);
    memoryASet16(ds, 0x87c8, 0x0000);
    bx = 0;
    es = bx;
    memoryASet16(ds, 0x87e0, es);
    memoryASet16(ds, 0x87de, bx);
loc_7598: // 06c1:0988
    if ((short)si < 0)
        goto loc_759f;
    goto loc_7652;
loc_759f: // 06c1:098f
    memoryASet16(ds, 0x87da, 0x0000);
    if (memoryAGet16(ds, 0x03fe) != 0x0001)
        goto loc_75e1;
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(di);
    push(cs);
    sub_736f(); // 06c1:075f
    sp += 0x0006;
    si = ax;
    if ((short)si >= 0)
        goto loc_760d;
    if (memoryAGet(ds, 0x92b4) <= 0x01)
        goto loc_760d;
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(di);
    push(cs);
    sub_7433(); // 06c1:0823
    sp += 0x0006;
    si = ax;
    if ((short)si < 0)
        goto loc_760d;
    memoryASet16(ds, 0x03fe, 0x0002);
    goto loc_760d;
loc_75e1: // 06c1:09d1
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(di);
    push(cs);
    sub_7433(); // 06c1:0823
    sp += 0x0006;
    si = ax;
    if ((short)si >= 0)
        goto loc_760d;
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(di);
    push(cs);
    sub_736f(); // 06c1:075f
    sp += 0x0006;
    si = ax;
    if ((short)si < 0)
        goto loc_760d;
    memoryASet16(ds, 0x03fe, 0x0001);
loc_760d: // 06c1:09fd
    if ((short)si < 0)
        goto loc_7614;
    goto loc_7598;
loc_7614: // 06c1:0a04
    if (memoryAGet(ds, 0x92b4) != 0x01)
        goto loc_7623;
    if (memoryAGet16(ds, 0x87da) & 0x0001)
        goto loc_763a;
loc_7623: // 06c1:0a13
    if (memoryAGet(ds, 0x92b4) <= 0x01)
        goto loc_7646;
    if (!(memoryAGet16(ds, 0x87da) & 0x0001))
        goto loc_7646;
    if (!(memoryAGet16(ds, 0x87da) & 0x0002))
        goto loc_7646;
loc_763a: // 06c1:0a2a
    al = 0x01;
    push(ax);
    push(cs);
    sub_6fe0(); // 06c1:03d0
    sp++;
    sp++;
    goto loc_7598;
loc_7646: // 06c1:0a36
    al = 0x00;
    push(ax);
    push(cs);
    sub_6fe0(); // 06c1:03d0
    sp++;
    sp++;
    goto loc_7598;
loc_7652: // 06c1:0a42
    ax = 0;
    memoryASet16(ds, 0x87e2, ax);
    memoryASet16(ds, 0x87d0, ax);
    memoryASet16(ds, 0x87d8, ax);
    ax = memoryAGet16(ds, 0x8b8c);
    ax += 0x012c;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ds, 0x87e0, dx);
    memoryASet16(ds, 0x87de, ax);
    if (memoryAGet16(ds, 0x919a) != 0x0000)
        goto loc_767c;
    goto loc_7794;
loc_767c: // 06c1:0a6c
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x87c1;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    al = memoryAGet(ds, 0x87c1);
    cbw();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    ax &= 0x00ff;
    dx &= 0x0000;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ds, 0x87d4, dx);
    memoryASet16(ds, 0x87d2, ax);
    cx = 0x0008;
    push(cs);
    cs = 0x01ed;
    sub_20cf(); // 01ed:01ff
    assert(cs == 0x06c1);
    memoryASet16(ds, 0x87d4, dx);
    memoryASet16(ds, 0x87d2, ax);
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x87c1;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    al = memoryAGet(ds, 0x87c1);
    cbw();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    ax &= 0x00ff;
    dx &= 0x0000;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    dx = memoryAGet16(ds, 0x87d4);
    ax = memoryAGet16(ds, 0x87d2);
    flags.carry = (ax + memoryAGet16(ss, bp - 4)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 4);
    dx += memoryAGet16(ss, bp - 2) + flags.carry;
    memoryASet16(ds, 0x87d4, dx);
    memoryASet16(ds, 0x87d2, ax);
    cx = 0x0008;
    push(cs);
    cs = 0x01ed;
    sub_20cf(); // 01ed:01ff
    assert(cs == 0x06c1);
    memoryASet16(ds, 0x87d4, dx);
    memoryASet16(ds, 0x87d2, ax);
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x87c1;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    al = memoryAGet(ds, 0x87c1);
    cbw();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    ax &= 0x00ff;
    dx &= 0x0000;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    dx = memoryAGet16(ds, 0x87d4);
    ax = memoryAGet16(ds, 0x87d2);
    flags.carry = (ax + memoryAGet16(ss, bp - 4)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 4);
    dx += memoryAGet16(ss, bp - 2) + flags.carry;
    memoryASet16(ds, 0x87d4, dx);
    memoryASet16(ds, 0x87d2, ax);
    cx = 0x0008;
    push(cs);
    cs = 0x01ed;
    sub_20cf(); // 01ed:01ff
    assert(cs == 0x06c1);
    memoryASet16(ds, 0x87d4, dx);
    memoryASet16(ds, 0x87d2, ax);
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x87c1;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    al = memoryAGet(ds, 0x87c1);
    cbw();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    ax &= 0x00ff;
    dx &= 0x0000;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    dx = memoryAGet16(ds, 0x87d4);
    ax = memoryAGet16(ds, 0x87d2);
    flags.carry = (ax + memoryAGet16(ss, bp - 4)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 4);
    dx += memoryAGet16(ss, bp - 2) + flags.carry;
    memoryASet16(ds, 0x87d4, dx);
    memoryASet16(ds, 0x87d2, ax);
loc_7794: // 06c1:0b84
    ax = si;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_779c() // 06c1:0b8c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    memoryASet16(ss, bp - 14, ax);
    ax = 0x0002;
    push(ax);
    push(ss);
    ax = bp - 0x4;
    push(ax);
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    dx = memoryAGet16(ds, 0x87ce);
    ax = memoryAGet16(ds, 0x87cc);
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ds, 0x8dca, dx);
    memoryASet16(ds, 0x8dc8, ax);
    ax |= dx;
    if (ax)
        goto loc_77f5;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_77f5: // 06c1:0be5
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ds, 0x8dca));
    push(memoryAGet16(ds, 0x8dc8));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    bx = memoryAGet16(ds, 0x8dc8);
    es = memoryAGet16(ds, 0x8dc8 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    flags.carry = (ax + 0xfffe) >= 0x10000;
    ax += 0xfffe;
    dx += 0xffff + flags.carry;
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
loc_782f: // 06c1:0c1f
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    flags.carry = memoryAGet16(ss, bp - 12) < 0x0001;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - 0x0001);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) - flags.carry);
    dx |= ax;
    if (!dx)
        goto loc_7859;
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 1, al);
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) - 0x32);
    al = memoryAGet(ss, bp - 1);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
    goto loc_782f;
loc_7859: // 06c1:0c49
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ds, 0x8c56, dx);
    memoryASet16(ds, 0x8c54, ax);
    ax |= dx;
    if (ax)
        goto loc_787c;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_787c: // 06c1:0c6c
    bx = memoryAGet16(ds, 0x8dc8);
    es = memoryAGet16(ds, 0x8dc8 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    si = 0;
    bx = memoryAGet16(ds, 0x8c54);
    es = memoryAGet16(ds, 0x8c54 + 2);
    memoryASet16(es, bx, si);
    di = 0x0001;
    goto loc_78b5;
loc_7894: // 06c1:0c84
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_78a3;
    si++;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
    goto loc_7894;
loc_78a3: // 06c1:0c93
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
    si++;
    ax = di;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x8c54);
    es = memoryAGet16(ds, 0x8c54 + 2);
    bx += ax;
    memoryASet16(es, bx, si);
    di++;
loc_78b5: // 06c1:0ca5
    if (di < memoryAGet16(ss, bp - 4))
        goto loc_7894;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_7bd0() // 06c1:0fc0
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = 0;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    flags.carry = (ax + memoryAGet16(ss, bp - 4)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 4);
    tl = (dx + memoryAGet16(ss, bp - 2) + flags.carry) >= 0x10000;
    dx += memoryAGet16(ss, bp - 2) + flags.carry;
    flags.carry = tl;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    flags.zero = !dx;
    if (flags.carry)
        goto loc_7c0e;
    if (!flags.carry && !flags.zero)
        goto loc_7c09;
    if (ax <= 0xfa00)
        goto loc_7c0e;
loc_7c09: // 06c1:0ff9
    ax = 0x0001;
    goto loc_7c10;
loc_7c0e: // 06c1:0ffe
    ax = 0;
loc_7c10: // 06c1:1000
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_7c14() // 06c1:1004
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0044;
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_7c41;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    dx = memoryAGet16(es, bx + 8);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ss, bp - 12, dx);
    memoryASet16(ss, bp - 14, ax);
    goto loc_7c4b;
loc_7c41: // 06c1:1031
    memoryASet16(ss, bp - 12, 0x0000);
    memoryASet16(ss, bp - 14, 0x0000);
loc_7c4b: // 06c1:103b
    al = 0x01;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    memoryASet16(ss, bp - 10, ax);
    push(ax);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 34, al);
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 35, al);
    al = memoryAGet(ss, bp - 34);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 35);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 22, ax);
    ax += memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 20, ax);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 32, ax);
    goto loc_80c1;
loc_7c9d: // 06c1:108d
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 34, al);
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 35, al);
    al = memoryAGet(ss, bp - 34);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 35);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx, ax);
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 34, al);
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 35, al);
    al = memoryAGet(ss, bp - 34);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 35);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 2, ax);
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 34, al);
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 35, al);
    al = memoryAGet(ss, bp - 34);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 35);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 4, ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    if (memoryAGet16(es, bx + 4) == 0x0000)
        goto loc_7d70;
    memoryASet16(ds, 0x87e2, 0x0001);
    goto loc_7d76;
loc_7d70: // 06c1:1160
    memoryASet16(ds, 0x87e2, 0x0000);
loc_7d76: // 06c1:1166
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 28, ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    al = memoryAGet(es, bx);
    al &= 0x07;
    memoryASet(ss, bp - 33, al);
    if (memoryAGet(ss, bp - 33) == 0x00)
        goto loc_7db8;
    al = 0x08;
    al -= memoryAGet(ss, bp - 33);
    memoryASet(ss, bp - 33, al);
    memoryASet16(ss, bp - 28, memoryAGet16(ss, bp - 28) + 1);
loc_7db8: // 06c1:11a8
    ax = memoryAGet16(ss, bp - 28);
    push(ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 14, ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    mul(memoryAGet16(ss, bp - 28));
    memoryASet16(ss, bp - 26, ax);
    dx = 0x0006;
    mul(dx);
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 66, dx);
    memoryASet16(ss, bp - 68, ax);
    bx = memoryAGet16(ss, bp - 68);
    es = memoryAGet16(ss, bp - 68 + 2);
    memoryASet16(ss, bp - 38, es);
    memoryASet16(ss, bp - 40, bx);
    bx = ax;
    bx += memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 62, es);
    memoryASet16(ss, bp - 64, bx);
    bx += memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 58, es);
    memoryASet16(ss, bp - 60, bx);
    bx += memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 54, es);
    memoryASet16(ss, bp - 56, bx);
    bx += memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 50, es);
    memoryASet16(ss, bp - 52, bx);
    bx += memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 46, es);
    memoryASet16(ss, bp - 48, bx);
    ax = memoryAGet16(ss, bp - 26);
    dx = 0x0006;
    mul(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 66));
    push(memoryAGet16(ss, bp - 68));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    memoryASet16(ss, bp - 30, 0x0000);
    goto loc_7ee9;
loc_7e53: // 06c1:1243
    if (memoryAGet(ss, bp - 33) != 0x00)
        goto loc_7e5c;
    goto loc_7ee6;
loc_7e5c: // 06c1:124c
    ax = memoryAGet16(ss, bp - 30);
    mul(memoryAGet16(ss, bp - 28));
    ax += memoryAGet16(ss, bp - 28);
    ax--;
    dx = 0;
    memoryASet16(ss, bp - 16, dx);
    memoryASet16(ss, bp - 18, ax);
    al = memoryAGet(ss, bp - 33);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 68);
    es = memoryAGet16(ss, bp - 68 + 2);
    bx += memoryAGet16(ss, bp - 18);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 33);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 64);
    es = memoryAGet16(ss, bp - 64 + 2);
    bx += memoryAGet16(ss, bp - 18);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 33);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 60);
    es = memoryAGet16(ss, bp - 60 + 2);
    bx += memoryAGet16(ss, bp - 18);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 33);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 56);
    es = memoryAGet16(ss, bp - 56 + 2);
    bx += memoryAGet16(ss, bp - 18);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 33);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 52);
    es = memoryAGet16(ss, bp - 52 + 2);
    bx += memoryAGet16(ss, bp - 18);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 33);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    bx += memoryAGet16(ss, bp - 18);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
loc_7ee6: // 06c1:12d6
    memoryASet16(ss, bp - 30, memoryAGet16(ss, bp - 30) + 1);
loc_7ee9: // 06c1:12d9
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    if (ax <= memoryAGet16(ss, bp - 30))
        goto loc_7f03;
    goto loc_7e53;
loc_7f03: // 06c1:12f3
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 30, ax);
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x06c1);
    si = ax;
    ax = memoryAGet16(ss, bp - 26);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    push(ax);
    push(si);
    push(cs);
    sub_7bd0(); // 06c1:0fc0
    sp += 0x0004;
    if (!ax)
        goto loc_7f5c;
    memoryASet16(ss, bp - 30, memoryAGet16(ss, bp - 30) + 1);
    si = 0;
    ax = memoryAGet16(ss, bp - 30);
    dx = 0;
    cx = si;
    bx = 0xfa00;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 12, dx);
    memoryASet16(ss, bp - 14, ax);
loc_7f5c: // 06c1:134c
    bx = memoryAGet16(ss, bp - 30);
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 35374);
    es = memoryAGet16(ds, tx + 35374 + 2);
    memoryASet16(ss, bp - 42, es);
    memoryASet16(ss, bp - 44, bx);
    memoryASet16(ss, bp - 44, memoryAGet16(ss, bp - 44) + si);
    dx = memoryAGet16(ss, bp - 42);
    ax = memoryAGet16(ss, bp - 44);
    push(dx);
    push(ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 12, dx);
    memoryASet16(es, bx + 10, ax);
    dx = memoryAGet16(ss, bp - 42);
    ax = memoryAGet16(ss, bp - 44);
    push(dx);
    push(ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 18, dx);
    memoryASet16(es, bx + 16, ax);
    memoryASet16(ss, bp - 30, 0x0000);
    goto loc_8074;
loc_7fb8: // 06c1:13a8
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 7, al);
    memoryASet16(ss, bp - 48, memoryAGet16(ss, bp - 48) + 1);
    bx = memoryAGet16(ss, bp - 68);
    es = memoryAGet16(ss, bp - 68 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 6, al);
    memoryASet16(ss, bp - 68, memoryAGet16(ss, bp - 68) + 1);
    bx = memoryAGet16(ss, bp - 64);
    es = memoryAGet16(ss, bp - 64 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 5, al);
    memoryASet16(ss, bp - 64, memoryAGet16(ss, bp - 64) + 1);
    bx = memoryAGet16(ss, bp - 60);
    es = memoryAGet16(ss, bp - 60 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 4, al);
    memoryASet16(ss, bp - 60, memoryAGet16(ss, bp - 60) + 1);
    bx = memoryAGet16(ss, bp - 56);
    es = memoryAGet16(ss, bp - 56 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 3, al);
    memoryASet16(ss, bp - 56, memoryAGet16(ss, bp - 56) + 1);
    bx = memoryAGet16(ss, bp - 52);
    es = memoryAGet16(ss, bp - 52 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 2, al);
    memoryASet16(ss, bp - 52, memoryAGet16(ss, bp - 52) + 1);
    di = 0;
    goto loc_806c;
loc_8004: // 06c1:13f4
    si = 0x0080;
    cx = di;
    si = sar(si, cl);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    if (!(si & ax))
        goto loc_801a;
    memoryASet(ss, bp - 1, 0x80);
    goto loc_801e;
loc_801a: // 06c1:140a
    memoryASet(ss, bp - 1, 0x00);
loc_801e: // 06c1:140e
    al = memoryAGet(ss, bp - 6);
    ah = 0x00;
    if (!(si & ax))
        goto loc_802b;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) | 0x01);
loc_802b: // 06c1:141b
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    if (!(si & ax))
        goto loc_8038;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) | 0x02);
loc_8038: // 06c1:1428
    al = memoryAGet(ss, bp - 4);
    ah = 0x00;
    if (!(si & ax))
        goto loc_8045;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) | 0x04);
loc_8045: // 06c1:1435
    al = memoryAGet(ss, bp - 3);
    ah = 0x00;
    if (!(si & ax))
        goto loc_8052;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) | 0x08);
loc_8052: // 06c1:1442
    al = memoryAGet(ss, bp - 2);
    ah = 0x00;
    if (!(si & ax))
        goto loc_805f;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) | 0x10);
loc_805f: // 06c1:144f
    al = memoryAGet(ss, bp - 1);
    bx = memoryAGet16(ss, bp - 44);
    es = memoryAGet16(ss, bp - 44 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 44, memoryAGet16(ss, bp - 44) + 1);
    di++;
loc_806c: // 06c1:145c
    if (di < 0x0008)
        goto loc_8004;
    memoryASet16(ss, bp - 30, memoryAGet16(ss, bp - 30) + 1);
loc_8074: // 06c1:1464
    ax = memoryAGet16(ss, bp - 30);
    if (ax >= memoryAGet16(ss, bp - 26))
        goto loc_807f;
    goto loc_7fb8;
loc_807f: // 06c1:146f
    ax = memoryAGet16(ss, bp - 26);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    dx = 0;
    flags.carry = (ax + memoryAGet16(ss, bp - 14)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 14);
    dx += memoryAGet16(ss, bp - 12) + flags.carry;
    memoryASet16(ss, bp - 12, dx);
    memoryASet16(ss, bp - 14, ax);
    push(dx);
    push(ax);
    ax = memoryAGet16(ss, bp - 32);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 8, dx);
    memoryASet16(es, bx + 6, ax);
    push(memoryAGet16(ss, bp - 38));
    push(memoryAGet16(ss, bp - 40));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    memoryASet16(ss, bp - 32, memoryAGet16(ss, bp - 32) + 1);
loc_80c1: // 06c1:14b1
    ax = memoryAGet16(ss, bp - 32);
    if (ax >= memoryAGet16(ss, bp - 20))
        goto loc_80cc;
    goto loc_7c9d;
loc_80cc: // 06c1:14bc
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    ax = memoryAGet16(ss, bp - 24);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_80de() // 06c1:14ce
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0038;
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_810b;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    dx = memoryAGet16(es, bx + 8);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    goto loc_8115;
loc_810b: // 06c1:14fb
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp - 8, 0x0000);
loc_8115: // 06c1:1505
    al = 0x01;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    memoryASet16(ss, bp - 4, ax);
    push(ax);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 26, al);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 27, al);
    al = memoryAGet(ss, bp - 26);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 27);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 16, ax);
    ax += memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 14, ax);
    di = memoryAGet16(ss, bp - 16);
    goto loc_8510;
loc_8164: // 06c1:1554
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 26, al);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 27, al);
    al = memoryAGet(ss, bp - 26);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 27);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 26, al);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 27, al);
    al = memoryAGet(ss, bp - 26);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 27);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 2, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 26, al);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 27, al);
    al = memoryAGet(ss, bp - 26);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 27);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 4, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    if (memoryAGet16(es, bx + 4) == 0x0000)
        goto loc_8233;
    memoryASet16(ds, 0x87e2, 0x0001);
    goto loc_8239;
loc_8233: // 06c1:1623
    memoryASet16(ds, 0x87e2, 0x0000);
loc_8239: // 06c1:1629
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 22, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    al = memoryAGet(es, bx);
    al &= 0x07;
    memoryASet(ss, bp - 25, al);
    if (memoryAGet(ss, bp - 25) == 0x00)
        goto loc_8279;
    al = 0x08;
    al -= memoryAGet(ss, bp - 25);
    memoryASet(ss, bp - 25, al);
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_8279: // 06c1:1669
    ax = memoryAGet16(ss, bp - 22);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 14, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    mul(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 20, ax);
    dx = 0x0005;
    mul(dx);
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 54, dx);
    memoryASet16(ss, bp - 56, ax);
    bx = memoryAGet16(ss, bp - 56);
    es = memoryAGet16(ss, bp - 56 + 2);
    memoryASet16(ss, bp - 30, es);
    memoryASet16(ss, bp - 32, bx);
    bx = ax;
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 50, es);
    memoryASet16(ss, bp - 52, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 46, es);
    memoryASet16(ss, bp - 48, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 42, es);
    memoryASet16(ss, bp - 44, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 38, es);
    memoryASet16(ss, bp - 40, bx);
    ax = memoryAGet16(ss, bp - 20);
    dx = 0x0005;
    mul(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 54));
    push(memoryAGet16(ss, bp - 56));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 24, ax);
    si = 0;
    goto loc_8396;
loc_831a: // 06c1:170a
    if (memoryAGet(ss, bp - 25) == 0x00)
        goto loc_8395;
    ax = si;
    mul(memoryAGet16(ss, bp - 22));
    ax += memoryAGet16(ss, bp - 22);
    ax--;
    dx = 0;
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 56);
    es = memoryAGet16(ss, bp - 56 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 52);
    es = memoryAGet16(ss, bp - 52 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 44);
    es = memoryAGet16(ss, bp - 44 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 40);
    es = memoryAGet16(ss, bp - 40 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
loc_8395: // 06c1:1785
    si++;
loc_8396: // 06c1:1786
    if (si >= memoryAGet16(ss, bp - 24))
        goto loc_839e;
    goto loc_831a;
loc_839e: // 06c1:178e
    if (memoryAGet(ss, bp + 16) != 0x00)
        goto loc_83b1;
    ax = memoryAGet16(ss, bp - 20);
    dx = 0x0005;
    mul(dx);
    memoryASet16(ss, bp - 2, ax);
    goto loc_83c5;
loc_83b1: // 06c1:17a1
    ax = memoryAGet16(ss, bp - 20);
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 38, 0x0000);
    memoryASet16(ss, bp - 40, 0x0000);
loc_83c5: // 06c1:17b5
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x06c1);
    si = ax;
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 24, ax);
    push(memoryAGet16(ss, bp - 2));
    push(ax);
    push(cs);
    sub_7bd0(); // 06c1:0fc0
    sp += 0x0004;
    if (!ax)
        goto loc_8417;
    si++;
    memoryASet16(ss, bp - 24, 0x0000);
    ax = si;
    dx = 0;
    cx = 0;
    bx = 0xfa00;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
loc_8417: // 06c1:1807
    bx = si;
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 35374);
    es = memoryAGet16(ds, tx + 35374 + 2);
    memoryASet16(ss, bp - 34, es);
    memoryASet16(ss, bp - 36, bx);
    ax = memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + ax);
    dx = memoryAGet16(ss, bp - 34);
    ax = memoryAGet16(ss, bp - 36);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 12, dx);
    memoryASet16(es, bx + 10, ax);
    dx = memoryAGet16(ss, bp - 34);
    ax = memoryAGet16(ss, bp - 36);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 18, dx);
    memoryASet16(es, bx + 16, ax);
    si = 0;
    goto loc_84d2;
loc_846f: // 06c1:185f
    ax = memoryAGet16(ss, bp - 40);
    ax |= memoryAGet16(ss, bp - 38);
    if (!ax)
        goto loc_8489;
    bx = memoryAGet16(ss, bp - 40);
    es = memoryAGet16(ss, bp - 40 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 36);
    es = memoryAGet16(ss, bp - 36 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 40, memoryAGet16(ss, bp - 40) + 1);
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + 1);
loc_8489: // 06c1:1879
    bx = memoryAGet16(ss, bp - 56);
    es = memoryAGet16(ss, bp - 56 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 36);
    es = memoryAGet16(ss, bp - 36 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 56, memoryAGet16(ss, bp - 56) + 1);
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + 1);
    bx = memoryAGet16(ss, bp - 52);
    es = memoryAGet16(ss, bp - 52 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 36);
    es = memoryAGet16(ss, bp - 36 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 52, memoryAGet16(ss, bp - 52) + 1);
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + 1);
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 36);
    es = memoryAGet16(ss, bp - 36 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 48, memoryAGet16(ss, bp - 48) + 1);
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + 1);
    bx = memoryAGet16(ss, bp - 44);
    es = memoryAGet16(ss, bp - 44 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 36);
    es = memoryAGet16(ss, bp - 36 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 44, memoryAGet16(ss, bp - 44) + 1);
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + 1);
    si++;
loc_84d2: // 06c1:18c2
    if (si < memoryAGet16(ss, bp - 20))
        goto loc_846f;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0;
    flags.carry = (ax + memoryAGet16(ss, bp - 8)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 8);
    dx += memoryAGet16(ss, bp - 6) + flags.carry;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 8, dx);
    memoryASet16(es, bx + 6, ax);
    push(memoryAGet16(ss, bp - 30));
    push(memoryAGet16(ss, bp - 32));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    di++;
loc_8510: // 06c1:1900
    if (di >= memoryAGet16(ss, bp - 14))
        goto loc_8518;
    goto loc_8164;
loc_8518: // 06c1:1908
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    ax = memoryAGet16(ss, bp - 18);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_852f() // 06c1:191f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0026;
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_855c;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    dx = memoryAGet16(es, bx + 8);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    goto loc_8566;
loc_855c: // 06c1:194c
    memoryASet16(ss, bp - 8, 0x0000);
    memoryASet16(ss, bp - 10, 0x0000);
loc_8566: // 06c1:1956
    al = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    memoryASet16(ss, bp - 2, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x19;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 24);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 14, ax);
    ax += memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 12, ax);
    di = memoryAGet16(ss, bp - 14);
    goto loc_88ca;
loc_85c5: // 06c1:19b5
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x19;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 24);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x19;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 24);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 2, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x19;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 24);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 4, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 20, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    al = memoryAGet(es, bx);
    al &= 0x07;
    memoryASet(ss, bp - 23, al);
    if (memoryAGet(ss, bp - 23) == 0x00)
        goto loc_86e2;
    al = 0x08;
    al -= memoryAGet(ss, bp - 23);
    memoryASet(ss, bp - 23, al);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 1);
loc_86e2: // 06c1:1ad2
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_86f3;
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_86f3;
    goto loc_870c;
loc_86f3: // 06c1:1ae3
    ax = memoryAGet16(ss, bp - 20);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 14, ax);
    goto loc_8726;
loc_870c: // 06c1:1afc
    ax = memoryAGet16(ss, bp - 20);
    ax <<= 1;
    ax <<= 1;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 14, ax);
loc_8726: // 06c1:1b16
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    mul(memoryAGet16(ss, bp - 20));
    memoryASet16(ss, bp - 18, ax);
    ax++;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 36, dx);
    memoryASet16(ss, bp - 38, ax);
    bx = memoryAGet16(ss, bp - 38);
    es = memoryAGet16(ss, bp - 38 + 2);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    ax |= dx;
    if (ax)
        goto loc_8764;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_8764: // 06c1:1b54
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 36));
    push(memoryAGet16(ss, bp - 38));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    si = 0;
    goto loc_87ab;
loc_877c: // 06c1:1b6c
    if (memoryAGet(ss, bp - 23) != 0x00)
        goto loc_8785;
    goto loc_87aa;
loc_8785: // 06c1:1b75
    ax = si;
    mul(memoryAGet16(ss, bp - 20));
    ax += memoryAGet16(ss, bp - 20);
    ax--;
    dx = 0;
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, ax);
    al = memoryAGet(ss, bp - 23);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 38);
    es = memoryAGet16(ss, bp - 38 + 2);
    bx += memoryAGet16(ss, bp - 6);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
loc_87aa: // 06c1:1b9a
    si++;
loc_87ab: // 06c1:1b9b
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    if (ax <= si)
        goto loc_87c3;
    goto loc_877c;
loc_87c3: // 06c1:1bb3
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x06c1);
    si = ax;
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 22, ax);
    push(memoryAGet16(ss, bp - 18));
    push(ax);
    push(cs);
    sub_7bd0(); // 06c1:0fc0
    sp += 0x0004;
    if (ax)
        goto loc_87fe;
    goto loc_8818;
loc_87fe: // 06c1:1bee
    si++;
    memoryASet16(ss, bp - 22, 0x0000);
    ax = si;
    dx = 0;
    cx = 0;
    bx = 0xfa00;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
loc_8818: // 06c1:1c08
    bx = si;
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 35374);
    es = memoryAGet16(ds, tx + 35374 + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 30, memoryAGet16(ss, bp - 30) + ax);
    dx = memoryAGet16(ss, bp - 28);
    ax = memoryAGet16(ss, bp - 30);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 12, dx);
    memoryASet16(es, bx + 10, ax);
    dx = memoryAGet16(ss, bp - 28);
    ax = memoryAGet16(ss, bp - 30);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 18, dx);
    memoryASet16(es, bx + 16, ax);
    bx = memoryAGet16(ss, bp - 34);
    es = memoryAGet16(ss, bp - 34 + 2);
    memoryASet16(ss, bp - 36, es);
    memoryASet16(ss, bp - 38, bx);
    si = 0;
    goto loc_888c;
loc_8879: // 06c1:1c69
    bx = memoryAGet16(ss, bp - 38);
    es = memoryAGet16(ss, bp - 38 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 30);
    es = memoryAGet16(ss, bp - 30 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 38, memoryAGet16(ss, bp - 38) + 1);
    memoryASet16(ss, bp - 30, memoryAGet16(ss, bp - 30) + 1);
    si++;
loc_888c: // 06c1:1c7c
    if (si < memoryAGet16(ss, bp - 18))
        goto loc_8879;
    ax = memoryAGet16(ss, bp - 18);
    dx = 0;
    flags.carry = (ax + memoryAGet16(ss, bp - 10)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 10);
    dx += memoryAGet16(ss, bp - 8) + flags.carry;
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 8, dx);
    memoryASet16(es, bx + 6, ax);
    push(memoryAGet16(ss, bp - 32));
    push(memoryAGet16(ss, bp - 34));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    di++;
loc_88ca: // 06c1:1cba
    if (di >= memoryAGet16(ss, bp - 12))
        goto loc_88d2;
    goto loc_85c5;
loc_88d2: // 06c1:1cc2
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    ax = memoryAGet16(ss, bp - 16);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_88e4() // 06c1:1cd4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_88fc() // 06c1:1cec
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000a;
    ax = 0x8f6c;
    dx = ds;
    push(ax);
    ax = 0x8f6c;
    dx = ds;
    push(dx);
    push(cs);
    cs = 0x0ba1;
    sub_c7ba(); // 0ba1:0daa
    assert(cs == 0x06c1);
    sp += 0x0004;
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_894f;
    al = 0x05;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x01;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x03;
    dx = 0x03ce;
    out(dx, al);
    al = 0x00;
    dx = 0x03cf;
    out(dx, al);
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    al = 0xff;
    dx = 0x03cf;
    out(dx, al);
loc_894f: // 06c1:1d3f
    di = 0;
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
    ax = 0x00a0;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, ax);
    al = memoryAGet(ss, bp + 12);
    ah = 0x00;
    memoryASet16(ds, 0x87e2, ax);
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_8a6c;
loc_897b: // 06c1:1d6b
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_89b4;
    si = 0;
    goto loc_89ab;
loc_8986: // 06c1:1d76
    al = 0x02;
    dx = 0x03c4;
    out(dx, al);
    al = 0x01;
    cx = si;
    al <<= cl;
    dx = 0x03c5;
    out(dx, al);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    si++;
loc_89ab: // 06c1:1d9b
    if (si < 0x0004)
        goto loc_8986;
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 0x0028);
loc_89b4: // 06c1:1da4
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_89c2;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_8a05;
loc_89c2: // 06c1:1db2
    ax = 0x00a0;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 8);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    ax = memoryAGet16(ss, bp - 4);
    push(ax);
    push(cs);
    cs = 0x0ba1;
    sub_c9bc(); // 0ba1:0fac
    assert(cs == 0x06c1);
    sp += 0x000a;
    if (di)
        goto loc_89fe;
    di = 0x0001;
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 0x2000);
    goto loc_8a05;
loc_89fe: // 06c1:1dee
    di = 0;
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) - 0x1fb0);
loc_8a05: // 06c1:1df5
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_8a4f;
    ax = 0x00a0;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    ax = memoryAGet16(ss, bp - 4);
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 8);
    push(ax);
    push(cs);
    cs = 0x0e11;
    sub_e8f3(); // 0e11:07e3
    assert(cs == 0x06c1);
    sp += 0x000a;
    di++;
    di &= 0x0003;
    if (di)
        goto loc_8a4a;
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) - 0x5f60);
    goto loc_8a4f;
loc_8a4a: // 06c1:1e3a
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 0x2000);
loc_8a4f: // 06c1:1e3f
    if (memoryAGet(ss, bp + 14) == 0x00)
        goto loc_8a69;
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
loc_8a69: // 06c1:1e59
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_8a6c: // 06c1:1e5c
    if (memoryAGet16(ss, bp - 2) >= 0x00c8)
        goto loc_8a76;
    goto loc_897b;
loc_8a76: // 06c1:1e66
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_8a8a() // 06c1:1e7a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x002a;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ss, bp - 16, 0x0000);
    memoryASet(ds, 0x8de6, 0x00);
    if (memoryAGet(ds, 0x8f67) != 0x00)
        goto loc_8ac1;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_6d22(); // 06c1:0112
    sp += 0x0004;
loc_8ac1: // 06c1:1eb1
    al = 0x01;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    si = ax;
    memoryASet(ss, bp - 18, 0x00);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(si);
    push(cs);
    sub_88e4(); // 06c1:1cd4
    sp += 0x0006;
    di = 0;
    goto loc_8af0;
loc_8ae8: // 06c1:1ed8
    push(si);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    di++;
loc_8af0: // 06c1:1ee0
    if (di < 0x0004)
        goto loc_8ae8;
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(si);
    push(cs);
    sub_88e4(); // 06c1:1cd4
    sp += 0x0006;
loc_8b02: // 06c1:1ef2
    push(ds);
    ax = 0x0585;
    push(ax);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(cs);
    cs = 0x1f63;
    sub_1f63a(); // 1f63:000a
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (ax)
        goto loc_8b1b;
    goto loc_8ce1;
loc_8b1b: // 06c1:1f0b
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(si);
    push(cs);
    sub_88e4(); // 06c1:1cd4
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x7;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    dx = 0;
    mul(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x7;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    dx = 0;
    mul(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + memoryAGet16(ss, bp - 16)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 16);
    dx += memoryAGet16(ss, bp - 14) + flags.carry;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x7;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + memoryAGet16(ss, bp - 16)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 16);
    dx += memoryAGet16(ss, bp - 14) + flags.carry;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x7;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + memoryAGet16(ss, bp - 16)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 16);
    dx += memoryAGet16(ss, bp - 14) + flags.carry;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    push(ds);
    ax = 0x058a;
    push(ax);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(cs);
    cs = 0x1f63;
    sub_1f63a(); // 1f63:000a
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (ax)
        goto loc_8bec;
    ax = 0x0014;
    push(ax);
    push(ss);
    ax = bp - 0x2a;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ss, bp - 16, 0x0000);
loc_8bec: // 06c1:1fdc
    push(ds);
    ax = 0x058f;
    push(ax);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(cs);
    cs = 0x1f63;
    sub_1f63a(); // 1f63:000a
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (ax)
        goto loc_8c18;
    dx = memoryAGet16(ss, bp - 14);
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ss, bp - 16, 0x0000);
loc_8c18: // 06c1:2008
    push(ds);
    ax = 0x0594;
    push(ax);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(cs);
    cs = 0x1f63;
    sub_1f63a(); // 1f63:000a
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (!ax)
        goto loc_8c31;
    goto loc_8cba;
loc_8c31: // 06c1:2021
    di = 0;
    goto loc_8c90;
loc_8c35: // 06c1:2025
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x1;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) >> 1);
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) >> 1);
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, di + 37300, al);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x1;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) >> 1);
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) >> 1);
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, di + 35434, al);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x1;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) >> 1);
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) >> 1);
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, di + 36414, al);
    di++;
loc_8c90: // 06c1:2080
    dx = 0;
    ax = 0x0003;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x06c1);
    bx = di;
    cx = 0;
    if (dx > cx)
        goto loc_8c35;
    if (dx != cx)
        goto loc_8cb0;
    if (ax > bx)
        goto loc_8c35;
loc_8cb0: // 06c1:20a0
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ss, bp - 16, 0x0000);
loc_8cba: // 06c1:20aa
    ax = memoryAGet16(ss, bp - 16);
    ax |= memoryAGet16(ss, bp - 14);
    if (ax)
        goto loc_8cc5;
    goto loc_8b02;
loc_8cc5: // 06c1:20b5
    ax = memoryAGet16(ss, bp - 16);
    ax |= memoryAGet16(ss, bp - 14);
    if (ax)
        goto loc_8cd0;
    goto loc_8b02;
loc_8cd0: // 06c1:20c0
    push(si);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    flags.carry = memoryAGet16(ss, bp - 16) < 0x0001;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) - 0x0001);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) - flags.carry);
    goto loc_8cc5;
loc_8ce1: // 06c1:20d1
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    al = memoryAGet(es, bx + 4);
    if (al != memoryAGet(ds, 0x8f66))
        goto loc_8d13;
    push(memoryAGet16(ds, 0x8bb2));
    push(memoryAGet16(ds, 0x8bb0));
    push(memoryAGet16(ss, bp + 16));
    push(bx);
    push(cs);
    cs = 0x023f;
    sub_30d5(); // 023f:0ce5
    assert(cs == 0x06c1);
    sp += 0x0008;
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_402c(); // 023f:1c3c
    assert(cs == 0x06c1);
    sp += 0x0006;
loc_8d13: // 06c1:2103
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    al = memoryAGet(ss, bp - 33);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 32);
    ah = 0x00;
    push(ax);
    push(si);
    push(cs);
    sync();
    sub_88fc(); // 06c1:1cec
    sp += 0x000a;
    push(si);
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_8d3a() // 06c1:212a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0018;
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_402c(); // 023f:1c3c
    assert(cs == 0x06c1);
    sp += 0x0006;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    al = 0x01;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    di = ax;
    memoryASet16(ss, bp - 16, 0x0000);
    goto loc_8e02;
loc_8d79: // 06c1:2169
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x8;
    push(ax);
    push(di);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x9;
    push(ax);
    push(di);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 8);
    ah = 0x00;
    memoryASet16(ss, bp - 14, ax);
    cx = 0x0008;
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) << cl);
    al = memoryAGet(ss, bp - 9);
    ah = 0x00;
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + ax);
    ax = memoryAGet16(ss, bp - 14);
    ax &= 0x0f00;
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) >> cl);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) << 1);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) << 1);
    al = memoryAGet(ss, bp - 12);
    bx = memoryAGet16(ss, bp - 16);
    memoryASet(ds, bx + 37300, al);
    ax = memoryAGet16(ss, bp - 14);
    ax &= 0x00f0;
    memoryASet16(ss, bp - 12, ax);
    cx = 0x0004;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) >> cl);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) << 1);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) << 1);
    al = memoryAGet(ss, bp - 12);
    memoryASet(ds, bx + 35434, al);
    ax = memoryAGet16(ss, bp - 14);
    ax &= 0x000f;
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) << 1);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) << 1);
    al = memoryAGet(ss, bp - 12);
    memoryASet(ds, bx + 36414, al);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
loc_8e02: // 06c1:21f2
    if (memoryAGet16(ss, bp - 16) >= 0x0020)
        goto loc_8e0b;
    goto loc_8d79;
loc_8e0b: // 06c1:21fb
    memoryASet(ds, 0x8de6, 0x00);
    memoryASet16(ss, bp - 16, 0x0000);
    goto loc_8e21;
loc_8e17: // 06c1:2207
    push(di);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
loc_8e21: // 06c1:2211
    if (memoryAGet16(ss, bp - 16) < 0x0004)
        goto loc_8e17;
    ax = 0x1388;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 18, dx);
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ds, 0x87e2, 0x0001);
    ax = 0x1388;
    push(ax);
    push(dx);
    push(memoryAGet16(ss, bp - 20));
    push(di);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    memoryASet16(ds, 0x87e2, 0x0000);
    push(di);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    push(di);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    push(di);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    push(di);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 16, 0x0000);
    memoryASet(ss, bp - 7, 0x01);
    goto loc_8f6e;
loc_8e7c: // 06c1:226c
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_8f62;
loc_8e90: // 06c1:2280
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_8f51;
loc_8e98: // 06c1:2288
    ax = memoryAGet16(ss, bp - 16);
    bx = memoryAGet16(ss, bp - 20);
    es = memoryAGet16(ss, bp - 20 + 2);
    bx += ax;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 6, al);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
    si = 0;
    goto loc_8f46;
loc_8eae: // 06c1:229e
    if (memoryAGet(ss, bp - 6) & 0x01)
        goto loc_8ebe;
    push(di);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 5, al);
loc_8ebe: // 06c1:22ae
    if (!(memoryAGet(ss, bp - 5) & 0x80))
        goto loc_8ecd;
    al = memoryAGet(ss, bp - 7);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
loc_8ecd: // 06c1:22bd
    if (!(memoryAGet(ss, bp - 5) & 0x40))
        goto loc_8edd;
    al = memoryAGet(ss, bp - 7);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    memoryASet(es, bx + 1, memoryAGet(es, bx + 1) | al);
loc_8edd: // 06c1:22cd
    if (!(memoryAGet(ss, bp - 5) & 0x20))
        goto loc_8eed;
    al = memoryAGet(ss, bp - 7);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    memoryASet(es, bx + 2, memoryAGet(es, bx + 2) | al);
loc_8eed: // 06c1:22dd
    if (!(memoryAGet(ss, bp - 5) & 0x10))
        goto loc_8efd;
    al = memoryAGet(ss, bp - 7);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    memoryASet(es, bx + 3, memoryAGet(es, bx + 3) | al);
loc_8efd: // 06c1:22ed
    if (!(memoryAGet(ss, bp - 5) & 0x08))
        goto loc_8f0d;
    al = memoryAGet(ss, bp - 7);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    memoryASet(es, bx + 4, memoryAGet(es, bx + 4) | al);
loc_8f0d: // 06c1:22fd
    if (!(memoryAGet(ss, bp - 5) & 0x04))
        goto loc_8f1d;
    al = memoryAGet(ss, bp - 7);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    memoryASet(es, bx + 5, memoryAGet(es, bx + 5) | al);
loc_8f1d: // 06c1:230d
    if (!(memoryAGet(ss, bp - 5) & 0x02))
        goto loc_8f2d;
    al = memoryAGet(ss, bp - 7);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    memoryASet(es, bx + 6, memoryAGet(es, bx + 6) | al);
loc_8f2d: // 06c1:231d
    if (!(memoryAGet(ss, bp - 5) & 0x01))
        goto loc_8f3d;
    al = memoryAGet(ss, bp - 7);
    bx = memoryAGet16(ss, bp - 24);
    es = memoryAGet16(ss, bp - 24 + 2);
    memoryASet(es, bx + 7, memoryAGet(es, bx + 7) | al);
loc_8f3d: // 06c1:232d
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + 0x0140);
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) >> 1);
    si++;
loc_8f46: // 06c1:2336
    if (si >= 0x0008)
        goto loc_8f4e;
    goto loc_8eae;
loc_8f4e: // 06c1:233e
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_8f51: // 06c1:2341
    if (memoryAGet16(ss, bp - 2) >= 0x0019)
        goto loc_8f5a;
    goto loc_8e98;
loc_8f5a: // 06c1:234a
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) - 0xf9f8);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_8f62: // 06c1:2352
    if (memoryAGet16(ss, bp - 4) >= 0x0028)
        goto loc_8f6b;
    goto loc_8e90;
loc_8f6b: // 06c1:235b
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) << 1);
loc_8f6e: // 06c1:235e
    if (memoryAGet(ss, bp - 7) >= 0x20)
        goto loc_8f77;
    goto loc_8e7c;
loc_8f77: // 06c1:2367
    push(di);
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_90aa() // 06c1:249a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0038;
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_90d7;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    dx = memoryAGet16(es, bx + 8);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    goto loc_90e1;
loc_90d7: // 06c1:24c7
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp - 8, 0x0000);
loc_90e1: // 06c1:24d1
    al = 0x01;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    memoryASet16(ss, bp - 4, ax);
    push(ax);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 26, al);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 27, al);
    al = memoryAGet(ss, bp - 26);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 27);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 16, ax);
    ax += memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 14, ax);
    di = memoryAGet16(ss, bp - 16);
    goto loc_949e;
loc_9130: // 06c1:2520
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 26, al);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 27, al);
    al = memoryAGet(ss, bp - 26);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 27);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 26, al);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 27, al);
    al = memoryAGet(ss, bp - 26);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 27);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 2, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 26, al);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 27, al);
    al = memoryAGet(ss, bp - 26);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 27);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 4, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    if (memoryAGet16(es, bx + 4) == 0x0000)
        goto loc_91ff;
    memoryASet16(ds, 0x87e2, 0x0001);
    goto loc_9205;
loc_91ff: // 06c1:25ef
    memoryASet16(ds, 0x87e2, 0x0000);
loc_9205: // 06c1:25f5
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 22, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    al = memoryAGet(es, bx);
    al &= 0x07;
    memoryASet(ss, bp - 25, al);
    if (memoryAGet(ss, bp - 25) == 0x00)
        goto loc_9245;
    al = 0x08;
    al -= memoryAGet(ss, bp - 25);
    memoryASet(ss, bp - 25, al);
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_9245: // 06c1:2635
    ax = memoryAGet16(ss, bp - 22);
    ax <<= 1;
    ax <<= 1;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 14, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    mul(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 20, ax);
    dx = 0x0005;
    mul(dx);
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 54, dx);
    memoryASet16(ss, bp - 56, ax);
    bx = memoryAGet16(ss, bp - 56);
    es = memoryAGet16(ss, bp - 56 + 2);
    memoryASet16(ss, bp - 30, es);
    memoryASet16(ss, bp - 32, bx);
    bx = ax;
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 50, es);
    memoryASet16(ss, bp - 52, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 46, es);
    memoryASet16(ss, bp - 48, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 42, es);
    memoryASet16(ss, bp - 44, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 38, es);
    memoryASet16(ss, bp - 40, bx);
    ax = memoryAGet16(ss, bp - 20);
    dx = 0x0005;
    mul(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 54));
    push(memoryAGet16(ss, bp - 56));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 24, ax);
    si = 0;
    goto loc_9366;
loc_92ea: // 06c1:26da
    if (memoryAGet(ss, bp - 25) == 0x00)
        goto loc_9365;
    ax = si;
    mul(memoryAGet16(ss, bp - 22));
    ax += memoryAGet16(ss, bp - 22);
    ax--;
    dx = 0;
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 56);
    es = memoryAGet16(ss, bp - 56 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 52);
    es = memoryAGet16(ss, bp - 52 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 44);
    es = memoryAGet16(ss, bp - 44 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    al = memoryAGet(ss, bp - 25);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 40);
    es = memoryAGet16(ss, bp - 40 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
loc_9365: // 06c1:2755
    si++;
loc_9366: // 06c1:2756
    if (si >= memoryAGet16(ss, bp - 24))
        goto loc_936e;
    goto loc_92ea;
loc_936e: // 06c1:275e
    if (memoryAGet(ss, bp + 16) != 0x00)
        goto loc_9382;
    ax = memoryAGet16(ss, bp - 20);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ss, bp - 2, ax);
    goto loc_9396;
loc_9382: // 06c1:2772
    ax = memoryAGet16(ss, bp - 20);
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 38, 0x0000);
    memoryASet16(ss, bp - 40, 0x0000);
loc_9396: // 06c1:2786
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x06c1);
    si = ax;
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 24, ax);
    push(memoryAGet16(ss, bp - 2));
    push(ax);
    push(cs);
    sub_7bd0(); // 06c1:0fc0
    sp += 0x0004;
    if (!ax)
        goto loc_93e8;
    si++;
    memoryASet16(ss, bp - 24, 0x0000);
    ax = si;
    dx = 0;
    cx = 0;
    bx = 0xfa00;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
loc_93e8: // 06c1:27d8
    bx = si;
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 35374);
    es = memoryAGet16(ds, tx + 35374 + 2);
    memoryASet16(ss, bp - 34, es);
    memoryASet16(ss, bp - 36, bx);
    ax = bx;
    ax |= memoryAGet16(ss, bp - 34);
    if (ax)
        goto loc_9404;
    push(cs);
    cs = 0x12f9;
    sub_13be3(); // 12f9:0c53
    assert(cs == 0x06c1);
loc_9404: // 06c1:27f4
    ax = memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + ax);
    dx = memoryAGet16(ss, bp - 34);
    ax = memoryAGet16(ss, bp - 36);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 12, dx);
    memoryASet16(es, bx + 10, ax);
    ax = memoryAGet16(ss, bp - 40);
    ax |= memoryAGet16(ss, bp - 38);
    if (!ax)
        goto loc_944c;
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 56));
    ax = memoryAGet16(ss, bp - 54);
    push(ax);
    push(memoryAGet16(ss, bp - 36));
    ax = memoryAGet16(ss, bp - 34);
    push(ax);
    push(cs);
    cs = 0x0e11;
    sub_e84e(); // 0e11:073e
    assert(cs == 0x06c1);
    sp += 0x000a;
    goto loc_9465;
loc_944c: // 06c1:283c
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 56));
    ax = memoryAGet16(ss, bp - 54);
    push(ax);
    push(memoryAGet16(ss, bp - 36));
    ax = memoryAGet16(ss, bp - 34);
    push(ax);
    push(cs);
    cs = 0x0e11;
    sub_e8f3(); // 0e11:07e3
    assert(cs == 0x06c1);
    sp += 0x000a;
loc_9465: // 06c1:2855
    ax = memoryAGet16(ss, bp - 2);
    dx = 0;
    flags.carry = (ax + memoryAGet16(ss, bp - 8)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 8);
    dx += memoryAGet16(ss, bp - 6) + flags.carry;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 8, dx);
    memoryASet16(es, bx + 6, ax);
    push(memoryAGet16(ss, bp - 30));
    push(memoryAGet16(ss, bp - 32));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    di++;
loc_949e: // 06c1:288e
    if (di >= memoryAGet16(ss, bp - 14))
        goto loc_94a6;
    goto loc_9130;
loc_94a6: // 06c1:2896
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    ax = memoryAGet16(ss, bp - 18);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_94b8() // 06c1:28a8
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0042;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_94d1;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_94d1;
    goto loc_9935;
loc_94d1: // 06c1:28c1
    ax = 0x0012;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 44, dx);
    memoryASet16(ss, bp - 46, ax);
    bx = memoryAGet16(ss, bp - 46);
    es = memoryAGet16(ss, bp - 46 + 2);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_6c63(); // 06c1:0053
    sp += 0x0004;
    ax = 0x8f6c;
    dx = ds;
    push(ax);
    ax = 0x8f6c;
    dx = ds;
    push(dx);
    push(cs);
    cs = 0x0ba1;
    sub_c7ba(); // 0ba1:0daa
    assert(cs == 0x06c1);
    sp += 0x0004;
    si = 0;
    goto loc_956a;
loc_9510: // 06c1:2900
    ax = si;
    al &= 0x08;
    cx = 0x0004;
    al <<= cl;
    dx = si;
    dl &= 0x08;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dx = si;
    dl &= 0x04;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dx = si;
    dl &= 0x04;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dx = si;
    dl &= 0x02;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dx = si;
    dl &= 0x02;
    dl <<= 1;
    al |= dl;
    dx = si;
    dl &= 0x01;
    dl <<= 1;
    al |= dl;
    dx = si;
    dl &= 0x01;
    al |= dl;
    bx = memoryAGet16(ss, bp - 46);
    es = memoryAGet16(ss, bp - 46 + 2);
    memoryASet(es, bx + si, al);
    si++;
loc_956a: // 06c1:295a
    if (si < 0x0010)
        goto loc_9510;
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_9594;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    dx = memoryAGet16(es, bx + 8);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    goto loc_959e;
loc_9594: // 06c1:2984
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp - 8, 0x0000);
loc_959e: // 06c1:298e
    al = 0x01;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    memoryASet16(ss, bp - 4, ax);
    push(ax);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 28, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 30, ax);
    ax = memoryAGet16(ss, bp - 28);
    cx = 0x0008;
    ax <<= cl;
    ax += memoryAGet16(ss, bp - 30);
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 16, ax);
    ax += memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 14, ax);
    si = memoryAGet16(ss, bp - 16);
    goto loc_9913;
loc_95e7: // 06c1:29d7
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 28, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 30, ax);
    ax = memoryAGet16(ss, bp - 28);
    cx = 0x0008;
    ax <<= cl;
    ax += memoryAGet16(ss, bp - 30);
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 28, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 30, ax);
    ax = memoryAGet16(ss, bp - 28);
    cx = 0x0008;
    ax <<= cl;
    ax += memoryAGet16(ss, bp - 30);
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 2, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 28, ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet16(ss, bp - 30, ax);
    ax = memoryAGet16(ss, bp - 28);
    cx = 0x0008;
    ax <<= cl;
    ax += memoryAGet16(ss, bp - 30);
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 4, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    if (memoryAGet16(es, bx + 4) == 0x0000)
        goto loc_96a4;
    memoryASet16(ds, 0x87e2, 0x0001);
    goto loc_96aa;
loc_96a4: // 06c1:2a94
    memoryASet16(ds, 0x87e2, 0x0000);
loc_96aa: // 06c1:2a9a
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 22, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax &= 0x0007;
    memoryASet16(ss, bp - 26, ax);
    if (!ax)
        goto loc_96e9;
    ax = 0x0008;
    ax -= memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 26, ax);
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_96e9: // 06c1:2ad9
    ax = memoryAGet16(ss, bp - 22);
    ax <<= 1;
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 14, ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    mul(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ss, bp - 2, ax);
    dx = 0x0005;
    mul(dx);
    memoryASet16(ss, bp - 2, ax);
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 64, dx);
    memoryASet16(ss, bp - 66, ax);
    bx = memoryAGet16(ss, bp - 66);
    es = memoryAGet16(ss, bp - 66 + 2);
    memoryASet16(ss, bp - 36, es);
    memoryASet16(ss, bp - 38, bx);
    bx = ax;
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 60, es);
    memoryASet16(ss, bp - 62, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 56, es);
    memoryASet16(ss, bp - 58, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 52, es);
    memoryASet16(ss, bp - 54, bx);
    bx += memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 48, es);
    memoryASet16(ss, bp - 50, bx);
    push(memoryAGet16(ss, bp - 2));
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 24, ax);
    di = 0x00ff;
    cx = memoryAGet16(ss, bp - 26);
    di <<= cl;
    ax = memoryAGet16(ss, bp - 22);
    ax--;
    dx = 0;
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
loc_9797: // 06c1:2b87
    if (memoryAGet16(ss, bp - 24) == 0x0000)
        goto loc_97f0;
    if (memoryAGet16(ss, bp - 26) == 0x0000)
        goto loc_97da;
    ax = di;
    bx = memoryAGet16(ss, bp - 66);
    es = memoryAGet16(ss, bp - 66 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    ax = di;
    bx = memoryAGet16(ss, bp - 62);
    es = memoryAGet16(ss, bp - 62 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    ax = di;
    bx = memoryAGet16(ss, bp - 58);
    es = memoryAGet16(ss, bp - 58 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    ax = di;
    bx = memoryAGet16(ss, bp - 54);
    es = memoryAGet16(ss, bp - 54 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
    ax = di;
    bx = memoryAGet16(ss, bp - 50);
    es = memoryAGet16(ss, bp - 50 + 2);
    bx += memoryAGet16(ss, bp - 12);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
loc_97da: // 06c1:2bca
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) - 1);
    ax = memoryAGet16(ss, bp - 22);
    dx = 0;
    flags.carry = (ax + memoryAGet16(ss, bp - 12)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 12);
    dx += memoryAGet16(ss, bp - 10) + flags.carry;
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    goto loc_9797;
loc_97f0: // 06c1:2be0
    if (memoryAGet(ss, bp + 16) == 0x00)
        goto loc_97f9;
    goto loc_9805;
loc_97f9: // 06c1:2be9
    ax = memoryAGet16(ss, bp - 20);
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ss, bp - 2, ax);
    goto loc_9817;
loc_9805: // 06c1:2bf5
    ax = memoryAGet16(ss, bp - 20);
    ax <<= 1;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 48, 0x0000);
    memoryASet16(ss, bp - 50, 0x0000);
loc_9817: // 06c1:2c07
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x06c1);
    di = ax;
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 24, ax);
    push(memoryAGet16(ss, bp - 2));
    push(ax);
    push(cs);
    sub_7bd0(); // 06c1:0fc0
    sp += 0x0004;
    if (!ax)
        goto loc_9869;
    di++;
    memoryASet16(ss, bp - 24, 0x0000);
    ax = di;
    dx = 0;
    cx = 0;
    bx = 0xfa00;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
loc_9869: // 06c1:2c59
    bx = di;
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 35374);
    es = memoryAGet16(ds, tx + 35374 + 2);
    memoryASet16(ss, bp - 40, es);
    memoryASet16(ss, bp - 42, bx);
    ax = memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 42, memoryAGet16(ss, bp - 42) + ax);
    dx = memoryAGet16(ss, bp - 40);
    ax = memoryAGet16(ss, bp - 42);
    push(dx);
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 12, dx);
    memoryASet16(es, bx + 10, ax);
    ax = memoryAGet16(ss, bp - 50);
    ax |= memoryAGet16(ss, bp - 48);
    if (!ax)
        goto loc_98c1;
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 42));
    ax = memoryAGet16(ss, bp - 40);
    push(ax);
    push(memoryAGet16(ss, bp - 66));
    ax = memoryAGet16(ss, bp - 64);
    push(ax);
    push(cs);
    cs = 0x0ba1;
    sub_c7e2(); // 0ba1:0dd2
    assert(cs == 0x06c1);
    sp += 0x000a;
    goto loc_98da;
loc_98c1: // 06c1:2cb1
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 42));
    ax = memoryAGet16(ss, bp - 40);
    push(ax);
    push(memoryAGet16(ss, bp - 66));
    ax = memoryAGet16(ss, bp - 64);
    push(ax);
    push(cs);
    cs = 0x0ba1;
    sub_c9bc(); // 0ba1:0fac
    assert(cs == 0x06c1);
    sp += 0x000a;
loc_98da: // 06c1:2cca
    ax = memoryAGet16(ss, bp - 2);
    dx = 0;
    flags.carry = (ax + memoryAGet16(ss, bp - 8)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 8);
    dx += memoryAGet16(ss, bp - 6) + flags.carry;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    push(dx);
    push(ax);
    ax = si;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 8, dx);
    memoryASet16(es, bx + 6, ax);
    push(memoryAGet16(ss, bp - 36));
    push(memoryAGet16(ss, bp - 38));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    si++;
loc_9913: // 06c1:2d03
    if (si >= memoryAGet16(ss, bp - 14))
        goto loc_991b;
    goto loc_95e7;
loc_991b: // 06c1:2d0b
    push(memoryAGet16(ss, bp - 32));
    push(memoryAGet16(ss, bp - 34));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    ax = memoryAGet16(ss, bp - 18);
loc_9935: // 06c1:2d25
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_993b() // 06c1:2d2b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0x919a, 0x0001);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_9961;
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_80de(); // 06c1:14ce
    sp = bp;
    goto loc_99b1;
loc_9961: // 06c1:2d51
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_997a;
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_90aa(); // 06c1:249a
    sp = bp;
    goto loc_99b1;
loc_997a: // 06c1:2d6a
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_9993;
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_7c14(); // 06c1:1004
    sp = bp;
    goto loc_99b1;
loc_9993: // 06c1:2d83
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_99a1;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_99b1;
loc_99a1: // 06c1:2d91
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_94b8(); // 06c1:28a8
    sp = bp;
loc_99b1: // 06c1:2da1
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_99b4() // 06c1:2da4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0030;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_99d1;
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_99d1;
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_99e7;
loc_99d1: // 06c1:2dc1
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_852f(); // 06c1:191f
    sp += 0x0008;
    goto loc_9e37;
loc_99e7: // 06c1:2dd7
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_99f8;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_99f8;
    goto loc_9e37;
loc_99f8: // 06c1:2de8
    ax = 0x0012;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 40, dx);
    memoryASet16(ss, bp - 42, ax);
    bx = memoryAGet16(ss, bp - 42);
    es = memoryAGet16(ss, bp - 42 + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    ax |= dx;
    if (ax)
        goto loc_9a21;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_9a21: // 06c1:2e11
    di = 0;
    goto loc_9a7f;
loc_9a25: // 06c1:2e15
    ax = di;
    al &= 0x08;
    cx = 0x0004;
    al <<= cl;
    dx = di;
    dl &= 0x08;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dx = di;
    dl &= 0x04;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dx = di;
    dl &= 0x04;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dx = di;
    dl &= 0x02;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dx = di;
    dl &= 0x02;
    dl <<= 1;
    al |= dl;
    dx = di;
    dl &= 0x01;
    dl <<= 1;
    al |= dl;
    dx = di;
    dl &= 0x01;
    al |= dl;
    bx = memoryAGet16(ss, bp - 42);
    es = memoryAGet16(ss, bp - 42 + 2);
    memoryASet(es, bx + di, al);
    di++;
loc_9a7f: // 06c1:2e6f
    if (di < 0x0010)
        goto loc_9a25;
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_9aa9;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    dx = memoryAGet16(es, bx + 8);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    goto loc_9ab3;
loc_9aa9: // 06c1:2e99
    memoryASet16(ss, bp - 8, 0x0000);
    memoryASet16(ss, bp - 10, 0x0000);
loc_9ab3: // 06c1:2ea3
    al = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    memoryASet16(ss, bp - 2, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x19;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 24);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 14, ax);
    ax += memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 12, ax);
    di = memoryAGet16(ss, bp - 14);
    goto loc_9e15;
loc_9b12: // 06c1:2f02
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x19;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 24);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x19;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 24);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 2, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x19;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 24);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 25);
    dh = 0x00;
    ax += dx;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 4, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 20, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    al = memoryAGet(es, bx);
    al &= 0x07;
    memoryASet(ss, bp - 23, al);
    if (memoryAGet(ss, bp - 23) == 0x00)
        goto loc_9c2f;
    al = 0x08;
    al -= memoryAGet(ss, bp - 23);
    memoryASet(ss, bp - 23, al);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 1);
loc_9c2f: // 06c1:301f
    ax = memoryAGet16(ss, bp - 20);
    ax <<= 1;
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    memoryASet16(es, bx + 14, ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    mul(memoryAGet16(ss, bp - 20));
    memoryASet16(ss, bp - 18, ax);
    ax++;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 46, dx);
    memoryASet16(ss, bp - 48, ax);
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    ax |= dx;
    if (ax)
        goto loc_9c85;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x06c1);
    sp++;
    sp++;
loc_9c85: // 06c1:3075
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 46));
    push(memoryAGet16(ss, bp - 48));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    si = 0;
    goto loc_9cc8;
loc_9c9c: // 06c1:308c
    if (memoryAGet(ss, bp - 23) == 0x00)
        goto loc_9cc7;
    ax = si;
    mul(memoryAGet16(ss, bp - 20));
    ax += memoryAGet16(ss, bp - 20);
    ax--;
    dx = 0;
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, ax);
    al = memoryAGet(ss, bp - 23);
    ah = 0x00;
    cx = ax;
    al = 0xff;
    al <<= cl;
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    bx += memoryAGet16(ss, bp - 6);
    memoryASet(es, bx, memoryAGet(es, bx) & al);
loc_9cc7: // 06c1:30b7
    si++;
loc_9cc8: // 06c1:30b8
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    if (ax > si)
        goto loc_9c9c;
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x06c1);
    si = ax;
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 22, ax);
    ax = memoryAGet16(ss, bp - 18);
    ax <<= 1;
    push(ax);
    push(memoryAGet16(ss, bp - 22));
    push(cs);
    sub_7bd0(); // 06c1:0fc0
    sp += 0x0004;
    if (!ax)
        goto loc_9d34;
    si++;
    memoryASet16(ss, bp - 22, 0x0000);
    ax = si;
    dx = 0;
    cx = 0;
    bx = 0xfa00;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
loc_9d34: // 06c1:3124
    bx = si;
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 35374);
    es = memoryAGet16(ds, tx + 35374 + 2);
    memoryASet16(ss, bp - 36, es);
    memoryASet16(ss, bp - 38, bx);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 38, memoryAGet16(ss, bp - 38) + ax);
    dx = memoryAGet16(ss, bp - 36);
    ax = memoryAGet16(ss, bp - 38);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 12, dx);
    memoryASet16(es, bx + 10, ax);
    dx = memoryAGet16(ss, bp - 36);
    ax = memoryAGet16(ss, bp - 38);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 18, dx);
    memoryASet16(es, bx + 16, ax);
    si = 0;
    goto loc_9dd5;
loc_9d8c: // 06c1:317c
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    al = memoryAGet(es, bx + si);
    ah = 0x00;
    cx = 0x0004;
    ax = sar(ax, cl);
    memoryASet(ss, bp - 43, al);
    al = memoryAGet(ss, bp - 43);
    ah = 0x00;
    bx = memoryAGet16(ss, bp - 42);
    es = memoryAGet16(ss, bp - 42 + 2);
    bx += ax;
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 38);
    es = memoryAGet16(ss, bp - 38 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 38, memoryAGet16(ss, bp - 38) + 1);
    bx = memoryAGet16(ss, bp - 48);
    es = memoryAGet16(ss, bp - 48 + 2);
    al = memoryAGet(es, bx + si);
    al &= 0x0f;
    memoryASet(ss, bp - 43, al);
    al = memoryAGet(ss, bp - 43);
    ah = 0x00;
    bx = memoryAGet16(ss, bp - 42);
    es = memoryAGet16(ss, bp - 42 + 2);
    bx += ax;
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 38);
    es = memoryAGet16(ss, bp - 38 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 38, memoryAGet16(ss, bp - 38) + 1);
    si++;
loc_9dd5: // 06c1:31c5
    if (si < memoryAGet16(ss, bp - 18))
        goto loc_9d8c;
    ax = memoryAGet16(ss, bp - 18);
    ax <<= 1;
    dx = 0;
    flags.carry = (ax + memoryAGet16(ss, bp - 10)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 10);
    dx += memoryAGet16(ss, bp - 8) + flags.carry;
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    push(dx);
    push(ax);
    ax = di;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 8, dx);
    memoryASet16(es, bx + 6, ax);
    push(memoryAGet16(ss, bp - 32));
    push(memoryAGet16(ss, bp - 34));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    di++;
loc_9e15: // 06c1:3205
    if (di >= memoryAGet16(ss, bp - 12))
        goto loc_9e1d;
    goto loc_9b12;
loc_9e1d: // 06c1:320d
    push(memoryAGet16(ss, bp - 28));
    push(memoryAGet16(ss, bp - 30));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    ax = memoryAGet16(ss, bp - 16);
loc_9e37: // 06c1:3227
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_9e3d() // 06c1:322d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x002a;
    memoryASet16(ds, 0x919a, 0x0001);
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_9e58;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_9e71;
loc_9e58: // 06c1:3248
    al = memoryAGet(ss, bp + 16);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_8a8a(); // 06c1:1e7a
    sp += 0x000a;
loc_9e71: // 06c1:3261
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_9e91;
    al = memoryAGet(ss, bp + 16);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_8d3a(); // 06c1:212a
    sp += 0x000a;
loc_9e91: // 06c1:3281
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_9ea2;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_9ea2;
    goto loc_a10a;
loc_9ea2: // 06c1:3292
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ss, bp - 16, 0x0000);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_6cbb(); // 06c1:00ab
    sp += 0x0004;
    memoryASet(ss, bp - 8, al);
    memoryASet(ss, bp - 7, 0x00);
    al = 0x01;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    si = ax;
    memoryASet(ss, bp - 18, 0x00);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(si);
    push(cs);
    sub_88e4(); // 06c1:1cd4
    sp += 0x0006;
    memoryASet(ss, bp - 6, 0x00);
    goto loc_9eff;
loc_9ef5: // 06c1:32e5
    push(si);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) + 1);
loc_9eff: // 06c1:32ef
    if (memoryAGet(ss, bp - 6) < 0x04)
        goto loc_9ef5;
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(si);
    push(cs);
    sub_88e4(); // 06c1:1cd4
    sp += 0x0006;
loc_9f12: // 06c1:3302
    push(ds);
    ax = 0x0599;
    push(ax);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(cs);
    cs = 0x1f63;
    sub_1f63a(); // 1f63:000a
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (ax)
        goto loc_9f2b;
    goto loc_a04f;
loc_9f2b: // 06c1:331b
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(si);
    push(cs);
    sub_88e4(); // 06c1:1cd4
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x5;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    dx = 0;
    mul(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x5;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    dx = 0;
    mul(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + memoryAGet16(ss, bp - 16)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 16);
    dx += memoryAGet16(ss, bp - 14) + flags.carry;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x5;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + memoryAGet16(ss, bp - 16)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 16);
    dx += memoryAGet16(ss, bp - 14) + flags.carry;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    ax = 0x0001;
    push(ax);
    push(ss);
    ax = bp - 0x5;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + memoryAGet16(ss, bp - 16)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 16);
    dx += memoryAGet16(ss, bp - 14) + flags.carry;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    push(ds);
    ax = 0x059e;
    push(ax);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(cs);
    cs = 0x1f63;
    sub_1f63a(); // 1f63:000a
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (ax)
        goto loc_9ffc;
    ax = 0x0014;
    push(ax);
    push(ss);
    ax = bp - 0x2a;
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ss, bp - 16, 0x0000);
loc_9ffc: // 06c1:33ec
    push(ds);
    ax = 0x05a3;
    push(ax);
    push(ss);
    ax = bp - 0x16;
    push(ax);
    push(cs);
    cs = 0x1f63;
    sub_1f63a(); // 1f63:000a
    assert(cs == 0x06c1);
    sp += 0x0008;
    if (ax)
        goto loc_a028;
    dx = memoryAGet16(ss, bp - 14);
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ss, bp - 16, 0x0000);
loc_a028: // 06c1:3418
    ax = memoryAGet16(ss, bp - 16);
    ax |= memoryAGet16(ss, bp - 14);
    if (ax)
        goto loc_a033;
    goto loc_9f12;
loc_a033: // 06c1:3423
    ax = memoryAGet16(ss, bp - 16);
    ax |= memoryAGet16(ss, bp - 14);
    if (ax)
        goto loc_a03e;
    goto loc_9f12;
loc_a03e: // 06c1:342e
    push(si);
    push(cs);
    sub_6e15(); // 06c1:0205
    sp++;
    sp++;
    flags.carry = memoryAGet16(ss, bp - 16) < 0x0001;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) - 0x0001);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) - flags.carry);
    goto loc_a033;
loc_a04f: // 06c1:343f
    al = memoryAGet(ss, bp - 8);
    bx = memoryAGet16(ds, 0x8bb0);
    es = memoryAGet16(ds, 0x8bb0 + 2);
    memoryASet(es, bx, al);
    al = memoryAGet(ss, bp - 7);
    memoryASet(es, bx + 1, al);
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_a0a3;
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    if (memoryAGet(es, bx + 4) != 0x00)
        goto loc_a0a3;
    push(memoryAGet16(ds, 0x8bb2));
    push(memoryAGet16(ds, 0x8bb0));
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_30d5(); // 023f:0ce5
    assert(cs == 0x06c1);
    sp += 0x0008;
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3d95(); // 023f:19a5
    assert(cs == 0x06c1);
    sp += 0x0004;
    push(ds);
    ax = 0x8bfa;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_402c(); // 023f:1c3c
    assert(cs == 0x06c1);
    sp += 0x0006;
loc_a0a3: // 06c1:3493
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_a0c6;
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    al = memoryAGet(es, bx + 4);
    if (al != memoryAGet(ds, 0x8f66))
        goto loc_a0c6;
    push(memoryAGet16(ss, bp + 14));
    push(bx);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_402c(); // 023f:1c3c
    assert(cs == 0x06c1);
    sp += 0x0006;
loc_a0c6: // 06c1:34b6
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    al = memoryAGet(ss, bp - 33);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 32);
    ah = 0x00;
    push(ax);
    push(si);
    push(cs);
    sub_88fc(); // 06c1:1cec
    sp += 0x000a;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_a103;
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    al = memoryAGet(es, bx + 4);
    if (al != memoryAGet(ds, 0x8f66))
        goto loc_a103;
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    push(cs);
    cs = 0x0ba1;
    sub_be10(); // 0ba1:0400
    assert(cs == 0x06c1);
    sp += 0x0004;
loc_a103: // 06c1:34f3
    push(si);
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
loc_a10a: // 06c1:34fa
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a10f() // 06c1:34ff
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    if (memoryAGet(ds, 0x8db5) == 0x4e)
        goto loc_a181;
    memoryASet16(ds, 0x919a, 0x0001);
    al = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    si = ax;
    dx = memoryAGet16(ds, 0x87d4);
    ax = memoryAGet16(ds, 0x87d2);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    ax |= dx;
    if (!ax)
        goto loc_a165;
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
loc_a165: // 06c1:3555
    push(si);
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    bx = memoryAGet16(ss, bp + 8);
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 36672, dx);
    memoryASet16(ds, bx + 36670, ax);
loc_a181: // 06c1:3571
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a186() // 06c1:3576
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    di = memoryAGet16(ss, bp + 10);
    bx = di;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 36342);
    ax |= memoryAGet16(ds, bx + 36344);
    if (!ax)
        goto loc_a1b7;
    bx = di;
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 36344));
    push(memoryAGet16(ds, bx + 36342));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
loc_a1b7: // 06c1:35a7
    push(cs);
    cs = 0x1ec1;
    sub_1ec1f(); // 1ec1:000f
    assert(cs == 0x06c1);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    al = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_7530(); // 06c1:0920
    sp += 0x0006;
    si = ax;
    dx = memoryAGet16(ds, 0x87ce);
    ax = memoryAGet16(ds, 0x87cc);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    bx = di;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 36344, 0x0000);
    memoryASet16(ds, bx + 36342, 0x0000);
    if (dx > memoryAGet16(ss, bp - 2))
        goto loc_a21c;
    if (dx != memoryAGet16(ss, bp - 2))
        goto loc_a1ff;
    if (ax > memoryAGet16(ss, bp - 4))
        goto loc_a21c;
loc_a1ff: // 06c1:35ef
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    flags.carry = ax < memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ss, bp - 8);
    tl = dx < memoryAGet16(ss, bp - 6) + flags.carry;
    dx -= memoryAGet16(ss, bp - 6) + flags.carry;
    flags.carry = tl;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    if (flags.carry == 0 && dx == 0)
        goto loc_a225;
    if (flags.carry)
        goto loc_a21c;
    if (ax >= 0x4e20)
        goto loc_a225;
loc_a21c: // 06c1:360c
    push(si);
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    goto loc_a25d;
loc_a225: // 06c1:3615
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    push(memoryAGet16(ss, bp - 8));
    push(dx);
    push(ax);
    push(si);
    push(cs);
    sub_6e6a(); // 06c1:025a
    sp += 0x0008;
    push(si);
    push(cs);
    sub_74f7(); // 06c1:08e7
    sp++;
    sp++;
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    bx = di;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 36344, dx);
    memoryASet16(ds, bx + 36342, ax);
loc_a25d: // 06c1:364d
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a263() // 06c1:3653
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0012;
    push(ss);
    ax = bp - 0x8;
    push(ax);
    push(ds);
    ax = 0x0400;
    push(ax);
    cx = 0x0008;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x06c1);
    memoryASet(ds, 0x92c6, 0x00);
    ax = 0x8001;
    push(ax);
    push(ds);
    ax = 0x05a8;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x06c1);
    sp += 0x0006;
    memoryASet16(ss, bp - 18, ax);
    if ((short)ax >= 0)
        goto loc_a29d;
    goto loc_a349;
loc_a29d: // 06c1:368d
    push(ax);
    push(cs);
    cs = 0x1ee6;
    sub_1ee6d(); // 1ee6:000d
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
    ax += 0x000f;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ds, 0x8bf4, dx);
    memoryASet16(ds, 0x8bf2, ax);
    memoryASet16(ds, 0x8df4, dx);
    memoryASet16(ds, 0x8df2, ax);
    ax = dx;
    memoryASet16(ss, bp - 10, ax);
    di = memoryAGet16(ds, 0x8df2);
    di += 0x000f;
    ax = di;
    cx = 0x0004;
    ax >>= cl;
    di = ax;
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + di);
    di = 0;
    dx = memoryAGet16(ss, bp - 10);
    ax = di;
    memoryASet16(ds, 0x8df4, dx);
    memoryASet16(ds, 0x8df2, ax);
    push(memoryAGet16(ss, bp - 16));
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 18));
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x06c1);
    sp += 0x0008;
    push(memoryAGet16(ss, bp - 18));
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x06c1);
    sp++;
    sp++;
    memoryASet16(ss, bp - 12, 0x0000);
    si = 0;
    goto loc_a327;
loc_a30d: // 06c1:36fd
    ax = si;
    ax += 0x0003;
    bx = memoryAGet16(ds, 0x8df2);
    es = memoryAGet16(ds, 0x8df2 + 2);
    bx += ax;
    al = memoryAGet(es, bx);
    if (al == memoryAGet(ss, bp + si + 65528))
        goto loc_a326;
    memoryASet16(ss, bp - 12, 0x0001);
loc_a326: // 06c1:3716
    si++;
loc_a327: // 06c1:3717
    if (si < 0x0008)
        goto loc_a30d;
    if (memoryAGet16(ss, bp - 12) == 0x0000)
        goto loc_a344;
    push(memoryAGet16(ds, 0x8bf4));
    push(memoryAGet16(ds, 0x8bf2));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x06c1);
    sp += 0x0004;
    goto loc_a349;
loc_a344: // 06c1:3734
    memoryASet(ds, 0x92c6, 0x01);
loc_a349: // 06c1:3739
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a34f() // 0a34:000f
{
    CStackGuardFar sg(0, false);
    if (memoryAGet(ds, 0x87eb) == 0x00)
        goto loc_a35b;
    push(cs);
    cs = 0x12f9;
    sub_13be3(); // 12f9:0c53
    assert(cs == 0x0a34);
loc_a35b: // 0a34:001b
    if (memoryAGet(ds, 0x05b6) == 0x00)
        goto loc_a373;
    if (memoryAGet(ds, 0x05b6) != 0x02)
        goto loc_a36e;
    push(cs);
    cs = 0x127c;
    sub_12886(); // 127c:00c6
    assert(cs == 0x0a34);
loc_a36e: // 0a34:002e
    memoryASet(ds, 0x05b6, 0x00);
loc_a373: // 0a34:0033
    cs = pop();
}
void sub_a5a8() // 0a34:0268
{
    push(ax);
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bp);
    bp = 0x1f86;
    ds = bp;
    memoryASet16(ds, 0x8dd8, memoryAGet16(ds, 0x8dd8) + 1);
    if (memoryAGet(ds, 0x8ddf) != 0x00)
        goto loc_a5c4;
    goto loc_a668;
loc_a5c4: // 0a34:0284
    memoryASet16(ds, 0x87fc, 0x0003);
    push(ds);
    ax = 0x87ec;
    push(ax);
    push(ds);
    ax = 0x87fc;
    push(ax);
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0a34);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x87ee);
    memoryASet16(ds, 0x880e, ax);
    if (memoryAGet(ds, 0x8da7) != 0x00)
        goto loc_a5f0;
    goto loc_a668;
loc_a5f0: // 0a34:02b0
    si = memoryAGet16(ds, 0x87f0);
    di = memoryAGet16(ds, 0x87f2);
    al = 0x00;
    memoryASet(ds, 0x8db4, al);
    memoryASet(ds, 0x92b6, al);
    memoryASet(ds, 0x8baf, al);
    memoryASet(ds, 0x8da6, al);
    if (si <= 0x014a)
        goto loc_a613;
    memoryASet(ds, 0x8da6, 0x01);
    goto loc_a61e;
loc_a613: // 0a34:02d3
    if (si >= 0x0136)
        goto loc_a61e;
    memoryASet(ds, 0x8baf, 0x01);
loc_a61e: // 0a34:02de
    if (di <= 0x006e)
        goto loc_a62a;
    memoryASet(ds, 0x92b6, 0x01);
    goto loc_a634;
loc_a62a: // 0a34:02ea
    if (di >= 0x005a)
        goto loc_a634;
    memoryASet(ds, 0x8db4, 0x01);
loc_a634: // 0a34:02f4
    if (memoryAGet(ds, 0x87e5) == 0x00)
        goto loc_a668;
    memoryASet(ds, 0x87e5, 0x00);
    memoryASet16(ds, 0x87fc, 0x0004);
    memoryASet16(ds, 0x8800, 0x0140);
    memoryASet16(ds, 0x8802, 0x0064);
    push(ds);
    ax = 0x87ec;
    push(ax);
    push(ds);
    ax = 0x87fc;
    push(ax);
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0a34);
    sp += 0x000a;
loc_a668: // 0a34:0328
    bp = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    ax = pop();
    stop(); // iret 
}
void sub_a672() // 0a34:0332
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    memoryASet16(ds, 0x92e0, 0x0007);
    memoryASet16(ds, 0x92e4, 0x0000);
    memoryASet16(ds, 0x92e6, 0x0280);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0a34);
    sp += 0x000a;
    memoryASet16(ds, 0x92e0, 0x0008);
    memoryASet16(ds, 0x92e4, 0x0000);
    memoryASet16(ds, 0x92e6, 0x00c8);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0a34);
    sp += 0x000a;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a6c3() // 0a34:0383
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x8b94) != 0x00)
        goto loc_a70b;
    ax = 0x0034;
    dx = cs;
    push(dx);
    push(ax);
    ax = 0x001c;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0a34);
    sp += 0x0006;
    ax = memoryAGet16(ds, 0x8d60); // cursor X
    memoryASet16(ds, 0x8a28, ax);
    ax = memoryAGet16(ds, 0x8db8); // cursor Y
    memoryASet16(ds, 0x91a0, ax);
    push(ax);
    push(memoryAGet16(ds, 0x8a28));
    push(cs);
    cs = 0x0a34;
    sub_b0e7(); // 0a34:0da7
    assert(cs == 0x0a34);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x91a0));
    push(memoryAGet16(ds, 0x8a28));
    push(cs);
    cs = 0x0a34;
    sub_b384(); // 0a34:1044
    assert(cs == 0x0a34);
    sp += 0x0004;
    memoryASet(ds, 0x8b94, 0x01);
loc_a70b: // 0a34:03cb
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a70c() // 0a34:03cc
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_a73b;
    ax = 0x0268;
    dx = cs;
    push(dx);
    push(ax);
    ax = 0x001c;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0a34);
    sp += 0x0006;
    push(memoryAGet16(ds, 0x91a0));
    push(memoryAGet16(ds, 0x8a28));
    push(cs);
    cs = 0x0a34;
    sub_b6f4(); // 0a34:13b4
    assert(cs == 0x0a34);
    sp += 0x0004;
    memoryASet(ds, 0x8b94, 0x00);
loc_a73b: // 0a34:03fb
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a73c() // 0a34:03fc
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_a78e;
    ax = memoryAGet16(ds, 0x8a28);
    if (ax != memoryAGet16(ds, 0x8d60))
        goto loc_a755;
    ax = memoryAGet16(ds, 0x91a0);
    if (ax == memoryAGet16(ds, 0x8db8))
        goto loc_a78e;
loc_a755: // 0a34:0415
    push(memoryAGet16(ds, 0x91a0));
    push(memoryAGet16(ds, 0x8a28));
    push(cs);
    cs = 0x0a34;
    sub_b6f4(); // 0a34:13b4
    assert(cs == 0x0a34);
    sp += 0x0004;
    ax = memoryAGet16(ds, 0x8d60);
    memoryASet16(ds, 0x8a28, ax);
    ax = memoryAGet16(ds, 0x8db8);
    memoryASet16(ds, 0x91a0, ax);
    push(ax);
    push(memoryAGet16(ds, 0x8a28));
    push(cs);
    cs = 0x0a34;
    sub_b0e7(); // 0a34:0da7
    assert(cs == 0x0a34);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x91a0));
    push(memoryAGet16(ds, 0x8a28));
    push(cs);
    cs = 0x0a34;
    sub_b384(); // 0a34:1044
    assert(cs == 0x0a34);
    sp += 0x0004;
loc_a78e: // 0a34:044e
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a78f() // 0a34:044f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(cs);
    sub_a34f(); // 0a34:000f
    push(cs);
    sub_a73c(); // 0a34:03fc
    if (memoryAGet(ds, 0x8dc4) == 0x00)
        goto loc_a7e8;
    push(memoryAGet16(ds, 0x8d74));
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x0cb4;
    sub_cbf8(); // 0cb4:00b8
    assert(cs == 0x0a34);
    sp += 0x0004;
    memoryASet(ss, bp - 1, al);
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_a7dc;
    al = 0x01;
    memoryASet(ds, 0x8b6a, al);
    memoryASet(ds, 0x92b5, al);
    ax = 0;
    memoryASet16(ds, 0x880e, ax);
    memoryASet(ds, 0x8da7, al);
    al = 0x00;
    memoryASet(ds, 0x8de9, al);
    memoryASet(ds, 0x8dd1, al);
    memoryASet(ds, 0x8bf1, al);
    memoryASet(ds, 0x8b9c, al);
    goto loc_a7e8;
loc_a7dc: // 0a34:049c
    if (memoryAGet(ds, 0x8b6a) == 0x00)
        goto loc_a7e8;
    memoryASet(ds, 0x92b5, 0x00);
loc_a7e8: // 0a34:04a8
    if (memoryAGet(ds, 0x8ddf) == 0x00)
        goto loc_a85f;
    if (memoryAGet(ds, 0x8db3) != 0x00)
        goto loc_a85f;
    al = memoryAGet(ds, 0x880e);
    al &= 0x01;
    memoryASet(ss, bp - 1, al);
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_a853;
    if (memoryAGet(ds, 0x8da7) != 0x00)
        goto loc_a844;
    memoryASet16(ds, 0x92e0, 0x0004);
    ax = memoryAGet16(ds, 0x8d60);
    ax <<= 1;
    memoryASet16(ds, 0x92e4, ax);
    ax = memoryAGet16(ds, 0x8db8);
    memoryASet16(ds, 0x92e6, ax);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0a34);
    sp += 0x000a;
    al = 0x00;
    memoryASet(ds, 0x8de9, al);
    memoryASet(ds, 0x8dd1, al);
    memoryASet(ds, 0x8bf1, al);
    memoryASet(ds, 0x8b9c, al);
loc_a844: // 0a34:0504
    al = 0x01;
    memoryASet(ds, 0x92b5, al);
    memoryASet(ds, 0x8da7, al);
    memoryASet(ds, 0x8b6a, 0x00);
    goto loc_a85f;
loc_a853: // 0a34:0513
    if (memoryAGet(ds, 0x8da7) == 0x00)
        goto loc_a85f;
    memoryASet(ds, 0x92b5, 0x00);
loc_a85f: // 0a34:051f
    al = memoryAGet(ds, 0x92b5);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a99a() // 0a34:065a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 8);
    ah = 0x00;
    dx = 0x0032;
    mul(dx);
    si = ax;
loc_a9aa: // 0a34:066a
    push(cs);
    sub_a78f(); // 0a34:044f
    sp = bp;
    if (al)
        goto loc_a9aa;
loc_a9b4: // 0a34:0674
    ax = si;
    si--;
    if (!ax)
        goto loc_a9d2;
    push(cs);
    sub_a78f(); // 0a34:044f
    sp = bp;
    if (al)
        goto loc_a9d2;
    ax = 0x0014;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0a34);
    sp = bp;
    goto loc_a9b4;
loc_a9d2: // 0a34:0692
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_a9d5() // 0a34:0695
{
    CStackGuardFar sg(0, false);
loc_a9d5: // 0a34:0695
    push(cs);
    sub_a78f(); // 0a34:044f
    if (al)
        goto loc_a9d5;
loc_a9dd: // 0a34:069d
    sync();
    push(cs);
    sub_a78f(); // 0a34:044f
    //if (!al) // todo: skip loop
    //    goto loc_a9dd;
loc_a9e5: // 0a34:06a5
    push(cs);
    sub_a78f(); // 0a34:044f
    if (al)
        goto loc_a9e5;
    push(cs);
    cs = 0x023f;
    sub_2445(); // 023f:0055
    assert(cs == 0x0a34);
    cs = pop();
}
void sub_a9f3() // 0a34:06b3
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(cs);
    sub_a78f(); // 0a34:044f
    memoryASet(ss, bp - 1, al);
    if (memoryAGet(ds, 0x8b6a) != 0x00)
        goto loc_aa0b;
    goto loc_aa88;
loc_aa0b: // 0a34:06cb
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_aa15;
    goto loc_aa88;
loc_aa15: // 0a34:06d5
    push(memoryAGet16(ds, 0x8d74));
    push(cs);
    cs = 0x0cb4;
    sub_cba0(); // 0cb4:0060
    assert(cs == 0x0a34);
    sp++;
    sp++;
    push(cs);
    cs = 0x0cb4;
    sub_cbee(); // 0cb4:00ae
    assert(cs == 0x0a34);
    si = ax;
    push(cs);
    cs = 0x0cb4;
    sub_cbf3(); // 0cb4:00b3
    assert(cs == 0x0a34);
    di = ax;
    memoryASet16(ds, 0x8bf6, si);
    memoryASet16(ds, 0x8b96, di);
    al = 0x00;
    memoryASet(ds, 0x92b6, al);
    memoryASet(ds, 0x8db4, al);
    memoryASet(ds, 0x8da6, al);
    memoryASet(ds, 0x8baf, al);
    ax = memoryAGet16(ds, 0x8dc0);
    ax = sar(ax, 1);
    if ((short)ax <= (short)si)
        goto loc_aa54;
    memoryASet(ds, 0x8baf, 0x01);
    goto loc_aa66;
loc_aa54: // 0a34:0714
    ax = memoryAGet16(ds, 0x8dc0);
    ax = sar(ax, 1);
    ax += memoryAGet16(ds, 0x8dc0);
    if ((short)ax >= (short)si)
        goto loc_aa66;
    memoryASet(ds, 0x8da6, 0x01);
loc_aa66: // 0a34:0726
    ax = memoryAGet16(ds, 0x8b9a);
    ax = sar(ax, 1);
    if ((short)ax <= (short)di)
        goto loc_aa76;
    memoryASet(ds, 0x8db4, 0x01);
    goto loc_aa88;
loc_aa76: // 0a34:0736
    ax = memoryAGet16(ds, 0x8b9a);
    ax = sar(ax, 1);
    ax += memoryAGet16(ds, 0x8b9a);
    if ((short)ax >= (short)di)
        goto loc_aa88;
    memoryASet(ds, 0x92b6, 0x01);
loc_aa88: // 0a34:0748
    if (memoryAGet(ds, 0x8da7) == 0x00)
        goto loc_aa94;
    memoryASet(ds, 0x87e5, 0x01);
loc_aa94: // 0a34:0754
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_aa9a() // 0a34:075a
{
    push(ax);
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bp);
    bp = 0x1f86;
    ds = bp;
    bp = sp;
    sp--;
    sp--;
    in(al, 0x60);
    memoryASet(ds, 0x8b95, al);
    in(al, 0x61);
    memoryASet(ss, bp - 2, al);
    if (!(memoryAGet(ds, 0x8b95) & 0x80))
        goto loc_aac5;
    al = 0x00;
    memoryASet(ds, 0x87e4, al);
    memoryASet(ds, 0x87e6, al);
loc_aac5: // 0a34:0785
    if (memoryAGet(ds, 0x8b95) != 0x01)
        goto loc_aad1;
    memoryASet(ds, 0x87eb, 0x01);
loc_aad1: // 0a34:0791
    if (memoryAGet(ds, 0x87e6) != 0x00)
        goto loc_aae3;
    if (memoryAGet(ds, 0x8b95) != 0x1d)
        goto loc_aae3;
    memoryASet(ds, 0x87e6, memoryAGet(ds, 0x87e6) + 1);
loc_aae3: // 0a34:07a3
    if (memoryAGet(ds, 0x87e6) != 0x01)
        goto loc_aaf5;
    if (memoryAGet(ds, 0x8b95) != 0x38)
        goto loc_aaf5;
    memoryASet(ds, 0x87e6, memoryAGet(ds, 0x87e6) + 1);
loc_aaf5: // 0a34:07b5
    if (memoryAGet(ds, 0x87e6) != 0x02)
        goto loc_ab08;
    if (memoryAGet(ds, 0x8b95) != 0x53)
        goto loc_ab08;
    push(cs);
    cs = 0x0ba1;
    sub_bacb(); // 0ba1:00bb
    assert(cs == 0x0a34);
loc_ab08: // 0a34:07c8
    memoryASet(ss, bp - 1, 0x00);
    al = memoryAGet(ds, 0x8b95);
    if (al != memoryAGet(ds, 0x8e1e))
        goto loc_ab1c;
    memoryASet(ds, 0x87ea, 0x01);
    goto loc_ab21;
loc_ab1c: // 0a34:07dc
    memoryASet(ds, 0x87ea, 0x00);
loc_ab21: // 0a34:07e1
    if (memoryAGet(ds, 0x8b95) == 0x4b)
        goto loc_ab2f;
    if (memoryAGet(ds, 0x8b95) != 0x7a)
        goto loc_ab42;
loc_ab2f: // 0a34:07ef
    al = 0x01;
    memoryASet(ss, bp - 1, al);
    memoryASet(ds, 0x8dd1, al);
    memoryASet(ds, 0x8baf, al);
    al = 0x00;
    memoryASet(ds, 0x8de9, al);
    memoryASet(ds, 0x8da6, al);
loc_ab42: // 0a34:0802
    if (memoryAGet(ds, 0x8b95) == 0xcb)
        goto loc_ab50;
    if (memoryAGet(ds, 0x8b95) != 0xfa)
        goto loc_ab58;
loc_ab50: // 0a34:0810
    al = 0x00;
    memoryASet(ds, 0x8dd1, al);
    memoryASet(ds, 0x8baf, al);
loc_ab58: // 0a34:0818
    if (memoryAGet(ds, 0x8b95) == 0x4d)
        goto loc_ab66;
    if (memoryAGet(ds, 0x8b95) != 0x79)
        goto loc_ab79;
loc_ab66: // 0a34:0826
    al = 0x01;
    memoryASet(ss, bp - 1, al);
    memoryASet(ds, 0x8de9, al);
    memoryASet(ds, 0x8da6, al);
    al = 0x00;
    memoryASet(ds, 0x8dd1, al);
    memoryASet(ds, 0x8baf, al);
loc_ab79: // 0a34:0839
    if (memoryAGet(ds, 0x8b95) == 0xcd)
        goto loc_ab87;
    if (memoryAGet(ds, 0x8b95) != 0xf9)
        goto loc_ab8f;
loc_ab87: // 0a34:0847
    al = 0x00;
    memoryASet(ds, 0x8de9, al);
    memoryASet(ds, 0x8da6, al);
loc_ab8f: // 0a34:084f
    if (memoryAGet(ds, 0x8b95) == 0x48)
        goto loc_ab9d;
    if (memoryAGet(ds, 0x8b95) != 0x7c)
        goto loc_abb0;
loc_ab9d: // 0a34:085d
    al = 0x01;
    memoryASet(ss, bp - 1, al);
    memoryASet(ds, 0x8bf1, al);
    memoryASet(ds, 0x8db4, al);
    al = 0x00;
    memoryASet(ds, 0x8b9c, al);
    memoryASet(ds, 0x92b6, al);
loc_abb0: // 0a34:0870
    if (memoryAGet(ds, 0x8b95) == 0xc8)
        goto loc_abbe;
    if (memoryAGet(ds, 0x8b95) != 0xfc)
        goto loc_abc6;
loc_abbe: // 0a34:087e
    al = 0x00;
    memoryASet(ds, 0x8bf1, al);
    memoryASet(ds, 0x8db4, al);
loc_abc6: // 0a34:0886
    if (memoryAGet(ds, 0x8b95) == 0x50)
        goto loc_abd4;
    if (memoryAGet(ds, 0x8b95) != 0x7b)
        goto loc_abe7;
loc_abd4: // 0a34:0894
    al = 0x01;
    memoryASet(ss, bp - 1, al);
    memoryASet(ds, 0x8b9c, al);
    memoryASet(ds, 0x92b6, al);
    al = 0x00;
    memoryASet(ds, 0x8bf1, al);
    memoryASet(ds, 0x8db4, al);
loc_abe7: // 0a34:08a7
    if (memoryAGet(ds, 0x8b95) == 0xd0)
        goto loc_abf5;
    if (memoryAGet(ds, 0x8b95) != 0xfb)
        goto loc_abfd;
loc_abf5: // 0a34:08b5
    al = 0x00;
    memoryASet(ds, 0x8b9c, al);
    memoryASet(ds, 0x92b6, al);
loc_abfd: // 0a34:08bd
    if (memoryAGet(ds, 0x8b95) == 0x39)
        goto loc_ac0b;
    if (memoryAGet(ds, 0x8b95) != 0x77)
        goto loc_ac1b;
loc_ac0b: // 0a34:08cb
    memoryASet(ds, 0x92b5, 0x01);
    ax = 0;
    memoryASet16(ds, 0x880e, ax);
    memoryASet(ds, 0x8da7, al);
    memoryASet(ds, 0x8b6a, al);
loc_ac1b: // 0a34:08db
    if (memoryAGet(ds, 0x8b95) == 0xb9)
        goto loc_ac29;
    if (memoryAGet(ds, 0x8b95) != 0xf7)
        goto loc_ac2e;
loc_ac29: // 0a34:08e9
    memoryASet(ds, 0x92b5, 0x00);
loc_ac2e: // 0a34:08ee
    if (memoryAGet(ds, 0x8b95) != 0x7e)
        goto loc_ac42;
    al = 0x01;
    memoryASet(ds, 0x92b5, al);
    memoryASet(ds, 0x8da7, al);
    memoryASet(ds, 0x8b6a, 0x00);
loc_ac42: // 0a34:0902
    if (memoryAGet(ds, 0x8b95) != 0xfe)
        goto loc_ac4e;
    memoryASet(ds, 0x92b5, 0x00);
loc_ac4e: // 0a34:090e
    if (memoryAGet(ds, 0x8b95) == 0x2a)
        goto loc_ac5c;
    if (memoryAGet(ds, 0x8b95) != 0x78)
        goto loc_ac6c;
loc_ac5c: // 0a34:091c
    memoryASet(ds, 0x8d9e, 0x01);
    ax = 0;
    memoryASet16(ds, 0x880e, ax);
    memoryASet(ds, 0x8da7, al);
    memoryASet(ds, 0x8b6a, al);
loc_ac6c: // 0a34:092c
    if (memoryAGet(ds, 0x8b95) == 0xaa)
        goto loc_ac7a;
    if (memoryAGet(ds, 0x8b95) != 0xf8)
        goto loc_ac7f;
loc_ac7a: // 0a34:093a
    memoryASet(ds, 0x8d9e, 0x00);
loc_ac7f: // 0a34:093f
    if (memoryAGet(ds, 0x8b95) != 0x7d)
        goto loc_ac93;
    al = 0x01;
    memoryASet(ds, 0x8d9e, al);
    memoryASet(ds, 0x8da7, al);
    memoryASet(ds, 0x8b6a, 0x00);
loc_ac93: // 0a34:0953
    if (memoryAGet(ds, 0x8b95) != 0xfd)
        goto loc_ac9f;
    memoryASet(ds, 0x8d9e, 0x00);
loc_ac9f: // 0a34:095f
    if (memoryAGet(ds, 0x8b94) == 0x00)
        goto loc_accc;
    if (memoryAGet(ds, 0x8b95) == 0x2a)
        goto loc_acb4;
    if (memoryAGet(ds, 0x8b95) != 0x36)
        goto loc_acb9;
loc_acb4: // 0a34:0974
    memoryASet(ds, 0x92c2, 0x01);
loc_acb9: // 0a34:0979
    if (memoryAGet(ds, 0x8b95) == 0xaa)
        goto loc_acc7;
    if (memoryAGet(ds, 0x8b95) != 0xb6)
        goto loc_accc;
loc_acc7: // 0a34:0987
    memoryASet(ds, 0x92c2, 0x08);
loc_accc: // 0a34:098c
    al = memoryAGet(ds, 0x8b95);
    if (al != memoryAGet(ds, 0x8bd3))
        goto loc_acef;
    memoryASet(ds, 0x919e, memoryAGet(ds, 0x919e) ^ 0x01);
    if (memoryAGet(ds, 0x919e) == 0x00)
        goto loc_ace9;
    memoryASet16(ds, 0x88d6, 0x007f);
    goto loc_acef;
loc_ace9: // 0a34:09a9
    memoryASet16(ds, 0x88d6, 0x0000);
loc_acef: // 0a34:09af
    al = memoryAGet(ds, 0x8b95);
    if (al != memoryAGet(ds, 0x8b6b))
        goto loc_acfd;
    memoryASet(ds, 0x9091, memoryAGet(ds, 0x9091) ^ 0x01);
loc_acfd: // 0a34:09bd
    al = memoryAGet(ss, bp - 2);
    al |= 0x80;
    out(0x61, al);
    al = memoryAGet(ss, bp - 2);
    out(0x61, al);
    al = 0x20;
    out(0x20, al);
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_ad1f;
    ax = 0;
    memoryASet16(ds, 0x880e, ax);
    memoryASet(ds, 0x8da7, al);
    memoryASet(ds, 0x8b6a, al);
loc_ad1f: // 0a34:09df
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    ax = pop();
    stop(); // iret 
}
void sub_ad5a() // 0a34:0a1a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f09f(); // 1f09:000f
    assert(cs == 0x0a34);
    sp++;
    sp++;
    memoryASet16(ds, 0x8a68, dx);
    memoryASet16(ds, 0x8a66, ax);
    ax = 0x001c;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f09f(); // 1f09:000f
    assert(cs == 0x0a34);
    sp++;
    sp++;
    memoryASet16(ds, 0x8a24, dx);
    memoryASet16(ds, 0x8a22, ax);
    ax = 0x0024;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f09f(); // 1f09:000f
    assert(cs == 0x0a34);
    sp++;
    sp++;
    memoryASet16(ds, 0x8ba0, dx);
    memoryASet16(ds, 0x8b9e, ax);
    al = 0x00;
    memoryASet(ds, 0x87eb, al);
    memoryASet(ds, 0x87e4, al);
    memoryASet(ds, 0x87e6, al);
    al = 0x00;
    memoryASet(ds, 0x92b6, al);
    memoryASet(ds, 0x8db4, al);
    memoryASet(ds, 0x8baf, al);
    memoryASet(ds, 0x8da6, al);
    al = 0x00;
    memoryASet(ds, 0x8de9, al);
    memoryASet(ds, 0x8dd1, al);
    memoryASet(ds, 0x8bf1, al);
    memoryASet(ds, 0x8b9c, al);
    ax = 0x075a;
    dx = cs;
    push(dx);
    push(ax);
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0a34);
    sp += 0x0006;
    ax = 0x0268;
    dx = cs;
    push(dx);
    push(ax);
    ax = 0x001c;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0a34);
    sp += 0x0006;
    ax = 0x0019;
    dx = 0x0ba1;
    push(dx);
    push(ax);
    ax = 0x0024;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0a34);
    sp += 0x0006;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_adf2() // 0a34:0ab2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(memoryAGet16(ds, 0x8a68));
    push(memoryAGet16(ds, 0x8a66));
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0a34);
    sp += 0x0006;
    push(memoryAGet16(ds, 0x8a24));
    push(memoryAGet16(ds, 0x8a22));
    ax = 0x001c;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0a34);
    sp += 0x0006;
    push(memoryAGet16(ds, 0x8ba0));
    push(memoryAGet16(ds, 0x8b9e));
    ax = 0x0024;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0a34);
    sp += 0x0006;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ae2f() // 0a34:0aef
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x001e;
    di = memoryAGet16(ss, bp + 10);
    if ((short)di < (short)0x0134)
        goto loc_ae43;
    goto loc_af5b;
loc_ae43: // 0a34:0b03
    if ((short)memoryAGet16(ss, bp + 12) < (short)0x00c8)
        goto loc_ae4d;
    goto loc_af5b;
loc_ae4d: // 0a34:0b0d
    if ((short)di >= 0)
        goto loc_ae54;
    goto loc_af5b;
loc_ae54: // 0a34:0b14
    if ((short)memoryAGet16(ss, bp + 12) >= (short)0x0000)
        goto loc_ae5d;
    goto loc_af5b;
loc_ae5d: // 0a34:0b1d
    bx = memoryAGet16(ds, 0x8dee);
    es = memoryAGet16(ds, 0x8dee + 2);
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    memoryASet16(ss, bp - 6, 0x0002);
    si = 0x00c8;
    si -= memoryAGet16(ss, bp + 12);
    if (si <= 0x000c)
        goto loc_ae7a;
    si = 0x000c;
loc_ae7a: // 0a34:0b3a
    memoryASet16(ss, bp - 8, 0x0000);
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_aec3;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_ae9b;
        case 2: goto loc_aea5;
        case 4: goto loc_aeaf;
        case 6: goto loc_aeb9;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_ae9b: // 0a34:0b5b
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_aecb;
loc_aea5: // 0a34:0b65
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_aecb;
loc_aeaf: // 0a34:0b6f
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_aecb;
loc_aeb9: // 0a34:0b79
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_aecb;
loc_aec3: // 0a34:0b83
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_aecb: // 0a34:0b8b
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    ax = di;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet(ss, bp - 22, dl);
    if (memoryAGet(ss, bp - 22) != 0x00)
        goto loc_aeee;
    memoryASet(ss, bp - 21, 0x00);
    goto loc_aef6;
loc_aeee: // 0a34:0bae
    al = 0x08;
    al -= memoryAGet(ss, bp - 22);
    memoryASet(ss, bp - 21, al);
loc_aef6: // 0a34:0bb6
    al = memoryAGet(ss, bp - 21);
    ah = 0x00;
    cx = 0x0008;
    ax <<= cl;
    dl = memoryAGet(ss, bp - 22);
    dh = 0x00;
    ax += dx;
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0028;
    mul(dx);
    push(ax);
    ax = di;
    bx = cx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 12, dx);
    bx = memoryAGet16(ss, bp - 26);
    es = memoryAGet16(ss, bp - 26 + 2);
    bx += dx;
    memoryASet16(ss, bp - 26, bx);
    ax = memoryAGet16(ss, bp - 30);
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 20, ax);
    ax = bx;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 16, ax);
    push(memoryAGet16(ss, bp - 14));
    push(ax);
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 20));
    push(si);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x0cc2;
    sub_d711(); // 0cc2:0af1
    assert(cs == 0x0a34);
    sp += 0x0010;
loc_af5b: // 0a34:0c1b
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_af61() // 0a34:0c21
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0014;
    si = 0x00c8;
    si -= memoryAGet16(ss, bp + 12);
    if (si <= 0x000c)
        goto loc_af77;
    si = 0x000c;
loc_af77: // 0a34:0c37
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_afbb;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_af93;
        case 2: goto loc_af9d;
        case 4: goto loc_afa7;
        case 6: goto loc_afb1;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_af93: // 0a34:0c53
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_afc3;
loc_af9d: // 0a34:0c5d
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_afc3;
loc_afa7: // 0a34:0c67
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_afc3;
loc_afb1: // 0a34:0c71
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_afc3;
loc_afbb: // 0a34:0c7b
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_afc3: // 0a34:0c83
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0028;
    mul(dx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 6, dx);
    bx = memoryAGet16(ss, bp - 20);
    bx += dx;
    memoryASet16(ss, bp - 20, bx);
    bx = memoryAGet16(ds, 0x91b0);
    es = memoryAGet16(ds, 0x91b0 + 2);
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    di = memoryAGet16(ss, bp - 20);
    ax = memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 12, ax);
    ax = bx;
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 8, ax);
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(ax);
    push(di);
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0cc2;
    sub_d8d2(); // 0cc2:0cb2
    assert(cs == 0x0a34);
    sp += 0x000a;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_b024() // 0a34:0ce4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0014;
    si = 0x00c8;
    si -= memoryAGet16(ss, bp + 12);
    if (si <= 0x000c)
        goto loc_b03a;
    si = 0x000c;
loc_b03a: // 0a34:0cfa
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b07e;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b056;
        case 2: goto loc_b060;
        case 4: goto loc_b06a;
        case 6: goto loc_b074;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b056: // 0a34:0d16
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b086;
loc_b060: // 0a34:0d20
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b086;
loc_b06a: // 0a34:0d2a
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b086;
loc_b074: // 0a34:0d34
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b086;
loc_b07e: // 0a34:0d3e
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b086: // 0a34:0d46
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0028;
    mul(dx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 6, dx);
    bx = memoryAGet16(ss, bp - 16);
    bx += dx;
    memoryASet16(ss, bp - 16, bx);
    bx = memoryAGet16(ds, 0x91b0);
    es = memoryAGet16(ds, 0x91b0 + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    di = bx;
    ax = memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 8, ax);
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(ax);
    push(di);
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0cc2;
    sub_d929(); // 0cc2:0d09
    assert(cs == 0x0a34);
    sp += 0x000a;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_b0e7() // 0a34:0da7
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0014;
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_b103;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_af61(); // 0a34:0c21
    sp += 0x0004;
loc_b103: // 0a34:0dc3
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_b114;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_b114;
    goto loc_b1f9;
loc_b114: // 0a34:0dd4
    si = 0x00c8;
    si -= memoryAGet16(ss, bp + 12);
    if (si <= 0x000c)
        goto loc_b122;
    si = 0x000c;
loc_b122: // 0a34:0de2
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 12);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    di = ax;
    ax = di;
    dx = 0x0050;
    mul(dx);
    di = ax;
    di += memoryAGet16(ss, bp - 6);
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b189;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b161;
        case 2: goto loc_b16b;
        case 4: goto loc_b175;
        case 6: goto loc_b17f;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b161: // 0a34:0e21
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b191;
loc_b16b: // 0a34:0e2b
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b191;
loc_b175: // 0a34:0e35
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b191;
loc_b17f: // 0a34:0e3f
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b191;
loc_b189: // 0a34:0e49
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b191: // 0a34:0e51
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    ax = memoryAGet16(ss, bp + 12);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    if (!dx)
        goto loc_b1be;
    ax = di;
    ax += 0x2000;
    bx = memoryAGet16(ss, bp - 20);
    bx += ax;
    memoryASet16(ss, bp - 20, bx);
    memoryASet16(ss, bp - 8, 0x0000);
    goto loc_b1cb;
loc_b1be: // 0a34:0e7e
    bx = memoryAGet16(ss, bp - 20);
    es = memoryAGet16(ss, bp - 20 + 2);
    bx += di;
    memoryASet16(ss, bp - 20, bx);
    memoryASet16(ss, bp - 8, 0x0050);
loc_b1cb: // 0a34:0e8b
    ax = memoryAGet16(ds, 0x91b2);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, 0x91b0);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 14, ax);
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x0ba1;
    sub_bb3c(); // 0ba1:012c
    assert(cs == 0x0a34);
    sp += 0x000c;
loc_b1f9: // 0a34:0eb9
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_b203;
    goto loc_b2cf;
loc_b203: // 0a34:0ec3
    si = 0x00c8;
    si -= memoryAGet16(ss, bp + 12);
    if (si <= 0x000c)
        goto loc_b211;
    si = 0x000c;
loc_b211: // 0a34:0ed1
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 6, ax);
    di = memoryAGet16(ss, bp + 12);
    di &= 0x0003;
    cx = 0x000d;
    di <<= cl;
    ax = memoryAGet16(ss, bp + 12);
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = 0x00a0;
    mul(dx);
    di += ax;
    di += memoryAGet16(ss, bp - 6);
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b280;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b258;
        case 2: goto loc_b262;
        case 4: goto loc_b26c;
        case 6: goto loc_b276;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b258: // 0a34:0f18
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b288;
loc_b262: // 0a34:0f22
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b288;
loc_b26c: // 0a34:0f2c
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b288;
loc_b276: // 0a34:0f36
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b288;
loc_b280: // 0a34:0f40
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b288: // 0a34:0f48
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    bx += di;
    memoryASet16(ss, bp - 20, bx);
    ax = memoryAGet16(ss, bp + 12);
    ax &= 0x0003;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ds, 0x91b2);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, 0x91b0);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 16, ax);
    ax = bx;
    memoryASet16(ss, bp - 14, ax);
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x0e11;
    sub_e1c6(); // 0e11:00b6
    assert(cs == 0x0a34);
    sp += 0x000c;
loc_b2cf: // 0a34:0f8f
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_b2d9;
    goto loc_b37e;
loc_b2d9: // 0a34:0f99
    si = 0x00c8;
    si -= memoryAGet16(ss, bp + 12);
    if (si <= 0x000c)
        goto loc_b2e7;
    si = 0x000c;
loc_b2e7: // 0a34:0fa7
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0140;
    mul(dx);
    di = ax;
    di += memoryAGet16(ss, bp + 10);
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b338;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b310;
        case 2: goto loc_b31a;
        case 4: goto loc_b324;
        case 6: goto loc_b32e;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b310: // 0a34:0fd0
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b340;
loc_b31a: // 0a34:0fda
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b340;
loc_b324: // 0a34:0fe4
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b340;
loc_b32e: // 0a34:0fee
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b340;
loc_b338: // 0a34:0ff8
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b340: // 0a34:1000
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    bx += di;
    memoryASet16(ss, bp - 20, bx);
    ax = memoryAGet16(ds, 0x91b2);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, 0x91b0);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 16, ax);
    ax = bx;
    memoryASet16(ss, bp - 14, ax);
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x0e97;
    sub_ec66(); // 0e97:02f6
    assert(cs == 0x0a34);
    sp += 0x000c;
loc_b37e: // 0a34:103e
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_b384() // 0a34:1044
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0022;
    di = memoryAGet16(ss, bp + 12);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_b3a1;
    push(di);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_ae2f(); // 0a34:0aef
    sp += 0x0004;
loc_b3a1: // 0a34:1061
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_b3b2;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_b3b2;
    goto loc_b4f9;
loc_b3b2: // 0a34:1072
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 14, dx);
    si = 0x00c8;
    si -= di;
    if (si <= 0x000c)
        goto loc_b3cb;
    si = 0x000c;
loc_b3cb: // 0a34:108b
    memoryASet16(ss, bp - 6, 0x0003);
    memoryASet16(ss, bp - 10, 0x0024);
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b419;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b3f1;
        case 2: goto loc_b3fb;
        case 4: goto loc_b405;
        case 6: goto loc_b40f;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b3f1: // 0a34:10b1
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b421;
loc_b3fb: // 0a34:10bb
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b421;
loc_b405: // 0a34:10c5
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b421;
loc_b40f: // 0a34:10cf
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b421;
loc_b419: // 0a34:10d9
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b421: // 0a34:10e1
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    bx = memoryAGet16(ds, 0x8dee);
    es = memoryAGet16(ds, 0x8dee + 2);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    ax = memoryAGet16(ss, bp - 32);
    memoryASet16(ss, bp - 22, ax);
    ax = bx;
    memoryASet16(ss, bp - 20, ax);
    ax = di;
    ax &= 0x0001;
    cx = 0x000d;
    ax <<= cl;
    push(ax);
    ax = di;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = 0x0050;
    mul(dx);
    dx = pop();
    dx += ax;
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0004;
    push(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ss, bp - 26);
    es = memoryAGet16(ss, bp - 26 + 2);
    bx += dx;
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_b490;
    ax = di;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x0080;
    memoryASet16(ss, bp - 12, dx);
    goto loc_b49b;
loc_b490: // 0a34:1150
    ax = di;
    ax &= 0x0001;
    ax ^= 0x0001;
    memoryASet16(ss, bp - 12, ax);
loc_b49b: // 0a34:115b
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 30);
    memoryASet16(ss, bp - 16, ax);
    if (memoryAGet16(ss, bp - 14) == 0x0000)
        goto loc_b4d8;
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 14));
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0ba1;
    sub_bc26(); // 0ba1:0216
    assert(cs == 0x0a34);
    sp += 0x0018;
    goto loc_b4f9;
loc_b4d8: // 0a34:1198
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0ba1;
    sub_be9f(); // 0ba1:048f
    assert(cs == 0x0a34);
    sp += 0x0012;
loc_b4f9: // 0a34:11b9
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_b503;
    goto loc_b62b;
loc_b503: // 0a34:11c3
    ax = memoryAGet16(ss, bp + 10);
    ax &= 0x0001;
    memoryASet16(ss, bp - 14, ax);
    si = 0x00c8;
    si -= di;
    if (si <= 0x000c)
        goto loc_b519;
    si = 0x000c;
loc_b519: // 0a34:11d9
    memoryASet16(ss, bp - 6, 0x0008);
    memoryASet16(ss, bp - 10, 0x0060);
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b567;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b53f;
        case 2: goto loc_b549;
        case 4: goto loc_b553;
        case 6: goto loc_b55d;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b53f: // 0a34:11ff
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b56f;
loc_b549: // 0a34:1209
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b56f;
loc_b553: // 0a34:1213
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b56f;
loc_b55d: // 0a34:121d
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b56f;
loc_b567: // 0a34:1227
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b56f: // 0a34:122f
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    bx = memoryAGet16(ds, 0x8dee);
    es = memoryAGet16(ds, 0x8dee + 2);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    ax = memoryAGet16(ss, bp - 32);
    memoryASet16(ss, bp - 22, ax);
    ax = bx;
    memoryASet16(ss, bp - 20, ax);
    ax = di;
    ax &= 0x0003;
    cx = 0x000d;
    ax <<= cl;
    push(ax);
    ax = di;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = 0x00a0;
    mul(dx);
    dx = pop();
    dx += ax;
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0002;
    push(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 8, dx);
    ax = di;
    ax &= 0x0003;
    memoryASet16(ss, bp - 12, ax);
    bx = memoryAGet16(ss, bp - 26);
    es = memoryAGet16(ss, bp - 26 + 2);
    bx += dx;
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 18, ax);
    ax = bx;
    memoryASet16(ss, bp - 16, ax);
    if (memoryAGet16(ss, bp - 14) == 0x0000)
        goto loc_b60a;
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ss, bp - 14));
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0e11;
    sub_e25c(); // 0e11:014c
    assert(cs == 0x0a34);
    sp += 0x0018;
    goto loc_b62b;
loc_b60a: // 0a34:12ca
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(si);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x0e11;
    sub_e3b9(); // 0e11:02a9
    assert(cs == 0x0a34);
    sp += 0x0012;
loc_b62b: // 0a34:12eb
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_b635;
    goto loc_b6ee;
loc_b635: // 0a34:12f5
    si = 0x00c8;
    si -= di;
    if (si <= 0x000c)
        goto loc_b642;
    si = 0x000c;
loc_b642: // 0a34:1302
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b686;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b65e;
        case 2: goto loc_b668;
        case 4: goto loc_b672;
        case 6: goto loc_b67c;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b65e: // 0a34:131e
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b68e;
loc_b668: // 0a34:1328
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b68e;
loc_b672: // 0a34:1332
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b68e;
loc_b67c: // 0a34:133c
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b68e;
loc_b686: // 0a34:1346
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b68e: // 0a34:134e
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 24, es);
    memoryASet16(ss, bp - 26, bx);
    bx = memoryAGet16(ds, 0x8dee);
    es = memoryAGet16(ds, 0x8dee + 2);
    memoryASet16(ss, bp - 32, es);
    memoryASet16(ss, bp - 34, bx);
    ax = memoryAGet16(ss, bp - 32);
    memoryASet16(ss, bp - 22, ax);
    ax = bx;
    memoryASet16(ss, bp - 20, ax);
    ax = di;
    dx = 0x0140;
    mul(dx);
    ax += memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ss, bp - 26);
    es = memoryAGet16(ss, bp - 26 + 2);
    bx += ax;
    memoryASet16(ss, bp - 28, es);
    memoryASet16(ss, bp - 30, bx);
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 18, ax);
    ax = bx;
    memoryASet16(ss, bp - 16, ax);
    ax = 0x000c;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(cs);
    cs = 0x0e97;
    sub_ec9e(); // 0e97:032e
    assert(cs == 0x0a34);
    sp += 0x000c;
loc_b6ee: // 0a34:13ae
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_b6f4() // 0a34:13b4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0018;
    di = memoryAGet16(ss, bp + 12);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_b711;
    push(di);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_b024(); // 0a34:0ce4
    sp += 0x0004;
loc_b711: // 0a34:13d1
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_b722;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_b722;
    goto loc_b80e;
loc_b722: // 0a34:13e2
    si = 0x00c8;
    si -= di;
    if (si <= 0x000c)
        goto loc_b72f;
    si = 0x000c;
loc_b72f: // 0a34:13ef
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b773;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b74b;
        case 2: goto loc_b755;
        case 4: goto loc_b75f;
        case 6: goto loc_b769;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b74b: // 0a34:140b
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b77b;
loc_b755: // 0a34:1415
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b77b;
loc_b75f: // 0a34:141f
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b77b;
loc_b769: // 0a34:1429
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b77b;
loc_b773: // 0a34:1433
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b77b: // 0a34:143b
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    ax = di;
    ax &= 0x0001;
    cx = 0x000d;
    ax <<= cl;
    push(ax);
    ax = di;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = 0x0050;
    mul(dx);
    dx = pop();
    dx += ax;
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0004;
    push(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 6, dx);
    bx = memoryAGet16(ss, bp - 20);
    bx += dx;
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_b7d5;
    ax = di;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x0080;
    memoryASet16(ss, bp - 8, dx);
    goto loc_b7e0;
loc_b7d5: // 0a34:1495
    ax = di;
    ax &= 0x0001;
    ax ^= 0x0001;
    memoryASet16(ss, bp - 8, ax);
loc_b7e0: // 0a34:14a0
    ax = memoryAGet16(ds, 0x91b2);
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ds, 0x91b0);
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 10, ax);
    push(si);
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x0ba1;
    sub_be37(); // 0ba1:0427
    assert(cs == 0x0a34);
    sp += 0x000c;
loc_b80e: // 0a34:14ce
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_b818;
    goto loc_b8e8;
loc_b818: // 0a34:14d8
    si = 0x00c8;
    si -= di;
    if (si <= 0x000c)
        goto loc_b825;
    si = 0x000c;
loc_b825: // 0a34:14e5
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b869;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b841;
        case 2: goto loc_b84b;
        case 4: goto loc_b855;
        case 6: goto loc_b85f;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b841: // 0a34:1501
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b871;
loc_b84b: // 0a34:150b
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b871;
loc_b855: // 0a34:1515
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b871;
loc_b85f: // 0a34:151f
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b871;
loc_b869: // 0a34:1529
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b871: // 0a34:1531
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    ax = di;
    ax &= 0x0003;
    cx = 0x000d;
    ax <<= cl;
    push(ax);
    ax = di;
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = 0x00a0;
    mul(dx);
    dx = pop();
    dx += ax;
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0002;
    push(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 6, dx);
    bx = memoryAGet16(ss, bp - 20);
    bx += dx;
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    ax = di;
    ax &= 0x0003;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ds, 0x91b2);
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ds, 0x91b0);
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 12, ax);
    ax = bx;
    memoryASet16(ss, bp - 10, ax);
    push(si);
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x0e11;
    sub_e318(); // 0e11:0208
    assert(cs == 0x0a34);
    sp += 0x000c;
loc_b8e8: // 0a34:15a8
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_b8f2;
    goto loc_b999;
loc_b8f2: // 0a34:15b2
    si = 0x00c8;
    si -= di;
    if (si <= 0x000c)
        goto loc_b8ff;
    si = 0x000c;
loc_b8ff: // 0a34:15bf
    al = memoryAGet(ds, 0x8f66);
    ah = 0x00;
    ax--;
    if (ax > 0x0003)
        goto loc_b943;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_b91b;
        case 2: goto loc_b925;
        case 4: goto loc_b92f;
        case 6: goto loc_b939;
        default:
        assert(0);
    }
    //   gap of 8 bytes
loc_b91b: // 0a34:15db
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_b94b;
loc_b925: // 0a34:15e5
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    goto loc_b94b;
loc_b92f: // 0a34:15ef
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    goto loc_b94b;
loc_b939: // 0a34:15f9
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bba);
    goto loc_b94b;
loc_b943: // 0a34:1603
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_b94b: // 0a34:160b
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 18, es);
    memoryASet16(ss, bp - 20, bx);
    ax = di;
    dx = 0x0140;
    mul(dx);
    ax += memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 6, ax);
    bx += ax;
    memoryASet16(ss, bp - 22, es);
    memoryASet16(ss, bp - 24, bx);
    ax = memoryAGet16(ds, 0x91b2);
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ds, 0x91b0);
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 12, ax);
    ax = bx;
    memoryASet16(ss, bp - 10, ax);
    push(si);
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 16));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x0e97;
    sub_edd8(); // 0e97:0468
    assert(cs == 0x0a34);
    sp += 0x000c;
loc_b999: // 0a34:1659
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_b99f() // 0a34:165f
{
    CStackGuardFar sg(0, false);
    if (memoryAGet(ds, 0x87ea) == 0x00)
        goto loc_b9ab;
    ax = 0x0001;
    goto loc_b9ad;
loc_b9ab: // 0a34:166b
    ax = 0;
loc_b9ad: // 0a34:166d
    cs = pop();
}
void sub_b9ae() // 0a34:166e
{
    CStackGuardFar sg(0, false);
    push(cs);
    sub_b99f(); // 0a34:165f
    if (!ax)
        goto loc_b9ce;
loc_b9b6: // 0a34:1676
    push(cs);
    sub_b99f(); // 0a34:165f
    if (ax)
        goto loc_b9b6;
loc_b9be: // 0a34:167e
    push(cs);
    sub_b99f(); // 0a34:165f
    if (!ax)
        goto loc_b9be;
loc_b9c6: // 0a34:1686
    push(cs);
    sub_b99f(); // 0a34:165f
    if (ax)
        goto loc_b9c6;
loc_b9ce: // 0a34:168e
    cs = pop();
}
void sub_b9cf() // 0a34:168f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    si >>= 1;
    if (!si)
        goto loc_b9dd;
    si--;
loc_b9dd: // 0a34:169d
    //{sync(); printf("sync at %d\n", __LINE__);} gabo!!!
//    ax = memoryAGet16(ds, 0x8dd8);
//    if (ax < si)
//        goto loc_b9dd;
    memoryASet16(ds, 0x8dd8, 0x0000);
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_b9ed() // 0a34:16ad
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    si >>= 1;
    if (!si)
        goto loc_b9fb;
    si--;
loc_b9fb: // 0a34:16bb
    sync(); // game
    ax = memoryAGet16(ds, 0x8dd8);
    if (ax >= si)
        goto loc_ba0b;
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x0a34);
    sp = bp;
    goto loc_b9fb;
loc_ba0b: // 0a34:16cb
    memoryASet16(ds, 0x8dd8, 0x0000);
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ba29() // 0ba1:0019
{
    if (!(ah & 0x80))
        goto loc_ba33;
    cs = 0x0a34;
    callIndirect(0x0a34, 0x09eb);
loc_ba33: // 0ba1:0023
    memoryASet(cs, 0x0004, 0x01);
    memoryASet16(cs, 0x0005, bp);
    memoryASet16(cs, 0x0007, si);
    al = 0x00;
    stop(); // iret 
}
void sub_ba46() // 0ba1:0036
{
    CStackGuardFar sg(0, false);
    al = 0x00;
    memoryASet(cs, 0x0004, al);
    cs = pop();
}
void sub_ba4d() // 0ba1:003d
{
    CStackGuardFar sg(0, false);
    ax = 0x0000;
    al = memoryAGet(cs, 0x0004);
    cs = pop();
}
void sub_bacb() // 0ba1:00bb
{
    CStackGuardFar sg(0, false);
    ax = 0xf000;
    push(ax);
    ax = 0xe05b;
    push(ax);
    stop(/*inject ret*/);
    cs = pop();
}
void sub_bb20() // 0ba1:0110
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(di);
    push(cx);
    flags.direction = false;
    ax = memoryAGet16(ss, bp + 8);
    es = ax;
    di = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x2000;
    rep_stosw<MemAuto, DirAuto>();
    cx = pop();
    di = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_bb3c() // 0ba1:012c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ds = ax;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    es = ax;
    di = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 16);
loc_bb5d: // 0ba1:014d
    push(si);
    cx = 0x0004;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    si = pop();
    dx--;
    if (dx == 0)
        goto loc_bb7e;
    if (ax == 0x0050)
        goto loc_bb75;
    si -= 0x1fb0;
    ax = 0x0050;
    goto loc_bb5d;
loc_bb75: // 0ba1:0165
    si += 0x2000;
    ax = 0x0000;
    goto loc_bb5d;
loc_bb7e: // 0ba1:016e
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_bbd5() // 0ba1:01c5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    ax = 0x0050;
    dx = 0x0064;
loc_bbf5: // 0ba1:01e5
    push(dx);
    cx = 0x0050;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    dx = pop();
    dx--;
    if (dx == 0)
        goto loc_bc1e;
    if (ax == 0x0050)
        goto loc_bc11;
    di -= 0x2000;
    si -= 0x2000;
    ax = 0x0050;
    goto loc_bbf5;
loc_bc11: // 0ba1:0201
    si += 0x1f60;
    di += 0x1f60;
    ax = 0x0000;
    goto loc_bbf5;
loc_bc1e: // 0ba1:020e
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_bc26() // 0ba1:0216
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(di);
    push(si);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 16);
    ds = ax;
    ax = memoryAGet16(ss, bp + 20);
    es = ax;
    si = memoryAGet16(ss, bp + 18);
    di = memoryAGet16(ss, bp + 22);
    bx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 14);
    if (cx != 0x0001)
        goto loc_bc55;
    goto loc_bd79;
loc_bc55: // 0ba1:0245
    if (cx != 0x0002)
        goto loc_bc5d;
    goto loc_bceb;
loc_bc5d: // 0ba1:024d
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(es, di);
    if (memoryAGet16(ss, bp + 24) == 0x0000)
        goto loc_bc85;
    ax = bx;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    al |= 0xfc;
    ah &= 0x03;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
loc_bc85: // 0ba1:0275
    si++;
    cx--;
loc_bc87: // 0ba1:0277
    ax = bx;
    di += 0x0002;
    dx = memoryAGet16(es, di);
    bx = dx;
    ax <<= 1;
    ax <<= 1;
    ax &= 0xfcfc;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx &= 0x0303;
    ax |= dx;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_bc87;
    if (memoryAGet16(ss, bp + 26) == 0x0000)
        goto loc_bcca;
    ax = bx;
    ax <<= 1;
    ax <<= 1;
    al |= 0x03;
    ah &= 0xfc;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
loc_bcca: // 0ba1:02ba
    di += 0x0002;
    di += memoryAGet16(ss, bp + 28);
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_bcd9;
    goto loc_be07;
loc_bcd9: // 0ba1:02c9
    al ^= 0x01;
    if (!al)
        goto loc_bce4;
    si -= 0x1fb0;
    goto loc_bc5d;
loc_bce4: // 0ba1:02d4
    si += 0x2000;
    goto loc_bc5d;
loc_bceb: // 0ba1:02db
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(es, di);
    if (memoryAGet16(ss, bp + 24) == 0x0000)
        goto loc_bd0f;
    ax = bx;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    al |= 0xf0;
    ah &= 0x0f;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
loc_bd0f: // 0ba1:02ff
    si++;
    cx--;
loc_bd11: // 0ba1:0301
    ax = bx;
    di += 0x0002;
    dx = memoryAGet16(es, di);
    bx = dx;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax &= 0xf0f0;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx &= 0x0f0f;
    ax |= dx;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_bd11;
    if (memoryAGet16(ss, bp + 26) == 0x0000)
        goto loc_bd58;
    ax = bx;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    al |= 0x0f;
    ah &= 0xf0;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
loc_bd58: // 0ba1:0348
    di += 0x0002;
    di += memoryAGet16(ss, bp + 28);
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_bd67;
    goto loc_be07;
loc_bd67: // 0ba1:0357
    al ^= 0x01;
    if (!al)
        goto loc_bd72;
    si -= 0x1fb0;
    goto loc_bceb;
loc_bd72: // 0ba1:0362
    si += 0x2000;
    goto loc_bceb;
loc_bd79: // 0ba1:0369
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(es, di);
    if (memoryAGet16(ss, bp + 24) == 0x0000)
        goto loc_bd99;
    ax = bx;
    ax >>= 1;
    ax >>= 1;
    al |= 0xc0;
    ah &= 0x3f;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
loc_bd99: // 0ba1:0389
    si++;
    cx--;
loc_bd9b: // 0ba1:038b
    ax = bx;
    di += 0x0002;
    dx = memoryAGet16(es, di);
    bx = dx;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax &= 0xc0c0;
    dx >>= 1;
    dx >>= 1;
    dx &= 0x3f3f;
    ax |= dx;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_bd9b;
    if (memoryAGet16(ss, bp + 26) == 0x0000)
        goto loc_bde6;
    ax = bx;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    al |= 0x3f;
    ah &= 0xc0;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
loc_bde6: // 0ba1:03d6
    di += 0x0002;
    di += memoryAGet16(ss, bp + 28);
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_bdf5;
    goto loc_be07;
loc_bdf5: // 0ba1:03e5
    al ^= 0x01;
    if (!al)
        goto loc_be00;
    si -= 0x1fb0;
    goto loc_bd79;
loc_be00: // 0ba1:03f0
    si += 0x2000;
    goto loc_bd79;
loc_be07: // 0ba1:03f7
    bx = pop();
    cx = pop();
    dx = pop();
    si = pop();
    di = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_be10() // 0ba1:0400
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    flags.direction = false;
    ax = memoryAGet16(ss, bp + 8);
    es = ax;
    ds = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x2000;
    si = ax;
    ax += 0x2000;
    di = ax;
    cx = 0x1000;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_be37() // 0ba1:0427
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ds = ax;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    es = ax;
    di = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 16);
loc_be58: // 0ba1:0448
    push(di);
    cx = 0x0004;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di = pop();
    dx--;
    if (dx == 0)
        goto loc_be96;
    al ^= 0x01;
    if (!al)
        goto loc_be6c;
    di -= 0x1fb0;
    goto loc_be58;
loc_be6c: // 0ba1:045c
    di += 0x2000;
    goto loc_be58;
    //   gap of 36 bytes
loc_be96: // 0ba1:0486
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_be9f() // 0ba1:048f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    ax = memoryAGet16(ss, bp + 18);
    es = ax;
    si = memoryAGet16(ss, bp + 16);
    di = memoryAGet16(ss, bp + 20);
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 12);
    dh = al;
    bx = memoryAGet16(ss, bp + 8);
loc_bec4: // 0ba1:04b4
    cx = bx;
loc_bec6: // 0ba1:04b6
    ax = memoryAGet16(es, di);
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
    di += 0x0002;
    si++;
    if (--cx)
        goto loc_bec6;
    di += memoryAGet16(ss, bp + 22);
    si -= bx;
    dl--;
    if (dl == 0)
        goto loc_beef;
    dh ^= 0x01;
    if (!dh)
        goto loc_bee9;
    si -= 0x1fb0;
    goto loc_bec4;
loc_bee9: // 0ba1:04d9
    si += 0x2000;
    goto loc_bec4;
loc_beef: // 0ba1:04df
    bx = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_bef8() // 0ba1:04e8
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(di);
    push(si);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 16);
    ds = ax;
    ax = memoryAGet16(ss, bp + 20);
    es = ax;
    si = memoryAGet16(ss, bp + 18);
    di = memoryAGet16(ss, bp + 22);
    bx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 14);
    if (cx != 0x0001)
        goto loc_bf26;
    goto loc_c094;
loc_bf26: // 0ba1:0516
    if (cx != 0x0002)
        goto loc_bf2e;
    goto loc_bfe5;
loc_bf2e: // 0ba1:051e
    if (cx != 0x0000)
        goto loc_bf36;
    goto loc_c143;
loc_bf36: // 0ba1:0526
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    al >>= 1;
    al >>= 1;
    al >>= 1;
    al >>= 1;
    al >>= 1;
    al >>= 1;
    al |= 0xfc;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah &= bl;
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    cx--;
loc_bf69: // 0ba1:0559
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    di++;
    ah = memoryAGet(es, di);
    dh = ah;
    ah = ~ah;
    al <<= 1;
    al <<= 1;
    dl <<= 1;
    dl <<= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    al |= ah;
    dl |= dh;
    al &= memoryAGet(ds, si);
    dl &= bl;
    al |= dl;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_bf69;
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    al <<= 1;
    al <<= 1;
    al |= 0x03;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah <<= 1;
    ah <<= 1;
    ah &= bl;
    al |= ah;
    memoryASet(ds, si, al);
    di++;
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_bfcc;
    goto loc_c17e;
loc_bfcc: // 0ba1:05bc
    if (ax == 0x0050)
        goto loc_bfdb;
    si -= 0x1fb0;
    ax = 0x0050;
    goto loc_bf36;
loc_bfdb: // 0ba1:05cb
    si += 0x2000;
    ax = 0x0000;
    goto loc_bf36;
loc_bfe5: // 0ba1:05d5
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    al >>= 1;
    al >>= 1;
    al >>= 1;
    al >>= 1;
    al |= 0xf0;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah &= bl;
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    cx--;
loc_c010: // 0ba1:0600
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    di++;
    ah = memoryAGet(es, di);
    dh = ah;
    ah = ~ah;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    al |= ah;
    dl |= dh;
    al &= memoryAGet(ds, si);
    dl &= bl;
    al |= dl;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_c010;
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al |= 0x0f;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah &= bl;
    al |= ah;
    memoryASet(ds, si, al);
    di++;
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_c07b;
    goto loc_c17e;
loc_c07b: // 0ba1:066b
    if (ax == 0x0050)
        goto loc_c08a;
    si -= 0x1fb0;
    ax = 0x0050;
    goto loc_bfe5;
loc_c08a: // 0ba1:067a
    si += 0x2000;
    ax = 0x0000;
    goto loc_bfe5;
loc_c094: // 0ba1:0684
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    al >>= 1;
    al >>= 1;
    al |= 0xc0;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah >>= 1;
    ah >>= 1;
    ah &= bl;
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    cx--;
loc_c0b7: // 0ba1:06a7
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    di++;
    ah = memoryAGet(es, di);
    dh = ah;
    ah = ~ah;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    ah >>= 1;
    ah >>= 1;
    dh >>= 1;
    dh >>= 1;
    al |= ah;
    dl |= dh;
    al &= memoryAGet(ds, si);
    dl &= bl;
    al |= dl;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_c0b7;
    al = memoryAGet(es, di);
    dl = al;
    al = ~al;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al |= 0x3f;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah &= bl;
    al |= ah;
    memoryASet(ds, si, al);
    di++;
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_c12a;
    goto loc_c17e;
loc_c12a: // 0ba1:071a
    if (ax == 0x0050)
        goto loc_c139;
    si -= 0x1fb0;
    ax = 0x0050;
    goto loc_c094;
loc_c139: // 0ba1:0729
    si += 0x2000;
    ax = 0x0000;
    goto loc_c094;
loc_c143: // 0ba1:0733
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
loc_c149: // 0ba1:0739
    al = memoryAGet(es, di);
    di++;
    dl = al;
    al = ~al;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah &= bl;
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_c149;
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_c167;
    goto loc_c17e;
loc_c167: // 0ba1:0757
    if (ax == 0x0050)
        goto loc_c175;
    si -= 0x1fb0;
    ax = 0x0050;
    goto loc_c143;
loc_c175: // 0ba1:0765
    si += 0x2000;
    ax = 0x0000;
    goto loc_c143;
loc_c17e: // 0ba1:076e
    bx = pop();
    cx = pop();
    dx = pop();
    si = pop();
    di = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_c416() // 0ba1:0a06
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(di);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 16);
    es = ax;
    di = memoryAGet16(ss, bp + 18);
    ax = memoryAGet16(ss, bp + 10);
    dh = al;
    ax = memoryAGet16(ss, bp + 14);
    dl = al;
    bx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 6);
    ah = al;
loc_c439: // 0ba1:0a29
    push(di);
    cx = memoryAGet16(ss, bp + 8);
    if (cx != 0x7777)
        goto loc_c45e;
    al = bh;
    al |= bl;
    al = ~al;
    al &= dl;
    push(dx);
    dl = al;
    al = bh;
    al |= bl;
    al &= memoryAGet(es, di);
    al |= dl;
    dx = pop();
    memoryASet(es, di, al);
    goto loc_c49a;
loc_c45e: // 0ba1:0a4e
    if (bh == 0x00)
        goto loc_c478;
    al = bh;
    al = ~al;
    al &= dl;
    push(dx);
    dl = al;
    al = bh;
    al &= memoryAGet(es, di);
    al |= dl;
    dx = pop();
    memoryASet(es, di, al);
    di++;
loc_c478: // 0ba1:0a68
    if (cx == 0x0000)
        goto loc_c481;
    al = dl;
    rep_stosb<MemAuto, DirAuto>();
loc_c481: // 0ba1:0a71
    if (bl == 0x00)
        goto loc_c49a;
    al = bl;
    al = ~al;
    al &= dl;
    push(dx);
    dl = al;
    al = bl;
    al &= memoryAGet(es, di);
    al |= dl;
    dx = pop();
    memoryASet(es, di, al);
loc_c49a: // 0ba1:0a8a
    di = pop();
    dh--;
    if (dh != 0)
        goto loc_c4a1;
    goto loc_c4b6;
loc_c4a1: // 0ba1:0a91
    if (ah == 0x50)
        goto loc_c4ae;
    di -= 0x1fb0;
    ah = 0x50;
    goto loc_c439;
loc_c4ae: // 0ba1:0a9e
    di += 0x2000;
    ah = 0x00;
    goto loc_c439;
loc_c4b6: // 0ba1:0aa6
    bx = pop();
    cx = pop();
    dx = pop();
    di = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_c6ac() // 0ba1:0c9c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    push(bx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 16);
    dx = memoryAGet16(ss, bp + 18);
    dx &= 0x0001;
    flags.direction = false;
loc_c6d3: // 0ba1:0cc3
    cx = bx;
    cx >>= 1;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    di -= bx;
    si -= bx;
    if (dl == 0x01)
        goto loc_c6f1;
    dl = 0x01;
    si += 0x2000;
    di += 0x2000;
    ax--;
    if (ax != 0)
        goto loc_c6d3;
    goto loc_c6fe;
loc_c6f1: // 0ba1:0ce1
    dl = 0x00;
    si -= 0x1fb0;
    di -= 0x1fb0;
    ax--;
    if (ax != 0)
        goto loc_c6d3;
loc_c6fe: // 0ba1:0cee
    bx = pop();
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_c707() // 0ba1:0cf7
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    push(bx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 16);
    dx = memoryAGet16(ss, bp + 18);
    dx &= 0x0001;
    flags.direction = false;
loc_c72e: // 0ba1:0d1e
    cx = bx;
    cx >>= 1;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    di -= bx;
    si -= bx;
    if (dl == 0x01)
        goto loc_c74c;
    dl = 0x01;
    si += 0x2000;
    di += 0x2000;
    ax--;
    if (ax != 0)
        goto loc_c72e;
    goto loc_c76b;
loc_c74c: // 0ba1:0d3c
    dl = 0x00;
    cx = bx;
    cx >>= 1;
    di += 0x2000;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    di -= bx;
    si -= bx;
    di -= 0x2000;
    si -= 0x1fb0;
    di -= 0x1fb0;
    ax--;
    if (ax != 0)
        goto loc_c72e;
loc_c76b: // 0ba1:0d5b
    bx = pop();
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_c774() // 0ba1:0d64
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 18);
    bx = memoryAGet16(ss, bp + 14);
loc_c794: // 0ba1:0d84
    cx = memoryAGet16(ss, bp + 16);
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di -= memoryAGet16(ss, bp + 16);
    dl ^= 0x01;
    if (!dl)
        goto loc_c7aa;
    di += 0x2000;
    bx--;
    if (bx != 0)
        goto loc_c794;
    goto loc_c7b1;
loc_c7aa: // 0ba1:0d9a
    di -= 0x1fb0;
    bx--;
    if (bx != 0)
        goto loc_c794;
loc_c7b1: // 0ba1:0da1
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_c7ba() // 0ba1:0daa
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = 0x0ba1;
    es = ax;
    di = 0x0009;
    cx = 0x0010;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_c7e2() // 0ba1:0dd2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    cx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 6);
    es = ax;
    di = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    ds = ax;
    si = memoryAGet16(ss, bp + 12);
loc_c7ff: // 0ba1:0def
    push(cx);
    bx = 0;
    ax = memoryAGet16(ss, bp + 14);
    ch = memoryAGet(es, bx + di);
    bx += ax;
    cl = memoryAGet(es, bx + di);
    bx += ax;
    dh = memoryAGet(es, bx + di);
    bx += ax;
    dl = memoryAGet(es, bx + di);
    bx += ax;
    ah = memoryAGet(es, bx + di);
    ah ^= 0xff;
    di++;
    al = 0x00;
    if (!(ah & 0x80))
        goto loc_c829;
    al |= 0xc0;
loc_c829: // 0ba1:0e19
    if (!(ah & 0x40))
        goto loc_c830;
    al |= 0x30;
loc_c830: // 0ba1:0e20
    if (!(ah & 0x20))
        goto loc_c837;
    al |= 0x0c;
loc_c837: // 0ba1:0e27
    if (!(ah & 0x10))
        goto loc_c83e;
    al |= 0x03;
loc_c83e: // 0ba1:0e2e
    memoryASet(ds, si, al);
    si++;
    push(ax);
    bh = 0;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    ah = memoryAGet(cs, bx + 9);
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    al = memoryAGet(cs, bx + 9);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    ah |= al;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    al = memoryAGet(cs, bx + 9);
    al <<= 1;
    al <<= 1;
    ah |= al;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    ah |= memoryAGet(cs, bx + 9);
    memoryASet(ds, si, ah);
    si++;
    ax = pop();
    al = 0x00;
    if (!(ah & 0x08))
        goto loc_c8f1;
    al |= 0xc0;
loc_c8f1: // 0ba1:0ee1
    if (!(ah & 0x04))
        goto loc_c8f8;
    al |= 0x30;
loc_c8f8: // 0ba1:0ee8
    if (!(ah & 0x02))
        goto loc_c8ff;
    al |= 0x0c;
loc_c8ff: // 0ba1:0eef
    if (!(ah & 0x01))
        goto loc_c906;
    al |= 0x03;
loc_c906: // 0ba1:0ef6
    memoryASet(ds, si, al);
    si++;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    ah = memoryAGet(cs, bx + 9);
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    al = memoryAGet(cs, bx + 9);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    ah |= al;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    al = memoryAGet(cs, bx + 9);
    al <<= 1;
    al <<= 1;
    ah |= al;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    ah |= memoryAGet(cs, bx + 9);
    memoryASet(ds, si, ah);
    si++;
    cx = pop();
    cx--;
    if (cx == 0)
        goto loc_c9b3;
    goto loc_c7ff;
loc_c9b3: // 0ba1:0fa3
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_c9bc() // 0ba1:0fac
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    cx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 6);
    es = ax;
    di = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    ds = ax;
    si = memoryAGet16(ss, bp + 12);
loc_c9d9: // 0ba1:0fc9
    push(cx);
    bx = 0;
    ax = memoryAGet16(ss, bp + 14);
    ch = memoryAGet(es, bx + di);
    bx += ax;
    cl = memoryAGet(es, bx + di);
    bx += ax;
    dh = memoryAGet(es, bx + di);
    bx += ax;
    dl = memoryAGet(es, bx + di);
    di++;
    bh = 0;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    ah = memoryAGet(cs, bx + 9);
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    al = memoryAGet(cs, bx + 9);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    ah |= al;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    al = memoryAGet(cs, bx + 9);
    al <<= 1;
    al <<= 1;
    ah |= al;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    ah |= memoryAGet(cs, bx + 9);
    memoryASet(ds, si, ah);
    si++;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    ah = memoryAGet(cs, bx + 9);
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    al = memoryAGet(cs, bx + 9);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    ah |= al;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    al = memoryAGet(cs, bx + 9);
    al <<= 1;
    al <<= 1;
    ah |= al;
    bl = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bl += flags.carry;
    bl <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bl += flags.carry;
    ah |= memoryAGet(cs, bx + 9);
    memoryASet(ds, si, ah);
    si++;
    cx = pop();
    cx--;
    if (cx == 0)
        goto loc_cb41;
    goto loc_c9d9;
loc_cb41: // 0ba1:1131
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_cb4e() // 0cb4:000e
{
    CStackGuardFar sg(0, false);
    push(bx);
    push(cx);
    push(dx);
    dx = 0x0201;
    cx = 0x9c40;
    al = 0x00;
    out(dx, al);
    bx = 0x0001;
    in(al, dx);
    al &= 0x01;
    ah = al;
loc_cb64: // 0cb4:0024
    in(al, dx);
    al &= 0x01;
    if (al != ah)
        goto loc_cb71;
    cx--;
    if (cx != 0)
        goto loc_cb64;
    bx = 0x0000;
loc_cb71: // 0cb4:0031
    ax = bx;
    dx = pop();
    cx = pop();
    bx = pop();
    cs = pop();
}
void sub_cb77() // 0cb4:0037
{
    CStackGuardFar sg(0, false);
    push(bx);
    push(cx);
    push(dx);
    dx = 0x0201;
    cx = 0x9c40;
    al = 0x00;
    out(dx, al);
    bx = 0x0001;
    in(al, dx);
    al &= 0x08;
    ah = al;
loc_cb8d: // 0cb4:004d
    in(al, dx);
    al &= 0x08;
    if (al != ah)
        goto loc_cb9a;
    cx--;
    if (cx != 0)
        goto loc_cb8d;
    bx = 0x0000;
loc_cb9a: // 0cb4:005a
    ax = bx;
    dx = pop();
    cx = pop();
    bx = pop();
    cs = pop();
}
void sub_cba0() // 0cb4:0060
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(bx);
    push(cx);
    push(dx);
    bl = 0x01;
    bh = 0x02;
    ax = memoryAGet16(ss, bp + 6);
    if (al != 0x02)
        goto loc_cbb9;
    bl += bl;
    bl += bl;
    bh += bh;
    bh += bh;
loc_cbb9: // 0cb4:0079
    cx = 0x0000;
    memoryASet16(cs, 0x000a, cx);
    memoryASet16(cs, 0x000c, cx);
    cl = bl;
    cl |= bh;
    dx = 0x0201;
    al = 0x00;
    out(dx, al);
loc_cbd2: // 0cb4:0092
    in(al, dx);
    if (!(bl & al))
        goto loc_cbdc;
    memoryASet16(cs, 0x000a, memoryAGet16(cs, 0x000a) + 1);
loc_cbdc: // 0cb4:009c
    if (!(bh & al))
        goto loc_cbe5;
    memoryASet16(cs, 0x000c, memoryAGet16(cs, 0x000c) + 1);
loc_cbe5: // 0cb4:00a5
    if (cl & al)
        goto loc_cbd2;
    dx = pop();
    cx = pop();
    bx = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_cbee() // 0cb4:00ae
{
    CStackGuardFar sg(0, false);
    ax = memoryAGet16(cs, 0x000a);
    cs = pop();
}
void sub_cbf3() // 0cb4:00b3
{
    CStackGuardFar sg(0, false);
    ax = memoryAGet16(cs, 0x000c);
    cs = pop();
}
void sub_cbf8() // 0cb4:00b8
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(dx);
    push(cx);
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x04;
    al <<= cl;
    cl = al;
    ax = memoryAGet16(ss, bp + 8);
    if (al != 0x02)
        goto loc_cc11;
    cl += cl;
    cl += cl;
loc_cc11: // 0cb4:00d1
    dx = 0x0201;
    in(al, dx);
    al &= cl;
    if (al != 0)
        goto loc_cc1e;
    ax = 0x0001;
    goto loc_cc21;
loc_cc1e: // 0cb4:00de
    ax = 0x0000;
loc_cc21: // 0cb4:00e1
    cx = pop();
    dx = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d069() // 0cc2:0449
{
    CStackGuardFar sg(0, false);
    push(bx);
    push(cx);
    push(dx);
    bx = 0;
    cx = 0;
loc_d070: // 0cc2:0450
    ah = cl;
    ch = 0x08;
    al = 0x00;
loc_d076: // 0cc2:0456
    al += al;
    if (!(ah & 0x01))
        goto loc_d07f;
    al++;
loc_d07f: // 0cc2:045f
    ah >>= 1;
    ch--;
    if (ch != 0)
        goto loc_d076;
    memoryASet(cs, bx + 326, al);
    bx++;
    ch = 0x00;
    cx++;
    if (cx != 0x0100)
        goto loc_d070;
    bx = 0;
    cx = 0;
loc_d098: // 0cc2:0478
    dh = cl;
    dh &= 0xc0;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dl = cl;
    dl &= 0x30;
    dl >>= 1;
    dl >>= 1;
    ah = cl;
    ah &= 0x0c;
    ah <<= 1;
    ah <<= 1;
    al = cl;
    al &= 0x03;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al |= ah;
    al |= dh;
    al |= dl;
    memoryASet(cs, bx + 582, al);
    bx++;
    ch = 0x00;
    cx++;
    if (cx != 0x0100)
        goto loc_d098;
    bx = 0;
    cx = 0;
loc_d0e4: // 0cc2:04c4
    dh = cl;
    dh &= 0xf0;
    dl = cl;
    dl &= 0x0f;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    dh |= dl;
    memoryASet(cs, bx + 838, dh);
    bx++;
    ch = 0x00;
    cx++;
    if (cx != 0x0100)
        goto loc_d0e4;
    dx = pop();
    cx = pop();
    bx = pop();
    cs = pop();
}
void sub_d113() // 0cc2:04f3
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bx);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 10);
    ds = ax;
    si = memoryAGet16(ss, bp + 12);
    dx = 0x0cc2;
    bx = 0x0146;
loc_d12c: // 0cc2:050c
    ax = 0x0cc2;
    es = ax;
    di = 0x0006;
    cx = memoryAGet16(ss, bp + 8);
    push(cx);
    push(ds);
    push(si);
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di = pop();
    es = pop();
    cx = pop();
    di += cx;
    di -= 0x0005;
    ds = dx;
    si = 0x0000;
loc_d149: // 0cc2:0529
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    di -= 0x000a;
    if (si != cx)
        goto loc_d149;
    di += 0x0005;
    di += cx;
    si = di;
    ax = es;
    ds = ax;
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) - 1);
    if (memoryAGet16(ss, bp + 6) != 0)
        goto loc_d12c;
    dx = pop();
    cx = pop();
    bx = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d191() // 0cc2:0571
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bx);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 10);
    ds = ax;
    si = memoryAGet16(ss, bp + 12);
    dx = 0x0cc2;
    bx = 0x0246;
loc_d1aa: // 0cc2:058a
    ax = 0x0cc2;
    es = ax;
    di = 0x0006;
    cx = memoryAGet16(ss, bp + 8);
    push(cx);
    push(ds);
    push(si);
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di = pop();
    es = pop();
    cx = pop();
    di += cx;
    di -= 0x0002;
    ds = dx;
    si = 0x0000;
loc_d1c7: // 0cc2:05a7
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    di -= 0x0004;
    if (si != cx)
        goto loc_d1c7;
    di += 0x0002;
    di += cx;
    si = di;
    ax = es;
    ds = ax;
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) - 1);
    if (memoryAGet16(ss, bp + 6) != 0)
        goto loc_d1aa;
    dx = pop();
    cx = pop();
    bx = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d1f7() // 0cc2:05d7
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bx);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 10);
    ds = ax;
    si = memoryAGet16(ss, bp + 12);
    dx = 0x0cc2;
    bx = 0x0346;
loc_d210: // 0cc2:05f0
    ax = 0x0cc2;
    es = ax;
    di = 0x0006;
    cx = memoryAGet16(ss, bp + 8);
    push(cx);
    push(ds);
    push(si);
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di = pop();
    es = pop();
    cx = pop();
    di += cx;
    di -= 0x0002;
    ds = dx;
    si = 0x0000;
loc_d22d: // 0cc2:060d
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    al = memoryAGet(cs, si + 6);
    si++;
    al = memoryAGet(ds, bx+al);
    stosb<MemAuto, DirAuto>();
    di -= 0x0004;
    if (si != cx)
        goto loc_d22d;
    di += 0x0002;
    di += cx;
    si = di;
    ax = es;
    ds = ax;
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) - 1);
    if (memoryAGet16(ss, bp + 6) != 0)
        goto loc_d210;
    dx = pop();
    cx = pop();
    bx = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d472() // 0cc2:0852
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x0f;
    out(dx, al);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    ax = memoryAGet16(ss, bp + 8);
    es = ax;
    si = 0;
    di = si;
    cx = 0x1f40;
    flags.direction = false;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d4ec() // 0cc2:08cc
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x0f;
    out(dx, al);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 16);
    flags.direction = false;
loc_d520: // 0cc2:0900
    cx = dx;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di -= dx;
    di += 0x0028;
    si -= dx;
    si += 0x0028;
    ax--;
    if (ax != 0)
        goto loc_d520;
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d539() // 0cc2:0919
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(di);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx = 0x03ce;
    al = 0x01;
    out(dx, al);
    dx++;
    al = 0x0f;
    out(dx, al);
    dx = 0x03ce;
    al = 0x00;
    out(dx, al);
    dx++;
    ax = memoryAGet16(ss, bp + 6);
    out(dx, al);
    dx = 0x03ce;
    al = 0x03;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx = 0x03ce;
    al = 0x08;
    out(dx, al);
    dx++;
    al = 0xff;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x0f;
    out(dx, al);
    ax = memoryAGet16(ss, bp + 8);
    es = ax;
    di = 0;
    memoryASet(es, di, al);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    al = memoryAGet(es, di);
    cx = 0x1f40;
    flags.direction = false;
    rep_stosb<MemAuto, DirAuto>();
    dx = pop();
    cx = pop();
    di = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d5a0() // 0cc2:0980
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    flags.direction = false;
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx = 0x03ce;
    al = 0x01;
    out(dx, al);
    dx++;
    al = 0x0f;
    out(dx, al);
    dx = 0x03ce;
    al = 0x00;
    out(dx, al);
    dx++;
    ax = memoryAGet16(ss, bp + 6);
    out(dx, al);
    dx = 0x03ce;
    al = 0x03;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x0f;
    out(dx, al);
    bx = memoryAGet16(ss, bp + 8);
    cx = memoryAGet16(ss, bp + 10);
    si = memoryAGet16(ss, bp + 12);
    di = memoryAGet16(ss, bp + 14);
    es = di;
    di = memoryAGet16(ss, bp + 16);
    dx = 0x03ce;
    al = 0x08;
loc_d5f4: // 0cc2:09d4
    push(di);
    push(si);
    push(cx);
    if (!bl)
        goto loc_d605;
    ah = bl;
    out(dx, ax);
    si = es;
    ds = si;
    si = di;
    movsb<MemAuto, MemAuto, DirAuto>();
loc_d605: // 0cc2:09e5
    if (!cx)
        goto loc_d615;
    ah = al;
    out(dx, al);
    dx++;
    al = 0xff;
    out(dx, al);
    al = ah;
    dx--;
    rep_stosb<MemAuto, DirAuto>();
loc_d615: // 0cc2:09f5
    if (!bh)
        goto loc_d62a;
    ah = al;
    out(dx, al);
    dx++;
    al = bh;
    out(dx, al);
    al = ah;
    dx--;
    si = es;
    ds = si;
    si = di;
    movsb<MemAuto, MemAuto, DirAuto>();
loc_d62a: // 0cc2:0a0a
    cx = pop();
    si = pop();
    di = pop();
    si--;
    if (si == 0)
        goto loc_d635;
    di += 0x0028;
    goto loc_d5f4;
loc_d635: // 0cc2:0a15
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d63e() // 0cc2:0a1e
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x01;
    out(dx, al);
    dx++;
    al = 0x0f;
    out(dx, al);
    dx--;
    al = 0x00;
    out(dx, al);
    dx++;
    ax = memoryAGet16(ss, bp + 6);
    out(dx, al);
    dx--;
    al = 0x03;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x0f;
    out(dx, al);
    dx--;
    bx = memoryAGet16(ss, bp + 8);
    cx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    si = memoryAGet16(ss, bp + 16);
    ax = memoryAGet16(ss, bp + 18);
    es = ax;
    di = memoryAGet16(ss, bp + 20);
    al = 0x08;
loc_d691: // 0cc2:0a71
    push(dx);
    push(di);
    push(cx);
    dx = 0x03ce;
    if (!bl)
        goto loc_d6e9;
    push(cx);
    ah = memoryAGet(ds, si);
    cl = bl;
    ah >>= cl;
    out(dx, al);
    dx++;
    al = ah;
    out(dx, al);
    dx--;
    al = 0x08;
    ah = memoryAGet(es, di);
    memoryASet(es, di, ah);
    di++;
    cx = pop();
    cx--;
    if (cx == 0)
        goto loc_d6d9;
loc_d6b5: // 0cc2:0a95
    push(cx);
    ah = memoryAGet(ds, si);
    cl = bh;
    ah <<= cl;
    ch = ah;
    si++;
    ah = memoryAGet(ds, si);
    cl = bl;
    ah >>= cl;
    ah |= ch;
    out(dx, al);
    dx++;
    al = ah;
    out(dx, al);
    dx--;
    al = 0x08;
    ah = memoryAGet(es, di);
    memoryASet(es, di, ah);
    di++;
    cx = pop();
    if (--cx)
        goto loc_d6b5;
loc_d6d9: // 0cc2:0ab9
    ah = memoryAGet(ds, si);
    cl = bh;
    ah <<= cl;
    out(dx, ax);
    ah = memoryAGet(es, di);
    memoryASet(es, di, ah);
    si++;
    goto loc_d6fd;
loc_d6e9: // 0cc2:0ac9
    ah = memoryAGet(ds, si);
    out(dx, al);
    dx++;
    al = ah;
    out(dx, al);
    dx--;
    al = 0x08;
    ah = memoryAGet(es, di);
    memoryASet(es, di, ah);
    si++;
    di++;
    if (--cx)
        goto loc_d6e9;
loc_d6fd: // 0cc2:0add
    cx = pop();
    di = pop();
    dx = pop();
    dx--;
    if (dx == 0)
        goto loc_d708;
    di += 0x0028;
    goto loc_d691;
loc_d708: // 0cc2:0ae8
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d711() // 0cc2:0af1
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x01;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x03;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    bx = memoryAGet16(ss, bp + 8);
    cx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    si = memoryAGet16(ss, bp + 16);
    ax = memoryAGet16(ss, bp + 18);
    es = ax;
    di = memoryAGet16(ss, bp + 20);
loc_d74f: // 0cc2:0b2f
    push(cx);
    push(dx);
    push(di);
    if (bl)
        goto loc_d760;
    if (bh)
        goto loc_d75d;
    goto loc_d88e;
loc_d75d: // 0cc2:0b3d
    goto loc_d845;
loc_d760: // 0cc2:0b40
    push(cx);
    ah = memoryAGet(es, di);
    ah = memoryAGet(ds, si);
    cl = bl;
    ah >>= cl;
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = ah;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(ds, si + 1);
    ah >>= cl;
    memoryASet(es, di, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(ds, si + 2);
    ah >>= cl;
    memoryASet(es, di, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(ds, si + 3);
    ah >>= cl;
    memoryASet(es, di, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(ds, si + 4);
    ah >>= cl;
    memoryASet(es, di, ah);
    di++;
    cx = pop();
    if (cx)
        goto loc_d7b0;
    goto loc_d8ba;
loc_d7b0: // 0cc2:0b90
    cx--;
    if (cx != 0)
        goto loc_d7b6;
    goto loc_d845;
loc_d7b6: // 0cc2:0b96
    push(cx);
    ah = memoryAGet(es, di);
    ah = memoryAGet(ds, si);
    cl = bh;
    ah <<= cl;
    ch = ah;
    ah = memoryAGet(ds, si + 5);
    si++;
    cl = bl;
    ah >>= cl;
    ah |= ch;
    dx = 0x03ce;
    al = 0x08;
    out(dx, al);
    dx++;
    al = ah;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(ds, si);
    cl = bh;
    ah <<= cl;
    ch = ah;
    ah = memoryAGet(ds, si + 5);
    si++;
    cl = bl;
    ah >>= cl;
    ah |= ch;
    memoryASet(es, di, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(ds, si);
    cl = bh;
    ah <<= cl;
    ch = ah;
    ah = memoryAGet(ds, si + 5);
    si++;
    cl = bl;
    ah >>= cl;
    ah |= ch;
    memoryASet(es, di, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(ds, si);
    cl = bh;
    ah <<= cl;
    ch = ah;
    ah = memoryAGet(ds, si + 5);
    si++;
    cl = bl;
    ah >>= cl;
    ah |= ch;
    memoryASet(es, di, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(ds, si);
    cl = bh;
    ah <<= cl;
    ch = ah;
    ah = memoryAGet(ds, si + 5);
    si++;
    cl = bl;
    ah >>= cl;
    ah |= ch;
    memoryASet(es, di, ah);
    di++;
    cx = pop();
    cx--;
    if (cx == 0)
        goto loc_d845;
    goto loc_d7b6;
loc_d845: // 0cc2:0c25
    ah = memoryAGet(es, di);
    ah = memoryAGet(ds, si);
    si++;
    cl = bh;
    ah <<= cl;
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = ah;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(ds, si);
    si++;
    ah <<= cl;
    memoryASet(es, di, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(ds, si);
    si++;
    ah <<= cl;
    memoryASet(es, di, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(ds, si);
    si++;
    ah <<= cl;
    memoryASet(es, di, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(ds, si);
    si++;
    ah <<= cl;
    memoryASet(es, di, ah);
    goto loc_d8ba;
loc_d88e: // 0cc2:0c6e
    ah = memoryAGet(es, di);
    ah = memoryAGet(ds, si);
    si++;
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = ah;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    movsb<MemAuto, MemAuto, DirAuto>();
    di--;
    al <<= 1;
    out(dx, al);
    movsb<MemAuto, MemAuto, DirAuto>();
    di--;
    al <<= 1;
    out(dx, al);
    movsb<MemAuto, MemAuto, DirAuto>();
    di--;
    al <<= 1;
    out(dx, al);
    movsb<MemAuto, MemAuto, DirAuto>();
    if (--cx)
        goto loc_d88e;
loc_d8ba: // 0cc2:0c9a
    di = pop();
    dx = pop();
    cx = pop();
    dx--;
    if (dx == 0)
        goto loc_d8c9;
    di += 0x0028;
    si += memoryAGet16(ss, bp + 6);
    goto loc_d74f;
loc_d8c9: // 0cc2:0ca9
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d8d2() // 0cc2:0cb2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    cx = memoryAGet16(ss, bp + 14);
    al = 0x04;
    flags.direction = false;
    out(dx, al);
    dx++;
loc_d8ff: // 0cc2:0cdf
    push(cx);
    push(si);
    cx = 0x0003;
loc_d904: // 0cc2:0ce4
    al = 0;
    bx = 0x0004;
loc_d909: // 0cc2:0ce9
    out(dx, al);
    movsb<MemAuto, MemAuto, DirAuto>();
    bx--;
    if (bx == 0)
        goto loc_d913;
    si--;
    al++;
    goto loc_d909;
loc_d913: // 0cc2:0cf3
    cx--;
    if (cx != 0)
        goto loc_d904;
    si = pop();
    cx = pop();
    cx--;
    if (cx == 0)
        goto loc_d920;
    si += 0x0028;
    goto loc_d8ff;
loc_d920: // 0cc2:0d00
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d929() // 0cc2:0d09
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x01;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x08;
    out(dx, al);
    dx++;
    al = 0xff;
    out(dx, al);
    dx--;
    al = 0x03;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    dx = 0x03c4;
    cx = memoryAGet16(ss, bp + 14);
    al = 0x02;
    out(dx, al);
    dx++;
    flags.direction = false;
loc_d971: // 0cc2:0d51
    push(cx);
    push(di);
    cx = 0x0003;
loc_d976: // 0cc2:0d56
    al = 0x01;
    bx = 0x0004;
loc_d97b: // 0cc2:0d5b
    out(dx, al);
    movsb<MemAuto, MemAuto, DirAuto>();
    bx--;
    if (bx == 0)
        goto loc_d985;
    di--;
    al <<= 1;
    goto loc_d97b;
loc_d985: // 0cc2:0d65
    cx--;
    if (cx != 0)
        goto loc_d976;
    di = pop();
    cx = pop();
    cx--;
    if (cx == 0)
        goto loc_d992;
    di += 0x0028;
    goto loc_d971;
loc_d992: // 0cc2:0d72
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_d99b() // 0cc2:0d7b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x01;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x08;
    out(dx, al);
    dx++;
    al = 0xff;
    out(dx, al);
    dx--;
    al = 0x03;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    push(di);
    push(si);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    al = 0x01;
    dx++;
    out(dx, al);
    bx = memoryAGet16(ss, bp + 14);
loc_d9e7: // 0cc2:0dc7
    cx = memoryAGet16(ss, bp + 16);
loc_d9ea: // 0cc2:0dca
    movsb<MemAuto, MemAuto, DirAuto>();
    si += 0x0003;
    if (--cx)
        goto loc_d9ea;
    di -= memoryAGet16(ss, bp + 16);
    di += 0x0028;
    bx--;
    if (bx != 0)
        goto loc_d9e7;
    si = pop();
    di = pop();
    si++;
    push(di);
    push(si);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    al = 0x02;
    dx++;
    out(dx, al);
    bx = memoryAGet16(ss, bp + 14);
loc_da0b: // 0cc2:0deb
    cx = memoryAGet16(ss, bp + 16);
loc_da0e: // 0cc2:0dee
    movsb<MemAuto, MemAuto, DirAuto>();
    si += 0x0003;
    if (--cx)
        goto loc_da0e;
    di -= memoryAGet16(ss, bp + 16);
    di += 0x0028;
    bx--;
    if (bx != 0)
        goto loc_da0b;
    si = pop();
    di = pop();
    si++;
    push(di);
    push(si);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    al = 0x04;
    dx++;
    out(dx, al);
    bx = memoryAGet16(ss, bp + 14);
loc_da2f: // 0cc2:0e0f
    cx = memoryAGet16(ss, bp + 16);
loc_da32: // 0cc2:0e12
    movsb<MemAuto, MemAuto, DirAuto>();
    si += 0x0003;
    if (--cx)
        goto loc_da32;
    di -= memoryAGet16(ss, bp + 16);
    di += 0x0028;
    bx--;
    if (bx != 0)
        goto loc_da2f;
    si = pop();
    di = pop();
    si++;
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    al = 0x08;
    dx++;
    out(dx, al);
    bx = memoryAGet16(ss, bp + 14);
loc_da51: // 0cc2:0e31
    cx = memoryAGet16(ss, bp + 16);
loc_da54: // 0cc2:0e34
    movsb<MemAuto, MemAuto, DirAuto>();
    si += 0x0003;
    if (--cx)
        goto loc_da54;
    di -= memoryAGet16(ss, bp + 16);
    di += 0x0028;
    bx--;
    if (bx != 0)
        goto loc_da51;
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_da6c() // 0cc2:0e4c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    dx = 0x03ce;
    al = 0x05;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x01;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    al = 0x03;
    out(dx, al);
    dx++;
    al = 0x00;
    out(dx, al);
    dx--;
    ax = memoryAGet16(ss, bp + 6);
    es = ax;
    di = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    ds = ax;
    si = memoryAGet16(ss, bp + 12);
    cx = memoryAGet16(ss, bp + 18);
    dx = memoryAGet16(ss, bp + 16);
    ax = memoryAGet16(ss, bp + 14);
    ch = al;
    if (cl != 0x01)
        goto loc_dab4;
    goto loc_dadf;
loc_dab4: // 0cc2:0e94
    if (cl != 0x02)
        goto loc_dabc;
    goto loc_dbb0;
loc_dabc: // 0cc2:0e9c
    if (cl != 0x03)
        goto loc_dac4;
    goto loc_dc8e;
loc_dac4: // 0cc2:0ea4
    if (cl != 0x04)
        goto loc_dacc;
    goto loc_dd76;
loc_dacc: // 0cc2:0eac
    if (cl != 0x05)
        goto loc_dad4;
    goto loc_de68;
loc_dad4: // 0cc2:0eb4
    if (cl != 0x06)
        goto loc_dadc;
    goto loc_df3b;
loc_dadc: // 0cc2:0ebc
    goto loc_e00e;
loc_dadf: // 0cc2:0ebf
    push(si);
    push(cx);
    push(dx);
    al = 0;
    bx = 0;
    memoryASet(cs, 0x0446, al);
    memoryASet(cs, 0x0447, al);
    memoryASet(cs, 0x0448, al);
loc_daf2: // 0cc2:0ed2
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    ah = memoryAGet(es, di);
    al = 0;
    ax >>= 1;
    ah |= bl;
    bl = al;
    tl = ah;
    ah = al;
    al = tl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(es, di + 1);
    al = 0;
    ax >>= 1;
    ah |= bh;
    bh = al;
    memoryASet(ds, si, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(es, di + 2);
    al = 0;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0446);
    memoryASet(cs, 0x0446, al);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(es, di + 3);
    al = 0;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0447);
    memoryASet(cs, 0x0447, al);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(es, di + 4);
    al = 0;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0448);
    memoryASet(cs, 0x0448, al);
    memoryASet(ds, si, ah);
    si++;
    di += 0x0005;
    ch--;
    if (ch != 0)
        goto loc_daf2;
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    al = bl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    memoryASet(ds, si, bh);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(cs, 0x0446);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(cs, 0x0447);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(cs, 0x0448);
    memoryASet(ds, si, ah);
    dx = pop();
    cx = pop();
    si = pop();
    si += 0x0028;
    dx--;
    if (dx == 0)
        goto loc_dbad;
    goto loc_dadf;
loc_dbad: // 0cc2:0f8d
    goto loc_e0e1;
loc_dbb0: // 0cc2:0f90
    push(si);
    push(cx);
    push(dx);
    al = 0;
    bx = 0;
    memoryASet(cs, 0x0446, al);
    memoryASet(cs, 0x0447, al);
    memoryASet(cs, 0x0448, al);
loc_dbc3: // 0cc2:0fa3
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    ah = memoryAGet(es, di);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ah |= bl;
    bl = al;
    tl = ah;
    ah = al;
    al = tl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(es, di + 1);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ah |= bh;
    bh = al;
    memoryASet(ds, si, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(es, di + 2);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0446);
    memoryASet(cs, 0x0446, al);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(es, di + 3);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0447);
    memoryASet(cs, 0x0447, al);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(es, di + 4);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0448);
    memoryASet(cs, 0x0448, al);
    memoryASet(ds, si, ah);
    si++;
    di += 0x0005;
    ch--;
    if (ch == 0)
        goto loc_dc49;
    goto loc_dbc3;
loc_dc49: // 0cc2:1029
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    al = bl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    memoryASet(ds, si, bh);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(cs, 0x0446);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(cs, 0x0447);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(cs, 0x0448);
    memoryASet(ds, si, ah);
    dx = pop();
    cx = pop();
    si = pop();
    si += 0x0028;
    dx--;
    if (dx == 0)
        goto loc_dc8b;
    goto loc_dbb0;
loc_dc8b: // 0cc2:106b
    goto loc_e0e1;
loc_dc8e: // 0cc2:106e
    push(si);
    push(cx);
    push(dx);
    al = 0;
    bx = 0;
    memoryASet(cs, 0x0446, al);
    memoryASet(cs, 0x0447, al);
    memoryASet(cs, 0x0448, al);
loc_dca1: // 0cc2:1081
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    ah = memoryAGet(es, di);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= bl;
    bl = al;
    tl = ah;
    ah = al;
    al = tl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(es, di + 1);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= bh;
    bh = al;
    memoryASet(ds, si, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(es, di + 2);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0446);
    memoryASet(cs, 0x0446, al);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(es, di + 3);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0447);
    memoryASet(cs, 0x0447, al);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(es, di + 4);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0448);
    memoryASet(cs, 0x0448, al);
    memoryASet(ds, si, ah);
    si++;
    di += 0x0005;
    ch--;
    if (ch == 0)
        goto loc_dd31;
    goto loc_dca1;
loc_dd31: // 0cc2:1111
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    al = bl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    memoryASet(ds, si, bh);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(cs, 0x0446);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(cs, 0x0447);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(cs, 0x0448);
    memoryASet(ds, si, ah);
    dx = pop();
    cx = pop();
    si = pop();
    si += 0x0028;
    dx--;
    if (dx == 0)
        goto loc_dd73;
    goto loc_dc8e;
loc_dd73: // 0cc2:1153
    goto loc_e0e1;
loc_dd76: // 0cc2:1156
    push(si);
    push(cx);
    push(dx);
    al = 0;
    bx = 0;
    memoryASet(cs, 0x0446, al);
    memoryASet(cs, 0x0447, al);
    memoryASet(cs, 0x0448, al);
loc_dd89: // 0cc2:1169
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    ah = memoryAGet(es, di);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= bl;
    bl = al;
    tl = ah;
    ah = al;
    al = tl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(es, di + 1);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= bh;
    bh = al;
    memoryASet(ds, si, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(es, di + 2);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0446);
    memoryASet(cs, 0x0446, al);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(es, di + 3);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0447);
    memoryASet(cs, 0x0447, al);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(es, di + 4);
    al = 0;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ah |= memoryAGet(cs, 0x0448);
    memoryASet(cs, 0x0448, al);
    memoryASet(ds, si, ah);
    si++;
    di += 0x0005;
    ch--;
    if (ch == 0)
        goto loc_de23;
    goto loc_dd89;
loc_de23: // 0cc2:1203
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    al = bl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    memoryASet(ds, si, bh);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(cs, 0x0446);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(cs, 0x0447);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(cs, 0x0448);
    memoryASet(ds, si, ah);
    dx = pop();
    cx = pop();
    si = pop();
    si += 0x0028;
    dx--;
    if (dx == 0)
        goto loc_de65;
    goto loc_dd76;
loc_de65: // 0cc2:1245
    goto loc_e0e1;
loc_de68: // 0cc2:1248
    push(si);
    push(cx);
    push(dx);
    al = 0;
    bx = 0;
    memoryASet(cs, 0x0446, al);
    memoryASet(cs, 0x0447, al);
    memoryASet(cs, 0x0448, al);
loc_de7b: // 0cc2:125b
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    ah = memoryAGet(es, di);
    al = 0;
    ax >>= cl;
    ah |= bl;
    bl = al;
    tl = ah;
    ah = al;
    al = tl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(es, di + 1);
    al = 0;
    ax >>= cl;
    ah |= bh;
    bh = al;
    memoryASet(ds, si, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(es, di + 2);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0446);
    memoryASet(cs, 0x0446, al);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(es, di + 3);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0447);
    memoryASet(cs, 0x0447, al);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(es, di + 4);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0448);
    memoryASet(cs, 0x0448, al);
    memoryASet(ds, si, ah);
    si++;
    di += 0x0005;
    ch--;
    if (ch == 0)
        goto loc_def6;
    goto loc_de7b;
loc_def6: // 0cc2:12d6
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    al = bl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    memoryASet(ds, si, bh);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(cs, 0x0446);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(cs, 0x0447);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(cs, 0x0448);
    memoryASet(ds, si, ah);
    dx = pop();
    cx = pop();
    si = pop();
    si += 0x0028;
    dx--;
    if (dx == 0)
        goto loc_df38;
    goto loc_de68;
loc_df38: // 0cc2:1318
    goto loc_e0e1;
loc_df3b: // 0cc2:131b
    push(si);
    push(cx);
    push(dx);
    al = 0;
    bx = 0;
    memoryASet(cs, 0x0446, al);
    memoryASet(cs, 0x0447, al);
    memoryASet(cs, 0x0448, al);
loc_df4e: // 0cc2:132e
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    ah = memoryAGet(es, di);
    al = 0;
    ax >>= cl;
    ah |= bl;
    bl = al;
    tl = ah;
    ah = al;
    al = tl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(es, di + 1);
    al = 0;
    ax >>= cl;
    ah |= bh;
    bh = al;
    memoryASet(ds, si, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(es, di + 2);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0446);
    memoryASet(cs, 0x0446, al);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(es, di + 3);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0447);
    memoryASet(cs, 0x0447, al);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(es, di + 4);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0448);
    memoryASet(cs, 0x0448, al);
    memoryASet(ds, si, ah);
    si++;
    di += 0x0005;
    ch--;
    if (ch == 0)
        goto loc_dfc9;
    goto loc_df4e;
loc_dfc9: // 0cc2:13a9
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    al = bl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    memoryASet(ds, si, bh);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(cs, 0x0446);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(cs, 0x0447);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(cs, 0x0448);
    memoryASet(ds, si, ah);
    dx = pop();
    cx = pop();
    si = pop();
    si += 0x0028;
    dx--;
    if (dx == 0)
        goto loc_e00b;
    goto loc_df3b;
loc_e00b: // 0cc2:13eb
    goto loc_e0e1;
loc_e00e: // 0cc2:13ee
    push(si);
    push(cx);
    push(dx);
    al = 0;
    bx = 0;
    memoryASet(cs, 0x0446, al);
    memoryASet(cs, 0x0447, al);
    memoryASet(cs, 0x0448, al);
loc_e021: // 0cc2:1401
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    ah = memoryAGet(es, di);
    al = 0;
    ax >>= cl;
    ah |= bl;
    bl = al;
    tl = ah;
    ah = al;
    al = tl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    ah = memoryAGet(es, di + 1);
    al = 0;
    ax >>= cl;
    ah |= bh;
    bh = al;
    memoryASet(ds, si, ah);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(es, di + 2);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0446);
    memoryASet(cs, 0x0446, al);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(es, di + 3);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0447);
    memoryASet(cs, 0x0447, al);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(es, di + 4);
    al = 0;
    ax >>= cl;
    ah |= memoryAGet(cs, 0x0448);
    memoryASet(cs, 0x0448, al);
    memoryASet(ds, si, ah);
    si++;
    di += 0x0005;
    ch--;
    if (ch == 0)
        goto loc_e09c;
    goto loc_e021;
loc_e09c: // 0cc2:147c
    al = 0x08;
    dx = 0x03ce;
    out(dx, al);
    dx++;
    al = memoryAGet(ds, si);
    al = bl;
    out(dx, al);
    dx = 0x03c4;
    al = 0x02;
    out(dx, al);
    dx++;
    al = 0x01;
    out(dx, al);
    memoryASet(ds, si, bh);
    al = 0x02;
    out(dx, al);
    ah = memoryAGet(cs, 0x0446);
    memoryASet(ds, si, ah);
    al = 0x04;
    out(dx, al);
    ah = memoryAGet(cs, 0x0447);
    memoryASet(ds, si, ah);
    al = 0x08;
    out(dx, al);
    ah = memoryAGet(cs, 0x0448);
    memoryASet(ds, si, ah);
    dx = pop();
    cx = pop();
    si = pop();
    si += 0x0028;
    dx--;
    if (dx == 0)
        goto loc_e0de;
    goto loc_e00e;
loc_e0de: // 0cc2:14be
    goto loc_e0e1;
loc_e0e1: // 0cc2:14c1
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e0ea() // 0cc2:14ca
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(dx);
    push(cx);
    cx = memoryAGet16(ss, bp + 6);
    flags.interrupts = false;
    dx = 0x03d4;
    al = 0x0c;
    out(dx, al);
    dx++;
    al = ch;
    out(dx, al);
    dx--;
    al = 0x0d;
    out(dx, al);
    dx++;
    al = cl;
    out(dx, al);
    flags.interrupts = true;
    dx = 0x03da;
loc_e109: // 0cc2:14e9
    in(al, dx);
    al &= 0x08;
    if (al == 0)
        goto loc_e109;
    cx = pop();
    dx = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e15f() // 0e11:004f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(di);
    push(cx);
    flags.direction = false;
    ax = memoryAGet16(ss, bp + 8);
    es = ax;
    di = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x4000;
    rep_stosw<MemAuto, DirAuto>();
    cx = pop();
    di = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e1c6() // 0e11:00b6
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ds = ax;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    es = ax;
    di = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 16);
loc_e1e7: // 0e11:00d7
    push(si);
    cx = 0x0008;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    si = pop();
    dx--;
    if (dx == 0)
        goto loc_e203;
    al++;
    al &= 0x03;
    if (al == 0)
        goto loc_e1fd;
    si += 0x2000;
    goto loc_e1e7;
loc_e1fd: // 0e11:00ed
    si -= 0x5f60;
    goto loc_e1e7;
loc_e203: // 0e11:00f3
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e20c() // 0e11:00fc
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    ax = 0x0000;
    dx = 0x00c8;
loc_e22c: // 0e11:011c
    push(dx);
    push(di);
    push(si);
    cx = 0x0050;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    si = pop();
    di = pop();
    dx = pop();
    dx--;
    if (dx == 0)
        goto loc_e254;
    al++;
    al &= 0x03;
    if (al == 0)
        goto loc_e24a;
    di += 0x2000;
    si += 0x2000;
    goto loc_e22c;
loc_e24a: // 0e11:013a
    si -= 0x5f60;
    di -= 0x5f60;
    goto loc_e22c;
loc_e254: // 0e11:0144
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e25c() // 0e11:014c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(di);
    push(si);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 16);
    ds = ax;
    ax = memoryAGet16(ss, bp + 20);
    es = ax;
    si = memoryAGet16(ss, bp + 18);
    di = memoryAGet16(ss, bp + 22);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 6);
    dh = al;
loc_e27e: // 0e11:016e
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(es, di);
    if (memoryAGet16(ss, bp + 24) == 0x0000)
        goto loc_e2a0;
    ax = bx;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    al |= 0xf0;
    ah &= 0x0f;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
loc_e2a0: // 0e11:0190
    si++;
    cx--;
loc_e2a2: // 0e11:0192
    ax = bx;
    di += 0x0002;
    dx = memoryAGet16(es, di);
    bx = dx;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax &= 0xf0f0;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx &= 0x0f0f;
    ax |= dx;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_e2a2;
    if (memoryAGet16(ss, bp + 26) == 0x0000)
        goto loc_e2e9;
    ax = bx;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    al |= 0x0f;
    ah &= 0xf0;
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
loc_e2e9: // 0e11:01d9
    di += 0x0002;
    di += memoryAGet16(ss, bp + 28);
    si -= memoryAGet16(ss, bp + 8);
    dx = pop();
    dl--;
    if (dl != 0)
        goto loc_e2fa;
    goto loc_e30f;
loc_e2fa: // 0e11:01ea
    dh++;
    dh &= 0x03;
    if (dh == 0)
        goto loc_e308;
    si += 0x2000;
    goto loc_e27e;
loc_e308: // 0e11:01f8
    si -= 0x5f60;
    goto loc_e27e;
loc_e30f: // 0e11:01ff
    bx = pop();
    cx = pop();
    dx = pop();
    si = pop();
    di = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e318() // 0e11:0208
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ds = ax;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    es = ax;
    di = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 16);
loc_e339: // 0e11:0229
    push(di);
    cx = 0x0008;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di = pop();
    dx--;
    if (dx == 0)
        goto loc_e355;
    al++;
    al &= 0x03;
    if (al == 0)
        goto loc_e34f;
    di += 0x2000;
    goto loc_e339;
loc_e34f: // 0e11:023f
    di -= 0x5f60;
    goto loc_e339;
loc_e355: // 0e11:0245
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e35e() // 0e11:024e
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    ax = memoryAGet16(ss, bp + 18);
    es = ax;
    si = memoryAGet16(ss, bp + 16);
    di = memoryAGet16(ss, bp + 20);
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 12);
    dh = al;
    bx = memoryAGet16(ss, bp + 8);
loc_e383: // 0e11:0273
    cx = bx;
loc_e385: // 0e11:0275
    ax = memoryAGet16(es, di);
    al &= memoryAGet(ds, si);
    al |= ah;
    memoryASet(ds, si, al);
    di += 0x0002;
    si++;
    if (--cx)
        goto loc_e385;
    di += memoryAGet16(ss, bp + 22);
    si -= bx;
    dl--;
    if (dl == 0)
        goto loc_e3b0;
    dh++;
    dh &= 0x03;
    if (dh == 0)
        goto loc_e3aa;
    si += 0x2000;
    goto loc_e383;
loc_e3aa: // 0e11:029a
    si -= 0x5f60;
    goto loc_e383;
loc_e3b0: // 0e11:02a0
    bx = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e3b9() // 0e11:02a9
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    ax = memoryAGet16(ss, bp + 18);
    es = ax;
    si = memoryAGet16(ss, bp + 16);
    di = memoryAGet16(ss, bp + 20);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 20);
    ax += bx;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 12);
loc_e3e3: // 0e11:02d3
    push(ax);
    push(si);
    push(cx);
    cx = memoryAGet16(ss, bp + 8);
loc_e3e9: // 0e11:02d9
    al = memoryAGet(es, bx + di);
    al &= memoryAGet(ds, si);
    al |= memoryAGet(es, di);
    memoryASet(ds, si, al);
    si++;
    di++;
    if (--cx)
        goto loc_e3e9;
    cx = pop();
    si = pop();
    ax = pop();
    cx--;
    if (cx == 0)
        goto loc_e40f;
    al++;
    al &= 0x03;
    if (al == 0)
        goto loc_e409;
    si += 0x2000;
    goto loc_e3e3;
loc_e409: // 0e11:02f9
    si -= 0x5f60;
    goto loc_e3e3;
loc_e40f: // 0e11:02ff
    bx = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e418() // 0e11:0308
{
    CStackGuardFar sg(0, false);
    push(ax);
    bh = memoryAGet(es, di);
    di++;
    ax = 0;
    if (!(bh & 0x80))
        goto loc_e426;
    al |= 0xf0;
loc_e426: // 0e11:0316
    if (!(bh & 0x40))
        goto loc_e42d;
    al |= 0x0f;
loc_e42d: // 0e11:031d
    if (!(bh & 0x20))
        goto loc_e435;
    ah |= 0xf0;
loc_e435: // 0e11:0325
    if (!(bh & 0x10))
        goto loc_e43d;
    ah |= 0x0f;
loc_e43d: // 0e11:032d
    memoryASet16(ss, bp + 26, ax);
    ax = 0;
    if (!(bh & 0x08))
        goto loc_e449;
    al |= 0xf0;
loc_e449: // 0e11:0339
    if (!(bh & 0x04))
        goto loc_e450;
    al |= 0x0f;
loc_e450: // 0e11:0340
    if (!(bh & 0x02))
        goto loc_e458;
    ah |= 0xf0;
loc_e458: // 0e11:0348
    if (!(bh & 0x01))
        goto loc_e460;
    ah |= 0x0f;
loc_e460: // 0e11:0350
    memoryASet16(ss, bp + 28, ax);
    ax = pop();
    cs = pop();
}
void sub_e465() // 0e11:0355
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(di);
    push(si);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 16);
    ds = ax;
    ax = memoryAGet16(ss, bp + 20);
    es = ax;
    si = memoryAGet16(ss, bp + 18);
    di = memoryAGet16(ss, bp + 22);
    bx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 14);
    bl = memoryAGet(ss, bp + 24);
    if (bl & 0x03)
        goto loc_e498;
    push(cs);
    cs = 0x0e11;
    sub_e418(); // 0e11:0308
    assert(cs == 0x0e11);
loc_e498: // 0e11:0388
    push(di);
    bh = 0;
    di = bx;
    bh = memoryAGet(ss, bp + di + 26);
    di = pop();
    bl++;
    bl &= 0x03;
    if (cx == 0x0001)
        goto loc_e4ae;
    goto loc_e585;
loc_e4ae: // 0e11:039e
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
    al = bh;
    dl = al;
    al = ~al;
    al >>= 1;
    al >>= 1;
    al >>= 1;
    al >>= 1;
    al |= 0xf0;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah &= memoryAGet(ss, bp + 10);
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    cx--;
loc_e4d9: // 0e11:03c9
    al = bh;
    dl = al;
    al = ~al;
    if (bl & 0x03)
        goto loc_e4e9;
    push(cs);
    cs = 0x0e11;
    sub_e418(); // 0e11:0308
    assert(cs == 0x0e11);
loc_e4e9: // 0e11:03d9
    push(di);
    bh = 0;
    di = bx;
    bh = memoryAGet(ss, bp + di + 26);
    di = pop();
    bl++;
    bl &= 0x03;
    ah = bh;
    dh = ah;
    ah = ~ah;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    dh >>= 1;
    al |= ah;
    dl |= dh;
    al &= memoryAGet(ds, si);
    dl &= memoryAGet(ss, bp + 10);
    al |= dl;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_e4d9;
    al = bh;
    dl = al;
    al = ~al;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al <<= 1;
    al |= 0x0f;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah <<= 1;
    ah &= memoryAGet(ss, bp + 10);
    al |= ah;
    memoryASet(ds, si, al);
    if (bl & 0x03)
        goto loc_e55a;
    push(cs);
    cs = 0x0e11;
    sub_e418(); // 0e11:0308
    assert(cs == 0x0e11);
loc_e55a: // 0e11:044a
    push(di);
    bh = 0;
    di = bx;
    bh = memoryAGet(ss, bp + di + 26);
    di = pop();
    bl++;
    bl &= 0x03;
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_e571;
    goto loc_e5d2;
loc_e571: // 0e11:0461
    al++;
    al &= 0x03;
    if (al == 0)
        goto loc_e57e;
    si += 0x2000;
    goto loc_e4ae;
loc_e57e: // 0e11:046e
    si -= 0x5f60;
    goto loc_e4ae;
loc_e585: // 0e11:0475
    push(ax);
    push(si);
    push(dx);
    cx = memoryAGet16(ss, bp + 8);
loc_e58b: // 0e11:047b
    al = bh;
    if (bl & 0x03)
        goto loc_e597;
    push(cs);
    cs = 0x0e11;
    sub_e418(); // 0e11:0308
    assert(cs == 0x0e11);
loc_e597: // 0e11:0487
    push(di);
    bh = 0;
    di = bx;
    bh = memoryAGet(ss, bp + di + 26);
    di = pop();
    bl++;
    bl &= 0x03;
    dl = al;
    al = ~al;
    al &= memoryAGet(ds, si);
    ah = dl;
    ah &= memoryAGet(ss, bp + 10);
    al |= ah;
    memoryASet(ds, si, al);
    si++;
    if (--cx)
        goto loc_e58b;
    dx = pop();
    si = pop();
    ax = pop();
    dx--;
    if (dx != 0)
        goto loc_e5c0;
    goto loc_e5d2;
loc_e5c0: // 0e11:04b0
    al++;
    al &= 0x03;
    if (al == 0)
        goto loc_e5cc;
    si += 0x2000;
    goto loc_e585;
loc_e5cc: // 0e11:04bc
    si -= 0x5f60;
    goto loc_e585;
loc_e5d2: // 0e11:04c2
    bx = pop();
    cx = pop();
    dx = pop();
    si = pop();
    di = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e5db() // 0e11:04cb
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(di);
    push(dx);
    push(cx);
    push(bx);
    ax = memoryAGet16(ss, bp + 16);
    es = ax;
    di = memoryAGet16(ss, bp + 18);
    ax = memoryAGet16(ss, bp + 10);
    dh = al;
    ax = memoryAGet16(ss, bp + 14);
    dl = al;
    bx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 6);
    ah = al;
loc_e5fe: // 0e11:04ee
    push(di);
    cx = memoryAGet16(ss, bp + 8);
    if (cx != 0x7777)
        goto loc_e623;
    al = bh;
    al |= bl;
    al = ~al;
    al &= dl;
    push(dx);
    dl = al;
    al = bh;
    al |= bl;
    al &= memoryAGet(es, di);
    al |= dl;
    dx = pop();
    memoryASet(es, di, al);
    goto loc_e65f;
loc_e623: // 0e11:0513
    if (bh == 0x00)
        goto loc_e63d;
    al = bh;
    al = ~al;
    al &= dl;
    push(dx);
    dl = al;
    al = bh;
    al &= memoryAGet(es, di);
    al |= dl;
    dx = pop();
    memoryASet(es, di, al);
    di++;
loc_e63d: // 0e11:052d
    if (cx == 0x0000)
        goto loc_e646;
    al = dl;
    rep_stosb<MemAuto, DirAuto>();
loc_e646: // 0e11:0536
    if (bl == 0x00)
        goto loc_e65f;
    al = bl;
    al = ~al;
    al &= dl;
    push(dx);
    dl = al;
    al = bl;
    al &= memoryAGet(es, di);
    al |= dl;
    dx = pop();
    memoryASet(es, di, al);
loc_e65f: // 0e11:054f
    di = pop();
    dh--;
    if (dh != 0)
        goto loc_e666;
    goto loc_e679;
loc_e666: // 0e11:0556
    ah++;
    ah &= 0x03;
    if (ah == 0)
        goto loc_e673;
    di += 0x2000;
    goto loc_e5fe;
loc_e673: // 0e11:0563
    di -= 0x5f60;
    goto loc_e5fe;
loc_e679: // 0e11:0569
    bx = pop();
    cx = pop();
    dx = pop();
    di = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e680() // 0e11:0570
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    push(bx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 16);
    dx = memoryAGet16(ss, bp + 18);
    dx &= 0x0003;
    flags.direction = false;
loc_e6a7: // 0e11:0597
    cx = bx;
    cx >>= 1;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    di -= bx;
    si -= bx;
    dl++;
    dl &= 0x03;
    if (dl == 0)
        goto loc_e6c5;
    di += 0x2000;
    si += 0x2000;
    ax--;
    if (ax != 0)
        goto loc_e6a7;
    goto loc_e6d0;
loc_e6c5: // 0e11:05b5
    di -= 0x5f60;
    si -= 0x5f60;
    ax--;
    if (ax != 0)
        goto loc_e6a7;
loc_e6d0: // 0e11:05c0
    bx = pop();
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e806() // 0e11:06f6
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 18);
    bx = memoryAGet16(ss, bp + 14);
loc_e826: // 0e11:0716
    cx = memoryAGet16(ss, bp + 16);
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di -= memoryAGet16(ss, bp + 16);
    dl++;
    dl &= 0x03;
    if (dl == 0)
        goto loc_e83e;
    di += 0x2000;
    bx--;
    if (bx != 0)
        goto loc_e826;
    goto loc_e845;
loc_e83e: // 0e11:072e
    di -= 0x5f60;
    bx--;
    if (bx != 0)
        goto loc_e826;
loc_e845: // 0e11:0735
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e84e() // 0e11:073e
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    cx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
loc_e86b: // 0e11:075b
    push(cx);
    bx = 0;
    ax = memoryAGet16(ss, bp + 14);
    ch = memoryAGet(es, bx + di);
    bx += ax;
    cl = memoryAGet(es, bx + di);
    bx += ax;
    dh = memoryAGet(es, bx + di);
    bx += ax;
    dl = memoryAGet(es, bx + di);
    bx += ax;
    ah = memoryAGet(es, bx + di);
    ah ^= 0xff;
    di++;
    bl = 0x04;
loc_e88e: // 0e11:077e
    al = 0;
    if (!(ah & 0x80))
        goto loc_e897;
    al = 0xf0;
loc_e897: // 0e11:0787
    if (!(ah & 0x40))
        goto loc_e89e;
    al |= 0x0f;
loc_e89e: // 0e11:078e
    ah <<= 1;
    ah <<= 1;
    memoryASet(ds, si, al);
    si++;
    bh = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bh += flags.carry;
    memoryASet(ds, si, bh);
    si++;
    bl--;
    if (bl != 0)
        goto loc_e88e;
    cx = pop();
    cx--;
    if (cx == 0)
        goto loc_e8ea;
    goto loc_e86b;
loc_e8ea: // 0e11:07da
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_e8f3() // 0e11:07e3
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    cx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
loc_e910: // 0e11:0800
    push(cx);
    bx = 0;
    ax = memoryAGet16(ss, bp + 14);
    ch = memoryAGet(es, bx + di);
    bx += ax;
    cl = memoryAGet(es, bx + di);
    bx += ax;
    dh = memoryAGet(es, bx + di);
    bx += ax;
    dl = memoryAGet(es, bx + di);
    di++;
    bl = 0x04;
loc_e92b: // 0e11:081b
    bh = 0;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(dl & 0x80);
    dl <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(dh & 0x80);
    dh <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    bh += flags.carry;
    bh <<= 1;
    flags.carry = !!(ch & 0x80);
    ch <<= 1;
    bh += flags.carry;
    memoryASet(ds, si, bh);
    si++;
    bl--;
    if (bl != 0)
        goto loc_e92b;
    cx = pop();
    cx--;
    if (cx == 0)
        goto loc_e970;
    goto loc_e910;
loc_e970: // 0e11:0860
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ec4a() // 0e97:02da
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(di);
    push(cx);
    flags.direction = false;
    ax = memoryAGet16(ss, bp + 8);
    es = ax;
    di = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x7d00;
    rep_stosw<MemAuto, DirAuto>();
    cx = pop();
    di = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ec66() // 0e97:02f6
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ds = ax;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    es = ax;
    di = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 16);
loc_ec87: // 0e97:0317
    push(si);
    cx = 0x0010;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    si = pop();
    si += 0x0140;
    dx--;
    if (dx != 0)
        goto loc_ec87;
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ec9e() // 0e97:032e
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    cx = memoryAGet16(ss, bp + 14);
    dx = memoryAGet16(ss, bp + 16);
loc_ecbf: // 0e97:034f
    push(si);
    push(cx);
loc_ecc1: // 0e97:0351
    al = memoryAGet(es, di);
    if (!(al & 0x80))
        goto loc_eccc;
    al &= 0x7f;
    memoryASet(ds, si, al);
loc_eccc: // 0e97:035c
    si++;
    di++;
    cx--;
    if (cx != 0)
        goto loc_ecc1;
    cx = pop();
    si = pop();
    si += 0x0140;
    dx--;
    if (dx != 0)
        goto loc_ecbf;
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ece3() // 0e97:0373
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    cx = memoryAGet16(ss, bp + 14);
    dx = memoryAGet16(ss, bp + 16);
loc_ed04: // 0e97:0394
    push(si);
    push(cx);
    ax = memoryAGet16(ss, bp + 18);
    di += ax;
loc_ed0b: // 0e97:039b
    al = memoryAGet(es, di);
    if (!(al & 0x80))
        goto loc_ed16;
    al &= 0x7f;
    memoryASet(ds, si, al);
loc_ed16: // 0e97:03a6
    si++;
    di++;
    cx--;
    if (cx != 0)
        goto loc_ed0b;
    ax = memoryAGet16(ss, bp + 20);
    di += ax;
    cx = pop();
    si = pop();
    si += 0x0140;
    dx--;
    if (dx != 0)
        goto loc_ed04;
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ed32() // 0e97:03c2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    cx = memoryAGet16(ss, bp + 14);
    dx = memoryAGet16(ss, bp + 16);
    ax = memoryAGet16(ss, bp + 18);
loc_ed56: // 0e97:03e6
    push(si);
    push(cx);
loc_ed58: // 0e97:03e8
    ah = memoryAGet(es, di);
    if (!(ah & 0x80))
        goto loc_ed62;
    memoryASet(ds, si, al);
loc_ed62: // 0e97:03f2
    si++;
    if (!(ah & 0x40))
        goto loc_ed6a;
    memoryASet(ds, si, al);
loc_ed6a: // 0e97:03fa
    si++;
    if (!(ah & 0x20))
        goto loc_ed72;
    memoryASet(ds, si, al);
loc_ed72: // 0e97:0402
    si++;
    if (!(ah & 0x10))
        goto loc_ed7a;
    memoryASet(ds, si, al);
loc_ed7a: // 0e97:040a
    si++;
    if (!(ah & 0x08))
        goto loc_ed82;
    memoryASet(ds, si, al);
loc_ed82: // 0e97:0412
    si++;
    if (!(ah & 0x04))
        goto loc_ed8a;
    memoryASet(ds, si, al);
loc_ed8a: // 0e97:041a
    si++;
    if (!(ah & 0x02))
        goto loc_ed92;
    memoryASet(ds, si, al);
loc_ed92: // 0e97:0422
    si++;
    if (!(ah & 0x01))
        goto loc_ed9a;
    memoryASet(ds, si, al);
loc_ed9a: // 0e97:042a
    si++;
    di++;
    cx--;
    if (cx != 0)
        goto loc_ed58;
    cx = pop();
    si = pop();
    si += 0x0140;
    dx--;
    if (dx != 0)
        goto loc_ed56;
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_edb1() // 0e97:0441
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    di = memoryAGet16(ss, bp + 12);
    cx = 0x7d00;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_edd8() // 0e97:0468
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(ds);
    push(es);
    push(si);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ds = ax;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    es = ax;
    di = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 16);
loc_edf9: // 0e97:0489
    push(di);
    cx = 0x0010;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
    di = pop();
    di += 0x0140;
    dx--;
    if (dx != 0)
        goto loc_edf9;
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ee10() // 0e97:04a0
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    flags.direction = false;
    push(bp);
    bp = sp;
    push(es);
    push(di);
    push(dx);
    push(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    es = ax;
    di = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    cx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 14);
loc_ee2a: // 0e97:04ba
    push(di);
    push(cx);
    rep_stosb<MemAuto, DirAuto>();
    cx = pop();
    di = pop();
    di += 0x0140;
    dx--;
    if (dx != 0)
        goto loc_ee2a;
    ax = pop();
    cx = pop();
    dx = pop();
    di = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ee3e() // 0e97:04ce
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(cx);
    push(dx);
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    es = ax;
    dx = memoryAGet16(ss, bp + 12);
    di = dx;
    dx = 0x03da;
loc_ee5a: // 0e97:04ea
    in(al, dx);
    al &= 0x08;
    if (al == 0)
        goto loc_ee5a;
    ax = cx;
    cx += cx;
    cx += ax;
    dx = 0x03c8;
    al = bl;
    out(dx, al);
    dx++;
loc_ee6c: // 0e97:04fc
    al = memoryAGet(es, di);
    out(dx, al);
    di++;
    if (--cx)
        goto loc_ee6c;
    dx = pop();
    cx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ee7b() // 0ee7:000b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x91a2) != 0x46)
        goto loc_ee8d;
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    goto loc_eece;
loc_ee8d: // 0ee7:001d
    if (memoryAGet(ds, 0x91a2) != 0x47)
        goto loc_ee9c;
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 10);
    goto loc_eece;
loc_ee9c: // 0ee7:002c
    if (memoryAGet(ds, 0x91a2) != 0x49)
        goto loc_eeab;
    dx = memoryAGet16(ss, bp + 16);
    ax = memoryAGet16(ss, bp + 14);
    goto loc_eece;
loc_eeab: // 0ee7:003b
    if (memoryAGet(ds, 0x91a2) != 0x53)
        goto loc_eeba;
    dx = memoryAGet16(ss, bp + 20);
    ax = memoryAGet16(ss, bp + 18);
    goto loc_eece;
loc_eeba: // 0ee7:004a
    if (memoryAGet(ds, 0x91a2) == 0x45)
        goto loc_eec8;
    if (memoryAGet(ds, 0x91a2) != 0x00)
        goto loc_eece;
loc_eec8: // 0ee7:0058
    dx = memoryAGet16(ss, bp + 24);
    ax = memoryAGet16(ss, bp + 22);
loc_eece: // 0ee7:005e
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_eed0() // 0ee7:0060
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x91a2) != 0x46)
        goto loc_eee2;
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    goto loc_ef23;
loc_eee2: // 0ee7:0072
    if (memoryAGet(ds, 0x91a2) != 0x47)
        goto loc_eef1;
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 10);
    goto loc_ef23;
loc_eef1: // 0ee7:0081
    if (memoryAGet(ds, 0x91a2) != 0x49)
        goto loc_ef00;
    dx = memoryAGet16(ss, bp + 16);
    ax = memoryAGet16(ss, bp + 14);
    goto loc_ef23;
loc_ef00: // 0ee7:0090
    if (memoryAGet(ds, 0x91a2) != 0x53)
        goto loc_ef0f;
    dx = memoryAGet16(ss, bp + 20);
    ax = memoryAGet16(ss, bp + 18);
    goto loc_ef23;
loc_ef0f: // 0ee7:009f
    if (memoryAGet(ds, 0x91a2) == 0x45)
        goto loc_ef1d;
    if (memoryAGet(ds, 0x91a2) != 0x00)
        goto loc_ef23;
loc_ef1d: // 0ee7:00ad
    dx = memoryAGet16(ss, bp + 24);
    ax = memoryAGet16(ss, bp + 22);
loc_ef23: // 0ee7:00b3
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ef25() // 0ee7:00b5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp--;
    sp--;
loc_ef2a: // 0ee7:00ba
    al = memoryAGet(ds, 0x91ac);
    memoryASet(ss, bp - 1, al);
    if (!al)
        goto loc_ef2a;
loc_ef34: // 0ee7:00c4
    sync();
    if (memoryAGet(ds, 0x91ac) != 0x00)
        goto loc_ef34;
    if ((char)memoryAGet(ss, bp - 1) >= (char)0x32)
        goto loc_ef2a;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) - 1);
    if (memoryAGet(ds, 0x91a2) == 0x45)
        goto loc_ef52;
    if (memoryAGet(ds, 0x91a2) != 0x00)
        goto loc_ef61;
loc_ef52: // 0ee7:00e2
    al = memoryAGet(ss, bp - 1);
    cbw();
    bx = ax;
    al = memoryAGet(ds, bx + 2461);
    memoryASet(ss, bp - 2, al);
    goto loc_ef6e;
loc_ef61: // 0ee7:00f1
    al = memoryAGet(ss, bp - 1);
    cbw();
    bx = ax;
    al = memoryAGet(ds, bx + 2412);
    memoryASet(ss, bp - 2, al);
loc_ef6e: // 0ee7:00fe
    if (memoryAGet(ss, bp - 2) == 0x00)
        goto loc_ef2a;
    al = memoryAGet(ss, bp - 2);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_ef7b() // 0ee7:010b
{
    push(ax);
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bp);
    bp = 0x1f86;
    ds = bp;
    bp = sp;
    sp--;
    sp--;
    in(al, 0x60);
    memoryASet(ds, 0x8b95, al);
    in(al, 0x61);
    memoryASet(ss, bp - 1, al);
    if (!(memoryAGet(ds, 0x8b95) & 0x80))
        goto loc_efa5;
    memoryASet(ds, 0x91ac, 0x00);
    goto loc_efab;
loc_efa5: // 0ee7:0135
    al = memoryAGet(ds, 0x8b95);
    memoryASet(ds, 0x91ac, al);
loc_efab: // 0ee7:013b
    al = memoryAGet(ss, bp - 1);
    al |= 0x80;
    out(0x61, al);
    al = memoryAGet(ss, bp - 1);
    out(0x61, al);
    al = 0x20;
    out(0x20, al);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    ax = pop();
    stop(); // iret 
}
void sub_efc8() // 0ee7:0158
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f09f(); // 1f09:000f
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    memoryASet16(ds, 0x8a68, dx);
    memoryASet16(ds, 0x8a66, ax);
    ax = 0x010b;
    dx = cs;
    push(dx);
    push(ax);
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0ee7);
    sp += 0x0006;
    ax = 0x0024;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f09f(); // 1f09:000f
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    memoryASet16(ds, 0x8ba0, dx);
    memoryASet16(ds, 0x8b9e, ax);
    ax = 0x0019;
    dx = 0x0ba1;
    push(dx);
    push(ax);
    ax = 0x0024;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0ee7);
    sp += 0x0006;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f014() // 0ee7:01a4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(memoryAGet16(ds, 0x8a68));
    push(memoryAGet16(ds, 0x8a66));
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0ee7);
    sp += 0x0006;
    push(memoryAGet16(ds, 0x8ba0));
    push(memoryAGet16(ds, 0x8b9e));
    ax = 0x0024;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f0af(); // 1f09:001f
    assert(cs == 0x0ee7);
    sp += 0x0006;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f03d() // 0ee7:01cd
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    si = 0x8000;
    al = 0x0f;
    dx = 0x03b4;
    out(dx, al);
    dx = 0x03b5;
    in(al, dx);
    memoryASet(ss, bp - 2, al);
    al = 0x66;
    out(dx, al);
    in(al, dx);
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 2);
    out(dx, al);
    if (memoryAGet(ss, bp - 1) != 0x66)
        goto loc_f08f;
    dx = 0x03ba;
    in(al, dx);
    al &= 0x80;
    memoryASet(ss, bp - 2, al);
loc_f06e: // 0ee7:01fe
    dx = 0x03ba;
    in(al, dx);
    al &= 0x80;
    memoryASet(ss, bp - 1, al);
    ax = si;
    si--;
    if (!ax)
        goto loc_f087;
    al = memoryAGet(ss, bp - 1);
    if (al == memoryAGet(ss, bp - 2))
        goto loc_f06e;
loc_f087: // 0ee7:0217
    al = memoryAGet(ss, bp - 1);
    if (al != memoryAGet(ss, bp - 2))
        goto loc_f093;
loc_f08f: // 0ee7:021f
    ax = 0;
    goto loc_f096;
loc_f093: // 0ee7:0223
    ax = 0x0001;
loc_f096: // 0ee7:0226
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f09b() // 0ee7:022b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    si = memoryAGet16(ss, bp + 10);
    memoryASet(ds, 0x92e1, 0x00);
    ax = si;
    memoryASet(ds, 0x92e0, al);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0ee7);
    sp += 0x000a;
    memoryASet(ds, 0x92e1, 0x0f);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0ee7);
    sp += 0x000a;
    al = memoryAGet(ds, 0x8d62);
    ah = 0x00;
    di = ax;
    if (di != si)
        goto loc_f104;
    if ((short)si <= (short)0x000c)
        goto loc_f108;
    memoryASet16(ss, bp - 2, 0x0040);
    memoryASet16(ss, bp - 4, 0x0088);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    if (memoryAGet(es, bx) != 0x00)
        goto loc_f108;
loc_f104: // 0ee7:0294
    ax = 0;
    goto loc_f10b;
loc_f108: // 0ee7:0298
    ax = 0x0001;
loc_f10b: // 0ee7:029b
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f111() // 0ee7:02a1
{
    CStackGuardFar sg(0, false);
    push(si);
    si = 0;
    push(cs);
    cs = 0x0cb4;
    sub_cb4e(); // 0cb4:000e
    assert(cs == 0x0ee7);
    if (!al)
        goto loc_f122;
    si = 0x0001;
    goto loc_f12e;
loc_f122: // 0ee7:02b2
    push(cs);
    cs = 0x0cb4;
    sub_cb77(); // 0cb4:0037
    assert(cs == 0x0ee7);
    if (!al)
        goto loc_f12e;
    si = 0x0002;
loc_f12e: // 0ee7:02be
    ax = si;
    si = pop();
    cs = pop();
}
void sub_f132() // 0ee7:02c2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    si = 0;
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1f09;
    sub_1f09f(); // 1f09:000f
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    ax |= dx;
    if (!ax)
        goto loc_f1a8;
    memoryASet16(ds, 0x92e0, 0x0000);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0ee7);
    sp += 0x000a;
    si = memoryAGet16(ds, 0x8d62);
    if (si != 0xffff)
        goto loc_f17a;
    si = 0x0001;
    goto loc_f17c;
loc_f17a: // 0ee7:030a
    si = 0;
loc_f17c: // 0ee7:030c
    if (!si)
        goto loc_f1a8;
    memoryASet16(ds, 0x92e0, 0x0004);
    memoryASet16(ds, 0x92e4, 0x0140);
    memoryASet16(ds, 0x92e6, 0x0064);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0ee7);
    sp += 0x000a;
loc_f1a8: // 0ee7:0338
    ax = si;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f1af() // 0ee7:033f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    si = 0;
    memoryASet16(ss, bp - 2, 0xffff);
    memoryASet16(ss, bp - 4, 0x000e);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    if (memoryAGet(es, bx) != 0xff)
        goto loc_f1df;
    memoryASet16(ss, bp - 2, 0xfc00);
    memoryASet16(ss, bp - 4, si);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    if (memoryAGet(es, bx) != 0x21)
        goto loc_f1df;
    si = 0x0001;
loc_f1df: // 0ee7:036f
    ax = si;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f1e6() // 0ee7:0376
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    si = 0;
    flags.interrupts = false;
    memoryASet(ds, 0x92e1, 0x06);
    memoryASet16(ds, 0x92e2, si);
    memoryASet16(ds, 0x92ec, si);
    push(ds);
    ax = 0x8d62;
    push(ax);
    push(ds);
    ax = 0x92e0;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs);
    cs = 0x1f0d;
    sub_1f0d4(); // 1f0d:0004
    assert(cs == 0x0ee7);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x8d6e) == 0x0001)
        goto loc_f21e;
    if (memoryAGet16(ds, 0x8d64) == 0x0000)
        goto loc_f21e;
    si = 0x0001;
loc_f21e: // 0ee7:03ae
    flags.interrupts = true;
    ax = si;
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f223() // 0ee7:03b3
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    ax = 0x01b8;
    push(ax);
    push(cs);
    cs = 0x1f5c;
    sub_1f5c9(); // 1f5c:0009
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    ax = 0x0064;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    push(cs);
    cs = 0x1f5c;
    sub_1f5f5(); // 1f5c:0035
    assert(cs == 0x0ee7);
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f23f() // 0ee7:03cf
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(memoryAGet16(ds, 0x8de0));
    push(cs);
    cs = 0x127c;
    sub_127ed(); // 127c:002d
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    al = memoryAGet(ds, 0x8dbb);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x127c;
    sub_12809(); // 127c:0049
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    push(cs);
    cs = 0x127c;
    sub_12825(); // 127c:0065
    assert(cs == 0x0ee7);
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f25d() // 0ee7:03ed
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    di = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 2, 0x0000);
    si = 0;
loc_f26f: // 0ee7:03ff
    dx = di;
    dx++;
    in(al, dx);
    if (!(al & 0x40))
        goto loc_f28d;
    si++;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    if (si <= 0x00fa)
        goto loc_f26f;
    goto loc_f379;
loc_f28d: // 0ee7:041d
    dx = di;
    dx++;
    al = 0xff;
    out(dx, al);
    si = 0;
loc_f295: // 0ee7:0425
    if (si >= 0x00fa)
        goto loc_f2b2;
    dx = di;
    dx++;
    in(al, dx);
    if (!(al & 0x80))
        goto loc_f2b2;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    si++;
    goto loc_f295;
loc_f2b2: // 0ee7:0442
    if (si >= 0x00fa)
        goto loc_f322;
    dx = di;
    in(al, dx);
    ah = 0x00;
    memoryASet16(ss, bp - 4, ax);
    if (ax == 0x00fe)
        goto loc_f2c8;
    goto loc_f379;
loc_f2c8: // 0ee7:0458
    memoryASet16(ds, 0x8a2a, 0x0000);
    si = 0;
loc_f2d0: // 0ee7:0460
    dx = di;
    dx++;
    in(al, dx);
    if (!(al & 0x40))
        goto loc_f2ee;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    si++;
    if (si <= 0x00fa)
        goto loc_f2d0;
    goto loc_f379;
loc_f2ee: // 0ee7:047e
    dx = di;
    dx++;
    al = 0x3f;
    out(dx, al);
    si = 0;
loc_f2f6: // 0ee7:0486
    dx = di;
    dx++;
    in(al, dx);
    if (!(al & 0x80))
        goto loc_f313;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    si++;
    if (si <= 0x00fa)
        goto loc_f2f6;
    goto loc_f379;
loc_f313: // 0ee7:04a3
    dx = di;
    in(al, dx);
    ah = 0x00;
    memoryASet16(ss, bp - 4, ax);
    if (ax != 0x00fe)
        goto loc_f379;
    goto loc_f37d;
loc_f322: // 0ee7:04b2
    memoryASet16(ds, 0x8a2a, 0x0001);
    si = 0;
loc_f32a: // 0ee7:04ba
    dx = di;
    dx++;
    in(al, dx);
    if (!(al & 0x40))
        goto loc_f347;
    si++;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    if (si <= 0x00fa)
        goto loc_f32a;
    goto loc_f379;
loc_f347: // 0ee7:04d7
    dx = di;
    dx++;
    al = 0x3f;
    out(dx, al);
    si = 0;
loc_f34f: // 0ee7:04df
    dx = di;
    dx++;
    in(al, dx);
    if (!(al & 0x80))
        goto loc_f36c;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    si++;
    if (si <= 0x00fa)
        goto loc_f34f;
    goto loc_f379;
loc_f36c: // 0ee7:04fc
    dx = di;
    in(al, dx);
    ah = 0x00;
    memoryASet16(ss, bp - 4, ax);
    if (ax == 0x00fe)
        goto loc_f37d;
loc_f379: // 0ee7:0509
    ax = 0;
    goto loc_f384;
loc_f37d: // 0ee7:050d
    memoryASet16(ds, 0x8f7c, di);
    ax = 0x0001;
loc_f384: // 0ee7:0514
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f38a() // 0ee7:051a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    al = 0x00;
    memoryASet(ds, 0x881d, al);
    memoryASet(ds, 0x8810, al);
    memoryASet(ds, 0x881a, al);
    memoryASet(ds, 0x8811, al);
    memoryASet(ds, 0x8819, al);
    memoryASet(ds, 0x881b, al);
    al = 0x00;
    memoryASet(ds, 0x8818, al);
    memoryASet(ds, 0x8816, al);
    memoryASet(ds, 0x881e, 0x00);
    memoryASet(ds, 0x881c, 0x00);
    ax = 0x0012;
    push(ax);
    push(cs);
    sub_f09b(); // 0ee7:022b
    sp++;
    sp++;
    if (!ax)
        goto loc_f3c3;
    memoryASet(ds, 0x881b, 0x01);
loc_f3c3: // 0ee7:0553
    ax = 0x0013;
    push(ax);
    push(cs);
    sub_f09b(); // 0ee7:022b
    sp++;
    sp++;
    if (!ax)
        goto loc_f3d6;
    memoryASet(ds, 0x8819, 0x01);
loc_f3d6: // 0ee7:0566
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_f09b(); // 0ee7:022b
    sp++;
    sp++;
    if (!ax)
        goto loc_f3e9;
    memoryASet(ds, 0x8811, 0x01);
loc_f3e9: // 0ee7:0579
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_f09b(); // 0ee7:022b
    sp++;
    sp++;
    if (!ax)
        goto loc_f3fc;
    memoryASet(ds, 0x881a, 0x01);
loc_f3fc: // 0ee7:058c
    push(cs);
    sub_f03d(); // 0ee7:01cd
    if (!ax)
        goto loc_f409;
    memoryASet(ds, 0x881d, 0x01);
loc_f409: // 0ee7:0599
    push(cs);
    sub_f1af(); // 0ee7:033f
    if (!ax)
        goto loc_f416;
    memoryASet(ds, 0x8810, 0x01);
loc_f416: // 0ee7:05a6
    push(cs);
    sub_f132(); // 0ee7:02c2
    if (!ax)
        goto loc_f423;
    memoryASet(ds, 0x8816, 0x01);
loc_f423: // 0ee7:05b3
    push(cs);
    sub_f111(); // 0ee7:02a1
    memoryASet(ds, 0x8818, al);
    ah = 0x00;
    memoryASet16(ds, 0x8d74, ax);
    ax = 0x0388;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11cd0(); // 11cd:0000
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    ax = 1; // gabo fake joystick
    if (!ax)
        goto loc_f443;
    memoryASet(ds, 0x881e, 0x01);
loc_f443: // 0ee7:05d3
    ax = 0x0300;
    push(ax);
    push(cs);
    sub_f25d(); // 0ee7:03ed
    sp++;
    sp++;
    if (ax)
        goto loc_f45f;
    ax = 0x0330;
    push(ax);
    push(cs);
    sub_f25d(); // 0ee7:03ed
    sp++;
    sp++;
    ax = 1; // gabo fake
    if (!ax)
        goto loc_f464;
loc_f45f: // 0ee7:05ef
    memoryASet(ds, 0x881c, 0x01);
loc_f464: // 0ee7:05f4
    al = memoryAGet(ds, 0x881c);
    ah = 0x00;
    memoryASet16(ds, 0x92c4, ax);
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f46d() // 0ee7:05fd
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    if (memoryAGet(ds, 0x8812) == 0x00)
        goto loc_f487;
    memoryASet16(ss, bp - 2, 0xb800);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_f491;
loc_f487: // 0ee7:0617
    memoryASet16(ss, bp - 2, 0xb000);
    memoryASet16(ss, bp - 4, 0x0000);
loc_f491: // 0ee7:0621
    si = 0;
    goto loc_f4a2;
loc_f495: // 0ee7:0625
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx, 0x0000);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    si++;
loc_f4a2: // 0ee7:0632
    if ((short)si < (short)0x07d0)
        goto loc_f495;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f4ad() // 0ee7:063d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    if (memoryAGet(ds, 0x8812) != 0x00)
        goto loc_f4d0;
    memoryASet16(ss, bp + 10, 0x0007);
    memoryASet16(ss, bp + 12, 0x0000);
    memoryASet16(ss, bp - 2, 0xb000);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_f4da;
loc_f4d0: // 0ee7:0660
    memoryASet16(ss, bp - 2, 0xb800);
    memoryASet16(ss, bp - 4, 0x0000);
loc_f4da: // 0ee7:066a
    al = memoryAGet(ss, bp + 12);
    cx = 0x0004;
    al <<= cl;
    al |= memoryAGet(ss, bp + 10);
    dl = memoryAGet(ss, bp + 14);
    cx = 0x0007;
    dl <<= cl;
    al |= dl;
    al |= 0x08;
    memoryASet(ss, bp - 6, al);
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x0050;
    mul(dx);
    ax += memoryAGet16(ss, bp + 6);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
loc_f505: // 0ee7:0695
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 5, al);
    if (!al)
        goto loc_f52f;
    al = memoryAGet(ss, bp - 5);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    al = memoryAGet(ss, bp - 6);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    memoryASet16(ss, bp + 16, memoryAGet16(ss, bp + 16) + 1);
    goto loc_f505;
loc_f52f: // 0ee7:06bf
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f533() // 0ee7:06c3
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = 0;
loc_f539: // 0ee7:06c9
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_f548;
    si++;
    goto loc_f539;
loc_f548: // 0ee7:06d8
    ax = si;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f54d() // 0ee7:06dd
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(cs);
    sub_f46d(); // 0ee7:05fd
    push(memoryAGet16(ds, 0x05c2));
    push(memoryAGet16(ds, 0x05c0));
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x05c2));
    push(memoryAGet16(ds, 0x05c0));
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ds, 0x05c6));
    push(memoryAGet16(ds, 0x05c4));
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x000c;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x05c6));
    push(memoryAGet16(ds, 0x05c4));
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    ax = 0x05dc;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    push(cs);
    sub_f46d(); // 0ee7:05fd
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f5c9() // 0ee7:0759
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    memoryASet16(ss, bp - 6, 0x002a);
    push(cs);
    sub_f46d(); // 0ee7:05fd
    di = memoryAGet16(ss, bp + 14);
    di <<= 1;
    di += 0x000b;
    ax = 0x0028;
    dx = memoryAGet16(ss, bp - 6);
    dx >>= 1;
    ax -= dx;
    memoryASet16(ss, bp - 4, ax);
    si = 0x000c;
    ax = di;
    ax >>= 1;
    si -= ax;
    push(ds);
    ax = 0x18f4;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(si);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_f63e;
loc_f61a: // 0ee7:07aa
    push(ds);
    ax = 0x191f;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax += memoryAGet16(ss, bp - 2);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_f63e: // 0ee7:07ce
    ax = di;
    ax += 0xfffe;
    if (ax > memoryAGet16(ss, bp - 2))
        goto loc_f61a;
    push(ds);
    ax = 0x194a;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax += di;
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ds, 0x08ba));
    push(memoryAGet16(ds, 0x08b8));
    push(memoryAGet16(ds, 0x0806));
    push(memoryAGet16(ds, 0x0804));
    push(memoryAGet16(ds, 0x0752));
    push(memoryAGet16(ds, 0x0750));
    push(memoryAGet16(ds, 0x069e));
    push(memoryAGet16(ds, 0x069c));
    push(memoryAGet16(ds, 0x05ca));
    push(memoryAGet16(ds, 0x05c8));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(si);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x08ba));
    push(memoryAGet16(ds, 0x08b8));
    push(memoryAGet16(ds, 0x0806));
    push(memoryAGet16(ds, 0x0804));
    push(memoryAGet16(ds, 0x0752));
    push(memoryAGet16(ds, 0x0750));
    push(memoryAGet16(ds, 0x069e));
    push(memoryAGet16(ds, 0x069c));
    push(memoryAGet16(ds, 0x05ca));
    push(memoryAGet16(ds, 0x05c8));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    push(ax);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(ds);
    ax = 0x1975;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    push(ax);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ds, 0x08be));
    push(memoryAGet16(ds, 0x08bc));
    push(memoryAGet16(ds, 0x080a));
    push(memoryAGet16(ds, 0x0808));
    push(memoryAGet16(ds, 0x0756));
    push(memoryAGet16(ds, 0x0754));
    push(memoryAGet16(ds, 0x06a2));
    push(memoryAGet16(ds, 0x06a0));
    push(memoryAGet16(ds, 0x05ce));
    push(memoryAGet16(ds, 0x05cc));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax += 0x0004;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x08be));
    push(memoryAGet16(ds, 0x08bc));
    push(memoryAGet16(ds, 0x080a));
    push(memoryAGet16(ds, 0x0808));
    push(memoryAGet16(ds, 0x0756));
    push(memoryAGet16(ds, 0x0754));
    push(memoryAGet16(ds, 0x06a2));
    push(memoryAGet16(ds, 0x06a0));
    push(memoryAGet16(ds, 0x05ce));
    push(memoryAGet16(ds, 0x05cc));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ds, 0x08c6));
    push(memoryAGet16(ds, 0x08c4));
    push(memoryAGet16(ds, 0x0812));
    push(memoryAGet16(ds, 0x0810));
    push(memoryAGet16(ds, 0x075e));
    push(memoryAGet16(ds, 0x075c));
    push(memoryAGet16(ds, 0x06aa));
    push(memoryAGet16(ds, 0x06a8));
    push(memoryAGet16(ds, 0x05d6));
    push(memoryAGet16(ds, 0x05d4));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax += di;
    ax += 0xfffe;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x08c6));
    push(memoryAGet16(ds, 0x08c4));
    push(memoryAGet16(ds, 0x0812));
    push(memoryAGet16(ds, 0x0810));
    push(memoryAGet16(ds, 0x075e));
    push(memoryAGet16(ds, 0x075c));
    push(memoryAGet16(ds, 0x06aa));
    push(memoryAGet16(ds, 0x06a8));
    push(memoryAGet16(ds, 0x05d6));
    push(memoryAGet16(ds, 0x05d4));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ds, 0x08c2));
    push(memoryAGet16(ds, 0x08c0));
    push(memoryAGet16(ds, 0x080e));
    push(memoryAGet16(ds, 0x080c));
    push(memoryAGet16(ds, 0x075a));
    push(memoryAGet16(ds, 0x0758));
    push(memoryAGet16(ds, 0x06a6));
    push(memoryAGet16(ds, 0x06a4));
    push(memoryAGet16(ds, 0x05d2));
    push(memoryAGet16(ds, 0x05d0));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax += di;
    ax += 0xfffd;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x08c2));
    push(memoryAGet16(ds, 0x08c0));
    push(memoryAGet16(ds, 0x080e));
    push(memoryAGet16(ds, 0x080c));
    push(memoryAGet16(ds, 0x075a));
    push(memoryAGet16(ds, 0x0758));
    push(memoryAGet16(ds, 0x06a6));
    push(memoryAGet16(ds, 0x06a4));
    push(memoryAGet16(ds, 0x05d2));
    push(memoryAGet16(ds, 0x05d0));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(ds);
    ax = 0x199e;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax += di;
    ax += 0xfffc;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    push(ax);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = si;
    ax += di;
    ax += 0xfffb;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    push(ax);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f925() // 0ee7:0ab5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = 0;
    al = memoryAGet(ss, bp + 8);
    cbw();
    if (ax == 0x0048)
        goto loc_f96c;
    if ((short)ax > (short)0x0048)
        goto loc_f942;
    if (ax == 0x0043)
        goto loc_f94e;
    if (ax == 0x0045)
        goto loc_f95a;
    goto loc_f97c;
loc_f942: // 0ee7:0ad2
    if (ax == 0x0054)
        goto loc_f975;
    if (ax == 0x0056)
        goto loc_f963;
    goto loc_f97c;
loc_f94e: // 0ee7:0ade
    if (memoryAGet(ds, 0x881a) == 0x00)
        goto loc_f97c;
loc_f955: // 0ee7:0ae5
    si = 0x0001;
    goto loc_f97c;
loc_f95a: // 0ee7:0aea
    if (memoryAGet(ds, 0x8811) == 0x00)
        goto loc_f97c;
    goto loc_f955;
loc_f963: // 0ee7:0af3
    if (memoryAGet(ds, 0x881b) == 0x00)
        goto loc_f97c;
    goto loc_f955;
loc_f96c: // 0ee7:0afc
    if (memoryAGet(ds, 0x881d) == 0x00)
        goto loc_f97c;
    goto loc_f955;
loc_f975: // 0ee7:0b05
    if (memoryAGet(ds, 0x8810) != 0x00)
        goto loc_f955;
loc_f97c: // 0ee7:0b0c
    ax = si;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f981() // 0ee7:0b11
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = 0;
    al = memoryAGet(ss, bp + 8);
    cbw();
    if (ax == 0x004e)
        goto loc_f9aa;
    if ((short)ax > (short)0x004e)
        goto loc_f99e;
    if (ax == 0x0041)
        goto loc_f9af;
    if (ax == 0x0049)
        goto loc_f9aa;
    goto loc_f9c8;
loc_f99e: // 0ee7:0b2e
    if (ax == 0x0052)
        goto loc_f9c1;
    if (ax == 0x0053)
        goto loc_f9b8;
    goto loc_f9c8;
loc_f9aa: // 0ee7:0b3a
    si = 0x0001;
    goto loc_f9c8;
loc_f9af: // 0ee7:0b3f
    if (memoryAGet(ds, 0x881e) == 0x00)
        goto loc_f9c8;
    goto loc_f9aa;
loc_f9b8: // 0ee7:0b48
    if (memoryAGet(ds, 0x92c6) == 0x00)
        goto loc_f9c8;
    goto loc_f9aa;
loc_f9c1: // 0ee7:0b51
    if (memoryAGet(ds, 0x881c) != 0x00)
        goto loc_f9aa;
loc_f9c8: // 0ee7:0b58
    ax = si;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_f9cd() // 0ee7:0b5d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = 0;
    al = memoryAGet(ss, bp + 8);
    cbw();
    if (ax == 0x0043)
        goto loc_f9e8;
    if (ax == 0x004a)
        goto loc_f9f6;
    if (ax == 0x004d)
        goto loc_f9ed;
    goto loc_f9fd;
loc_f9e8: // 0ee7:0b78
    si = 0x0001;
    goto loc_f9fd;
loc_f9ed: // 0ee7:0b7d
    if (memoryAGet(ds, 0x8816) == 0x00)
        goto loc_f9fd;
    goto loc_f9e8;
loc_f9f6: // 0ee7:0b86
    if (memoryAGet(ds, 0x8818) != 0x00)
        goto loc_f9e8;
loc_f9fd: // 0ee7:0b8d
    ax = si;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_fa02() // 0ee7:0b92
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    memoryASet16(ss, bp - 4, 0x0000);
    si = 0;
    goto loc_fa4b;
loc_fa13: // 0ee7:0ba3
    ax = si;
    ax += 0x0003;
    ax <<= 1;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    push(memoryAGet16(ss, bp - 10));
    push(bx);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    if (ax <= memoryAGet16(ss, bp - 4))
        goto loc_fa4a;
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    memoryASet16(ss, bp - 4, ax);
loc_fa4a: // 0ee7:0bda
    si++;
loc_fa4b: // 0ee7:0bdb
    if (si < memoryAGet16(ss, bp + 14))
        goto loc_fa13;
    ax = 0x0028;
    dx = memoryAGet16(ss, bp - 4);
    dx >>= 1;
    ax -= dx;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax <<= 1;
    ax += 0x000a;
    memoryASet16(ss, bp - 2, ax);
    ax = 0x000c;
    dx = memoryAGet16(ss, bp - 2);
    dx >>= 1;
    ax -= dx;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 0x0006);
    si = 0;
    goto loc_fac6;
loc_fa7d: // 0ee7:0c0d
    ax = si;
    ax += 0x0003;
    ax <<= 1;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    al = memoryAGet(es, bx);
    cbw();
    if (ax != memoryAGet16(ds, 0x8814))
        goto loc_faa3;
    di = 0x0001;
    goto loc_faa5;
loc_faa3: // 0ee7:0c33
    di = 0;
loc_faa5: // 0ee7:0c35
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(di);
    ax = 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 0x0002);
    si++;
loc_fac6: // 0ee7:0c56
    if (si < memoryAGet16(ss, bp + 14))
        goto loc_fa7d;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_fad1() // 0ee7:0c61
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    di = memoryAGet16(ss, bp + 14);
loc_fadc: // 0ee7:0c6c
    push(cs);
    sub_ef25(); // 0ee7:00b5
    memoryASet(ss, bp - 1, al);
    if (memoryAGet(ss, bp - 1) != 0x01)
        goto loc_faed;
    ax = 0;
    goto loc_fb33;
loc_faed: // 0ee7:0c7d
    if (memoryAGet(ss, bp - 1) != 0x0d)
        goto loc_fafc;
    push(cs);
    sub_f223(); // 0ee7:03b3
    ax = 0x0002;
    goto loc_fb33;
loc_fafc: // 0ee7:0c8c
    si = 0;
    goto loc_fb2d;
loc_fb00: // 0ee7:0c90
    ax = si;
    ax += 0x0003;
    ax <<= 1;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    al = memoryAGet(es, bx);
    if (al != memoryAGet(ss, bp - 1))
        goto loc_fb2c;
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    memoryASet16(ds, 0x8814, ax);
    ax = 0x0001;
    goto loc_fb33;
loc_fb2c: // 0ee7:0cbc
    si++;
loc_fb2d: // 0ee7:0cbd
    if (si < di)
        goto loc_fb00;
    goto loc_fadc;
loc_fb33: // 0ee7:0cc3
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_fb39() // 0ee7:0cc9
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0010;
    if (memoryAGet(ds, 0x8812) != 0x00)
        goto loc_fb54;
    memoryASet16(ss, bp - 14, 0xb000);
    memoryASet16(ss, bp - 16, 0x0000);
    goto loc_fb5e;
loc_fb54: // 0ee7:0ce4
    memoryASet16(ss, bp - 14, 0xb800);
    memoryASet16(ss, bp - 16, 0x0000);
loc_fb5e: // 0ee7:0cee
    ax = 0x0fa0;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    si = 0;
    goto loc_fb8c;
loc_fb73: // 0ee7:0d03
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 16);
    es = memoryAGet16(ss, bp - 16 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    dx = si;
    dx <<= 1;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    bx += dx;
    memoryASet16(es, bx, ax);
    si++;
loc_fb8c: // 0ee7:0d1c
    if ((short)si < (short)0x07d0)
        goto loc_fb73;
    memoryASet16(ss, bp - 4, 0x0028);
    memoryASet16(ss, bp - 2, 0x0004);
    ax = 0x0028;
    dx = memoryAGet16(ss, bp - 4);
    dx >>= 1;
    ax -= dx;
    memoryASet16(ss, bp - 8, ax);
    ax = 0x000c;
    dx = memoryAGet16(ss, bp - 2);
    dx >>= 1;
    ax -= dx;
    memoryASet16(ss, bp - 6, ax);
    push(ds);
    ax = 0x19c7;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    si = 0;
    goto loc_fbf9;
loc_fbd7: // 0ee7:0d67
    push(ds);
    ax = 0x19f0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += si;
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    si++;
loc_fbf9: // 0ee7:0d89
    ax = memoryAGet16(ss, bp - 2);
    ax += 0xfffe;
    if (ax > si)
        goto loc_fbd7;
    push(ds);
    ax = 0x1a19;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ds, 0x08ca));
    push(memoryAGet16(ds, 0x08c8));
    push(memoryAGet16(ds, 0x0816));
    push(memoryAGet16(ds, 0x0814));
    push(memoryAGet16(ds, 0x0762));
    push(memoryAGet16(ds, 0x0760));
    push(memoryAGet16(ds, 0x06ae));
    push(memoryAGet16(ds, 0x06ac));
    push(memoryAGet16(ds, 0x05da));
    push(memoryAGet16(ds, 0x05d8));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 2);
    ax += 0xfffd;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x08ca));
    push(memoryAGet16(ds, 0x08c8));
    push(memoryAGet16(ds, 0x0816));
    push(memoryAGet16(ds, 0x0814));
    push(memoryAGet16(ds, 0x0762));
    push(memoryAGet16(ds, 0x0760));
    push(memoryAGet16(ds, 0x06ae));
    push(memoryAGet16(ds, 0x06ac));
    push(memoryAGet16(ds, 0x05da));
    push(memoryAGet16(ds, 0x05d8));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(memoryAGet16(ds, 0x08ce));
    push(memoryAGet16(ds, 0x08cc));
    push(memoryAGet16(ds, 0x081a));
    push(memoryAGet16(ds, 0x0818));
    push(memoryAGet16(ds, 0x0766));
    push(memoryAGet16(ds, 0x0764));
    push(memoryAGet16(ds, 0x06b2));
    push(memoryAGet16(ds, 0x06b0));
    push(memoryAGet16(ds, 0x05de));
    push(memoryAGet16(ds, 0x05dc));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 2);
    ax += 0xfffe;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x08ce));
    push(memoryAGet16(ds, 0x08cc));
    push(memoryAGet16(ds, 0x081a));
    push(memoryAGet16(ds, 0x0818));
    push(memoryAGet16(ds, 0x0766));
    push(memoryAGet16(ds, 0x0764));
    push(memoryAGet16(ds, 0x06b2));
    push(memoryAGet16(ds, 0x06b0));
    push(memoryAGet16(ds, 0x05de));
    push(memoryAGet16(ds, 0x05dc));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    push(cs);
    sub_f223(); // 0ee7:03b3
    di = 0;
loc_fd49: // 0ee7:0ed9
    if (!di)
        goto loc_fd50;
    goto loc_fdc7;
loc_fd50: // 0ee7:0ee0
    push(cs);
    sub_ef25(); // 0ee7:00b5
    ah = 0x00;
    si = ax;
    if (memoryAGet(ds, 0x91a2) != 0x46)
        goto loc_fd6f;
    if (si != 0x004f)
        goto loc_fd67;
    di = 0x0002;
loc_fd67: // 0ee7:0ef7
    if (si != 0x004e)
        goto loc_fd6f;
    di = 0x0001;
loc_fd6f: // 0ee7:0eff
    if (memoryAGet(ds, 0x91a2) != 0x45)
        goto loc_fd86;
    if (si != 0x0059)
        goto loc_fd7e;
    di = 0x0002;
loc_fd7e: // 0ee7:0f0e
    if (si != 0x004e)
        goto loc_fd86;
    di = 0x0001;
loc_fd86: // 0ee7:0f16
    if (memoryAGet(ds, 0x91a2) == 0x47)
        goto loc_fd90;
    goto loc_fda0;
loc_fd90: // 0ee7:0f20
    if (si != 0x004a)
        goto loc_fd98;
    di = 0x0002;
loc_fd98: // 0ee7:0f28
    if (si != 0x004e)
        goto loc_fda0;
    di = 0x0001;
loc_fda0: // 0ee7:0f30
    if (memoryAGet(ds, 0x91a2) == 0x53)
        goto loc_fdb1;
    if (memoryAGet(ds, 0x91a2) == 0x49)
        goto loc_fdb1;
    goto loc_fd49;
loc_fdb1: // 0ee7:0f41
    if (si != 0x0053)
        goto loc_fdb9;
    di = 0x0002;
loc_fdb9: // 0ee7:0f49
    if (si == 0x004e)
        goto loc_fdc1;
    goto loc_fd49;
loc_fdc1: // 0ee7:0f51
    di = 0x0001;
    goto loc_fd49;
loc_fdc7: // 0ee7:0f57
    di--;
    si = 0;
    goto loc_fde5;
loc_fdcc: // 0ee7:0f5c
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    dx = si;
    dx <<= 1;
    bx = memoryAGet16(ss, bp - 16);
    es = memoryAGet16(ss, bp - 16 + 2);
    bx += dx;
    memoryASet16(es, bx, ax);
    si++;
loc_fde5: // 0ee7:0f75
    if ((short)si < (short)0x07d0)
        goto loc_fdcc;
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x0ee7);
    sp += 0x0004;
    ax = di;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_fe01() // 0ee7:0f91
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
    if (memoryAGet(ds, 0x8812) != 0x00)
        goto loc_fe1c;
    memoryASet16(ss, bp - 12, 0xb000);
    memoryASet16(ss, bp - 14, 0x0000);
    goto loc_fe26;
loc_fe1c: // 0ee7:0fac
    memoryASet16(ss, bp - 12, 0xb800);
    memoryASet16(ss, bp - 14, 0x0000);
loc_fe26: // 0ee7:0fb6
    ax = 0x0fa0;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    si = 0;
    goto loc_fe54;
loc_fe3b: // 0ee7:0fcb
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 14);
    es = memoryAGet16(ss, bp - 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    dx = si;
    dx <<= 1;
    bx = memoryAGet16(ss, bp - 10);
    es = memoryAGet16(ss, bp - 10 + 2);
    bx += dx;
    memoryASet16(es, bx, ax);
    si++;
loc_fe54: // 0ee7:0fe4
    if ((short)si < (short)0x07d0)
        goto loc_fe3b;
    memoryASet16(ss, bp - 4, 0x0020);
    memoryASet16(ss, bp - 2, 0x0004);
    ax = 0x0028;
    dx = memoryAGet16(ss, bp - 4);
    dx >>= 1;
    ax -= dx;
    memoryASet16(ss, bp - 6, ax);
    di = 0x000c;
    ax = memoryAGet16(ss, bp - 2);
    ax >>= 1;
    di -= ax;
    push(ds);
    ax = 0x1a42;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(di);
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    si = 0;
    goto loc_febb;
loc_fe9a: // 0ee7:102a
    push(ds);
    ax = 0x1a63;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = di;
    ax += si;
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    si++;
loc_febb: // 0ee7:104b
    ax = memoryAGet16(ss, bp - 2);
    ax += 0xfffe;
    if (ax > si)
        goto loc_fe9a;
    push(ds);
    ax = 0x1a84;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_feef;
    goto loc_ff80;
loc_feef: // 0ee7:107f
    push(memoryAGet16(ds, 0x08d2));
    push(memoryAGet16(ds, 0x08d0));
    push(memoryAGet16(ds, 0x081e));
    push(memoryAGet16(ds, 0x081c));
    push(memoryAGet16(ds, 0x076a));
    push(memoryAGet16(ds, 0x0768));
    push(memoryAGet16(ds, 0x06b6));
    push(memoryAGet16(ds, 0x06b4));
    push(memoryAGet16(ds, 0x05e2));
    push(memoryAGet16(ds, 0x05e0));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 2);
    ax += 0xfffd;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x08d2));
    push(memoryAGet16(ds, 0x08d0));
    push(memoryAGet16(ds, 0x081e));
    push(memoryAGet16(ds, 0x081c));
    push(memoryAGet16(ds, 0x076a));
    push(memoryAGet16(ds, 0x0768));
    push(memoryAGet16(ds, 0x06b6));
    push(memoryAGet16(ds, 0x06b4));
    push(memoryAGet16(ds, 0x05e2));
    push(memoryAGet16(ds, 0x05e0));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
    goto loc_1000e;
loc_ff80: // 0ee7:1110
    push(memoryAGet16(ds, 0x08d6));
    push(memoryAGet16(ds, 0x08d4));
    push(memoryAGet16(ds, 0x0822));
    push(memoryAGet16(ds, 0x0820));
    push(memoryAGet16(ds, 0x076e));
    push(memoryAGet16(ds, 0x076c));
    push(memoryAGet16(ds, 0x06ba));
    push(memoryAGet16(ds, 0x06b8));
    push(memoryAGet16(ds, 0x05e6));
    push(memoryAGet16(ds, 0x05e4));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 2);
    ax += 0xfffd;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x08d6));
    push(memoryAGet16(ds, 0x08d4));
    push(memoryAGet16(ds, 0x0822));
    push(memoryAGet16(ds, 0x0820));
    push(memoryAGet16(ds, 0x076e));
    push(memoryAGet16(ds, 0x076c));
    push(memoryAGet16(ds, 0x06ba));
    push(memoryAGet16(ds, 0x06b8));
    push(memoryAGet16(ds, 0x05e6));
    push(memoryAGet16(ds, 0x05e4));
    push(cs);
    sub_ee7b(); // 0ee7:000b
    sp += 0x0014;
    push(dx);
    push(ax);
    push(cs);
    sub_f533(); // 0ee7:06c3
    sp += 0x0004;
    ax >>= 1;
    dx = pop();
    dx -= ax;
    push(dx);
    push(cs);
    sub_f4ad(); // 0ee7:063d
    sp += 0x000e;
loc_1000e: // 0ee7:119e
    push(cs);
    sub_f223(); // 0ee7:03b3
    push(cs);
    sub_ef25(); // 0ee7:00b5
    si = 0;
    goto loc_10033;
loc_1001a: // 0ee7:11aa
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 10);
    es = memoryAGet16(ss, bp - 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    dx = si;
    dx <<= 1;
    bx = memoryAGet16(ss, bp - 14);
    es = memoryAGet16(ss, bp - 14 + 2);
    bx += dx;
    memoryASet16(es, bx, ax);
    si++;
loc_10033: // 0ee7:11c3
    if ((short)si < (short)0x07d0)
        goto loc_1001a;
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x0ee7);
    sp += 0x0004;
    memoryASet(ds, 0x8db5, 0x00);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10052() // 0ee7:11e2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    si = 0x0005;
    memoryASet(ss, bp - 1, 0x00);
    if (memoryAGet(ds, 0x91a2) == 0x00)
        goto loc_1006a;
    goto loc_100e2;
loc_1006a: // 0ee7:11fa
    push(memoryAGet16(ds, 0x05f2));
    push(memoryAGet16(ds, 0x05f0));
    push(si);
    push(memoryAGet16(ds, 0x05ee));
    push(memoryAGet16(ds, 0x05ec));
    push(cs);
    sub_f5c9(); // 0ee7:0759
    sp += 0x000a;
    bx = memoryAGet16(ds, 0x05e8);
    es = memoryAGet16(ds, 0x05e8 + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 7, al);
    al = memoryAGet(ss, bp - 7);
    cbw();
    memoryASet16(ds, 0x8814, ax);
loc_1009c: // 0ee7:122c
    if (memoryAGet(ss, bp - 1) != 0x00)
        goto loc_100dc;
    push(si);
    push(ds);
    ax = 0x05e8;
    push(ax);
    push(cs);
    sub_fa02(); // 0ee7:0b92
    sp += 0x0006;
    al = memoryAGet(ds, 0x8814);
    memoryASet(ss, bp - 7, al);
    push(si);
    push(ds);
    ax = 0x05e8;
    push(ax);
    push(cs);
    sub_fad1(); // 0ee7:0c61
    sp += 0x0006;
    memoryASet(ss, bp - 1, al);
    if (memoryAGet(ss, bp - 1) != 0x00)
        goto loc_100d0;
    ax = 0x0001;
    goto loc_100e4;
loc_100d0: // 0ee7:1260
    if (memoryAGet(ss, bp - 1) != 0x01)
        goto loc_100da;
    memoryASet(ss, bp - 1, 0x00);
loc_100da: // 0ee7:126a
    goto loc_1009c;
loc_100dc: // 0ee7:126c
    al = memoryAGet(ds, 0x8814);
    memoryASet(ds, 0x91a2, al);
loc_100e2: // 0ee7:1272
    ax = 0;
loc_100e4: // 0ee7:1274
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_100e9() // 0ee7:1279
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    si = 0x0005;
    memoryASet(ss, bp - 5, 0x00);
    push(ds);
    ax = 0x08d8;
    push(ax);
    push(ds);
    ax = 0x0824;
    push(ax);
    push(ds);
    ax = 0x0770;
    push(ax);
    push(ds);
    ax = 0x06bc;
    push(ax);
    push(ds);
    ax = 0x0608;
    push(ax);
    push(cs);
    sub_eed0(); // 0ee7:0060
    sp += 0x0014;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet(ds, 0x8dde) == 0x00)
        goto loc_10137;
    al = memoryAGet(ds, 0x8dde);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_f925(); // 0ee7:0ab5
    sp++;
    sp++;
    if (!ax)
        goto loc_10137;
    goto loc_101f8;
loc_10137: // 0ee7:12c7
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    push(memoryAGet16(es, bx + 10));
    push(memoryAGet16(es, bx + 8));
    push(si);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(cs);
    sub_f5c9(); // 0ee7:0759
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
loc_1015e: // 0ee7:12ee
    bx = memoryAGet16(ss, bp - 10);
    es = memoryAGet16(ss, bp - 10 + 2);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 1);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 11, al);
    if (!al)
        goto loc_1017d;
    al = memoryAGet(ss, bp - 11);
    cbw();
    push(ax);
    push(cs);
    sub_f925(); // 0ee7:0ab5
    sp++;
    sp++;
    if (!ax)
        goto loc_1015e;
loc_1017d: // 0ee7:130d
    al = memoryAGet(ss, bp - 11);
    cbw();
    memoryASet16(ds, 0x8814, ax);
loc_10184: // 0ee7:1314
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_101f2;
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fa02(); // 0ee7:0b92
    sp += 0x0006;
    al = memoryAGet(ds, 0x8814);
    memoryASet(ss, bp - 11, al);
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fad1(); // 0ee7:0c61
    sp += 0x0006;
    memoryASet(ss, bp - 5, al);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_101bf;
    memoryASet(ds, 0x91a2, 0x00);
    ax = 0x0001;
    goto loc_101fa;
loc_101bf: // 0ee7:134f
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_101c9;
    memoryASet(ss, bp - 5, 0x00);
loc_101c9: // 0ee7:1359
    if (memoryAGet(ss, bp - 5) != 0x02)
        goto loc_10184;
    push(memoryAGet16(ds, 0x8814));
    push(cs);
    sub_f925(); // 0ee7:0ab5
    sp++;
    sp++;
    if (ax)
        goto loc_10184;
    push(cs);
    sub_fb39(); // 0ee7:0cc9
    if (ax)
        goto loc_10184;
    al = memoryAGet(ss, bp - 11);
    cbw();
    memoryASet16(ds, 0x8814, ax);
    memoryASet(ss, bp - 5, 0x00);
    goto loc_10184;
loc_101f2: // 0ee7:1382
    al = memoryAGet(ds, 0x8814);
    memoryASet(ds, 0x8dde, al);
loc_101f8: // 0ee7:1388
    ax = 0;
loc_101fa: // 0ee7:138a
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_101ff() // 0ee7:138f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    si = 0x0005;
    memoryASet(ss, bp - 5, 0x00);
    push(ds);
    ax = 0x08f8;
    push(ax);
    push(ds);
    ax = 0x0844;
    push(ax);
    push(ds);
    ax = 0x0790;
    push(ax);
    push(ds);
    ax = 0x06dc;
    push(ax);
    push(ds);
    ax = 0x0628;
    push(ax);
    push(cs);
    sub_eed0(); // 0ee7:0060
    sp += 0x0014;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet(ds, 0x8db5) == 0x00)
        goto loc_1024d;
    al = memoryAGet(ds, 0x8db5);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_f981(); // 0ee7:0b11
    sp++;
    sp++;
    if (!ax)
        goto loc_1024d;
    goto loc_1030e;
loc_1024d: // 0ee7:13dd
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    push(memoryAGet16(es, bx + 10));
    push(memoryAGet16(es, bx + 8));
    push(si);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(cs);
    sub_f5c9(); // 0ee7:0759
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
loc_10274: // 0ee7:1404
    bx = memoryAGet16(ss, bp - 10);
    es = memoryAGet16(ss, bp - 10 + 2);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 1);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 11, al);
    if (!al)
        goto loc_10293;
    al = memoryAGet(ss, bp - 11);
    cbw();
    push(ax);
    push(cs);
    sub_f981(); // 0ee7:0b11
    sp++;
    sp++;
    if (!ax)
        goto loc_10274;
loc_10293: // 0ee7:1423
    al = memoryAGet(ss, bp - 11);
    cbw();
    memoryASet16(ds, 0x8814, ax);
loc_1029a: // 0ee7:142a
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_10308;
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fa02(); // 0ee7:0b92
    sp += 0x0006;
    al = memoryAGet(ds, 0x8814);
    memoryASet(ss, bp - 11, al);
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fad1(); // 0ee7:0c61
    sp += 0x0006;
    memoryASet(ss, bp - 5, al);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_102d5;
    memoryASet(ds, 0x8dde, 0x00);
    ax = 0x0001;
    goto loc_10310;
loc_102d5: // 0ee7:1465
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_102df;
    memoryASet(ss, bp - 5, 0x00);
loc_102df: // 0ee7:146f
    if (memoryAGet(ss, bp - 5) != 0x02)
        goto loc_1029a;
    push(memoryAGet16(ds, 0x8814));
    push(cs);
    sub_f981(); // 0ee7:0b11
    sp++;
    sp++;
    if (ax)
        goto loc_1029a;
    push(cs);
    sub_fb39(); // 0ee7:0cc9
    if (ax)
        goto loc_1029a;
    al = memoryAGet(ss, bp - 11);
    cbw();
    memoryASet16(ds, 0x8814, ax);
    memoryASet(ss, bp - 5, 0x00);
    goto loc_1029a;
loc_10308: // 0ee7:1498
    al = memoryAGet(ds, 0x8814);
    memoryASet(ds, 0x8db5, al);
loc_1030e: // 0ee7:149e
    ax = 0;
loc_10310: // 0ee7:14a0
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10315() // 0ee7:14a5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    si = 0x0006;
    memoryASet(ss, bp - 5, 0x00);
    push(ds);
    ax = 0x0918;
    push(ax);
    push(ds);
    ax = 0x0864;
    push(ax);
    push(ds);
    ax = 0x07b0;
    push(ax);
    push(ds);
    ax = 0x06fc;
    push(ax);
    push(ds);
    ax = 0x0648;
    push(ax);
    push(cs);
    sub_eed0(); // 0ee7:0060
    sp += 0x0014;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    push(memoryAGet16(es, bx + 10));
    push(memoryAGet16(es, bx + 8));
    push(si);
    bx = ax;
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(cs);
    sub_f5c9(); // 0ee7:0759
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 11, al);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 1);
    al = memoryAGet(ss, bp - 11);
    cbw();
    memoryASet16(ds, 0x8814, ax);
loc_10382: // 0ee7:1512
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_103c9;
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fa02(); // 0ee7:0b92
    sp += 0x0006;
    al = memoryAGet(ds, 0x8814);
    memoryASet(ss, bp - 11, al);
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fad1(); // 0ee7:0c61
    sp += 0x0006;
    memoryASet(ss, bp - 5, al);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_103bd;
    memoryASet(ds, 0x8db5, 0x00);
    ax = 0x0001;
    goto loc_10419;
loc_103bd: // 0ee7:154d
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_10382;
    memoryASet(ss, bp - 5, 0x00);
    goto loc_10382;
loc_103c9: // 0ee7:1559
    if (memoryAGet16(ds, 0x8814) != 0x0041)
        goto loc_103d6;
    memoryASet16(ds, 0x8de0, 0x0210);
loc_103d6: // 0ee7:1566
    if (memoryAGet16(ds, 0x8814) != 0x0042)
        goto loc_103e3;
    memoryASet16(ds, 0x8de0, 0x0220);
loc_103e3: // 0ee7:1573
    if (memoryAGet16(ds, 0x8814) != 0x0043)
        goto loc_103f0;
    memoryASet16(ds, 0x8de0, 0x0230);
loc_103f0: // 0ee7:1580
    if (memoryAGet16(ds, 0x8814) != 0x0044)
        goto loc_103fd;
    memoryASet16(ds, 0x8de0, 0x0240);
loc_103fd: // 0ee7:158d
    if (memoryAGet16(ds, 0x8814) != 0x0045)
        goto loc_1040a;
    memoryASet16(ds, 0x8de0, 0x0250);
loc_1040a: // 0ee7:159a
    if (memoryAGet16(ds, 0x8814) != 0x0046)
        goto loc_10417;
    memoryASet16(ds, 0x8de0, 0x0260);
loc_10417: // 0ee7:15a7
    ax = 0;
loc_10419: // 0ee7:15a9
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1041e() // 0ee7:15ae
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    si = 0x0004;
    memoryASet(ss, bp - 5, 0x00);
    push(ds);
    ax = 0x093c;
    push(ax);
    push(ds);
    ax = 0x0888;
    push(ax);
    push(ds);
    ax = 0x07d4;
    push(ax);
    push(ds);
    ax = 0x0720;
    push(ax);
    push(ds);
    ax = 0x066c;
    push(ax);
    push(cs);
    sub_eed0(); // 0ee7:0060
    sp += 0x0014;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    push(memoryAGet16(es, bx + 10));
    push(memoryAGet16(es, bx + 8));
    push(si);
    bx = ax;
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(cs);
    sub_f5c9(); // 0ee7:0759
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 11, al);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 1);
    al = memoryAGet(ss, bp - 11);
    cbw();
    memoryASet16(ds, 0x8814, ax);
loc_1048b: // 0ee7:161b
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_104d2;
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fa02(); // 0ee7:0b92
    sp += 0x0006;
    al = memoryAGet(ds, 0x8814);
    memoryASet(ss, bp - 11, al);
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fad1(); // 0ee7:0c61
    sp += 0x0006;
    memoryASet(ss, bp - 5, al);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_104c6;
    memoryASet(ds, 0x8db5, 0x00);
    ax = 0x0001;
    goto loc_10504;
loc_104c6: // 0ee7:1656
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_1048b;
    memoryASet(ss, bp - 5, 0x00);
    goto loc_1048b;
loc_104d2: // 0ee7:1662
    if (memoryAGet16(ds, 0x8814) != 0x0041)
        goto loc_104de;
    memoryASet(ds, 0x8dbb, 0x02);
loc_104de: // 0ee7:166e
    if (memoryAGet16(ds, 0x8814) != 0x0042)
        goto loc_104ea;
    memoryASet(ds, 0x8dbb, 0x03);
loc_104ea: // 0ee7:167a
    if (memoryAGet16(ds, 0x8814) != 0x0043)
        goto loc_104f6;
    memoryASet(ds, 0x8dbb, 0x05);
loc_104f6: // 0ee7:1686
    if (memoryAGet16(ds, 0x8814) != 0x0044)
        goto loc_10502;
    memoryASet(ds, 0x8dbb, 0x07);
loc_10502: // 0ee7:1692
    ax = 0;
loc_10504: // 0ee7:1694
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10509() // 0ee7:1699
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    si = 0x0002;
    memoryASet(ss, bp - 5, 0x00);
    push(ds);
    ax = 0x0958;
    push(ax);
    push(ds);
    ax = 0x08a4;
    push(ax);
    push(ds);
    ax = 0x07f0;
    push(ax);
    push(ds);
    ax = 0x073c;
    push(ax);
    push(ds);
    ax = 0x0688;
    push(ax);
    push(cs);
    sub_eed0(); // 0ee7:0060
    sp += 0x0014;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet(ds, 0x8bda) == 0x00)
        goto loc_10557;
    al = memoryAGet(ds, 0x8bda);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_f9cd(); // 0ee7:0b5d
    sp++;
    sp++;
    if (!ax)
        goto loc_10557;
    goto loc_10618;
loc_10557: // 0ee7:16e7
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    push(memoryAGet16(es, bx + 10));
    push(memoryAGet16(es, bx + 8));
    push(si);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(cs);
    sub_f5c9(); // 0ee7:0759
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
loc_1057e: // 0ee7:170e
    bx = memoryAGet16(ss, bp - 10);
    es = memoryAGet16(ss, bp - 10 + 2);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 1);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 11, al);
    if (!al)
        goto loc_1059d;
    al = memoryAGet(ss, bp - 11);
    cbw();
    push(ax);
    push(cs);
    sub_f9cd(); // 0ee7:0b5d
    sp++;
    sp++;
    if (!ax)
        goto loc_1057e;
loc_1059d: // 0ee7:172d
    al = memoryAGet(ss, bp - 11);
    cbw();
    memoryASet16(ds, 0x8814, ax);
loc_105a4: // 0ee7:1734
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_10612;
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fa02(); // 0ee7:0b92
    sp += 0x0006;
    al = memoryAGet(ds, 0x8814);
    memoryASet(ss, bp - 11, al);
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_fad1(); // 0ee7:0c61
    sp += 0x0006;
    memoryASet(ss, bp - 5, al);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_105df;
    memoryASet(ds, 0x8db5, 0x00);
    ax = 0x0001;
    goto loc_1061a;
loc_105df: // 0ee7:176f
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_105e9;
    memoryASet(ss, bp - 5, 0x00);
loc_105e9: // 0ee7:1779
    if (memoryAGet(ss, bp - 5) != 0x02)
        goto loc_105a4;
    push(memoryAGet16(ds, 0x8814));
    push(cs);
    sub_f9cd(); // 0ee7:0b5d
    sp++;
    sp++;
    if (ax)
        goto loc_105a4;
    push(cs);
    sub_fb39(); // 0ee7:0cc9
    if (ax)
        goto loc_105a4;
    al = memoryAGet(ss, bp - 11);
    cbw();
    memoryASet16(ds, 0x8814, ax);
    memoryASet(ss, bp - 5, 0x00);
    goto loc_105a4;
loc_10612: // 0ee7:17a2
    al = memoryAGet(ds, 0x8814);
    memoryASet(ds, 0x8bda, al);
loc_10618: // 0ee7:17a8
    ax = 0;
loc_1061a: // 0ee7:17aa
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1061f() // 0ee7:17af
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_241e(); // 023f:002e
    assert(cs == 0x0ee7);
    memoryASet16(ds, 0x8de4, ax);
    push(cs);
    sub_f38a(); // 0ee7:051a
    ax = 1; // gabo fake joystick
    memoryASet(ds, 0x8812, 0x00);
    if (memoryAGet(ds, 0x881b) != 0x00)
        goto loc_10654;
    if (memoryAGet(ds, 0x8819) != 0x00)
        goto loc_10654;
    if (memoryAGet(ds, 0x8811) != 0x00)
        goto loc_10654;
    if (memoryAGet(ds, 0x881a) != 0x00)
        goto loc_10654;
    if (memoryAGet(ds, 0x8810) == 0x00)
        goto loc_1065b;
loc_10654: // 0ee7:17e4
    memoryASet(ds, 0x8812, 0x02);
    goto loc_10667;
loc_1065b: // 0ee7:17eb
    if (memoryAGet(ds, 0x881d) == 0x00)
        goto loc_10667;
    memoryASet(ds, 0x8812, 0x01);
loc_10667: // 0ee7:17f7
    if (memoryAGet(ds, 0x8812) != 0x00)
        goto loc_10687;
    push(memoryAGet16(ds, 0x8de4));
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    push(cs);
    sub_f223(); // 0ee7:03b3
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x0ee7);
    sp++;
    sp++;
loc_10687: // 0ee7:1817
    memoryASet(ds, 0x8812, memoryAGet(ds, 0x8812) - 1);
    if (memoryAGet(ds, 0x8812) != 0x00)
        goto loc_106a4;
    ax = 0x0007;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    push(cs);
    cs = 0x023f;
    sub_23fc(); // 023f:000c
    assert(cs == 0x0ee7);
    goto loc_106af;
loc_106a4: // 0ee7:1834
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x0ee7);
    sp++;
    sp++;
loc_106af: // 0ee7:183f
    push(cs);
    sub_efc8(); // 0ee7:0158
    memoryASet(ds, 0x91ac, 0x00);
    push(cs);
    sub_f54d(); // 0ee7:06dd
loc_106bc: // 0ee7:184c
    push(cs);
    sub_10052(); // 0ee7:11e2
    if (!ax)
        goto loc_106fe;
    push(cs);
    sub_f014(); // 0ee7:01a4
    push(memoryAGet16(ds, 0x8de4));
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x92c4) == 0x0000)
        goto loc_106f4;
    if (memoryAGet16(ds, 0x8a2a) != 0x0000)
        goto loc_106f4;
loc_106e1: // 0ee7:1871
    dx = memoryAGet16(ds, 0x8f7c);
    dx++;
    in(al, dx);
    if (al & 0x40)
        goto loc_106e1;
    dx = memoryAGet16(ds, 0x8f7c);
    dx++;
    al = 0xff;
    out(dx, al);
loc_106f4: // 0ee7:1884
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x0ee7);
    sp++;
    sp++;
loc_106fe: // 0ee7:188e
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_10708;
    goto loc_10778;
loc_10708: // 0ee7:1898
    push(cs);
    sub_100e9(); // 0ee7:1279
    if (ax)
        goto loc_106bc;
loc_10710: // 0ee7:18a0
    push(cs);
    sub_101ff(); // 0ee7:138f
    if (ax)
        goto loc_10708;
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_1076d;
    if (memoryAGet(ds, 0x92c6) != 0x00)
        goto loc_10732;
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_fe01(); // 0ee7:0f91
    sp++;
    sp++;
    goto loc_10710;
loc_10732: // 0ee7:18c2
    if (memoryAGet16(ds, 0x8de0) == 0x0000)
        goto loc_10740;
    if (memoryAGet(ds, 0x8dbb) != 0x00)
        goto loc_10750;
loc_10740: // 0ee7:18d0
    push(cs);
    sub_10315(); // 0ee7:14a5
    if (ax)
        goto loc_10710;
    push(cs);
    sub_1041e(); // 0ee7:15ae
    if (ax)
        goto loc_10710;
loc_10750: // 0ee7:18e0
    push(cs);
    sub_f23f(); // 0ee7:03cf
    if (!ax)
        goto loc_1076d;
    ax = 0;
    push(ax);
    push(cs);
    sub_fe01(); // 0ee7:0f91
    sp++;
    sp++;
    al = 0x00;
    memoryASet(ds, 0x8dbb, al);
    ah = 0x00;
    memoryASet16(ds, 0x8de0, ax);
    goto loc_10710;
loc_1076d: // 0ee7:18fd
    push(cs);
    sub_10509(); // 0ee7:1699
    if (ax)
        goto loc_10710;
    goto loc_10821;
loc_10778: // 0ee7:1908
    bx = memoryAGet16(ds, 0x0610);
    es = memoryAGet16(ds, 0x0610 + 2);
    memoryASet16(ds, 0x0632, es);
    memoryASet16(ds, 0x0630, bx);
    bx = memoryAGet16(ds, 0x06c4);
    es = memoryAGet16(ds, 0x06c4 + 2);
    memoryASet16(ds, 0x06e6, es);
    memoryASet16(ds, 0x06e4, bx);
    bx = memoryAGet16(ds, 0x0778);
    es = memoryAGet16(ds, 0x0778 + 2);
    memoryASet16(ds, 0x07fa, es);
    memoryASet16(ds, 0x07f8, bx);
    bx = memoryAGet16(ds, 0x082c);
    es = memoryAGet16(ds, 0x082c + 2);
    memoryASet16(ds, 0x08ae, es);
    memoryASet16(ds, 0x08ac, bx);
    bx = memoryAGet16(ds, 0x08e0);
    es = memoryAGet16(ds, 0x08e0 + 2);
    memoryASet16(ds, 0x0962, es);
    memoryASet16(ds, 0x0960, bx);
loc_107b4: // 0ee7:1944
    push(cs);
    sub_101ff(); // 0ee7:138f
    if (!ax)
        goto loc_107bf;
    goto loc_106bc;
loc_107bf: // 0ee7:194f
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_10814;
    if (memoryAGet(ds, 0x92c6) != 0x00)
        goto loc_107d9;
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_fe01(); // 0ee7:0f91
    sp++;
    sp++;
    goto loc_107b4;
loc_107d9: // 0ee7:1969
    if (memoryAGet16(ds, 0x8de0) == 0x0000)
        goto loc_107e7;
    if (memoryAGet(ds, 0x8dbb) != 0x00)
        goto loc_107f7;
loc_107e7: // 0ee7:1977
    push(cs);
    sub_10315(); // 0ee7:14a5
    if (ax)
        goto loc_107b4;
    push(cs);
    sub_1041e(); // 0ee7:15ae
    if (ax)
        goto loc_107b4;
loc_107f7: // 0ee7:1987
    push(cs);
    sub_f23f(); // 0ee7:03cf
    if (!ax)
        goto loc_10814;
    ax = 0;
    push(ax);
    push(cs);
    sub_fe01(); // 0ee7:0f91
    sp++;
    sp++;
    al = 0x00;
    memoryASet(ds, 0x8dbb, al);
    ah = 0x00;
    memoryASet16(ds, 0x8de0, ax);
    goto loc_107b4;
loc_10814: // 0ee7:19a4
    push(cs);
    sub_10509(); // 0ee7:1699
    if (ax)
        goto loc_107b4;
    memoryASet(ds, 0x8dde, 0x56);
loc_10821: // 0ee7:19b1
    push(cs);
    sub_f46d(); // 0ee7:05fd
    si = 0;
    if (memoryAGet(ds, 0x919c) != 0x00)
        goto loc_10842;
    push(cs);
    cs = 0x1e93;
    sub_1e958(); // 1e93:0028
    assert(cs == 0x0ee7);
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_6f42(); // 06c1:0332
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    if (!al)
        goto loc_10842;
    si = 0xffff;
loc_10842: // 0ee7:19d2
    if (si)
        goto loc_1085d;
    ax = 0x0180;
    push(ax);
    ax = 0x8302;
    push(ax);
    push(ds);
    ax = 0x1aa5;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x0ee7);
    sp += 0x0008;
    si = ax;
loc_1085d: // 0ee7:19ed
    if (si == 0xffff)
        goto loc_108d6;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x91a2;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f6b;
    sub_1f6b7(); // 1f6b:0007
    assert(cs == 0x0ee7);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x8dde;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f6b;
    sub_1f6b7(); // 1f6b:0007
    assert(cs == 0x0ee7);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x8db5;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f6b;
    sub_1f6b7(); // 1f6b:0007
    assert(cs == 0x0ee7);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x8bda;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f6b;
    sub_1f6b7(); // 1f6b:0007
    assert(cs == 0x0ee7);
    sp += 0x0008;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8de0;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f6b;
    sub_1f6b7(); // 1f6b:0007
    assert(cs == 0x0ee7);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x8dbb;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f6b;
    sub_1f6b7(); // 1f6b:0007
    assert(cs == 0x0ee7);
    sp += 0x0008;
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x0ee7);
    sp++;
    sp++;
loc_108d6: // 0ee7:1a66
    push(cs);
    sub_f014(); // 0ee7:01a4
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10a05() // 0ee7:1b95
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0036;
    push(ss);
    ax = bp - 0x34;
    push(ax);
    push(ds);
    ax = 0x09ce;
    push(ax);
    cx = 0x0014;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x0ee7);
    memoryASet16(ss, bp - 30, 0x0040);
    memoryASet16(ss, bp - 32, 0x0049);
    si = 0xffff;
    memoryASet16(ss, bp - 26, 0xb000);
    memoryASet16(ss, bp - 28, 0x0000);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(ds);
    ax = 0x09e2;
    push(ax);
    cx = 0x0018;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x0ee7);
    al = 0x03;
    dx = 0x03bf;
    out(dx, al);
    al = 0x00;
    dx = 0x03b8;
    out(dx, al);
    memoryASet(ss, bp - 53, 0x00);
    goto loc_10a78;
loc_10a59: // 0ee7:1be9
    al = memoryAGet(ss, bp - 53);
    dx = 0x03b4;
    out(dx, al);
    al = memoryAGet(ss, bp - 53);
    ah = 0x00;
    bx = ax;
    bx <<= 1;
    ax = bp - 0x18;
    bx += ax;
    al = memoryAGet(ss, bx);
    dx = 0x03b5;
    out(dx, al);
    memoryASet(ss, bp - 53, memoryAGet(ss, bp - 53) + 1);
loc_10a78: // 0ee7:1c08
    if (memoryAGet(ss, bp - 53) < 0x0c)
        goto loc_10a59;
loc_10a7e: // 0ee7:1c0e
    ax = si;
    si--;
    if (!ax)
        goto loc_10a93;
    bx = memoryAGet16(ss, bp - 28);
    es = memoryAGet16(ss, bp - 28 + 2);
    memoryASet16(es, bx, 0x0000);
    memoryASet16(ss, bp - 28, memoryAGet16(ss, bp - 28) + 0x0002);
    goto loc_10a7e;
loc_10a93: // 0ee7:1c23
    al = 0x0a;
    dx = 0x03b8;
    out(dx, al);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10a9e() // 0ee7:1c2e
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(memoryAGet16(ds, 0x8d74));
    push(cs);
    cs = 0x0cb4;
    sub_cba0(); // 0cb4:0060
    assert(cs == 0x0ee7);
    sp++;
    sp++;
    push(cs);
    cs = 0x0cb4;
    sub_cbee(); // 0cb4:00ae
    assert(cs == 0x0ee7);
    memoryASet16(ds, 0x8dc0, ax);
    push(cs);
    cs = 0x0cb4;
    sub_cbf3(); // 0cb4:00b3
    assert(cs == 0x0ee7);
    memoryASet16(ds, 0x8b9a, ax);
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10aba() // 0ee7:1c4a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    al = 0x00;
    memoryASet(ds, 0x8b95, al);
    memoryASet(ds, 0x8ba8, al);
    memoryASet(ds, 0x8b94, al);
    memoryASet(ds, 0x8d9e, al);
    memoryASet(ds, 0x92b5, al);
    memoryASet(ds, 0x92b6, al);
    memoryASet(ds, 0x8db4, al);
    memoryASet(ds, 0x8da6, al);
    memoryASet(ds, 0x8baf, al);
    al = 0x00;
    memoryASet(ds, 0x8da7, al);
    memoryASet(ds, 0x8b6a, al);
    al = 0x00;
    memoryASet(ds, 0x8f66, al);
    memoryASet(ds, 0x919c, al);
    push(cs);
    cs = 0x1e93;
    sub_1e958(); // 1e93:0028
    assert(cs == 0x0ee7);
    if ((short)ax <= (short)0x0001)
        goto loc_10afd;
    memoryASet(ds, 0x919c, 0x01);
loc_10afd: // 0ee7:1c8d
    memoryASet(ds, 0x92b7, 0x00);
    push(cs);
    sub_f1af(); // 0ee7:033f
    if (!ax)
        goto loc_10b0f;
    memoryASet(ds, 0x92b7, 0x01);
loc_10b0f: // 0ee7:1c9f
    memoryASet(ds, 0x8db3, 0x00);
    if (memoryAGet(ds, 0x92b7) != 0x00)
        goto loc_10b28;
    push(cs);
    sub_f1e6(); // 0ee7:0376
    if (!ax)
        goto loc_10b28;
    memoryASet(ds, 0x8db3, 0x01);
loc_10b28: // 0ee7:1cb8
    push(cs);
    cs = 0x1e92;
    sub_1e924(); // 1e92:0004
    assert(cs == 0x0ee7);
    si = ax;
    ax = si;
    cx = 0x000e;
    ax = sar(ax, cl);
    memoryASet(ds, 0x8e38, al);
    ax = si;
    ax &= 0x2000;
    cx = 0x000d;
    ax = sar(ax, cl);
    memoryASet(ds, 0x8dc6, al);
    ax = si;
    ax &= 0x0e00;
    cx = 0x0009;
    ax = sar(ax, cl);
    memoryASet(ds, 0x8bd2, al);
    ax = si;
    ax &= 0x0100;
    cx = 0x0008;
    ax = sar(ax, cl);
    memoryASet(ds, 0x8b99, al);
    if (!(si & 0x0001))
        goto loc_10b77;
    ax = si;
    ax &= 0x00c0;
    cx = 0x0006;
    ax = sar(ax, cl);
    al++;
    memoryASet(ds, 0x92b4, al);
    goto loc_10b7c;
loc_10b77: // 0ee7:1d07
    memoryASet(ds, 0x92b4, 0x00);
loc_10b7c: // 0ee7:1d0c
    if (!(si & 0x0002))
        goto loc_10b89;
    memoryASet(ds, 0x8c5a, 0x01);
    goto loc_10b8e;
loc_10b89: // 0ee7:1d19
    memoryASet(ds, 0x8c5a, 0x00);
loc_10b8e: // 0ee7:1d1e
    memoryASet(ds, 0x92c2, 0x08);
    memoryASet16(ds, 0x8d60, 0x00a0);
    memoryASet16(ds, 0x8db8, 0x0064);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10baa() // 10ba:000a
{
    CStackGuardFar sg(0, false);
    if (memoryAGet(ds, 0x1ab8) != 0x00)
        goto loc_10bc0;
    push(cs);
    cs = 0x1e7a;
    sub_1e7fc(); // 1e7a:005c
    assert(cs == 0x10ba);
    memoryASet(ds, 0x1ab8, 0x01);
    memoryASet(ds, 0x8876, 0x00);
loc_10bc0: // 10ba:0020
    cs = pop();
}
void sub_10bc1() // 10ba:0021
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x1ab8) != 0x00)
        goto loc_10bcf;
    ax = 0;
    goto loc_10bf9;
loc_10bcf: // 10ba:002f
    memoryASet(ds, 0x8876, 0x00);
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet16(ds, 0x88be, es);
    memoryASet16(ds, 0x88bc, bx);
    memoryASet(ds, 0x1ab9, 0x00);
    push(memoryAGet16(ss, bp + 8));
    push(bx);
    push(cs);
    cs = 0x10ba;
    sub_10d7f(); // 10ba:01df
    assert(cs == 0x10ba);
    sp = bp;
    push(cs);
    cs = 0x10ba;
    sub_10e28(); // 10ba:0288
    assert(cs == 0x10ba);
    sp = bp;
    ax = 0x0001;
loc_10bf9: // 10ba:0059
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10bfb() // 10ba:005b
{
    CStackGuardFar sg(0, false);
    if (memoryAGet(ds, 0x1ab8) == 0x00)
        goto loc_10c07;
    push(cs);
    cs = 0x1e7a;
    sub_1e844(); // 1e7a:00a4
    assert(cs == 0x10ba);
loc_10c07: // 10ba:0067
    memoryASet(ds, 0x1ab8, 0x00);
    cs = pop();
}
void sub_10c0d() // 10ba:006d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    al = memoryAGet(es, bx);
    ah = 0x00;
    si = ax;
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    ax = si;
    cx = 0x0008;
    ax <<= cl;
    bx = memoryAGet16(ss, bp + 8);
    dl = memoryAGet(es, bx);
    dh = 0x00;
    ax += dx;
    si = ax;
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    ax = si;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10c39() // 10ba:0099
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0000);
    si = 0;
    goto loc_10c79;
loc_10c4e: // 10ba:00ae
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0008;
    push(cs);
    cs = 0x01ed;
    sub_20cf(); // 01ed:01ff
    assert(cs == 0x10ba);
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    bl = memoryAGet(es, bx);
    bh = 0x00;
    push(dx);
    push(ax);
    ax = bx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    bx = pop();
    cx = pop();
    flags.carry = (bx + ax) >= 0x10000;
    bx += ax;
    cx += dx + flags.carry;
    memoryASet16(ss, bp - 2, cx);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    si++;
loc_10c79: // 10ba:00d9
    if ((short)si < (short)0x0004)
        goto loc_10c4e;
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10c89() // 10ba:00e9
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    di = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8834);
    si = 0;
    goto loc_10ce3;
loc_10ca0: // 10ba:0100
    dx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 12);
    ax += 0x0004;
    push(dx);
    push(ax);
    push(cs);
    sub_10c39(); // 10ba:0099
    sp += 0x0004;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    dx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 12);
    ax += 0x0008;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    push(dx);
    push(ax);
    push(bx);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    ax = pop();
    bx += ax;
    ax = pop();
    dx = pop();
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x0008;
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) + ax);
    si++;
loc_10ce3: // 10ba:0143
    if ((short)si < (short)di)
        goto loc_10ca0;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10ced() // 10ba:014d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x000a;
    bx = memoryAGet16(ds, 0x8820);
    es = memoryAGet16(ds, 0x8820 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    al = memoryAGet(es, bx);
    ah = 0;
    dx = 0;
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    ax &= 0x0080;
    dx &= 0x0000;
    dx |= ax;
    if (!dx)
        goto loc_10d64;
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    ax &= 0x007f;
    dx &= 0x0000;
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
loc_10d2e: // 10ba:018e
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0007;
    push(cs);
    cs = 0x01ed;
    sub_20cf(); // 01ed:01ff
    assert(cs == 0x10ba);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    bl = memoryAGet(es, bx);
    memoryASet(ss, bp - 5, bl);
    bh = 0x00;
    push(dx);
    push(ax);
    ax = bx;
    ax &= 0x007f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    bx = pop();
    cx = pop();
    flags.carry = (bx + ax) >= 0x10000;
    bx += ax;
    cx += dx + flags.carry;
    memoryASet16(ss, bp - 8, cx);
    memoryASet16(ss, bp - 10, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    if (memoryAGet(ss, bp - 5) & 0x80)
        goto loc_10d2e;
loc_10d64: // 10ba:01c4
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    bx = memoryAGet16(ds, 0x8820);
    es = memoryAGet16(ds, 0x8820 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10d7f() // 10ba:01df
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    dx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0004;
    push(dx);
    push(ax);
    push(cs);
    sub_10c39(); // 10ba:0099
    sp += 0x0004;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    dx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000a;
    push(dx);
    push(ax);
    push(cs);
    sub_10c0d(); // 10ba:006d
    sp += 0x0004;
    memoryASet16(ds, 0x1ab2, ax);
    dx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    push(dx);
    push(ax);
    push(cs);
    sub_10c0d(); // 10ba:006d
    sp += 0x0004;
    memoryASet16(ds, 0x8874, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0008;
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x1ab2));
    push(cs);
    sub_10c89(); // 10ba:00e9
    sp += 0x0006;
    si = 0;
    goto loc_10e1d;
loc_10de6: // 10ba:0246
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx += 0x8834;
    ax = ds;
    es = ax;
    memoryASet16(ds, 0x8822, es);
    memoryASet16(ds, 0x8820, bx);
    push(cs);
    sub_10ced(); // 10ba:014d
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 34938, dx);
    memoryASet16(ds, bx + 34936, ax);
    bx = memoryAGet16(ds, 0x8820);
    es = memoryAGet16(ds, 0x8820 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    al = memoryAGet(es, bx);
    memoryASet(ds, si + 34852, al);
    si++;
loc_10e1d: // 10ba:027d
    if ((short)si < (short)memoryAGet16(ds, 0x1ab2))
        goto loc_10de6;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10e28() // 10ba:0288
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    memoryASet16(ds, 0x1abc, 0x0000);
    memoryASet16(ds, 0x1aba, 0x0000);
    memoryASet16(ds, 0x1abe, 0x0000);
    memoryASet16(ds, 0x8822, ds);
    memoryASet16(ds, 0x8820, 0x8834);
    memoryASet16(ds, 0x88ba, ds);
    memoryASet16(ds, 0x88b8, 0x8824);
    memoryASet(ds, 0x88d8, 0x00);
    memoryASet(ds, 0x8876, 0x01);
    dx = 0x0007;
    ax = 0xa120;
    push(dx);
    push(ax);
    ax = 0x01e0;
    push(ax);
    push(cs);
    cs = 0x10ba;
    sub_10e8e(); // 10ba:02ee
    assert(cs == 0x10ba);
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1e7a;
    sub_1e859(); // 1e7a:00b9
    assert(cs == 0x10ba);
    sp++;
    sp++;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10e78() // 10ba:02d8
{
    CStackGuardFar sg(0, false);
    memoryASet(ds, 0x8876, 0x00);
    push(cs);
    cs = 0x10ba;
    sub_10e83(); // 10ba:02e3
    assert(cs == 0x10ba);
    cs = pop();
}
void sub_10e83() // 10ba:02e3
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1e7a;
    sub_1e7d8(); // 1e7a:0038
    assert(cs == 0x10ba);
    sp++;
    sp++;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10e8e() // 10ba:02ee
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    if (memoryAGet16(ss, bp + 6) != 0x0000)
        goto loc_10ea6;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_10ee2;
loc_10ea6: // 10ba:0306
    dx = 0;
    ax = 0x03e8;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    cs = 0x01ed;
    sub_2050(); // 01ed:0180
    assert(cs == 0x10ba);
    memoryASet16(ss, bp + 10, dx);
    memoryASet16(ss, bp + 8, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0;
    push(dx);
    push(ax);
    dx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 8);
    cx = 0;
    bx = 0x04aa;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x10ba);
    push(dx);
    push(ax);
    push(cs);
    cs = 0x01ed;
    sub_2050(); // 01ed:0180
    assert(cs == 0x10ba);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
loc_10ee2: // 10ba:0342
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1e7a;
    sub_1e7d8(); // 1e7a:0038
    assert(cs == 0x10ba);
    sp++;
    sp++;
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_10ffa() // 10ba:045a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 14);
    si = memoryAGet16(ss, bp + 10);
    if (memoryAGet16(ds, 0x1ab6) == 0x0000)
        goto loc_1102e;
    if (memoryAGet(ds, 0x8db5) != 0x41)
        goto loc_11018;
    if (si == 0x0003)
        goto loc_11022;
loc_11018: // 10ba:0478
    if ((short)di <= (short)memoryAGet16(ds, 0x88d6))
        goto loc_11022;
    di = memoryAGet16(ds, 0x88d6);
loc_11022: // 10ba:0482
    if (di)
        goto loc_11038;
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_1205c(); // 11cd:038c
    assert(cs == 0x10ba);
    sp = bp;
loc_1102e: // 10ba:048e
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 35008, di);
    goto loc_11060;
loc_11038: // 10ba:0498
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 35008);
    if (ax == di)
        goto loc_11055;
    push(di);
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_11f04(); // 11cd:0234
    assert(cs == 0x10ba);
    sp = bp;
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 35008, di);
loc_11055: // 10ba:04b5
    push(memoryAGet16(ss, bp + 12));
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_11fba(); // 11cd:02ea
    assert(cs == 0x10ba);
    sp = bp;
loc_11060: // 10ba:04c0
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11620() // 1162:0000
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10);
    if (di == memoryAGet16(ds, 0x1ab6))
        goto loc_1166b;
    if (di)
        goto loc_11651;
    si = 0;
    goto loc_1164a;
loc_11636: // 1162:0016
    ax = 0;
    push(ax);
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_11f04(); // 11cd:0234
    assert(cs == 0x1162);
    sp = bp;
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_1205c(); // 11cd:038c
    assert(cs == 0x1162);
    sp = bp;
    si++;
loc_1164a: // 1162:002a
    if ((short)si < (short)0x000b)
        goto loc_11636;
    goto loc_1166b;
loc_11651: // 1162:0031
    si = 0;
    goto loc_11666;
loc_11655: // 1162:0035
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 35008));
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_11f04(); // 11cd:0234
    assert(cs == 0x1162);
    sp = bp;
    si++;
loc_11666: // 1162:0046
    if ((short)si < (short)0x000b)
        goto loc_11655;
loc_1166b: // 1162:004b
    memoryASet16(ds, 0x1ab6, di);
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11673() // 1162:0053
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    si = 0;
    goto loc_116aa;
loc_11678: // 1162:0058
    push(memoryAGet16(ds, 0x8f7c));
    ax = si;
    ax += 0x00b0;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1162);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8f7c));
    ax = 0x007b;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1162);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8f7c));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1162);
    sp += 0x0004;
    si++;
loc_116aa: // 1162:008a
    if (si < 0x0010)
        goto loc_11678;
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_116b1() // 1162:0091
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x8db5) == 0x4e)
        goto loc_11703;
    if (memoryAGet(ds, 0x8db5) == 0x41)
        goto loc_116c6;
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_116cf;
loc_116c6: // 1162:00a6
    ax = 0;
    push(ax);
    push(cs);
    sub_11620(); // 1162:0000
    sp++;
    sp++;
loc_116cf: // 1162:00af
    push(cs);
    cs = 0x10ba;
    sub_10e78(); // 10ba:02d8
    assert(cs == 0x1162);
    if (memoryAGet(ds, 0x8db5) == 0x41)
        goto loc_116e2;
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_116ec;
loc_116e2: // 1162:00c2
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11620(); // 1162:0000
    sp++;
    sp++;
loc_116ec: // 1162:00cc
    if (memoryAGet(ds, 0x8db5) != 0x52)
        goto loc_116f7;
    push(cs);
    sub_11673(); // 1162:0053
loc_116f7: // 1162:00d7
    if (memoryAGet(ds, 0x8db5) != 0x49)
        goto loc_11703;
    push(cs);
    cs = 0x1f5c;
    sub_1f5f5(); // 1f5c:0035
    assert(cs == 0x1162);
loc_11703: // 1162:00e3
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11704() // 1162:00e4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    di = memoryAGet16(ds, 0x88d6);
    if (memoryAGet(ds, 0x8db5) == 0x4e)
        goto loc_1173e;
    if (memoryAGet(ds, 0x8db5) == 0x4e)
        goto loc_1173a;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1173a;
    si = di;
    goto loc_11735;
loc_11723: // 1162:0103
    memoryASet16(ds, 0x88d6, si);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9cf(); // 0a34:168f
    assert(cs == 0x1162);
    sp++;
    sp++;
    si -= 0x0004;
loc_11735: // 1162:0115
    if ((short)si >= (short)0x0004)
        goto loc_11723;
loc_1173a: // 1162:011a
    push(cs);
    sub_116b1(); // 1162:0091
loc_1173e: // 1162:011e
    memoryASet16(ds, 0x88d6, di);
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11745() // 1162:0125
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(memoryAGet16(ds, 0x8f7c));
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x00c0;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1162);
    sp = bp;
    push(memoryAGet16(ds, 0x8f7c));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1162);
    sp = bp;
    push(memoryAGet16(ds, 0x8f7c));
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x00b0;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1162);
    sp = bp;
    push(memoryAGet16(ds, 0x8f7c));
    ax = 0x0007;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1162);
    sp = bp;
    push(memoryAGet16(ds, 0x8f7c));
    ax = 0x007f;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1162);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1179a() // 1162:017a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 36670);
    ax |= memoryAGet16(ds, bx + 36672);
    if (!ax)
        goto loc_117c6;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 36672));
    push(memoryAGet16(ds, bx + 36670));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x1162);
    sp = bp;
loc_117c6: // 1162:01a6
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 36672, 0x0000);
    memoryASet16(ds, bx + 36670, 0x0000);
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_117db() // 1162:01bb
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x8db5) == 0x41)
        goto loc_117ff;
    if (memoryAGet(ds, 0x8db5) == 0x53)
        goto loc_117ff;
    if (memoryAGet(ds, 0x8db5) == 0x52)
        goto loc_117ff;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_117ff;
    goto loc_11cc1;
loc_117ff: // 1162:01df
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 36670);
    ax |= memoryAGet16(ds, bx + 36672);
    if (ax)
        goto loc_11813;
    goto loc_11ccc;
loc_11813: // 1162:01f3
    if (memoryAGet(ds, 0x8876) == 0x00)
        goto loc_11820;
    push(cs);
    sub_11704(); // 1162:00e4
    sp = bp;
loc_11820: // 1162:0200
    ax = 0x000a;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9cf(); // 0a34:168f
    assert(cs == 0x1162);
    sp = bp;
    si = 0;
    goto loc_1183a;
loc_1182f: // 1162:020f
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 35008, 0x0000);
    si++;
loc_1183a: // 1162:021a
    if ((short)si < (short)0x000b)
        goto loc_1182f;
    if (memoryAGet(ds, 0x8db5) == 0x53)
        goto loc_1184d;
    if (memoryAGet(ds, 0x8db5) != 0x41)
        goto loc_11858;
loc_1184d: // 1162:022d
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11d74(); // 11cd:00a4
    assert(cs == 0x1162);
    sp = bp;
loc_11858: // 1162:0238
    if (memoryAGet(ds, 0x8db5) == 0x52)
        goto loc_11862;
    goto loc_11cab;
loc_11862: // 1162:0242
    di = 0;
    goto loc_1186c;
loc_11866: // 1162:0246
    memoryASet(ds, di + 6848, 0x80);
    di++;
loc_1186c: // 1162:024c
    if (di < 0x0010)
        goto loc_11866;
    al = 0x09;
    memoryASet(ds, 0x1ada, al);
    memoryASet(ds, 0x1ad9, al);
    memoryASet(ds, 0x1ad8, al);
    memoryASet(ds, 0x1ad7, al);
    memoryASet(ds, 0x1ad6, al);
    al = 0x09;
    memoryASet(ds, 0x1adf, al);
    memoryASet(ds, 0x1ade, al);
    memoryASet(ds, 0x1add, al);
    memoryASet(ds, 0x1adc, al);
    memoryASet(ds, 0x1adb, al);
    memoryASet(ds, 0x1ae0, 0x01);
    ax = memoryAGet16(ss, bp + 12);
    if (ax <= 0x0008)
        goto loc_118a3;
    goto loc_11cab;
loc_118a3: // 1162:0283
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_118be;
        case 2: goto loc_11925;
        case 4: goto loc_1199a;
        case 6: goto loc_11a0f;
        case 8: goto loc_11a84;
        case 10: goto loc_11adc;
        case 12: goto loc_11b43;
        case 14: goto loc_11bb8;
        case 16: goto loc_11c2c;
        default:
        assert(0);
    }
    //   gap of 18 bytes
loc_118be: // 1162:029e
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x05);
    memoryASet(ds, 0x1ad5, 0x05);
    ax = 0x000e;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0022;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0020;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0038;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x004d;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    goto loc_11c9e;
loc_11925: // 1162:0305
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x05);
    memoryASet(ds, 0x1ad5, 0x06);
    ax = 0x0045;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x001a;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x002c;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x001e;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0018;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x003f;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    goto loc_11c9e;
loc_1199a: // 1162:037a
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x05);
    memoryASet(ds, 0x1ad5, 0x06);
    ax = 0x001c;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0062;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x002c;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x001e;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0075;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0025;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    goto loc_11c9e;
loc_11a0f: // 1162:03ef
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x05);
    memoryASet(ds, 0x1ad5, 0x06);
    ax = 0x0042;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x005c;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0027;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x001e;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0068;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x002b;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    goto loc_11c9e;
loc_11a84: // 1162:0464
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x04);
    memoryASet(ds, 0x1ad5, 0x04);
    ax = 0x001e;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x007a;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x005f;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    goto loc_11c9e;
loc_11adc: // 1162:04bc
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x05);
    memoryASet(ds, 0x1ad5, 0x02);
    ax = 0x001e;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x004e;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x000f;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0027;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0057;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    goto loc_11c9e;
loc_11b43: // 1162:0523
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x05);
    memoryASet(ds, 0x1ad5, 0x06);
    ax = 0x003f;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0062;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x002c;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0007;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x002b;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0071;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    goto loc_11c9e;
loc_11bb8: // 1162:0598
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x05);
    memoryASet(ds, 0x1ad5, 0x06);
    ax = 0x0008;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0062;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x002c;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x001e;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x002b;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0019;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    goto loc_11c9e;
loc_11c2c: // 1162:060c
    memoryASet(ds, 0x1ad0, 0x01);
    memoryASet(ds, 0x1ad1, 0x02);
    memoryASet(ds, 0x1ad2, 0x03);
    memoryASet(ds, 0x1ad3, 0x04);
    memoryASet(ds, 0x1ad4, 0x05);
    memoryASet(ds, 0x1ad5, 0x06);
    ax = 0x001e;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0061;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x002b;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0044;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0062;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
    ax = 0x0033;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
loc_11c9e: // 1162:067e
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    push(cs);
    sub_11745(); // 1162:0125
    sp = bp;
loc_11cab: // 1162:068b
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 36672));
    push(memoryAGet16(ds, bx + 36670));
    push(cs);
    cs = 0x10ba;
    sub_10bc1(); // 10ba:0021
    assert(cs == 0x1162);
    sp = bp;
loc_11cc1: // 1162:06a1
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9cf(); // 0a34:168f
    assert(cs == 0x1162);
    sp = bp;
loc_11ccc: // 1162:06ac
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11cd0() // 11cd:0000
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0x8a08, ax);
    push(cs);
    cs = 0x11cd;
    sub_125ea(); // 11cd:091a
    assert(cs == 0x11cd);
    sp = bp;
    si = ax;
    push(cs);
    cs = 0x11cd;
    sub_11cef(); // 11cd:001f
    assert(cs == 0x11cd);
    sp = bp;
    ax = si;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11cef() // 11cd:001f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    si = 0x0001;
    goto loc_11d02;
loc_11cf5: // 11cd:0025
    ax = 0;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    si++;
loc_11d02: // 11cd:0032
    if ((short)si <= (short)0x00f5)
        goto loc_11cf5;
    ax = 0x0006;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    si = 0;
    goto loc_11d31;
loc_11d1c: // 11cd:004c
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 35304, 0x2000);
    memoryASet(ds, si + 35340, 0x00);
    memoryASet(ds, si + 35326, 0x00);
    si++;
loc_11d31: // 11cd:0061
    if ((short)si < (short)0x0009)
        goto loc_11d1c;
    si = 0;
    goto loc_11d40;
loc_11d3a: // 11cd:006a
    memoryASet(ds, si + 35290, 0x7f);
    si++;
loc_11d40: // 11cd:0070
    if ((short)si < (short)0x000b)
        goto loc_11d3a;
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11d74(); // 11cd:00a4
    assert(cs == 0x11cd);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(ax);
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11e36(); // 11cd:0166
    assert(cs == 0x11cd);
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11e18(); // 11cd:0148
    assert(cs == 0x11cd);
    sp++;
    sp++;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11dd5(); // 11cd:0105
    assert(cs == 0x11cd);
    sp++;
    sp++;
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11d74() // 11cd:00a4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    if (!si)
        goto loc_11dab;
    memoryASet(ds, 0x8a06, 0x18);
    memoryASet16(ds, 0x89f8, 0x2000);
    ax = 0x0008;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_125c0(); // 11cd:08f0
    assert(cs == 0x11cd);
    sp = bp;
    memoryASet(ds, 0x8a05, 0x1f);
    memoryASet16(ds, 0x89f6, 0x2000);
    ax = 0x0007;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_125c0(); // 11cd:08f0
    assert(cs == 0x11cd);
    sp = bp;
loc_11dab: // 11cd:00db
    ax = si;
    memoryASet(ds, 0x8a0b, al);
    if (!si)
        goto loc_11db9;
    ax = 0x000b;
    goto loc_11dbc;
loc_11db9: // 11cd:00e9
    ax = 0x0009;
loc_11dbc: // 11cd:00ec
    memoryASet16(ds, 0x89fc, ax);
    memoryASet(ds, 0x89fa, 0x00);
    push(cs);
    cs = 0x11cd;
    sub_120b8(); // 11cd:03e8
    assert(cs == 0x11cd);
    sp = bp;
    push(cs);
    cs = 0x11cd;
    sub_12541(); // 11cd:0871
    assert(cs == 0x11cd);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11dd5() // 11cd:0105
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    if (memoryAGet16(ss, bp + 8) == 0x0000)
        goto loc_11de4;
    ax = 0x0020;
    goto loc_11de6;
loc_11de4: // 11cd:0114
    ax = 0;
loc_11de6: // 11cd:0116
    memoryASet16(ds, 0x88dc, ax);
    si = 0;
    goto loc_11e01;
loc_11ded: // 11cd:011d
    ax = 0;
    push(ax);
    al = memoryAGet(ds, si + 7057);
    cbw();
    ax += 0x00e0;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp = bp;
    si++;
loc_11e01: // 11cd:0131
    if ((short)si < (short)0x0012)
        goto loc_11ded;
    push(memoryAGet16(ds, 0x88dc));
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11e18() // 11cd:0148
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    if (si <= 0x000c)
        goto loc_11e27;
    si = 0x000c;
loc_11e27: // 11cd:0157
    if (si >= 0x0001)
        goto loc_11e2f;
    si = 0x0001;
loc_11e2f: // 11cd:015f
    memoryASet16(ds, 0x89e6, si);
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11e36() // 11cd:0166
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 6);
    memoryASet(ds, 0x8a0a, al);
    al = memoryAGet(ss, bp + 8);
    memoryASet(ds, 0x8a15, al);
    al = memoryAGet(ss, bp + 10);
    memoryASet(ds, 0x88da, al);
    push(cs);
    cs = 0x11cd;
    sub_12541(); // 11cd:0871
    assert(cs == 0x11cd);
    sp = bp;
    push(cs);
    cs = 0x11cd;
    sub_123ba(); // 11cd:06ea
    assert(cs == 0x11cd);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11e5b() // 11cd:018b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
    si = memoryAGet16(ss, bp + 10);
    if (si < memoryAGet16(ds, 0x89fc))
        goto loc_11e6f;
    goto loc_11efe;
loc_11e6f: // 11cd:019f
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    bx += 0x0034;
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    di = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    bx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 14, ax);
    bx = memoryAGet16(ss, bp + 12);
    bx += 0x001a;
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    if (memoryAGet(ds, 0x8a0b) == 0x00)
        goto loc_11eb2;
    bx = si;
    bx <<= 1;
    bx += 0x1b7b;
    ax = ds;
    es = ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    goto loc_11ec4;
loc_11eb2: // 11cd:01e2
    bx = si;
    bx <<= 1;
    bx += 0x1b69;
    ax = ds;
    es = ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
loc_11ec4: // 11cd:01f4
    push(di);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    al = memoryAGet(es, bx);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_12197(); // 11cd:04c7
    assert(cs == 0x11cd);
    sp += 0x0008;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    if (memoryAGet(es, bx + 1) == 0xff)
        goto loc_11efe;
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    al = memoryAGet(es, bx + 1);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_12197(); // 11cd:04c7
    assert(cs == 0x11cd);
    sp += 0x0008;
loc_11efe: // 11cd:022e
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11f04() // 11cd:0234
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    di = memoryAGet16(ss, bp + 12);
    si = memoryAGet16(ss, bp + 10);
    if (si >= memoryAGet16(ds, 0x89fc))
        goto loc_11f7b;
    if (di <= 0x007f)
        goto loc_11f20;
    di = 0x007f;
loc_11f20: // 11cd:0250
    ax = di;
    memoryASet(ds, si + 35290, al);
    if (memoryAGet(ds, 0x8a0b) == 0x00)
        goto loc_11f41;
    bx = si;
    bx <<= 1;
    bx += 0x1b7b;
    ax = ds;
    es = ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    goto loc_11f53;
loc_11f41: // 11cd:0271
    bx = si;
    bx <<= 1;
    bx += 0x1b69;
    ax = ds;
    es = ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
loc_11f53: // 11cd:0283
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    al = memoryAGet(es, bx);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_12305(); // 11cd:0635
    assert(cs == 0x11cd);
    sp++;
    sp++;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    if (memoryAGet(es, bx + 1) == 0xff)
        goto loc_11f7b;
    al = memoryAGet(es, bx + 1);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_12305(); // 11cd:0635
    assert(cs == 0x11cd);
    sp++;
    sp++;
loc_11f7b: // 11cd:02ab
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_11fba() // 11cd:02ea
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 12);
    si = memoryAGet16(ss, bp + 10);
    di -= 0x000c;
    if ((short)di >= 0)
        goto loc_11fce;
    di = 0;
loc_11fce: // 11cd:02fe
    if (memoryAGet(ds, 0x8a0b) != 0x00)
        goto loc_11fda;
    if (si < 0x0009)
        goto loc_11fdf;
loc_11fda: // 11cd:030a
    if (si >= 0x0006)
        goto loc_11ff4;
loc_11fdf: // 11cd:030f
    ax = di;
    memoryASet(ds, si + 35326, al);
    memoryASet(ds, si + 35340, 0x20);
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_125c0(); // 11cd:08f0
    assert(cs == 0x11cd);
    sp = bp;
    goto loc_12058;
loc_11ff4: // 11cd:0324
    if (memoryAGet(ds, 0x8a0b) == 0x00)
        goto loc_12058;
    if (si > 0x000a)
        goto loc_12058;
    if (si != 0x0006)
        goto loc_12014;
    ax = di;
    memoryASet(ds, 0x8a04, al);
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_125c0(); // 11cd:08f0
    assert(cs == 0x11cd);
    sp = bp;
    goto loc_12044;
loc_12014: // 11cd:0344
    if (si != 0x0008)
        goto loc_12044;
    al = memoryAGet(ds, 0x8a06);
    cbw();
    if (ax == di)
        goto loc_12044;
    ax = di;
    memoryASet(ds, 0x8a06, al);
    ax = di;
    al += 0x07;
    memoryASet(ds, 0x8a05, al);
    ax = 0x0008;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_125c0(); // 11cd:08f0
    assert(cs == 0x11cd);
    sp = bp;
    ax = 0x0007;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_125c0(); // 11cd:08f0
    assert(cs == 0x11cd);
    sp = bp;
loc_12044: // 11cd:0374
    bx = si;
    bx += 0xfffa;
    al = memoryAGet(ds, bx + 6900);
    memoryASet(ds, 0x89fa, memoryAGet(ds, 0x89fa) | al);
    push(cs);
    cs = 0x11cd;
    sub_12541(); // 11cd:0871
    assert(cs == 0x11cd);
    sp = bp;
loc_12058: // 11cd:0388
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1205c() // 11cd:038c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    if (memoryAGet(ds, 0x8a0b) != 0x00)
        goto loc_1206f;
    if (si < 0x0009)
        goto loc_12074;
loc_1206f: // 11cd:039f
    if (si >= 0x0006)
        goto loc_12093;
loc_12074: // 11cd:03a4
    memoryASet(ds, si + 35340, 0x00);
    memoryASet(ds, si + 35350, memoryAGet(ds, si + 35350) & 0xdf);
    al = memoryAGet(ds, si + 35350);
    cbw();
    push(ax);
    ax = si;
    ax += 0x00b0;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp = bp;
    goto loc_120b5;
loc_12093: // 11cd:03c3
    if (memoryAGet(ds, 0x8a0b) == 0x00)
        goto loc_120b5;
    if (si > 0x000a)
        goto loc_120b5;
    bx = si;
    bx += 0xfffa;
    al = memoryAGet(ds, bx + 6900);
    al = ~al;
    memoryASet(ds, 0x89fa, memoryAGet(ds, 0x89fa) & al);
    push(cs);
    cs = 0x11cd;
    sub_12541(); // 11cd:0871
    assert(cs == 0x11cd);
    sp = bp;
loc_120b5: // 11cd:03e5
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_120b8() // 11cd:03e8
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    si = 0;
    goto loc_120e9;
loc_120bd: // 11cd:03ed
    if (memoryAGet(ds, si + 7075) == 0x00)
        goto loc_120d7;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1b07;
    push(ax);
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_121f0(); // 11cd:0520
    assert(cs == 0x11cd);
    sp += 0x0008;
    goto loc_120e8;
loc_120d7: // 11cd:0407
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1af9;
    push(ax);
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_121f0(); // 11cd:0520
    assert(cs == 0x11cd);
    sp += 0x0008;
loc_120e8: // 11cd:0418
    si++;
loc_120e9: // 11cd:0419
    if ((short)si < (short)0x0012)
        goto loc_120bd;
    if (memoryAGet(ds, 0x8a0b) == 0x00)
        goto loc_1216d;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1b15;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_121f0(); // 11cd:0520
    assert(cs == 0x11cd);
    sp += 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1b23;
    push(ax);
    ax = 0x000f;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_121f0(); // 11cd:0520
    assert(cs == 0x11cd);
    sp += 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1b31;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_121f0(); // 11cd:0520
    assert(cs == 0x11cd);
    sp += 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1b3f;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_121f0(); // 11cd:0520
    assert(cs == 0x11cd);
    sp += 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1b4d;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_121f0(); // 11cd:0520
    assert(cs == 0x11cd);
    sp += 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1b5b;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_121f0(); // 11cd:0520
    assert(cs == 0x11cd);
    sp += 0x0008;
loc_1216d: // 11cd:049d
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12197() // 11cd:04c7
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    si = 0;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x000e;
    mul(dx);
    bx = ax;
    bx += 0x88de;
    ax = ds;
    es = ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    goto loc_121ce;
loc_121ba: // 11cd:04ea
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    si++;
loc_121ce: // 11cd:04fe
    if ((short)si < (short)0x000d)
        goto loc_121ba;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) & 0x0003);
    ax = memoryAGet16(ss, bp + 14);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx, al);
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    cs = 0x11cd;
    sub_122bd(); // 11cd:05ed
    assert(cs == 0x11cd);
    sp++;
    sp++;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_121f0() // 11cd:0520
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x001c;
    si = 0;
    goto loc_12213;
loc_121fb: // 11cd:052b
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    al = memoryAGet(es, bx);
    ah = 0x00;
    bx = si;
    bx <<= 1;
    dx = bp - 0x1c;
    bx += dx;
    memoryASet16(ss, bx, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
    si++;
loc_12213: // 11cd:0543
    if ((short)si < (short)0x000d)
        goto loc_121fb;
    push(memoryAGet16(ss, bp + 14));
    push(ss);
    ax = bp - 0x1c;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_12197(); // 11cd:04c7
    sp += 0x0008;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_122bd() // 11cd:05ed
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    push(cs);
    cs = 0x11cd;
    sub_12541(); // 11cd:0871
    assert(cs == 0x11cd);
    sp = bp;
    push(cs);
    cs = 0x11cd;
    sub_123ba(); // 11cd:06ea
    assert(cs == 0x11cd);
    sp = bp;
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_12305(); // 11cd:0635
    assert(cs == 0x11cd);
    sp = bp;
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_123d6(); // 11cd:0706
    assert(cs == 0x11cd);
    sp = bp;
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_12425(); // 11cd:0755
    assert(cs == 0x11cd);
    sp = bp;
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_1246a(); // 11cd:079a
    assert(cs == 0x11cd);
    sp = bp;
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_124af(); // 11cd:07df
    assert(cs == 0x11cd);
    sp = bp;
    push(si);
    push(cs);
    cs = 0x11cd;
    sub_12585(); // 11cd:08b5
    assert(cs == 0x11cd);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12305() // 11cd:0635
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    di = memoryAGet16(ss, bp + 10);
    if (memoryAGet(ds, 0x8a0b) == 0x00)
        goto loc_12321;
    al = memoryAGet(ds, di + 7111);
    cbw();
    memoryASet16(ss, bp - 4, ax);
    goto loc_12329;
loc_12321: // 11cd:0651
    al = memoryAGet(ds, di + 7093);
    cbw();
    memoryASet16(ss, bp - 4, ax);
loc_12329: // 11cd:0659
    si = 0x003f;
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35046);
    cbw();
    ax &= si;
    si -= ax;
    if (memoryAGet(ds, 0x8a0b) == 0x00)
        goto loc_12350;
    if (memoryAGet16(ss, bp - 4) <= 0x0006)
        goto loc_12350;
    ax = 0x0001;
    goto loc_12352;
loc_12350: // 11cd:0680
    ax = 0;
loc_12352: // 11cd:0682
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ds, di + 7075) != 0x00)
        goto loc_12372;
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    if (memoryAGet(ds, bx + 35050) == 0x00)
        goto loc_12372;
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_12386;
loc_12372: // 11cd:06a2
    bx = memoryAGet16(ss, bp - 4);
    al = memoryAGet(ds, bx + 35290);
    cbw();
    mul(si);
    ax += 0x0040;
    cx = 0x0007;
    ax >>= cl;
    si = ax;
loc_12386: // 11cd:06b6
    ax = 0x003f;
    ax -= si;
    si = ax;
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35038);
    cbw();
    cx = 0x0006;
    ax <<= cl;
    si |= ax;
    push(si);
    al = memoryAGet(ds, di + 7057);
    cbw();
    ax += 0x0040;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_123ba() // 11cd:06ea
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x88da) == 0x00)
        goto loc_123c6;
    ax = 0x0040;
    goto loc_123c8;
loc_123c6: // 11cd:06f6
    ax = 0;
loc_123c8: // 11cd:06f8
    push(ax);
    ax = 0x0008;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_123d6() // 11cd:0706
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 10);
    if (memoryAGet(ds, si + 7075) != 0x00)
        goto loc_12421;
    ax = si;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35040);
    cbw();
    di = ax;
    di <<= 1;
    ax = si;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    if (memoryAGet(ds, bx + 35050) == 0x00)
        goto loc_1240b;
    ax = 0;
    goto loc_1240e;
loc_1240b: // 11cd:073b
    ax = 0x0001;
loc_1240e: // 11cd:073e
    di |= ax;
    push(di);
    al = memoryAGet(ds, si + 7093);
    cbw();
    ax += 0x00c0;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp = bp;
loc_12421: // 11cd:0751
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12425() // 11cd:0755
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10);
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35041);
    cbw();
    si = ax;
    cx = 0x0004;
    si <<= cl;
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35044);
    cbw();
    ax &= 0x000f;
    si |= ax;
    push(si);
    al = memoryAGet(ds, di + 7057);
    cbw();
    ax += 0x0060;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1246a() // 11cd:079a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10);
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35042);
    cbw();
    si = ax;
    cx = 0x0004;
    si <<= cl;
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35045);
    cbw();
    ax &= 0x000f;
    si |= ax;
    push(si);
    al = memoryAGet(ds, di + 7057);
    cbw();
    ax += 0x0080;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_124af() // 11cd:07df
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10);
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    if (memoryAGet(ds, bx + 35047) == 0x00)
        goto loc_124cc;
    si = 0x0080;
    goto loc_124ce;
loc_124cc: // 11cd:07fc
    si = 0;
loc_124ce: // 11cd:07fe
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    if (memoryAGet(ds, bx + 35048) == 0x00)
        goto loc_124e3;
    ax = 0x0040;
    goto loc_124e5;
loc_124e3: // 11cd:0813
    ax = 0;
loc_124e5: // 11cd:0815
    si += ax;
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    if (memoryAGet(ds, bx + 35043) == 0x00)
        goto loc_124fc;
    ax = 0x0020;
    goto loc_124fe;
loc_124fc: // 11cd:082c
    ax = 0;
loc_124fe: // 11cd:082e
    si += ax;
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    if (memoryAGet(ds, bx + 35049) == 0x00)
        goto loc_12515;
    ax = 0x0010;
    goto loc_12517;
loc_12515: // 11cd:0845
    ax = 0;
loc_12517: // 11cd:0847
    si += ax;
    ax = di;
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35039);
    cbw();
    ax &= 0x000f;
    si += ax;
    push(si);
    al = memoryAGet(ds, di + 7057);
    cbw();
    ax += 0x0020;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12541() // 11cd:0871
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet(ds, 0x8a0a) == 0x00)
        goto loc_1254e;
    si = 0x0080;
    goto loc_12550;
loc_1254e: // 11cd:087e
    si = 0;
loc_12550: // 11cd:0880
    if (memoryAGet(ds, 0x8a15) == 0x00)
        goto loc_1255c;
    ax = 0x0040;
    goto loc_1255e;
loc_1255c: // 11cd:088c
    ax = 0;
loc_1255e: // 11cd:088e
    si |= ax;
    if (memoryAGet(ds, 0x8a0b) == 0x00)
        goto loc_1256c;
    ax = 0x0020;
    goto loc_1256e;
loc_1256c: // 11cd:089c
    ax = 0;
loc_1256e: // 11cd:089e
    si |= ax;
    al = memoryAGet(ds, 0x89fa);
    cbw();
    si |= ax;
    push(si);
    ax = 0x00bd;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12585() // 11cd:08b5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x88dc) == 0x0000)
        goto loc_125a7;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x000e;
    mul(dx);
    bx = ax;
    al = memoryAGet(ds, bx + 35051);
    cbw();
    si = ax;
    si &= 0x0003;
    goto loc_125a9;
loc_125a7: // 11cd:08d7
    si = 0;
loc_125a9: // 11cd:08d9
    push(si);
    bx = memoryAGet16(ss, bp + 8);
    al = memoryAGet(ds, bx + 7057);
    cbw();
    ax += 0x00e0;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_125c0() // 11cd:08f0
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    al = memoryAGet(ds, si + 35340);
    cbw();
    push(ax);
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 35304));
    al = memoryAGet(ds, si + 35326);
    cbw();
    push(ax);
    push(si);
    push(cs);
    cs = 0x1e6d;
    sub_1e6d6(); // 1e6d:0006
    assert(cs == 0x11cd);
    sp = bp;
    memoryASet(ds, si + 35350, al);
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_125ea() // 11cd:091a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    ax = 0x0060;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    ax = 0x0080;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8a08));
    push(cs);
    cs = 0x1f0c;
    sub_1f0c9(); // 1f0c:0009
    assert(cs == 0x11cd);
    sp++;
    sp++;
    di = ax;
    ax = 0x00ff;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    ax = 0x0021;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    si = 0;
    goto loc_1264e;
loc_12642: // 11cd:0972
    push(memoryAGet16(ds, 0x8a08));
    push(cs);
    cs = 0x1f0c;
    sub_1f0c9(); // 1f0c:0009
    assert(cs == 0x11cd);
    sp++;
    sp++;
    si++;
loc_1264e: // 11cd:097e
    if (si < 0x00c8)
        goto loc_12642;
    push(memoryAGet16(ds, 0x8a08));
    push(cs);
    cs = 0x1f0c;
    sub_1f0c9(); // 1f0c:0009
    assert(cs == 0x11cd);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, ax);
    ax = 0x0060;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    ax = 0x0080;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x11cd);
    sp += 0x0004;
    if (di & 0x00e0)
        goto loc_12698;
    ax = memoryAGet16(ss, bp - 2);
    ax &= 0x00e0;
    if (ax != 0x00c0)
        goto loc_12698;
    ax = 0x0001;
    goto loc_1269a;
loc_12698: // 11cd:09c8
    ax = 0;
loc_1269a: // 11cd:09ca
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_126a0() // 126a:0000 not called
{
//    CStackGuardFar sg(0, false);
//    cx = ds;
//    push(cx);
//    cx = 0x0000;
//    push(cx);
//    stop(/*inject ret*/);
//    cs = pop();
    // call DS:0000
    //printf("dont know 126a:0000\n");
    //assert(0);
    cs = pop();
}
void sub_126a8() // 126a:0008
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ds = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0001;
    push(cs);
    cs = 0x126a;
    sub_126a0(); // 126a:0000
    assert(cs == 0x126a);
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_126c9() // 126a:0029
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ds = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, bp + 10);
    bx = 0x0002;
    push(cs);
    cs = 0x126a;
    sub_126a0(); // 126a:0000
    assert(cs == 0x126a);
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_126ea() // 126a:004a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ds = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, bp + 8);
    si = 0x0000;
    ax = 0x0000;
    bx = 0x0003;
    push(cs);
    cs = 0x126a;
    sub_126a0(); // 126a:0000
    assert(cs == 0x126a);
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12738() // 126a:0098
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ds = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    di = ax;
    si = 0x0000;
    bx = 0x0005;
    push(cs);
    cs = 0x126a;
    sub_126a0(); // 126a:0000
    assert(cs == 0x126a);
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12761() // 126a:00c1
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ds = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 12);
    di = ax;
    si = 0x0000;
    bx = 0x0006;
    push(cs);
    cs = 0x126a;
    sub_126a0(); // 126a:0000
    assert(cs == 0x126a);
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1278a() // 126a:00ea
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ds = memoryAGet16(ss, bp + 6);
    si = 0x0000;
    bx = 0x0008;
    push(cs);
    cs = 0x126a;
    sub_126a0(); // 126a:0000
    assert(cs == 0x126a);
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_127ab() // 126a:010b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ds = memoryAGet16(ss, bp + 6);
    si = 0x0000;
    bx = 0x0009;
    push(cs);
    cs = 0x126a;
    sub_126a0(); // 126a:0000
    assert(cs == 0x126a);
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_127cc() // 127c:000c
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    di = memoryAGet16(ds, 0x8bf4);
    si = memoryAGet16(ds, 0x8bf2);
    si += 0x000f;
    ax = si;
    cx = 0x0004;
    ax >>= cl;
    si = ax;
    di += si;
    si = 0;
    memoryASet16(ds, 0x8a20, di);
    di = pop();
    si = pop();
    cs = pop();
}
void sub_127ed() // 127c:002d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(cs);
    sub_127cc(); // 127c:000c
    sp = bp;
    push(memoryAGet16(ss, bp + 6));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8a20));
    push(cs);
    cs = 0x126a;
    sub_126a8(); // 126a:0008
    assert(cs == 0x127c);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12809() // 127c:0049
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(cs);
    sub_127cc(); // 127c:000c
    sp = bp;
    push(memoryAGet16(ss, bp + 6));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8a20));
    push(cs);
    cs = 0x126a;
    sub_126c9(); // 126a:0029
    assert(cs == 0x127c);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12825() // 127c:0065
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(cs);
    sub_127cc(); // 127c:000c
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8a20));
    push(cs);
    cs = 0x126a;
    sub_126ea(); // 126a:004a
    assert(cs == 0x127c);
    sp += 0x0004;
    memoryASet(ss, bp - 5, al);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_12865;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8dbe);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 2);
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8a20));
    push(cs);
    cs = 0x126a;
    sub_12738(); // 126a:0098
    assert(cs == 0x127c);
    sp += 0x0008;
loc_12865: // 127c:00a5
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12886() // 127c:00c6
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(cs);
    sub_127cc(); // 127c:000c
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8a20));
    push(cs);
    cs = 0x126a;
    sub_1278a(); // 126a:00ea
    assert(cs == 0x127c);
    sp += 0x0004;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_128b3() // 127c:00f3
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    al = memoryAGet(es, bx + 21);
    ah = 0x00;
    si = ax;
    cx = 0x0008;
    si <<= cl;
    al = memoryAGet(es, bx + 20);
    ah = 0x00;
    si += ax;
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + si);
    push(cs);
    sub_12886(); // 127c:00c6
    sp = bp;
    push(cs);
    sub_127cc(); // 127c:000c
    sp = bp;
    push(memoryAGet16(ss, bp + 8));
    ax = memoryAGet16(ss, bp + 10);
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8a20));
    push(cs);
    cs = 0x126a;
    sub_12761(); // 126a:00c1
    assert(cs == 0x127c);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_128f6() // 127c:0136
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(cs);
    sub_127cc(); // 127c:000c
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8a20));
    push(cs);
    cs = 0x126a;
    sub_127ab(); // 126a:010b
    assert(cs == 0x127c);
    sp += 0x0004;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1290a() // 127c:014a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 36342);
    es = memoryAGet16(ds, tx + 36342 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    ax = bx;
    ax |= memoryAGet16(ss, bp - 2);
    if (!ax)
        goto loc_12935;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_128b3(); // 127c:00f3
    sp += 0x0004;
loc_12935: // 127c:0175
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_129c3() // 129a:0023
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(dx);
    push(cx);
    cx = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 8);
    dx++;
loc_129cf: // 129a:002f
    in(al, dx);
    al &= 0x40;
    if (al != 0)
        goto loc_129cf;
    al = cl;
    dx--;
    out(dx, al);
    cx = pop();
    dx = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12df2() // 129d:0422
{
    CStackGuardFar sg(0, false);
    ax = memoryAGet16(cs, 0x041c);
    cs = pop();
}
void sub_12dfc() // 129d:042c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(cs, 0x0010, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(cs, 0x0412, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(cs, 0x0414, ax);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(cs, 0x0416, ax);
    ax = memoryAGet16(ss, bp + 14);
    memoryASet16(cs, 0x0418, ax);
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12e24() // 129d:0454
{
    CStackGuardFar sg(0, false);
    push(bx);
    push(cx);
    push(dx);
    push(ds);
    ah = 0x3f;
    bx = memoryAGet16(cs, 0x0010);
    cx = 0x0400;
    dx = 0x129d;
    ds = dx;
    dx = 0x0012;
    interrupt(0x21);
    ax = 0x0001;
    memoryASet16(cs, 0x000c, ax);
    al = memoryAGet(cs, 0x0012);
    memoryASet(cs, 0x000e, al);
    al = 0x80;
    memoryASet(cs, 0x000f, al);
    ds = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    cs = pop();
}
void sub_12e56() // 129d:0486+zero
{
    CStackGuard sg(0, false);
    al = dh;
    al &= dl;
    dl >>= 1;
    if (dl == 0)
        goto loc_12e61;
    flags.zero = al == 0;
    return;
loc_12e61: // 129d:0491
    dl = 0x80;
    bx = memoryAGet16(cs, 0x000c);
    if (bx == 0x0400)
        goto loc_12e7b;
    dh = memoryAGet(cs, bx + 18);
    memoryASet16(cs, 0x000c, memoryAGet16(cs, 0x000c) + 1);
    flags.zero = al == 0;
    return;
loc_12e7b: // 129d:04ab
    push(ax);
    push(cs);
    cs = 0x129d;
    sub_12e24(); // 129d:0454
    assert(cs == 0x129d);
    dl = 0x80;
    dh = memoryAGet(cs, 0x000e);
    ax = pop();
    flags.zero = al == 0;
}
void sub_12e8c() // 129d:04bc
{
    CStackGuard sg(0, false);
    cl = 0x00;
    ch = 0x80;
loc_12e90: // 129d:04c0
    al = dh;
    al &= dl;
    dl >>= 1;
    if (dl != 0)
        goto loc_12ebf;
    dl = 0x80;
    bx = memoryAGet16(cs, 0x000c);
    if (bx != 0x0400)
        goto loc_12eb5;
    push(ax);
    push(cs);
    cs = 0x129d;
    sub_12e24(); // 129d:0454
    assert(cs == 0x129d);
    dl = 0x80;
    dh = memoryAGet(cs, 0x000e);
    ax = pop();
    goto loc_12ebf;
loc_12eb5: // 129d:04e5
    dh = memoryAGet(cs, bx + 18);
    memoryASet16(cs, 0x000c, memoryAGet16(cs, 0x000c) + 1);
loc_12ebf: // 129d:04ef
    if (al == 0)
        goto loc_12ec5;
    cl |= ch;
loc_12ec5: // 129d:04f5
    ch >>= 1;
    if (ch != 0)
        goto loc_12e90;
    al = cl;
}
void sub_12ed7() // 129d:0507
{
    CStackGuard sg(0, false);
    goto loc_12ed7;
loc_12ecc: // 129d:04fc
    sub_12e8c(); // 129d:04bc
    memoryASet(es, di, al);
    di++;
    bx = 0x0001;
    return;
loc_12ed7: // 129d:0507
    sub_12e56(); // 129d:0486
    if (flags.zero)
        goto loc_12ecc;
    cx = 0x0000;
    push(cx);
    sub_12e56(); // 129d:0486
    cx = pop();
    if (flags.zero)
        goto loc_12ee9;
    cx = 0x0002;
loc_12ee9: // 129d:0519
    push(cx);
    sub_12e56(); // 129d:0486
    cx = pop();
    if (flags.zero)
        goto loc_12ef1;
    cx++;
loc_12ef1: // 129d:0521
    cx += 0x0002;
    push(cx);
    sub_12e8c(); // 129d:04bc
    ah = 0x00;
    ax++;
    cx = pop();
    si = di;
    si -= ax;
    push(es);
    ds = pop();
    bx = cx;
    flags.direction = false;
    rep_movsb<MemAuto, MemAuto, DirAuto>();
}
void sub_12f08() // 129d:0538
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(es);
    push(ds);
    push(di);
    push(si);
    push(bx);
    push(cx);
    push(dx);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(cs, 0x041a, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(cs, 0x041c, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(cs, 0x041e, ax);
    ax += memoryAGet16(cs, 0x0418);
    memoryASet16(cs, 0x0420, ax);
    ax = memoryAGet16(cs, 0x0416);
    es = ax;
    di = memoryAGet16(cs, 0x0418);
    ax = memoryAGet16(ss, bp + 8);
    di += ax;
    dl = memoryAGet(cs, 0x000f);
    dh = memoryAGet(cs, 0x000e);
    ax = memoryAGet16(cs, 0x0412);
    cx = memoryAGet16(cs, 0x0414);
loc_12f53: // 129d:0583
    if ((short)di >= (short)memoryAGet16(cs, 0x0420))
        goto loc_12f6c;
    push(ax);
    push(cx);
    sub_12ed7(); // 129d:0507
    cx = pop();
    ax = pop();
    flags.carry = ax < bx;
    ax -= bx;
    cx -= flags.carry;
    if (cx != 0)
        goto loc_12f53;
    if (ax != 0)
        goto loc_12f53;
loc_12f6c: // 129d:059c
    memoryASet16(cs, 0x0412, ax);
    memoryASet16(cs, 0x0414, cx);
    memoryASet(cs, 0x000f, dl);
    memoryASet(cs, 0x000e, dh);
    di -= memoryAGet16(cs, 0x0418);
    memoryASet16(cs, 0x041c, di);
    dx = pop();
    cx = pop();
    bx = pop();
    si = pop();
    di = pop();
    ds = pop();
    es = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12f92() // 12f9:0002
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    si = 0;
    goto loc_12fb1;
loc_12f9e: // 12f9:000e
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 35376, 0x0000);
    memoryASet16(ds, bx + 35374, 0x0000);
    si++;
loc_12fb1: // 12f9:0021
    if (si < 0x000e)
        goto loc_12f9e;
    di = 0;
loc_12fb8: // 12f9:0028
    ax = memoryAGet16(ss, bp + 10);
    ax |= memoryAGet16(ss, bp + 12);
    if (!ax)
        goto loc_13026;
    if (memoryAGet16(ss, bp + 12) < 0x0000)
        goto loc_12fe8;
    if (memoryAGet16(ss, bp + 12) > 0x0000)
        goto loc_12fcf;
    if (memoryAGet16(ss, bp + 10) <= 0xfa00)
        goto loc_12fe8;
loc_12fcf: // 12f9:003f
    memoryASet16(ss, bp - 2, 0xfa00);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 10);
    flags.carry = (ax + 0x0600) >= 0x10000;
    ax += 0x0600;
    dx += 0xffff + flags.carry;
    memoryASet16(ss, bp + 12, dx);
    memoryASet16(ss, bp + 10, ax);
    goto loc_12ff8;
loc_12fe8: // 12f9:0058
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp + 12, 0x0000);
    memoryASet16(ss, bp + 10, 0x0000);
loc_12ff8: // 12f9:0068
    if (memoryAGet16(ss, bp + 12) < 0x0000)
        goto loc_1300a;
    if (memoryAGet16(ss, bp + 12) != 0x0000)
        goto loc_13007;
    if (memoryAGet16(ss, bp + 10) < 0x8000)
        goto loc_1300a;
loc_13007: // 12f9:0077
    memoryASet16(ss, bp - 4, di);
loc_1300a: // 12f9:007a
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    bx = di;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 35376, dx);
    memoryASet16(ds, bx + 35374, ax);
    di++;
    goto loc_12fb8;
loc_13026: // 12f9:0096
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_12f99() // 12f9:0009
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    al += 0x33;
    imul(bl);
    stop(/*8*/); // inject carry failed
    cx += memoryAGet16(ss, bp + di + 53726) + flags.carry;
    if (cx == 0)
        goto loc_22f74;
    if (cx == 0)
        goto loc_22f6c;
    tx = memoryAGet16(ds, bx + si);
    memoryASet16(ds, bx + si, si);
    si = tx;
    al = memoryAGet(ds, bx + si);
    bh += al;
    tx = memoryAGet16(ds, 0x008a);
    memoryASet16(ds, 0x008a, bp);
    bp = tx;
    memoryASet(ss, bp - 125, memoryAGet(ss, bp - 125) + al);
    memoryASet(ds, 0xe872, memoryAGet(ds, 0xe872) - 1);
    di = 0;
loc_12fb8: // 12f9:0028
    ax = memoryAGet16(ss, bp + 10);
    ax |= memoryAGet16(ss, bp + 12);
    if (!ax)
        goto loc_13026;
    if (memoryAGet16(ss, bp + 12) < 0x0000)
        goto loc_12fe8;
    if (memoryAGet16(ss, bp + 12) > 0x0000)
        goto loc_12fcf;
    if (memoryAGet16(ss, bp + 10) <= 0xfa00)
        goto loc_12fe8;
loc_12fcf: // 12f9:003f
    memoryASet16(ss, bp - 2, 0xfa00);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 10);
    flags.carry = (ax + 0x0600) >= 0x10000;
    ax += 0x0600;
    dx += 0xffff + flags.carry;
    memoryASet16(ss, bp + 12, dx);
    memoryASet16(ss, bp + 10, ax);
    goto loc_12ff8;
loc_12fe8: // 12f9:0058
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp + 12, 0x0000);
    memoryASet16(ss, bp + 10, 0x0000);
loc_12ff8: // 12f9:0068
    if (memoryAGet16(ss, bp + 12) < 0x0000)
        goto loc_1300a;
    if (memoryAGet16(ss, bp + 12) != 0x0000)
        goto loc_13007;
    if (memoryAGet16(ss, bp + 10) < 0x8000)
        goto loc_1300a;
loc_13007: // 12f9:0077
    memoryASet16(ss, bp - 4, di);
loc_1300a: // 12f9:007a
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    bx = di;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 35376, dx);
    memoryASet16(ds, bx + 35374, ax);
    di++;
    goto loc_12fb8;
loc_13026: // 12f9:0096
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
    return;
    //   gap of 65344 bytes
loc_22f6c: // 12f9:ffdc
    push(bp);
    memoryASet(ds, si, memoryAGet(ds, si) + cl);
    memoryASet(ss, bp + si, memoryAGet(ss, bp + si) + dl);
    memoryASet(ds, si, memoryAGet(ds, si) + al);
loc_22f74: // 12f9:ffe4
    memoryASet16(ds, bx + si, memoryAGet16(ds, bx + si) + 0x000d);
    al += 0x00;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1302c() // 12f9:009c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x00d6;
    push(ss);
    ax = bp - 0xc4;
    push(ax);
    push(ds);
    ax = 0x1bf4;
    push(ax);
    cx = 0x0078;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x12f9);
    push(ss);
    ax = bp - 0x4c;
    push(ax);
    push(ds);
    ax = 0x1c6c;
    push(ax);
    cx = 0x0048;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x12f9);
    memoryASet(ds, 0x8dd0, 0x00);
    push(cs);
    cs = 0x023f;
    sub_241e(); // 023f:002e
    assert(cs == 0x12f9);
    memoryASet16(ds, 0x8de4, ax);
    push(cs);
    cs = 0x06c1;
    sub_a263(); // 06c1:3653
    assert(cs == 0x12f9);
    push(cs);
    cs = 0x0ee7;
    sub_10aba(); // 0ee7:1c4a
    assert(cs == 0x12f9);
    memoryASet(ss, bp - 214, 0x00);
    ax = 0x8001;
    push(ax);
    push(ds);
    ax = 0x1cb4;
    push(ax);
    push(cs);
    cs = 0x1f2b;
    sub_1f2e7(); // 1f2b:0037
    assert(cs == 0x12f9);
    sp += 0x0006;
    si = ax;
    if (si != 0xffff)
        goto loc_13094;
    memoryASet(ss, bp - 214, 0x01);
    goto loc_13108;
loc_13094: // 12f9:0104
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x91a2;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x12f9);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x8dde;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x12f9);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x8db5;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x12f9);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x8bda;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x12f9);
    sp += 0x0008;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8de0;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x12f9);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x8dbb;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f4a;
    sub_1f4af(); // 1f4a:000f
    assert(cs == 0x12f9);
    sp += 0x0008;
    push(si);
    push(cs);
    cs = 0x1e98;
    sub_1e98c(); // 1e98:000c
    assert(cs == 0x12f9);
    sp++;
    sp++;
loc_13108: // 12f9:0178
    if ((short)memoryAGet16(ss, bp + 8) <= (short)0x0001)
        goto loc_1312f;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx + 4);
    es = memoryAGet16(es, tx + 4 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 213, al);
    if (memoryAGet(ss, bp - 213) == 0x52)
        goto loc_1312a;
    if (memoryAGet(ss, bp - 213) != 0x72)
        goto loc_1312f;
loc_1312a: // 12f9:019a
    memoryASet(ss, bp - 214, 0x01);
loc_1312f: // 12f9:019f
    al = 0x00;
    memoryASet(ds, 0x8c58, al);
    memoryASet(ds, 0x8bf0, al);
    memoryASet(ds, 0x8a2c, al);
    memoryASet(ds, 0x8f67, al);
    memoryASet(ds, 0x919d, al);
    al = 0x00;
    memoryASet(ds, 0x8ddf, al);
    memoryASet(ds, 0x8dc4, al);
    if (memoryAGet(ss, bp - 214) == 0x00)
        goto loc_13167;
    al = 0x00;
    memoryASet(ds, 0x91a2, al);
    memoryASet(ds, 0x8bda, al);
    memoryASet(ds, 0x8db5, al);
    memoryASet(ds, 0x8dde, al);
    al = 0x00;
    memoryASet(ds, 0x8dbb, al);
    ah = 0x00;
    memoryASet16(ds, 0x8de0, ax);
loc_13167: // 12f9:01d7
    push(cs);
    cs = 0x0ee7;
    sub_1061f(); // 0ee7:17af
    assert(cs == 0x12f9);
    al = memoryAGet(ds, 0x8dde);
    ah = 0x00;
    if (ax == 0x0048)
        goto loc_131af;
    if ((short)ax > (short)0x0048)
        goto loc_13184;
    if (ax == 0x0043)
        goto loc_13190;
    if (ax == 0x0045)
        goto loc_13197;
    goto loc_131bb;
loc_13184: // 12f9:01f4
    if (ax == 0x0054)
        goto loc_131b6;
    if (ax == 0x0056)
        goto loc_1319e;
    goto loc_131bb;
loc_13190: // 12f9:0200
    memoryASet(ds, 0x8a2c, 0x01);
    goto loc_131bb;
loc_13197: // 12f9:0207
    memoryASet(ds, 0x919d, 0x01);
    goto loc_131bb;
loc_1319e: // 12f9:020e
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_131bb;
    al = 0x01;
    memoryASet(ds, 0x8f67, al); // gabo!
    memoryASet(ds, 0x919d, al);
    goto loc_131bb;
loc_131af: // 12f9:021f
    memoryASet(ds, 0x8c58, 0x01);
    goto loc_131bb;
loc_131b6: // 12f9:0226
    memoryASet(ds, 0x8bf0, 0x01);
loc_131bb: // 12f9:022b
    al = memoryAGet(ds, 0x8bda);
    ah = 0x00;
    if (ax == 0x0043)
        goto loc_131d1;
    if (ax == 0x004a)
        goto loc_131f1;
    if (ax == 0x004d)
        goto loc_131db;
    goto loc_13205;
loc_131d1: // 12f9:0241
    al = 0x00;
    memoryASet(ds, 0x8ddf, al);
    memoryASet(ds, 0x8dc4, al);
    goto loc_13205;
loc_131db: // 12f9:024b
    memoryASet(ds, 0x8ddf, 0x01);
    memoryASet(ds, 0x8dc4, 0x00);
    memoryASet(ds, 0x8da7, 0x01);
    push(cs);
    cs = 0x0a34;
    sub_a672(); // 0a34:0332
    assert(cs == 0x12f9);
    goto loc_13205;
loc_131f1: // 12f9:0261
    memoryASet(ds, 0x8dc4, 0x01);
    memoryASet(ds, 0x8ddf, 0x00);
    push(cs);
    cs = 0x0ee7;
    sub_10a9e(); // 0ee7:1c2e
    assert(cs == 0x12f9);
    memoryASet(ds, 0x8b6a, 0x01);
loc_13205: // 12f9:0275
    if (memoryAGet(ds, 0x8db5) == 0x4e)
        goto loc_13211;
    push(cs);
    cs = 0x10ba;
    sub_10baa(); // 10ba:000a
    assert(cs == 0x12f9);
loc_13211: // 12f9:0281
    if (memoryAGet(ds, 0x8db5) != 0x52)
        goto loc_1321d;
    push(cs);
    cs = 0x1162;
    sub_11673(); // 1162:0053
    assert(cs == 0x12f9);
loc_1321d: // 12f9:028d
    memoryASet(ds, 0x8a26, 0x3b);
    memoryASet(ds, 0x8bd3, 0x3c);
    memoryASet(ds, 0x8b6b, 0x3d);
    memoryASet(ds, 0x91ad, 0x3e);
    memoryASet(ds, 0x8d5b, 0x3f);
    memoryASet(ds, 0x8dd7, 0x40);
    memoryASet(ds, 0x9192, 0x41);
    memoryASet(ds, 0x8dbc, 0x42);
    memoryASet(ds, 0x8bea, 0x43);
    memoryASet(ds, 0x8e1e, 0x44);
    memoryASet(ds, 0x8dc5, 0x39);
    memoryASet(ds, 0x8bf8, 0x48);
    memoryASet(ds, 0x9090, 0x4d);
    memoryASet(ds, 0x8ba7, 0x50);
    memoryASet(ds, 0x8db2, 0x4b);
    memoryASet(ds, 0x8f66, 0x00);
    push(cs);
    cs = 0x0a34;
    sub_ad5a(); // 0a34:0a1a
    assert(cs == 0x12f9);
    memoryASet(ds, 0x8bd9, 0x00);
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_132af;
    push(cs);
    cs = 0x1ec1;
    sub_1ec1f(); // 1ec1:000f
    assert(cs == 0x12f9);
    if (dx <= 0x0004)
        goto loc_1328b;
    goto loc_13343;
loc_1328b: // 12f9:02fb
    if (dx < 0x0004)
        goto loc_13295;
    if (ax < 0xd648)
        goto loc_13295;
    goto loc_13343;
loc_13295: // 12f9:0305
    push(cs);
    cs = 0x0a34;
    sub_adf2(); // 0a34:0ab2
    assert(cs == 0x12f9);
    push(memoryAGet16(ds, 0x8de4));
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x12f9);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x12f9);
    sp++;
    sp++;
loc_132af: // 12f9:031f
    memoryASet(ds, 0x8dd0, 0x00);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_132cc;
    push(cs);
    cs = 0x1ec1;
    sub_1ec1f(); // 1ec1:000f
    assert(cs == 0x12f9);
    if (dx > 0x0004)
        goto loc_13311;
    if (dx < 0x0004)
        goto loc_132cc;
    if (ax >= 0x0358)
        goto loc_13311;
loc_132cc: // 12f9:033c
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_13300;
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x12f9);
    sp++;
    sp++;
    push(cs);
    cs = 0x1ec1;
    sub_1ec1f(); // 1ec1:000f
    assert(cs == 0x12f9);
    if (dx > 0x0005)
        goto loc_13311;
    if (dx < 0x0005)
        goto loc_132ef;
    if (ax >= 0x8358)
        goto loc_13311;
loc_132ef: // 12f9:035f
    push(cs);
    cs = 0x1ec1;
    sub_1ec1f(); // 1ec1:000f
    assert(cs == 0x12f9);
    if (dx > 0x0003)
        goto loc_13343;
    if (dx < 0x0003)
        goto loc_13300;
    if (ax >= 0x2e98)
        goto loc_13343;
loc_13300: // 12f9:0370
    push(cs);
    cs = 0x1ec1;
    sub_1ec1f(); // 1ec1:000f
    assert(cs == 0x12f9);
    if (dx < 0x0003)
        goto loc_13318;
    if (dx != 0x0003)
        goto loc_13311;
    if (ax < 0x1390)
        goto loc_13318;
loc_13311: // 12f9:0381
    memoryASet(ds, 0x8bd9, 0x01);
    goto loc_13343;
loc_13318: // 12f9:0388
    push(cs);
    cs = 0x1ec1;
    sub_1ec1f(); // 1ec1:000f
    assert(cs == 0x12f9);
    if (dx > 0x0001)
        goto loc_13343;
    if (dx < 0x0001)
        goto loc_13329;
    if (ax >= 0x7400)
        goto loc_13343;
loc_13329: // 12f9:0399
    push(cs);
    cs = 0x0a34;
    sub_adf2(); // 0a34:0ab2
    assert(cs == 0x12f9);
    push(memoryAGet16(ds, 0x8de4));
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x12f9);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x12f9);
    sp++;
    sp++;
loc_13343: // 12f9:03b3
    memoryASet(ds, 0x8bd9, 0x00);
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_1335a;
    ax = 0x0013;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x12f9);
    sp++;
    sp++;
loc_1335a: // 12f9:03ca
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_1336c;
    ax = 0x000d;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x12f9);
    sp++;
    sp++;
loc_1336c: // 12f9:03dc
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_1337e;
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x12f9);
    sp++;
    sp++;
loc_1337e: // 12f9:03ee
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1338a;
    push(cs);
    cs = 0x0ee7;
    sub_10a05(); // 0ee7:1b95
    assert(cs == 0x12f9);
loc_1338a: // 12f9:03fa
    if (memoryAGet(ds, 0x8a2c) == 0x00)
        goto loc_1339c;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x12f9);
    sp++;
    sp++;
loc_1339c: // 12f9:040c
    if (memoryAGet(ds, 0x8dd0) != 0x00)
        goto loc_133aa;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_133af;
loc_133aa: // 12f9:041a
    push(cs);
    cs = 0x023f;
    sub_2473(); // 023f:0083
    assert(cs == 0x12f9);
loc_133af: // 12f9:041f
    memoryASet16(ds, 0x908e, 0x0000);
    memoryASet16(ds, 0x908c, 0x0000);
    bx = 0;
    es = bx;
    memoryASet16(ds, 0x8b6e, es);
    memoryASet16(ds, 0x8b6c, bx);
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_133fb;
    dx = 0x0002;
    ax = 0x22e0;
    push(dx);
    push(ax);
    push(cs);
    sub_12f92(); // 12f9:0002
    sp += 0x0004;
    ax = 0x1f40;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8da4, dx);
    memoryASet16(ds, 0x8da2, ax);
    bx = memoryAGet16(ds, 0x908c);
    es = memoryAGet16(ds, 0x908c + 2);
    memoryASet16(ds, 0x8b6e, es);
    memoryASet16(ds, 0x8b6c, bx);
loc_133fb: // 12f9:046b
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_1342f;
    dx = 0x0002;
    ax = 0x9810;
    push(dx);
    push(ax);
    push(cs);
    sub_12f92(); // 12f9:0002
    sp += 0x0004;
    bx = memoryAGet16(ds, 0x908c);
    es = memoryAGet16(ds, 0x908c + 2);
    memoryASet16(ds, 0x8b6e, es);
    memoryASet16(ds, 0x8b6c, bx);
    ax = 0x1b58;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8da4, dx);
    memoryASet16(ds, 0x8da2, ax);
loc_1342f: // 12f9:049f
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_13463;
    dx = 0x0003;
    ax = 0xf7a0;
    push(dx);
    push(ax);
    push(cs);
    sub_12f92(); // 12f9:0002
    sp += 0x0004;
    bx = memoryAGet16(ds, 0x908c);
    es = memoryAGet16(ds, 0x908c + 2);
    memoryASet16(ds, 0x8b6e, es);
    memoryASet16(ds, 0x8b6c, bx);
    ax = 0x1b58;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8da4, dx);
    memoryASet16(ds, 0x8da2, ax);
loc_13463: // 12f9:04d3
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_13471;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1349e;
loc_13471: // 12f9:04e1
    dx = 0x0001;
    ax = 0xfbd0;
    push(dx);
    push(ax);
    push(cs);
    sub_12f92(); // 12f9:0002
    sp += 0x0004;
    bx = memoryAGet16(ds, 0x908c);
    es = memoryAGet16(ds, 0x908c + 2);
    memoryASet16(ds, 0x8b6e, es);
    memoryASet16(ds, 0x8b6c, bx);
    ax = 0x1b58;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8da4, dx);
    memoryASet16(ds, 0x8da2, ax);
loc_1349e: // 12f9:050e
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8f6a, dx);
    memoryASet16(ds, 0x8f68, ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8bb2, dx);
    memoryASet16(ds, 0x8bb0, ax);
    bx = memoryAGet16(ds, 0x8f68);
    es = memoryAGet16(ds, 0x8f68 + 2);
    memoryASet16(ss, bp - 210, es);
    memoryASet16(ss, bp - 212, bx);
    bx += 0x0008;
    memoryASet16(ss, bp - 206, es);
    memoryASet16(ss, bp - 208, bx);
    bx = memoryAGet16(ds, 0x8bb0);
    es = memoryAGet16(ds, 0x8bb0 + 2);
    memoryASet16(ss, bp - 202, es);
    memoryASet16(ss, bp - 204, bx);
    bx = ax;
    bx += 0x0008;
    memoryASet16(ss, bp - 198, es);
    memoryASet16(ss, bp - 200, bx);
    memoryASet(ss, bp - 214, 0x00);
    goto loc_1353f;
loc_134f9: // 12f9:0569
    al = memoryAGet(ss, bp - 214);
    bx = memoryAGet16(ss, bp - 212);
    es = memoryAGet16(ss, bp - 212 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 212, memoryAGet16(ss, bp - 212) + 1);
    al = memoryAGet(ss, bp - 214);
    bx = memoryAGet16(ss, bp - 204);
    es = memoryAGet16(ss, bp - 204 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 204, memoryAGet16(ss, bp - 204) + 1);
    al = memoryAGet(ss, bp - 214);
    al += 0x08;
    bx = memoryAGet16(ss, bp - 208);
    es = memoryAGet16(ss, bp - 208 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 208, memoryAGet16(ss, bp - 208) + 1);
    al = memoryAGet(ss, bp - 214);
    al += 0x08;
    bx = memoryAGet16(ss, bp - 200);
    es = memoryAGet16(ss, bp - 200 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 200, memoryAGet16(ss, bp - 200) + 1);
    memoryASet(ss, bp - 214, memoryAGet(ss, bp - 214) + 1);
loc_1353f: // 12f9:05af
    if (memoryAGet(ss, bp - 214) < 0x08)
        goto loc_134f9;
    memoryASet(ss, bp - 214, 0x00);
    goto loc_135e9;
loc_1354e: // 12f9:05be
    if (memoryAGet(ss, bp - 214) >= 0x08)
        goto loc_1355f;
    al = memoryAGet(ss, bp - 214);
    memoryASet(ss, bp - 213, al);
    goto loc_1356a;
loc_1355f: // 12f9:05cf
    al = memoryAGet(ss, bp - 214);
    al += 0x08;
    memoryASet(ss, bp - 213, al);
loc_1356a: // 12f9:05da
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
    al = memoryAGet(ss, bp - 213);
    dl = memoryAGet(ss, bp - 214);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    bx += dx;
    memoryASet(es, bx + 5, al);
    memoryASet16(ss, bp - 4, 0x8b70);
    al = memoryAGet(ss, bp - 213);
    dl = memoryAGet(ss, bp - 214);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx + 5, al);
    memoryASet16(ss, bp - 4, 0x8e20);
    al = memoryAGet(ss, bp - 213);
    dl = memoryAGet(ss, bp - 214);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx + 5, al);
    memoryASet16(ss, bp - 4, 0x92c8);
    al = memoryAGet(ss, bp - 213);
    dl = memoryAGet(ss, bp - 214);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx + 5, al);
    memoryASet16(ss, bp - 4, 0x8bba);
    al = memoryAGet(ss, bp - 213);
    dl = memoryAGet(ss, bp - 214);
    dh = 0x00;
    bx = memoryAGet16(ss, bp - 4);
    bx += dx;
    memoryASet(es, bx + 5, al);
    memoryASet(ss, bp - 214, memoryAGet(ss, bp - 214) + 1);
loc_135e9: // 12f9:0659
    if (memoryAGet(ss, bp - 214) >= 0x10)
        goto loc_135f3;
    goto loc_1354e;
loc_135f3: // 12f9:0663
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 2, 0xa000);
    memoryASet16(es, bx, 0x0000);
    memoryASet(es, bx + 4, 0x00);
    memoryASet(es, bx + 21, 0x01);
    memoryASet(es, bx + 22, 0x00);
    memoryASet(es, bx + 23, 0x01);
    memoryASet16(ss, bp - 4, 0x8b70);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet16(es, bx + 2, 0xa200);
    memoryASet16(es, bx, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 4, 0x01);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 21, 0x01);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 22, 0x00);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 23, 0x01);
    memoryASet16(ss, bp - 4, 0x8e20);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet16(es, bx + 2, 0xa400);
    memoryASet16(es, bx, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 4, 0x02);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 21, 0x01);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 22, 0x00);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 23, 0x01);
    memoryASet16(ss, bp - 4, 0x92c8);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet16(es, bx + 2, 0xa600);
    memoryASet16(es, bx, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 4, 0x03);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 21, 0x01);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 22, 0x00);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 23, 0x01);
    memoryASet16(ss, bp - 4, 0x8bba);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet16(es, bx + 2, 0xa800);
    memoryASet16(es, bx, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 4, 0x04);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 21, 0x01);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 22, 0x00);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx + 23, 0x01);
    al = 0x01;
    memoryASet(ds, 0x9091, al);
    memoryASet(ds, 0x919e, al);
    memoryASet16(ds, 0x88d6, 0x007f);
    ax = 0;
    memoryASet16(ds, 0x92b8, ax);
    memoryASet16(ds, 0x8bd6, ax);
    ax = 0x00c8;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x91b2, dx);
    memoryASet16(ds, 0x91b0, ax);
    ax = 0x0190;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8f82, dx);
    memoryASet16(ds, 0x8f80, ax);
    ax = 0x00c8;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8ba4, dx);
    memoryASet16(ds, 0x8ba2, ax);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_1374c;
    bx = ss;
    es = bx;
    bx = bp - 0xc4;
    memoryASet16(ds, 0x8df0, es);
    memoryASet16(ds, 0x8dee, bx);
loc_1374c: // 12f9:07bc
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1375a;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_13769;
loc_1375a: // 12f9:07ca
    bx = ss;
    es = bx;
    bx = bp - 0x4c;
    memoryASet16(ds, 0x8df0, es);
    memoryASet16(ds, 0x8dee, bx);
loc_13769: // 12f9:07d9
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_1377c;
    bx = memoryAGet16(ds, 0x8f80);
    es = memoryAGet16(ds, 0x8f80 + 2);
    memoryASet16(ds, 0x8df0, es);
    memoryASet16(ds, 0x8dee, bx);
loc_1377c: // 12f9:07ec
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_1378f;
    bx = memoryAGet16(ds, 0x8ba2);
    es = memoryAGet16(ds, 0x8ba2 + 2);
    memoryASet16(ds, 0x8df0, es);
    memoryASet16(ds, 0x8dee, bx);
loc_1378f: // 12f9:07ff
    ax = 0x00a0;
    memoryASet16(ds, 0x8a28, ax);
    memoryASet16(ds, 0x8d60, ax);
    ax = 0x0064;
    memoryASet16(ds, 0x91a0, ax);
    memoryASet16(ds, 0x8db8, ax);
    dx = 0;
    ax = 0x0078;
    push(dx);
    push(ax);
    push(memoryAGet16(ds, 0x8f82));
    push(memoryAGet16(ds, 0x8f80));
    push(ss);
    ax = bp - 0xc4;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_5ada(); // 023f:36ea
    assert(cs == 0x12f9);
    sp += 0x000c;
    dx = 0;
    ax = 0x0078;
    push(dx);
    push(ax);
    push(memoryAGet16(ds, 0x8ba4));
    push(memoryAGet16(ds, 0x8ba2));
    push(ss);
    ax = bp - 0xc4;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_5d4f(); // 023f:395f
    assert(cs == 0x12f9);
    sp += 0x000c;
    ax = 0x0088;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8dae, dx);
    memoryASet16(ds, 0x8dac, ax);
    bx = memoryAGet16(ds, 0x8dac);
    es = memoryAGet16(ds, 0x8dac + 2);
    memoryASet16(ds, 0x8ddc, es);
    memoryASet16(ds, 0x8dda, bx);
    ax = 0x003c;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8dd4, dx);
    memoryASet16(ds, 0x8dd2, ax);
    bx = memoryAGet16(ds, 0x8dd2);
    es = memoryAGet16(ds, 0x8dd2 + 2);
    memoryASet16(ds, 0x8e3c, es);
    memoryASet16(ds, 0x8e3a, bx);
    ax = 0x0102;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8d5e, dx);
    memoryASet16(ds, 0x8d5c, ax);
    bx = memoryAGet16(ds, 0x8d5c);
    es = memoryAGet16(ds, 0x8d5c + 2);
    memoryASet16(ds, 0x91aa, es);
    memoryASet16(ds, 0x91a8, bx);
    memoryASet16(ds, 0x8da0, 0x0000);
    goto loc_138a9;
loc_1383d: // 12f9:08ad
    ax = memoryAGet16(ds, 0x8da0);
    ax >>= 1;
    al &= 0x20;
    dl = memoryAGet(ds, 0x8da0);
    dl &= 0x80;
    al |= dl;
    dx = memoryAGet16(ds, 0x8da0);
    dx >>= 1;
    dx >>= 1;
    dl &= 0x08;
    al |= dl;
    dx = memoryAGet16(ds, 0x8da0);
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dl &= 0x02;
    al |= dl;
    dl = memoryAGet(ds, 0x8da0);
    dl <<= 1;
    dl <<= 1;
    dl <<= 1;
    dl &= 0x40;
    al |= dl;
    dl = memoryAGet(ds, 0x8da0);
    dl <<= 1;
    dl <<= 1;
    dl &= 0x10;
    al |= dl;
    dl = memoryAGet(ds, 0x8da0);
    dl <<= 1;
    dl &= 0x04;
    al |= dl;
    dl = memoryAGet(ds, 0x8da0);
    dl &= 0x01;
    al |= dl;
    bx = memoryAGet16(ds, 0x8d5c);
    es = memoryAGet16(ds, 0x8d5c + 2);
    bx += memoryAGet16(ds, 0x8da0);
    memoryASet(es, bx, al);
    memoryASet16(ds, 0x8da0, memoryAGet16(ds, 0x8da0) + 1);
loc_138a9: // 12f9:0919
    if (memoryAGet16(ds, 0x8da0) < 0x0100)
        goto loc_1383d;
    bx = memoryAGet16(ds, 0x8dcc);
    es = memoryAGet16(ds, 0x8dcc + 2);
    memoryASet16(ds, 0x8be4, es);
    memoryASet16(ds, 0x8be2, bx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    memoryASet16(ds, 0x8bde, es);
    memoryASet16(ds, 0x8bdc, bx);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_138d3;
    goto loc_13ae2;
loc_138d3: // 12f9:0943
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_138e1;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_138ee;
loc_138e1: // 12f9:0951
    bx = memoryAGet16(ds, 0x8bb0);
    es = memoryAGet16(ds, 0x8bb0 + 2);
    memoryASet(es, bx, 0x03);
    memoryASet(es, bx + 1, 0x00);
loc_138ee: // 12f9:095e
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_13900;
    goto loc_1390e;
loc_13900: // 12f9:0970
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 2, 0xb000);
    memoryASet16(es, bx, 0x0000);
loc_1390e: // 12f9:097e
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1391c;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_1392a;
loc_1391c: // 12f9:098c
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 2, 0xb800);
    memoryASet16(es, bx, 0x0000);
loc_1392a: // 12f9:099a
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_1393f;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 2, 0xa000);
    memoryASet16(es, bx, 0x0000);
loc_1393f: // 12f9:09af
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1394d;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1395a;
loc_1394d: // 12f9:09bd
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx + 6, 0x00);
    memoryASet(es, bx + 5, 0x00);
loc_1395a: // 12f9:09ca
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_13975;
    memoryASet16(ds, 0x8dec, 0xb800);
    memoryASet16(ds, 0x8dea, 0x0000);
loc_13975: // 12f9:09e5
    if (memoryAGet(ds, 0x8a2c) == 0x00)
        goto loc_1398e;
    ax = 0x4000;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8dec, dx);
    memoryASet16(ds, 0x8dea, ax);
loc_1398e: // 12f9:09fe
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_139a7;
    ax = 0x8000;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8dec, dx);
    memoryASet16(ds, 0x8dea, ax);
loc_139a7: // 12f9:0a17
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_139c0;
    ax = 0xfa00;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8dec, dx);
    memoryASet16(ds, 0x8dea, ax);
loc_139c0: // 12f9:0a30
    dx = memoryAGet16(ds, 0x8dec);
    ax = memoryAGet16(ds, 0x8dea);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_139e2;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_139e2;
    goto loc_139ef;
loc_139e2: // 12f9:0a52
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx + 6, 0x00);
    memoryASet(es, bx + 5, 0x00);
loc_139ef: // 12f9:0a5f
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8e20);
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_13a05;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_13a17;
loc_13a05: // 12f9:0a75
    ax = 0x4000;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x92c0, dx);
    memoryASet16(ds, 0x92be, ax);
loc_13a17: // 12f9:0a87
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_13a30;
    ax = 0x8000;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x92c0, dx);
    memoryASet16(ds, 0x92be, ax);
loc_13a30: // 12f9:0aa0
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_13a49;
    ax = 0xfa00;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x92c0, dx);
    memoryASet16(ds, 0x92be, ax);
loc_13a49: // 12f9:0ab9
    dx = memoryAGet16(ds, 0x92c0);
    ax = memoryAGet16(ds, 0x92be);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_13a68;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_13a75;
loc_13a68: // 12f9:0ad8
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx + 6, 0x00);
    memoryASet(es, bx + 5, 0x00);
loc_13a75: // 12f9:0ae5
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x92c8);
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_13a8b;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_13a9d;
loc_13a8b: // 12f9:0afb
    ax = 0x4000;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8bac, dx);
    memoryASet16(ds, 0x8baa, ax);
loc_13a9d: // 12f9:0b0d
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_13ab6;
    ax = 0x8000;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x12f9);
    sp++;
    sp++;
    memoryASet16(ds, 0x8bac, dx);
    memoryASet16(ds, 0x8baa, ax);
loc_13ab6: // 12f9:0b26
    dx = memoryAGet16(ds, 0x8bac);
    ax = memoryAGet16(ds, 0x8baa);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_13ad5;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_13ae2;
loc_13ad5: // 12f9:0b45
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx + 6, 0x00);
    memoryASet(es, bx + 5, 0x00);
loc_13ae2: // 12f9:0b52
    memoryASet16(ds, 0x8bee, ds);
    memoryASet16(ds, 0x8bec, 0x8b70);
    memoryASet16(ds, 0x8db0, 0x0000);
    push(cs);
    cs = 0x1ec1;
    sub_1ec1f(); // 1ec1:000f
    assert(cs == 0x12f9);
    memoryASet16(ds, 0x8b8e, dx);
    memoryASet16(ds, 0x8b8c, ax);
    cx = 0x0003;
    push(cs);
    cs = 0x01ed;
    sub_20f5(); // 01ed:0225
    assert(cs == 0x12f9);
    memoryASet16(ds, 0x8b8e, dx);
    memoryASet16(ds, 0x8b8c, ax);
    cx = 0x0009;
    push(cs);
    cs = 0x01ed;
    sub_20f5(); // 01ed:0225
    assert(cs == 0x12f9);
    memoryASet16(ds, 0x8b8e, dx);
    memoryASet16(ds, 0x8b8c, ax);
    cx = 0x0009;
    push(cs);
    cs = 0x01ed;
    sub_20cf(); // 01ed:01ff
    assert(cs == 0x12f9);
    memoryASet16(ds, 0x8b8e, dx);
    memoryASet16(ds, 0x8b8c, ax);
    if (dx)
        goto loc_13b42;
    if (false)
        goto loc_13b36;
    if (ax >= 0x0800)
        goto loc_13b42;
loc_13b36: // 12f9:0ba6
    memoryASet16(ds, 0x8b8e, 0x0000);
    memoryASet16(ds, 0x8b8c, 0x0800);
loc_13b42: // 12f9:0bb2
    if (memoryAGet16(ds, 0x8b8e) < 0x0000)
        goto loc_13b5f;
    if (memoryAGet16(ds, 0x8b8e) > 0x0000)
        goto loc_13b53;
    if (memoryAGet16(ds, 0x8b8c) <= 0x5000)
        goto loc_13b5f;
loc_13b53: // 12f9:0bc3
    memoryASet16(ds, 0x8b8e, 0x0000);
    memoryASet16(ds, 0x8b8c, 0x5000);
loc_13b5f: // 12f9:0bcf
    memoryASet16(ds, 0x8b8e, 0x0000);
    memoryASet16(ds, 0x8b8c, 0x0800);
    memoryASet16(ds, 0x919a, 0x0000);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1cc0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_779c(); // 06c1:0b8c
    assert(cs == 0x12f9);
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1cca;
    push(ax);
    push(memoryAGet16(ds, 0x8bd6));
    push(cs);
    cs = 0x06c1;
    sub_99b4(); // 06c1:2da4
    assert(cs == 0x12f9);
    sp += 0x0008;
    memoryASet16(ds, 0x8bd6, memoryAGet16(ds, 0x8bd6) + ax);
    memoryASet16(ds, 0x8dd8, 0x0000);
    memoryASet(ss, bp - 214, 0x00);
    goto loc_13bd2;
loc_13ba6: // 12f9:0c16
    dx = 0;
    ax = dx;
    bl = memoryAGet(ss, bp - 214);
    bh = 0x00;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 36344, dx);
    memoryASet16(ds, bx + 36342, ax);
    bl = memoryAGet(ss, bp - 214);
    bh = 0x00;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 36672, dx);
    memoryASet16(ds, bx + 36670, ax);
    memoryASet(ss, bp - 214, memoryAGet(ss, bp - 214) + 1);
loc_13bd2: // 12f9:0c42
    if (memoryAGet(ss, bp - 214) < 0x0a)
        goto loc_13ba6;
    push(cs);
    cs = 0x1dc4;
    sub_1e0fe(); // 1dc4:04be
    assert(cs == 0x12f9);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_13be3() // 12f9:0c53
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(memoryAGet16(ds, 0x91b2));
    push(memoryAGet16(ds, 0x91b0));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8f82));
    push(memoryAGet16(ds, 0x8f80));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8ba4));
    push(memoryAGet16(ds, 0x8ba2));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x91aa));
    push(memoryAGet16(ds, 0x91a8));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_13c70;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_13c40;
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_13c40;
    if (memoryAGet(ds, 0x8dd0) == 0x00)
        goto loc_13c50;
loc_13c40: // 12f9:0cb0
    push(memoryAGet16(ds, 0x8dec));
    push(memoryAGet16(ds, 0x8dea));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
loc_13c50: // 12f9:0cc0
    push(memoryAGet16(ds, 0x92c0));
    push(memoryAGet16(ds, 0x92be));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8bac));
    push(memoryAGet16(ds, 0x8baa));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
loc_13c70: // 12f9:0ce0
    push(memoryAGet16(ds, 0x8bde));
    push(memoryAGet16(ds, 0x8bdc));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8be4));
    push(memoryAGet16(ds, 0x8be2));
    push(cs);
    cs = 0x1ec3;
    sub_1ec34(); // 1ec3:0004
    assert(cs == 0x12f9);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8e3c));
    push(memoryAGet16(ds, 0x8e3a));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8ddc));
    push(memoryAGet16(ds, 0x8dda));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    ax = memoryAGet16(ds, 0x8b6c);
    ax |= memoryAGet16(ds, 0x8b6e);
    if (!ax)
        goto loc_13cc9;
    push(memoryAGet16(ds, 0x8b6e));
    push(memoryAGet16(ds, 0x8b6c));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
loc_13cc9: // 12f9:0d39
    push(memoryAGet16(ds, 0x8f6a));
    push(memoryAGet16(ds, 0x8f68));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    push(memoryAGet16(ds, 0x8bb2));
    push(memoryAGet16(ds, 0x8bb0));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
    if (memoryAGet(ds, 0x8db5) == 0x4e)
        goto loc_13cff;
    push(cs);
    cs = 0x1162;
    sub_116b1(); // 1162:0091
    assert(cs == 0x12f9);
    push(cs);
    cs = 0x11cd;
    sub_11cef(); // 11cd:001f
    assert(cs == 0x12f9);
    push(cs);
    cs = 0x10ba;
    sub_10bfb(); // 10ba:005b
    assert(cs == 0x12f9);
loc_13cff: // 12f9:0d6f
    if (memoryAGet(ds, 0x92c6) == 0x00)
        goto loc_13d16;
    push(memoryAGet16(ds, 0x8bf4));
    push(memoryAGet16(ds, 0x8bf2));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
loc_13d16: // 12f9:0d86
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_13d27;
    push(cs);
    cs = 0x127c;
    sub_12886(); // 127c:00c6
    assert(cs == 0x12f9);
    push(cs);
    cs = 0x127c;
    sub_128f6(); // 127c:0136
    assert(cs == 0x12f9);
loc_13d27: // 12f9:0d97
    if (memoryAGet(ds, 0x8db5) != 0x52)
        goto loc_13d54;
    push(cs);
    cs = 0x1162;
    sub_11673(); // 1162:0053
    assert(cs == 0x12f9);
    if (memoryAGet16(ds, 0x92c4) == 0x0000)
        goto loc_13d54;
    if (memoryAGet16(ds, 0x8a2a) != 0x0000)
        goto loc_13d54;
loc_13d41: // 12f9:0db1
    dx = memoryAGet16(ds, 0x8f7c);
    dx++;
    in(al, dx);
    if (al & 0x40)
        goto loc_13d41;
    dx = memoryAGet16(ds, 0x8f7c);
    dx++;
    al = 0xff;
    out(dx, al);
loc_13d54: // 12f9:0dc4
    si = 0;
    goto loc_13d7f;
loc_13d58: // 12f9:0dc8
    bx = si;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 36670);
    ax |= memoryAGet16(ds, bx + 36672);
    if (!ax)
        goto loc_13d7e;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 36672));
    push(memoryAGet16(ds, bx + 36670));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
loc_13d7e: // 12f9:0dee
    si++;
loc_13d7f: // 12f9:0def
    if ((short)si < (short)0x000a)
        goto loc_13d58;
    si = 0;
    goto loc_13daf;
loc_13d88: // 12f9:0df8
    bx = si;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 36342);
    ax |= memoryAGet16(ds, bx + 36344);
    if (!ax)
        goto loc_13dae;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 36344));
    push(memoryAGet16(ds, bx + 36342));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
loc_13dae: // 12f9:0e1e
    si++;
loc_13daf: // 12f9:0e1f
    if ((short)si < (short)0x000a)
        goto loc_13d88;
    si = 0;
    goto loc_13ddf;
loc_13db8: // 12f9:0e28
    bx = si;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 35374);
    ax |= memoryAGet16(ds, bx + 35376);
    if (!ax)
        goto loc_13dde;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 35376));
    push(memoryAGet16(ds, bx + 35374));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x12f9);
    sp += 0x0004;
loc_13dde: // 12f9:0e4e
    si++;
loc_13ddf: // 12f9:0e4f
    if ((short)si < (short)0x000e)
        goto loc_13db8;
    push(cs);
    cs = 0x0a34;
    sub_adf2(); // 0a34:0ab2
    assert(cs == 0x12f9);
    push(memoryAGet16(ds, 0x8de4));
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x12f9);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1ea9;
    sub_1ea99(); // 1ea9:0009
    assert(cs == 0x12f9);
    sp++;
    sp++;
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_13e00() // 13e0:0000
{
    CStackGuardFar sg(0, false);
    memoryASet16(ds, 0x97e0, 0x0011);
    memoryASet16(ds, 0x9872, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x9c6e, ax);
    memoryASet16(ds, 0x9c68, ax); // screen
    memoryASet16(ds, 0x9c6a, ax);
    memoryASet16(ds, 0x9874, 0x0028);
    memoryASet16(ds, 0x988e, 0x0064);
    memoryASet16(ds, 0x97f2, 0x0042);
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x97e2, ax);
    memoryASet16(ds, 0x9892, ax);
    memoryASet16(ds, 0x97ea, ax);
    memoryASet16(ds, 0x9c62, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97f4, 0x0014);
    memoryASet16(ds, 0x989c, ax);
    memoryASet16(ds, 0x97e8, ax);
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x97f0, ax);
    memoryASet16(ds, 0x97ee, 0x0001);
    memoryASet16(ds, 0x9c66, 0x0063); // time
    memoryASet16(ds, 0x985a, ax);
    memoryASet16(ds, 0x9880, ax); // food
    memoryASet16(ds, 0x989a, 0x000a); // energy
    cs = pop();
}
// Discard check failed in sub_13e6f: cur=13e0:0597 last=13e0:058d> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
void sub_13e6f() // 13e0:006f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    memoryASet(ss, bp - 6, 0x00);
    memoryASet(ss, bp - 5, 0x00);
    memoryASet16(ds, 0x9c6c, 0x0001);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19382(); // 18f7:0412
    assert(cs == 0x13e0);
    sp++;
    sp++;
    ax = 0x1f40;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x13e0);
    sp++;
    sp++;
    memoryASet16(ds, 0x987c, dx);
    memoryASet16(ds, 0x987a, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(ds);
    ax = 0x1d00;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x13e0);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x8bd6);
    memoryASet16(ds, 0x988a, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1d0a;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x13e0);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x988a);
    memoryASet16(ds, 0x9896, ax);
    push(cs);
    cs = 0x1829;
    sub_18293(); // 1829:0003
    assert(cs == 0x13e0);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1d14;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x13e0);
    sp += 0x0008;
    di = ax;
    ax = memoryAGet16(ds, 0x9896);
    ax += di;
    memoryASet16(ds, 0x9882, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1d1f;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x13e0);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x9882);
    memoryASet16(ds, 0x9878, ax);
    ax = 0x0030;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x13e0);
    sp++;
    sp++;
    ax = 0x0031;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x13e0);
    sp++;
    sp++;
    ax = 0x0032;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x13e0);
    sp++;
    sp++;
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x13e0);
    sp++;
    sp++;
    ax = memoryAGet16(ds, 0x9878);
    ax += 0x0003;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_1946a(); // 18f7:04fa
    assert(cs == 0x13e0);
    sp++;
    sp++;
    push(ds);
    ax = 0x1d29;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19e49(); // 19e4:0009
    assert(cs == 0x13e0);
    sp += 0x0004;
    push(cs);
    sub_13e00(); // 13e0:0000
    push(ds);
    ax = 0x33c2;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x13e0);
    sp += 0x0004;
    push(ds);
    ax = 0x2950;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x13e0);
    sp += 0x0004;
    push(ds);
    ax = 0x29e2;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x13e0);
    sp += 0x0004;
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x13e0);
    sp += 0x0004;
loc_13f97: // 13e0:0197
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_13fa1;
    goto loc_14605;
loc_13fa1: // 13e0:01a1
    if (memoryAGet16(ds, 0x9c68) != 0x0013)
        goto loc_13fab;
    goto loc_14605;
loc_13fab: // 13e0:01ab
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x13e0);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_13ff4;
    if (memoryAGet16(ds, 0x9c68) == 0x000b)
        goto loc_13fdc;
    push(memoryAGet16(ds, 0x9c68));
    push(ds);
    ax = 0x209e;
    push(ax);
    push(ds);
    ax = 0x2076;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19f50(); // 19e4:0110
    assert(cs == 0x13e0);
    sp += 0x000a;
    goto loc_14002;
loc_13fdc: // 13e0:01dc
    ax = 0x000a;
    push(ax);
    push(ds);
    ax = 0x209e;
    push(ax);
    push(ds);
    ax = 0x2076;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19f50(); // 19e4:0110
    assert(cs == 0x13e0);
    sp += 0x000a;
    goto loc_14002;
loc_13ff4: // 13e0:01f4
    ax = memoryAGet16(ds, 0x9c68);
    ax += 0xff9c;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a03f(); // 19e4:01ff
    assert(cs == 0x13e0);
    sp++;
    sp++;
loc_14002: // 13e0:0202
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_1401c;
    push(memoryAGet16(ds, 0x9c68));
    push(ds);
    ax = 0x33c2;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x13e0);
    sp += 0x0006;
    goto loc_14030;
loc_1401c: // 13e0:021c
    ax = memoryAGet16(ds, 0x9c68);
    ax += 0xff9c;
    push(ax);
    push(ds);
    ax = 0x2950;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x13e0);
    sp += 0x0006;
loc_14030: // 13e0:0230
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_1404a;
    bx = memoryAGet16(ds, 0x9c68);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7384));
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x13e0);
    sp++;
    sp++;
    goto loc_14055;
loc_1404a: // 13e0:024a
    ax = 0x00a8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x13e0);
    sp++;
    sp++;
loc_14055: // 13e0:0255
    push(cs);
    cs = 0x19e4;
    sub_1a4da(); // 19e4:069a
    assert(cs == 0x13e0);
    memoryASet(ss, bp - 7, 0x00);
    memoryASet16(ds, 0x9872, 0x0000);
    push(cs);
    cs = 0x19e4;
    sub_1b214(); // 19e4:13d4
    assert(cs == 0x13e0);
    push(cs);
    cs = 0x19e4;
    sub_1b3e8(); // 19e4:15a8
    assert(cs == 0x13e0);
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x13e0);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x13e0);
    push(cs);
    cs = 0x19e4;
    sub_1b341(); // 19e4:1501
    assert(cs == 0x13e0);
    si = 0;
    goto loc_14090;
loc_14081: // 13e0:0281
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38918, 0x0000);
    si++;
loc_14090: // 13e0:0290
    if (si < 0x000a)
        goto loc_14081;
    memoryASet16(ds, 0x97e4, 0x0000);
    memoryASet16(ds, 0x9894, 0x0000);
    memoryASet16(ds, 0x97e6, 0x0000);
    memoryASet16(ds, 0x987e, 0x0000);
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x13e0);
loc_140b2: // 13e0:02b2
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_140bc;
    goto loc_145ce;
loc_140bc: // 13e0:02bc
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_140c6;
    goto loc_145ce;
loc_140c6: // 13e0:02c6
    ax = memoryAGet16(ds, 0x985a);
    memoryASet16(ds, 0x985a, memoryAGet16(ds, 0x985a) + 1);
    if (ax <= 0x003c)
        goto loc_14103;
    if (memoryAGet16(ds, 0x9c66) == 0x0000)
        goto loc_140df;
    memoryASet16(ds, 0x9c66, memoryAGet16(ds, 0x9c66) - 1);
    goto loc_140f8;
loc_140df: // 13e0:02df
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_140f8;
    memoryASet16(ds, 0x9874, 0x0000);
    memoryASet16(ds, 0x9870, 0x0001);
    memoryASet16(ds, 0x97fa, 0x0001);
loc_140f8: // 13e0:02f8
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x13e0);
    memoryASet16(ds, 0x985a, 0x0000);
loc_14103: // 13e0:0303
    push(cs);
    cs = 0x19e4;
    sub_1b0b7(); // 19e4:1277
    assert(cs == 0x13e0);
    push(cs);
    cs = 0x19e4;
    sub_1a5d8(); // 19e4:0798
    assert(cs == 0x13e0);
    memoryASet16(ds, 0x97e6, 0x0000);
    push(cs);
    cs = 0x1bf1;
    sub_1bf13(); // 1bf1:0003
    assert(cs == 0x13e0);
    push(cs);
    cs = 0x19e4;
    sub_1a6df(); // 19e4:089f
    assert(cs == 0x13e0);
    if (memoryAGet16(ds, 0x9c68) == 0x0064)
        goto loc_1412b;
    if (memoryAGet16(ds, 0x9c68) != 0x0065)
        goto loc_14190;
loc_1412b: // 13e0:032b
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0014)
        goto loc_14176;
    if (memoryAGet16(ds, 0x97f2) != 0x008b)
        goto loc_14176;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0014);
    ax = memoryAGet16(ds, 0x97f4);
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ds, 0x97f4, ax);
    if (ax <= 0x007f)
        goto loc_14154;
    memoryASet16(ds, 0x97f4, 0x007f);
loc_14154: // 13e0:0354
    memoryASet16(ds, 0x9868, 0x0001);
    ax = 0;
    push(ax);
    ax = 0x0093;
    push(ax);
    ax = 0x0094;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x13e0);
    sp += 0x000a;
    goto loc_14190;
loc_14176: // 13e0:0376
    ax = 0;
    push(ax);
    ax = 0x0093;
    push(ax);
    ax = 0x00a4;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x13e0);
    sp += 0x000a;
loc_14190: // 13e0:0390
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_141a8;
    if (memoryAGet16(ds, 0x97e8) == 0x0000)
        goto loc_141a8;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0003);
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0003);
loc_141a8: // 13e0:03a8
    if (memoryAGet16(ds, 0x9c68) != 0x000c)
        goto loc_141e2;
    if (memoryAGet16(ds, 0x97e8) == 0x0000)
        goto loc_141e2;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x003c)
        goto loc_141ca;
    memoryASet16(ds, 0x97f2, 0x0050);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0005);
    goto loc_141e2;
loc_141ca: // 13e0:03ca
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x9c64, ax);
    ax = memoryAGet16(ds, 0x97f2);
    memoryASet16(ds, 0x97fc, ax);
    memoryASet16(ds, 0x97e8, 0x0000);
    memoryASet16(ds, 0x9874, 0x0027);
loc_141e2: // 13e0:03e2
    ax = 0;
    memoryASet16(ds, 0x9898, ax);
    memoryASet16(ds, 0x9802, ax);
    memoryASet16(ds, 0x988c, ax);
    memoryASet16(ds, 0x986a, ax);
    push(cs);
    cs = 0x0a34;
    sub_a9f3(); // 0a34:06b3
    assert(cs == 0x13e0);
    al = memoryAGet(ds, 0x8db4);
    ah = 0x00;
    memoryASet16(ds, 0x9898, ax);
    al = memoryAGet(ds, 0x92b6);
    ah = 0x00;
    memoryASet16(ds, 0x9802, ax);
    al = memoryAGet(ds, 0x8baf);
    ah = 0x00;
    memoryASet16(ds, 0x986a, ax);
    al = memoryAGet(ds, 0x8da6);
    ah = 0x00;
    memoryASet16(ds, 0x988c, ax);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x13e0);
    if (memoryAGet16(ds, 0x9c68) == 0x000a)
        goto loc_1422f;
    if (memoryAGet16(ds, 0x9c68) != 0x000b)
        goto loc_14234;
    if (memoryAGet16(ds, 0x97e8) == 0x0000)
        goto loc_14234;
loc_1422f: // 13e0:042f
    push(cs);
    cs = 0x19e4;
    sub_1b934(); // 19e4:1af4
    assert(cs == 0x13e0);
loc_14234: // 13e0:0434
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_1423f;
    push(cs);
    cs = 0x19e4;
    sub_1b991(); // 19e4:1b51
    assert(cs == 0x13e0);
loc_1423f: // 13e0:043f
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_142a6;
    push(cs);
    cs = 0x19e4;
    sub_1bdb2(); // 19e4:1f72
    assert(cs == 0x13e0);
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_14264;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_14264;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_14264;
    push(cs);
    cs = 0x19e4;
    sub_1b107(); // 19e4:12c7
    assert(cs == 0x13e0);
loc_14264: // 13e0:0464
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_142a6;
    if (memoryAGet16(ds, 0x9880) >= 0x002d)
        goto loc_142a6;
    ax = 0;
    push(ax);
    ax = 0x0053;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x006e;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x13e0);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x005c;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x00ad;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x13e0);
    sp += 0x000a;
loc_142a6: // 13e0:04a6
    if (memoryAGet(ss, bp - 7) != 0x00)
        goto loc_142b6;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_142be;
loc_142b6: // 13e0:04b6
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_142be: // 13e0:04be
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_142cc;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_142d0;
loc_142cc: // 13e0:04cc
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) ^ 0x01);
loc_142d0: // 13e0:04d0
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x13e0);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x13e0);
    sp += 0x0004;
    if (memoryAGet(ss, bp - 6) != 0x00)
        goto loc_1430c;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x13e0);
    sp += 0x000a;
    memoryASet(ss, bp - 6, 0x01);
loc_1430c: // 13e0:050c
    if (memoryAGet(ss, bp - 5) == 0x00)
        goto loc_14334;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_14320;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_14334;
loc_14320: // 13e0:0520
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_1432d;
    push(cs);
    cs = 0x1dc4;
    sub_1e3e9(); // 1dc4:07a9
    assert(cs == 0x13e0);
    goto loc_14342;
loc_1432d: // 13e0:052d
    push(cs);
    cs = 0x1dc4;
    sub_1e59e(); // 1dc4:095e
    assert(cs == 0x13e0);
    goto loc_14342;
loc_14334: // 13e0:0534
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x13e0);
    sp += 0x0004;
loc_14342: // 13e0:0542
    memoryASet(ss, bp - 5, 0x00);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x13e0);
    sp++;
    sp++;
    push(cs);
    cs = 0x0a34;
    sub_b9ae(); // 0a34:166e
    assert(cs == 0x13e0);
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_14360;
    goto loc_140b2;
loc_14360: // 13e0:0560
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_1436a;
    goto loc_140b2;
loc_1436a: // 13e0:056a
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0000)
        goto loc_14377;
    memoryASet16(ds, 0x988e, 0x0000);
loc_14377: // 13e0:0577
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x012c)
        goto loc_14385;
    memoryASet16(ds, 0x988e, 0x012c);
loc_14385: // 13e0:0585
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x00b4)
        goto loc_1439d;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1439d;
    ax = 0x0001;
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x97fa, ax);
loc_1439d: // 13e0:059d
    if (memoryAGet16(ds, 0x9c68) != 0x0005)
        goto loc_143db;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0069)
        goto loc_143db;
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x009b)
        goto loc_143db;
    memoryASet16(ds, 0x97f2, 0x000a);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet16(ds, 0x9c68, 0x0064);
    memoryASet16(ds, 0x9870, 0x0000);
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_143d7;
    push(cs);
    cs = 0x1946;
    sub_1946f(); // 1946:000f
    assert(cs == 0x13e0);
loc_143d7: // 13e0:05d7
    memoryASet(ss, bp - 6, 0x00);
loc_143db: // 13e0:05db
    if (memoryAGet16(ds, 0x9c68) != 0x000e)
        goto loc_14419;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0069)
        goto loc_14419;
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x009b)
        goto loc_14419;
    memoryASet16(ds, 0x97f2, 0x000a);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet16(ds, 0x9c68, 0x0065);
    memoryASet16(ds, 0x9870, 0x0000);
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_14415;
    push(cs);
    cs = 0x1946;
    sub_1946f(); // 1946:000f
    assert(cs == 0x13e0);
loc_14415: // 13e0:0615
    memoryASet(ss, bp - 6, 0x00);
loc_14419: // 13e0:0619
    if (memoryAGet16(ds, 0x9c68) < 0x0064)
        goto loc_14423;
    goto loc_144fc;
loc_14423: // 13e0:0623
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0006)
        goto loc_14457;
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_14457;
    if (memoryAGet16(ds, 0x9c68) == 0x0000)
        goto loc_14457;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) - 1);
    memoryASet16(ds, 0x988e, 0x011d);
    memoryASet16(ds, 0x9872, 0x0001);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_5e86(); // 023f:3a96
    assert(cs == 0x13e0);
    sp++;
    sp++;
    memoryASet(ss, bp - 5, 0x02);
loc_14457: // 13e0:0657
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_14478;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0104)
        goto loc_14478;
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_14478;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0002);
    memoryASet16(ds, 0x97e8, 0x0001);
loc_14478: // 13e0:0678
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_144a2;
    if ((short)memoryAGet16(ds, 0x988e) < (short)0x012c)
        goto loc_144a2;
    if (memoryAGet16(ds, 0x97e8) == 0x0000)
        goto loc_144a2;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x988e, 0x0006);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet(ss, bp - 5, 0x01);
loc_144a2: // 13e0:06a2
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0127)
        goto loc_144d6;
    if (memoryAGet16(ds, 0x9c68) == 0x0009)
        goto loc_144d6;
    if (memoryAGet16(ds, 0x9c68) == 0x0012)
        goto loc_144d6;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x988e, 0x0006);
    memoryASet16(ds, 0x9872, 0x0001);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_5e86(); // 023f:3a96
    assert(cs == 0x13e0);
    sp++;
    sp++;
    memoryASet(ss, bp - 5, 0x01);
loc_144d6: // 13e0:06d6
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0104)
        goto loc_144fc;
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_144fc;
    if (memoryAGet16(ds, 0x9880) <= 0x002c)
        goto loc_144fc;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x988e, 0x0006);
    memoryASet16(ds, 0x9872, 0x0001);
loc_144fc: // 13e0:06fc
    if (memoryAGet16(ds, 0x9c68) != 0x0064)
        goto loc_14561;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_14561;
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0x001e)
        goto loc_14561;
    if (memoryAGet16(ds, 0x9868) == 0x0000)
        goto loc_14561;
    memoryASet16(ds, 0x9c68, 0x0005);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet16(ds, 0x97f2, 0x0046);
    memoryASet16(ds, 0x988e, 0x0064);
    ax = 0;
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x9868, ax);
    if (memoryAGet16(ds, 0x97f4) >= 0x007f)
        goto loc_1454b;
    ax = memoryAGet16(ds, 0x97f4);
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ds, 0x97f4, ax);
    goto loc_14551;
loc_1454b: // 13e0:074b
    memoryASet16(ds, 0x97f4, 0x0022);
loc_14551: // 13e0:0751
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_1455d;
    push(cs);
    cs = 0x1946;
    sub_194a1(); // 1946:0041
    assert(cs == 0x13e0);
loc_1455d: // 13e0:075d
    memoryASet(ss, bp - 6, 0x00);
loc_14561: // 13e0:0761
    if (memoryAGet16(ds, 0x9c68) != 0x0065)
        goto loc_145b7;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_145b7;
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0x001e)
        goto loc_145b7;
    if (memoryAGet16(ds, 0x9868) == 0x0000)
        goto loc_145b7;
    memoryASet16(ds, 0x9c68, 0x000e);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet16(ds, 0x97f2, 0x0064);
    memoryASet16(ds, 0x988e, 0x0050);
    ax = 0;
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x9868, ax);
    ax = memoryAGet16(ds, 0x97f4);
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ds, 0x97f4, ax);
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_145b3;
    push(cs);
    cs = 0x1946;
    sub_194a1(); // 1946:0041
    assert(cs == 0x13e0);
loc_145b3: // 13e0:07b3
    memoryASet(ss, bp - 6, 0x00);
loc_145b7: // 13e0:07b7
    ax = memoryAGet16(ds, 0x987e);
    ax &= 0x0003;
    if (ax == 0x0003)
        goto loc_145c5;
    goto loc_140b2;
loc_145c5: // 13e0:07c5
    memoryASet16(ds, 0x9872, 0x0001);
    goto loc_140b2;
loc_145ce: // 13e0:07ce
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x13e0);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x987e) & 0x0003)
        goto loc_145e6;
    goto loc_13f97;
loc_145e6: // 13e0:07e6
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) >> 1);
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) >> 1);
    push(memoryAGet16(ds, 0x987e));
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1946;
    sub_19aa5(); // 1946:0645
    assert(cs == 0x13e0);
    sp += 0x0004;
    memoryASet(ss, bp - 6, 0x00);
    goto loc_13f97;
loc_14605: // 13e0:0805
    push(memoryAGet16(ds, 0x987c));
    push(memoryAGet16(ds, 0x987a));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x13e0);
    sp += 0x0004;
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x13e0);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x9c68) != 0x0013)
        goto loc_14637;
    ax = 0x0001;
    push(ax);
    ax = 0x01f4;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19124(); // 18f7:01b4
    assert(cs == 0x13e0);
    sp += 0x0004;
loc_14637: // 13e0:0837
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1463d() // 1463:000d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    di = 0;
    goto loc_14652;
loc_14649: // 1463:0019
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet(es, bx + di, 0x00);
    di++;
loc_14652: // 1463:0022
    if (di < 0x1f40)
        goto loc_14649;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_402c(); // 023f:1c3c
    assert(cs == 0x1463);
    sp += 0x0006;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    ax = 0x00a7;
    push(ax);
    ax = 0x0062;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    ax = 0x0080;
    push(ax);
    ax = 0x0062;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    ax = 0x0059;
    push(ax);
    ax = 0x0062;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    ax = 0x0032;
    push(ax);
    ax = 0x0062;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9882);
    ax++;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0062;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    if (memoryAGet16(ss, bp + 18) == 0x000a)
        goto loc_1475d;
    if (memoryAGet16(ss, bp + 18) == 0x000b)
        goto loc_1475d;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00be;
    push(ax);
    ax = 0x013f;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x1463);
    sp += 0x000e;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x001f;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x001f;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x00a0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
loc_1475d: // 1463:012d
    if (memoryAGet16(ss, bp + 18) <= 0x000b)
        goto loc_14788;
    if (memoryAGet16(ss, bp + 18) == 0x0012)
        goto loc_14788;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00be;
    push(ax);
    ax = 0x013f;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x1463);
    sp += 0x000e;
loc_14788: // 1463:0158
    memoryASet16(ss, bp - 4, 0x0000);
    if (memoryAGet16(ss, bp + 18) == 0x0000)
        goto loc_147af;
    di = 0;
    goto loc_147aa;
loc_14797: // 1463:0167
    ax = di;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di++;
loc_147aa: // 1463:017a
    if (di < memoryAGet16(ss, bp + 18))
        goto loc_14797;
loc_147af: // 1463:017f
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0003;
    mul(dx);
    memoryASet16(ss, bp - 4, ax);
    di = 0;
    goto loc_14857;
loc_147bf: // 1463:018f
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 2, ax);
    cx = 0x0004;
    memoryASet16(ss, bp - 2, sar(memoryAGet16(ss, bp - 2), cl));
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) << cl);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0002;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    si = memoryAGet16(es, bx);
    if (si != 0x001e)
        goto loc_147f0;
    si = 0x001f;
loc_147f0: // 1463:01c0
    if (si != 0x001d)
        goto loc_147f8;
    si = 0x001e;
loc_147f8: // 1463:01c8
    if (si != 0x0014)
        goto loc_14800;
    si = 0x0020;
loc_14800: // 1463:01d0
    if (si != 0x0005)
        goto loc_14808;
    si = 0x001d;
loc_14808: // 1463:01d8
    if (si == 0x001e)
        goto loc_14852;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += si;
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    push(memoryAGet16(es, bx));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    push(memoryAGet16(es, bx));
    push(memoryAGet16(ss, bp - 2));
    ax = si;
    ax--;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19eac(); // 19e4:006c
    assert(cs == 0x1463);
    sp += 0x0006;
loc_14852: // 1463:0222
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0003);
    di++;
loc_14857: // 1463:0227
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    if (ax < di)
        goto loc_1486b;
    goto loc_147bf;
loc_1486b: // 1463:023b
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x0020;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    if (memoryAGet16(ss, bp + 18) != 0x000b)
        goto loc_148ac;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0034;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x005a;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x1463);
    sp += 0x000e;
loc_148ac: // 1463:027c
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_148b2() // 1463:0282
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000a;
    memoryASet16(ss, bp - 2, 0x0000);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00be;
    push(ax);
    ax = 0x008c;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x1463);
    sp += 0x000e;
    memoryASet16(ss, bp - 8, 0x0000);
    goto loc_149fa;
loc_148e6: // 1463:02b6
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1463);
    sp += 0x000a;
    di = 0;
    if (memoryAGet16(ss, bp + 18) == di)
        goto loc_14922;
    memoryASet16(ss, bp - 10, di);
    goto loc_1491a;
loc_14907: // 1463:02d7
    ax = memoryAGet16(ss, bp - 10);
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    di += ax;
    di++;
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 1);
loc_1491a: // 1463:02ea
    ax = memoryAGet16(ss, bp - 10);
    if (ax < memoryAGet16(ss, bp + 18))
        goto loc_14907;
loc_14922: // 1463:02f2
    ax = di;
    dx = 0x0003;
    mul(dx);
    di = ax;
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_149ab;
loc_14933: // 1463:0303
    ax = di;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, ax);
    cx = 0x0004;
    memoryASet16(ss, bp - 4, sar(memoryAGet16(ss, bp - 4), cl));
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) << cl);
    ax = di;
    ax += 0x0002;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    si = memoryAGet16(es, bx);
    if (si != 0x001e)
        goto loc_14962;
    si = 0x001f;
loc_14962: // 1463:0332
    if (si != 0x001d)
        goto loc_1496a;
    si = 0x001e;
loc_1496a: // 1463:033a
    if (si != 0x0014)
        goto loc_14972;
    si = 0x0020;
loc_14972: // 1463:0342
    if (si != 0x0005)
        goto loc_1497a;
    si = 0x001d;
loc_1497a: // 1463:034a
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += si;
    ax--;
    push(ax);
    ax = di;
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax += memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    di += 0x0003;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_149ab: // 1463:037b
    if (memoryAGet16(ss, bp - 6) > 0x000f)
        goto loc_149b4;
    goto loc_14933;
loc_149b4: // 1463:0384
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    ax = memoryAGet16(ds, 0x97f2);
    ax += memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ds, 0x988e));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1463);
    sp += 0x000a;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x1463);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 0x0004);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
loc_149fa: // 1463:03ca
    if (memoryAGet16(ss, bp - 8) >= 0x002c)
        goto loc_14a03;
    goto loc_148e6;
loc_14a03: // 1463:03d3
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_14a09() // 1463:03d9
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000a;
    memoryASet16(ss, bp - 2, 0xffb0);
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_1463d(); // 1463:000d
    sp += 0x000a;
    push(cs);
    cs = 0x19e4;
    sub_1b214(); // 19e4:13d4
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1b3e8(); // 19e4:15a8
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1b341(); // 19e4:1501
    assert(cs == 0x1463);
    memoryASet16(ss, bp + 18, 0x0011);
    memoryASet16(ss, bp - 8, 0x0000);
    goto loc_14c98;
loc_14a52: // 1463:0422
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1463);
    sp += 0x000a;
    di = 0;
    if (memoryAGet16(ss, bp + 18) == di)
        goto loc_14a8e;
    memoryASet16(ss, bp - 10, di);
    goto loc_14a86;
loc_14a73: // 1463:0443
    ax = memoryAGet16(ss, bp - 10);
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    di += ax;
    di++;
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 1);
loc_14a86: // 1463:0456
    ax = memoryAGet16(ss, bp - 10);
    if (ax < memoryAGet16(ss, bp + 18))
        goto loc_14a73;
loc_14a8e: // 1463:045e
    ax = di;
    dx = 0x0003;
    mul(dx);
    di = ax;
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_14b3d;
loc_14a9f: // 1463:046f
    ax = di;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, ax);
    cx = 0x0004;
    memoryASet16(ss, bp - 4, sar(memoryAGet16(ss, bp - 4), cl));
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) << cl);
    ax = di;
    ax += 0x0002;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    si = memoryAGet16(es, bx);
    if (si != 0x001e)
        goto loc_14ace;
    si = 0x001f;
loc_14ace: // 1463:049e
    if (si != 0x001d)
        goto loc_14ad6;
    si = 0x001e;
loc_14ad6: // 1463:04a6
    if (si != 0x0014)
        goto loc_14ade;
    si = 0x0020;
loc_14ade: // 1463:04ae
    if (si != 0x0005)
        goto loc_14ae6;
    si = 0x001d;
loc_14ae6: // 1463:04b6
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += si;
    ax--;
    push(ax);
    ax = di;
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax += memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    if (memoryAGet16(ss, bp - 8) != 0x0014)
        goto loc_14b37;
    ax = di;
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax += memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    ax = si;
    ax--;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19eac(); // 19e4:006c
    assert(cs == 0x1463);
    sp += 0x0006;
loc_14b37: // 1463:0507
    di += 0x0003;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_14b3d: // 1463:050d
    if (memoryAGet16(ss, bp - 6) > 0x000f)
        goto loc_14b46;
    goto loc_14a9f;
loc_14b46: // 1463:0516
    if (memoryAGet16(ss, bp - 8) != 0x0014)
        goto loc_14b4f;
    goto loc_14bf8;
loc_14b4f: // 1463:051f
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    ax = memoryAGet16(ds, 0x97f2);
    ax += memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ds, 0x988e));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax &= 0x0001;
    ax += memoryAGet16(ds, 0x988a);
    ax += 0x0055;
    push(ax);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1463);
    bx = 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x00af;
    push(dx);
    ax = 0x0031;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax &= 0x0001;
    ax += memoryAGet16(ds, 0x988a);
    ax += 0x0056;
    push(ax);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1463);
    bx = 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x00aa;
    push(dx);
    ax = 0x0041;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax &= 0x0001;
    ax += memoryAGet16(ds, 0x988a);
    ax += 0x0055;
    push(ax);
    ax = 0x00b2;
    push(ax);
    ax = 0x004f;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
loc_14bf8: // 1463:05c8
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    ax = 0x00b9;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax++;
    push(ax);
    ax = 0x00b9;
    push(ax);
    ax = 0x0020;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax++;
    push(ax);
    ax = 0x00b9;
    push(ax);
    ax = 0x0050;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax++;
    push(ax);
    ax = 0x00b9;
    push(ax);
    ax = 0x0080;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1463);
    sp += 0x000c;
    if (memoryAGet16(ss, bp - 8) == 0x0014)
        goto loc_14c86;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1463);
    sp += 0x000a;
loc_14c86: // 1463:0656
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x1463);
    sp++;
    sp++;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 0x0004);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
loc_14c98: // 1463:0668
    if (memoryAGet16(ss, bp - 8) >= 0x0015)
        goto loc_14ca1;
    goto loc_14a52;
loc_14ca1: // 1463:0671
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1463);
    sp += 0x000a;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_14cbc() // 1463:068c
{
    CStackGuardFar sg(0, false);
    memoryASet16(ds, 0x97e0, 0x0011);
    memoryASet16(ds, 0x9872, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x9c6e, ax);
    memoryASet16(ds, 0x9c68, ax);
    memoryASet16(ds, 0x9c6a, ax);
    memoryASet16(ds, 0x9874, 0x0028);
    memoryASet16(ds, 0x988e, 0x0073);
    memoryASet16(ds, 0x97f2, 0x006e);
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x97e2, ax);
    memoryASet16(ds, 0x9892, ax);
    memoryASet16(ds, 0x97ea, ax);
    memoryASet16(ds, 0x9c62, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97f4, 0x0014);
    memoryASet16(ds, 0x989c, ax);
    memoryASet16(ds, 0x97e8, ax);
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x9c66, 0x0063);
    memoryASet16(ds, 0x985a, ax);
    memoryASet16(ds, 0x9880, ax);
    memoryASet16(ds, 0x989a, 0x000a); // energy
    cs = pop();
}
// Discard check failed in sub_14d22: cur=1463:0bb9 last=1463:0baf> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
void sub_14d22() // 1463:06f2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    memoryASet(ss, bp - 6, 0x00);
    memoryASet(ss, bp - 5, 0x00);
    ax = 0x0005;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19382(); // 18f7:0412
    assert(cs == 0x1463);
    sp++;
    sp++;
    ax = 0x1f40;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x1463);
    sp++;
    sp++;
    memoryASet16(ds, 0x987c, dx);
    memoryASet16(ds, 0x987a, ax);
    memoryASet16(ds, 0x9c6c, 0x0003);
    ax = memoryAGet16(ds, 0x8bd6);
    memoryASet16(ds, 0x988a, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1d5e;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x1463);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x988a);
    memoryASet16(ds, 0x9896, ax);
    push(cs);
    cs = 0x1829;
    sub_18293(); // 1829:0003
    assert(cs == 0x1463);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1d68;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x1463);
    sp += 0x0008;
    di = ax;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1d73;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += di;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x1463);
    sp += 0x0008;
    dx = memoryAGet16(ds, 0x9896);
    dx += di;
    ax += dx;
    memoryASet16(ds, 0x9882, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1d7f;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x1463);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x9882);
    memoryASet16(ds, 0x9878, ax);
    ax = 0x0030;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x1463);
    sp++;
    sp++;
    ax = 0x0031;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x1463);
    sp++;
    sp++;
    ax = 0x0032;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x1463);
    sp++;
    sp++;
    ax = 0x0033;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x1463);
    sp++;
    sp++;
    ax = memoryAGet16(ds, 0x9878);
    ax += 0x0003;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_1946a(); // 18f7:04fa
    assert(cs == 0x1463);
    sp++;
    sp++;
    push(ds);
    ax = 0x1d89;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19e49(); // 19e4:0009
    assert(cs == 0x1463);
    sp += 0x0004;
    push(cs);
    sub_14cbc(); // 1463:068c
    push(ds);
    ax = 0x47ee;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x1463);
    sp += 0x0004;
    push(ds);
    ax = 0x2950;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x1463);
    sp += 0x0004;
    push(ds);
    ax = 0x29e2;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x1463);
    sp += 0x0004;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_14e4b;
    push(cs);
    cs = 0x1946;
    sub_1959f(); // 1946:013f
    assert(cs == 0x1463);
loc_14e4b: // 1463:081b
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_14e59;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_14e66;
loc_14e59: // 1463:0829
    push(ds);
    ax = 0x1d94;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_6d22(); // 06c1:0112
    assert(cs == 0x1463);
    sp += 0x0004;
loc_14e66: // 1463:0836
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x1463);
    sp += 0x0004;
loc_14e75: // 1463:0845
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_14e7f;
    goto loc_154ae;
loc_14e7f: // 1463:084f
    if (memoryAGet16(ds, 0x9c68) != 0x0013)
        goto loc_14e89;
    goto loc_154ae;
loc_14e89: // 1463:0859
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x1463);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_14eb0;
    ax = 0x0012;
    push(ax);
    push(ds);
    ax = 0x39d2;
    push(ax);
    push(ds);
    ax = 0x39aa;
    push(ax);
    push(cs);
    sub_14a09(); // 1463:03d9
    sp += 0x000a;
loc_14eb0: // 1463:0880
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_14ed5;
    if (memoryAGet16(ds, 0x9c68) == 0x0012)
        goto loc_14ee3;
    push(memoryAGet16(ds, 0x9c68));
    push(ds);
    ax = 0x39d2;
    push(ax);
    push(ds);
    ax = 0x39aa;
    push(ax);
    push(cs);
    sub_1463d(); // 1463:000d
    sp += 0x000a;
    goto loc_14ee3;
loc_14ed5: // 1463:08a5
    ax = memoryAGet16(ds, 0x9c68);
    ax += 0xff9c;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a03f(); // 19e4:01ff
    assert(cs == 0x1463);
    sp++;
    sp++;
loc_14ee3: // 1463:08b3
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_14efd;
    push(memoryAGet16(ds, 0x9c68));
    push(ds);
    ax = 0x47ee;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x1463);
    sp += 0x0006;
    goto loc_14f11;
loc_14efd: // 1463:08cd
    ax = memoryAGet16(ds, 0x9c68);
    ax += 0xff9c;
    push(ax);
    push(ds);
    ax = 0x2950;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x1463);
    sp += 0x0006;
loc_14f11: // 1463:08e1
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_14f2b;
    bx = memoryAGet16(ds, 0x9c68);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7478));
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x1463);
    sp++;
    sp++;
    goto loc_14f36;
loc_14f2b: // 1463:08fb
    ax = 0x00a8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x1463);
    sp++;
    sp++;
loc_14f36: // 1463:0906
    push(cs);
    cs = 0x19e4;
    sub_1a4da(); // 19e4:069a
    assert(cs == 0x1463);
    memoryASet(ss, bp - 7, 0x00);
    memoryASet16(ds, 0x9872, 0x0000);
    push(cs);
    cs = 0x19e4;
    sub_1b214(); // 19e4:13d4
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1b3e8(); // 19e4:15a8
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1b341(); // 19e4:1501
    assert(cs == 0x1463);
    si = 0;
    goto loc_14f71;
loc_14f62: // 1463:0932
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38918, 0x0000);
    si++;
loc_14f71: // 1463:0941
    if (si < 0x000a)
        goto loc_14f62;
    memoryASet16(ds, 0x97e4, 0x0000);
    memoryASet16(ds, 0x9894, 0x0000);
    memoryASet16(ds, 0x97e6, 0x0000);
    memoryASet16(ds, 0x987e, 0x0000);
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x1463);
loc_14f93: // 1463:0963
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_14f9d;
    goto loc_15449;
loc_14f9d: // 1463:096d
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_14fa7;
    goto loc_15449;
loc_14fa7: // 1463:0977
    ax = memoryAGet16(ds, 0x985a);
    memoryASet16(ds, 0x985a, memoryAGet16(ds, 0x985a) + 1);
    if (ax <= 0x003c)
        goto loc_14fe4;
    if (memoryAGet16(ds, 0x9c66) == 0x0000)
        goto loc_14fc0;
    memoryASet16(ds, 0x9c66, memoryAGet16(ds, 0x9c66) - 1);
    goto loc_14fd9;
loc_14fc0: // 1463:0990
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_14fd9;
    memoryASet16(ds, 0x9874, 0x0000);
    memoryASet16(ds, 0x9870, 0x0001);
    memoryASet16(ds, 0x97fa, 0x0001);
loc_14fd9: // 1463:09a9
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x1463);
    memoryASet16(ds, 0x985a, 0x0000);
loc_14fe4: // 1463:09b4
    push(cs);
    cs = 0x19e4;
    sub_1b0b7(); // 19e4:1277
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1a5d8(); // 19e4:0798
    assert(cs == 0x1463);
    memoryASet16(ds, 0x97e6, 0x0000);
    push(cs);
    cs = 0x1bf1;
    sub_1bf13(); // 1bf1:0003
    assert(cs == 0x1463);
    push(cs);
    cs = 0x19e4;
    sub_1a6df(); // 19e4:089f
    assert(cs == 0x1463);
    ax = 0;
    memoryASet16(ds, 0x9898, ax);
    memoryASet16(ds, 0x9802, ax);
    memoryASet16(ds, 0x988c, ax);
    memoryASet16(ds, 0x986a, ax);
    push(cs);
    cs = 0x0a34;
    sub_a9f3(); // 0a34:06b3
    assert(cs == 0x1463);
    al = memoryAGet(ds, 0x8db4);
    ah = 0x00;
    memoryASet16(ds, 0x9898, ax);
    al = memoryAGet(ds, 0x92b6);
    ah = 0x00;
    memoryASet16(ds, 0x9802, ax);
    al = memoryAGet(ds, 0x8baf);
    ah = 0x00;
    memoryASet16(ds, 0x986a, ax);
    al = memoryAGet(ds, 0x8da6);
    ah = 0x00;
    memoryASet16(ds, 0x988c, ax);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x1463);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_15041;
    push(cs);
    cs = 0x19e4;
    sub_1b991(); // 19e4:1b51
    assert(cs == 0x1463);
loc_15041: // 1463:0a11
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_1504b;
    goto loc_150de;
loc_1504b: // 1463:0a1b
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_15056;
    push(cs);
    cs = 0x19e4;
    sub_1bdb2(); // 19e4:1f72
    assert(cs == 0x1463);
loc_15056: // 1463:0a26
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1506f;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1506f;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_1506f;
    push(cs);
    cs = 0x19e4;
    sub_1b107(); // 19e4:12c7
    assert(cs == 0x1463);
loc_1506f: // 1463:0a3f
    if (memoryAGet16(ds, 0x9c68) != 0x0011)
        goto loc_150b1;
    if (memoryAGet16(ds, 0x9880) >= 0x002d)
        goto loc_150b1;
    ax = 0;
    push(ax);
    ax = 0x0053;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x006e;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1463);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x005c;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x00ad;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1463);
    sp += 0x000a;
loc_150b1: // 1463:0a81
    if (memoryAGet16(ds, 0x9c68) != 0x000a)
        goto loc_150de;
    if (!(memoryAGet(ds, 0x1d34) & 0x01))
        goto loc_150d9;
    ax = 0;
    push(ax);
    ax = 0x007f;
    push(ax);
    ax = 0x001e;
    push(ax);
    ax = 0x00a5;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1463);
    sp += 0x000a;
loc_150d9: // 1463:0aa9
    memoryASet(ds, 0x1d34, memoryAGet(ds, 0x1d34) ^ 0x01);
loc_150de: // 1463:0aae
    if (memoryAGet(ss, bp - 7) != 0x00)
        goto loc_150ee;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_150f6;
loc_150ee: // 1463:0abe
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_150f6: // 1463:0ac6
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_15104;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_15108;
loc_15104: // 1463:0ad4
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) ^ 0x01);
loc_15108: // 1463:0ad8
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x1463);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x1463);
    sp += 0x0004;
    if (memoryAGet(ss, bp - 6) != 0x00)
        goto loc_15144;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1463);
    sp += 0x000a;
    memoryASet(ss, bp - 6, 0x01);
loc_15144: // 1463:0b14
    if (memoryAGet(ss, bp - 5) == 0x00)
        goto loc_15186;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_15158;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_15186;
loc_15158: // 1463:0b28
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_15163;
    push(cs);
    cs = 0x1dc4;
    sub_1e3e9(); // 1dc4:07a9
    assert(cs == 0x1463);
loc_15163: // 1463:0b33
    if (memoryAGet(ss, bp - 5) != 0x02)
        goto loc_1516e;
    push(cs);
    cs = 0x1dc4;
    sub_1e59e(); // 1dc4:095e
    assert(cs == 0x1463);
loc_1516e: // 1463:0b3e
    if (memoryAGet(ss, bp - 5) != 0x03)
        goto loc_15179;
    push(cs);
    cs = 0x1dc4;
    sub_1e32a(); // 1dc4:06ea
    assert(cs == 0x1463);
loc_15179: // 1463:0b49
    if (memoryAGet(ss, bp - 5) != 0x04)
        goto loc_15194;
    push(cs);
    cs = 0x1dc4;
    sub_1e4a4(); // 1dc4:0864
    assert(cs == 0x1463);
    goto loc_15194;
loc_15186: // 1463:0b56
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x1463);
    sp += 0x0004;
loc_15194: // 1463:0b64
    memoryASet(ss, bp - 5, 0x00);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x1463);
    sp++;
    sp++;
    push(cs);
    cs = 0x0a34;
    sub_b9ae(); // 0a34:166e
    assert(cs == 0x1463);
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_151b2;
    goto loc_14f93;
loc_151b2: // 1463:0b82
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_151bc;
    goto loc_14f93;
loc_151bc: // 1463:0b8c
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0000)
        goto loc_151c9;
    memoryASet16(ds, 0x988e, 0x0000);
loc_151c9: // 1463:0b99
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x012c)
        goto loc_151d7;
    memoryASet16(ds, 0x988e, 0x012c);
loc_151d7: // 1463:0ba7
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x00b4)
        goto loc_151ef;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_151ef;
    ax = 0x0001;
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x97fa, ax);
loc_151ef: // 1463:0bbf
    if (memoryAGet16(ds, 0x9c68) < 0x0064)
        goto loc_151f9;
    goto loc_15432;
loc_151f9: // 1463:0bc9
    if (memoryAGet16(ds, 0x9c68) != 0x000c)
        goto loc_15214;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_15214;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x000a)
        goto loc_15214;
    memoryASet16(ds, 0x988e, 0x000a);
loc_15214: // 1463:0be4
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_15228;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0014)
        goto loc_15228;
    memoryASet16(ds, 0x988e, 0x0014);
loc_15228: // 1463:0bf8
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_15248;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_15248;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x012b)
        goto loc_15248;
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
loc_15248: // 1463:0c18
    if (memoryAGet16(ds, 0x9c68) == 0x000b)
        goto loc_15252;
    goto loc_152f3;
loc_15252: // 1463:0c22
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_1525c;
    goto loc_152f3;
loc_1525c: // 1463:0c2c
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0064)
        goto loc_15272;
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x0022)
        goto loc_15272;
    memoryASet16(ds, 0x988e, 0x0064);
    goto loc_15280;
loc_15272: // 1463:0c42
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x00cc)
        goto loc_15280;
    memoryASet16(ds, 0x988e, 0x00cc);
loc_15280: // 1463:0c50
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x00a4)
        goto loc_1529c;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) - 1);
    memoryASet16(ds, 0x97f2, 0xffff);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet(ss, bp - 5, 0x03);
loc_1529c: // 1463:0c6c
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_152f3;
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0x0087)
        goto loc_152f3;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x005a)
        goto loc_152f3;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x988e, 0x0096);
    memoryASet16(ds, 0x97f2, 0x0032);
    memoryASet16(ds, 0x9872, 0x0001);
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_152d4;
    push(cs);
    cs = 0x1946;
    sub_1959f(); // 1946:013f
    assert(cs == 0x1463);
loc_152d4: // 1463:0ca4
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_152e2;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_152ef;
loc_152e2: // 1463:0cb2
    push(ds);
    ax = 0x1d9e;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_6d22(); // 06c1:0112
    assert(cs == 0x1463);
    sp += 0x0004;
loc_152ef: // 1463:0cbf
    memoryASet(ss, bp - 6, 0x00);
loc_152f3: // 1463:0cc3
    if (memoryAGet16(ds, 0x9c68) != 0x000a)
        goto loc_1533e;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_1533e;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0064)
        goto loc_1530e;
    memoryASet16(ds, 0x988e, 0x0064);
loc_1530e: // 1463:0cde
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x00cc)
        goto loc_1531c;
    memoryASet16(ds, 0x988e, 0x00cc);
loc_1531c: // 1463:0cec
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0xffff)
        goto loc_1533e;
    if (memoryAGet16(ds, 0x9898) == 0x0000)
        goto loc_1533e;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet16(ds, 0x97f2, 0x00a4);
    memoryASet(ss, bp - 5, 0x04);
loc_1533e: // 1463:0d0e
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_15389;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_15389;
    if (memoryAGet16(ds, 0x987e) != 0x0000)
        goto loc_15389;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x010e)
        goto loc_15361;
    memoryASet16(ds, 0x988e, 0x010e);
loc_15361: // 1463:0d31
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0070)
        goto loc_15389;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x007c)
        goto loc_15389;
    if (memoryAGet16(ds, 0x97f2) != 0x004c)
        goto loc_15389;
    if (memoryAGet16(ds, 0x9802) == 0x0000)
        goto loc_15389;
    memoryASet16(ds, 0x988e, 0x0077);
    memoryASet16(ds, 0x987e, 0x0fa1);
loc_15389: // 1463:0d59
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0006)
        goto loc_153b9;
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_153b9;
    if (memoryAGet16(ds, 0x9c68) == 0x0000)
        goto loc_153b9;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_153b9;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) - 1);
    memoryASet16(ds, 0x988e, 0x011d);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet(ss, bp - 5, 0x02);
loc_153b9: // 1463:0d89
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0127)
        goto loc_153e3;
    if (memoryAGet16(ds, 0x9c68) == 0x0012)
        goto loc_153e3;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_153e3;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x988e, 0x0006);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet(ss, bp - 5, 0x01);
loc_153e3: // 1463:0db3
    if (memoryAGet16(ds, 0x9c68) != 0x0011)
        goto loc_15432;
    if (memoryAGet16(ds, 0x9880) <= 0x002c)
        goto loc_15432;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_15432;
    if (memoryAGet16(ds, 0x97f2) != 0x0044)
        goto loc_15432;
    if (memoryAGet16(ds, 0x9860) == 0x0000)
        goto loc_15432;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x9872, 0x0001);
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x1463);
    sp++;
    sp++;
    ax = 0x0011;
    push(ax);
    push(ds);
    ax = 0x39d2;
    push(ax);
    push(ds);
    ax = 0x39aa;
    push(ax);
    push(cs);
    sub_148b2(); // 1463:0282
    sp += 0x000a;
loc_15432: // 1463:0e02
    ax = memoryAGet16(ds, 0x987e);
    ax &= 0x0003;
    if (ax == 0x0003)
        goto loc_15440;
    goto loc_14f93;
loc_15440: // 1463:0e10
    memoryASet16(ds, 0x9872, 0x0001);
    goto loc_14f93;
loc_15449: // 1463:0e19
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x1463);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x987e) & 0x0003)
        goto loc_15461;
    goto loc_14e75;
loc_15461: // 1463:0e31
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) >> 1);
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) >> 1);
    if (memoryAGet16(ds, 0x987e) == 0x03e8)
        goto loc_15483;
    push(memoryAGet16(ds, 0x987e));
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x1946;
    sub_19aa5(); // 1946:0645
    assert(cs == 0x1463);
    sp += 0x0004;
    goto loc_154a7;
loc_15483: // 1463:0e53
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet16(ds, 0x9c68, 0x000a);
    memoryASet16(ds, 0x988e, 0x0064);
    memoryASet16(ds, 0x97f2, 0x009f);
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_154a7;
    push(cs);
    cs = 0x1946;
    sub_1955b(); // 1946:00fb
    assert(cs == 0x1463);
loc_154a7: // 1463:0e77
    memoryASet(ss, bp - 6, 0x00);
    goto loc_14e75;
loc_154ae: // 1463:0e7e
    push(memoryAGet16(ds, 0x987c));
    push(memoryAGet16(ds, 0x987a));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x1463);
    sp += 0x0004;
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x1463);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x9c68) != 0x0013)
        goto loc_154e0;
    ax = 0x0005;
    push(ax);
    ax = 0x01f4;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19124(); // 18f7:01b4
    assert(cs == 0x1463);
    sp += 0x0004;
loc_154e0: // 1463:0eb0
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_154e6() // 154e:0006
{
    CStackGuardFar sg(0, false);
    memoryASet16(ds, 0x97e0, 0x0011);
    memoryASet16(ds, 0x9872, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x9c6e, ax);
    memoryASet16(ds, 0x9c68, ax);
    memoryASet16(ds, 0x9c6a, ax);
    memoryASet16(ds, 0x9874, 0x0028);
    memoryASet16(ds, 0x988e, 0x008c);
    memoryASet16(ds, 0x97f2, 0x0041);
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x97e2, ax);
    memoryASet16(ds, 0x9892, ax);
    memoryASet16(ds, 0x97ea, ax);
    memoryASet16(ds, 0x9c62, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97f4, 0x0014);
    memoryASet16(ds, 0x9880, ax);
    memoryASet16(ds, 0x989c, ax);
    memoryASet16(ds, 0x97e8, ax);
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x9c66, 0x0063);
    memoryASet16(ds, 0x985a, ax);
    memoryASet16(ds, 0x989a, 0x000a); // energy 3
    cs = pop();
}
// Discard check failed in sub_1554c: cur=154e:05be last=154e:05b4> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
void sub_1554c() // 154e:006c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    memoryASet(ss, bp - 6, 0x00);
    memoryASet(ss, bp - 5, 0x00);
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19382(); // 18f7:0412
    assert(cs == 0x154e);
    sp++;
    sp++;
    ax = 0x1f40;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x154e);
    sp++;
    sp++;
    memoryASet16(ds, 0x987c, dx);
    memoryASet16(ds, 0x987a, ax);
    memoryASet16(ds, 0x9c6c, 0x0005);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(ds);
    ax = 0x1dce;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x154e);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x8bd6);
    memoryASet16(ds, 0x988a, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1dd8;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x154e);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x988a);
    memoryASet16(ds, 0x9896, ax);
    push(cs);
    cs = 0x1829;
    sub_18293(); // 1829:0003
    assert(cs == 0x154e);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1de2;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x154e);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x9896);
    memoryASet16(ds, 0x9882, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1ded;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x154e);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x9882);
    memoryASet16(ds, 0x9878, ax);
    ax = 0x0030;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x154e);
    sp++;
    sp++;
    ax = 0x0035;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x154e);
    sp++;
    sp++;
    ax = 0x0031;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x154e);
    sp++;
    sp++;
    ax = 0x0036;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x154e);
    sp++;
    sp++;
    ax = memoryAGet16(ds, 0x9878);
    ax += 0x0003;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_1946a(); // 18f7:04fa
    assert(cs == 0x154e);
    sp++;
    sp++;
    push(ds);
    ax = 0x1df7;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19e49(); // 19e4:0009
    assert(cs == 0x154e);
    sp += 0x0004;
    push(cs);
    sub_154e6(); // 154e:0006
    push(ds);
    ax = 0x5840;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x154e);
    sp += 0x0004;
    push(ds);
    ax = 0x2950;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x154e);
    sp += 0x0004;
    push(ds);
    ax = 0x29e2;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x154e);
    sp += 0x0004;
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x154e);
    sp += 0x0004;
loc_15670: // 154e:0190
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_1567a;
    goto loc_15b8a;
loc_1567a: // 154e:019a
    if (memoryAGet16(ds, 0x9c68) != 0x0013)
        goto loc_15684;
    goto loc_15b8a;
loc_15684: // 154e:01a4
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x154e);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_156ae;
    push(memoryAGet16(ds, 0x9c68));
    push(ds);
    ax = 0x4e50;
    push(ax);
    push(ds);
    ax = 0x4e2a;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19f50(); // 19e4:0110
    assert(cs == 0x154e);
    sp += 0x000a;
    goto loc_156bc;
loc_156ae: // 154e:01ce
    ax = memoryAGet16(ds, 0x9c68);
    ax += 0xff9c;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a03f(); // 19e4:01ff
    assert(cs == 0x154e);
    sp++;
    sp++;
loc_156bc: // 154e:01dc
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_156d6;
    push(memoryAGet16(ds, 0x9c68));
    push(ds);
    ax = 0x5840;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x154e);
    sp += 0x0006;
    goto loc_156ea;
loc_156d6: // 154e:01f6
    ax = memoryAGet16(ds, 0x9c68);
    ax += 0xff9c;
    push(ax);
    push(ds);
    ax = 0x2950;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x154e);
    sp += 0x0006;
loc_156ea: // 154e:020a
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_15704;
    bx = memoryAGet16(ds, 0x9c68);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7592));
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x154e);
    sp++;
    sp++;
    goto loc_1570f;
loc_15704: // 154e:0224
    ax = 0x00a8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x154e);
    sp++;
    sp++;
loc_1570f: // 154e:022f
    push(cs);
    cs = 0x19e4;
    sub_1a4da(); // 19e4:069a
    assert(cs == 0x154e);
    memoryASet(ss, bp - 7, 0x00);
    memoryASet16(ds, 0x9872, 0x0000);
    push(cs);
    cs = 0x19e4;
    sub_1b214(); // 19e4:13d4
    assert(cs == 0x154e);
    push(cs);
    cs = 0x19e4;
    sub_1b3e8(); // 19e4:15a8
    assert(cs == 0x154e);
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x154e);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x154e);
    push(cs);
    cs = 0x19e4;
    sub_1b341(); // 19e4:1501
    assert(cs == 0x154e);
    si = 0;
    goto loc_1574a;
loc_1573b: // 154e:025b
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38918, 0x0000);
    si++;
loc_1574a: // 154e:026a
    if (si < 0x000a)
        goto loc_1573b;
    memoryASet16(ds, 0x97e4, 0x0000);
    memoryASet16(ds, 0x9894, 0x0000);
    memoryASet16(ds, 0x97e6, 0x0000);
    memoryASet16(ds, 0x987e, 0x0000);
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x154e);
loc_1576c: // 154e:028c
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_15776;
    goto loc_15b48;
loc_15776: // 154e:0296
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_15780;
    goto loc_15b48;
loc_15780: // 154e:02a0
    ax = memoryAGet16(ds, 0x985a);
    memoryASet16(ds, 0x985a, memoryAGet16(ds, 0x985a) + 1);
    if (ax <= 0x003c)
        goto loc_157bd;
    if (memoryAGet16(ds, 0x9c66) == 0x0000)
        goto loc_15799;
    memoryASet16(ds, 0x9c66, memoryAGet16(ds, 0x9c66) - 1);
    goto loc_157b2;
loc_15799: // 154e:02b9
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_157b2;
    memoryASet16(ds, 0x9874, 0x0000);
    memoryASet16(ds, 0x9870, 0x0001);
    memoryASet16(ds, 0x97fa, 0x0001);
loc_157b2: // 154e:02d2
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x154e);
    memoryASet16(ds, 0x985a, 0x0000);
loc_157bd: // 154e:02dd
    push(cs);
    cs = 0x19e4;
    sub_1b0b7(); // 19e4:1277
    assert(cs == 0x154e);
    push(cs);
    cs = 0x19e4;
    sub_1a5d8(); // 19e4:0798
    assert(cs == 0x154e);
    memoryASet16(ds, 0x97e6, 0x0000);
    push(cs);
    cs = 0x1bf1;
    sub_1bf13(); // 1bf1:0003
    assert(cs == 0x154e);
    push(cs);
    cs = 0x19e4;
    sub_1a6df(); // 19e4:089f
    assert(cs == 0x154e);
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_157ee;
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_157ee;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0003);
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 1);
loc_157ee: // 154e:030e
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_15819;
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_15819;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0003);
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 1);
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x012c)
        goto loc_15819;
    memoryASet16(ds, 0x9c68, 0x0013);
    memoryASet16(ds, 0x9872, 0x0001);
loc_15819: // 154e:0339
    if (memoryAGet16(ds, 0x9c68) != 0x000c)
        goto loc_15881;
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_15839;
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x9876, ax);
    ax = memoryAGet16(ds, 0x97f2);
    memoryASet16(ds, 0x9804, ax);
    memoryASet16(ds, 0x989c, 0x0000);
loc_15839: // 154e:0359
    if ((short)memoryAGet16(ds, 0x9804) <= (short)0xffe2)
        goto loc_15881;
    memoryASet16(ds, 0x9876, memoryAGet16(ds, 0x9876) + 0x0005);
    memoryASet16(ds, 0x9804, memoryAGet16(ds, 0x9804) - 0x0004);
    ax = 0;
    push(ax);
    ax = 0x0076;
    push(ax);
    push(memoryAGet16(ds, 0x9804));
    push(memoryAGet16(ds, 0x9876));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x154e);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x007d;
    push(ax);
    push(memoryAGet16(ds, 0x9804));
    ax = memoryAGet16(ds, 0x9876);
    ax += 0x0015;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x154e);
    sp += 0x000a;
loc_15881: // 154e:03a1
    if (memoryAGet16(ds, 0x9c68) == 0x000a)
        goto loc_1588f;
    if (memoryAGet16(ds, 0x9c68) != 0x000b)
        goto loc_158a1;
loc_1588f: // 154e:03af
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_158a1;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_158a1;
    push(cs);
    cs = 0x19e4;
    sub_1b934(); // 19e4:1af4
    assert(cs == 0x154e);
loc_158a1: // 154e:03c1
    ax = 0;
    memoryASet16(ds, 0x9898, ax);
    memoryASet16(ds, 0x9802, ax);
    memoryASet16(ds, 0x988c, ax);
    memoryASet16(ds, 0x986a, ax);
    push(cs);
    cs = 0x0a34;
    sub_a9f3(); // 0a34:06b3
    assert(cs == 0x154e);
    al = memoryAGet(ds, 0x8db4);
    ah = 0x00;
    memoryASet16(ds, 0x9898, ax);
    al = memoryAGet(ds, 0x92b6);
    ah = 0x00;
    memoryASet16(ds, 0x9802, ax);
    al = memoryAGet(ds, 0x8baf);
    ah = 0x00;
    memoryASet16(ds, 0x986a, ax);
    al = memoryAGet(ds, 0x8da6);
    ah = 0x00;
    memoryASet16(ds, 0x988c, ax);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x154e);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_158e4;
    push(cs);
    cs = 0x19e4;
    sub_1b991(); // 19e4:1b51
    assert(cs == 0x154e);
loc_158e4: // 154e:0404
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_158ee;
    goto loc_159ad;
loc_158ee: // 154e:040e
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_158f9;
    push(cs);
    cs = 0x19e4;
    sub_1bdb2(); // 19e4:1f72
    assert(cs == 0x154e);
loc_158f9: // 154e:0419
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_15912;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_15912;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_15912;
    push(cs);
    cs = 0x19e4;
    sub_1b107(); // 19e4:12c7
    assert(cs == 0x154e);
loc_15912: // 154e:0432
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_1593b;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x00d7)
        goto loc_1593b;
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0x0014)
        goto loc_1593b;
    if (memoryAGet16(ds, 0x989c) != 0x0000)
        goto loc_1593b;
    memoryASet16(ds, 0x989c, 0x0001);
    memoryASet16(ds, 0x9874, 0x000f);
loc_1593b: // 154e:045b
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_1596b;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x008c)
        goto loc_1596b;
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0x0003)
        goto loc_1596b;
    if (memoryAGet16(ds, 0x989c) != 0x0000)
        goto loc_1596b;
    if (memoryAGet16(ds, 0x9880) <= 0x002c)
        goto loc_1596b;
    memoryASet16(ds, 0x989c, 0x0001);
    memoryASet16(ds, 0x9874, 0x0027);
loc_1596b: // 154e:048b
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_159ad;
    if (memoryAGet16(ds, 0x9880) >= 0x002d)
        goto loc_159ad;
    ax = 0;
    push(ax);
    ax = 0x0053;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x006e;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x154e);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x005c;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x00ad;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x154e);
    sp += 0x000a;
loc_159ad: // 154e:04cd
    if (memoryAGet(ss, bp - 7) != 0x00)
        goto loc_159bd;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_159c5;
loc_159bd: // 154e:04dd
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_159c5: // 154e:04e5
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_159d3;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_159d7;
loc_159d3: // 154e:04f3
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) ^ 0x01);
loc_159d7: // 154e:04f7
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x154e);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x154e);
    sp += 0x0004;
    if (memoryAGet(ss, bp - 6) != 0x00)
        goto loc_15a13;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x154e);
    sp += 0x000a;
    memoryASet(ss, bp - 6, 0x01);
loc_15a13: // 154e:0533
    if (memoryAGet(ss, bp - 5) == 0x00)
        goto loc_15a3b;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_15a27;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_15a3b;
loc_15a27: // 154e:0547
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_15a34;
    push(cs);
    cs = 0x1dc4;
    sub_1e3e9(); // 1dc4:07a9
    assert(cs == 0x154e);
    goto loc_15a49;
loc_15a34: // 154e:0554
    push(cs);
    cs = 0x1dc4;
    sub_1e59e(); // 1dc4:095e
    assert(cs == 0x154e);
    goto loc_15a49;
loc_15a3b: // 154e:055b
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x154e);
    sp += 0x0004;
loc_15a49: // 154e:0569
    memoryASet(ss, bp - 5, 0x00);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x154e);
    sp++;
    sp++;
    push(cs);
    cs = 0x0a34;
    sub_b9ae(); // 0a34:166e
    assert(cs == 0x154e);
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_15a67;
    goto loc_1576c;
loc_15a67: // 154e:0587
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_15a71;
    goto loc_1576c;
loc_15a71: // 154e:0591
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0000)
        goto loc_15a7e;
    memoryASet16(ds, 0x988e, 0x0000);
loc_15a7e: // 154e:059e
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x012c)
        goto loc_15a8c;
    memoryASet16(ds, 0x988e, 0x012c);
loc_15a8c: // 154e:05ac
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x00b4)
        goto loc_15aa4;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_15aa4;
    ax = 0x0001;
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x97fa, ax);
loc_15aa4: // 154e:05c4
    if (memoryAGet16(ds, 0x9c68) < 0x0064)
        goto loc_15aae;
    goto loc_15b31;
loc_15aae: // 154e:05ce
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0006)
        goto loc_15ae9;
    if (memoryAGet16(ds, 0x989c) != 0x0000)
        goto loc_15ae9;
    if (memoryAGet16(ds, 0x9c68) == 0x0000)
        goto loc_15ae9;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_15ae9;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) - 1);
    memoryASet16(ds, 0x988e, 0x011d);
    memoryASet16(ds, 0x9872, 0x0001);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_5e86(); // 023f:3a96
    assert(cs == 0x154e);
    sp++;
    sp++;
    memoryASet(ss, bp - 5, 0x02);
loc_15ae9: // 154e:0609
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0127)
        goto loc_15b31;
    if (memoryAGet16(ds, 0x9c68) == 0x0012)
        goto loc_15b31;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_15b31;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    if (memoryAGet16(ds, 0x9c68) != 0x000c)
        goto loc_15b17;
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_15b17;
    memoryASet16(ds, 0x97f2, 0x0046);
loc_15b17: // 154e:0637
    memoryASet16(ds, 0x988e, 0x0006);
    memoryASet16(ds, 0x9872, 0x0001);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_5e86(); // 023f:3a96
    assert(cs == 0x154e);
    sp++;
    sp++;
    memoryASet(ss, bp - 5, 0x01);
loc_15b31: // 154e:0651
    ax = memoryAGet16(ds, 0x987e);
    ax &= 0x0003;
    if (ax == 0x0003)
        goto loc_15b3f;
    goto loc_1576c;
loc_15b3f: // 154e:065f
    memoryASet16(ds, 0x9872, 0x0001);
    goto loc_1576c;
loc_15b48: // 154e:0668
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x154e);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x987e) & 0x0003)
        goto loc_15b60;
    goto loc_15670;
loc_15b60: // 154e:0680
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) >> 1);
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) >> 1);
    if (memoryAGet16(ds, 0x987e) != 0x03e8)
        goto loc_15b73;
    goto loc_15670;
loc_15b73: // 154e:0693
    push(memoryAGet16(ds, 0x987e));
    ax = 0x0005;
    push(ax);
    push(cs);
    cs = 0x1946;
    sub_19aa5(); // 1946:0645
    assert(cs == 0x154e);
    sp += 0x0004;
    memoryASet(ss, bp - 6, 0x00);
    goto loc_15670;
loc_15b8a: // 154e:06aa
    memoryASet16(ds, 0x989c, 0x0000);
    push(memoryAGet16(ds, 0x987c));
    push(memoryAGet16(ds, 0x987a));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x154e);
    sp += 0x0004;
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x154e);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x9c68) != 0x0013)
        goto loc_15bc2;
    ax = 0x0003;
    push(ax);
    ax = 0x01f4;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19124(); // 18f7:01b4
    assert(cs == 0x154e);
    sp += 0x0004;
loc_15bc2: // 154e:06e2
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_15bc7() // 15bc:0007
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x002c;
    ax = memoryAGet16(ds, 0x9c5e);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6a15(); // 060b:0965
    assert(cs == 0x15bc);
    sp += 0x0008;
    di = 0;
loc_15be4: // 15bc:0024
    if (memoryAGet(ss, bp + di + 65492) == 0x00)
        goto loc_15bee;
    di++;
    goto loc_15be4;
loc_15bee: // 15bc:002e
    si = 0;
loc_15bf0: // 15bc:0030
    ax = 0x0002;
    ax -= di;
    if (ax <= si)
        goto loc_15c07;
    bx = si;
    ax = bp - 0x18;
    bx += ax;
    memoryASet(ss, bx, 0x30);
    si++;
    goto loc_15bf0;
loc_15c07: // 15bc:0047
    memoryASet(ss, bp + si + 65512, 0x00);
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x15bc);
    sp += 0x0008;
    memoryASet16(ss, bp - 4, 0x000f);
    memoryASet16(ss, bp - 2, 0x0009);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(ss);
    ax = bp - 0x18;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0030;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6604(); // 060b:0554
    assert(cs == 0x15bc);
    sp += 0x0012;
    push(cs);
    cs = 0x1829;
    sub_1839a(); // 1829:010a
    assert(cs == 0x15bc);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_15c56() // 15bc:0096
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet16(ds, 0x9870) != 0x0001)
        goto loc_15c6a;
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x9c60, ax);
    ax = memoryAGet16(ds, 0x97f2);
    memoryASet16(ds, 0x97de, ax);
loc_15c6a: // 15bc:00aa
    if (memoryAGet16(ds, 0x9870) >= 0x0009)
        goto loc_15c9e;
    bx = memoryAGet16(ds, 0x9870);
    bx--;
    bx <<= 1;
    si = memoryAGet16(ds, bx + 7682);
    ax = 0;
    push(ax);
    push(si);
    push(memoryAGet16(ds, 0x97f2));
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xfffb;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    memoryASet16(ds, 0x9870, memoryAGet16(ds, 0x9870) + 1);
    goto loc_15d49;
loc_15c9e: // 15bc:00de
    if (memoryAGet16(ds, 0x97fa) == 0x0000)
        goto loc_15ce5;
    si = memoryAGet16(ds, 0x97fa);
    si &= 0x0001;
    si += 0x0011;
    memoryASet16(ds, 0x97fa, memoryAGet16(ds, 0x97fa) + 1);
    memoryASet16(ds, 0x97de, memoryAGet16(ds, 0x97de) - 0x0004);
    ax = 0;
    push(ax);
    push(si);
    push(memoryAGet16(ds, 0x97de));
    push(memoryAGet16(ds, 0x9c60));
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x9890) == 0x0000)
        goto loc_15cde;
    memoryASet16(ds, 0x97de, 0xffff);
loc_15cde: // 15bc:011e
    if ((short)memoryAGet16(ds, 0x97de) > (short)0x0000)
        goto loc_15d49;
loc_15ce5: // 15bc:0125
    memoryASet16(ds, 0x97fa, 0x0000);
    ax = memoryAGet16(ds, 0x9c64);
    memoryASet16(ds, 0x988e, ax);
    ax = memoryAGet16(ds, 0x97fc);
    memoryASet16(ds, 0x97f2, ax);
    memoryASet16(ds, 0x9874, 0x0027);
    memoryASet16(ds, 0x9800, 0x0000);
    memoryASet16(ds, 0x9892, 0x0000);
    memoryASet16(ds, 0x97ea, 0x0000);
    memoryASet16(ds, 0x9c62, 0x0000);
    memoryASet16(ds, 0x9868, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x9c5e, memoryAGet16(ds, 0x9c5e) - 1);
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)ax)
        goto loc_15d37;
    push(cs);
    sub_15bc7(); // 15bc:0007
loc_15d37: // 15bc:0177
    if (memoryAGet16(ds, 0x9c66) >= 0x001e)
        goto loc_15d43;
    memoryASet16(ds, 0x9c66, memoryAGet16(ds, 0x9c66) + 0x000a);
loc_15d43: // 15bc:0183
    memoryASet16(ds, 0x985a, 0x0000);
loc_15d49: // 15bc:0189
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_15d4b() // 15bc:018b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    di = 0;
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)di)
        goto loc_15d5d;
    goto loc_16019;
loc_15d5d: // 15bc:019d
    if (memoryAGet16(ds, 0x97e8) == di)
        goto loc_15d91;
    ax = di;
    push(ax);
    ax = 0x0031;
    push(ax);
    push(memoryAGet16(ds, 0x97f2));
    ax = memoryAGet16(ds, 0x97e8);
    ax &= 0x0001;
    ax += memoryAGet16(ds, 0x988e);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 0x0004);
    memoryASet16(ds, 0x97e8, memoryAGet16(ds, 0x97e8) - 1);
    goto loc_16019;
loc_15d91: // 15bc:01d1
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_15d9f;
    push(cs);
    sub_15c56(); // 15bc:0096
    goto loc_16019;
loc_15d9f: // 15bc:01df
    memoryASet16(ss, bp - 2, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x985e, ax);
    memoryASet16(ds, 0x986e, ax);
    si = ax;
    if (memoryAGet16(ds, 0x9868) != ax)
        goto loc_15dd6;
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0x00a6)
        goto loc_15dd6;
    di = 0x0001;
    memoryASet16(ss, bp - 2, 0x0004);
loc_15dc4: // 15bc:0204
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 1);
    si++;
    if (si >= 0x000a)
        goto loc_15dd6;
    if ((short)memoryAGet16(ds, 0x97f2) < (short)0x00a6)
        goto loc_15dc4;
loc_15dd6: // 15bc:0216
    if (memoryAGet16(ds, 0x986a) != 0x0000)
        goto loc_15de0;
    goto loc_15e62;
loc_15de0: // 15bc:0220
    if (memoryAGet16(ds, 0x9862) == 0x0000)
        goto loc_15dea;
    goto loc_15e62;
loc_15dea: // 15bc:022a
    si = 0x0005;
    if (di)
        goto loc_15e35;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_15e35;
    memoryASet16(ds, 0x9892, memoryAGet16(ds, 0x9892) + 1);
    if (memoryAGet16(ds, 0x9892) <= si)
        goto loc_15e08;
    memoryASet16(ds, 0x9892, 0x0000);
loc_15e08: // 15bc:0248
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 7698);
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    si = memoryAGet16(ds, bx + 7710);
    if (memoryAGet16(ds, 0x9800) != 0x0001)
        goto loc_15e35;
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 7722);
    ax = -ax;
    memoryASet16(ds, 0x986e, ax);
loc_15e35: // 15bc:0275
    if (memoryAGet16(ds, 0x9800) == 0x0001)
        goto loc_15e4c;
    if (di)
        goto loc_15e4c;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_15e4c;
    memoryASet16(ss, bp - 2, 0x001d);
loc_15e4c: // 15bc:028c
    memoryASet16(ds, 0x9800, 0x0001);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) - si);
    if (memoryAGet16(ds, 0x9868) == 0x0000)
        goto loc_15e62;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) - 0x0002);
loc_15e62: // 15bc:02a2
    if (memoryAGet16(ds, 0x988c) != 0x0000)
        goto loc_15e6c;
    goto loc_15eec;
loc_15e6c: // 15bc:02ac
    if (memoryAGet16(ds, 0x9862) == 0x0000)
        goto loc_15e76;
    goto loc_15eec;
loc_15e76: // 15bc:02b6
    si = 0x0005;
    if (di)
        goto loc_15ebf;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_15ebf;
    memoryASet16(ds, 0x9892, memoryAGet16(ds, 0x9892) + 1);
    if (memoryAGet16(ds, 0x9892) <= si)
        goto loc_15e94;
    memoryASet16(ds, 0x9892, 0x0000);
loc_15e94: // 15bc:02d4
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 7698);
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    si = memoryAGet16(ds, bx + 7710);
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_15ebf;
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 7722);
    memoryASet16(ds, 0x986e, ax);
loc_15ebf: // 15bc:02ff
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_15ed6;
    if (di)
        goto loc_15ed6;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_15ed6;
    memoryASet16(ss, bp - 2, 0x001d);
loc_15ed6: // 15bc:0316
    memoryASet16(ds, 0x9800, 0x0000);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + si);
    if (memoryAGet16(ds, 0x9868) == 0x0000)
        goto loc_15eec;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0002);
loc_15eec: // 15bc:032c
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_15ef6;
    goto loc_15f61;
loc_15ef6: // 15bc:0336
    si = 0;
loc_15ef8: // 15bc:0338
    memoryASet16(ds, 0x9868, memoryAGet16(ds, 0x9868) + 1);
    si++;
    if (memoryAGet16(ds, 0x9868) != 0x0002)
        goto loc_15f14;
    ax = memoryAGet16(ds, 0x97f4);
    ax &= 0x007f;
    if (ax <= 0x0014)
        goto loc_15f14;
    push(cs);
    cs = 0x1dc4;
    sub_1dcd2(); // 1dc4:0092
    assert(cs == 0x15bc);
loc_15f14: // 15bc:0354
    ax = memoryAGet16(ds, 0x97f4);
    ax += 0xfff8;
    if (ax >= memoryAGet16(ds, 0x9868))
        goto loc_15f2d;
    ax = memoryAGet16(ds, 0x9868);
    if (ax >= memoryAGet16(ds, 0x97f4))
        goto loc_15f2d;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 1);
loc_15f2d: // 15bc:036d
    ax = memoryAGet16(ds, 0x97f4);
    ax += 0xfffa;
    if (ax <= memoryAGet16(ds, 0x9868))
        goto loc_15f3e;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0002);
loc_15f3e: // 15bc:037e
    ax = memoryAGet16(ds, 0x9868);
    if (ax <= memoryAGet16(ds, 0x97f4))
        goto loc_15f50;
    memoryASet16(ds, 0x9868, 0x0000);
    di = 0x0001;
loc_15f50: // 15bc:0390
    if (memoryAGet16(ds, 0x9868) == 0x0000)
        goto loc_15f5c;
    if (si < 0x0004)
        goto loc_15ef8;
loc_15f5c: // 15bc:039c
    memoryASet16(ss, bp - 2, 0x0004);
loc_15f61: // 15bc:03a1
    if (di)
        goto loc_15f7f;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_15f7f;
    if (memoryAGet16(ds, 0x9898) == 0x0000)
        goto loc_15f7f;
    memoryASet16(ds, 0x9868, 0x0001);
    memoryASet16(ds, 0x97f4, 0x0011);
loc_15f7f: // 15bc:03bf
    if (memoryAGet16(ds, 0x9862) == 0x0000)
        goto loc_15fd8;
    si = 0x0002;
    si -= memoryAGet16(ds, 0x9862);
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_15f98;
    if (!di)
        goto loc_15f9b;
loc_15f98: // 15bc:03d8
    si += 0x0002;
loc_15f9b: // 15bc:03db
    si <<= 1;
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 7734);
    memoryASet16(ss, bp - 2, ax);
    bx = si;
    bx++;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 7734);
    memoryASet16(ds, 0x985e, ax);
    if (memoryAGet16(ds, 0x986a) == 0x0000)
        goto loc_15fc6;
    memoryASet16(ds, 0x9800, 0x0001);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) - 0x0005);
loc_15fc6: // 15bc:0406
    if (memoryAGet16(ds, 0x988c) == 0x0000)
        goto loc_15fd8;
    memoryASet16(ds, 0x9800, 0x0000);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0005);
loc_15fd8: // 15bc:0418
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_15ff6;
    if (di)
        goto loc_15ff6;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_15ff6;
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x9c64, ax);
    ax = memoryAGet16(ds, 0x97f2);
    memoryASet16(ds, 0x97fc, ax);
loc_15ff6: // 15bc:0436
    push(memoryAGet16(ds, 0x9800));
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ds, 0x97f2);
    ax += memoryAGet16(ds, 0x985e);
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += memoryAGet16(ds, 0x986e);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_16019: // 15bc:0459
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1601f() // 15bc:045f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x001e;
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(ds);
    ax = 0x1e46;
    push(ax);
    cx = 0x0018;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x15bc);
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_16043;
    goto loc_160d9;
loc_16043: // 15bc:0483
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x15bc);
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_16056;
    if (memoryAGet16(ds, 0x97e8) == 0x0000)
        goto loc_1605f;
loc_16056: // 15bc:0496
    memoryASet16(ds, 0x9862, 0x0000);
    goto loc_160d9;
loc_1605f: // 15bc:049f
    if (memoryAGet16(ds, 0x9862) == 0x0000)
        goto loc_160d9;
    ax = memoryAGet16(ds, 0x9800);
    memoryASet16(ss, bp - 26, ax);
    si = 0x0002;
    si -= memoryAGet16(ds, 0x9862);
    ax = si;
    dx = 0x0003;
    mul(dx);
    si = ax;
    bx = si;
    bx <<= 1;
    ax = bp - 0x18;
    bx += ax;
    di = memoryAGet16(ss, bx);
    bx = si;
    bx++;
    bx <<= 1;
    ax = bp - 0x18;
    bx += ax;
    ax = memoryAGet16(ss, bx);
    memoryASet16(ss, bp - 28, ax);
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    ax = bp - 0x18;
    bx += ax;
    ax = memoryAGet16(ss, bx);
    memoryASet16(ss, bp - 30, ax);
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_160b7;
    ax = di;
    ax = -ax;
    di = ax;
loc_160b7: // 15bc:04f7
    push(memoryAGet16(ss, bp - 26));
    push(memoryAGet16(ss, bp - 30));
    ax = memoryAGet16(ds, 0x97f2);
    ax += memoryAGet16(ss, bp - 28);
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += di;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    memoryASet16(ds, 0x9862, memoryAGet16(ds, 0x9862) - 1);
loc_160d9: // 15bc:0519
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_160df() // 15bc:051f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet16(ds, 0x9874) == 0x0000)
        goto loc_1612a;
    if (memoryAGet16(ds, 0x9874) >= 0x0064)
        goto loc_1612a;
    memoryASet16(ds, 0x9874, memoryAGet16(ds, 0x9874) - 1);
    ax = 0x0001;
    ax -= memoryAGet16(ds, 0x9c6a);
    memoryASet16(ds, 0x9c6a, ax);
    if (memoryAGet16(ds, 0x9874) > 0x000f)
        goto loc_16106;
    if (!ax)
        goto loc_1612a;
loc_16106: // 15bc:0546
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9c6a);
    ax += 0x001b;
    push(ax);
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff5;
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xfffb;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_1612a: // 15bc:056a
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1612b() // 15bc:056b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet16(ds, 0x932c) != 0x0000)
        goto loc_16135;
    goto loc_161d4;
loc_16135: // 15bc:0575
    if (memoryAGet16(ds, 0x932c) != 0x0001)
        goto loc_16158;
    ax = 0;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x00aa;
    push(ax);
    ax = 0x0088;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    goto loc_16172;
loc_16158: // 15bc:0598
    ax = 0;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0x00a8;
    push(ax);
    ax = 0x0088;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_16172: // 15bc:05b2
    memoryASet16(ds, 0x932c, memoryAGet16(ds, 0x932c) + 1);
    if (memoryAGet16(ds, 0x932c) == 0x0003)
        goto loc_16180;
    goto loc_16212;
loc_16180: // 15bc:05c0
    memoryASet16(ds, 0x932c, 0x0000);
    if (memoryAGet16(ds, 0x932a) > 0x0110)
        goto loc_16191;
    goto loc_16212;
loc_16191: // 15bc:05d1
    memoryASet16(ds, 0x932a, memoryAGet16(ds, 0x932a) - 1);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(memoryAGet16(ds, 0x932a));
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x15bc);
    sp += 0x000e;
    push(ds);
    ax = 0x92c8;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(memoryAGet16(ds, 0x932a));
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x15bc);
    sp += 0x000e;
    push(cs);
    cs = 0x1829;
    sub_1839a(); // 1829:010a
    assert(cs == 0x15bc);
    goto loc_16212;
loc_161d4: // 15bc:0614
    if (memoryAGet16(ds, 0x932a) >= 0x0122)
        goto loc_161f8;
    ax = 0;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x00aa;
    push(ax);
    ax = 0x0088;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    goto loc_16212;
loc_161f8: // 15bc:0638
    ax = 0;
    push(ax);
    ax = 0x0026;
    push(ax);
    ax = 0x00b1;
    push(ax);
    ax = 0x0089;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_16212: // 15bc:0652
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_16213() // 15bc:0653
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    si = memoryAGet16(ds, 0x9330);
    ax = si;
    if (!ax)
        goto loc_16290;
    si--;
    ax = si;
    dx = 0x0006;
    mul(dx);
    si = ax;
    ax = 0;
    push(ax);
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7774));
    bx = si;
    bx++;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7774));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7774));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    bx = si;
    bx += 0x0005;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7774));
    bx = si;
    bx += 0x0004;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7774));
    bx = si;
    bx += 0x0003;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 7774));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    memoryASet16(ds, 0x9330, memoryAGet16(ds, 0x9330) + 1);
    if (memoryAGet16(ds, 0x9330) != 0x0006)
        goto loc_162aa;
    memoryASet16(ds, 0x9330, 0x0000);
    goto loc_162aa;
loc_16290: // 15bc:06d0
    ax = 0;
    push(ax);
    ax = 0x0023;
    push(ax);
    ax = 0x0032;
    push(ax);
    ax = 0x0086;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_162aa: // 15bc:06ea
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_162ac() // 15bc:06ec
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    if (memoryAGet16(ds, 0x9328) == 0x0000)
        goto loc_162be;
    memoryASet16(ds, 0x9328, memoryAGet16(ds, 0x9328) - 1);
loc_162be: // 15bc:06fe
    si = 0;
    goto loc_16552;
loc_162c3: // 15bc:0703
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 37616);
    if (ax <= 0x0002)
        goto loc_162d3;
    goto loc_1654f;
loc_162d3: // 15bc:0713
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_162e2;
        case 2: goto loc_16363;
        case 4: goto loc_164f0;
        default:
        assert(0);
    }
    //   gap of 6 bytes
loc_162e2: // 15bc:0722
    if (memoryAGet16(ds, 0x9328) == 0x0000)
        goto loc_162ec;
    goto loc_1654f;
loc_162ec: // 15bc:072c
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x15bc);
    bx = 0x0064;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    if ((short)dx <= (short)0x0032)
        goto loc_16316;
    bx = si;
    bx++;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0001);
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0168);
    goto loc_1632e;
loc_16316: // 15bc:0756
    bx = si;
    bx++;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0000);
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0xffd8);
loc_1632e: // 15bc:076e
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0001);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x15bc);
    bx = 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    bx = si;
    bx += 0x0003;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, dx);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x15bc);
    bx = 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x001e;
    memoryASet16(ds, 0x9328, dx);
    goto loc_1654f;
loc_16363: // 15bc:07a3
    bx = si;
    bx += 0x0003;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, memoryAGet16(ds, bx + 37616) + 1);
    bx = si;
    bx += 0x0003;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, memoryAGet16(ds, bx + 37616) & 0x0003);
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    di = memoryAGet16(ds, bx + 37616);
    bx = si;
    bx++;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 37616) == 0x0000)
        goto loc_163a1;
    memoryASet16(ss, bp - 2, 0x002d);
    di -= 0x0004;
    if ((short)di >= (short)0xff9c)
        goto loc_163b9;
    goto loc_163af;
loc_163a1: // 15bc:07e1
    memoryASet16(ss, bp - 2, 0x0029);
    di += 0x0004;
    if ((short)di <= (short)0x0190)
        goto loc_163b9;
loc_163af: // 15bc:07ef
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0000);
loc_163b9: // 15bc:07f9
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, di);
    bx = si;
    bx += 0x0003;
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 37616);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 7834);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    ax = 0x00a4;
    push(ax);
    push(di);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_16440;
    if (memoryAGet16(ds, 0x9862) != 0x0001)
        goto loc_16440;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0028;
    if ((short)ax <= (short)di)
        goto loc_16440;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0003;
    if ((short)ax >= (short)di)
        goto loc_16440;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001e;
    if ((short)ax <= (short)0x00a4)
        goto loc_16440;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff6;
    if ((short)ax >= (short)0x00a4)
        goto loc_16440;
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x15bc);
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0002);
    bx = si;
    bx++;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0000);
loc_16440: // 15bc:0880
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_16490;
    if (memoryAGet16(ds, 0x9862) != 0x0001)
        goto loc_16490;
    ax = memoryAGet16(ds, 0x988e);
    if ((short)ax <= (short)di)
        goto loc_16490;
    ax = di;
    ax += 0x0024;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_16490;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001e;
    if ((short)ax <= (short)0x00a4)
        goto loc_16490;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff6;
    if ((short)ax >= (short)0x00a4)
        goto loc_16490;
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x15bc);
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0002);
    bx = si;
    bx++;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0001);
loc_16490: // 15bc:08d0
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 37616) == 0x0001)
        goto loc_1649e;
    goto loc_1654f;
loc_1649e: // 15bc:08de
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x001e;
    if ((short)ax > (short)di)
        goto loc_164ab;
    goto loc_1654f;
loc_164ab: // 15bc:08eb
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xffe2;
    if ((short)ax < (short)di)
        goto loc_164b8;
    goto loc_1654f;
loc_164b8: // 15bc:08f8
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x000a;
    if ((short)ax > (short)0x00a4)
        goto loc_164c6;
    goto loc_1654f;
loc_164c6: // 15bc:0906
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff6;
    if ((short)ax < (short)0x00a4)
        goto loc_164d4;
    goto loc_1654f;
loc_164d4: // 15bc:0914
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_164de;
    goto loc_1654f;
loc_164de: // 15bc:091e
    if (memoryAGet16(ds, 0x9874) != 0x0000)
        goto loc_1654f;
    ax = 0x0001;
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    goto loc_1654f;
loc_164f0: // 15bc:0930
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    di = memoryAGet16(ds, bx + 37616);
    bx = si;
    bx++;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 37616) == 0x0000)
        goto loc_16516;
    memoryASet16(ss, bp - 2, 0x002a);
    di -= 0x0010;
    if ((short)di >= (short)0xff9c)
        goto loc_1652e;
    goto loc_16524;
loc_16516: // 15bc:0956
    memoryASet16(ss, bp - 2, 0x002e);
    di += 0x0010;
    if ((short)di <= (short)0x0190)
        goto loc_1652e;
loc_16524: // 15bc:0964
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0000);
loc_1652e: // 15bc:096e
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, di);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    ax = 0x00a4;
    push(ax);
    push(di);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_1654f: // 15bc:098f
    si += 0x0004;
loc_16552: // 15bc:0992
    if (si >= 0x0010)
        goto loc_1655a;
    goto loc_162c3;
loc_1655a: // 15bc:099a
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_16560() // 15bc:09a0
{
    CStackGuardFar sg(0, false);
    push(si);
    memoryASet16(ds, 0x97e0, 0x0011);
    memoryASet16(ds, 0x9872, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x9c6e, ax);
    memoryASet16(ds, 0x9c68, ax);
    memoryASet16(ds, 0x9c6a, ax);
    memoryASet16(ds, 0x9874, 0x0027);
    memoryASet16(ds, 0x988e, 0x003c);
    memoryASet16(ds, 0x97f2, 0xffd8);
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x9892, ax);
    memoryASet16(ds, 0x97ea, ax);
    memoryASet16(ds, 0x9c62, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x97e8, 0x002a);
    memoryASet16(ds, 0x932e, 0x0028);
    memoryASet16(ds, 0x9328, ax);
    memoryASet16(ds, 0x9330, ax);
    memoryASet16(ds, 0x932c, ax);
    memoryASet16(ds, 0x932a, 0x013d);
    si = ax;
    goto loc_165d3;
loc_165c4: // 15bc:0a04
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 37616, 0x0000);
    si++;
loc_165d3: // 15bc:0a13
    if (si < 0x0007)
        goto loc_165c4;
    memoryASet16(ds, 0x97e2, 0x0000);
    si = pop();
    cs = pop();
}
// Discard check failed in sub_165e0: cur=15bc:0cae last=15bc:0ca1> memoryAGet16(ds, 0x932c) modifies memoryAGet16(ds, 0x932c)
// Discard check failed in sub_165e0: cur=15bc:0cd9 last=15bc:0ccc> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
void sub_165e0() // 15bc:0a20
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19382(); // 18f7:0412
    assert(cs == 0x15bc);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(ds);
    ax = 0x1ea2;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x15bc);
    sp += 0x000a;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_1661e;
    memoryASet(ds, 0x91b9, 0x20);
    memoryASet(ds, 0x8a6f, 0x00);
    memoryASet(ds, 0x8e43, 0x08);
loc_1661e: // 15bc:0a5e
    ax = memoryAGet16(ds, 0x8bd6);
    memoryASet16(ds, 0x988a, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1eab;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x15bc);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x988a);
    memoryASet16(ds, 0x9896, ax);
    push(cs);
    cs = 0x1829;
    sub_18293(); // 1829:0003
    assert(cs == 0x15bc);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1eb5;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x15bc);
    sp += 0x0008;
    di = ax;
    ax = memoryAGet16(ds, 0x9896);
    ax += di;
    ax--;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_1946a(); // 18f7:04fa
    assert(cs == 0x15bc);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x15bc);
    sp += 0x000a;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    ax = 0x000f;
    push(ax);
    ax = 0x0090;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x15bc);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += 0x001d;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = 0x0097;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x15bc);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += 0x0022;
    push(ax);
    ax = 0x0032;
    push(ax);
    ax = 0x0086;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x15bc);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += 0x0025;
    push(ax);
    ax = 0x00b1;
    push(ax);
    ax = 0x0089;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x15bc);
    sp += 0x000c;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x15bc);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x15bc);
    sp += 0x000a;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    ax = 0x000f;
    push(ax);
    ax = 0x0090;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x15bc);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += 0x001d;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = 0x0097;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x15bc);
    sp += 0x000c;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x15bc);
    sp += 0x000a;
    push(cs);
    sub_16560(); // 15bc:09a0
    memoryASet(ss, bp - 5, 0x00);
    memoryASet16(ds, 0x9872, 0x0000);
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x15bc);
    push(cs);
    sub_15bc7(); // 15bc:0007
loc_16797: // 15bc:0bd7
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_167a1;
    goto loc_16986;
loc_167a1: // 15bc:0be1
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_167ab;
    goto loc_16986;
loc_167ab: // 15bc:0beb
    memoryASet16(ds, 0x932e, memoryAGet16(ds, 0x932e) + 1);
    if (memoryAGet16(ds, 0x932e) > 0x0031)
        goto loc_167b9;
    goto loc_167c3;
loc_167b9: // 15bc:0bf9
    if (memoryAGet16(ds, 0x932e) >= 0x0034)
        goto loc_167c3;
    goto loc_167cd;
loc_167c3: // 15bc:0c03
    if (memoryAGet16(ds, 0x932e) > 0x0035)
        goto loc_167cd;
    goto loc_167e8;
loc_167cd: // 15bc:0c0d
    ax = 0;
    push(ax);
    ax = 0x0021;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x009b;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_167e8: // 15bc:0c28
    if (memoryAGet16(ds, 0x932e) > 0x0033)
        goto loc_167f2;
    goto loc_16817;
loc_167f2: // 15bc:0c32
    if (memoryAGet16(ds, 0x932e) < 0x0036)
        goto loc_167fc;
    goto loc_16817;
loc_167fc: // 15bc:0c3c
    ax = 0;
    push(ax);
    ax = 0x0022;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x009b;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_16817: // 15bc:0c57
    if (memoryAGet16(ds, 0x932e) > 0x0036)
        goto loc_16821;
    goto loc_16833;
loc_16821: // 15bc:0c61
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x15bc);
    bx = 0x001e;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x0014;
    memoryASet16(ds, 0x932e, dx);
loc_16833: // 15bc:0c73
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_1683d;
    goto loc_16876;
loc_1683d: // 15bc:0c7d
    if (memoryAGet16(ds, 0x97f2) == 0x00a6)
        goto loc_16848;
    goto loc_16876;
loc_16848: // 15bc:0c88
    if ((short)memoryAGet16(ds, 0x988e) > (short)0x0060)
        goto loc_16852;
    goto loc_16876;
loc_16852: // 15bc:0c92
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0081)
        goto loc_16876;
    if (memoryAGet16(ds, 0x9862) != 0x0001)
        goto loc_16876;
    if (memoryAGet16(ds, 0x932c) != 0x0000)
        goto loc_16876;
    ax = 0x0001;
    memoryASet16(ds, 0x9330, ax);
    memoryASet16(ds, 0x932c, ax);
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x15bc);
loc_16876: // 15bc:0cb6
    if ((short)memoryAGet16(ds, 0x988e) > (short)0x0078)
        goto loc_16880;
    goto loc_1689c;
loc_16880: // 15bc:0cc0
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) - 0x0014);
    if (memoryAGet16(ds, 0x9874) != 0x0000)
        goto loc_1689c;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1689c;
    ax = 0x0001;
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
loc_1689c: // 15bc:0cdc
    push(cs);
    sub_1612b(); // 15bc:056b
    push(cs);
    sub_16213(); // 15bc:0653
    ax = 0;
    memoryASet16(ds, 0x9898, ax);
    memoryASet16(ds, 0x9802, ax);
    memoryASet16(ds, 0x988c, ax);
    memoryASet16(ds, 0x986a, ax);
    push(cs);
    cs = 0x0a34;
    sub_a9f3(); // 0a34:06b3
    assert(cs == 0x15bc);
    al = memoryAGet(ds, 0x8db4);
    ah = 0x00;
    memoryASet16(ds, 0x9898, ax);
    al = memoryAGet(ds, 0x92b6);
    ah = 0x00;
    memoryASet16(ds, 0x9802, ax);
    al = memoryAGet(ds, 0x8baf);
    ah = 0x00;
    memoryASet16(ds, 0x986a, ax);
    al = memoryAGet(ds, 0x8da6);
    ah = 0x00;
    memoryASet16(ds, 0x988c, ax);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x15bc);
    push(cs);
    sub_15d4b(); // 15bc:018b
    push(cs);
    sub_1601f(); // 15bc:045f
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_168f6;
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_168f6;
    push(cs);
    sub_160df(); // 15bc:051f
loc_168f6: // 15bc:0d36
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_16901;
    push(cs);
    sub_162ac(); // 15bc:06ec
loc_16901: // 15bc:0d41
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_16911;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_16919;
loc_16911: // 15bc:0d51
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_16919: // 15bc:0d59
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_16927;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_1692b;
loc_16927: // 15bc:0d67
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) ^ 0x01);
loc_1692b: // 15bc:0d6b
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x15bc);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x15bc);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x15bc);
    sp += 0x0004;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0006)
        goto loc_16962;
    memoryASet16(ds, 0x988e, 0x0006);
loc_16962: // 15bc:0da2
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x15bc);
    sp++;
    sp++;
    push(cs);
    cs = 0x0a34;
    sub_b9ae(); // 0a34:166e
    assert(cs == 0x15bc);
    if (memoryAGet16(ds, 0x932a) == 0x0110)
        goto loc_1697d;
    goto loc_16797;
loc_1697d: // 15bc:0dbd
    memoryASet16(ds, 0x9872, 0x0001);
    goto loc_16797;
loc_16986: // 15bc:0dc6
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x15bc);
    sp++;
    sp++;
    memoryASet(ss, bp - 5, 0x00);
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_169a1;
    goto loc_16b91;
loc_169a1: // 15bc:0de1
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x15bc);
    sp += 0x000a;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    ax = 0x000f;
    push(ax);
    ax = 0x0090;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x15bc);
    sp += 0x000c;
    push(cs);
    sub_15bc7(); // 15bc:0007
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x15bc);
    si = 0;
    goto loc_16b6c;
loc_169e0: // 15bc:0e20
    if (si & 0x0001)
        goto loc_169e9;
    goto loc_16a6f;
loc_169e9: // 15bc:0e29
    ax = 0;
    push(ax);
    ax = 0x0033;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x00a0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x0034;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x00e0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x0035;
    push(ax);
    ax = 0x004f;
    push(ax);
    ax = 0x00a4;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x0036;
    push(ax);
    ax = 0x004f;
    push(ax);
    ax = 0x00e4;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0x00a8;
    push(ax);
    ax = 0x0088;
    push(ax);
    ax = 0x000f;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    goto loc_16af2;
loc_16a6f: // 15bc:0eaf
    ax = 0;
    push(ax);
    ax = 0x0037;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x00a0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x0038;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x00e0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x0039;
    push(ax);
    ax = 0x004f;
    push(ax);
    ax = 0x00a5;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x003a;
    push(ax);
    ax = 0x004f;
    push(ax);
    ax = 0x00e5;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x00aa;
    push(ax);
    ax = 0x0088;
    push(ax);
    ax = 0x000f;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
loc_16af2: // 15bc:0f32
    ax = 0;
    push(ax);
    ax = 0x001d;
    push(ax);
    push(memoryAGet16(ds, 0x97f2));
    push(memoryAGet16(ds, 0x988e));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x15bc);
    sp += 0x000a;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_16b1c;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_16b24;
loc_16b1c: // 15bc:0f5c
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_16b24: // 15bc:0f64
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_16b32;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_16b36;
loc_16b32: // 15bc:0f72
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) ^ 0x01);
loc_16b36: // 15bc:0f76
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x15bc);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x15bc);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x15bc);
    sp += 0x0004;
    ax = 0x000f;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9cf(); // 0a34:168f
    assert(cs == 0x15bc);
    sp++;
    sp++;
    si++;
loc_16b6c: // 15bc:0fac
    if (si >= 0x0012)
        goto loc_16b74;
    goto loc_169e0;
loc_16b74: // 15bc:0fb4
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x15bc);
    sp++;
    sp++;
    ax = 0x0002;
    push(ax);
    ax = 0x01f4;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19124(); // 18f7:01b4
    assert(cs == 0x15bc);
    sp += 0x0004;
loc_16b91: // 15bc:0fd1
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_16b97() // 16b9:0007
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    if (memoryAGet16(ds, 0x9336) != 0x0000)
        goto loc_16c0b;
    if (memoryAGet16(ds, 0x9872) == 0x0002)
        goto loc_16c0b;
    if (memoryAGet16(ds, 0x9342) != 0x0000)
        goto loc_16bdc;
    memoryASet16(ds, 0x933c, memoryAGet16(ds, 0x933c) + 0x0006);
    if ((short)memoryAGet16(ds, 0x933c) <= (short)0x010e)
        goto loc_16bfa;
    if (memoryAGet16(ds, 0x9872) == 0x0003)
        goto loc_16bfa;
    memoryASet16(ds, 0x933c, 0x00f0);
    memoryASet16(ds, 0x9336, 0x0001);
    memoryASet16(ds, 0x9342, 0x0001);
    goto loc_16bfa;
loc_16bdc: // 16b9:004c
    memoryASet16(ds, 0x933c, memoryAGet16(ds, 0x933c) - 0x0006);
    if ((short)memoryAGet16(ds, 0x933c) >= (short)0xfff6)
        goto loc_16bfa;
    memoryASet16(ds, 0x933c, 0x000a);
    memoryASet16(ds, 0x9336, 0x0001);
    memoryASet16(ds, 0x9342, 0x0000);
loc_16bfa: // 16b9:006a
    memoryASet16(ds, 0x9334, memoryAGet16(ds, 0x9334) + 1);
    if (memoryAGet16(ds, 0x9334) != 0x0005)
        goto loc_16c0b;
    memoryASet16(ds, 0x9334, 0x0000);
loc_16c0b: // 16b9:007b
    if (memoryAGet16(ds, 0x9336) == 0x0000)
        goto loc_16c39;
    ax = 0;
    push(ax);
    ax = 0x0022;
    push(ax);
    push(memoryAGet16(ds, 0x9332));
    push(memoryAGet16(ds, 0x933c));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
    memoryASet16(ds, 0x9336, memoryAGet16(ds, 0x9336) + 1);
    memoryASet16(ds, 0x9336, memoryAGet16(ds, 0x9336) & 0x0003);
    goto loc_16d96;
loc_16c39: // 16b9:00a9
    memoryASet16(ss, bp - 2, 0x0000);
    if ((short)memoryAGet16(ds, 0x933c) <= (short)0x0064)
        goto loc_16c52;
    if ((short)memoryAGet16(ds, 0x933c) >= (short)0x00aa)
        goto loc_16c52;
    di = 0x0020;
    goto loc_16c5a;
loc_16c52: // 16b9:00c2
    memoryASet16(ss, bp - 2, 0x0005);
    di = 0x0021;
loc_16c5a: // 16b9:00ca
    si = memoryAGet16(ds, 0x9334);
    si <<= 1;
    si <<= 1;
    si <<= 1;
    ax = memoryAGet16(ds, 0x9334);
    ax <<= 1;
    ax <<= 1;
    si += ax;
    if (memoryAGet16(ds, 0x9342) != 0x0000)
        goto loc_16c88;
    bx = si;
    bx <<= 1;
    bx += 0x1ec0;
    ax = ds;
    es = ax;
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    goto loc_16c9a;
loc_16c88: // 16b9:00f8
    bx = si;
    bx <<= 1;
    bx += 0x1f38;
    ax = ds;
    es = ax;
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
loc_16c9a: // 16b9:010a
    push(memoryAGet16(ds, 0x9342));
    bx = memoryAGet16(ss, bp - 6);
    es = memoryAGet16(ss, bp - 6 + 2);
    push(memoryAGet16(es, bx + 10));
    ax = memoryAGet16(es, bx + 8);
    ax += memoryAGet16(ds, 0x9332);
    push(ax);
    ax = memoryAGet16(es, bx + 6);
    ax += memoryAGet16(ds, 0x933c);
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
    push(memoryAGet16(ds, 0x9342));
    bx = memoryAGet16(ss, bp - 6);
    es = memoryAGet16(ss, bp - 6 + 2);
    push(memoryAGet16(es, bx + 16));
    ax = memoryAGet16(es, bx + 14);
    ax += memoryAGet16(ds, 0x9332);
    push(ax);
    ax = memoryAGet16(es, bx + 12);
    ax += memoryAGet16(ds, 0x933c);
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x933e) != 0x0000)
        goto loc_16d22;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_16d22;
    push(memoryAGet16(ds, 0x9342));
    bx = memoryAGet16(ss, bp - 6);
    es = memoryAGet16(ss, bp - 6 + 2);
    push(memoryAGet16(es, bx + 22));
    ax = memoryAGet16(es, bx + 20);
    ax += memoryAGet16(ds, 0x9332);
    push(ax);
    ax = memoryAGet16(es, bx + 18);
    ax += memoryAGet16(ds, 0x933c);
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
    goto loc_16d70;
loc_16d22: // 16b9:0192
    if (memoryAGet16(ds, 0x9342) != 0x0000)
        goto loc_16d4b;
    ax = 0;
    push(ax);
    ax = 0x001f;
    push(ax);
    ax = memoryAGet16(ds, 0x9332);
    ax += 0x0009;
    push(ax);
    ax = memoryAGet16(ds, 0x933c);
    ax += 0xffc9;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
    goto loc_16d6c;
loc_16d4b: // 16b9:01bb
    ax = 0x0001;
    push(ax);
    ax = 0x001f;
    push(ax);
    ax = memoryAGet16(ds, 0x9332);
    ax += 0x0009;
    push(ax);
    ax = memoryAGet16(ds, 0x933c);
    ax += 0x0056;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
loc_16d6c: // 16b9:01dc
    memoryASet16(ds, 0x933e, memoryAGet16(ds, 0x933e) - 1);
loc_16d70: // 16b9:01e0
    push(memoryAGet16(ds, 0x9342));
    push(di);
    ax = memoryAGet16(ds, 0x9332);
    ax += memoryAGet16(ss, bp - 2);
    bx = memoryAGet16(ss, bp - 6);
    es = memoryAGet16(ss, bp - 6 + 2);
    ax += memoryAGet16(es, bx + 2);
    push(ax);
    ax = memoryAGet16(es, bx);
    ax += memoryAGet16(ds, 0x933c);
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
loc_16d96: // 16b9:0206
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_16d9c() // 16b9:020c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet16(ds, 0x9340) != 0x0000)
        goto loc_16dd2;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x008b)
        goto loc_16dd2;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x00a5)
        goto loc_16dd2;
    if (memoryAGet16(ds, 0x97f2) != 0x00a6)
        goto loc_16dd2;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_16dd2;
    ax = 0x0001;
    memoryASet16(ds, 0x9340, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97f4, 0x0028);
loc_16dd2: // 16b9:0242
    si = memoryAGet16(ds, 0x9340);
    si <<= 1;
    ax = 0;
    push(ax);
    bx = si;
    bx++;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 8112));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 8112));
    ax = 0x0096;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x9340) == 0x0000)
        goto loc_16e11;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x000f);
    memoryASet16(ds, 0x9340, memoryAGet16(ds, 0x9340) + 1);
    memoryASet16(ds, 0x9340, memoryAGet16(ds, 0x9340) & 0x0003);
loc_16e11: // 16b9:0281
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_16e13() // 16b9:0283
{
    CStackGuardFar sg(0, false);
    memoryASet16(ds, 0x97e0, 0x0011);
    memoryASet16(ds, 0x9872, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x9c6e, ax);
    memoryASet16(ds, 0x9c68, ax);
    memoryASet16(ds, 0x9c6a, ax);
    memoryASet16(ds, 0x9874, 0x0027);
    memoryASet16(ds, 0x988e, 0x00d2);
    memoryASet16(ds, 0x97f2, 0xffd8);
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x9892, ax);
    memoryASet16(ds, 0x97ea, ax);
    memoryASet16(ds, 0x9c62, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97e2, ax);
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x97e8, 0x002a);
    memoryASet16(ds, 0x9338, 0x013d);
    memoryASet16(ds, 0x933e, ax);
    memoryASet16(ds, 0x9336, ax);
    memoryASet16(ds, 0x9334, ax);
    memoryASet16(ds, 0x9342, ax);
    memoryASet16(ds, 0x9340, ax);
    memoryASet16(ds, 0x933c, 0x00b4);
    memoryASet16(ds, 0x9332, 0x0088);
    cs = pop();
}
void sub_16e82() // 16b9:02f2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19382(); // 18f7:0412
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(ds);
    ax = 0x1fc0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x16b9);
    sp += 0x000a;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_16ebe;
    memoryASet(ds, 0x91b9, 0x20);
    memoryASet(ds, 0x8a6f, 0x00);
    memoryASet(ds, 0x8e43, 0x08);
loc_16ebe: // 16b9:032e
    ax = memoryAGet16(ds, 0x8bd6);
    memoryASet16(ds, 0x988a, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1fc9;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x16b9);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x988a);
    memoryASet16(ds, 0x9878, ax);
    push(cs);
    cs = 0x1829;
    sub_18293(); // 1829:0003
    assert(cs == 0x16b9);
    ax = 0x001e;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x001f;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0020;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0021;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0023;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0024;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0025;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0026;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0027;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0028;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0029;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x002a;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x002b;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x002c;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = memoryAGet16(ds, 0x9878);
    ax += 0x000d;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_1946a(); // 18f7:04fa
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x16b9);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x16b9);
    sp += 0x000a;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x16b9);
    sp += 0x000a;
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x16b9);
    sp += 0x0004;
    push(cs);
    sub_16e13(); // 16b9:0283
    memoryASet(ss, bp - 5, 0x00);
    memoryASet16(ds, 0x9872, 0x0000);
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x16b9);
    push(cs);
    cs = 0x15bc;
    sub_15bc7(); // 15bc:0007
    assert(cs == 0x16b9);
loc_16ff3: // 16b9:0463
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_16ffd;
    goto loc_17232;
loc_16ffd: // 16b9:046d
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_17007;
    goto loc_17232;
loc_17007: // 16b9:0477
    if (memoryAGet16(ds, 0x9862) == 0x0001)
        goto loc_17011;
    goto loc_170de;
loc_17011: // 16b9:0481
    if ((short)memoryAGet16(ds, 0x97f2) > (short)0x0082)
        goto loc_1701c;
    goto loc_170de;
loc_1701c: // 16b9:048c
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_17026;
    goto loc_17053;
loc_17026: // 16b9:0496
    if (memoryAGet16(ds, 0x9342) == 0x0000)
        goto loc_17030;
    goto loc_17053;
loc_17030: // 16b9:04a0
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x001e;
    dx = memoryAGet16(ds, 0x933c);
    dx += 0xffb0;
    if ((short)ax <= (short)dx)
        goto loc_17053;
    ax = memoryAGet16(ds, 0x933c);
    ax += 0xffc9;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_17053;
    memoryASet16(ds, 0x933e, 0x0006);
loc_17053: // 16b9:04c3
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_1705d;
    goto loc_1708a;
loc_1705d: // 16b9:04cd
    if (memoryAGet16(ds, 0x9342) != 0x0000)
        goto loc_17067;
    goto loc_1708a;
loc_17067: // 16b9:04d7
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x001e;
    dx = memoryAGet16(ds, 0x933c);
    dx += 0x0069;
    if ((short)ax <= (short)dx)
        goto loc_1708a;
    ax = memoryAGet16(ds, 0x933c);
    ax += 0x0091;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1708a;
    memoryASet16(ds, 0x933e, 0x0006);
loc_1708a: // 16b9:04fa
    if (memoryAGet16(ds, 0x933e) == 0x0006)
        goto loc_17094;
    goto loc_170de;
loc_17094: // 16b9:0504
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x16b9);
    if (memoryAGet16(ds, 0x9338) > 0x0110)
        goto loc_170a4;
    goto loc_170de;
loc_170a4: // 16b9:0514
    memoryASet16(ds, 0x9338, memoryAGet16(ds, 0x9338) - 0x0002);
    if (memoryAGet16(ds, 0x9338) < 0x0110)
        goto loc_170b4;
    goto loc_170ba;
loc_170b4: // 16b9:0524
    memoryASet16(ds, 0x9338, 0x0110);
loc_170ba: // 16b9:052a
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9338));
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x16b9);
    sp += 0x000e;
    push(cs);
    cs = 0x1829;
    sub_1839a(); // 1829:010a
    assert(cs == 0x16b9);
loc_170de: // 16b9:054e
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_170e8;
    goto loc_17142;
loc_170e8: // 16b9:0558
    if (memoryAGet16(ds, 0x9874) == 0x0000)
        goto loc_170f2;
    goto loc_17142;
loc_170f2: // 16b9:0562
    if ((short)memoryAGet16(ds, 0x97f2) > (short)0x0082)
        goto loc_170fd;
    goto loc_17142;
loc_170fd: // 16b9:056d
    if (memoryAGet16(ds, 0x9342) == 0x0000)
        goto loc_17107;
    goto loc_17121;
loc_17107: // 16b9:0577
    ax = memoryAGet16(ds, 0x933c);
    ax += 0xffb2;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_17142;
    ax = memoryAGet16(ds, 0x933c);
    ax += 0x0032;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_17142;
    goto loc_17139;
loc_17121: // 16b9:0591
    ax = memoryAGet16(ds, 0x933c);
    ax += 0xffe7;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_17142;
    ax = memoryAGet16(ds, 0x933c);
    ax += 0x005a;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_17142;
loc_17139: // 16b9:05a9
    ax = 0x0001;
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
loc_17142: // 16b9:05b2
    push(cs);
    sub_16b97(); // 16b9:0007
    push(cs);
    sub_16d9c(); // 16b9:020c
    ax = 0;
    memoryASet16(ds, 0x9898, ax);
    memoryASet16(ds, 0x9802, ax);
    memoryASet16(ds, 0x988c, ax);
    memoryASet16(ds, 0x986a, ax);
    push(cs);
    cs = 0x0a34;
    sub_a9f3(); // 0a34:06b3
    assert(cs == 0x16b9);
    al = memoryAGet(ds, 0x8db4);
    ah = 0x00;
    memoryASet16(ds, 0x9898, ax);
    al = memoryAGet(ds, 0x92b6);
    ah = 0x00;
    memoryASet16(ds, 0x9802, ax);
    al = memoryAGet(ds, 0x8baf);
    ah = 0x00;
    memoryASet16(ds, 0x986a, ax);
    al = memoryAGet(ds, 0x8da6);
    ah = 0x00;
    memoryASet16(ds, 0x988c, ax);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x16b9);
    push(cs);
    cs = 0x15bc;
    sub_15d4b(); // 15bc:018b
    assert(cs == 0x16b9);
    push(cs);
    cs = 0x15bc;
    sub_1601f(); // 15bc:045f
    assert(cs == 0x16b9);
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1719f;
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_1719f;
    push(cs);
    cs = 0x15bc;
    sub_160df(); // 15bc:051f
    assert(cs == 0x16b9);
loc_1719f: // 16b9:060f
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_171af;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_171b7;
loc_171af: // 16b9:061f
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_171b7: // 16b9:0627
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_171c5;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_171c9;
loc_171c5: // 16b9:0635
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) ^ 0x01);
loc_171c9: // 16b9:0639
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x16b9);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x16b9);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x16b9);
    sp += 0x0004;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x000a)
        goto loc_17200;
    memoryASet16(ds, 0x988e, 0x000a);
loc_17200: // 16b9:0670
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0118)
        goto loc_1720e;
    memoryASet16(ds, 0x988e, 0x0118);
loc_1720e: // 16b9:067e
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x16b9);
    sp++;
    sp++;
    push(cs);
    cs = 0x0a34;
    sub_b9ae(); // 0a34:166e
    assert(cs == 0x16b9);
    if (memoryAGet16(ds, 0x9338) == 0x0110)
        goto loc_17229;
    goto loc_16ff3;
loc_17229: // 16b9:0699
    memoryASet16(ds, 0x9872, 0x0001);
    goto loc_16ff3;
loc_17232: // 16b9:06a2
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x00dc)
        goto loc_17240;
    memoryASet16(ds, 0x988e, 0x00dc);
loc_17240: // 16b9:06b0
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0014)
        goto loc_1724d;
    memoryASet16(ds, 0x988e, 0x0014);
loc_1724d: // 16b9:06bd
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_17257;
    goto loc_173b2;
loc_17257: // 16b9:06c7
    memoryASet16(ds, 0x97f2, 0x00a6);
    memoryASet16(ds, 0x9800, 0x0000);
loc_17263: // 16b9:06d3
    if (memoryAGet16(ds, 0x9872) < 0x0064)
        goto loc_1726d;
    goto loc_17393;
loc_1726d: // 16b9:06dd
    push(cs);
    sub_16b97(); // 16b9:0007
    if (memoryAGet16(ds, 0x9872) != 0x0001)
        goto loc_1729d;
    ax = memoryAGet16(ds, 0x933c);
    ax += 0xffc4;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1729d;
    ax = memoryAGet16(ds, 0x933c);
    ax += 0xffec;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1729d;
    if (memoryAGet16(ds, 0x9342) != 0x0000)
        goto loc_1729d;
    memoryASet16(ds, 0x9872, 0x0002);
loc_1729d: // 16b9:070d
    if (memoryAGet16(ds, 0x9872) != 0x0001)
        goto loc_172be;
    ax = 0;
    push(ax);
    ax = 0x001d;
    push(ax);
    push(memoryAGet16(ds, 0x97f2));
    push(memoryAGet16(ds, 0x988e));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
loc_172be: // 16b9:072e
    if (memoryAGet16(ds, 0x9872) == 0x0002)
        goto loc_172c8;
    goto loc_172ff;
loc_172c8: // 16b9:0738
    if ((short)memoryAGet16(ds, 0x97f2) > (short)0x0077)
        goto loc_172d2;
    goto loc_172f3;
loc_172d2: // 16b9:0742
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0008);
    ax = 0;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ds, 0x97f2));
    push(memoryAGet16(ds, 0x988e));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
    goto loc_172ff;
loc_172f3: // 16b9:0763
    memoryASet16(ds, 0x97f2, 0x0077);
    memoryASet16(ds, 0x9872, 0x0003);
loc_172ff: // 16b9:076f
    if (memoryAGet16(ds, 0x9872) != 0x0003)
        goto loc_17331;
    ax = 0;
    push(ax);
    ax = 0x003b;
    push(ax);
    ax = 0x0077;
    push(ax);
    ax = memoryAGet16(ds, 0x933c);
    ax += 0xfff4;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x16b9);
    sp += 0x000a;
    if ((short)memoryAGet16(ds, 0x933c) <= (short)0x0168)
        goto loc_17331;
    memoryASet16(ds, 0x9872, 0x0064);
loc_17331: // 16b9:07a1
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_17341;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_17349;
loc_17341: // 16b9:07b1
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_17349: // 16b9:07b9
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_17357;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_1735b;
loc_17357: // 16b9:07c7
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) ^ 0x01);
loc_1735b: // 16b9:07cb
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x16b9);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x16b9);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x16b9);
    sp += 0x0004;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9cf(); // 0a34:168f
    assert(cs == 0x16b9);
    sp++;
    sp++;
    goto loc_17263;
loc_17393: // 16b9:0803
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x16b9);
    sp++;
    sp++;
    ax = 0x0004;
    push(ax);
    ax = 0x01f4;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19124(); // 18f7:01b4
    assert(cs == 0x16b9);
    sp += 0x0004;
    goto loc_173bf;
loc_173b2: // 16b9:0822
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x16b9);
    sp++;
    sp++;
loc_173bf: // 16b9:082f
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_173c3() // 173c:0003
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet16(ds, 0x9352) != 0x0000)
        goto loc_173f7;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0063)
        goto loc_173f7;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x007d)
        goto loc_173f7;
    if (memoryAGet16(ds, 0x97f2) != 0x00a6)
        goto loc_173f7;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_173f7;
    ax = 0x0001;
    memoryASet16(ds, 0x9352, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97f4, 0x0046);
loc_173f7: // 173c:0037
    si = memoryAGet16(ds, 0x9352);
    si <<= 1;
    ax = 0;
    push(ax);
    bx = si;
    bx++;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 8148));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 8148));
    ax = 0x006e;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x173c);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x9352) == 0x0000)
        goto loc_17436;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x000f);
    memoryASet16(ds, 0x9352, memoryAGet16(ds, 0x9352) + 1);
    memoryASet16(ds, 0x9352, memoryAGet16(ds, 0x9352) & 0x0003);
loc_17436: // 173c:0076
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_17438() // 173c:0078
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    memoryASet16(ds, 0x9348, memoryAGet16(ds, 0x9348) + 1);
    memoryASet16(ds, 0x9348, memoryAGet16(ds, 0x9348) & 0x001f);
    if (memoryAGet16(ds, 0x9348) != 0x0000)
        goto loc_1744f;
    memoryASet16(ds, 0x9348, 0x0007);
loc_1744f: // 173c:008f
    if ((short)memoryAGet16(ds, 0x9348) > (short)0x000f)
        goto loc_17459;
    goto loc_1755f;
loc_17459: // 173c:0099
    if ((short)memoryAGet16(ds, 0x9348) < (short)0x0015)
        goto loc_17463;
    goto loc_1755f;
loc_17463: // 173c:00a3
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    bx = memoryAGet16(ds, 0x9348);
    bx += 0xfff0;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 8164);
    ax += memoryAGet16(ds, 0x9896);
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x0050;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4f43(); // 023f:2b53
    assert(cs == 0x173c);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    bx = memoryAGet16(ds, 0x9348);
    bx += 0xfff0;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 8164);
    ax += memoryAGet16(ds, 0x9896);
    ax += 0x0003;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x00d0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4f43(); // 023f:2b53
    assert(cs == 0x173c);
    sp += 0x000c;
    push(cs);
    cs = 0x1829;
    sub_184a6(); // 1829:0216
    assert(cs == 0x173c);
    if (memoryAGet16(ds, 0x9348) != 0x0011)
        goto loc_1750b;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1750b;
    if (memoryAGet16(ds, 0x9874) != 0x0000)
        goto loc_1750b;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x00b4)
        goto loc_174f3;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0078)
        goto loc_174f3;
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0x0028)
        goto loc_174f3;
    ax = 0x0001;
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
loc_174f3: // 173c:0133
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0064)
        goto loc_1750b;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0082)
        goto loc_1750b;
    ax = 0x0001;
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
loc_1750b: // 173c:014b
    if (memoryAGet16(ds, 0x9348) == 0x0012)
        goto loc_17515;
    goto loc_17608;
loc_17515: // 173c:0155
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_1751f;
    goto loc_17608;
loc_1751f: // 173c:015f
    if (memoryAGet16(ds, 0x9874) == 0x0000)
        goto loc_17529;
    goto loc_17608;
loc_17529: // 173c:0169
    if ((short)memoryAGet16(ds, 0x97f2) > (short)0x0078)
        goto loc_17533;
    goto loc_17608;
loc_17533: // 173c:0173
    if ((short)memoryAGet16(ds, 0x97f2) < (short)0x0082)
        goto loc_1753e;
    goto loc_17608;
loc_1753e: // 173c:017e
    if ((short)memoryAGet16(ds, 0x988e) > (short)0x005c)
        goto loc_17548;
    goto loc_17608;
loc_17548: // 173c:0188
    if ((short)memoryAGet16(ds, 0x988e) < (short)0x0096)
        goto loc_17553;
    goto loc_17608;
loc_17553: // 173c:0193
    ax = 0x0001;
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    goto loc_17608;
loc_1755f: // 173c:019f
    if (memoryAGet16(ds, 0x9862) == 0x0001)
        goto loc_17569;
    goto loc_17608;
loc_17569: // 173c:01a9
    if ((short)memoryAGet16(ds, 0x97f2) < (short)0x0032)
        goto loc_17573;
    goto loc_17608;
loc_17573: // 173c:01b3
    if ((short)memoryAGet16(ds, 0x988e) > (short)0x00b6)
        goto loc_1757e;
    goto loc_17608;
loc_1757e: // 173c:01be
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x173c);
    memoryASet16(ds, 0x9348, 0x0013);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    ax = 0x0007;
    push(ax);
    ax = 0x0050;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4f43(); // 023f:2b53
    assert(cs == 0x173c);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x0006;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x00d0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4f43(); // 023f:2b53
    assert(cs == 0x173c);
    sp += 0x000c;
    push(cs);
    cs = 0x1829;
    sub_184a6(); // 1829:0216
    assert(cs == 0x173c);
    if (memoryAGet16(ds, 0x934a) <= 0x0110)
        goto loc_17608;
    memoryASet16(ds, 0x934a, memoryAGet16(ds, 0x934a) - 0x0002);
    if (memoryAGet16(ds, 0x934a) >= 0x0110)
        goto loc_175e4;
    memoryASet16(ds, 0x934a, 0x0110);
loc_175e4: // 173c:0224
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x934a));
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x173c);
    sp += 0x000e;
    push(cs);
    cs = 0x1829;
    sub_1839a(); // 1829:010a
    assert(cs == 0x173c);
loc_17608: // 173c:0248
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_17609() // 173c:0249
{
    CStackGuardFar sg(0, false);
    memoryASet16(ds, 0x97e0, 0x0011);
    memoryASet16(ds, 0x9872, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x9c6e, ax);
    memoryASet16(ds, 0x9c68, ax);
    memoryASet16(ds, 0x9c6a, ax);
    memoryASet16(ds, 0x9874, 0x0027);
    memoryASet16(ds, 0x988e, 0x003c);
    memoryASet16(ds, 0x97f2, 0xffd8);
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x9892, ax);
    memoryASet16(ds, 0x97ea, ax);
    memoryASet16(ds, 0x9c62, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97e2, ax);
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x97e8, 0x002a);
    memoryASet16(ds, 0x934a, 0x013d);
    memoryASet16(ds, 0x9350, ax);
    memoryASet16(ds, 0x9348, ax);
    memoryASet16(ds, 0x9346, ax);
    memoryASet16(ds, 0x9352, ax);
    memoryASet16(ds, 0x934e, 0x00b4);
    memoryASet16(ds, 0x9344, 0x0088);
    cs = pop();
}
void sub_17675() // 173c:02b5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = 0x0006;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19382(); // 18f7:0412
    assert(cs == 0x173c);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(ds);
    ax = 0x1fee;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x173c);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x8bd6);
    memoryASet16(ds, 0x988a, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x1ff7;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x173c);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x988a);
    memoryASet16(ds, 0x9896, ax);
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x2001;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x173c);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x2008;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax++;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x173c);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x200f;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x0002;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x173c);
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ds);
    ax = 0x2016;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x0003;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x173c);
    sp += 0x0008;
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x0007;
    memoryASet16(ds, 0x9878, ax);
    ax--;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_1946a(); // 18f7:04fa
    assert(cs == 0x173c);
    sp++;
    sp++;
    push(cs);
    cs = 0x1829;
    sub_18293(); // 1829:0003
    assert(cs == 0x173c);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x173c);
    sp += 0x000a;
    memoryASet16(ds, 0x9348, 0x000f);
    push(cs);
    sub_17438(); // 173c:0078
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x173c);
    sp += 0x000a;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x173c);
    sp += 0x000a;
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x173c);
    sp += 0x0004;
    push(cs);
    sub_17609(); // 173c:0249
    memoryASet(ss, bp - 5, 0x00);
    memoryASet16(ds, 0x9872, 0x0000);
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x173c);
    push(cs);
    cs = 0x15bc;
    sub_15bc7(); // 15bc:0007
    assert(cs == 0x173c);
loc_177a0: // 173c:03e0
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_177aa;
    goto loc_178a4;
loc_177aa: // 173c:03ea
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_177b4;
    goto loc_178a4;
loc_177b4: // 173c:03f4
    push(cs);
    sub_173c3(); // 173c:0003
    push(cs);
    sub_17438(); // 173c:0078
    ax = 0;
    memoryASet16(ds, 0x9898, ax);
    memoryASet16(ds, 0x9802, ax);
    memoryASet16(ds, 0x988c, ax);
    memoryASet16(ds, 0x986a, ax);
    push(cs);
    cs = 0x0a34;
    sub_a9f3(); // 0a34:06b3
    assert(cs == 0x173c);
    al = memoryAGet(ds, 0x8db4);
    ah = 0x00;
    memoryASet16(ds, 0x9898, ax);
    al = memoryAGet(ds, 0x92b6);
    ah = 0x00;
    memoryASet16(ds, 0x9802, ax);
    al = memoryAGet(ds, 0x8baf);
    ah = 0x00;
    memoryASet16(ds, 0x986a, ax);
    al = memoryAGet(ds, 0x8da6);
    ah = 0x00;
    memoryASet16(ds, 0x988c, ax);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x173c);
    push(cs);
    cs = 0x15bc;
    sub_15d4b(); // 15bc:018b
    assert(cs == 0x173c);
    push(cs);
    cs = 0x15bc;
    sub_1601f(); // 15bc:045f
    assert(cs == 0x173c);
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_17811;
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_17811;
    push(cs);
    cs = 0x15bc;
    sub_160df(); // 15bc:051f
    assert(cs == 0x173c);
loc_17811: // 173c:0451
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_17821;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_17829;
loc_17821: // 173c:0461
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_17829: // 173c:0469
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_17837;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_1783b;
loc_17837: // 173c:0477
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) ^ 0x01);
loc_1783b: // 173c:047b
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x173c);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x173c);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x173c);
    sp += 0x0004;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x000a)
        goto loc_17872;
    memoryASet16(ds, 0x988e, 0x000a);
loc_17872: // 173c:04b2
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0118)
        goto loc_17880;
    memoryASet16(ds, 0x988e, 0x0118);
loc_17880: // 173c:04c0
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x173c);
    sp++;
    sp++;
    push(cs);
    cs = 0x0a34;
    sub_b9ae(); // 0a34:166e
    assert(cs == 0x173c);
    if (memoryAGet16(ds, 0x934a) == 0x0110)
        goto loc_1789b;
    goto loc_177a0;
loc_1789b: // 173c:04db
    memoryASet16(ds, 0x9872, 0x0001);
    goto loc_177a0;
loc_178a4: // 173c:04e4
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_178ae;
    goto loc_179ea;
loc_178ae: // 173c:04ee
    si = 0;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = si;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x0002;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x0050;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4f43(); // 023f:2b53
    assert(cs == 0x173c);
    sp += 0x000c;
    push(cs);
    cs = 0x1829;
    sub_184a6(); // 1829:0216
    assert(cs == 0x173c);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += 0x0031;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x00d5;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x173c);
    sp += 0x000c;
loc_178f3: // 173c:0533
    if (memoryAGet16(ds, 0x9872) < 0x001e)
        goto loc_178fd;
    goto loc_179cb;
loc_178fd: // 173c:053d
    if ((short)memoryAGet16(ds, 0x97f2) >= (short)0x00a0)
        goto loc_17927;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 0x0004);
    push(memoryAGet16(ds, 0x9800));
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ds, 0x97f2));
    push(memoryAGet16(ds, 0x988e));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x173c);
    sp += 0x000a;
    goto loc_17945;
loc_17927: // 173c:0567
    memoryASet16(ds, 0x9872, memoryAGet16(ds, 0x9872) + 1);
    ax = 0;
    push(ax);
    ax = 0x001d;
    push(ax);
    ax = 0x00a7;
    push(ax);
    push(memoryAGet16(ds, 0x988e));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x173c);
    sp += 0x000a;
loc_17945: // 173c:0585
    ax = 0;
    push(ax);
    ax = si;
    ax += 0x0034;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x00d0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x173c);
    sp += 0x000a;
    si++;
    if (si != 0x0004)
        goto loc_17969;
    si = 0;
loc_17969: // 173c:05a9
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_17979;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_17981;
loc_17979: // 173c:05b9
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_17981: // 173c:05c1
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_1798f;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_17993;
loc_1798f: // 173c:05cf
    memoryASet(ss, bp - 5, memoryAGet(ss, bp - 5) ^ 0x01);
loc_17993: // 173c:05d3
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x173c);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x173c);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x173c);
    sp += 0x0004;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9cf(); // 0a34:168f
    assert(cs == 0x173c);
    sp++;
    sp++;
    goto loc_178f3;
loc_179cb: // 173c:060b
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x173c);
    sp++;
    sp++;
    ax = 0x0006;
    push(ax);
    ax = 0x01f4;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19124(); // 18f7:01b4
    assert(cs == 0x173c);
    sp += 0x0004;
    goto loc_179f7;
loc_179ea: // 173c:062a
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x173c);
    sp++;
    sp++;
loc_179f7: // 173c:0637
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_179fc() // 179f:000c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x179f);
    sp += 0x000a;
    si = 0;
    goto loc_17a25;
loc_17a1c: // 179f:002c
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet(es, bx + si, 0x00);
    si++;
loc_17a25: // 179f:0035
    if (si < 0x1f40)
        goto loc_17a1c;
    if (memoryAGet16(ss, bp + 18) <= 0x0009)
        goto loc_17aa0;
    if (memoryAGet16(ss, bp + 18) >= 0x000d)
        goto loc_17aa0;
    si = 0;
    goto loc_17a98;
loc_17a3b: // 179f:004b
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x001d;
    push(ax);
    ax = 0x004f;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x179f);
    sp += 0x000c;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x001f;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x179f);
    sp += 0x000c;
    ax = 0x004f;
    push(ax);
    push(si);
    ax = 0x001d;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19eac(); // 19e4:006c
    assert(cs == 0x179f);
    sp += 0x0006;
    ax = 0x0028;
    push(ax);
    push(si);
    ax = 0x001f;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19eac(); // 19e4:006c
    assert(cs == 0x179f);
    sp += 0x0006;
    si += 0x0040;
loc_17a98: // 179f:00a8
    if (si <= 0x0140)
        goto loc_17a3b;
    goto loc_17ad4;
loc_17aa0: // 179f:00b0
    si = 0x0009;
    goto loc_17ace;
loc_17aa5: // 179f:00b5
    di = 0;
    goto loc_17ac5;
loc_17aa9: // 179f:00b9
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x0013;
    push(ax);
    push(si);
    push(di);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x179f);
    sp += 0x000c;
    di += 0x0040;
loc_17ac5: // 179f:00d5
    if (di <= 0x0140)
        goto loc_17aa9;
    si += 0x003f;
loc_17ace: // 179f:00de
    if (si <= 0x00c8)
        goto loc_17aa5;
loc_17ad4: // 179f:00e4
    di = 0;
    if (memoryAGet16(ss, bp + 18) == di)
        goto loc_17af4;
    si = di;
    goto loc_17aef;
loc_17adf: // 179f:00ef
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    di += ax;
    di++;
    si++;
loc_17aef: // 179f:00ff
    if (si < memoryAGet16(ss, bp + 18))
        goto loc_17adf;
loc_17af4: // 179f:0104
    ax = di;
    dx = 0x0003;
    mul(dx);
    di = ax;
    si = 0;
    goto loc_17b7b;
loc_17b01: // 179f:0111
    ax = di;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 2, ax);
    cx = 0x0004;
    memoryASet16(ss, bp - 2, sar(memoryAGet16(ss, bp - 2), cl));
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) << cl);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = di;
    ax += 0x0002;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax += memoryAGet16(ds, 0x9896);
    ax--;
    push(ax);
    ax = di;
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    push(memoryAGet16(es, bx));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x179f);
    sp += 0x000c;
    ax = di;
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    push(memoryAGet16(es, bx));
    push(memoryAGet16(ss, bp - 2));
    ax = di;
    ax += 0x0002;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax--;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19eac(); // 19e4:006c
    assert(cs == 0x179f);
    sp += 0x0006;
    di += 0x0003;
    si++;
loc_17b7b: // 179f:018b
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    if (ax < si)
        goto loc_17b8f;
    goto loc_17b01;
loc_17b8f: // 179f:019f
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_17b95() // 179f:01a5
{
    CStackGuardFar sg(0, false);
    memoryASet16(ds, 0x97e0, 0x0011);
    memoryASet16(ds, 0x9872, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x9c6e, ax);
    memoryASet16(ds, 0x9c68, ax);
    memoryASet16(ds, 0x9c6a, ax);
    memoryASet16(ds, 0x9874, 0x0028);
    memoryASet16(ds, 0x988e, 0x005f);
    memoryASet16(ds, 0x97f2, 0x000a);
    memoryASet16(ds, 0x9800, ax);
    memoryASet16(ds, 0x97e2, ax);
    memoryASet16(ds, 0x9892, ax);
    memoryASet16(ds, 0x97ea, ax);
    memoryASet16(ds, 0x9c62, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x97f4, 0x0014);
    memoryASet16(ds, 0x989c, ax);
    memoryASet16(ds, 0x97e8, ax);
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x9c66, 0x0063);
    memoryASet16(ds, 0x985a, ax);
    memoryASet16(ds, 0x9880, ax);
    memoryASet16(ds, 0x989a, 0x000a); // energy
    cs = pop();
}
// Discard check failed in sub_17bfb: cur=179f:0638 last=179f:062e> memoryAGet16(ds, 0x9870) modifies memoryAGet16(ds, 0x9870)
void sub_17bfb() // 179f:020b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    memoryASet(ss, bp - 6, 0x00);
    memoryASet(ss, bp - 5, 0x00);
    ax = 0x0007;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19382(); // 18f7:0412
    assert(cs == 0x179f);
    sp++;
    sp++;
    ax = 0x1f40;
    push(ax);
    push(cs);
    cs = 0x1f23;
    sub_1f231(); // 1f23:0001
    assert(cs == 0x179f);
    sp++;
    sp++;
    memoryASet16(ds, 0x987c, dx);
    memoryASet16(ds, 0x987a, ax);
    memoryASet16(ds, 0x9c6c, 0x0007);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(ds);
    ax = 0x2044;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x179f);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x8bd6);
    memoryASet16(ds, 0x988a, ax);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x204e;
    push(ax);
    push(memoryAGet16(ds, 0x988a));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x179f);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x988a);
    memoryASet16(ds, 0x9896, ax);
    push(cs);
    cs = 0x1829;
    sub_18293(); // 1829:0003
    assert(cs == 0x179f);
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x2058;
    push(ax);
    push(memoryAGet16(ds, 0x9896));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x179f);
    sp += 0x0008;
    ax += memoryAGet16(ds, 0x9896);
    memoryASet16(ds, 0x9882, ax);
    memoryASet16(ds, 0x9878, ax);
    ax = 0x0030;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x179f);
    sp++;
    sp++;
    ax = 0x0031;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x179f);
    sp++;
    sp++;
    ax = 0x0032;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x179f);
    sp++;
    sp++;
    ax = 0x0037;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18d9b(); // 1829:0b0b
    assert(cs == 0x179f);
    sp++;
    sp++;
    ax = memoryAGet16(ds, 0x9878);
    ax += 0x0003;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_1946a(); // 18f7:04fa
    assert(cs == 0x179f);
    sp++;
    sp++;
    push(ds);
    ax = 0x2063;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19e49(); // 19e4:0009
    assert(cs == 0x179f);
    sp += 0x0004;
    push(cs);
    sub_17b95(); // 179f:01a5
    push(ds);
    ax = 0x74fc;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x179f);
    sp += 0x0004;
    push(ds);
    ax = 0x2950;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x179f);
    sp += 0x0004;
    push(ds);
    ax = 0x29e2;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a10b(); // 19e4:02cb
    assert(cs == 0x179f);
    sp += 0x0004;
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x179f);
    sp += 0x0004;
loc_17d07: // 179f:0317
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_17d11;
    goto loc_18256;
loc_17d11: // 179f:0321
    if (memoryAGet16(ds, 0x9c68) != 0x0013)
        goto loc_17d1b;
    goto loc_18256;
loc_17d1b: // 179f:032b
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x179f);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_17d44;
    push(memoryAGet16(ds, 0x9c68));
    push(ds);
    ax = 0x5e5e;
    push(ax);
    push(ds);
    ax = 0x5e36;
    push(ax);
    push(cs);
    sub_179fc(); // 179f:000c
    sp += 0x000a;
    goto loc_17d52;
loc_17d44: // 179f:0354
    ax = memoryAGet16(ds, 0x9c68);
    ax += 0xff9c;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a03f(); // 19e4:01ff
    assert(cs == 0x179f);
    sp++;
    sp++;
loc_17d52: // 179f:0362
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_17d6c;
    push(memoryAGet16(ds, 0x9c68));
    push(ds);
    ax = 0x74fc;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x179f);
    sp += 0x0006;
    goto loc_17d80;
loc_17d6c: // 179f:037c
    ax = memoryAGet16(ds, 0x9c68);
    ax += 0xff9c;
    push(ax);
    push(ds);
    ax = 0x2950;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x179f);
    sp += 0x0006;
loc_17d80: // 179f:0390
    if (memoryAGet16(ds, 0x9c68) >= 0x0064)
        goto loc_17d9a;
    bx = memoryAGet16(ds, 0x9c68);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 8222));
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x179f);
    sp++;
    sp++;
    goto loc_17da5;
loc_17d9a: // 179f:03aa
    ax = 0x00a8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x179f);
    sp++;
    sp++;
loc_17da5: // 179f:03b5
    push(cs);
    cs = 0x19e4;
    sub_1a4da(); // 19e4:069a
    assert(cs == 0x179f);
    memoryASet(ss, bp - 7, 0x00);
    memoryASet16(ds, 0x9872, 0x0000);
    push(cs);
    cs = 0x19e4;
    sub_1b214(); // 19e4:13d4
    assert(cs == 0x179f);
    push(cs);
    cs = 0x19e4;
    sub_1b3e8(); // 19e4:15a8
    assert(cs == 0x179f);
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x179f);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x179f);
    push(cs);
    cs = 0x19e4;
    sub_1b341(); // 19e4:1501
    assert(cs == 0x179f);
    si = 0;
    goto loc_17de0;
loc_17dd1: // 179f:03e1
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38918, 0x0000);
    si++;
loc_17de0: // 179f:03f0
    if (si < 0x000a)
        goto loc_17dd1;
    memoryASet16(ds, 0x97e4, 0x0000);
    memoryASet16(ds, 0x9894, 0x0000);
    memoryASet16(ds, 0x97e6, 0x0000);
    memoryASet16(ds, 0x987e, 0x0000);
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x179f);
loc_17e02: // 179f:0412
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_17e0c;
    goto loc_181ec;
loc_17e0c: // 179f:041c
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_17e16;
    goto loc_181ec;
loc_17e16: // 179f:0426
    ax = memoryAGet16(ds, 0x985a);
    memoryASet16(ds, 0x985a, memoryAGet16(ds, 0x985a) + 1);
    if (ax <= 0x003c)
        goto loc_17e53;
    if (memoryAGet16(ds, 0x9c66) == 0x0000)
        goto loc_17e2f;
    memoryASet16(ds, 0x9c66, memoryAGet16(ds, 0x9c66) - 1);
    goto loc_17e48;
loc_17e2f: // 179f:043f
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_17e48;
    memoryASet16(ds, 0x9874, 0x0000);
    memoryASet16(ds, 0x9870, 0x0001);
    memoryASet16(ds, 0x97fa, 0x0001);
loc_17e48: // 179f:0458
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x179f);
    memoryASet16(ds, 0x985a, 0x0000);
loc_17e53: // 179f:0463
    push(cs);
    cs = 0x19e4;
    sub_1b0b7(); // 19e4:1277
    assert(cs == 0x179f);
    push(cs);
    cs = 0x19e4;
    sub_1a5d8(); // 19e4:0798
    assert(cs == 0x179f);
    memoryASet16(ds, 0x97e6, 0x0000);
    push(cs);
    cs = 0x1bf1;
    sub_1bf13(); // 1bf1:0003
    assert(cs == 0x179f);
    push(cs);
    cs = 0x19e4;
    sub_1a6df(); // 19e4:089f
    assert(cs == 0x179f);
    ax = 0;
    memoryASet16(ds, 0x9898, ax);
    memoryASet16(ds, 0x9802, ax);
    memoryASet16(ds, 0x988c, ax);
    memoryASet16(ds, 0x986a, ax);
    push(cs);
    cs = 0x0a34;
    sub_a9f3(); // 0a34:06b3
    assert(cs == 0x179f);
    al = memoryAGet(ds, 0x8db4);
    ah = 0x00;
    memoryASet16(ds, 0x9898, ax);
    al = memoryAGet(ds, 0x92b6);
    ah = 0x00;
    memoryASet16(ds, 0x9802, ax);
    al = memoryAGet(ds, 0x8baf);
    ah = 0x00;
    memoryASet16(ds, 0x986a, ax);
    al = memoryAGet(ds, 0x8da6);
    ah = 0x00;
    memoryASet16(ds, 0x988c, ax);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x179f);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_17eb0;
    push(cs);
    cs = 0x19e4;
    sub_1b991(); // 19e4:1b51
    assert(cs == 0x179f);
loc_17eb0: // 179f:04c0
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_17f1d;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_17ec2;
    push(cs);
    cs = 0x19e4;
    sub_1bdb2(); // 19e4:1f72
    assert(cs == 0x179f);
loc_17ec2: // 179f:04d2
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_17edb;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_17edb;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_17edb;
    push(cs);
    cs = 0x19e4;
    sub_1b107(); // 19e4:12c7
    assert(cs == 0x179f);
loc_17edb: // 179f:04eb
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_17f1d;
    if (memoryAGet16(ds, 0x9880) >= 0x002d)
        goto loc_17f1d;
    ax = 0;
    push(ax);
    ax = 0x0053;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x006e;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x179f);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x005c;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x00ad;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x179f);
    sp += 0x000a;
loc_17f1d: // 179f:052d
    if (memoryAGet(ss, bp - 7) != 0x00)
        goto loc_17f2d;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_17f35;
loc_17f2d: // 179f:053d
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_17f35: // 179f:0545
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_17f43;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_17f47;
loc_17f43: // 179f:0553
    memoryASet(ss, bp - 7, memoryAGet(ss, bp - 7) ^ 0x01);
loc_17f47: // 179f:0557
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x179f);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x179f);
    sp += 0x0004;
    if (memoryAGet(ss, bp - 6) != 0x00)
        goto loc_17f83;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x179f);
    sp += 0x000a;
    memoryASet(ss, bp - 6, 0x01);
loc_17f83: // 179f:0593
    if (memoryAGet(ss, bp - 5) == 0x00)
        goto loc_17fc5;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_17f97;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_17fc5;
loc_17f97: // 179f:05a7
    if (memoryAGet(ss, bp - 5) != 0x01)
        goto loc_17fa2;
    push(cs);
    cs = 0x1dc4;
    sub_1e3e9(); // 1dc4:07a9
    assert(cs == 0x179f);
loc_17fa2: // 179f:05b2
    if (memoryAGet(ss, bp - 5) != 0x02)
        goto loc_17fad;
    push(cs);
    cs = 0x1dc4;
    sub_1e59e(); // 1dc4:095e
    assert(cs == 0x179f);
loc_17fad: // 179f:05bd
    if (memoryAGet(ss, bp - 5) != 0x03)
        goto loc_17fb8;
    push(cs);
    cs = 0x1dc4;
    sub_1e32a(); // 1dc4:06ea
    assert(cs == 0x179f);
loc_17fb8: // 179f:05c8
    if (memoryAGet(ss, bp - 5) != 0x04)
        goto loc_17fd3;
    push(cs);
    cs = 0x1dc4;
    sub_1e4a4(); // 1dc4:0864
    assert(cs == 0x179f);
    goto loc_17fd3;
loc_17fc5: // 179f:05d5
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x179f);
    sp += 0x0004;
loc_17fd3: // 179f:05e3
    memoryASet(ss, bp - 5, 0x00);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x179f);
    sp++;
    sp++;
    push(cs);
    cs = 0x0a34;
    sub_b9ae(); // 0a34:166e
    assert(cs == 0x179f);
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_17ff1;
    goto loc_17e02;
loc_17ff1: // 179f:0601
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_17ffb;
    goto loc_17e02;
loc_17ffb: // 179f:060b
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0000)
        goto loc_18008;
    memoryASet16(ds, 0x988e, 0x0000);
loc_18008: // 179f:0618
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x012c)
        goto loc_18016;
    memoryASet16(ds, 0x988e, 0x012c);
loc_18016: // 179f:0626
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x00b4)
        goto loc_1802e;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1802e;
    ax = 0x0001;
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x97fa, ax);
loc_1802e: // 179f:063e
    if (memoryAGet16(ds, 0x9c68) < 0x0064)
        goto loc_18038;
    goto loc_181d5;
loc_18038: // 179f:0648
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_1804d;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0132)
        goto loc_1804d;
    memoryASet16(ds, 0x988e, 0x0132);
loc_1804d: // 179f:065d
    if (memoryAGet16(ds, 0x9c68) != 0x0012)
        goto loc_18093;
    if (memoryAGet16(ds, 0x9860) == 0x0000)
        goto loc_18093;
    if (memoryAGet16(ds, 0x9880) <= 0x002c)
        goto loc_18093;
    if (memoryAGet16(ds, 0x987e) != 0x0000)
        goto loc_18093;
    if (memoryAGet16(ds, 0x9802) == 0x0000)
        goto loc_18093;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x00eb)
        goto loc_18093;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x00f5)
        goto loc_18093;
    if (memoryAGet16(ds, 0x97f2) != 0x007f)
        goto loc_18093;
    memoryASet16(ds, 0x987e, 0x0fa1);
    memoryASet16(ds, 0x988e, 0x00f0);
loc_18093: // 179f:06a3
    if (memoryAGet16(ds, 0x9c68) != 0x000d)
        goto loc_180a7;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x000f)
        goto loc_180a7;
    memoryASet16(ds, 0x988e, 0x000f);
loc_180a7: // 179f:06b7
    if (memoryAGet16(ds, 0x9c68) != 0x0005)
        goto loc_180bc;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0109)
        goto loc_180bc;
    memoryASet16(ds, 0x988e, 0x0109);
loc_180bc: // 179f:06cc
    if (memoryAGet16(ds, 0x9c68) != 0x0005)
        goto loc_180df;
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x00a0)
        goto loc_180df;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x97f2, 0xfff6);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet(ss, bp - 5, 0x03);
loc_180df: // 179f:06ef
    if (memoryAGet16(ds, 0x9c68) != 0x0006)
        goto loc_1811d;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x001e)
        goto loc_180f3;
    memoryASet16(ds, 0x988e, 0x001e);
loc_180f3: // 179f:0703
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0109)
        goto loc_18101;
    memoryASet16(ds, 0x988e, 0x0109);
loc_18101: // 179f:0711
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x00a0)
        goto loc_1811d;
    memoryASet16(ds, 0x97f2, 0x0000);
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet(ss, bp - 5, 0x03);
loc_1811d: // 179f:072d
    if (memoryAGet16(ds, 0x9c68) != 0x0007)
        goto loc_18131;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x000f)
        goto loc_18131;
    memoryASet16(ds, 0x988e, 0x000f);
loc_18131: // 179f:0741
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_18146;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0109)
        goto loc_18146;
    memoryASet16(ds, 0x988e, 0x0109);
loc_18146: // 179f:0756
    if (memoryAGet16(ds, 0x9c68) != 0x000a)
        goto loc_1815a;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0007)
        goto loc_1815a;
    memoryASet16(ds, 0x988e, 0x0007);
loc_1815a: // 179f:076a
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0006)
        goto loc_1818a;
    if (memoryAGet16(ds, 0x989c) != 0x0000)
        goto loc_1818a;
    if (memoryAGet16(ds, 0x9c68) == 0x0000)
        goto loc_1818a;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_1818a;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) - 1);
    memoryASet16(ds, 0x988e, 0x011d);
    memoryASet16(ds, 0x9872, 0x0001);
    memoryASet(ss, bp - 5, 0x02);
loc_1818a: // 179f:079a
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0127)
        goto loc_181d5;
    if (memoryAGet16(ds, 0x9c68) == 0x0012)
        goto loc_181d5;
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_181d5;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_181b0;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0010);
loc_181b0: // 179f:07c0
    memoryASet16(ds, 0x988e, 0x0006);
    memoryASet16(ds, 0x9872, 0x0001);
    if (memoryAGet16(ds, 0x9c68) != 0x000d)
        goto loc_181d1;
    memoryASet16(ds, 0x988e, 0x0030);
    memoryASet16(ds, 0x97f2, 0x0082);
    goto loc_181d5;
loc_181d1: // 179f:07e1
    memoryASet(ss, bp - 5, 0x01);
loc_181d5: // 179f:07e5
    ax = memoryAGet16(ds, 0x987e);
    ax &= 0x0003;
    if (ax == 0x0003)
        goto loc_181e3;
    goto loc_17e02;
loc_181e3: // 179f:07f3
    memoryASet16(ds, 0x9872, 0x0001);
    goto loc_17e02;
loc_181ec: // 179f:07fc
    al = memoryAGet(ss, bp - 7);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x179f);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x987e) & 0x0003)
        goto loc_18204;
    goto loc_17d07;
loc_18204: // 179f:0814
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) >> 1);
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) >> 1);
    if (memoryAGet16(ds, 0x987e) != 0x03e8)
        goto loc_18217;
    goto loc_1822e;
loc_18217: // 179f:0827
    push(memoryAGet16(ds, 0x987e));
    ax = 0x0007;
    push(ax);
    push(cs);
    cs = 0x1946;
    sub_19aa5(); // 1946:0645
    assert(cs == 0x179f);
    sp += 0x0004;
    memoryASet(ss, bp - 6, 0x00);
    goto loc_17d07;
loc_1822e: // 179f:083e
    if (memoryAGet16(ds, 0x9c68) != 0x0009)
        goto loc_18245;
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    memoryASet16(ds, 0x988e, 0x000a);
    memoryASet16(ds, 0x97f2, 0x0083);
loc_18245: // 179f:0855
    if (memoryAGet16(ds, 0x9c68) == 0x0012)
        goto loc_1824f;
    goto loc_17d07;
loc_1824f: // 179f:085f
    memoryASet16(ds, 0x9c68, memoryAGet16(ds, 0x9c68) + 1);
    goto loc_17d07;
loc_18256: // 179f:0866
    memoryASet16(ds, 0x989c, 0x0000);
    push(memoryAGet16(ds, 0x987c));
    push(memoryAGet16(ds, 0x987a));
    push(cs);
    cs = 0x1f01;
    sub_1f01d(); // 1f01:000d
    assert(cs == 0x179f);
    sp += 0x0004;
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x179f);
    sp++;
    sp++;
    if (memoryAGet16(ds, 0x9c68) != 0x0013)
        goto loc_1828e;
    ax = 0x0007;
    push(ax);
    ax = 0x01f4;
    push(ax);
    push(cs);
    cs = 0x18f7;
    sub_19124(); // 18f7:01b4
    assert(cs == 0x179f);
    sp += 0x0004;
loc_1828e: // 179f:089e
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18293() // 1829:0003
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    push(cs);
    cs = 0x0cc2;
    sub_d069(); // 0cc2:0449
    assert(cs == 0x1829);
    si = 0;
    goto loc_182a9;
loc_1829e: // 1829:000e
    memoryASet(ds, si + 38574, 0x00);
    memoryASet(ds, si + 38196, 0x00);
    si++;
loc_182a9: // 1829:0019
    if (si < 0x0100)
        goto loc_1829e;
    si = 0;
    goto loc_182bb;
loc_182b3: // 1829:0023
    memoryASet(ds, si + 37756, 0x00);
    si += 0x0005;
loc_182bb: // 1829:002b
    if (si < 0x0190)
        goto loc_182b3;
    memoryASet16(ds, 0x9684, 0x0000);
    memoryASet16(ds, 0x206e, 0x0000);
    di = pop();
    si = pop();
    cs = pop();
}
void sub_182d0() // 1829:0040
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = 0;
loc_182d6: // 1829:0046
    if (memoryAGet(ds, si + 37756) == 0x00)
        goto loc_182e2;
    si += 0x0005;
    goto loc_182d6;
loc_182e2: // 1829:0052
    al = memoryAGet(ss, bp + 8);
    memoryASet(ds, si + 37756, al);
    al = memoryAGet(ss, bp + 10);
    bx = si;
    bx++;
    memoryASet(ds, bx + 37756, al);
    al = memoryAGet(ss, bp + 12);
    bx = si;
    bx += 0x0002;
    memoryASet(ds, bx + 37756, al);
    al = memoryAGet(ss, bp + 14);
    bx = si;
    bx += 0x0003;
    memoryASet(ds, bx + 37756, al);
    al = memoryAGet(ss, bp + 16);
    bx = si;
    bx += 0x0004;
    memoryASet(ds, bx + 37756, al);
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1831a() // 1829:008a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_18328;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_18356;
loc_18328: // 1829:0098
    ax = 0x00c8;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
    ax = 0x00c8;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_18356: // 1829:00c6
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_18364;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1837b;
loc_18364: // 1829:00d4
    ax = 0x00c8;
    push(ax);
    ax = 0x0050;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_1837b: // 1829:00eb
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_18399;
    ax = 0x00c8;
    push(ax);
    ax = 0x00a0;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_18399: // 1829:0109
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1839a() // 1829:010a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_183a8;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_183d6;
loc_183a8: // 1829:0118
    ax = 0x000a;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
    ax = 0x000a;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_183d6: // 1829:0146
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_183e4;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_183fb;
loc_183e4: // 1829:0154
    ax = 0x000a;
    push(ax);
    ax = 0x0050;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_183fb: // 1829:016b
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_18419;
    ax = 0x000a;
    push(ax);
    ax = 0x00a0;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_18419: // 1829:0189
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1841a() // 1829:018a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_18428;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_1845c;
loc_18428: // 1829:0198
    ax = 0x0009;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
    ax = 0x0009;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_1845c: // 1829:01cc
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1846a;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_18484;
loc_1846a: // 1829:01da
    ax = 0x0009;
    push(ax);
    ax = 0x0050;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_18484: // 1829:01f4
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_184a5;
    ax = 0x0009;
    push(ax);
    ax = 0x00a0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_184a5: // 1829:0215
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_184a6() // 1829:0216
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_184b4;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_184ea;
loc_184b4: // 1829:0224
    ax = 0x00c0;
    push(ax);
    ax = 0x001e;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
    ax = 0x00c0;
    push(ax);
    ax = 0x001e;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_184ea: // 1829:025a
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_184f8;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_18513;
loc_184f8: // 1829:0268
    ax = 0x00c0;
    push(ax);
    ax = 0x003c;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x0014;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_18513: // 1829:0283
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_18535;
    ax = 0x00c0;
    push(ax);
    ax = 0x0078;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_18535: // 1829:02a5
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_185ef() // 1829:035f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    si = memoryAGet16(es, bx + 14);
    ax = si;
    ax <<= 1;
    ax <<= 1;
    ax += si;
    si = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    al = memoryAGet(es, bx + 2);
    memoryASet(ss, bp - 1, al);
    push(memoryAGet16(ss, bp - 6));
    ax = memoryAGet16(ss, bp - 4);
    push(ax);
    push(si);
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d113(); // 0cc2:04f3
    assert(cs == 0x1829);
    sp += 0x0008;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1865c() // 1829:03cc
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    si = memoryAGet16(es, bx + 14);
    si <<= 1;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    al = memoryAGet(es, bx + 2);
    memoryASet(ss, bp - 1, al);
    push(memoryAGet16(ss, bp - 6));
    ax = memoryAGet16(ss, bp - 4);
    push(ax);
    push(si);
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d191(); // 0cc2:0571
    assert(cs == 0x1829);
    sp += 0x0008;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_186c1() // 1829:0431
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    si = memoryAGet16(es, bx + 14);
    si <<= 1;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    al = memoryAGet(es, bx + 2);
    memoryASet(ss, bp - 1, al);
    push(memoryAGet16(ss, bp - 6));
    ax = memoryAGet16(ss, bp - 4);
    push(ax);
    push(si);
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d1f7(); // 0cc2:05d7
    assert(cs == 0x1829);
    sp += 0x0008;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18726() // 1829:0496
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
    bx = memoryAGet16(ds, 0x8e20);
    es = memoryAGet16(ds, 0x8e20 + 2);
    memoryASet16(ss, bp - 12, es);
    memoryASet16(ss, bp - 14, bx);
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx);
    es = memoryAGet16(es, tx + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
    di = 0;
    goto loc_188f7;
loc_18749: // 1829:04b9
    if (memoryAGet(ds, di + 37756) != 0x00)
        goto loc_18753;
    goto loc_188f4;
loc_18753: // 1829:04c3
    bx = di;
    bx += 0x0003;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    memoryASet16(ss, bp - 4, ax);
    bx = di;
    bx++;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_187ca;
    if (memoryAGet(ds, di + 37756) != 0x02)
        goto loc_187ca;
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    dx = 0x0028;
    mul(dx);
    si = ax;
    si += memoryAGet16(ss, bp - 2);
    bx = di;
    bx += 0x0004;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(dx);
    dx = memoryAGet16(ss, bp - 12);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(dx);
    push(cs);
    cs = 0x0cc2;
    sub_d4ec(); // 0cc2:08cc
    assert(cs == 0x1829);
    sp += 0x000c;
    memoryASet(ds, di + 37756, 0x00);
loc_187ca: // 1829:053a
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_187db;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_187db;
    goto loc_18861;
loc_187db: // 1829:054b
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    ax &= 0x0001;
    memoryASet16(ss, bp - 6, ax);
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    ax = sar(ax, 1);
    dx = 0x0050;
    mul(dx);
    si = ax;
    if (memoryAGet16(ss, bp - 6) == 0x0000)
        goto loc_1880a;
    si += 0x2000;
loc_1880a: // 1829:057a
    if (!(memoryAGet16(ss, bp - 2) & 0x0001))
        goto loc_1881c;
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    si += ax;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    goto loc_1881f;
loc_1881c: // 1829:058c
    si += memoryAGet16(ss, bp - 2);
loc_1881f: // 1829:058f
    if (!(memoryAGet16(ss, bp - 4) & 0x0001))
        goto loc_18829;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_18829: // 1829:0599
    push(memoryAGet16(ss, bp - 6));
    bx = di;
    bx += 0x0004;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(dx);
    dx = memoryAGet16(ss, bp - 12);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(dx);
    push(cs);
    cs = 0x0ba1;
    sub_c6ac(); // 0ba1:0c9c
    assert(cs == 0x1829);
    sp += 0x000e;
loc_18861: // 1829:05d1
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_1886b;
    goto loc_188f0;
loc_1886b: // 1829:05db
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    ax &= 0x0003;
    memoryASet16(ss, bp - 6, ax);
    si = ax;
    cx = 0x000d;
    si <<= cl;
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    dx = 0x00a0;
    mul(dx);
    si += ax;
    if (!(memoryAGet16(ss, bp - 2) & 0x0001))
        goto loc_188ab;
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    si += ax;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    goto loc_188ae;
loc_188ab: // 1829:061b
    si += memoryAGet16(ss, bp - 2);
loc_188ae: // 1829:061e
    if (!(memoryAGet16(ss, bp - 4) & 0x0001))
        goto loc_188b8;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_188b8: // 1829:0628
    push(memoryAGet16(ss, bp - 6));
    bx = di;
    bx += 0x0004;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(dx);
    dx = memoryAGet16(ss, bp - 12);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(dx);
    push(cs);
    cs = 0x0e11;
    sub_e680(); // 0e11:0570
    assert(cs == 0x1829);
    sp += 0x000e;
loc_188f0: // 1829:0660
    memoryASet(ds, di + 37756, memoryAGet(ds, di + 37756) << 1);
loc_188f4: // 1829:0664
    di += 0x0005;
loc_188f7: // 1829:0667
    if (di >= 0x0190)
        goto loc_18900;
    goto loc_18749;
loc_18900: // 1829:0670
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18906() // 1829:0676
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_1891c;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_1892d;
loc_1891c: // 1829:068c
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x023f;
    sub_2dbc(); // 023f:09cc
    assert(cs == 0x1829);
    sp += 0x0004;
    goto loc_18ae2;
loc_1892d: // 1829:069d
    bx = memoryAGet16(ds, 0x8b70);
    es = memoryAGet16(ds, 0x8b70 + 2);
    memoryASet16(ss, bp - 12, es);
    memoryASet16(ss, bp - 14, bx);
    bx = memoryAGet16(ds, 0x8bfa);
    es = memoryAGet16(ds, 0x8bfa + 2);
    memoryASet16(ss, bp - 8, es);
    memoryASet16(ss, bp - 10, bx);
    di = 0;
    goto loc_18ad9;
loc_18946: // 1829:06b6
    if (memoryAGet(ds, di + 37756) != 0x00)
        goto loc_18950;
    goto loc_18ad6;
loc_18950: // 1829:06c0
    bx = di;
    bx += 0x0003;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    memoryASet16(ss, bp - 4, ax);
    bx = di;
    bx++;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1897b;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_1897b;
    goto loc_18a42;
loc_1897b: // 1829:06eb
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    ax &= 0x0001;
    memoryASet16(ss, bp - 6, ax);
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    ax = sar(ax, 1);
    dx = 0x0050;
    mul(dx);
    si = ax;
    if (memoryAGet16(ss, bp - 6) == 0x0000)
        goto loc_189aa;
    si += 0x2000;
loc_189aa: // 1829:071a
    if (!(memoryAGet16(ss, bp - 2) & 0x0001))
        goto loc_189bc;
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    si += ax;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    goto loc_189bf;
loc_189bc: // 1829:072c
    si += memoryAGet16(ss, bp - 2);
loc_189bf: // 1829:072f
    if (!(memoryAGet16(ss, bp - 4) & 0x0001))
        goto loc_189c9;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_189c9: // 1829:0739
    if (memoryAGet(ds, 0x8a2c) == 0x00)
        goto loc_18a0a;
    push(memoryAGet16(ss, bp - 6));
    bx = di;
    bx += 0x0004;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(dx);
    dx = memoryAGet16(ss, bp - 12);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(dx);
    push(cs);
    cs = 0x0ba1;
    sub_c6ac(); // 0ba1:0c9c
    assert(cs == 0x1829);
    sp += 0x000e;
    goto loc_18a42;
loc_18a0a: // 1829:077a
    push(memoryAGet16(ss, bp - 6));
    bx = di;
    bx += 0x0004;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(dx);
    dx = memoryAGet16(ss, bp - 12);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(dx);
    push(cs);
    cs = 0x0ba1;
    sub_c707(); // 0ba1:0cf7
    assert(cs == 0x1829);
    sp += 0x000e;
loc_18a42: // 1829:07b2
    if (memoryAGet(ds, 0x8bf0) != 0x00)
        goto loc_18a4c;
    goto loc_18ad1;
loc_18a4c: // 1829:07bc
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    ax &= 0x0003;
    memoryASet16(ss, bp - 6, ax);
    si = ax;
    cx = 0x000d;
    si <<= cl;
    bx = di;
    bx += 0x0002;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    dx = 0x00a0;
    mul(dx);
    si += ax;
    if (!(memoryAGet16(ss, bp - 2) & 0x0001))
        goto loc_18a8c;
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    si += ax;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    goto loc_18a8f;
loc_18a8c: // 1829:07fc
    si += memoryAGet16(ss, bp - 2);
loc_18a8f: // 1829:07ff
    if (!(memoryAGet16(ss, bp - 4) & 0x0001))
        goto loc_18a99;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_18a99: // 1829:0809
    push(memoryAGet16(ss, bp - 6));
    bx = di;
    bx += 0x0004;
    al = memoryAGet(ds, bx + 37756);
    ah = 0x00;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    dx = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 10);
    ax += si;
    push(dx);
    dx = memoryAGet16(ss, bp - 12);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += si;
    push(dx);
    push(cs);
    cs = 0x0e11;
    sub_e680(); // 0e11:0570
    assert(cs == 0x1829);
    sp += 0x000e;
loc_18ad1: // 1829:0841
    memoryASet(ds, di + 37756, memoryAGet(ds, di + 37756) & 0x01);
loc_18ad6: // 1829:0846
    di += 0x0005;
loc_18ad9: // 1829:0849
    if (di >= 0x0190)
        goto loc_18ae2;
    goto loc_18946;
loc_18ae2: // 1829:0852
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18ae8() // 1829:0858
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 14);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    di = memoryAGet16(es, bx + 14);
    di++;
    if ((short)memoryAGet16(ss, bp + 12) <= (short)0x00c7)
        goto loc_18b24;
    goto loc_18bbb;
loc_18b24: // 1829:0894
    if ((short)si <= (short)0x013f)
        goto loc_18b2d;
    goto loc_18bbb;
loc_18b2d: // 1829:089d
    if ((short)si >= 0)
        goto loc_18b33;
    si = 0;
loc_18b33: // 1829:08a3
    if ((short)memoryAGet16(ss, bp + 12) >= (short)0x0000)
        goto loc_18b3e;
    memoryASet16(ss, bp + 12, 0x0000);
loc_18b3e: // 1829:08ae
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 2);
    if (ax <= 0x00c8)
        goto loc_18b52;
    ax = 0x00c8;
    ax -= memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 2, ax);
loc_18b52: // 1829:08c2
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_18b6f;
    si = sar(si, 1);
    si = sar(si, 1);
    si = sar(si, 1);
    ax = si;
    ax += di;
    if ((short)ax <= (short)0x0028)
        goto loc_18ba8;
    di = 0x0028;
    di -= si;
    goto loc_18ba8;
loc_18b6f: // 1829:08df
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_18b7d;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_18b91;
loc_18b7d: // 1829:08ed
    si = sar(si, 1);
    si = sar(si, 1);
    ax = si;
    ax += di;
    if ((short)ax <= (short)0x0050)
        goto loc_18ba8;
    di = 0x0050;
    di -= si;
    goto loc_18ba8;
loc_18b91: // 1829:0901
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_18bbb;
    si = sar(si, 1);
    ax = si;
    ax += di;
    if ((short)ax <= (short)0x00a0)
        goto loc_18ba8;
    di = 0x00a0;
    di -= si;
loc_18ba8: // 1829:0918
    push(memoryAGet16(ss, bp - 2));
    push(di);
    push(memoryAGet16(ss, bp + 12));
    push(si);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_182d0(); // 1829:0040
    sp += 0x000a;
loc_18bbb: // 1829:092b
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18bc1() // 1829:0931
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x9c6c) != 0x0003)
        goto loc_18bd5;
    si = 0x000d;
    di = 0x000f;
    goto loc_18bdb;
loc_18bd5: // 1829:0945
    si = 0x0001;
    di = 0x0003;
loc_18bdb: // 1829:094b
    ax = memoryAGet16(ds, 0x9896);
    ax--;
    si += ax;
    ax = memoryAGet16(ds, 0x9896);
    ax--;
    di += ax;
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    ax = 0;
    push(ax);
    push(si);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1829);
    sp = bp;
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    ax = 0;
    push(ax);
    push(di);
    push(memoryAGet16(ss, bp + 12));
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0010;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1829);
    sp = bp;
    push(si);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_18ae8(); // 1829:0858
    sp = bp;
    push(di);
    push(memoryAGet16(ss, bp + 12));
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0010;
    push(ax);
    push(cs);
    sub_18ae8(); // 1829:0858
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18c3b() // 1829:09ab
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    bx = memoryAGet16(ds, 0x206e);
    bx <<= 1;
    memoryASet16(ds, bx + 37716, 0x0001);
    ax = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(ds, 0x206e);
    bx <<= 1;
    memoryASet16(ds, bx + 38492, ax);
    ax = memoryAGet16(ss, bp + 10);
    bx = memoryAGet16(ds, 0x206e);
    bx <<= 1;
    memoryASet16(ds, bx + 38452, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    bx = memoryAGet16(ds, 0x206e);
    bx <<= 1;
    memoryASet16(ds, bx + 38156, ax);
    ax = memoryAGet16(ss, bp + 14);
    bx = memoryAGet16(ds, 0x206e);
    bx <<= 1;
    memoryASet16(ds, bx + 38534, ax);
    memoryASet16(ds, 0x206e, memoryAGet16(ds, 0x206e) + 1);
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18c85() // 1829:09f5
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    si = 0;
    goto loc_18d86;
loc_18c91: // 1829:0a01
    bx = si;
    bx <<= 1;
    di = memoryAGet16(ds, bx + 38156);
    if (di != 0x03e7)
        goto loc_18cbf;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38452));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38492));
    push(cs);
    sub_18bc1(); // 1829:0931
    sp += 0x0008;
    goto loc_18d85;
loc_18cbf: // 1829:0a2f
    if (memoryAGet(ds, di + 38574) == 0x00)
        goto loc_18ce1;
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 38534) == 0x0000)
        goto loc_18d3f;
    al = memoryAGet(ds, di + 38574);
    ah = 0x00;
    ax += memoryAGet16(ds, 0x9878);
    ax--;
    memoryASet16(ss, bp - 2, ax);
    goto loc_18d47;
loc_18ce1: // 1829:0a51
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 38534);
    dl = memoryAGet(ds, di + 38196);
    dh = 0x00;
    if (ax == dx)
        goto loc_18d3f;
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_18d06;
    ax = memoryAGet16(ds, 0x988a);
    ax += di;
    push(ax);
    push(cs);
    sub_185ef(); // 1829:035f
    sp++;
    sp++;
loc_18d06: // 1829:0a76
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_18d14;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_18d20;
loc_18d14: // 1829:0a84
    ax = memoryAGet16(ds, 0x988a);
    ax += di;
    push(ax);
    push(cs);
    sub_1865c(); // 1829:03cc
    sp++;
    sp++;
loc_18d20: // 1829:0a90
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_18d33;
    ax = memoryAGet16(ds, 0x988a);
    ax += di;
    push(ax);
    push(cs);
    sub_186c1(); // 1829:0431
    sp++;
    sp++;
loc_18d33: // 1829:0aa3
    bx = si;
    bx <<= 1;
    al = memoryAGet(ds, bx + 38534);
    memoryASet(ds, di + 38196, al);
loc_18d3f: // 1829:0aaf
    ax = memoryAGet16(ds, 0x988a);
    ax += di;
    memoryASet16(ss, bp - 2, ax);
loc_18d47: // 1829:0ab7
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38452));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38492));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1829);
    sp += 0x000c;
    push(memoryAGet16(ss, bp - 2));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38452));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38492));
    push(cs);
    sub_18ae8(); // 1829:0858
    sp += 0x0006;
loc_18d85: // 1829:0af5
    si++;
loc_18d86: // 1829:0af6
    if (si >= memoryAGet16(ds, 0x206e))
        goto loc_18d8f;
    goto loc_18c91;
loc_18d8f: // 1829:0aff
    memoryASet16(ds, 0x206e, 0x0000);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18d9b() // 1829:0b0b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x001c;
    ax = memoryAGet16(ds, 0x9878);
    ax += memoryAGet16(ds, 0x9684);
    memoryASet16(ss, bp - 20, ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += memoryAGet16(ss, bp + 10);
    ax--;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 20);
    ax--;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    dx = memoryAGet16(es, bx + 8);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ss, bp - 26, dx);
    memoryASet16(ss, bp - 28, ax);
    ax = memoryAGet16(ss, bp - 18);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    si = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(ss, bp - 18);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    ax = memoryAGet16(es, bx + 14);
    mul(si);
    si = ax;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_18e11;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_18e11;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_18e13;
loc_18e11: // 1829:0b81
    si <<= 1;
loc_18e13: // 1829:0b83
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_18e23;
    ax = si;
    dx = 0x0005;
    mul(dx);
    si = ax;
loc_18e23: // 1829:0b93
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 26));
    push(memoryAGet16(ss, bp - 28));
    push(cs);
    cs = 0x01ed;
    sub_204c(); // 01ed:017c
    assert(cs == 0x1829);
    memoryASet16(ss, bp - 24, ax);
    dx = 0;
    ax = 0xfa00;
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp - 26));
    push(memoryAGet16(ss, bp - 28));
    push(cs);
    cs = 0x01ed;
    sub_2044(); // 01ed:0174
    assert(cs == 0x1829);
    memoryASet16(ss, bp - 22, ax);
    push(si);
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_7bd0(); // 06c1:0fc0
    assert(cs == 0x1829);
    sp += 0x0004;
    if (!ax)
        goto loc_18e78;
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + 1);
    memoryASet16(ss, bp - 22, 0x0000);
    ax = memoryAGet16(ss, bp - 24);
    dx = 0;
    cx = 0;
    bx = 0xfa00;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x1829);
    memoryASet16(ss, bp - 26, dx);
    memoryASet16(ss, bp - 28, ax);
loc_18e78: // 1829:0be8
    bx = memoryAGet16(ss, bp - 24);
    bx <<= 1;
    bx <<= 1;
    tx = bx;
    bx = memoryAGet16(ds, tx + 35374);
    es = memoryAGet16(ds, tx + 35374 + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + ax);
    ax = memoryAGet16(ss, bp - 18);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    tx = bx;
    bx = memoryAGet16(es, tx + 10);
    es = memoryAGet16(es, tx + 10 + 2);
    memoryASet16(ss, bp - 14, es);
    memoryASet16(ss, bp - 16, bx);
    di = 0;
    goto loc_18ebe;
loc_18eab: // 1829:0c1b
    bx = memoryAGet16(ss, bp - 16);
    es = memoryAGet16(ss, bp - 16 + 2);
    al = memoryAGet(es, bx);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
    di++;
loc_18ebe: // 1829:0c2e
    if (di < si)
        goto loc_18eab;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - si);
    ax = si;
    dx = 0;
    flags.carry = (ax + memoryAGet16(ss, bp - 28)) >= 0x10000;
    ax += memoryAGet16(ss, bp - 28);
    dx += memoryAGet16(ss, bp - 26) + flags.carry;
    memoryASet16(ss, bp - 26, dx);
    memoryASet16(ss, bp - 28, ax);
    ax = memoryAGet16(ss, bp - 18);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    ax = memoryAGet16(ss, bp - 20);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    bx += ax;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    push(es);
    push(bx);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    push(es);
    push(bx);
    cx = 0x0014;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x1829);
    dx = memoryAGet16(ss, bp - 26);
    ax = memoryAGet16(ss, bp - 28);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 8, dx);
    memoryASet16(es, bx + 6, ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx + 12, dx);
    memoryASet16(es, bx + 10, ax);
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_18f3b;
    push(memoryAGet16(ss, bp - 20));
    push(cs);
    sub_185ef(); // 1829:035f
    sp++;
    sp++;
loc_18f3b: // 1829:0cab
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_18f49;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_18f52;
loc_18f49: // 1829:0cb9
    push(memoryAGet16(ss, bp - 20));
    push(cs);
    sub_1865c(); // 1829:03cc
    sp++;
    sp++;
loc_18f52: // 1829:0cc2
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_18f62;
    push(memoryAGet16(ss, bp - 20));
    push(cs);
    sub_186c1(); // 1829:0431
    sp++;
    sp++;
loc_18f62: // 1829:0cd2
    al = memoryAGet(ds, 0x9684);
    al++;
    bx = memoryAGet16(ss, bp + 10);
    bx--;
    memoryASet(ds, bx + 38574, al);
    memoryASet16(ds, 0x9684, memoryAGet16(ds, 0x9684) + 1);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18f79() // 18f7:0009
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    if (memoryAGet(ds, 0x8c58) != 0x00)
        goto loc_18f93;
    memoryASet16(ss, bp - 2, 0xb800);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_18f9d;
loc_18f93: // 18f7:0023
    memoryASet16(ss, bp - 2, 0xb000);
    memoryASet16(ss, bp - 4, 0x0000);
loc_18f9d: // 18f7:002d
    si = 0;
    goto loc_18fae;
loc_18fa1: // 18f7:0031
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx, 0x0000);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    si++;
loc_18fae: // 18f7:003e
    if ((short)si < (short)0x07d0)
        goto loc_18fa1;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_18fb9() // 18f7:0049
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_18fdc;
    memoryASet16(ss, bp + 10, 0x0007);
    memoryASet16(ss, bp + 12, 0x0000);
    memoryASet16(ss, bp - 2, 0xb000);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_18fe6;
loc_18fdc: // 18f7:006c
    memoryASet16(ss, bp - 2, 0xb800);
    memoryASet16(ss, bp - 4, 0x0000);
loc_18fe6: // 18f7:0076
    al = memoryAGet(ss, bp + 12);
    cx = 0x0004;
    al <<= cl;
    al |= memoryAGet(ss, bp + 10);
    dl = memoryAGet(ss, bp + 14);
    cx = 0x0007;
    dl <<= cl;
    al |= dl;
    al |= 0x08;
    memoryASet(ss, bp - 6, al);
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x0050;
    mul(dx);
    ax += memoryAGet16(ss, bp + 6);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
loc_19011: // 18f7:00a1
    bx = memoryAGet16(ss, bp + 16);
    es = memoryAGet16(ss, bp + 16 + 2);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 5, al);
    if (!al)
        goto loc_1903b;
    al = memoryAGet(ss, bp - 5);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    al = memoryAGet(ss, bp - 6);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    memoryASet16(ss, bp + 16, memoryAGet16(ss, bp + 16) + 1);
    goto loc_19011;
loc_1903b: // 18f7:00cb
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1903f() // 18f7:00cf
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = 0;
loc_19045: // 18f7:00d5
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_19054;
    si++;
    goto loc_19045;
loc_19054: // 18f7:00e4
    ax = si;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19059() // 18f7:00e9
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_1903f(); // 18f7:00cf
    sp += 0x0004;
    si = ax;
    di = 0x0028;
    ax = si;
    ax >>= 1;
    di -= ax;
    memoryASet16(ss, bp - 4, 0x000f);
    memoryASet16(ss, bp - 2, 0x0000);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp + 14));
    push(di);
    push(cs);
    sub_18fb9(); // 18f7:0049
    sp += 0x000e;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_190a3() // 18f7:0133
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0014;
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(ss);
    ax = bp - 0x14;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6a15(); // 060b:0965
    assert(cs == 0x18f7);
    sp += 0x0008;
    push(ss);
    ax = bp - 0x14;
    push(ax);
    push(cs);
    sub_1903f(); // 18f7:00cf
    sp += 0x0004;
    di = ax;
    si = 0;
    goto loc_190e1;
loc_190d0: // 18f7:0160
    al = memoryAGet(ss, bp + 18);
    dx = si;
    dx += 0x0008;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += dx;
    memoryASet(es, bx, al);
    si++;
loc_190e1: // 18f7:0171
    ax = 0x0006;
    ax -= di;
    if (ax > si)
        goto loc_190d0;
    si = 0;
    goto loc_19105;
loc_190ee: // 18f7:017e
    al = memoryAGet(ss, bp + si + 65516);
    dx = 0x0006;
    dx -= di;
    dx += si;
    dx += 0x0008;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += dx;
    memoryASet(es, bx, al);
    si++;
loc_19105: // 18f7:0195
    if (si < di)
        goto loc_190ee;
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(memoryAGet16(ss, bp + 20));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_19059(); // 18f7:00e9
    sp += 0x000a;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19124() // 18f7:01b4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    di = memoryAGet16(ss, bp + 10);
    if (!(memoryAGet16(ss, bp + 12) & 0x0001))
        goto loc_1913a;
    memoryASet16(ds, 0x9c5e, memoryAGet16(ds, 0x9c5e) + 1);
loc_1913a: // 18f7:01ca
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x18f7);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x18f7);
    sp++;
    sp++;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_19162;
    push(ds);
    ax = 0x7cae;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x18f7);
    sp += 0x0006;
    goto loc_19172;
loc_19162: // 18f7:01f2
    push(ds);
    ax = 0x7cb8;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x18f7);
    sp += 0x0006;
loc_19172: // 18f7:0202
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x18f7);
    sp += 0x0004;
    si = memoryAGet16(ds, 0x9c5e);
    bx = memoryAGet16(ds, 0x7c30);
    es = memoryAGet16(ds, 0x7c30 + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    al = memoryAGet(ss, bp + 12);
    al += 0x30;
    memoryASet(es, bx + 6, al);
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_191b2;
    ax = 0x0007;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x18f7);
    sp++;
    sp++;
    push(cs);
    cs = 0x023f;
    sub_23fc(); // 023f:000c
    assert(cs == 0x18f7);
    goto loc_191bd;
loc_191b2: // 18f7:0242
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x18f7);
    sp++;
    sp++;
loc_191bd: // 18f7:024d
    push(cs);
    sub_18f79(); // 18f7:0009
    memoryASet(ss, bp - 1, 0x20);
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ds, 0x7c32));
    push(memoryAGet16(ds, 0x7c30));
    push(cs);
    sub_19059(); // 18f7:00e9
    sp += 0x000a;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(memoryAGet16(ds, 0x7c36));
    push(memoryAGet16(ds, 0x7c34));
    push(cs);
    sub_19059(); // 18f7:00e9
    sp += 0x000a;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0x0009;
    push(ax);
    push(memoryAGet16(ds, 0x7c3a));
    push(memoryAGet16(ds, 0x7c38));
    push(cs);
    sub_19059(); // 18f7:00e9
    sp += 0x000a;
    ax = 0x000c;
    push(ax);
    al = memoryAGet(ss, bp - 1);
    cbw();
    push(ax);
    ax = di;
    dx = 0;
    push(dx);
    push(ax);
    push(memoryAGet16(ds, 0x7c3e));
    push(memoryAGet16(ds, 0x7c3c));
    push(cs);
    sub_190a3(); // 18f7:0133
    sp += 0x000c;
    ax = 0x000f;
    push(ax);
    al = memoryAGet(ss, bp - 1);
    cbw();
    push(ax);
    ax = si;
    dx = 0;
    push(dx);
    push(ax);
    push(memoryAGet16(ds, 0x7c42));
    push(memoryAGet16(ds, 0x7c40));
    push(cs);
    sub_190a3(); // 18f7:0133
    sp += 0x000c;
    ax = 0x0012;
    push(ax);
    ax = 0x0030;
    push(ax);
    push(memoryAGet16(ds, 0x9888));
    push(memoryAGet16(ds, 0x9886));
    push(memoryAGet16(ds, 0x7c46));
    push(memoryAGet16(ds, 0x7c44));
    push(cs);
    sub_190a3(); // 18f7:0133
    sp += 0x000c;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_a99a(); // 0a34:065a
    assert(cs == 0x18f7);
    sp++;
    sp++;
loc_19273: // 18f7:0303
    if (!di)
        goto loc_192d2;
    di -= 0x0002;
    dx = memoryAGet16(ds, 0x9888);
    ax = memoryAGet16(ds, 0x9886);
    flags.carry = (ax + 0x0014) >= 0x10000;
    ax += 0x0014;
    dx += flags.carry;
    memoryASet16(ds, 0x9888, dx);
    memoryASet16(ds, 0x9886, ax);
    ax = 0x000c;
    push(ax);
    al = memoryAGet(ss, bp - 1);
    cbw();
    push(ax);
    ax = di;
    dx = 0;
    push(dx);
    push(ax);
    push(memoryAGet16(ds, 0x7c3e));
    push(memoryAGet16(ds, 0x7c3c));
    push(cs);
    sub_190a3(); // 18f7:0133
    sp += 0x000c;
    ax = 0x0012;
    push(ax);
    ax = 0x0030;
    push(ax);
    push(memoryAGet16(ds, 0x9888));
    push(memoryAGet16(ds, 0x9886));
    push(memoryAGet16(ds, 0x7c46));
    push(memoryAGet16(ds, 0x7c44));
    push(cs);
    sub_190a3(); // 18f7:0133
    sp += 0x000c;
    push(cs);
    cs = 0x023f;
    sub_2445(); // 023f:0055
    assert(cs == 0x18f7);
    goto loc_19273;
loc_192d2: // 18f7:0362
    if (!si)
        goto loc_1932f;
    si--;
    dx = memoryAGet16(ds, 0x9888);
    ax = memoryAGet16(ds, 0x9886);
    flags.carry = (ax + 0x03e8) >= 0x10000;
    ax += 0x03e8;
    dx += flags.carry;
    memoryASet16(ds, 0x9888, dx);
    memoryASet16(ds, 0x9886, ax);
    ax = 0x000f;
    push(ax);
    al = memoryAGet(ss, bp - 1);
    cbw();
    push(ax);
    ax = si;
    dx = 0;
    push(dx);
    push(ax);
    push(memoryAGet16(ds, 0x7c42));
    push(memoryAGet16(ds, 0x7c40));
    push(cs);
    sub_190a3(); // 18f7:0133
    sp += 0x000c;
    ax = 0x0012;
    push(ax);
    ax = 0x0030;
    push(ax);
    push(memoryAGet16(ds, 0x9888));
    push(memoryAGet16(ds, 0x9886));
    push(memoryAGet16(ds, 0x7c46));
    push(memoryAGet16(ds, 0x7c44));
    push(cs);
    sub_190a3(); // 18f7:0133
    sp += 0x000c;
    push(cs);
    cs = 0x023f;
    sub_2445(); // 023f:0055
    assert(cs == 0x18f7);
    goto loc_192d2;
loc_1932f: // 18f7:03bf
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_a99a(); // 0a34:065a
    assert(cs == 0x18f7);
    sp++;
    sp++;
    if (memoryAGet(ds, 0x919d) == 0x00)
        goto loc_1934c;
    ax = 0x000d;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x18f7);
    sp++;
    sp++;
loc_1934c: // 18f7:03dc
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_1935e;
    ax = 0x0009;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x18f7);
    sp++;
    sp++;
loc_1935e: // 18f7:03ee
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1936a;
    push(cs);
    cs = 0x0ee7;
    sub_10a05(); // 0ee7:1b95
    assert(cs == 0x18f7);
loc_1936a: // 18f7:03fa
    if (memoryAGet(ds, 0x8a2c) == 0x00)
        goto loc_1937c;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e28(); // 023f:1a38
    assert(cs == 0x18f7);
    sp++;
    sp++;
loc_1937c: // 18f7:040c
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19382() // 18f7:0412
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    al = memoryAGet(ss, bp + 10);
    al += 0x30;
    bx = memoryAGet16(ds, 0x7c4c);
    es = memoryAGet16(ds, 0x7c4c + 2);
    memoryASet(es, bx + 20, al);
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_402c(); // 023f:1c3c
    assert(cs == 0x18f7);
    sp += 0x0006;
    si = 0x000b;
    memoryASet16(ss, bp - 2, 0x000f);
    push(memoryAGet16(ds, 0x7c4a));
    push(memoryAGet16(ds, 0x7c48));
    push(cs);
    sub_1903f(); // 18f7:00cf
    sp += 0x0004;
    di = ax;
    di <<= 1;
    di <<= 1;
    di <<= 1;
    ax = 0x00a0;
    dx = di;
    dx >>= 1;
    ax -= dx;
    memoryASet16(ss, bp - 4, ax);
    si <<= 1;
    si <<= 1;
    si <<= 1;
    si += 0x0008;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ds, 0x7c4a));
    push(memoryAGet16(ds, 0x7c48));
    push(si);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x060b;
    sub_6410(); // 060b:0360
    assert(cs == 0x18f7);
    sp += 0x0010;
    si = 0x000d;
    memoryASet16(ss, bp - 2, 0x000f);
    push(memoryAGet16(ds, 0x7c4e));
    push(memoryAGet16(ds, 0x7c4c));
    push(cs);
    sub_1903f(); // 18f7:00cf
    sp += 0x0004;
    di = ax;
    di <<= 1;
    di <<= 1;
    di <<= 1;
    ax = 0x00a0;
    dx = di;
    dx >>= 1;
    ax -= dx;
    memoryASet16(ss, bp - 4, ax);
    si <<= 1;
    si <<= 1;
    si <<= 1;
    si += 0x0008;
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ds, 0x7c4e));
    push(memoryAGet16(ds, 0x7c4c));
    push(si);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x060b;
    sub_6410(); // 060b:0360
    assert(cs == 0x18f7);
    sp += 0x0010;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x18f7);
    sp += 0x000a;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1946a() // 18f7:04fa
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1946f() // 1946:000f
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    si = 0;
    di = si;
    goto loc_19499;
loc_19477: // 1946:0017
    al = memoryAGet(ds, di + 37300);
    bx = si;
    memoryASet(ds, bx + 38830, al);
    si++;
    al = memoryAGet(ds, di + 35434);
    bx = si;
    memoryASet(ds, bx + 38830, al);
    si++;
    al = memoryAGet(ds, di + 36414);
    bx = si;
    memoryASet(ds, bx + 38830, al);
    si++;
    di++;
loc_19499: // 1946:0039
    if (di < 0x0010)
        goto loc_19477;
    di = pop();
    si = pop();
    cs = pop();
}
void sub_194a1() // 1946:0041
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    si = 0;
    di = si;
    goto loc_194cb;
loc_194a9: // 1946:0049
    bx = si;
    al = memoryAGet(ds, bx + 38830);
    memoryASet(ds, di + 37300, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 38830);
    memoryASet(ds, di + 35434, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 38830);
    memoryASet(ds, di + 36414, al);
    si++;
    di++;
loc_194cb: // 1946:006b
    if (di < 0x0010)
        goto loc_194a9;
    di = pop();
    si = pop();
    cs = pop();
}
void sub_194d3() // 1946:0073
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    si = 0;
    di = si;
    goto loc_1950f;
loc_194db: // 1946:007b
    bx = si;
    al = memoryAGet(ds, bx + 32074);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 37300, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32074);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 35434, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32074);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 36414, al);
    si++;
    di++;
loc_1950f: // 1946:00af
    if (di < 0x0010)
        goto loc_194db;
    di = pop();
    si = pop();
    cs = pop();
}
void sub_19517() // 1946:00b7
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    si = 0;
    di = si;
    goto loc_19553;
loc_1951f: // 1946:00bf
    bx = si;
    al = memoryAGet(ds, bx + 32122);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 37300, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32122);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 35434, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32122);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 36414, al);
    si++;
    di++;
loc_19553: // 1946:00f3
    if (di < 0x0010)
        goto loc_1951f;
    di = pop();
    si = pop();
    cs = pop();
}
void sub_1955b() // 1946:00fb
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    si = 0;
    di = si;
    goto loc_19597;
loc_19563: // 1946:0103
    bx = si;
    al = memoryAGet(ds, bx + 32170);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 37300, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32170);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 35434, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32170);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 36414, al);
    si++;
    di++;
loc_19597: // 1946:0137
    if (di < 0x0010)
        goto loc_19563;
    di = pop();
    si = pop();
    cs = pop();
}
void sub_1959f() // 1946:013f
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    si = 0;
    di = si;
    goto loc_195db;
loc_195a7: // 1946:0147
    bx = si;
    al = memoryAGet(ds, bx + 32218);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 37300, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32218);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 35434, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32218);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 36414, al);
    si++;
    di++;
loc_195db: // 1946:017b
    if (di < 0x0010)
        goto loc_195a7;
    di = pop();
    si = pop();
    cs = pop();
}
void sub_195e3() // 1946:0183
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    si = 0;
    di = si;
    goto loc_1961f;
loc_195eb: // 1946:018b
    bx = si;
    al = memoryAGet(ds, bx + 32266);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 37300, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32266);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 35434, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32266);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 36414, al);
    si++;
    di++;
loc_1961f: // 1946:01bf
    if (di < 0x0010)
        goto loc_195eb;
    di = pop();
    si = pop();
    cs = pop();
}
void sub_19627() // 1946:01c7
{
    CStackGuardFar sg(0, false);
    push(si);
    push(di);
    si = 0;
    di = si;
    goto loc_19663;
loc_1962f: // 1946:01cf
    bx = si;
    al = memoryAGet(ds, bx + 32314);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 37300, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32314);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 35434, al);
    si++;
    bx = si;
    al = memoryAGet(ds, bx + 32314);
    al <<= 1;
    al <<= 1;
    al <<= 1;
    memoryASet(ds, di + 36414, al);
    si++;
    di++;
loc_19663: // 1946:0203
    if (di < 0x0010)
        goto loc_1962f;
    di = pop();
    si = pop();
    cs = pop();
}
void sub_1966b() // 1946:020b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_196d4;
    push(cs);
    sub_1946f(); // 1946:000f
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_196c0;
loc_19684: // 1946:0224
    if (!(memoryAGet16(ss, bp - 2) & 0x0001))
        goto loc_19690;
    di = 0x003f;
    goto loc_19692;
loc_19690: // 1946:0230
    di = 0;
loc_19692: // 1946:0232
    si = 0;
    goto loc_196a9;
loc_19696: // 1946:0236
    ax = di;
    memoryASet(ds, si + 36414, al);
    memoryASet(ds, si + 35434, al);
    memoryASet(ds, si + 37300, al);
    di ^= 0x003f;
    si++;
loc_196a9: // 1946:0249
    if (si < 0x0010)
        goto loc_19696;
    memoryASet(ds, 0x8de6, 0x00);
    push(cs);
    cs = 0x023f;
    sub_2af9(); // 023f:0709
    assert(cs == 0x1946);
    push(cs);
    cs = 0x023f;
    sub_2445(); // 023f:0055
    assert(cs == 0x1946);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_196c0: // 1946:0260
    if (memoryAGet16(ss, bp - 2) < 0x0014)
        goto loc_19684;
    memoryASet(ds, 0x8de6, 0x00);
    push(cs);
    sub_194a1(); // 1946:0041
    push(cs);
    cs = 0x023f;
    sub_2af9(); // 023f:0709
    assert(cs == 0x1946);
loc_196d4: // 1946:0274
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_196da() // 1946:027a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1946);
    sp = bp;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00be;
    push(ax);
    ax = 0x013f;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x1946);
    sp = bp;
    di = 0;
    goto loc_1971e;
loc_19715: // 1946:02b5
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet(es, bx + di, 0x00);
    di++;
loc_1971e: // 1946:02be
    if (di < 0x1f40)
        goto loc_19715;
    si = 0xffe0;
    goto loc_19745;
loc_19729: // 1946:02c9
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9882);
    ax++;
    push(ax);
    ax = 0x0032;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp = bp;
    si += 0x0040;
loc_19745: // 1946:02e5
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31976);
    if ((short)ax > (short)si)
        goto loc_19729;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    ax = 0x0032;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp = bp;
    si = 0;
    goto loc_1977b;
loc_1976e: // 1946:030e
    ax = 0x00a8;
    push(ax);
    push(si);
    push(cs);
    cs = 0x19e4;
    sub_19e7b(); // 19e4:003b
    assert(cs == 0x1946);
    sp = bp;
    si++;
loc_1977b: // 1946:031b
    if ((short)si < (short)0x0140)
        goto loc_1976e;
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31976);
    ax += 0xfff8;
    memoryASet16(ds, 0x985c, ax);
    memoryASet16(ds, 0x986c, 0x0028);
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1979a() // 1946:033a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1946);
    sp = bp;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00be;
    push(ax);
    ax = 0x013f;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x1946);
    sp = bp;
    di = 0;
    goto loc_197de;
loc_197d5: // 1946:0375
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet(es, bx + di, 0x00);
    di++;
loc_197de: // 1946:037e
    if (di < 0x1f40)
        goto loc_197d5;
    si = 0xfff0;
    goto loc_19827;
loc_197e9: // 1946:0389
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x001d;
    push(ax);
    ax = 0x0057;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp = bp;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x001f;
    push(ax);
    ax = 0x0032;
    push(ax);
    ax = si;
    ax += 0x0010;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp = bp;
    si += 0x0040;
loc_19827: // 1946:03c7
    bx = memoryAGet16(ss, bp + 10);
    bx += 0xffd9;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32046);
    ax += 0xffe0;
    if ((short)ax >= (short)si)
        goto loc_197e9;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x001e;
    push(ax);
    ax = 0x0057;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp = bp;
    si = 0;
    goto loc_19866;
loc_19859: // 1946:03f9
    ax = 0x00a8;
    push(ax);
    push(si);
    push(cs);
    cs = 0x19e4;
    sub_19e7b(); // 19e4:003b
    assert(cs == 0x1946);
    sp = bp;
    si++;
loc_19866: // 1946:0406
    if ((short)si < (short)0x0140)
        goto loc_19859;
    bx = memoryAGet16(ss, bp + 10);
    bx += 0xffd9;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32046);
    ax += 0xfff8;
    memoryASet16(ds, 0x985c, ax);
    memoryASet16(ds, 0x986c, 0x0028);
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19888() // 1946:0428
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1946);
    sp = bp;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00be;
    push(ax);
    ax = 0x013f;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x1946);
    sp = bp;
    di = 0;
    goto loc_198cc;
loc_198c3: // 1946:0463
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet(es, bx + di, 0x00);
    di++;
loc_198cc: // 1946:046c
    if (di < 0x1f40)
        goto loc_198c3;
    si = 0xffe0;
    goto loc_198f3;
loc_198d7: // 1946:0477
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9882);
    ax++;
    push(ax);
    ax = 0x0032;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp = bp;
    si += 0x0040;
loc_198f3: // 1946:0493
    bx = memoryAGet16(ss, bp + 10);
    bx += 0xffe6;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32020);
    if ((short)ax > (short)si)
        goto loc_198d7;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x9882));
    ax = 0x0032;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp = bp;
    si = 0;
    goto loc_1992c;
loc_1991f: // 1946:04bf
    ax = 0x00a8;
    push(ax);
    push(si);
    push(cs);
    cs = 0x19e4;
    sub_19e7b(); // 19e4:003b
    assert(cs == 0x1946);
    sp = bp;
    si++;
loc_1992c: // 1946:04cc
    if ((short)si < (short)0x0140)
        goto loc_1991f;
    bx = memoryAGet16(ss, bp + 10);
    bx += 0xffe6;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32020);
    ax += 0xfff8;
    memoryASet16(ds, 0x985c, ax);
    memoryASet16(ds, 0x986c, 0x0028);
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1994e() // 1946:04ee
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_402c(); // 023f:1c3c
    assert(cs == 0x1946);
    sp += 0x0006;
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_1997b;
loc_1996d: // 1946:050d
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    bx += memoryAGet16(ss, bp - 4);
    memoryASet(es, bx, 0x00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_1997b: // 1946:051b
    if (memoryAGet16(ss, bp - 4) < 0x1f40)
        goto loc_1996d;
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) - 0x0016);
    di = 0;
    if (memoryAGet16(ss, bp + 10) & 0x0001)
        goto loc_19992;
    di = 0x0020;
loc_19992: // 1946:0532
    ax = di;
    dx = 0x0003;
    mul(dx);
    di = ax;
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_19a4f;
loc_199a3: // 1946:0543
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32362);
    memoryASet16(ss, bp - 2, ax);
    cx = 0x0004;
    memoryASet16(ss, bp - 2, sar(memoryAGet16(ss, bp - 2), cl));
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) << cl);
    bx = di;
    bx += 0x0002;
    bx <<= 1;
    si = memoryAGet16(ds, bx + 32362);
    if (si != 0x001e)
        goto loc_199ca;
    si = 0x001f;
loc_199ca: // 1946:056a
    if (si != 0x001d)
        goto loc_199d2;
    si = 0x001e;
loc_199d2: // 1946:0572
    if (si != 0x0014)
        goto loc_199da;
    si = 0x0020;
loc_199da: // 1946:057a
    if (si != 0x0005)
        goto loc_199e2;
    si = 0x001d;
loc_199e2: // 1946:0582
    if (si >= 0x001e)
        goto loc_19a24;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += si;
    ax--;
    push(ax);
    bx = di;
    bx++;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 32362));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp += 0x000c;
    bx = di;
    bx++;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 32362));
    push(memoryAGet16(ss, bp - 2));
    ax = si;
    ax--;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_19eac(); // 19e4:006c
    assert(cs == 0x1946);
    sp += 0x0006;
    goto loc_19a49;
loc_19a24: // 1946:05c4
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9882);
    ax += si;
    ax += 0xffe2;
    push(ax);
    bx = di;
    bx++;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 32362));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp += 0x000c;
loc_19a49: // 1946:05e9
    di += 0x0003;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_19a4f: // 1946:05ef
    if (memoryAGet16(ss, bp - 4) > 0x001f)
        goto loc_19a58;
    goto loc_199a3;
loc_19a58: // 1946:05f8
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0026;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x00a0;
    push(ax);
    ax = 0x004a;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x1946);
    sp += 0x000e;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax += 0x0020;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1946);
    sp += 0x000c;
    memoryASet16(ds, 0x985c, 0x00b7);
    memoryASet16(ds, 0x986c, 0x0055);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19aa5() // 1946:0645
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    si = memoryAGet16(ss, bp + 10);
    memoryASet(ss, bp - 5, 0x00);
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x97fe, ax);
    ax = memoryAGet16(ds, 0x97f2);
    memoryASet16(ds, 0x9864, ax);
    if (si == 0x0001)
        goto loc_19acf;
    if (si == 0x0005)
        goto loc_19acf;
    if (si != 0x0007)
        goto loc_19ae1;
loc_19acf: // 1946:066f
    ax = 0x0008;
    memoryASet16(ds, 0x9c64, ax);
    memoryASet16(ds, 0x988e, ax);
    ax = 0x008b;
    memoryASet16(ds, 0x97fc, ax);
    memoryASet16(ds, 0x97f2, ax);
loc_19ae1: // 1946:0681
    if (si != 0x0003)
        goto loc_19af8;
    ax = 0x0056;
    memoryASet16(ds, 0x9c64, ax);
    memoryASet16(ds, 0x988e, ax);
    ax = 0x009f;
    memoryASet16(ds, 0x97fc, ax);
    memoryASet16(ds, 0x97f2, ax);
loc_19af8: // 1946:0698
    memoryASet16(ds, 0x9800, 0x0000);
    ax = 0;
    memoryASet16(ds, 0x987e, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x9872, ax);
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_19b1a;
    push(cs);
    sub_1946f(); // 1946:000f
loc_19b1a: // 1946:06ba
    if (si != 0x0001)
        goto loc_19b2a;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_19b2a;
    push(cs);
    sub_19517(); // 1946:00b7
loc_19b2a: // 1946:06ca
    if (si != 0x0003)
        goto loc_19b3a;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_19b3a;
    push(cs);
    sub_1955b(); // 1946:00fb
loc_19b3a: // 1946:06da
    if (si != 0x0003)
        goto loc_19b5a;
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_19b4d;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_19b5a;
loc_19b4d: // 1946:06ed
    push(ds);
    ax = 0x7fea;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_6d22(); // 06c1:0112
    assert(cs == 0x1946);
    sp += 0x0004;
loc_19b5a: // 1946:06fa
    if (si != 0x0005)
        goto loc_19b6a;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_19b6a;
    push(cs);
    sub_195e3(); // 1946:0183
loc_19b6a: // 1946:070a
    if (si != 0x0007)
        goto loc_19b7a;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_19b7a;
    push(cs);
    sub_19627(); // 1946:01c7
loc_19b7a: // 1946:071a
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_19b84;
    goto loc_19df1;
loc_19b84: // 1946:0724
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_19b8e;
    goto loc_19df1;
loc_19b8e: // 1946:072e
    ax = 0x00c7;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_23f1(); // 023f:0001
    assert(cs == 0x1946);
    sp++;
    sp++;
    if (si != 0x0001)
        goto loc_19ba7;
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_196da(); // 1946:027a
    sp++;
    sp++;
loc_19ba7: // 1946:0747
    if (si != 0x0003)
        goto loc_19bb5;
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_1994e(); // 1946:04ee
    sp++;
    sp++;
loc_19bb5: // 1946:0755
    if (si != 0x0005)
        goto loc_19bc3;
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_19888(); // 1946:0428
    sp++;
    sp++;
loc_19bc3: // 1946:0763
    if (si != 0x0007)
        goto loc_19bd1;
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_1979a(); // 1946:033a
    sp++;
    sp++;
loc_19bd1: // 1946:0771
    push(memoryAGet16(ss, bp + 12));
    push(ds);
    ax = 0x29e2;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a412(); // 19e4:05d2
    assert(cs == 0x1946);
    sp += 0x0006;
    push(cs);
    cs = 0x19e4;
    sub_1a4da(); // 19e4:069a
    assert(cs == 0x1946);
    memoryASet(ss, bp - 6, 0x00);
    memoryASet16(ds, 0x9872, 0x0000);
    push(cs);
    cs = 0x19e4;
    sub_1b214(); // 19e4:13d4
    assert(cs == 0x1946);
    push(cs);
    cs = 0x19e4;
    sub_1b3e8(); // 19e4:15a8
    assert(cs == 0x1946);
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x1946);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x1946);
    push(cs);
    cs = 0x19e4;
    sub_1b341(); // 19e4:1501
    assert(cs == 0x1946);
    di = 0;
    goto loc_19c1c;
loc_19c0d: // 1946:07ad
    bx = di;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38918, 0x0000);
    di++;
loc_19c1c: // 1946:07bc
    if (di < 0x000a)
        goto loc_19c0d;
    memoryASet16(ds, 0x97e4, 0x0000);
    memoryASet16(ds, 0x9894, 0x0000);
    memoryASet16(ds, 0x97e6, 0x0000);
    push(cs);
    cs = 0x1829;
    sub_1831a(); // 1829:008a
    assert(cs == 0x1946);
loc_19c38: // 1946:07d8
    if (memoryAGet16(ds, 0x9872) == 0x0000)
        goto loc_19c42;
    goto loc_19b7a;
loc_19c42: // 1946:07e2
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_19c4c;
    goto loc_19b7a;
loc_19c4c: // 1946:07ec
    ax = memoryAGet16(ds, 0x985a);
    memoryASet16(ds, 0x985a, memoryAGet16(ds, 0x985a) + 1);
    if (ax <= 0x003c)
        goto loc_19c89;
    if (memoryAGet16(ds, 0x9c66) == 0x0000)
        goto loc_19c65;
    memoryASet16(ds, 0x9c66, memoryAGet16(ds, 0x9c66) - 1);
    goto loc_19c7e;
loc_19c65: // 1946:0805
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_19c7e;
    memoryASet16(ds, 0x9874, 0x0000);
    memoryASet16(ds, 0x9870, 0x0001);
    memoryASet16(ds, 0x97fa, 0x0001);
loc_19c7e: // 1946:081e
    push(cs);
    cs = 0x19e4;
    sub_1b4ad(); // 19e4:166d
    assert(cs == 0x1946);
    memoryASet16(ds, 0x985a, 0x0000);
loc_19c89: // 1946:0829
    push(cs);
    cs = 0x19e4;
    sub_1b0b7(); // 19e4:1277
    assert(cs == 0x1946);
    push(cs);
    cs = 0x19e4;
    sub_1a5d8(); // 19e4:0798
    assert(cs == 0x1946);
    memoryASet16(ds, 0x97e6, 0x0000);
    push(cs);
    cs = 0x1bf1;
    sub_1bf13(); // 1bf1:0003
    assert(cs == 0x1946);
    push(cs);
    cs = 0x19e4;
    sub_1a6df(); // 19e4:089f
    assert(cs == 0x1946);
    ax = 0;
    memoryASet16(ds, 0x9898, ax);
    memoryASet16(ds, 0x9802, ax);
    memoryASet16(ds, 0x988c, ax);
    memoryASet16(ds, 0x986a, ax);
    push(cs);
    cs = 0x0a34;
    sub_a9f3(); // 0a34:06b3
    assert(cs == 0x1946);
    al = memoryAGet(ds, 0x8db4);
    ah = 0x00;
    memoryASet16(ds, 0x9898, ax);
    al = memoryAGet(ds, 0x92b6);
    ah = 0x00;
    memoryASet16(ds, 0x9802, ax);
    al = memoryAGet(ds, 0x8baf);
    ah = 0x00;
    memoryASet16(ds, 0x986a, ax);
    al = memoryAGet(ds, 0x8da6);
    ah = 0x00;
    memoryASet16(ds, 0x988c, ax);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x1946);
    push(cs);
    cs = 0x19e4;
    sub_1b991(); // 19e4:1b51
    assert(cs == 0x1946);
    if (memoryAGet16(ds, 0x9872) != 0x0000)
        goto loc_19cff;
    push(cs);
    cs = 0x19e4;
    sub_1bdb2(); // 19e4:1f72
    assert(cs == 0x1946);
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_19cff;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_19cff;
    push(cs);
    cs = 0x19e4;
    sub_1b107(); // 19e4:12c7
    assert(cs == 0x1946);
loc_19cff: // 1946:089f
    if (memoryAGet(ss, bp - 6) != 0x00)
        goto loc_19d0f;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
    goto loc_19d17;
loc_19d0f: // 1946:08af
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
loc_19d17: // 1946:08b7
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_19d25;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_19d29;
loc_19d25: // 1946:08c5
    memoryASet(ss, bp - 6, memoryAGet(ss, bp - 6) ^ 0x01);
loc_19d29: // 1946:08c9
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18726(); // 1829:0496
    assert(cs == 0x1946);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18c85(); // 1829:09f5
    assert(cs == 0x1946);
    sp += 0x0004;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_19d65;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1946);
    sp += 0x000a;
    memoryASet(ss, bp - 5, 0x01);
loc_19d65: // 1946:0905
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x1829;
    sub_18906(); // 1829:0676
    assert(cs == 0x1946);
    sp += 0x0004;
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_b9ed(); // 0a34:16ad
    assert(cs == 0x1946);
    sp++;
    sp++;
    push(cs);
    cs = 0x0a34;
    sub_b9ae(); // 0a34:166e
    assert(cs == 0x1946);
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_19d8d;
    goto loc_19c38;
loc_19d8d: // 1946:092d
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_19d97;
    goto loc_19c38;
loc_19d97: // 1946:0937
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0006)
        goto loc_19db3;
    if (si == 0x0001)
        goto loc_19dad;
    if (si == 0x0005)
        goto loc_19dad;
    if (si != 0x0007)
        goto loc_19db3;
loc_19dad: // 1946:094d
    memoryASet16(ds, 0x9872, 0x0001);
loc_19db3: // 1946:0953
    if (si != 0x0003)
        goto loc_19ddc;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0056)
        goto loc_19dcf;
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x0096)
        goto loc_19dcf;
    memoryASet16(ds, 0x9872, 0x0001);
    goto loc_19ddc;
loc_19dcf: // 1946:096f
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0055)
        goto loc_19ddc;
    memoryASet16(ds, 0x988e, 0x0055);
loc_19ddc: // 1946:097c
    ax = memoryAGet16(ds, 0x988e);
    if ((short)ax > (short)memoryAGet16(ds, 0x985c))
        goto loc_19de8;
    goto loc_19c38;
loc_19de8: // 1946:0988
    ax = memoryAGet16(ds, 0x985c);
    memoryASet16(ds, 0x988e, ax);
    goto loc_19c38;
loc_19df1: // 1946:0991
    al = memoryAGet(ss, bp - 6);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b6d5(); // 19e4:1895
    assert(cs == 0x1946);
    sp++;
    sp++;
    ax = memoryAGet16(ds, 0x97fe);
    memoryASet16(ds, 0x9c64, ax);
    memoryASet16(ds, 0x988e, ax);
    ax = memoryAGet16(ds, 0x9864);
    memoryASet16(ds, 0x97fc, ax);
    memoryASet16(ds, 0x97f2, ax);
    ax = 0;
    memoryASet16(ds, 0x9868, ax);
    memoryASet16(ds, 0x9872, ax);
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_19e23;
    push(cs);
    sub_194a1(); // 1946:0041
loc_19e23: // 1946:09c3
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_19e31;
    if (memoryAGet(ds, 0x8bf0) == 0x00)
        goto loc_19e43;
loc_19e31: // 1946:09d1
    if (si != 0x0003)
        goto loc_19e43;
    push(ds);
    ax = 0x7ff4;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_6d22(); // 06c1:0112
    assert(cs == 0x1946);
    sp += 0x0004;
loc_19e43: // 1946:09e3
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19e49() // 19e4:0009
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    cs = 0x06c1;
    sub_7530(); // 06c1:0920
    assert(cs == 0x19e4);
    sp = bp;
    si = ax;
    ax = 0x03c0;
    push(ax);
    push(ds);
    ax = 0x989e;
    push(ax);
    push(si);
    push(cs);
    cs = 0x06c1;
    sub_6e6a(); // 06c1:025a
    assert(cs == 0x19e4);
    sp = bp;
    push(si);
    push(cs);
    cs = 0x06c1;
    sub_74f7(); // 06c1:08e7
    assert(cs == 0x19e4);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19e7b() // 19e4:003b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 10);
    si >>= 1;
    si >>= 1;
    si >>= 1;
    ax = memoryAGet16(ss, bp + 12);
    dx = 0x0028;
    mul(dx);
    si += ax;
    cx = memoryAGet16(ss, bp + 10);
    cx &= 0x0007;
    di = 0x0080;
    di = sar(di, cl);
    ax = di;
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet(es, bx + si, memoryAGet(es, bx + si) | al);
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19eac() // 19e4:006c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    memoryASet16(ss, bp - 6, 0x0000);
loc_19eb9: // 19e4:0079
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0018;
    mul(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x0003;
    mul(dx);
    memoryASet16(ss, bp - 2, ax);
    ax <<= 1;
    bx += ax;
    if (memoryAGet16(ds, bx + 39070) == 0xffff)
        goto loc_19f4a;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0018;
    mul(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    bx += ax;
    si = memoryAGet16(ds, bx + 39070);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0018;
    mul(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    ax <<= 1;
    bx += ax;
    di = memoryAGet16(ds, bx + 39070);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0018;
    mul(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0002;
    ax <<= 1;
    bx += ax;
    ax = memoryAGet16(ds, bx + 39070);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    si += memoryAGet16(ss, bp + 12);
loc_19f25: // 19e4:00e5
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 1);
    if (!ax)
        goto loc_19eb9;
    if ((short)si < 0)
        goto loc_19f47;
    if ((short)si >= (short)0x0140)
        goto loc_19f47;
    ax = memoryAGet16(ss, bp + 14);
    ax += di;
    push(ax);
    push(si);
    push(cs);
    sub_19e7b(); // 19e4:003b
    sp += 0x0004;
loc_19f47: // 19e4:0107
    si++;
    goto loc_19f25;
loc_19f4a: // 19e4:010a
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_19f50() // 19e4:0110
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x92c8;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x19e4);
    sp += 0x000a;
    si = 0;
    goto loc_19f79;
loc_19f70: // 19e4:0130
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet(es, bx + si, 0x00);
    si++;
loc_19f79: // 19e4:0139
    if (si < 0x1f40)
        goto loc_19f70;
    di = 0;
    if (memoryAGet16(ss, bp + 18) == di)
        goto loc_19f9f;
    si = di;
    goto loc_19f9a;
loc_19f8a: // 19e4:014a
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    di += ax;
    di++;
    si++;
loc_19f9a: // 19e4:015a
    if (si < memoryAGet16(ss, bp + 18))
        goto loc_19f8a;
loc_19f9f: // 19e4:015f
    ax = di;
    dx = 0x0003;
    mul(dx);
    di = ax;
    si = 0;
    goto loc_1a025;
loc_19fac: // 19e4:016c
    ax = di;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 2, ax);
    cx = 0x0004;
    memoryASet16(ss, bp - 2, sar(memoryAGet16(ss, bp - 2), cl));
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) << cl);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = di;
    ax += 0x0002;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax += memoryAGet16(ds, 0x9896);
    ax--;
    push(ax);
    ax = di;
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    push(memoryAGet16(es, bx));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x19e4);
    sp += 0x000c;
    ax = di;
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    bx += ax;
    push(memoryAGet16(es, bx));
    push(memoryAGet16(ss, bp - 2));
    ax = di;
    ax += 0x0002;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax--;
    push(ax);
    push(cs);
    sub_19eac(); // 19e4:006c
    sp += 0x0006;
    di += 0x0003;
    si++;
loc_1a025: // 19e4:01e5
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    if (ax < si)
        goto loc_1a039;
    goto loc_19fac;
loc_1a039: // 19e4:01f9
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1a03f() // 19e4:01ff
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x8f67) == 0x00)
        goto loc_1a051;
    push(cs);
    cs = 0x1946;
    sub_194d3(); // 1946:0073
    assert(cs == 0x19e4);
    sp = bp;
loc_1a051: // 19e4:0211
    si = 0;
    goto loc_1a05e;
loc_1a055: // 19e4:0215
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet(es, bx + si, 0x00);
    si++;
loc_1a05e: // 19e4:021e
    if (si < 0x1f40)
        goto loc_1a055;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1a072;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1a077;
loc_1a072: // 19e4:0232
    si = 0x0001;
    goto loc_1a07a;
loc_1a077: // 19e4:0237
    si = 0x0004;
loc_1a07a: // 19e4:023a
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(si);
    ax = 0x00be;
    push(ax);
    ax = 0x013f;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp = bp;
    si = 0;
    goto loc_1a102;
loc_1a09a: // 19e4:025a
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9896);
    ax++;
    push(ax);
    ax = 0x00a8;
    push(ax);
    push(si);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x19e4);
    sp = bp;
    ax = 0x00a8;
    push(ax);
    push(si);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_19eac(); // 19e4:006c
    sp = bp;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += memoryAGet16(ds, 0x9896);
    dx += 0x0011;
    push(dx);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0086;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x000a;
    push(dx);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0140;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    push(dx);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x19e4);
    sp = bp;
    si += 0x0030;
loc_1a102: // 19e4:02c2
    if (si < 0x2710)
        goto loc_1a09a;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1a10b() // 19e4:02cb
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    bx = memoryAGet16(ss, bp + 6);
    es = memoryAGet16(ss, bp + 6 + 2);
    memoryASet16(ds, 0x9858, es);
    memoryASet16(ds, 0x9856, bx);
loc_1a11c: // 19e4:02dc
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    if (memoryAGet16(es, bx) != 0x00ff)
        goto loc_1a12a;
    goto loc_1a40e;
loc_1a12a: // 19e4:02ea
    ax = memoryAGet16(es, bx);
    if (ax > 0x0027)
        goto loc_1a11c;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_1a18b;
        case 2: goto loc_1a298;
        case 4: goto loc_1a3c6;
        case 6: goto loc_1a279;
        case 8: goto loc_1a1a7;
        case 10: goto loc_1a192;
        case 12: goto loc_1a1b4;
        case 14: goto loc_1a257;
        case 16: goto loc_1a3be;
        case 18: goto loc_1a1c1;
        case 20: goto loc_1a3ce;
        case 22: goto loc_1a3ce;
        case 24: goto loc_1a3ce;
        case 26: goto loc_1a3ce;
        case 28: goto loc_1a2ed;
        case 30: goto loc_1a1ea;
        case 32: goto loc_1a1ff;
        case 34: goto loc_1a298;
        case 36: goto loc_1a298;
        case 38: goto loc_1a219;
        case 40: goto loc_1a257;
        case 42: goto loc_1a298;
        case 44: goto loc_1a225;
        case 46: goto loc_1a23a;
        case 48: goto loc_1a263;
        case 50: goto loc_1a298;
        case 52: goto loc_1a3ce;
        case 54: goto loc_1a3ce;
        case 56: goto loc_1a279;
        case 58: goto loc_1a285;
        case 60: goto loc_1a2a0;
        case 62: goto loc_1a2ac;
        case 64: goto loc_1a2ed;
        case 66: goto loc_1a3ce;
        case 68: goto loc_1a3ce;
        case 70: goto loc_1a2fe;
        case 72: goto loc_1a398;
        case 74: goto loc_1a3c6;
        case 76: goto loc_1a3ce;
        case 78: goto loc_1a3ce;
        default:
        assert(0);
    }
    //   gap of 80 bytes
loc_1a18b: // 19e4:034b
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0002);
    goto loc_1a11c;
loc_1a192: // 19e4:0352
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 8, ax);
    memoryASet16(es, bx + 10, 0x0000);
    goto loc_1a2e5;
loc_1a1a7: // 19e4:0367
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 6, 0x0003);
    goto loc_1a298;
loc_1a1b4: // 19e4:0374
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 8, 0x0002);
    goto loc_1a271;
loc_1a1c1: // 19e4:0381
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 4, 0x00dc);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x0010;
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 8, 0x0000);
    goto loc_1a271;
loc_1a1ea: // 19e4:03aa
    ax = 0;
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 8, ax);
    memoryASet16(es, bx + 6, ax);
    memoryASet16(es, bx + 2, ax);
    goto loc_1a390;
loc_1a1ff: // 19e4:03bf
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    ax = memoryAGet16(es, bx + 4);
    memoryASet16(es, bx + 6, ax);
    memoryASet16(es, bx + 12, 0x0000);
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0010);
    goto loc_1a11c;
loc_1a219: // 19e4:03d9
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 4, 0x0000);
    goto loc_1a298;
loc_1a225: // 19e4:03e5
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x000f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 4, dx);
    goto loc_1a298;
loc_1a23a: // 19e4:03fa
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 6, 0x0000);
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(es, bx + 8, ax);
    ax = memoryAGet16(es, bx + 4);
    memoryASet16(es, bx + 10, ax);
    goto loc_1a2e5;
loc_1a257: // 19e4:0417
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 8, 0x0001);
    goto loc_1a271;
loc_1a263: // 19e4:0423
    ax = 0;
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 8, ax);
    memoryASet16(es, bx + 6, ax);
loc_1a271: // 19e4:0431
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x000a);
    goto loc_1a11c;
loc_1a279: // 19e4:0439
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 6, 0x0002);
    goto loc_1a298;
loc_1a285: // 19e4:0445
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 6, dx);
loc_1a298: // 19e4:0458
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0008);
    goto loc_1a11c;
loc_1a2a0: // 19e4:0460
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 2, 0x0000);
    goto loc_1a2e5;
loc_1a2ac: // 19e4:046c
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 4, 0x00dc);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x0010;
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 8, 0x0000);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x00d2;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 2, dx);
loc_1a2e5: // 19e4:04a5
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x000c);
    goto loc_1a11c;
loc_1a2ed: // 19e4:04ad
    ax = 0;
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 8, ax);
    memoryASet16(es, bx + 2, ax);
    goto loc_1a3be;
loc_1a2fe: // 19e4:04be
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    bx = memoryAGet16(es, bx + 2);
    push(ax);
    push(bx);
    bx = memoryAGet16(ds, 0x9856);
    cx = pop();
    cx -= memoryAGet16(es, bx + 4);
    ax = pop();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(cx);
    bx = memoryAGet16(ds, 0x9856);
    dx += memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ds, 0x9856);
    memoryASet16(es, bx + 6, dx);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    bx = memoryAGet16(es, bx + 2);
    push(ax);
    push(bx);
    bx = memoryAGet16(ds, 0x9856);
    cx = pop();
    cx -= memoryAGet16(es, bx + 4);
    ax = pop();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(cx);
    bx = memoryAGet16(ds, 0x9856);
    dx += memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ds, 0x9856);
    memoryASet16(es, bx + 8, dx);
    bx = memoryAGet16(ds, 0x9856);
    memoryASet16(es, bx + 10, 0x0038);
    bx = memoryAGet16(ds, 0x9856);
    memoryASet16(es, bx + 12, 0x004d);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 14, dx);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 16, dx);
loc_1a390: // 19e4:0550
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0012);
    goto loc_1a11c;
loc_1a398: // 19e4:0558
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 4, 0x00dc);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    dx += 0x0010;
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 8, 0x0000);
loc_1a3be: // 19e4:057e
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x000e);
    goto loc_1a11c;
loc_1a3c6: // 19e4:0586
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0006);
    goto loc_1a11c;
loc_1a3ce: // 19e4:058e
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    bx += 0x0002;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    ax = memoryAGet16(es, bx);
    memoryASet16(es, bx + 8, ax);
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(es, bx + 10, ax);
    ax = memoryAGet16(es, bx + 4);
    memoryASet16(es, bx + 12, ax);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 14, ax);
    memoryASet16(es, bx + 18, 0x0000);
    memoryASet16(es, bx + 20, 0x0000);
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x001a);
    goto loc_1a11c;
loc_1a40e: // 19e4:05ce
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1a412() // 19e4:05d2
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet16(ds, 0x9858, es);
    memoryASet16(ds, 0x9856, bx);
loc_1a424: // 19e4:05e4
    if (si)
        goto loc_1a42b;
    goto loc_1a4d7;
loc_1a42b: // 19e4:05eb
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    ax = memoryAGet16(es, bx);
    if (ax > 0x0027)
        goto loc_1a424;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_1a490;
        case 2: goto loc_1a4a7;
        case 4: goto loc_1a4c7;
        case 6: goto loc_1a4a7;
        case 8: goto loc_1a4a7;
        case 10: goto loc_1a4af;
        case 12: goto loc_1a49f;
        case 14: goto loc_1a49f;
        case 16: goto loc_1a4bf;
        case 18: goto loc_1a49f;
        case 20: goto loc_1a4cf;
        case 22: goto loc_1a4cf;
        case 24: goto loc_1a4cf;
        case 26: goto loc_1a4cf;
        case 28: goto loc_1a4bf;
        case 30: goto loc_1a4b7;
        case 32: goto loc_1a498;
        case 34: goto loc_1a4a7;
        case 36: goto loc_1a4a7;
        case 38: goto loc_1a4a7;
        case 40: goto loc_1a49f;
        case 42: goto loc_1a4a7;
        case 44: goto loc_1a4a7;
        case 46: goto loc_1a4af;
        case 48: goto loc_1a49f;
        case 50: goto loc_1a4a7;
        case 52: goto loc_1a4cf;
        case 54: goto loc_1a4cf;
        case 56: goto loc_1a4a7;
        case 58: goto loc_1a4a7;
        case 60: goto loc_1a4af;
        case 62: goto loc_1a4af;
        case 64: goto loc_1a4bf;
        case 66: goto loc_1a4cf;
        case 68: goto loc_1a4cf;
        case 70: goto loc_1a4b7;
        case 72: goto loc_1a4bf;
        case 74: goto loc_1a4c7;
        case 76: goto loc_1a4cf;
        case 78: goto loc_1a4cf;
        default:
        assert(0);
    }
    //   gap of 80 bytes
loc_1a490: // 19e4:0650
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0002);
    si--;
    goto loc_1a424;
loc_1a498: // 19e4:0658
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0010);
    goto loc_1a424;
loc_1a49f: // 19e4:065f
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x000a);
    goto loc_1a424;
loc_1a4a7: // 19e4:0667
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0008);
    goto loc_1a424;
loc_1a4af: // 19e4:066f
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x000c);
    goto loc_1a424;
loc_1a4b7: // 19e4:0677
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0012);
    goto loc_1a424;
loc_1a4bf: // 19e4:067f
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x000e);
    goto loc_1a424;
loc_1a4c7: // 19e4:0687
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x0006);
    goto loc_1a424;
loc_1a4cf: // 19e4:068f
    memoryASet16(ds, 0x9856, memoryAGet16(ds, 0x9856) + 0x001a);
    goto loc_1a424;
loc_1a4d7: // 19e4:0697
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1a4da() // 19e4:069a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
loc_1a4ea: // 19e4:06aa
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    if (memoryAGet16(es, bx) != 0x0000)
        goto loc_1a4f6;
    goto loc_1a5d4;
loc_1a4f6: // 19e4:06b6
    ax = memoryAGet16(es, bx);
    ax--;
    if (ax > 0x0026)
        goto loc_1a4ea;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_1a5a3;
        case 2: goto loc_1a556;
        case 4: goto loc_1a5a3;
        case 6: goto loc_1a5a3;
        case 8: goto loc_1a5aa;
        case 10: goto loc_1a5b1;
        case 12: goto loc_1a5b1;
        case 14: goto loc_1a5bf;
        case 16: goto loc_1a5b1;
        case 18: goto loc_1a5cd;
        case 20: goto loc_1a5cd;
        case 22: goto loc_1a5cd;
        case 24: goto loc_1a5cd;
        case 26: goto loc_1a5bf;
        case 28: goto loc_1a5b8;
        case 30: goto loc_1a57a;
        case 32: goto loc_1a5a3;
        case 34: goto loc_1a5a3;
        case 36: goto loc_1a5a3;
        case 38: goto loc_1a5b1;
        case 40: goto loc_1a581;
        case 42: goto loc_1a5a3;
        case 44: goto loc_1a5aa;
        case 46: goto loc_1a5b1;
        case 48: goto loc_1a5a3;
        case 50: goto loc_1a5cd;
        case 52: goto loc_1a5cd;
        case 54: goto loc_1a5a3;
        case 56: goto loc_1a5a3;
        case 58: goto loc_1a5aa;
        case 60: goto loc_1a5b1;
        case 62: goto loc_1a5bf;
        case 64: goto loc_1a5cd;
        case 66: goto loc_1a5cd;
        case 68: goto loc_1a5b8;
        case 70: goto loc_1a5bf;
        case 72: goto loc_1a5c6;
        case 74: goto loc_1a5cd;
        case 76: goto loc_1a5cd;
        default:
        assert(0);
    }
    //   gap of 78 bytes
loc_1a556: // 19e4:0716
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += 0x0081;
    push(ax);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x19e4);
    sp += 0x000c;
    goto loc_1a5c6;
loc_1a57a: // 19e4:073a
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0010);
    goto loc_1a4ea;
loc_1a581: // 19e4:0741
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += 0x008e;
    push(ax);
    ax = 0x0073;
    push(ax);
    ax = memoryAGet16(ds, 0x985c);
    ax += 0xfff1;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x19e4);
    sp += 0x000c;
loc_1a5a3: // 19e4:0763
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0008);
    goto loc_1a4ea;
loc_1a5aa: // 19e4:076a
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x000c);
    goto loc_1a4ea;
loc_1a5b1: // 19e4:0771
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x000a);
    goto loc_1a4ea;
loc_1a5b8: // 19e4:0778
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0012);
    goto loc_1a4ea;
loc_1a5bf: // 19e4:077f
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x000e);
    goto loc_1a4ea;
loc_1a5c6: // 19e4:0786
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0006);
    goto loc_1a4ea;
loc_1a5cd: // 19e4:078d
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x001a);
    goto loc_1a4ea;
loc_1a5d4: // 19e4:0794
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1a5d8() // 19e4:0798
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    si = 0;
    goto loc_1a636;
loc_1a5dd: // 19e4:079d
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 38918) == 0x0000)
        goto loc_1a635;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38918, memoryAGet16(ds, bx + 38918) - 1);
    ax = 0;
    push(ax);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38924));
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38922));
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 38920));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38922, memoryAGet16(ds, bx + 38922) - 0x0004);
loc_1a635: // 19e4:07f5
    si++;
loc_1a636: // 19e4:07f6
    if (si < 0x000a)
        goto loc_1a5dd;
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1a63d() // 19e4:07fd
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 14);
    dx = 0;
    flags.carry = (ax + memoryAGet16(ds, 0x9886)) >= 0x10000;
    ax += memoryAGet16(ds, 0x9886);
    dx += memoryAGet16(ds, 0x9888) + flags.carry;
    memoryASet16(ds, 0x9888, dx);
    memoryASet16(ds, 0x9886, ax);
    push(cs);
    cs = 0x19e4;
    sub_1b214(); // 19e4:13d4
    assert(cs == 0x19e4);
    sp = bp;
    di = 0;
    si = di;
    goto loc_1a674;
loc_1a663: // 19e4:0823
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32770);
    if (ax != memoryAGet16(ss, bp + 14))
        goto loc_1a673;
    di = si;
    di++;
loc_1a673: // 19e4:0833
    si++;
loc_1a674: // 19e4:0834
    if (si < 0x0005)
        goto loc_1a663;
    if (!di)
        goto loc_1a6db;
    push(cs);
    cs = 0x1dc4;
    sub_1dc46(); // 1dc4:0006
    assert(cs == 0x19e4);
    sp = bp;
    di += 0x0021;
    si = 0;
loc_1a689: // 19e4:0849
    if (si >= 0x000a)
        goto loc_1a6db;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 38918) != 0x0000)
        goto loc_1a6d8;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38918, 0x000a);
    ax = memoryAGet16(ss, bp + 10);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38920, ax);
    ax = memoryAGet16(ss, bp + 12);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38922, ax);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 38924, di);
    si = 0x0014;
loc_1a6d8: // 19e4:0898
    si++;
    goto loc_1a689;
loc_1a6db: // 19e4:089b
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1a6df() // 19e4:089f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet16(ds, 0x97e4) != 0x0000)
        goto loc_1a6e9;
    goto loc_1a77c;
loc_1a6e9: // 19e4:08a9
    if (memoryAGet16(ds, 0x97e4) != 0x0001)
        goto loc_1a6ff;
    memoryASet16(ds, 0x97f6, memoryAGet16(ds, 0x97f6) + 0x0008);
    if ((short)memoryAGet16(ds, 0x97f6) <= (short)0x0140)
        goto loc_1a711;
    goto loc_1a70b;
loc_1a6ff: // 19e4:08bf
    memoryASet16(ds, 0x97f6, memoryAGet16(ds, 0x97f6) - 0x0008);
    if ((short)memoryAGet16(ds, 0x97f6) >= (short)0x0000)
        goto loc_1a711;
loc_1a70b: // 19e4:08cb
    memoryASet16(ds, 0x97e4, 0x0000);
loc_1a711: // 19e4:08d1
    if (memoryAGet16(ds, 0x97e4) == 0x0000)
        goto loc_1a77c;
    ax = memoryAGet16(ds, 0x97e4);
    ax--;
    push(ax);
    ax = 0x006d;
    push(ax);
    push(memoryAGet16(ds, 0x9884));
    push(memoryAGet16(ds, 0x97f6));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0019;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f6))
        goto loc_1a77c;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xfff6;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f6))
        goto loc_1a77c;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff3;
    if ((short)ax >= (short)memoryAGet16(ds, 0x9884))
        goto loc_1a77c;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x0010;
    if ((short)ax <= (short)memoryAGet16(ds, 0x9884))
        goto loc_1a77c;
    if (memoryAGet16(ds, 0x987e) != 0x0000)
        goto loc_1a77c;
    memoryASet16(ds, 0x97e4, 0x0000);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x19e4);
    sp++;
    sp++;
loc_1a77c: // 19e4:093c
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1a77d() // 19e4:093d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x001e;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 30, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 28, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 26, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    si = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 24, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 22, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 18, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 14, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
    if (memoryAGet16(ds, 0x9894) == 0x0000)
        goto loc_1a879;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 10, 0x0000);
    if (memoryAGet16(es, bx + 8) == 0x0006)
        goto loc_1a879;
    memoryASet16(es, bx + 8, 0x0005);
    if ((short)memoryAGet16(es, bx + 20) >= (short)0x0064)
        goto loc_1a879;
    memoryASet16(es, bx + 20, 0x1f40);
loc_1a879: // 19e4:0a39
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 10) != 0x0000)
        goto loc_1a88a;
    if ((short)memoryAGet16(es, bx + 8) >= (short)0x0006)
        goto loc_1a8ca;
loc_1a88a: // 19e4:0a4a
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0014;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)ax <= (short)memoryAGet16(es, bx + 4))
        goto loc_1a8ca;
    ax = memoryAGet16(ds, 0x988e);
    ax -= memoryAGet16(ss, bp - 24);
    if ((short)ax >= (short)memoryAGet16(es, bx + 4))
        goto loc_1a8ca;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x000a;
    if ((short)ax <= (short)memoryAGet16(es, bx + 6))
        goto loc_1a8ca;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff1;
    if ((short)ax >= (short)memoryAGet16(es, bx + 6))
        goto loc_1a8ca;
    if (memoryAGet16(ds, 0x987e) == 0x0000)
        goto loc_1a8ca;
    memoryASet16(ds, 0x987e, 0x0000);
loc_1a8ca: // 19e4:0a8a
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 8) != 0x0006)
        goto loc_1a917;
    if (memoryAGet16(es, bx + 10) == 0x0000)
        goto loc_1a917;
    ax = memoryAGet16(es, bx);
    memoryASet16(es, bx + 8, ax);
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) - 1);
    ax = memoryAGet16(es, bx + 4);
    memoryASet16(es, bx + 12, ax);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 14, ax);
    memoryASet16(es, bx + 16, 0x0000);
    memoryASet16(es, bx + 18, 0x0000);
    memoryASet16(es, bx + 20, 0x0000);
    memoryASet16(es, bx + 22, 0x0000);
    memoryASet16(ds, 0x9860, 0x0000);
    goto loc_1b03c;
loc_1a917: // 19e4:0ad7
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)memoryAGet16(es, bx + 8) <= (short)0x0005)
        goto loc_1a924;
    goto loc_1b03c;
loc_1a924: // 19e4:0ae4
    memoryASet16(ds, 0x9860, 0x0000);
    ax = memoryAGet16(es, bx + 8);
    if (ax <= 0x0005)
        goto loc_1a936;
    goto loc_1b03c;
loc_1a936: // 19e4:0af6
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_1a94b;
        case 2: goto loc_1a9d4;
        case 4: goto loc_1b03c;
        case 6: goto loc_1aa17;
        case 8: goto loc_1ad9e;
        case 10: goto loc_1af2a;
        default:
        assert(0);
    }
    //   gap of 12 bytes
loc_1a94b: // 19e4:0b0b
    if ((short)memoryAGet16(ds, 0x988e) > (short)0x0002)
        goto loc_1a955;
    goto loc_1b03c;
loc_1a955: // 19e4:0b15
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001e;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)ax > (short)memoryAGet16(es, bx + 14))
        goto loc_1a967;
    goto loc_1b03c;
loc_1a967: // 19e4:0b27
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff1;
    if ((short)ax < (short)memoryAGet16(es, bx + 14))
        goto loc_1a976;
    goto loc_1b03c;
loc_1a976: // 19e4:0b36
    memoryASet16(es, bx + 8, 0x0001);
    memoryASet16(es, bx + 18, 0x0000);
    memoryASet16(es, bx + 20, 0x0000);
    memoryASet16(es, bx + 22, 0x0000);
    ax = memoryAGet16(es, bx + 12);
    ax += 0x0014;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1a9a3;
    memoryASet16(es, bx + 16, 0x0000);
    goto loc_1a9ac;
loc_1a9a3: // 19e4:0b63
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 16, 0x0001);
loc_1a9ac: // 19e4:0b6c
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 18);
    ax += memoryAGet16(ss, bp - 16);
    push(ax);
    push(memoryAGet16(es, bx + 14));
    ax = memoryAGet16(es, bx + 12);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    goto loc_1b03c;
loc_1a9d4: // 19e4:0b94
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 18);
    ax += memoryAGet16(ss, bp - 16);
    push(ax);
    push(memoryAGet16(es, bx + 14));
    ax = memoryAGet16(es, bx + 12);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1aa07;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 18, memoryAGet16(es, bx + 18) + 1);
loc_1aa07: // 19e4:0bc7
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 18) == 0x0002)
        goto loc_1aa14;
    goto loc_1b03c;
loc_1aa14: // 19e4:0bd4
    goto loc_1afd6;
loc_1aa17: // 19e4:0bd7
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1aa37;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 16) == 0x0000)
        goto loc_1aa2f;
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) - 0x0004);
    goto loc_1aa37;
loc_1aa2f: // 19e4:0bef
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) + 0x0004);
loc_1aa37: // 19e4:0bf7
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)memoryAGet16(es, bx + 12) < (short)0x0014)
        goto loc_1aa80;
    if ((short)memoryAGet16(es, bx + 12) > (short)0x0113)
        goto loc_1aa80;
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(es, bx + 12);
    ax += di;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1aa80;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    push(memoryAGet16(es, bx + 12));
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1aa80;
    goto loc_1ab40;
loc_1aa80: // 19e4:0c40
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)memoryAGet16(es, bx + 12) >= (short)0x0014)
        goto loc_1aa90;
    memoryASet16(es, bx + 12, 0x0014);
loc_1aa90: // 19e4:0c50
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)memoryAGet16(es, bx + 12) <= (short)0x0113)
        goto loc_1aaa1;
    memoryASet16(es, bx + 12, 0x0113);
loc_1aaa1: // 19e4:0c61
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 16) != 0x0000)
        goto loc_1aaf4;
    memoryASet16(es, bx + 16, 0x0001);
loc_1aab1: // 19e4:0c71
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(es, bx + 12);
    ax += di;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1aaeb;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    push(memoryAGet16(es, bx + 12));
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1aaeb;
    goto loc_1abb0;
loc_1aaeb: // 19e4:0cab
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) - 1);
    goto loc_1aab1;
loc_1aaf4: // 19e4:0cb4
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 16, 0x0000);
loc_1aafd: // 19e4:0cbd
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(es, bx + 12);
    ax += di;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1ab37;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    push(memoryAGet16(es, bx + 12));
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1ab37;
    goto loc_1abb0;
loc_1ab37: // 19e4:0cf7
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) + 1);
    goto loc_1aafd;
loc_1ab40: // 19e4:0d00
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 18) != 0x0000)
        goto loc_1abb0;
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x19e4);
    bx = 0x0014;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 2, dx);
    if (dx == 0x0002)
        goto loc_1ab67;
    if (dx == 0x000c)
        goto loc_1ab67;
    if (dx != 0x0010)
        goto loc_1ab70;
loc_1ab67: // 19e4:0d27
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 16, memoryAGet16(es, bx + 16) ^ 0x0001);
loc_1ab70: // 19e4:0d30
    if (memoryAGet16(ds, 0x9874) != 0x0000)
        goto loc_1abb0;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x000a;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)ax <= (short)memoryAGet16(es, bx + 14))
        goto loc_1abb0;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff1;
    if ((short)ax >= (short)memoryAGet16(es, bx + 14))
        goto loc_1abb0;
    ax = memoryAGet16(es, bx + 12);
    ax += 0x0014;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1aba7;
    memoryASet16(es, bx + 16, 0x0000);
    goto loc_1abb0;
loc_1aba7: // 19e4:0d67
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 16, 0x0001);
loc_1abb0: // 19e4:0d70
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1abbe;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 18, memoryAGet16(es, bx + 18) + 1);
loc_1abbe: // 19e4:0d7e
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 18, memoryAGet16(es, bx + 18) & 0x0007);
    memoryASet16(ss, bp - 2, 0x0000);
    if (memoryAGet16(ss, bp + 18) != 0x0000)
        goto loc_1abd5;
    goto loc_1ac61;
loc_1abd5: // 19e4:0d95
    if (memoryAGet16(ds, 0x97e4) == 0x0000)
        goto loc_1abdf;
    goto loc_1ac61;
loc_1abdf: // 19e4:0d9f
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x0005;
    if ((short)ax > (short)memoryAGet16(es, bx + 14))
        goto loc_1abee;
    goto loc_1ac61;
loc_1abee: // 19e4:0dae
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfffb;
    if ((short)ax >= (short)memoryAGet16(es, bx + 14))
        goto loc_1ac61;
    if (memoryAGet16(es, bx + 16) == 0x0000)
        goto loc_1ac0e;
    ax = memoryAGet16(es, bx + 12);
    ax += 0x0014;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1ac22;
loc_1ac0e: // 19e4:0dce
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 16) != 0x0000)
        goto loc_1ac61;
    ax = memoryAGet16(es, bx + 12);
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1ac61;
loc_1ac22: // 19e4:0de2
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 16);
    ax++;
    memoryASet16(ds, 0x97e4, ax);
    ax = memoryAGet16(es, bx + 12);
    memoryASet16(ds, 0x97f6, ax);
    ax = memoryAGet16(es, bx + 14);
    ax += 0x0004;
    memoryASet16(ds, 0x9884, ax);
    push(memoryAGet16(es, bx + 16));
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(ax);
    push(memoryAGet16(es, bx + 14));
    push(memoryAGet16(es, bx + 12));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    memoryASet16(ss, bp - 2, 0x0001);
loc_1ac61: // 19e4:0e21
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_1ac96;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    push(memoryAGet16(es, bx + 16));
    ax = memoryAGet16(es, bx + 18);
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 10);
    es = memoryAGet16(ss, bp + 10 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx);
    ax += memoryAGet16(ss, bp - 12);
    push(ax);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    push(memoryAGet16(es, bx + 14));
    push(memoryAGet16(es, bx + 12));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
loc_1ac96: // 19e4:0e56
    if (memoryAGet16(ds, 0x9862) == 0x0001)
        goto loc_1aca0;
    goto loc_1ad3d;
loc_1aca0: // 19e4:0e60
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_1acf4;
    ax = memoryAGet16(ds, 0x988e);
    ax += memoryAGet16(ss, bp - 28);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)ax > (short)memoryAGet16(es, bx + 12))
        goto loc_1acb9;
    goto loc_1ad3d;
loc_1acb9: // 19e4:0e79
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0003;
    if ((short)ax < (short)memoryAGet16(es, bx + 12))
        goto loc_1acc8;
    goto loc_1ad3d;
loc_1acc8: // 19e4:0e88
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001e;
    if ((short)ax <= (short)memoryAGet16(es, bx + 14))
        goto loc_1ad3d;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff1;
    if ((short)ax >= (short)memoryAGet16(es, bx + 14))
        goto loc_1ad3d;
    memoryASet16(es, bx + 8, 0x0004);
    memoryASet16(es, bx + 18, 0x0000);
    memoryASet16(es, bx + 16, 0x0001);
    goto loc_1ad38;
loc_1acf4: // 19e4:0eb4
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 12);
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1ad3d;
    ax = memoryAGet16(es, bx + 12);
    ax += memoryAGet16(ss, bp - 22);
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1ad3d;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001e;
    if ((short)ax <= (short)memoryAGet16(es, bx + 14))
        goto loc_1ad3d;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff1;
    if ((short)ax >= (short)memoryAGet16(es, bx + 14))
        goto loc_1ad3d;
    memoryASet16(es, bx + 8, 0x0004);
    memoryASet16(es, bx + 18, 0x0000);
    memoryASet16(es, bx + 16, 0x0000);
loc_1ad38: // 19e4:0ef8
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x19e4);
loc_1ad3d: // 19e4:0efd
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 8) == 0x0003)
        goto loc_1ad4a;
    goto loc_1b03c;
loc_1ad4a: // 19e4:0f0a
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0014;
    if ((short)ax > (short)memoryAGet16(es, bx + 12))
        goto loc_1ad59;
    goto loc_1b03c;
loc_1ad59: // 19e4:0f19
    ax = memoryAGet16(ds, 0x988e);
    ax -= memoryAGet16(ss, bp - 24);
    if ((short)ax < (short)memoryAGet16(es, bx + 12))
        goto loc_1ad68;
    goto loc_1b03c;
loc_1ad68: // 19e4:0f28
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x000a;
    if ((short)ax > (short)memoryAGet16(es, bx + 14))
        goto loc_1ad77;
    goto loc_1b03c;
loc_1ad77: // 19e4:0f37
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff1;
    if ((short)ax < (short)memoryAGet16(es, bx + 14))
        goto loc_1ad86;
    goto loc_1b03c;
loc_1ad86: // 19e4:0f46
    if (memoryAGet16(ds, 0x987e) == 0x0000)
        goto loc_1ad90;
    goto loc_1b03c;
loc_1ad90: // 19e4:0f50
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x19e4);
    sp++;
    sp++;
    goto loc_1b03c;
loc_1ad9e: // 19e4:0f5e
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1adbe;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 16) == 0x0000)
        goto loc_1adb6;
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) + 0x0008);
    goto loc_1adbe;
loc_1adb6: // 19e4:0f76
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) - 0x0008);
loc_1adbe: // 19e4:0f7e
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)memoryAGet16(es, bx + 12) < (short)0x0014)
        goto loc_1ae07;
    if ((short)memoryAGet16(es, bx + 12) > (short)0x0113)
        goto loc_1ae07;
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(es, bx + 12);
    ax += di;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1ae07;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    push(memoryAGet16(es, bx + 12));
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1ae07;
    goto loc_1aeb2;
loc_1ae07: // 19e4:0fc7
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)memoryAGet16(es, bx + 12) >= (short)0x0014)
        goto loc_1ae17;
    memoryASet16(es, bx + 12, 0x0014);
loc_1ae17: // 19e4:0fd7
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)memoryAGet16(es, bx + 12) <= (short)0x0113)
        goto loc_1ae28;
    memoryASet16(es, bx + 12, 0x0113);
loc_1ae28: // 19e4:0fe8
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 16) != 0x0000)
        goto loc_1ae72;
loc_1ae32: // 19e4:0ff2
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(es, bx + 12);
    ax += di;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1ae69;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    push(memoryAGet16(es, bx + 12));
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (!ax)
        goto loc_1aeb2;
loc_1ae69: // 19e4:1029
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) + 1);
    goto loc_1ae32;
loc_1ae72: // 19e4:1032
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(es, bx + 12);
    ax += di;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (ax)
        goto loc_1aea9;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    push(memoryAGet16(es, bx + 12));
    push(cs);
    cs = 0x19e4;
    sub_1b19e(); // 19e4:135e
    assert(cs == 0x19e4);
    sp += 0x0004;
    if (!ax)
        goto loc_1aeb2;
loc_1aea9: // 19e4:1069
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) - 1);
    goto loc_1ae72;
loc_1aeb2: // 19e4:1072
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    push(memoryAGet16(es, bx + 16));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(es, bx + 14));
    push(memoryAGet16(es, bx + 12));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1aedd;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 18, memoryAGet16(es, bx + 18) + 1);
loc_1aedd: // 19e4:109d
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 18) == 0x0002)
        goto loc_1aeea;
    goto loc_1b03c;
loc_1aeea: // 19e4:10aa
    memoryASet16(es, bx + 8, 0x0003);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(es, bx + 16, memoryAGet16(es, bx + 16) ^ ax);
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1af02;
    memoryASet16(es, bx + 20, memoryAGet16(es, bx + 20) + 1);
loc_1af02: // 19e4:10c2
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 20);
    if (ax == memoryAGet16(ss, bp - 6))
        goto loc_1af18;
    if (memoryAGet16(ds, 0x97f8) != 0x0000)
        goto loc_1af18;
    goto loc_1b03c;
loc_1af18: // 19e4:10d8
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 20, 0x0028);
    memoryASet16(es, bx + 8, 0x0005);
    goto loc_1b03c;
loc_1af2a: // 19e4:10ea
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 20);
    ax &= 0x0001;
    ax += memoryAGet16(ss, bp - 18);
    push(ax);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += memoryAGet16(ss, bp - 18);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    ax -= memoryAGet16(es, bx + 2);
    push(ax);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    push(memoryAGet16(es, bx + 12));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if ((short)memoryAGet16(es, bx + 20) >= (short)0x0014)
        goto loc_1afbe;
    if (!(memoryAGet16(es, bx + 20) & 0x0001))
        goto loc_1afbe;
    ax = 0;
    push(ax);
    ax = 0x0069;
    push(ax);
    ax = memoryAGet16(es, bx + 14);
    ax += si;
    push(ax);
    ax = memoryAGet16(ds, 0x988a);
    ax += memoryAGet16(ss, bp - 18);
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = pop();
    ax -= memoryAGet16(es, bx + 2);
    ax += 0xfff8;
    push(ax);
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 12);
    ax += memoryAGet16(ss, bp - 30);
    ax += 0xfffd;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
loc_1afbe: // 19e4:117e
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1afcc;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 20, memoryAGet16(es, bx + 20) - 1);
loc_1afcc: // 19e4:118c
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    if (memoryAGet16(es, bx + 20) != 0x0000)
        goto loc_1afe1;
loc_1afd6: // 19e4:1196
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 8, 0x0003);
    goto loc_1b03c;
loc_1afe1: // 19e4:11a1
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    ax = memoryAGet16(es, bx + 12);
    ax += 0x0014;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1b03c;
    ax = memoryAGet16(es, bx + 12);
    ax += 0xfff6;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1b03c;
    ax = memoryAGet16(es, bx + 14);
    ax += 0xffe2;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1b03c;
    ax = memoryAGet16(es, bx + 14);
    ax += 0x0017;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1b03c;
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(es, bx + 14));
    push(memoryAGet16(es, bx + 12));
    push(cs);
    sub_1a63d(); // 19e4:07fd
    sp += 0x0006;
    bx = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    memoryASet16(es, bx + 8, 0x0006);
    memoryASet16(ds, 0x9880, memoryAGet16(ds, 0x9880) + 1);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x19e4);
loc_1b03c: // 19e4:11fc
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b042() // 19e4:1202
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    if (ax > 0x0005)
        goto loc_1b0b5;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_1b062;
        case 2: goto loc_1b06a;
        case 4: goto loc_1b079;
        case 6: goto loc_1b093;
        case 8: goto loc_1b0a7;
        case 10: goto loc_1b0af;
        default:
        assert(0);
    }
    //   gap of 12 bytes
loc_1b062: // 19e4:1222
    memoryASet16(ds, 0x97f4, 0x0022);
    goto loc_1b0b5;
loc_1b06a: // 19e4:122a
    memoryASet16(ds, 0x9894, 0x0001);
    push(cs);
    cs = 0x1946;
    sub_1966b(); // 1946:020b
    assert(cs == 0x19e4);
    sp = bp;
    goto loc_1b0b5;
loc_1b079: // 19e4:1239
    memoryASet16(ds, 0x9c66, memoryAGet16(ds, 0x9c66) + 0x001e);
    if (memoryAGet16(ds, 0x9c66) <= 0x0063)
        goto loc_1b08b;
    memoryASet16(ds, 0x9c66, 0x0063);
loc_1b08b: // 19e4:124b
    memoryASet16(ds, 0x985a, 0x003c);
    goto loc_1b0b5;
loc_1b093: // 19e4:1253
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0063)
        goto loc_1b09e;
    memoryASet16(ds, 0x9c5e, memoryAGet16(ds, 0x9c5e) + 1);
loc_1b09e: // 19e4:125e
    push(cs);
    cs = 0x19e4;
    sub_1b3e8(); // 19e4:15a8
    assert(cs == 0x19e4);
    sp = bp;
    goto loc_1b0b5;
loc_1b0a7: // 19e4:1267
    memoryASet16(ds, 0x9874, 0x0063);
    goto loc_1b0b5;
loc_1b0af: // 19e4:126f
    memoryASet16(ds, 0x97f8, 0x0001);
loc_1b0b5: // 19e4:1275
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b0b7() // 19e4:1277
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet16(ds, 0x97e0) <= 0x0001)
        goto loc_1b106;
    if (memoryAGet16(ds, 0x97e0) >= 0x0012)
        goto loc_1b106;
    ax = 0;
    push(ax);
    ax = 0x0085;
    push(ax);
    ax = 0x0064;
    push(ax);
    ax = 0x0080;
    push(ax);
    ax = 0x000f;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x0086;
    push(ax);
    ax = 0x0061;
    push(ax);
    ax = 0x00a2;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1b106;
    memoryASet16(ds, 0x97e0, memoryAGet16(ds, 0x97e0) - 1);
loc_1b106: // 19e4:12c6
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b107() // 19e4:12c7
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_1b114;
    si = 0x0004;
    goto loc_1b116;
loc_1b114: // 19e4:12d4
    si = 0;
loc_1b116: // 19e4:12d6
    if (memoryAGet16(ds, 0x9874) != 0x0000)
        goto loc_1b120;
    goto loc_1b19c;
loc_1b120: // 19e4:12e0
    if (memoryAGet16(ds, 0x9874) < 0x0064)
        goto loc_1b12a;
    goto loc_1b19c;
loc_1b12a: // 19e4:12ea
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1b13f;
    memoryASet16(ds, 0x9874, memoryAGet16(ds, 0x9874) - 1);
    ax = 0x0001;
    ax -= memoryAGet16(ds, 0x9c6a);
    memoryASet16(ds, 0x9c6a, ax);
loc_1b13f: // 19e4:12ff
    if (memoryAGet16(ds, 0x9874) > 0x000f)
        goto loc_1b14d;
    if (memoryAGet16(ds, 0x9c6a) == 0x0000)
        goto loc_1b19c;
loc_1b14d: // 19e4:130d
    if (memoryAGet16(ds, 0x989c) != 0x0000)
        goto loc_1b17c;
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x9c6a);
    ax += 0x0080;
    push(ax);
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff5;
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xfffb;
    ax -= si;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    goto loc_1b19c;
loc_1b17c: // 19e4:133c
    ax = 0;
    push(ax);
    ax = 0x008d;
    push(ax);
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x000a;
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
loc_1b19c: // 19e4:135c
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b19e() // 19e4:135e
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0006;
    di = memoryAGet16(ss, bp + 12);
    si = memoryAGet16(ss, bp + 10);
    if ((short)si >= 0)
        goto loc_1b1b2;
    si = 0;
loc_1b1b2: // 19e4:1372
    if ((short)si <= (short)0x013f)
        goto loc_1b1bb;
    si = 0x013f;
loc_1b1bb: // 19e4:137b
    if (di <= 0x00c7)
        goto loc_1b1c4;
    di = 0x00c7;
loc_1b1c4: // 19e4:1384
    bx = memoryAGet16(ds, 0x987a);
    es = memoryAGet16(ds, 0x987a + 2);
    memoryASet16(ss, bp - 4, es);
    memoryASet16(ss, bp - 6, bx);
    ax = di;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + ax);
    ax = di;
    cx = 0x0005;
    ax <<= cl;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + ax);
    ax = si;
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + ax);
    cx = si;
    cx &= 0x0007;
    ax = 0x0080;
    ax = sar(ax, cl);
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    bx = memoryAGet16(ss, bp - 6);
    if (!(memoryAGet(es, bx) & al))
        goto loc_1b20b;
    ax = 0;
    goto loc_1b20e;
loc_1b20b: // 19e4:13cb
    ax = 0x0001;
loc_1b20e: // 19e4:13ce
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b214() // 19e4:13d4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x002c;
loc_1b21c: // 19e4:13dc
    if (memoryAGet16(ds, 0x9888) < 0x000f)
        goto loc_1b243;
    if (memoryAGet16(ds, 0x9888) > 0x000f)
        goto loc_1b22d;
    if (memoryAGet16(ds, 0x9886) <= 0x423f)
        goto loc_1b243;
loc_1b22d: // 19e4:13ed
    dx = memoryAGet16(ds, 0x9888);
    ax = memoryAGet16(ds, 0x9886);
    flags.carry = (ax + 0xbdc0) >= 0x10000;
    ax += 0xbdc0;
    dx += 0xfff0 + flags.carry;
    memoryASet16(ds, 0x9888, dx);
    memoryASet16(ds, 0x9886, ax);
    goto loc_1b21c;
loc_1b243: // 19e4:1403
    push(memoryAGet16(ds, 0x9888));
    push(memoryAGet16(ds, 0x9886));
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6a15(); // 060b:0965
    assert(cs == 0x19e4);
    sp += 0x0008;
    di = 0;
loc_1b25a: // 19e4:141a
    if (memoryAGet(ss, bp + di + 65492) == 0x00)
        goto loc_1b264;
    di++;
    goto loc_1b25a;
loc_1b264: // 19e4:1424
    si = 0;
loc_1b266: // 19e4:1426
    ax = 0x0006;
    ax -= di;
    if (ax <= si)
        goto loc_1b27d;
    bx = si;
    ax = bp - 0x18;
    bx += ax;
    memoryASet(ss, bx, 0x30);
    si++;
    goto loc_1b266;
loc_1b27d: // 19e4:143d
    memoryASet(ss, bp + si + 65512, 0x00);
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x19e4);
    sp += 0x0008;
    memoryASet16(ss, bp - 4, 0x000f);
    if (memoryAGet16(ds, 0x9c6c) != 0x0001)
        goto loc_1b2ba;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1b2ae;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1b2b5;
loc_1b2ae: // 19e4:146e
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1b2ba;
loc_1b2b5: // 19e4:1475
    memoryASet16(ss, bp - 2, 0x0004);
loc_1b2ba: // 19e4:147a
    if (memoryAGet16(ds, 0x9c6c) == 0x0003)
        goto loc_1b2cf;
    if (memoryAGet16(ds, 0x9c6c) == 0x0005)
        goto loc_1b2cf;
    if (memoryAGet16(ds, 0x9c6c) != 0x0007)
        goto loc_1b2d4;
loc_1b2cf: // 19e4:148f
    memoryASet16(ss, bp - 2, 0x0000);
loc_1b2d4: // 19e4:1494
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(ss);
    ax = bp - 0x18;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0030;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6604(); // 060b:0554
    assert(cs == 0x19e4);
    sp += 0x0012;
    push(cs);
    cs = 0x1829;
    sub_1839a(); // 1829:010a
    assert(cs == 0x19e4);
    dx = memoryAGet16(ds, 0x97f0);
    ax = memoryAGet16(ds, 0x97ee);
    cx = 0;
    bx = 0x2710;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x19e4);
    if (dx > memoryAGet16(ds, 0x9888))
        goto loc_1b33b;
    if (dx != memoryAGet16(ds, 0x9888))
        goto loc_1b31b;
    if (ax > memoryAGet16(ds, 0x9886))
        goto loc_1b33b;
loc_1b31b: // 19e4:14db
    flags.carry = (memoryAGet16(ds, 0x97ee) + 0x0001) >= 0x10000;
    memoryASet16(ds, 0x97ee, memoryAGet16(ds, 0x97ee) + 0x0001);
    memoryASet16(ds, 0x97f0, memoryAGet16(ds, 0x97f0) + flags.carry);
    memoryASet16(ds, 0x9c5e, memoryAGet16(ds, 0x9c5e) + 1);
    if ((short)memoryAGet16(ds, 0x9c5e) <= (short)0x0063)
        goto loc_1b336;
    memoryASet16(ds, 0x9c5e, 0x0063);
loc_1b336: // 19e4:14f6
    push(cs);
    cs = 0x19e4;
    sub_1b3e8(); // 19e4:15a8
    assert(cs == 0x19e4);
loc_1b33b: // 19e4:14fb
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b341() // 19e4:1501
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x000f;
    push(ax);
    push(ds);
    ax = 0x8080;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6410(); // 060b:0360
    assert(cs == 0x19e4);
    sp += 0x0010;
    memoryASet16(ss, bp - 4, 0x002a);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0040;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp += 0x000e;
    si = 0x0002;
    di = 0;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1b3a3;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1b3aa;
loc_1b3a3: // 19e4:1563
    memoryASet16(ss, bp - 2, 0x0002);
    goto loc_1b3af;
loc_1b3aa: // 19e4:156a
    memoryASet16(ss, bp - 2, 0x0005);
loc_1b3af: // 19e4:156f
    if (di >= memoryAGet16(ds, 0x989a))
        goto loc_1b3dd;
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0005;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = si;
    ax += 0x003f;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp += 0x000e;
    si += 0x0004;
    di++;
    goto loc_1b3af;
loc_1b3dd: // 19e4:159d
    push(cs);
    cs = 0x1829;
    sub_1841a(); // 1829:018a
    assert(cs == 0x19e4);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b3e8() // 19e4:15a8
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x002c;
    ax = memoryAGet16(ds, 0x9c5e);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6a15(); // 060b:0965
    assert(cs == 0x19e4);
    sp += 0x0008;
    di = 0;
loc_1b405: // 19e4:15c5
    if (memoryAGet(ss, bp + di + 65492) == 0x00)
        goto loc_1b40f;
    di++;
    goto loc_1b405;
loc_1b40f: // 19e4:15cf
    si = 0;
loc_1b411: // 19e4:15d1
    ax = 0x0002;
    ax -= di;
    if (ax <= si)
        goto loc_1b428;
    bx = si;
    ax = bp - 0x18;
    bx += ax;
    memoryASet(ss, bx, 0x30);
    si++;
    goto loc_1b411;
loc_1b428: // 19e4:15e8
    memoryASet(ss, bp + si + 65512, 0x00);
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x19e4);
    sp += 0x0008;
    memoryASet16(ss, bp - 4, 0x000f);
    if (memoryAGet16(ds, 0x9c6c) != 0x0001)
        goto loc_1b465;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1b459;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1b460;
loc_1b459: // 19e4:1619
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1b465;
loc_1b460: // 19e4:1620
    memoryASet16(ss, bp - 2, 0x0004);
loc_1b465: // 19e4:1625
    if (memoryAGet16(ds, 0x9c6c) == 0x0003)
        goto loc_1b47a;
    if (memoryAGet16(ds, 0x9c6c) == 0x0005)
        goto loc_1b47a;
    if (memoryAGet16(ds, 0x9c6c) != 0x0007)
        goto loc_1b47f;
loc_1b47a: // 19e4:163a
    memoryASet16(ss, bp - 2, 0x0000);
loc_1b47f: // 19e4:163f
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(ss);
    ax = bp - 0x18;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x00e8;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6604(); // 060b:0554
    assert(cs == 0x19e4);
    sp += 0x0012;
    push(cs);
    cs = 0x1829;
    sub_1839a(); // 1829:010a
    assert(cs == 0x19e4);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b4ad() // 19e4:166d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x002c;
    ax = memoryAGet16(ds, 0x9c66);
    dx = 0;
    push(dx);
    push(ax);
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6a15(); // 060b:0965
    assert(cs == 0x19e4);
    sp += 0x0008;
    di = 0;
loc_1b4cb: // 19e4:168b
    if (memoryAGet(ss, bp + di + 65492) == 0x00)
        goto loc_1b4d5;
    di++;
    goto loc_1b4cb;
loc_1b4d5: // 19e4:1695
    si = 0;
loc_1b4d7: // 19e4:1697
    ax = 0x0002;
    ax -= di;
    if (ax <= si)
        goto loc_1b4ee;
    bx = si;
    ax = bp - 0x18;
    bx += ax;
    memoryASet(ss, bx, 0x30);
    si++;
    goto loc_1b4d7;
loc_1b4ee: // 19e4:16ae
    memoryASet(ss, bp + si + 65512, 0x00);
    push(ss);
    ax = bp - 0x2c;
    push(ax);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6ae8(); // 060b:0a38
    assert(cs == 0x19e4);
    sp += 0x0008;
    if (memoryAGet16(ds, 0x9c66) >= 0x000b)
        goto loc_1b528;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1b51a;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1b521;
loc_1b51a: // 19e4:16da
    memoryASet16(ss, bp - 4, 0x0002);
    goto loc_1b52d;
loc_1b521: // 19e4:16e1
    memoryASet16(ss, bp - 4, 0x0005);
    goto loc_1b52d;
loc_1b528: // 19e4:16e8
    memoryASet16(ss, bp - 4, 0x000f);
loc_1b52d: // 19e4:16ed
    if (memoryAGet16(ds, 0x9c6c) != 0x0001)
        goto loc_1b54e;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1b542;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1b549;
loc_1b542: // 19e4:1702
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1b54e;
loc_1b549: // 19e4:1709
    memoryASet16(ss, bp - 2, 0x0004);
loc_1b54e: // 19e4:170e
    if (memoryAGet16(ds, 0x9c6c) == 0x0003)
        goto loc_1b563;
    if (memoryAGet16(ds, 0x9c6c) == 0x0005)
        goto loc_1b563;
    if (memoryAGet16(ds, 0x9c6c) != 0x0007)
        goto loc_1b568;
loc_1b563: // 19e4:1723
    memoryASet16(ss, bp - 2, 0x0000);
loc_1b568: // 19e4:1728
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(ss);
    ax = bp - 0x18;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0128;
    push(ax);
    push(cs);
    cs = 0x060b;
    sub_6604(); // 060b:0554
    assert(cs == 0x19e4);
    sp += 0x0012;
    push(cs);
    cs = 0x1829;
    sub_1839a(); // 1829:010a
    assert(cs == 0x19e4);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b596() // 19e4:1756
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    if (memoryAGet16(ds, 0x9c6c) != 0x0001)
        goto loc_1b5bf;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1b5b3;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1b5ba;
loc_1b5b3: // 19e4:1773
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1b5bf;
loc_1b5ba: // 19e4:177a
    memoryASet16(ss, bp - 2, 0x0004);
loc_1b5bf: // 19e4:177f
    if (memoryAGet16(ds, 0x9c6c) == 0x0003)
        goto loc_1b5d4;
    if (memoryAGet16(ds, 0x9c6c) == 0x0005)
        goto loc_1b5d4;
    if (memoryAGet16(ds, 0x9c6c) != 0x0007)
        goto loc_1b5d9;
loc_1b5d4: // 19e4:1794
    memoryASet16(ss, bp - 2, 0x0000);
loc_1b5d9: // 19e4:1799
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0006;
    push(ax);
    ax = 0x002e;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0080;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp += 0x000e;
    if (memoryAGet(ds, 0x8a2c) != 0x00)
        goto loc_1b606;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1b60d;
loc_1b606: // 19e4:17c6
    memoryASet16(ss, bp - 4, 0x0002);
    goto loc_1b612;
loc_1b60d: // 19e4:17cd
    memoryASet16(ss, bp - 4, 0x0005);
loc_1b612: // 19e4:17d2
    if (memoryAGet16(ds, 0x9880) <= 0x002e)
        goto loc_1b61f;
    memoryASet16(ds, 0x9880, 0x002e);
loc_1b61f: // 19e4:17df
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0005;
    push(ax);
    push(memoryAGet16(ds, 0x9880));
    ax = 0;
    push(ax);
    ax = 0x0080;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp += 0x000e;
    memoryASet16(ss, bp - 4, 0x000f);
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0080;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp += 0x000e;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0081;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp += 0x000e;
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x00ae;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp += 0x000e;
    di = 0x0088;
    si = 0;
    goto loc_1b6c5;
loc_1b6a4: // 19e4:1864
    push(ds);
    ax = 0x8e20;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(di);
    push(cs);
    cs = 0x023f;
    sub_412a(); // 023f:1d3a
    assert(cs == 0x19e4);
    sp += 0x000e;
    di += 0x0007;
    si++;
loc_1b6c5: // 19e4:1885
    if (si < 0x0005)
        goto loc_1b6a4;
    push(cs);
    cs = 0x1829;
    sub_1839a(); // 1829:010a
    assert(cs == 0x19e4);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b6d5() // 19e4:1895
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    if (memoryAGet16(ss, bp + 8) == 0x0000)
        goto loc_1b6ff;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x19e4);
    sp = bp;
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x19e4);
    sp = bp;
loc_1b6ff: // 19e4:18bf
    si = 0;
    goto loc_1b70b;
loc_1b703: // 19e4:18c3
    memoryASet(ds, si + 37756, 0x00);
    si += 0x0005;
loc_1b70b: // 19e4:18cb
    if (si < 0x0190)
        goto loc_1b703;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b714() // 19e4:18d4
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x9874) != 0x0000)
        goto loc_1b75f;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1b75f;
    ax = memoryAGet16(ss, bp + 6);
    if (ax < memoryAGet16(ds, 0x989a))
        goto loc_1b74c;
    if (memoryAGet16(ds, 0x987e) != 0x0000)
        goto loc_1b75f;
    memoryASet16(ds, 0x989a, 0x0000);
    push(cs);
    sub_1b341(); // 19e4:1501
    sp = bp;
    ax = 0x0001;
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    goto loc_1b75f;
loc_1b74c: // 19e4:190c
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x989a, memoryAGet16(ds, 0x989a) - ax); // infinite energy
    push(cs);
    sub_1b341(); // 19e4:1501
    sp = bp;
    memoryASet16(ds, 0x9874, 0x0013);
loc_1b75f: // 19e4:191f
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b761() // 19e4:1921
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet16(ds, 0x9870) != 0x0001)
        goto loc_1b792;
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x9c60, ax);
    ax = memoryAGet16(ds, 0x97f2);
    memoryASet16(ds, 0x97de, ax);
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_1b783;
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_1b792;
loc_1b783: // 19e4:1943
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x9876, ax);
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xffe2;
    memoryASet16(ds, 0x9804, ax);
loc_1b792: // 19e4:1952
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_1b7a0;
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_1b7ff;
loc_1b7a0: // 19e4:1960
    memoryASet16(ds, 0x9804, memoryAGet16(ds, 0x9804) - 0x0008);
    if (memoryAGet16(ds, 0x989c) != 0x0000)
        goto loc_1b7c8;
    ax = 0;
    push(ax);
    ax = 0x0076;
    push(ax);
    push(memoryAGet16(ds, 0x9804));
    push(memoryAGet16(ds, 0x9876));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    goto loc_1b7ff;
loc_1b7c8: // 19e4:1988
    ax = 0;
    push(ax);
    ax = 0x0076;
    push(ax);
    push(memoryAGet16(ds, 0x9804));
    push(memoryAGet16(ds, 0x9876));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x007d;
    push(ax);
    push(memoryAGet16(ds, 0x9804));
    ax = memoryAGet16(ds, 0x9876);
    ax += 0x0015;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
loc_1b7ff: // 19e4:19bf
    if (memoryAGet16(ds, 0x9870) >= 0x0009)
        goto loc_1b833;
    bx = memoryAGet16(ds, 0x9870);
    bx--;
    bx <<= 1;
    si = memoryAGet16(ds, bx + 32780);
    ax = 0;
    push(ax);
    push(si);
    push(memoryAGet16(ds, 0x97f2));
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xfffb;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    memoryASet16(ds, 0x9870, memoryAGet16(ds, 0x9870) + 1);
    goto loc_1b932;
loc_1b833: // 19e4:19f3
    if (memoryAGet16(ds, 0x97fa) == 0x0000)
        goto loc_1b87d;
    si = memoryAGet16(ds, 0x97fa);
    si &= 0x0001;
    si += 0x0027;
    memoryASet16(ds, 0x97fa, memoryAGet16(ds, 0x97fa) + 1);
    memoryASet16(ds, 0x97de, memoryAGet16(ds, 0x97de) - 0x0004);
    ax = 0;
    push(ax);
    push(si);
    push(memoryAGet16(ds, 0x97de));
    push(memoryAGet16(ds, 0x9c60));
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x9890) == 0x0000)
        goto loc_1b873;
    memoryASet16(ds, 0x97de, 0xffff);
loc_1b873: // 19e4:1a33
    if ((short)memoryAGet16(ds, 0x97de) <= (short)0x0000)
        goto loc_1b87d;
    goto loc_1b932;
loc_1b87d: // 19e4:1a3d
    memoryASet16(ds, 0x97fa, 0x0000);
    ax = memoryAGet16(ds, 0x9c64);
    memoryASet16(ds, 0x988e, ax);
    ax = memoryAGet16(ds, 0x97fc);
    memoryASet16(ds, 0x97f2, ax);
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x0006)
        goto loc_1b89c;
    memoryASet16(ds, 0x988e, 0x0006);
loc_1b89c: // 19e4:1a5c
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x011d)
        goto loc_1b8aa;
    memoryASet16(ds, 0x988e, 0x011d);
loc_1b8aa: // 19e4:1a6a
    memoryASet16(ds, 0x9874, 0x0027);
    memoryASet16(ds, 0x989a, 0x000a);
    push(cs);
    sub_1b341(); // 19e4:1501
    memoryASet16(ds, 0x9800, 0x0000);
    memoryASet16(ds, 0x9892, 0x0000);
    memoryASet16(ds, 0x97ea, 0x0000);
    memoryASet16(ds, 0x9c62, 0x0000);
    memoryASet16(ds, 0x9868, 0x0000);
    memoryASet16(ds, 0x97f4, 0x0014);
    ax = 0;
    memoryASet16(ds, 0x97e2, ax);
    memoryASet16(ds, 0x97f8, ax);
    memoryASet16(ds, 0x9862, ax);
    memoryASet16(ds, 0x97fa, ax);
    memoryASet16(ds, 0x9870, ax);
    //memoryASet16(ds, 0x9c5e, memoryAGet16(ds, 0x9c5e) - 1); // infinite lives
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)ax)
        goto loc_1b8fd;
    push(cs);
    sub_1b3e8(); // 19e4:15a8
loc_1b8fd: // 19e4:1abd
    if (memoryAGet16(ds, 0x9c66) != 0x0000)
        goto loc_1b90a;
    memoryASet16(ds, 0x9c66, 0x0032);
loc_1b90a: // 19e4:1aca
    if (memoryAGet16(ds, 0x9c66) >= 0x000b)
        goto loc_1b916;
    memoryASet16(ds, 0x9c66, memoryAGet16(ds, 0x9c66) + 0x000a);
loc_1b916: // 19e4:1ad6
    push(cs);
    sub_1b4ad(); // 19e4:166d
    memoryASet16(ds, 0x985a, 0x0000);
    ax = memoryAGet16(ds, 0x9866);
    if (ax == memoryAGet16(ds, 0x9c68))
        goto loc_1b932;
    memoryASet16(ds, 0x9c68, ax);
    memoryASet16(ds, 0x9872, 0x0001);
loc_1b932: // 19e4:1af2
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1b934() // 19e4:1af4
{
    CStackGuardFar sg(0, false);
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1b990;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 0x0002);
    if (memoryAGet16(ds, 0x986a) == 0x0000)
        goto loc_1b953;
    if ((short)memoryAGet16(ds, 0x988e) <= (short)0x0004)
        goto loc_1b953;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) - 0x0005);
loc_1b953: // 19e4:1b13
    if (memoryAGet16(ds, 0x988c) == 0x0000)
        goto loc_1b95f;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0005);
loc_1b95f: // 19e4:1b1f
    if (memoryAGet16(ds, 0x9898) == 0x0000)
        goto loc_1b972;
    if ((short)memoryAGet16(ds, 0x97f2) <= (short)0x001e)
        goto loc_1b972;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0008);
loc_1b972: // 19e4:1b32
    if (memoryAGet16(ds, 0x9802) == 0x0000)
        goto loc_1b97e;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 0x0005);
loc_1b97e: // 19e4:1b3e
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x9c64, ax);
    memoryASet16(ds, 0x97fc, 0x0064);
    ax = memoryAGet16(ds, 0x9c68);
    memoryASet16(ds, 0x9866, ax);
loc_1b990: // 19e4:1b50
    cs = pop();
}
// Discard check failed in sub_1b991: cur=19e4:1ec1 last=19e4:1eb6> memoryAGet16(ds, 0x97f4) modifies memoryAGet16(ds, 0x97f4)
void sub_1b991() // 19e4:1b51
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    di = 0;
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)di)
        goto loc_1b9a3;
    goto loc_1bdac;
loc_1b9a3: // 19e4:1b63
    if (!(memoryAGet16(ds, 0x987e) & 0x0003))
        goto loc_1b9e3;
    ax = di;
    push(ax);
    ax = memoryAGet16(ds, 0x987e);
    ax &= 0x0003;
    ax += 0x002c;
    push(ax);
    push(memoryAGet16(ds, 0x97f2));
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0004;
    push(ax);
    ax = di;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x987e);
    ax &= 0x0003;
    if (ax != 0x0003)
        goto loc_1b9dc;
    goto loc_1bdac;
loc_1b9dc: // 19e4:1b9c
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) + 1);
    goto loc_1bdac;
loc_1b9e3: // 19e4:1ba3
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_1b9f1;
    push(cs);
    sub_1b761(); // 19e4:1921
    goto loc_1bdac;
loc_1b9f1: // 19e4:1bb1
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_1ba48;
    memoryASet16(ds, 0x9868, 0x0000);
    if (memoryAGet16(ds, 0x9898) == 0x0000)
        goto loc_1ba10;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0004);
    memoryASet16(ds, 0x9892, memoryAGet16(ds, 0x9892) ^ 0x0001);
loc_1ba10: // 19e4:1bd0
    if (memoryAGet16(ds, 0x9802) == 0x0000)
        goto loc_1ba22;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 0x0004);
    memoryASet16(ds, 0x9892, memoryAGet16(ds, 0x9892) ^ 0x0001);
loc_1ba22: // 19e4:1be2
    ax = memoryAGet16(ds, 0x9892);
    ax &= 0x0001;
    ax += 0x0010;
    memoryASet16(ss, bp - 2, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ds, 0x97f2));
    push(memoryAGet16(ds, 0x988e));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    goto loc_1bdac;
loc_1ba48: // 19e4:1c08
    if (memoryAGet16(ds, 0x97e8) == 0x0000)
        goto loc_1ba6f;
    ax = 0;
    push(ax);
    ax = 0x0075;
    push(ax);
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xffe2;
    push(ax);
    push(memoryAGet16(ds, 0x988e));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    goto loc_1bdac;
loc_1ba6f: // 19e4:1c2f
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_1bab0;
    ax = 0;
    push(ax);
    ax = 0x0075;
    push(ax);
    push(memoryAGet16(ds, 0x97f2));
    push(memoryAGet16(ds, 0x988e));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    ax = 0x007d;
    push(ax);
    push(memoryAGet16(ds, 0x97f2));
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0015;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    goto loc_1bdac;
loc_1bab0: // 19e4:1c70
    memoryASet16(ss, bp - 2, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x985e, ax);
    memoryASet16(ds, 0x986e, ax);
    si = ax;
    if (memoryAGet16(ds, 0x9868) == ax)
        goto loc_1bac8;
    goto loc_1bb45;
loc_1bac8: // 19e4:1c88
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001d;
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0008;
    push(ax);
    push(cs);
    sub_1b19e(); // 19e4:135e
    sp += 0x0004;
    if (!ax)
        goto loc_1bb45;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001d;
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0017;
    push(ax);
    push(cs);
    sub_1b19e(); // 19e4:135e
    sp += 0x0004;
    if (!ax)
        goto loc_1bb45;
    if (memoryAGet16(ds, 0x97e6) != 0x0000)
        goto loc_1bb45;
    di = 0x0001;
    memoryASet16(ss, bp - 2, 0x0004);
loc_1bb09: // 19e4:1cc9
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 1);
    si++;
    if (si >= 0x000a)
        goto loc_1bb45;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001d;
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0008;
    push(ax);
    push(cs);
    sub_1b19e(); // 19e4:135e
    sp += 0x0004;
    if (!ax)
        goto loc_1bb45;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001d;
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0017;
    push(ax);
    push(cs);
    sub_1b19e(); // 19e4:135e
    sp += 0x0004;
    if (ax)
        goto loc_1bb09;
loc_1bb45: // 19e4:1d05
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1bb70;
    if (di)
        goto loc_1bb70;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1bb70;
    if (memoryAGet16(ds, 0x97e6) != 0x0000)
        goto loc_1bb70;
    ax = memoryAGet16(ds, 0x988e);
    memoryASet16(ds, 0x9c64, ax);
    ax = memoryAGet16(ds, 0x97f2);
    memoryASet16(ds, 0x97fc, ax);
    ax = memoryAGet16(ds, 0x9c68);
    memoryASet16(ds, 0x9866, ax);
loc_1bb70: // 19e4:1d30
    if (memoryAGet16(ds, 0x986a) != 0x0000)
        goto loc_1bb7a;
    goto loc_1bbfc;
loc_1bb7a: // 19e4:1d3a
    if (memoryAGet16(ds, 0x9862) == 0x0000)
        goto loc_1bb84;
    goto loc_1bbfc;
loc_1bb84: // 19e4:1d44
    si = 0x0005;
    if (di)
        goto loc_1bbcf;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1bbcf;
    memoryASet16(ds, 0x9892, memoryAGet16(ds, 0x9892) + 1);
    if (memoryAGet16(ds, 0x9892) <= si)
        goto loc_1bba2;
    memoryASet16(ds, 0x9892, 0x0000);
loc_1bba2: // 19e4:1d62
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32796);
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    si = memoryAGet16(ds, bx + 32808);
    if (memoryAGet16(ds, 0x9800) != 0x0001)
        goto loc_1bbcf;
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32820);
    ax = -ax;
    memoryASet16(ds, 0x986e, ax);
loc_1bbcf: // 19e4:1d8f
    if (memoryAGet16(ds, 0x9800) == 0x0001)
        goto loc_1bbe6;
    if (di)
        goto loc_1bbe6;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1bbe6;
    memoryASet16(ss, bp - 2, 0x0087);
loc_1bbe6: // 19e4:1da6
    memoryASet16(ds, 0x9800, 0x0001);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) - si);
    if (memoryAGet16(ds, 0x9868) == 0x0000)
        goto loc_1bbfc;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) - 0x0002);
loc_1bbfc: // 19e4:1dbc
    if (memoryAGet16(ds, 0x988c) != 0x0000)
        goto loc_1bc06;
    goto loc_1bc86;
loc_1bc06: // 19e4:1dc6
    if (memoryAGet16(ds, 0x9862) == 0x0000)
        goto loc_1bc10;
    goto loc_1bc86;
loc_1bc10: // 19e4:1dd0
    si = 0x0005;
    if (di)
        goto loc_1bc59;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1bc59;
    memoryASet16(ds, 0x9892, memoryAGet16(ds, 0x9892) + 1);
    if (memoryAGet16(ds, 0x9892) <= si)
        goto loc_1bc2e;
    memoryASet16(ds, 0x9892, 0x0000);
loc_1bc2e: // 19e4:1dee
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32796);
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    si = memoryAGet16(ds, bx + 32808);
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_1bc59;
    bx = memoryAGet16(ds, 0x9892);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32820);
    memoryASet16(ds, 0x986e, ax);
loc_1bc59: // 19e4:1e19
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_1bc70;
    if (di)
        goto loc_1bc70;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1bc70;
    memoryASet16(ss, bp - 2, 0x0087);
loc_1bc70: // 19e4:1e30
    memoryASet16(ds, 0x9800, 0x0000);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + si);
    if (memoryAGet16(ds, 0x9868) == 0x0000)
        goto loc_1bc86;
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0002);
loc_1bc86: // 19e4:1e46
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1bc90;
    goto loc_1bd18;
loc_1bc90: // 19e4:1e50
    si = 0;
loc_1bc92: // 19e4:1e52
    memoryASet16(ds, 0x9868, memoryAGet16(ds, 0x9868) + 1);
    si++;
    if (memoryAGet16(ds, 0x9868) != 0x0002)
        goto loc_1bcae;
    ax = memoryAGet16(ds, 0x97f4);
    ax &= 0x007f;
    if (ax <= 0x0014)
        goto loc_1bcae;
    push(cs);
    cs = 0x1dc4;
    sub_1dcd2(); // 1dc4:0092
    assert(cs == 0x19e4);
loc_1bcae: // 19e4:1e6e
    ax = memoryAGet16(ds, 0x97f4);
    ax &= 0x007f;
    ax += 0xfff8;
    if (ax >= memoryAGet16(ds, 0x9868))
        goto loc_1bccd;
    ax = memoryAGet16(ds, 0x97f4);
    ax &= 0x007f;
    if (ax <= memoryAGet16(ds, 0x9868))
        goto loc_1bccd;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 1);
loc_1bccd: // 19e4:1e8d
    ax = memoryAGet16(ds, 0x97f4);
    ax &= 0x007f;
    ax += 0xfffa;
    if (ax <= memoryAGet16(ds, 0x9868))
        goto loc_1bce1;
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0002);
loc_1bce1: // 19e4:1ea1
    ax = memoryAGet16(ds, 0x97f4);
    ax &= 0x007f;
    if (ax >= memoryAGet16(ds, 0x9868))
        goto loc_1bd04;
    memoryASet16(ds, 0x9868, 0x0000);
    di = 0x0001;
    if (!(memoryAGet16(ds, 0x97f4) & 0x0080))
        goto loc_1bd04;
    ax = memoryAGet16(ds, 0x9c70);
    memoryASet16(ds, 0x97f4, ax);
loc_1bd04: // 19e4:1ec4
    if (memoryAGet16(ds, 0x9868) == 0x0000)
        goto loc_1bd13;
    if (si >= 0x0004)
        goto loc_1bd13;
    goto loc_1bc92;
loc_1bd13: // 19e4:1ed3
    memoryASet16(ss, bp - 2, 0x0004);
loc_1bd18: // 19e4:1ed8
    if (di)
        goto loc_1bd30;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1bd30;
    if (memoryAGet16(ds, 0x9898) == 0x0000)
        goto loc_1bd30;
    memoryASet16(ds, 0x9868, 0x0001);
loc_1bd30: // 19e4:1ef0
    if (memoryAGet16(ds, 0x9862) == 0x0000)
        goto loc_1bd89;
    si = 0x0002;
    si -= memoryAGet16(ds, 0x9862);
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1bd49;
    if (!di)
        goto loc_1bd4c;
loc_1bd49: // 19e4:1f09
    si += 0x0002;
loc_1bd4c: // 19e4:1f0c
    si <<= 1;
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32832);
    memoryASet16(ss, bp - 2, ax);
    bx = si;
    bx++;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32832);
    memoryASet16(ds, 0x985e, ax);
    if (memoryAGet16(ds, 0x986a) == 0x0000)
        goto loc_1bd77;
    memoryASet16(ds, 0x9800, 0x0001);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) - 0x0005);
loc_1bd77: // 19e4:1f37
    if (memoryAGet16(ds, 0x988c) == 0x0000)
        goto loc_1bd89;
    memoryASet16(ds, 0x9800, 0x0000);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0005);
loc_1bd89: // 19e4:1f49
    push(memoryAGet16(ds, 0x9800));
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ds, 0x97f2);
    ax += memoryAGet16(ds, 0x985e);
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += memoryAGet16(ds, 0x986e);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
loc_1bdac: // 19e4:1f6c
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1bdb2() // 19e4:1f72
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0036;
    push(ss);
    ax = bp - 0x30;
    push(ax);
    push(ds);
    ax = 0x8050;
    push(ax);
    cx = 0x0018;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x19e4);
    push(ss);
    ax = bp - 0x18;
    push(ax);
    push(ds);
    ax = 0x8068;
    push(ax);
    cx = 0x0018;
    push(cs);
    cs = 0x01ed;
    sub_21c4(); // 01ed:02f4
    assert(cs == 0x19e4);
    push(cs);
    cs = 0x19e4;
    sub_1bebe(); // 19e4:207e
    assert(cs == 0x19e4);
    if ((short)memoryAGet16(ds, 0x9c5e) >= (short)0x0000)
        goto loc_1bded;
    goto loc_1beb8;
loc_1bded: // 19e4:1fad
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1bdfb;
    if (memoryAGet16(ds, 0x987e) == 0x0000)
        goto loc_1be04;
loc_1bdfb: // 19e4:1fbb
    memoryASet16(ds, 0x9862, 0x0000);
    goto loc_1beb8;
loc_1be04: // 19e4:1fc4
    if (memoryAGet16(ds, 0x9862) != 0x0000)
        goto loc_1be0e;
    goto loc_1beb8;
loc_1be0e: // 19e4:1fce
    ax = memoryAGet16(ds, 0x9800);
    memoryASet16(ss, bp - 50, ax);
    si = 0x0002;
    si -= memoryAGet16(ds, 0x9862);
    ax = si;
    dx = 0x0003;
    mul(dx);
    si = ax;
    if (memoryAGet16(ds, 0x97f8) == 0x0000)
        goto loc_1be5b;
    bx = si;
    bx <<= 1;
    ax = bp - 0x18;
    bx += ax;
    di = memoryAGet16(ss, bx);
    bx = si;
    bx++;
    bx <<= 1;
    ax = bp - 0x18;
    bx += ax;
    ax = memoryAGet16(ss, bx);
    memoryASet16(ss, bp - 52, ax);
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    ax = bp - 0x18;
    bx += ax;
    ax = memoryAGet16(ss, bx);
    memoryASet16(ss, bp - 54, ax);
    goto loc_1be89;
loc_1be5b: // 19e4:201b
    bx = si;
    bx <<= 1;
    ax = bp - 0x30;
    bx += ax;
    di = memoryAGet16(ss, bx);
    bx = si;
    bx++;
    bx <<= 1;
    ax = bp - 0x30;
    bx += ax;
    ax = memoryAGet16(ss, bx);
    memoryASet16(ss, bp - 52, ax);
    bx = si;
    bx += 0x0002;
    bx <<= 1;
    ax = bp - 0x30;
    bx += ax;
    ax = memoryAGet16(ss, bx);
    memoryASet16(ss, bp - 54, ax);
loc_1be89: // 19e4:2049
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_1be96;
    ax = di;
    ax = -ax;
    di = ax;
loc_1be96: // 19e4:2056
    push(memoryAGet16(ss, bp - 50));
    push(memoryAGet16(ss, bp - 54));
    ax = memoryAGet16(ds, 0x97f2);
    ax += memoryAGet16(ss, bp - 52);
    push(ax);
    ax = memoryAGet16(ds, 0x988e);
    ax += di;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x19e4);
    sp += 0x000a;
    memoryASet16(ds, 0x9862, memoryAGet16(ds, 0x9862) - 1);
loc_1beb8: // 19e4:2078
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1bebe() // 19e4:207e
{
    CStackGuardFar sg(0, false);
    push(cs);
    cs = 0x0a34;
    sub_a78f(); // 0a34:044f
    assert(cs == 0x19e4);
    ah = 0x00;
    memoryASet16(ds, 0x9890, ax);
    if (!ax)
        goto loc_1bf0c;
    if (memoryAGet16(ds, 0x97ec) == 0x0000)
        goto loc_1bedb;
    memoryASet16(ds, 0x9890, 0x0000);
    goto loc_1bf12;
loc_1bedb: // 19e4:209b
    if (memoryAGet16(ds, 0x9862) != 0x0000)
        goto loc_1bf12;
    if (memoryAGet16(ds, 0x9870) != 0x0000)
        goto loc_1bf12;
    if (memoryAGet16(ds, 0x97e2) != 0x0000)
        goto loc_1bf12;
    if (memoryAGet16(ds, 0x97e8) != 0x0000)
        goto loc_1bf12;
    if (memoryAGet16(ds, 0x989c) != 0x0000)
        goto loc_1bf12;
    memoryASet16(ds, 0x97ec, 0x0001);
    memoryASet16(ds, 0x9862, 0x0002);
    goto loc_1bf12;
loc_1bf0c: // 19e4:20cc
    memoryASet16(ds, 0x97ec, 0x0000);
loc_1bf12: // 19e4:20d2
    cs = pop();
}
void sub_1bf13() // 1bf1:0003
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    memoryASet16(ds, 0x9860, 0x0001);
    bx = memoryAGet16(ds, 0x9856);
    es = memoryAGet16(ds, 0x9856 + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    ax = bx;
    ax |= memoryAGet16(ss, bp - 10);
    if (ax)
        goto loc_1bf35;
    goto loc_1dc40;
loc_1bf35: // 1bf1:0025
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx) != 0x0000)
        goto loc_1bf41;
    goto loc_1dc40;
loc_1bf41: // 1bf1:0031
    ax = memoryAGet16(es, bx);
    ax--;
    if (ax > 0x0026)
        goto loc_1bf35;
    bx = ax;
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_1bff1;
        case 2: goto loc_1bfa1;
        case 4: goto loc_1c26d;
        case 6: goto loc_1c35f;
        case 8: goto loc_1c0ba;
        case 10: goto loc_1c454;
        case 12: goto loc_1c57f;
        case 14: goto loc_1c61f;
        case 16: goto loc_1c66c;
        case 18: goto loc_1c73e;
        case 20: goto loc_1c75c;
        case 22: goto loc_1c77b;
        case 24: goto loc_1c799;
        case 26: goto loc_1c7b7;
        case 28: goto loc_1c988;
        case 30: goto loc_1cafa;
        case 32: goto loc_1cbb7;
        case 34: goto loc_1cbd5;
        case 36: goto loc_1cc38;
        case 38: goto loc_1cf58;
        case 40: goto loc_1cca7;
        case 42: goto loc_1ccdd;
        case 44: goto loc_1cdea;
        case 46: goto loc_1cff3;
        case 48: goto loc_1d0b7;
        case 50: goto loc_1d1a1;
        case 52: goto loc_1d204;
        case 54: goto loc_1d2e3;
        case 56: goto loc_1d3b9;
        case 58: goto loc_1d4e1;
        case 60: goto loc_1d646;
        case 62: goto loc_1d74e;
        case 64: goto loc_1d920;
        case 66: goto loc_1d93e;
        case 68: goto loc_1d95c;
        case 70: goto loc_1da4b;
        case 72: goto loc_1db3d;
        case 74: goto loc_1dbb5;
        case 76: goto loc_1dc1e;
        default:
        assert(0);
    }
    //   gap of 78 bytes
loc_1bfa1: // 1bf1:0091
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 2);
    ax += 0xffeb;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1bfb4;
    goto loc_1dbae;
loc_1bfb4: // 1bf1:00a4
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0005;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1bfc4;
    goto loc_1dbae;
loc_1bfc4: // 1bf1:00b4
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001b;
    if ((short)ax > (short)memoryAGet16(es, bx + 4))
        goto loc_1bfd3;
    goto loc_1dbae;
loc_1bfd3: // 1bf1:00c3
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfff0;
    if ((short)ax > (short)memoryAGet16(ds, 0x97f2))
        goto loc_1bfe3;
    goto loc_1dbae;
loc_1bfe3: // 1bf1:00d3
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
    goto loc_1dbae;
loc_1bff1: // 1bf1:00e1
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xfff8;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)ax < (short)memoryAGet16(es, bx + 2))
        goto loc_1c003;
    goto loc_1d4da;
loc_1c003: // 1bf1:00f3
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0008;
    if ((short)ax > (short)memoryAGet16(es, bx + 2))
        goto loc_1c012;
    goto loc_1d4da;
loc_1c012: // 1bf1:0102
    if (memoryAGet16(ds, 0x9898) == 0x0000)
        goto loc_1c062;
    ax = memoryAGet16(ds, 0x97f2);
    ax -= memoryAGet16(es, bx + 6);
    if ((short)ax >= (short)0x0003)
        goto loc_1c03a;
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_1c03a;
    memoryASet16(ds, 0x97e2, 0x0000);
    ax = memoryAGet16(es, bx + 6);
    ax--;
    memoryASet16(ds, 0x97f2, ax);
loc_1c03a: // 1bf1:012a
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 4);
    if (ax != memoryAGet16(ds, 0x97f2))
        goto loc_1c062;
    memoryASet16(ds, 0x9892, 0x0000);
    memoryASet16(ds, 0x97e2, 0x0001);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0004;
    memoryASet16(ds, 0x988e, ax);
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0004);
loc_1c062: // 1bf1:0152
    if (memoryAGet16(ds, 0x9802) != 0x0000)
        goto loc_1c06c;
    goto loc_1d4da;
loc_1c06c: // 1bf1:015c
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    if (ax != memoryAGet16(ds, 0x97f2))
        goto loc_1c094;
    memoryASet16(ds, 0x9892, 0x0000);
    memoryASet16(ds, 0x97e2, 0x0001);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0004;
    memoryASet16(ds, 0x988e, ax);
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 0x0004);
loc_1c094: // 1bf1:0184
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 4);
    ax -= memoryAGet16(ds, 0x97f2);
    if ((short)ax < (short)0x0003)
        goto loc_1c0a7;
    goto loc_1d4da;
loc_1c0a7: // 1bf1:0197
    if (memoryAGet16(ds, 0x97e2) != 0x0000)
        goto loc_1c0b1;
    goto loc_1d4da;
loc_1c0b1: // 1bf1:01a1
    memoryASet16(ds, 0x97e2, 0x0000);
    goto loc_1d4da;
loc_1c0ba: // 1bf1:01aa
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (!(memoryAGet16(es, bx + 10) & 0x0080))
        goto loc_1c112;
    ax = 0;
    push(ax);
    bx = memoryAGet16(es, bx + 10);
    bx += 0xff80;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 32904));
    push(memoryAGet16(ds, 0x9c76));
    push(memoryAGet16(ds, 0x988e));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    memoryASet16(ds, 0x9c74, memoryAGet16(ds, 0x9c74) + 0x0004);
    ax = memoryAGet16(ds, 0x9c74);
    memoryASet16(ds, 0x9c76, memoryAGet16(ds, 0x9c76) + ax);
    if (ax != 0x0014)
        goto loc_1c112;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 10);
    ax += 0xff80;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b042(); // 19e4:1202
    assert(cs == 0x1bf1);
    sp++;
    sp++;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 10, 0x0000);
loc_1c112: // 1bf1:0202
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 8) < (short)0x0046)
        goto loc_1c11f;
    goto loc_1d747;
loc_1c11f: // 1bf1:020f
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) + 1);
    if ((short)memoryAGet16(es, bx + 8) <= (short)0x000f)
        goto loc_1c15c;
    if ((short)memoryAGet16(es, bx + 8) >= (short)0x0015)
        goto loc_1c15c;
    ax = 0;
    push(ax);
    ax = memoryAGet16(es, bx + 8);
    ax += 0xfff0;
    ax = sar(ax, 1);
    ax += 0x0056;
    push(ax);
    ax = memoryAGet16(es, bx + 4);
    ax += 0x000b;
    push(ax);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
loc_1c15c: // 1bf1:024c
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 8) > (short)0x0014)
        goto loc_1c169;
    goto loc_1d747;
loc_1c169: // 1bf1:0259
    if (memoryAGet16(es, bx + 8) != 0x0015)
        goto loc_1c182;
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1bf1);
    bx = 0x0006;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 10, dx);
loc_1c182: // 1bf1:0272
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 8) < (short)0x0041)
        goto loc_1c18f;
    goto loc_1c23a;
loc_1c18f: // 1bf1:027f
    ax = memoryAGet16(es, bx + 8);
    ax &= 0x0003;
    memoryASet16(ss, bp - 6, ax);
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 4);
    if (ax)
        goto loc_1c1a6;
    si++;
loc_1c1a6: // 1bf1:0296
    if (memoryAGet16(ss, bp - 6) != 0x0001)
        goto loc_1c1ad;
    di++;
loc_1c1ad: // 1bf1:029d
    if (memoryAGet16(ss, bp - 6) != 0x0002)
        goto loc_1c1b4;
    si--;
loc_1c1b4: // 1bf1:02a4
    if (memoryAGet16(ss, bp - 6) != 0x0003)
        goto loc_1c1bb;
    di--;
loc_1c1bb: // 1bf1:02ab
    ax = 0;
    push(ax);
    ax = 0x0059;
    push(ax);
    push(di);
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = si;
    ax += 0x0023;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1c1dd;
    goto loc_1d747;
loc_1c1dd: // 1bf1:02cd
    ax = si;
    ax += 0xffd8;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1c1eb;
    goto loc_1d747;
loc_1c1eb: // 1bf1:02db
    ax = di;
    ax += 0xffe3;
    if ((short)ax < (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c1f9;
    goto loc_1d747;
loc_1c1f9: // 1bf1:02e9
    ax = di;
    ax += 0x0014;
    if ((short)ax > (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c207;
    goto loc_1d747;
loc_1c207: // 1bf1:02f7
    if (memoryAGet16(ds, 0x9862) == 0x0001)
        goto loc_1c211;
    goto loc_1d747;
loc_1c211: // 1bf1:0301
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) | 0x0080);
    memoryASet16(ds, 0x9c74, 0xffec);
    memoryASet16(ds, 0x9c72, si);
    ax = di;
    ax += 0x000a;
    memoryASet16(ds, 0x9c76, ax);
    memoryASet16(es, bx + 8, 0x0041);
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x1bf1);
    goto loc_1d747;
loc_1c23a: // 1bf1:032a
    ax = 0;
    push(ax);
    ax = 0x0058;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    dx = memoryAGet16(es, bx + 8);
    dx += 0xffbf;
    dx = sar(dx, 1);
    ax -= dx;
    push(ax);
    ax = memoryAGet16(es, bx + 4);
    ax += 0x000b;
    push(ax);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1d747;
loc_1c26d: // 1bf1:035d
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) != 0x0000)
        goto loc_1c27a;
    goto loc_1d4da;
loc_1c27a: // 1bf1:036a
    ax = 0;
    push(ax);
    ax = 0x0080;
    ax -= memoryAGet16(es, bx + 6);
    push(ax);
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x9c6c) == 0x0005)
        goto loc_1c2a6;
    if (memoryAGet16(ds, 0x9c6c) != 0x0007)
        goto loc_1c2ab;
loc_1c2a6: // 1bf1:0396
    di = 0x000d;
    goto loc_1c2ae;
loc_1c2ab: // 1bf1:039b
    di = 0x0009;
loc_1c2ae: // 1bf1:039e
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 4);
    ax -= di;
    if (ax == memoryAGet16(ds, 0x97f2))
        goto loc_1c2c0;
    goto loc_1d4da;
loc_1c2c0: // 1bf1:03b0
    if (memoryAGet16(ds, 0x9862) == 0x0001)
        goto loc_1c2ca;
    goto loc_1d4da;
loc_1c2ca: // 1bf1:03ba
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_1c2e8;
    ax = memoryAGet16(es, bx + 2);
    ax += 0x001e;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1c2e8;
    ax = memoryAGet16(es, bx + 2);
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1c312;
loc_1c2e8: // 1bf1:03d8
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_1c2f2;
    goto loc_1d4da;
loc_1c2f2: // 1bf1:03e2
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 2);
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1c302;
    goto loc_1d4da;
loc_1c302: // 1bf1:03f2
    ax = memoryAGet16(es, bx + 2);
    ax += 0xffdd;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1c312;
    goto loc_1d4da;
loc_1c312: // 1bf1:0402
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
    if (memoryAGet16(es, bx + 6) == 0x0000)
        goto loc_1c32b;
    if (memoryAGet16(ds, 0x97f8) == 0x0000)
        goto loc_1c32b;
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
loc_1c32b: // 1bf1:041b
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) == 0x0000)
        goto loc_1c338;
    goto loc_1d4da;
loc_1c338: // 1bf1:0428
    memoryASet16(ds, 0x9880, memoryAGet16(ds, 0x9880) + 1);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x1bf1);
    ax = 0x0032;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfffc;
    push(ax);
    push(memoryAGet16(es, bx + 2));
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
    goto loc_1d4da;
loc_1c35f: // 1bf1:044f
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) != 0x0000)
        goto loc_1c36c;
    goto loc_1d4da;
loc_1c36c: // 1bf1:045c
    ax = 0;
    push(ax);
    ax = 0x0093;
    ax -= memoryAGet16(es, bx + 6);
    push(ax);
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfffe;
    if (ax != memoryAGet16(ds, 0x97f2))
        goto loc_1c3fd;
    if (memoryAGet16(ds, 0x9862) != 0x0001)
        goto loc_1c3fd;
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_1c3be;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0028;
    if ((short)ax <= (short)memoryAGet16(es, bx + 2))
        goto loc_1c3be;
    ax = memoryAGet16(es, bx + 2);
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1c3df;
loc_1c3be: // 1bf1:04ae
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_1c3fd;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0023;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1c3fd;
    ax = memoryAGet16(es, bx + 2);
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1c3fd;
loc_1c3df: // 1bf1:04cf
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
    if (memoryAGet16(ds, 0x97f8) == 0x0000)
        goto loc_1c3f8;
    if (memoryAGet16(es, bx + 6) == 0x0000)
        goto loc_1c3f8;
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
loc_1c3f8: // 1bf1:04e8
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x1bf1);
loc_1c3fd: // 1bf1:04ed
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) != 0x0000)
        goto loc_1c40a;
    goto loc_1d4da;
loc_1c40a: // 1bf1:04fa
    ax = memoryAGet16(es, bx + 4);
    if ((short)ax > (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c417;
    goto loc_1d4da;
loc_1c417: // 1bf1:0507
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0019;
    if ((short)ax > (short)memoryAGet16(es, bx + 2))
        goto loc_1c426;
    goto loc_1d4da;
loc_1c426: // 1bf1:0516
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0019;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1c436;
    goto loc_1d4da;
loc_1c436: // 1bf1:0526
    ax = memoryAGet16(es, bx + 4);
    ax += 0xffdd;
    if ((short)ax < (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c446;
    goto loc_1d4da;
loc_1c446: // 1bf1:0536
    ax = 0x000a;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
    goto loc_1d4da;
loc_1c454: // 1bf1:0544
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) != 0x0000)
        goto loc_1c461;
    goto loc_1d0b0;
loc_1c461: // 1bf1:0551
    if (memoryAGet16(es, bx + 8) == 0x0001)
        goto loc_1c46b;
    goto loc_1c504;
loc_1c46b: // 1bf1:055b
    ax = 0;
    push(ax);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x003d;
    push(ax);
    push(memoryAGet16(es, bx + 4));
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0014;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    dx = memoryAGet16(es, bx + 2);
    dx += 0x0028;
    if ((short)ax > (short)dx)
        goto loc_1c4a4;
    goto loc_1d0b0;
loc_1c4a4: // 1bf1:0594
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xffec;
    dx = memoryAGet16(es, bx + 2);
    dx += 0x0028;
    if ((short)ax < (short)dx)
        goto loc_1c4b8;
    goto loc_1d0b0;
loc_1c4b8: // 1bf1:05a8
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x0019;
    if ((short)ax > (short)memoryAGet16(es, bx + 4))
        goto loc_1c4c7;
    goto loc_1d0b0;
loc_1c4c7: // 1bf1:05b7
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff6;
    if ((short)ax < (short)memoryAGet16(es, bx + 4))
        goto loc_1c4d6;
    goto loc_1d0b0;
loc_1c4d6: // 1bf1:05c6
    memoryASet16(es, bx + 8, 0x0000);
    ax = 0x0064;
    push(ax);
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfffc;
    push(ax);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0028;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
loc_1c4f8: // 1bf1:05e8
    memoryASet16(ds, 0x9880, memoryAGet16(ds, 0x9880) + 1);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x1bf1);
    goto loc_1d0b0;
loc_1c504: // 1bf1:05f4
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)ax > (short)memoryAGet16(es, bx + 2))
        goto loc_1c516;
    goto loc_1d0b0;
loc_1c516: // 1bf1:0606
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xfff6;
    if ((short)ax < (short)memoryAGet16(es, bx + 2))
        goto loc_1c525;
    goto loc_1d0b0;
loc_1c525: // 1bf1:0615
    if (memoryAGet16(ds, 0x9862) == 0x0001)
        goto loc_1c52f;
    goto loc_1d0b0;
loc_1c52f: // 1bf1:061f
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x000f;
    if ((short)ax > (short)memoryAGet16(es, bx + 4))
        goto loc_1c53e;
    goto loc_1d0b0;
loc_1c53e: // 1bf1:062e
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff6;
    if ((short)ax < (short)memoryAGet16(es, bx + 4))
        goto loc_1c54d;
    goto loc_1d0b0;
loc_1c54d: // 1bf1:063d
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) - 1);
    ax = 0;
    push(ax);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x003d;
    push(ax);
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfffa;
    push(ax);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x1bf1);
    goto loc_1d0b0;
loc_1c57f: // 1bf1:066f
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) == 0x0001)
        goto loc_1c58c;
    goto loc_1d0b0;
loc_1c58c: // 1bf1:067c
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 4);
    ax = memoryAGet16(es, bx + 6);
    ax += memoryAGet16(ds, 0x988a);
    ax += 0x003d;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    di -= ax;
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x003e;
    push(ax);
    push(di);
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0014;
    if ((short)ax > (short)si)
        goto loc_1c5d8;
    goto loc_1d0b0;
loc_1c5d8: // 1bf1:06c8
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xffec;
    if ((short)ax < (short)si)
        goto loc_1c5e5;
    goto loc_1d0b0;
loc_1c5e5: // 1bf1:06d5
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x0019;
    if ((short)ax > (short)di)
        goto loc_1c5f2;
    goto loc_1d0b0;
loc_1c5f2: // 1bf1:06e2
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff6;
    if ((short)ax < (short)di)
        goto loc_1c5ff;
    goto loc_1d0b0;
loc_1c5ff: // 1bf1:06ef
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 8, 0x0000);
    bx = memoryAGet16(es, bx + 6);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 32916));
    push(di);
    push(si);
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
    goto loc_1c4f8;
loc_1c61f: // 1bf1:070f
    if (memoryAGet16(ds, 0x97e8) == 0x0000)
        goto loc_1c629;
    goto loc_1db36;
loc_1c629: // 1bf1:0719
    if (memoryAGet16(ds, 0x989c) == 0x0000)
        goto loc_1c633;
    goto loc_1db36;
loc_1c633: // 1bf1:0723
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 12));
    push(memoryAGet16(es, bx + 10));
    push(memoryAGet16(es, bx + 8));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1db36;
loc_1c66c: // 1bf1:075c
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) != 0x0000)
        goto loc_1c6ae;
    ax = 0;
    push(ax);
    ax = 0x0054;
    push(ax);
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) - ax);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
    if (memoryAGet16(es, bx + 6) != 0x0000)
        goto loc_1c6ed;
    memoryASet16(es, bx + 8, 0x0001);
    goto loc_1c6ed;
loc_1c6ae: // 1bf1:079e
    ax = 0;
    push(ax);
    ax = 0x0055;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) + ax);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) + 1);
    if (memoryAGet16(es, bx + 6) != 0x0014)
        goto loc_1c6ed;
    memoryASet16(es, bx + 8, 0x0000);
    memoryASet16(es, bx + 4, 0x00dc);
loc_1c6ed: // 1bf1:07dd
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 2);
    ax += 0xffe9;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1c700;
    goto loc_1d0b0;
loc_1c700: // 1bf1:07f0
    ax = memoryAGet16(es, bx + 2);
    ax += 0x000f;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1c710;
    goto loc_1d0b0;
loc_1c710: // 1bf1:0800
    ax = memoryAGet16(es, bx + 4);
    ax += 0xffe7;
    if ((short)ax < (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c720;
    goto loc_1d0b0;
loc_1c720: // 1bf1:0810
    ax = memoryAGet16(es, bx + 4);
    ax += 0x0019;
    if ((short)ax > (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c730;
    goto loc_1d0b0;
loc_1c730: // 1bf1:0820
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
    goto loc_1d0b0;
loc_1c73e: // 1bf1:082e
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x2890;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1c75c: // 1bf1:084c
    ax = 0x0001;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x28c0;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1c77b: // 1bf1:086b
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x28f0;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1c799: // 1bf1:0889
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x2920;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1c7b7: // 1bf1:08a7
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 2) < (short)0x0004)
        goto loc_1c7c4;
    goto loc_1c8f5;
loc_1c7c4: // 1bf1:08b4
    if (memoryAGet16(es, bx + 2) != 0x0000)
        goto loc_1c805;
    ax = 0;
    push(ax);
    ax = 0x005e;
    push(ax);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) == 0x0000)
        goto loc_1c7f2;
    goto loc_1c896;
loc_1c7f2: // 1bf1:08e2
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_1c7fc;
    goto loc_1c896;
loc_1c7fc: // 1bf1:08ec
    memoryASet16(es, bx + 2, 0x0001);
    goto loc_1c896;
loc_1c805: // 1bf1:08f5
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 2) >= (short)0x0003)
        goto loc_1c863;
    ax = 0;
    push(ax);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x005c;
    push(ax);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) + 1);
    if (memoryAGet16(es, bx + 2) == 0x0003)
        goto loc_1c83e;
    goto loc_1c896;
loc_1c83e: // 1bf1:092e
    memoryASet16(es, bx + 8, 0x0001);
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfff4;
    memoryASet16(es, bx + 10, ax);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x0012;
    memoryASet16(es, bx + 12, ax);
    memoryASet16(es, bx + 2, 0x0000);
    goto loc_1c896;
loc_1c863: // 1bf1:0953
    ax = 0;
    push(ax);
    ax = 0x005f;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) + 0x000a);
    if ((short)memoryAGet16(es, bx + 4) <= (short)0x0140)
        goto loc_1c896;
    memoryASet16(es, bx + 2, 0x0004);
loc_1c896: // 1bf1:0986
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 2) >= (short)0x0003)
        goto loc_1c8f5;
    if (memoryAGet16(ds, 0x9862) != 0x0001)
        goto loc_1c8f5;
    ax = memoryAGet16(es, bx + 4);
    ax += 0x001e;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1c8f5;
    ax = memoryAGet16(es, bx + 4);
    ax += 0xffdc;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1c8f5;
    ax = memoryAGet16(es, bx + 6);
    ax += 0xffe2;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c8f5;
    ax = memoryAGet16(es, bx + 6);
    ax += 0x001e;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c8f5;
    memoryASet16(es, bx + 2, 0x0003);
    ax = 0x0064;
    push(ax);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
loc_1c8f5: // 1bf1:09e5
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) != 0x0000)
        goto loc_1c902;
    goto loc_1db36;
loc_1c902: // 1bf1:09f2
    ax = 0;
    push(ax);
    ax = 0x0060;
    push(ax);
    push(memoryAGet16(es, bx + 12));
    push(memoryAGet16(es, bx + 10));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(ds, 0x988e);
    dx += 0x0014;
    if ((short)ax >= (short)dx)
        goto loc_1c96a;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(ds, 0x988e);
    dx += 0xfff6;
    if ((short)ax <= (short)dx)
        goto loc_1c96a;
    ax = memoryAGet16(es, bx + 12);
    ax += 0x000c;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1c96a;
    ax = memoryAGet16(es, bx + 12);
    dx = memoryAGet16(ds, 0x97f2);
    dx += 0x0017;
    if ((short)ax >= (short)dx)
        goto loc_1c96a;
    memoryASet16(es, bx + 8, 0x0000);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1c96a: // 1bf1:0a5a
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) - 0x000c);
    if ((short)memoryAGet16(es, bx + 10) < (short)0xffba)
        goto loc_1c97c;
    goto loc_1db36;
loc_1c97c: // 1bf1:0a6c
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 8, 0x0000);
    goto loc_1db36;
loc_1c988: // 1bf1:0a78
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 2) != 0x0000)
        goto loc_1c9b0;
    if ((short)memoryAGet16(ds, 0x988e) >= (short)0x00dc)
        goto loc_1c9b0;
    memoryASet16(es, bx + 2, 0x0001);
    memoryASet16(es, bx + 4, 0x0163);
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) + 1);
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) & 0x0003);
loc_1c9b0: // 1bf1:0aa0
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 8);
    ax += 0x0005;
    ax <<= 1;
    bx += ax;
    di = memoryAGet16(es, bx);
    bx = memoryAGet16(ss, bp - 12);
    if (memoryAGet16(es, bx + 2) == 0x0001)
        goto loc_1c9ce;
    goto loc_1cab0;
loc_1c9ce: // 1bf1:0abe
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1c9dd;
    bx = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) - 0x0008);
loc_1c9dd: // 1bf1:0acd
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 4);
    ax = 0;
    push(ax);
    bx = memoryAGet16(es, bx + 6);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32936);
    ax += 0x0029;
    push(ax);
    push(di);
    bx = memoryAGet16(ss, bp - 12);
    push(memoryAGet16(es, bx + 4));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1ca16;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) + 1);
loc_1ca16: // 1bf1:0b06
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) & 0x0007);
    if ((short)memoryAGet16(es, bx + 4) >= (short)0xffce)
        goto loc_1ca2f;
    memoryASet16(es, bx + 2, 0x0000);
    goto loc_1cab0;
loc_1ca2f: // 1bf1:0b1f
    ax = si;
    ax += 0xffe2;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1ca66;
    ax = si;
    ax += 0x000a;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1ca66;
    ax = di;
    ax += 0xffec;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1ca66;
    ax = di;
    ax += 0x0012;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1ca66;
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1ca66: // 1bf1:0b56
    if (memoryAGet16(ds, 0x9862) != 0x0001)
        goto loc_1cab0;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0034;
    if ((short)ax <= (short)si)
        goto loc_1cab0;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xffd1;
    if ((short)ax >= (short)si)
        goto loc_1cab0;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001d;
    if ((short)ax <= (short)di)
        goto loc_1cab0;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xffe3;
    if ((short)ax >= (short)di)
        goto loc_1cab0;
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_1cab0;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 2, 0x0002);
    memoryASet16(es, bx + 6, 0x0000);
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x1bf1);
loc_1cab0: // 1bf1:0ba0
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 2) == 0x0002)
        goto loc_1cabd;
    goto loc_1da44;
loc_1cabd: // 1bf1:0bad
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1cacd;
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) + 0x001e);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) + 1);
loc_1cacd: // 1bf1:0bbd
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) != 0x0006)
        goto loc_1cadd;
    memoryASet16(es, bx + 2, 0x0001);
loc_1cadd: // 1bf1:0bcd
    ax = 0;
    push(ax);
    ax = 0x002c;
    push(ax);
    push(di);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 4));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1da44;
loc_1cafa: // 1bf1:0bea
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 6, 0x0000);
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1cb44;
    ax = si;
    ax += 0xffec;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1cb44;
    ax = si;
    ax += 0x0014;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1cb44;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001f;
    if ((short)ax <= (short)memoryAGet16(es, bx + 6))
        goto loc_1cb44;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x0005;
    if ((short)ax >= (short)memoryAGet16(es, bx + 6))
        goto loc_1cb44;
    ax = 0x0001;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ds, 0x97e6, ax);
loc_1cb44: // 1bf1:0c34
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 12) != 0x0000)
        goto loc_1cb68;
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - ax);
    ax = memoryAGet16(es, bx + 6);
    if ((short)ax >= (short)memoryAGet16(es, bx + 8))
        goto loc_1cb83;
    memoryASet16(es, bx + 12, 0x0001);
    goto loc_1cb83;
loc_1cb68: // 1bf1:0c58
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 14);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) + ax);
    ax = memoryAGet16(es, bx + 6);
    if ((short)ax <= (short)memoryAGet16(es, bx + 10))
        goto loc_1cb83;
    memoryASet16(es, bx + 12, 0x0000);
loc_1cb83: // 1bf1:0c73
    ax = 0;
    push(ax);
    ax = 0x03e8;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 6));
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    if (memoryAGet16(ss, bp - 6) == 0x0000)
        goto loc_1cbb0;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    ax += 0xffe3;
    memoryASet16(ds, 0x97f2, ax);
loc_1cbb0: // 1bf1:0ca0
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0010);
    goto loc_1bf35;
loc_1cbb7: // 1bf1:0ca7
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1d4da;
loc_1cbd5: // 1bf1:0cc5
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 2);
    ax += 0xfff8;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1cbe8;
    goto loc_1d4da;
loc_1cbe8: // 1bf1:0cd8
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0008;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1cbf8;
    goto loc_1d4da;
loc_1cbf8: // 1bf1:0ce8
    ax = memoryAGet16(es, bx + 4);
    if (ax == memoryAGet16(ds, 0x97f2))
        goto loc_1cc05;
    goto loc_1d4da;
loc_1cc05: // 1bf1:0cf5
    if (memoryAGet16(ds, 0x9802) != 0x0000)
        goto loc_1cc0f;
    goto loc_1d4da;
loc_1cc0f: // 1bf1:0cff
    if (memoryAGet16(ds, 0x987e) == 0x0000)
        goto loc_1cc19;
    goto loc_1d4da;
loc_1cc19: // 1bf1:0d09
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ds, 0x988e, ax);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ds, 0x987e, ax);
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) << 1);
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) << 1);
    memoryASet16(ds, 0x987e, memoryAGet16(ds, 0x987e) | 0x0001);
    goto loc_1d4da;
loc_1cc38: // 1bf1:0d28
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1cc48;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) ^ 0x0001);
loc_1cc48: // 1bf1:0d38
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 2);
    ax = 0;
    push(ax);
    ax = memoryAGet16(es, bx + 4);
    ax += 0x001a;
    push(ax);
    push(memoryAGet16(es, bx + 6));
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = si;
    ax += 0xffea;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1cc78;
    goto loc_1d4da;
loc_1cc78: // 1bf1:0d68
    ax = si;
    ax += 0x0007;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1cc86;
    goto loc_1d4da;
loc_1cc86: // 1bf1:0d76
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    ax += 0xffec;
    if ((short)ax < (short)memoryAGet16(ds, 0x97f2))
        goto loc_1cc99;
    goto loc_1d4da;
loc_1cc99: // 1bf1:0d89
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
    goto loc_1d4da;
loc_1cca7: // 1bf1:0d97
    ax = memoryAGet16(ds, 0x985c);
    ax += 0xfff8;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1ccb6;
    goto loc_1d4da;
loc_1ccb6: // 1bf1:0da6
    memoryASet16(ds, 0x9872, 0x0001);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ds, 0x9c68, ax);
    ax = memoryAGet16(es, bx + 4);
    memoryASet16(ds, 0x97fe, ax);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ds, 0x9864, ax);
    memoryASet16(ds, 0x9874, 0x0027);
    goto loc_1d4da;
loc_1ccdd: // 1bf1:0dcd
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 4) != 0x0011)
        goto loc_1ccef;
    memoryASet16(es, bx + 4, 0x0000);
    goto loc_1ccfd;
loc_1ccef: // 1bf1:0ddf
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1ccfd;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) + 1);
loc_1ccfd: // 1bf1:0ded
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 2);
    if ((short)memoryAGet16(es, bx + 4) < (short)0x0002)
        goto loc_1cd12;
    if ((short)memoryAGet16(es, bx + 4) <= (short)0x0007)
        goto loc_1cd3e;
loc_1cd12: // 1bf1:0e02
    ax = 0;
    push(ax);
    ax = 0x0077;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 6));
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x97f4);
    ax &= 0x007f;
    if (ax <= 0x0014)
        goto loc_1cd3c;
    di = 0x001e;
    goto loc_1cd3e;
loc_1cd3c: // 1bf1:0e2c
    di = 0;
loc_1cd3e: // 1bf1:0e2e
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 4) == 0x0002)
        goto loc_1cd56;
    if (memoryAGet16(es, bx + 4) == 0x0006)
        goto loc_1cd56;
    if (memoryAGet16(es, bx + 4) != 0x0007)
        goto loc_1cd77;
loc_1cd56: // 1bf1:0e46
    ax = 0;
    push(ax);
    ax = 0x0078;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x000a;
    push(ax);
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    di = 0x002d;
loc_1cd77: // 1bf1:0e67
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 4) <= (short)0x0002)
        goto loc_1cda6;
    if ((short)memoryAGet16(es, bx + 4) >= (short)0x0006)
        goto loc_1cda6;
    ax = 0;
    push(ax);
    ax = 0x0079;
    push(ax);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x0010;
    push(ax);
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    di = 0x0040;
loc_1cda6: // 1bf1:0e96
    ax = si;
    ax += 0xffe9;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1cdb4;
    goto loc_1d4da;
loc_1cdb4: // 1bf1:0ea4
    ax = si;
    ax += 0x0010;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1cdc2;
    goto loc_1d4da;
loc_1cdc2: // 1bf1:0eb2
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x0019;
    if ((short)ax < (short)memoryAGet16(ds, 0x97f2))
        goto loc_1cdd5;
    goto loc_1d4da;
loc_1cdd5: // 1bf1:0ec5
    ax = memoryAGet16(es, bx + 6);
    ax += di;
    ax += 0x0010;
    if ((short)ax > (short)memoryAGet16(ds, 0x97f2))
        goto loc_1cde7;
    goto loc_1d4da;
loc_1cde7: // 1bf1:0ed7
    goto loc_1cc99;
loc_1cdea: // 1bf1:0eda
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (!(memoryAGet16(es, bx + 6) & 0x0002))
        goto loc_1cdf8;
    goto loc_1d747;
loc_1cdf8: // 1bf1:0ee8
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1ce37;
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1bf1);
    bx = 0x0007;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 6, dx);
    ax = dx;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) + ax);
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) - 0x0003);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1bf1);
    bx = 0x000b;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    memoryASet16(ss, bp - 6, dx);
    ax = dx;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) + ax);
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) - 0x0005);
loc_1ce37: // 1bf1:0f27
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 8);
    if ((short)ax >= (short)memoryAGet16(ds, 0x986c))
        goto loc_1ce4b;
    ax = memoryAGet16(ds, 0x986c);
    memoryASet16(es, bx + 8, ax);
loc_1ce4b: // 1bf1:0f3b
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 8);
    dx = memoryAGet16(ds, 0x985c);
    dx += 0xffe2;
    if ((short)ax <= (short)dx)
        goto loc_1ce67;
    ax = memoryAGet16(ds, 0x985c);
    ax += 0xffe2;
    memoryASet16(es, bx + 8, ax);
loc_1ce67: // 1bf1:0f57
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 10) <= (short)0x008c)
        goto loc_1ce78;
    memoryASet16(es, bx + 10, 0x0082);
loc_1ce78: // 1bf1:0f68
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 8);
    di = memoryAGet16(es, bx + 10);
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1ce90;
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) ^ 0x0001);
loc_1ce90: // 1bf1:0f80
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    ax &= 0x0001;
    ax += 0x007a;
    push(ax);
    push(di);
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x988e);
    if ((short)ax >= (short)si)
        goto loc_1ced5;
    ax = si;
    ax += 0xffe2;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1ced5;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfffc;
    if ((short)ax >= (short)di)
        goto loc_1ced5;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1ced5: // 1bf1:0fc5
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff6;
    if ((short)ax < (short)di)
        goto loc_1cee2;
    goto loc_1d747;
loc_1cee2: // 1bf1:0fd2
    if (memoryAGet16(ds, 0x9862) == 0x0001)
        goto loc_1ceec;
    goto loc_1d747;
loc_1ceec: // 1bf1:0fdc
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_1cf1c;
    ax = memoryAGet16(ds, 0x988e);
    if ((short)ax >= (short)si)
        goto loc_1cf1c;
    ax = si;
    ax += 0xffdd;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1cf1c;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) | 0x0002);
    ax = 0x000a;
    push(ax);
    push(di);
    push(si);
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
loc_1cf1c: // 1bf1:100c
    if (memoryAGet16(ds, 0x9800) != 0x0000)
        goto loc_1cf26;
    goto loc_1d747;
loc_1cf26: // 1bf1:1016
    ax = si;
    ax += 0x0032;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1cf34;
    goto loc_1d747;
loc_1cf34: // 1bf1:1024
    ax = memoryAGet16(ds, 0x988e);
    if ((short)ax > (short)si)
        goto loc_1cf3e;
    goto loc_1d747;
loc_1cf3e: // 1bf1:102e
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) | 0x0002);
    ax = 0x000a;
    push(ax);
    push(di);
    push(si);
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
    goto loc_1d747;
loc_1cf58: // 1bf1:1048
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) == 0x0001)
        goto loc_1cf65;
    goto loc_1d0b0;
loc_1cf65: // 1bf1:1055
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 4);
    bx = memoryAGet16(es, bx + 6);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 32904);
    ax += memoryAGet16(ds, 0x988a);
    ax--;
    dx = 0x0014;
    mul(dx);
    bx = memoryAGet16(ds, 0x8da2);
    es = memoryAGet16(ds, 0x8da2 + 2);
    bx += ax;
    ax = memoryAGet16(es, bx + 2);
    di -= ax;
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    bx = memoryAGet16(es, bx + 6);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 32904));
    push(di);
    push(si);
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0014;
    if ((short)ax > (short)si)
        goto loc_1cfb5;
    goto loc_1d0b0;
loc_1cfb5: // 1bf1:10a5
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xffec;
    if ((short)ax < (short)si)
        goto loc_1cfc2;
    goto loc_1d0b0;
loc_1cfc2: // 1bf1:10b2
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x0014;
    if ((short)ax > (short)di)
        goto loc_1cfcf;
    goto loc_1d0b0;
loc_1cfcf: // 1bf1:10bf
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xfff6;
    if ((short)ax < (short)di)
        goto loc_1cfdc;
    goto loc_1d0b0;
loc_1cfdc: // 1bf1:10cc
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 8, 0x0000);
    push(memoryAGet16(es, bx + 6));
    push(cs);
    cs = 0x19e4;
    sub_1b042(); // 19e4:1202
    assert(cs == 0x1bf1);
    sp++;
    sp++;
    goto loc_1d0b0;
loc_1cff3: // 1bf1:10e3
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 4);
    ax = 0;
    push(ax);
    bx = memoryAGet16(es, bx + 6);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 32952));
    push(di);
    push(si);
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) == 0x0000)
        goto loc_1d04e;
    ax = si;
    ax += 0xffec;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d04e;
    ax = si;
    ax += 0x0012;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d04e;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001d;
    dx = di;
    dx--;
    if ((short)ax <= (short)dx)
        goto loc_1d04e;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1d04e: // 1bf1:113e
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) != 0x0003)
        goto loc_1d05e;
    memoryASet16(es, bx + 6, 0x0000);
loc_1d05e: // 1bf1:114e
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) != 0x0001)
        goto loc_1d06e;
    memoryASet16(es, bx + 6, 0x0002);
loc_1d06e: // 1bf1:115e
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1d07c;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) + 1);
loc_1d07c: // 1bf1:116c
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) != 0x000f)
        goto loc_1d08e;
    memoryASet16(es, bx + 6, 0x0001);
    goto loc_1d0b0;
loc_1d08e: // 1bf1:117e
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) != 0x001e)
        goto loc_1d0a0;
    memoryASet16(es, bx + 6, 0x0003);
    goto loc_1d0b0;
loc_1d0a0: // 1bf1:1190
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) != 0x002d)
        goto loc_1d0b0;
    memoryASet16(es, bx + 8, 0x000e);
loc_1d0b0: // 1bf1:11a0
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x000a);
    goto loc_1bf35;
loc_1d0b7: // 1bf1:11a7
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xfff8;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)ax < (short)memoryAGet16(es, bx + 2))
        goto loc_1d0c9;
    goto loc_1d4da;
loc_1d0c9: // 1bf1:11b9
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0008;
    if ((short)ax > (short)memoryAGet16(es, bx + 2))
        goto loc_1d0d8;
    goto loc_1d4da;
loc_1d0d8: // 1bf1:11c8
    if (memoryAGet16(ds, 0x9898) == 0x0000)
        goto loc_1d138;
    ax = memoryAGet16(es, bx + 6);
    ax += 0x000c;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d110;
    ax = memoryAGet16(es, bx + 6);
    ax += 0x0004;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d110;
    if (memoryAGet16(ds, 0x97e2) == 0x0000)
        goto loc_1d110;
    memoryASet16(ds, 0x97e2, 0x0000);
    ax = memoryAGet16(es, bx + 6);
    ax += 0xfffe;
    memoryASet16(ds, 0x97f2, ax);
loc_1d110: // 1bf1:1200
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 4);
    if (ax != memoryAGet16(ds, 0x97f2))
        goto loc_1d138;
    memoryASet16(ds, 0x9892, 0x0000);
    memoryASet16(ds, 0x97e2, 0x0001);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0004;
    memoryASet16(ds, 0x988e, ax);
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x0004);
loc_1d138: // 1bf1:1228
    if (memoryAGet16(ds, 0x9802) != 0x0000)
        goto loc_1d142;
    goto loc_1d4da;
loc_1d142: // 1bf1:1232
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    if (ax != memoryAGet16(ds, 0x97f2))
        goto loc_1d174;
    ax = memoryAGet16(es, bx + 6);
    ax += 0x000c;
    memoryASet16(ds, 0x97f2, ax);
    memoryASet16(ds, 0x9892, 0x0000);
    memoryASet16(ds, 0x97e2, 0x0001);
    ax = memoryAGet16(es, bx + 2);
    ax += 0x0004;
    memoryASet16(ds, 0x988e, ax);
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) + 0x0004);
loc_1d174: // 1bf1:1264
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfff8;
    if ((short)ax < (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d187;
    goto loc_1d4da;
loc_1d187: // 1bf1:1277
    if (memoryAGet16(ds, 0x97e2) != 0x0000)
        goto loc_1d191;
    goto loc_1d4da;
loc_1d191: // 1bf1:1281
    memoryASet16(ds, 0x97e2, 0x0000);
    ax = memoryAGet16(es, bx + 4);
    memoryASet16(ds, 0x97f2, ax);
    goto loc_1d4da;
loc_1d1a1: // 1bf1:1291
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1d1ac;
    memoryASet16(ds, 0x8000, memoryAGet16(ds, 0x8000) + 1);
loc_1d1ac: // 1bf1:129c
    memoryASet16(ds, 0x8000, memoryAGet16(ds, 0x8000) & 0x001f);
    if ((short)memoryAGet16(ds, 0x8000) <= (short)0x0010)
        goto loc_1d1e6;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 10) == 0x0005)
        goto loc_1d1e6;
    memoryASet16(es, bx + 22, 0x0000);
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = bx;
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x475e;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1d1e6: // 1bf1:12d6
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x478e;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1d204: // 1bf1:12f4
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x47be;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    bx += 0x0002;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    if (memoryAGet16(es, bx + 8) != 0x0003)
        goto loc_1d26d;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x0014;
    if ((short)ax <= (short)memoryAGet16(es, bx + 12))
        goto loc_1d26d;
    ax = memoryAGet16(ds, 0x988e);
    ax += 0xffe7;
    if ((short)ax >= (short)memoryAGet16(es, bx + 12))
        goto loc_1d26d;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001e;
    if ((short)ax <= (short)memoryAGet16(es, bx + 14))
        goto loc_1d26d;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0xffe2;
    if ((short)ax >= (short)memoryAGet16(es, bx + 14))
        goto loc_1d26d;
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1d26d: // 1bf1:135d
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    if (memoryAGet16(es, bx + 8) == 0x0005)
        goto loc_1d27a;
    goto loc_1dc39;
loc_1d27a: // 1bf1:136a
    ax = memoryAGet16(es, bx + 12);
    ax += 0x0014;
    if ((short)ax > (short)memoryAGet16(ds, 0x988e))
        goto loc_1d28a;
    goto loc_1dc39;
loc_1d28a: // 1bf1:137a
    ax = memoryAGet16(es, bx + 12);
    ax += 0xfff6;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1d29a;
    goto loc_1dc39;
loc_1d29a: // 1bf1:138a
    ax = memoryAGet16(es, bx + 14);
    ax += 0xffe2;
    if ((short)ax < (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d2aa;
    goto loc_1dc39;
loc_1d2aa: // 1bf1:139a
    ax = memoryAGet16(es, bx + 14);
    ax += 0x001e;
    if ((short)ax > (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d2ba;
    goto loc_1dc39;
loc_1d2ba: // 1bf1:13aa
    ax = 0x0064;
    push(ax);
    push(memoryAGet16(es, bx + 14));
    push(memoryAGet16(es, bx + 12));
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 8, 0x0006);
    memoryASet16(ds, 0x9880, memoryAGet16(ds, 0x9880) + 1);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x1bf1);
    goto loc_1dc39;
loc_1d2e3: // 1bf1:13d3
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) != 0x0000)
        goto loc_1d2f0;
    goto loc_1d4da;
loc_1d2f0: // 1bf1:13e0
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 4);
    if (memoryAGet16(es, bx + 6) != 0x0002)
        goto loc_1d306;
    memoryASet16(ss, bp - 8, 0x0075);
    goto loc_1d30b;
loc_1d306: // 1bf1:13f6
    memoryASet16(ss, bp - 8, 0x007e);
loc_1d30b: // 1bf1:13fb
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(di);
    push(si);
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = di;
    ax += 0xfff9;
    if (ax == memoryAGet16(ds, 0x97f2))
        goto loc_1d32a;
    goto loc_1d4da;
loc_1d32a: // 1bf1:141a
    if (memoryAGet16(ds, 0x9862) == 0x0001)
        goto loc_1d334;
    goto loc_1d4da;
loc_1d334: // 1bf1:1424
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_1d34d;
    ax = si;
    ax += 0x0032;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d34d;
    ax = memoryAGet16(ds, 0x988e);
    if ((short)ax > (short)si)
        goto loc_1d36f;
loc_1d34d: // 1bf1:143d
    if (memoryAGet16(ds, 0x9800) == 0x0000)
        goto loc_1d357;
    goto loc_1d4da;
loc_1d357: // 1bf1:1447
    ax = memoryAGet16(ds, 0x988e);
    if ((short)ax < (short)si)
        goto loc_1d361;
    goto loc_1d4da;
loc_1d361: // 1bf1:1451
    ax = si;
    ax += 0xffd8;
    if ((short)ax < (short)memoryAGet16(ds, 0x988e))
        goto loc_1d36f;
    goto loc_1d4da;
loc_1d36f: // 1bf1:145f
    push(cs);
    cs = 0x1dc4;
    sub_1dd4b(); // 1dc4:010b
    assert(cs == 0x1bf1);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
    if (memoryAGet16(es, bx + 6) == 0x0000)
        goto loc_1d38d;
    if (memoryAGet16(ds, 0x97f8) == 0x0000)
        goto loc_1d38d;
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
loc_1d38d: // 1bf1:147d
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) == 0x0000)
        goto loc_1d39a;
    goto loc_1d4da;
loc_1d39a: // 1bf1:148a
    memoryASet16(ds, 0x9880, memoryAGet16(ds, 0x9880) + 1);
    push(cs);
    cs = 0x19e4;
    sub_1b596(); // 19e4:1756
    assert(cs == 0x1bf1);
    ax = 0x0032;
    push(ax);
    ax = di;
    ax += 0xfffc;
    push(ax);
    push(si);
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
    goto loc_1d4da;
loc_1d3b9: // 1bf1:14a9
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 4);
    ax = 0;
    push(ax);
    ax = 0x0096;
    push(ax);
    push(di);
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1d3e6;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) + 1);
loc_1d3e6: // 1bf1:14d6
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 6) != 0x0028)
        goto loc_1d3f6;
    memoryASet16(es, bx + 6, 0x0000);
loc_1d3f6: // 1bf1:14e6
    memoryASet16(ss, bp - 8, 0x0097);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 6) <= (short)0x000a)
        goto loc_1d411;
    if ((short)memoryAGet16(es, bx + 6) >= (short)0x000c)
        goto loc_1d411;
    memoryASet16(ss, bp - 8, 0x0098);
loc_1d411: // 1bf1:1501
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 6) <= (short)0x000b)
        goto loc_1d427;
    if ((short)memoryAGet16(es, bx + 6) >= (short)0x0014)
        goto loc_1d427;
    memoryASet16(ss, bp - 8, 0x0099);
loc_1d427: // 1bf1:1517
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 6) <= (short)0x0013)
        goto loc_1d43d;
    if ((short)memoryAGet16(es, bx + 6) >= (short)0x0015)
        goto loc_1d43d;
    memoryASet16(ss, bp - 8, 0x0098);
loc_1d43d: // 1bf1:152d
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    ax = di;
    ax += 0x0014;
    push(ax);
    ax = si;
    ax += 0x0010;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    if (memoryAGet16(ss, bp - 8) != 0x0097)
        goto loc_1d49c;
    ax = di;
    ax += 0x0019;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d49c;
    ax = memoryAGet16(ds, 0x97f2);
    ax += 0x001d;
    dx = di;
    dx += 0x0014;
    if ((short)ax <= (short)dx)
        goto loc_1d49c;
    ax = si;
    ax += 0x002c;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d49c;
    ax = si;
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d49c;
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1d49c: // 1bf1:158c
    if ((short)memoryAGet16(ss, bp - 8) <= (short)0x0097)
        goto loc_1d4da;
    ax = di;
    ax += 0x0035;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d4da;
    ax = di;
    ax += 0x0017;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d4da;
    ax = si;
    ax += 0x0033;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d4da;
    ax = si;
    ax += 0x000e;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d4da;
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1d4da: // 1bf1:15ca
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0008);
    goto loc_1bf35;
loc_1d4e1: // 1bf1:15d1
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 4);
    di = memoryAGet16(es, bx + 6);
    if (memoryAGet16(es, bx + 2) != 0x0000)
        goto loc_1d554;
    ax = si;
    ax += 0x0005;
    memoryASet16(es, bx + 8, ax);
    ax = di;
    ax += 0x0005;
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 2, 0x0002);
    ax = si;
    ax += 0xffe2;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d52e;
    ax = si;
    ax += 0x0004;
    memoryASet16(es, bx + 8, ax);
    ax = di;
    ax += 0x0005;
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 2, 0x0001);
loc_1d52e: // 1bf1:161e
    ax = si;
    ax += 0x001e;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d554;
    ax = si;
    ax += 0x0008;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 8, ax);
    ax = di;
    ax += 0x0005;
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 2, 0x0003);
loc_1d554: // 1bf1:1644
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(ds, 0x97f2);
    dx += 0xfffe;
    if ((short)ax <= (short)dx)
        goto loc_1d59e;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(ds, 0x97f2);
    dx += 0x0014;
    if ((short)ax >= (short)dx)
        goto loc_1d59e;
    ax = memoryAGet16(es, bx + 8);
    dx = memoryAGet16(ds, 0x988e);
    dx += 0xfffe;
    if ((short)ax <= (short)dx)
        goto loc_1d59e;
    ax = memoryAGet16(es, bx + 8);
    dx = memoryAGet16(ds, 0x988e);
    dx += 0x0018;
    if ((short)ax >= (short)dx)
        goto loc_1d59e;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1d59e: // 1bf1:168e
    memoryASet16(ss, bp - 8, 0x009a);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) + 0x0007);
    if (memoryAGet16(es, bx + 2) != 0x0001)
        goto loc_1d5c9;
    memoryASet16(ss, bp - 8, 0x0094);
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) - 0x0006);
    if ((short)memoryAGet16(es, bx + 8) >= (short)0xfff6)
        goto loc_1d5c9;
    memoryASet16(es, bx + 2, 0x0000);
loc_1d5c9: // 1bf1:16b9
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 2) != 0x0003)
        goto loc_1d5eb;
    memoryASet16(ss, bp - 8, 0x0095);
    memoryASet16(es, bx + 8, memoryAGet16(es, bx + 8) + 0x0006);
    if ((short)memoryAGet16(es, bx + 8) <= (short)0x0140)
        goto loc_1d5eb;
    memoryASet16(es, bx + 2, 0x0000);
loc_1d5eb: // 1bf1:16db
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 10);
    dx = di;
    dx += 0x001e;
    if ((short)ax <= (short)dx)
        goto loc_1d602;
    memoryASet16(ss, bp - 6, 0x0092);
    goto loc_1d607;
loc_1d602: // 1bf1:16f2
    memoryASet16(ss, bp - 6, 0x0093);
loc_1d607: // 1bf1:16f7
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 10) <= (short)0x00c8)
        goto loc_1d618;
    memoryASet16(es, bx + 2, 0x0000);
loc_1d618: // 1bf1:1708
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(di);
    push(si);
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 10));
    push(memoryAGet16(es, bx + 8));
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1d747;
loc_1d646: // 1bf1:1736
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 4);
    if (memoryAGet16(es, bx + 8) != 0x0000)
        goto loc_1d6a4;
    if (memoryAGet16(es, bx + 10) != 0x0000)
        goto loc_1d669;
    si -= 0x0003;
    memoryASet16(ss, bp - 8, 0x0038);
    goto loc_1d671;
loc_1d669: // 1bf1:1759
    si += 0x0003;
    memoryASet16(ss, bp - 8, 0x003a);
loc_1d671: // 1bf1:1761
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(di);
    push(si);
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) - ax);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
    memoryASet16(es, bx + 2, si);
    if (memoryAGet16(es, bx + 6) != 0x0000)
        goto loc_1d709;
    memoryASet16(es, bx + 8, 0x0001);
    goto loc_1d709;
loc_1d6a4: // 1bf1:1794
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 10) != 0x0000)
        goto loc_1d6b8;
    si -= 0x0003;
    memoryASet16(ss, bp - 8, 0x0039);
    goto loc_1d6c0;
loc_1d6b8: // 1bf1:17a8
    si += 0x0003;
    memoryASet16(ss, bp - 8, 0x003b);
loc_1d6c0: // 1bf1:17b0
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(di);
    push(si);
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) + ax);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) + 1);
    memoryASet16(es, bx + 2, si);
    if (memoryAGet16(es, bx + 6) != 0x0014)
        goto loc_1d709;
    memoryASet16(es, bx + 8, 0x0000);
    memoryASet16(es, bx + 4, 0x00dc);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1bf1);
    bx = 0x00d2;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(bx);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 2, dx);
loc_1d709: // 1bf1:17f9
    ax = si;
    ax += 0xffe2;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d747;
    ax = si;
    ax += 0x000a;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d747;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfff6;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d747;
    ax = memoryAGet16(es, bx + 4);
    ax += 0x0014;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d747;
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1d747: // 1bf1:1837
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x000c);
    goto loc_1bf35;
loc_1d74e: // 1bf1:183e
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 2) < (short)0x0008)
        goto loc_1d75b;
    goto loc_1d896;
loc_1d75b: // 1bf1:184b
    if (memoryAGet16(es, bx + 2) != 0x0000)
        goto loc_1d79c;
    ax = 0;
    push(ax);
    ax = 0x005d;
    push(ax);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) == 0x0000)
        goto loc_1d789;
    goto loc_1d837;
loc_1d789: // 1bf1:1879
    if (memoryAGet16(ds, 0x9870) == 0x0000)
        goto loc_1d793;
    goto loc_1d837;
loc_1d793: // 1bf1:1883
    memoryASet16(es, bx + 2, 0x0001);
    goto loc_1d837;
loc_1d79c: // 1bf1:188c
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 2) >= (short)0x0007)
        goto loc_1d800;
    ax = 0;
    push(ax);
    ax = 0x005e;
    push(ax);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x0005;
    push(ax);
    push(memoryAGet16(es, bx + 4));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) + 1);
    if (memoryAGet16(es, bx + 2) != 0x0002)
        goto loc_1d7ee;
    memoryASet16(es, bx + 8, 0x0001);
    ax = memoryAGet16(es, bx + 4);
    ax += 0xfff4;
    memoryASet16(es, bx + 10, ax);
    ax = memoryAGet16(es, bx + 6);
    ax += 0x0012;
    memoryASet16(es, bx + 12, ax);
loc_1d7ee: // 1bf1:18de
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 2) != 0x0006)
        goto loc_1d837;
    memoryASet16(es, bx + 2, 0x0000);
    goto loc_1d837;
loc_1d800: // 1bf1:18f0
    ax = 0;
    push(ax);
    ax = 0x005f;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    ax += 0xfff9;
    push(ax);
    push(memoryAGet16(es, bx + 4));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) + 0x000a);
    if ((short)memoryAGet16(es, bx + 4) <= (short)0x0140)
        goto loc_1d837;
    memoryASet16(es, bx + 2, 0x0008);
loc_1d837: // 1bf1:1927
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if ((short)memoryAGet16(es, bx + 2) >= (short)0x0003)
        goto loc_1d896;
    if (memoryAGet16(ds, 0x9862) != 0x0001)
        goto loc_1d896;
    ax = memoryAGet16(es, bx + 4);
    ax += 0x001e;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d896;
    ax = memoryAGet16(es, bx + 4);
    ax += 0xffdc;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1d896;
    ax = memoryAGet16(es, bx + 6);
    ax += 0xffe2;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d896;
    ax = memoryAGet16(es, bx + 6);
    ax += 0x001e;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d896;
    memoryASet16(es, bx + 2, 0x0007);
    ax = 0x0064;
    push(ax);
    push(memoryAGet16(es, bx + 6));
    push(memoryAGet16(es, bx + 4));
    push(cs);
    cs = 0x19e4;
    sub_1a63d(); // 19e4:07fd
    assert(cs == 0x1bf1);
    sp += 0x0006;
loc_1d896: // 1bf1:1986
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) != 0x0000)
        goto loc_1d8a3;
    goto loc_1db36;
loc_1d8a3: // 1bf1:1993
    ax = 0;
    push(ax);
    ax = 0x0060;
    push(ax);
    push(memoryAGet16(es, bx + 12));
    push(memoryAGet16(es, bx + 10));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(ds, 0x988e);
    dx += 0x0014;
    if ((short)ax >= (short)dx)
        goto loc_1d90b;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(ds, 0x988e);
    dx += 0xfff6;
    if ((short)ax <= (short)dx)
        goto loc_1d90b;
    ax = memoryAGet16(es, bx + 12);
    ax += 0x000c;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1d90b;
    ax = memoryAGet16(es, bx + 12);
    dx = memoryAGet16(ds, 0x97f2);
    dx += 0x0017;
    if ((short)ax >= (short)dx)
        goto loc_1d90b;
    memoryASet16(es, bx + 8, 0x0000);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1d90b: // 1bf1:19fb
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) - 0x000c);
    if ((short)memoryAGet16(es, bx + 10) < (short)0xffba)
        goto loc_1d91d;
    goto loc_1db36;
loc_1d91d: // 1bf1:1a0d
    goto loc_1c97c;
loc_1d920: // 1bf1:1a10
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x57e0;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1d93e: // 1bf1:1a2e
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x5810;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1d95c: // 1bf1:1a4c
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 10));
    ax = 0x009f;
    push(ax);
    push(memoryAGet16(es, bx + 6));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1d987;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 14, memoryAGet16(es, bx + 14) + 1);
loc_1d987: // 1bf1:1a77
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 14) != 0x0003)
        goto loc_1d9d0;
    memoryASet16(es, bx + 14, 0x0000);
    memoryASet16(es, bx + 10, memoryAGet16(es, bx + 10) + 1);
    if (memoryAGet16(es, bx + 10) != 0x003d)
        goto loc_1d9d0;
    memoryASet16(es, bx + 10, 0x0038);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1bf1);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    bx = memoryAGet16(es, bx + 2);
    push(ax);
    push(bx);
    bx = memoryAGet16(ss, bp - 12);
    cx = pop();
    cx -= memoryAGet16(es, bx + 4);
    ax = pop();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(cx);
    bx = memoryAGet16(ss, bp - 12);
    dx += memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx + 6, dx);
loc_1d9d0: // 1bf1:1ac0
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 12));
    ax = 0x00a5;
    push(ax);
    push(memoryAGet16(es, bx + 8));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    if (memoryAGet16(ds, 0x7ffe) == 0x0000)
        goto loc_1d9fb;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 16, memoryAGet16(es, bx + 16) + 1);
loc_1d9fb: // 1bf1:1aeb
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 16) != 0x0003)
        goto loc_1da44;
    memoryASet16(es, bx + 16, 0x0000);
    memoryASet16(es, bx + 12, memoryAGet16(es, bx + 12) + 1);
    if (memoryAGet16(es, bx + 12) != 0x0051)
        goto loc_1da44;
    memoryASet16(es, bx + 12, 0x004d);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1bf1);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    bx = memoryAGet16(es, bx + 2);
    push(ax);
    push(bx);
    bx = memoryAGet16(ss, bp - 12);
    cx = pop();
    cx -= memoryAGet16(es, bx + 4);
    ax = pop();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(cx);
    bx = memoryAGet16(ss, bp - 12);
    dx += memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx + 8, dx);
loc_1da44: // 1bf1:1b34
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0012);
    goto loc_1bf35;
loc_1da4b: // 1bf1:1b3b
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    if (memoryAGet16(es, bx + 8) != 0x0000)
        goto loc_1da8d;
    ax = 0;
    push(ax);
    ax = 0x0054;
    push(ax);
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) - ax);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) - 1);
    if (memoryAGet16(es, bx + 6) != 0x0000)
        goto loc_1daf4;
    memoryASet16(es, bx + 8, 0x0001);
    goto loc_1daf4;
loc_1da8d: // 1bf1:1b7d
    ax = 0;
    push(ax);
    ax = 0x0055;
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    push(memoryAGet16(es, bx + 4));
    push(memoryAGet16(es, bx + 2));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) + ax);
    memoryASet16(es, bx + 6, memoryAGet16(es, bx + 6) + 1);
    if (memoryAGet16(es, bx + 6) != 0x0014)
        goto loc_1daf4;
    memoryASet16(es, bx + 8, 0x0000);
    memoryASet16(es, bx + 4, 0x00dc);
    push(cs);
    cs = 0x1f47;
    sub_1f489(); // 1f47:0019
    assert(cs == 0x1bf1);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    bx = memoryAGet16(es, bx + 10);
    push(ax);
    push(bx);
    bx = memoryAGet16(ss, bp - 12);
    cx = pop();
    cx -= memoryAGet16(es, bx + 12);
    ax = pop();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv(cx);
    bx = memoryAGet16(ss, bp - 12);
    dx += memoryAGet16(es, bx + 12);
    bx = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx + 2, dx);
loc_1daf4: // 1bf1:1be4
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    ax = memoryAGet16(es, bx + 2);
    ax += 0xffe9;
    if ((short)ax >= (short)memoryAGet16(ds, 0x988e))
        goto loc_1db36;
    ax = memoryAGet16(es, bx + 2);
    ax += 0x000f;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1db36;
    ax = memoryAGet16(es, bx + 4);
    ax += 0xffe7;
    if ((short)ax >= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1db36;
    ax = memoryAGet16(es, bx + 4);
    ax += 0x0019;
    if ((short)ax <= (short)memoryAGet16(ds, 0x97f2))
        goto loc_1db36;
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1b714(); // 19e4:18d4
    assert(cs == 0x1bf1);
    sp++;
    sp++;
loc_1db36: // 1bf1:1c26
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x000e);
    goto loc_1bf35;
loc_1db3d: // 1bf1:1c2d
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    si = memoryAGet16(es, bx + 2);
    di = memoryAGet16(es, bx + 4);
    memoryASet16(ss, bp - 8, 0x0093);
    ax = memoryAGet16(ds, 0x988e);
    ax += 0x000a;
    if ((short)ax <= (short)si)
        goto loc_1db96;
    ax = si;
    ax += 0x0014;
    if ((short)ax <= (short)memoryAGet16(ds, 0x988e))
        goto loc_1db96;
    ax = di;
    ax += 0xfff4;
    if (ax != memoryAGet16(ds, 0x97f2))
        goto loc_1db96;
    if (memoryAGet16(ds, 0x9868) != 0x0000)
        goto loc_1db96;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
    memoryASet16(ds, 0x988e, memoryAGet16(ds, 0x988e) + 0x0005);
    memoryASet16(ds, 0x97f2, memoryAGet16(ds, 0x97f2) - 0x000a);
    ax = memoryAGet16(ds, 0x97f4);
    memoryASet16(ds, 0x9c70, ax);
    memoryASet16(ds, 0x97f4, 0x00a8);
    memoryASet16(ds, 0x9868, 0x0001);
    di -= 0x0004;
loc_1db96: // 1bf1:1c86
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    ax = di;
    ax += 0x0004;
    push(ax);
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
loc_1dbae: // 1bf1:1c9e
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0006);
    goto loc_1bf35;
loc_1dbb5: // 1bf1:1ca5
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    bx += 0x0002;
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    if (memoryAGet16(es, bx + 8) != 0x0000)
        goto loc_1dbda;
    ax = memoryAGet16(ds, 0x988e);
    ax -= memoryAGet16(es, bx + 12);
    if ((short)ax >= 0)
        goto loc_1dbd5;
    ax = -ax;
loc_1dbd5: // 1bf1:1cc5
    if ((short)ax > (short)0x0046)
        goto loc_1dbff;
loc_1dbda: // 1bf1:1cca
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x749c;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    if (memoryAGet16(es, bx + 8) != 0x0000)
        goto loc_1dc39;
loc_1dbff: // 1bf1:1cef
    ax = 0;
    push(ax);
    ax = 0x0033;
    push(ax);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    push(memoryAGet16(es, bx + 14));
    push(memoryAGet16(es, bx + 12));
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1829;
    sub_18c3b(); // 1829:09ab
    assert(cs == 0x1bf1);
    sp += 0x000a;
    goto loc_1dc39;
loc_1dc1e: // 1bf1:1d0e
    ax = 0;
    push(ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    push(dx);
    push(ax);
    push(ds);
    ax = 0x74cc;
    push(ax);
    push(cs);
    cs = 0x19e4;
    sub_1a77d(); // 19e4:093d
    assert(cs == 0x1bf1);
    sp += 0x000a;
loc_1dc39: // 1bf1:1d29
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x001a);
    goto loc_1bf35;
loc_1dc40: // 1bf1:1d30
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1dc46() // 1dc4:0006
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet(ds, 0x9091) != 0x00)
        goto loc_1dc51;
    goto loc_1dcd0;
loc_1dc51: // 1dc4:0011
    if (memoryAGet(ds, 0x8db5) != 0x52)
        goto loc_1dc87;
    flags.interrupts = false;
    ax = 0x002e;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_11745(); // 1162:0125
    assert(cs == 0x1dc4);
    sp += 0x0004;
    si = 0;
    goto loc_1dc81;
loc_1dc6d: // 1dc4:002d
    push(memoryAGet16(ds, 0x8f7c));
    al = memoryAGet(ds, si + 32961);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1dc4);
    sp += 0x0004;
    si++;
loc_1dc81: // 1dc4:0041
    if (si < 0x000a)
        goto loc_1dc6d;
    flags.interrupts = true;
loc_1dc87: // 1dc4:0047
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_1dc99;
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x127c;
    sub_1290a(); // 127c:014a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1dc99: // 1dc4:0059
    if (memoryAGet(ds, 0x8db5) != 0x41)
        goto loc_1dcd0;
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_1205c(); // 11cd:038c
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    push(ds);
    ax = 0x80cc;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11e5b(); // 11cd:018b
    assert(cs == 0x1dc4);
    sp += 0x0006;
    ax = 0x007f;
    push(ax);
    ax = 0x0024;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x10ba;
    sub_10ffa(); // 10ba:045a
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1dcd0: // 1dc4:0090
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1dcd2() // 1dc4:0092
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet(ds, 0x9091) == 0x00)
        goto loc_1dd49;
    if (memoryAGet(ds, 0x8db5) != 0x52)
        goto loc_1dd00;
    flags.interrupts = false;
    si = 0;
    goto loc_1dcfa;
loc_1dce6: // 1dc4:00a6
    push(memoryAGet16(ds, 0x8f7c));
    al = memoryAGet(ds, si + 33028);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1dc4);
    sp += 0x0004;
    si++;
loc_1dcfa: // 1dc4:00ba
    if (si < 0x0006)
        goto loc_1dce6;
    flags.interrupts = true;
loc_1dd00: // 1dc4:00c0
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_1dd12;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x127c;
    sub_1290a(); // 127c:014a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1dd12: // 1dc4:00d2
    if (memoryAGet(ds, 0x8db5) != 0x41)
        goto loc_1dd49;
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_1205c(); // 11cd:038c
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    push(ds);
    ax = 0x810a;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11e5b(); // 11cd:018b
    assert(cs == 0x1dc4);
    sp += 0x0006;
    ax = 0x007f;
    push(ax);
    ax = 0x0024;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x10ba;
    sub_10ffa(); // 10ba:045a
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1dd49: // 1dc4:0109
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1dd4b() // 1dc4:010b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    if (memoryAGet(ds, 0x9091) == 0x00)
        goto loc_1ddc1;
    if (memoryAGet(ds, 0x8db5) != 0x52)
        goto loc_1dd79;
    flags.interrupts = false;
    si = 0;
    goto loc_1dd73;
loc_1dd5f: // 1dc4:011f
    push(memoryAGet16(ds, 0x8f7c));
    al = memoryAGet(ds, si + 33090);
    ah = 0x00;
    push(ax);
    push(cs);
    cs = 0x129a;
    sub_129c3(); // 129a:0023
    assert(cs == 0x1dc4);
    sp += 0x0004;
    si++;
loc_1dd73: // 1dc4:0133
    if (si < 0x0006)
        goto loc_1dd5f;
    flags.interrupts = true;
loc_1dd79: // 1dc4:0139
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_1dd8a;
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x127c;
    sub_1290a(); // 127c:014a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1dd8a: // 1dc4:014a
    if (memoryAGet(ds, 0x8db5) != 0x41)
        goto loc_1ddc1;
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_1205c(); // 11cd:038c
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    push(ds);
    ax = 0x8148;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x11cd;
    sub_11e5b(); // 11cd:018b
    assert(cs == 0x1dc4);
    sp += 0x0006;
    ax = 0x007f;
    push(ax);
    ax = 0x0018;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs);
    cs = 0x10ba;
    sub_10ffa(); // 10ba:045a
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1ddc1: // 1dc4:0181
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1ddc3() // 1dc4:0183
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    di = 0;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1dde6;
    push(ds);
    ax = 0x8180;
    push(ax);
    ax = di;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1ddf6;
loc_1dde6: // 1dc4:01a6
    push(ds);
    ax = 0x8188;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1ddf6: // 1dc4:01b6
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8193;
    push(ax);
    push(memoryAGet16(ds, 0x8bd6));
    push(cs);
    cs = 0x06c1;
    sub_993b(); // 06c1:2d2b
    assert(cs == 0x1dc4);
    sp += 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(ds);
    ax = 0x819d;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x1dc4);
    sp += 0x0004;
    si = 0x00c6;
    goto loc_1deb9;
loc_1de49: // 1dc4:0209
    if (!di)
        goto loc_1de57;
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8bfa);
    goto loc_1de5f;
loc_1de57: // 1dc4:0217
    memoryASet16(ss, bp - 2, ds);
    memoryASet16(ss, bp - 4, 0x8b70);
loc_1de5f: // 1dc4:021f
    if (memoryAGet(ds, 0x919d) != 0x00)
        goto loc_1de74;
    if (memoryAGet(ds, 0x8f67) != 0x00)
        goto loc_1de74;
    if (memoryAGet(ds, 0x8c58) == 0x00)
        goto loc_1de78;
loc_1de74: // 1dc4:0234
    di ^= 0x0001;
loc_1de78: // 1dc4:0238
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(ds);
    ax = 0x8e20;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x8bd6));
    push(si);
    ax = 0x0040;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_4c03(); // 023f:2813
    assert(cs == 0x1dc4);
    sp += 0x000c;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    si -= 0x0002;
loc_1deb9: // 1dc4:0279
    sync();
    if ((short)si < (short)0x0049)
        goto loc_1dec1;
    goto loc_1de49;
loc_1dec1: // 1dc4:0281
    if (!di)
        goto loc_1dee7;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
loc_1dee7: // 1dc4:02a7
    push(cs);
    cs = 0x0a34;
    sub_a9d5(); // 0a34:0695
    assert(cs == 0x1dc4);
    push(ds);
    ax = 0x8b70;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_402c(); // 023f:1c3c
    assert(cs == 0x1dc4);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1df27() // 1dc4:02e7
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1df40;
    push(ds);
    ax = 0x81a7;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1df50;
loc_1df40: // 1dc4:0300
    push(ds);
    ax = 0x81b0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1df50: // 1dc4:0310
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x81bc;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x1dc4);
    sp += 0x0004;
    ax = 0x0007;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0008;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_a99a(); // 0a34:065a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1dfa2() // 1dc4:0362
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1dfbb;
    push(ds);
    ax = 0x81c7;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1dfcb;
loc_1dfbb: // 1dc4:037b
    push(ds);
    ax = 0x81d1;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1dfcb: // 1dc4:038b
    if (memoryAGet(ds, 0x80c0) != 0x00)
        goto loc_1dffd;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x81de;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
loc_1dffd: // 1dc4:03bd
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_117db(); // 1162:01bb
    assert(cs == 0x1dc4);
    sp += 0x0004;
    if (memoryAGet(ds, 0x80c0) != 0x00)
        goto loc_1e07f;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x81e8;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0014;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_a99a(); // 0a34:065a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x81f3;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0014;
    push(ax);
    push(cs);
    cs = 0x0a34;
    sub_a99a(); // 0a34:065a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1e07f: // 1dc4:043f
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x81fe;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_9e3d(); // 06c1:322d
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0x0002;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(cs);
    cs = 0x0a34;
    sub_a9d5(); // 0a34:0695
    assert(cs == 0x1dc4);
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    memoryASet(ds, 0x80c0, 0x01);
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e0c4() // 1dc4:0484
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    if (memoryAGet(ds, 0x8db5) != 0x53)
        goto loc_1e0fd;
    push(ds);
    ax = 0x8208;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a186(); // 06c1:3576
    assert(cs == 0x1dc4);
    sp += 0x0006;
    push(ds);
    ax = 0x8214;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a186(); // 06c1:3576
    assert(cs == 0x1dc4);
    sp += 0x0006;
    push(ds);
    ax = 0x8220;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a186(); // 06c1:3576
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1e0fd: // 1dc4:04bd
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e0fe() // 1dc4:04be
{
    push(cs);
    sub_1e0c4(); // 1dc4:0484
    memoryASet16(ds, 0x9888, 0x0000); // score high
    memoryASet16(ds, 0x9886, 0x0000); // score low
    memoryASet16(ds, 0x9c5e, 0x0003); // lives
    switch (prehistorikLevel)
    {
        case 0: goto loc_1e102;
        case 1: goto loc_1e131;
        case 2: goto loc_1e175;
        case 3: goto loc_1e1b9;
        case 4: goto loc_1e1fd;
        case 5: goto loc_1e241;
        case 6: goto loc_1e285;
        case 7: goto loc_1e2c9;
        case 8: goto loc_1e2ed;
    }
loc_1e102: // 1dc4:04c2
    push(cs);
    sub_1dfa2(); // 1dc4:0362 - intro slide show
    memoryASet16(ds, 0x9888, 0x0000);
    memoryASet16(ds, 0x9886, 0x0000);
    memoryASet16(ds, 0x9c5e, 0x0003);
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1e131;
    push(ds);
    ax = 0x822a;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1e141;
loc_1e131: // 1dc4:04f1
    push(ds);
    ax = 0x8233;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1e141: // 1dc4:0501
    push(cs);
    cs = 0x13e0;
    sub_13e6f(); // 13e0:006f
    assert(cs == 0x1dc4);
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1e199;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1e175;
    push(ds);
    ax = 0x823f;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1e185;
loc_1e175: // 1dc4:0535
    push(ds);
    ax = 0x8249;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1e185: // 1dc4:0545
    push(cs);
    cs = 0x15bc;
    sub_165e0(); // 15bc:0a20
    assert(cs == 0x1dc4);
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1e199: // 1dc4:0559
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1e1dd;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1e1b9;
    push(ds);
    ax = 0x8256;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1e1c9;
loc_1e1b9: // 1dc4:0579
    push(ds);
    ax = 0x825f;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1e1c9: // 1dc4:0589
    push(cs);
    cs = 0x154e;
    sub_1554c(); // 154e:006c
    assert(cs == 0x1dc4);
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1e1dd: // 1dc4:059d
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1e221;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1e1fd;
    push(ds);
    ax = 0x826b;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1e20d;
loc_1e1fd: // 1dc4:05bd
    push(ds);
    ax = 0x8275;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1e20d: // 1dc4:05cd
    push(cs);
    cs = 0x16b9;
    sub_16e82(); // 16b9:02f2
    assert(cs == 0x1dc4);
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1e221: // 1dc4:05e1
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1e265;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1e241;
    push(ds);
    ax = 0x8282;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1e251;
loc_1e241: // 1dc4:0601
    push(ds);
    ax = 0x828c;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1e251: // 1dc4:0611
    push(cs);
    cs = 0x1463;
    sub_14d22(); // 1463:06f2
    assert(cs == 0x1dc4);
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1e265: // 1dc4:0625
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1e2a9;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1e285;
    push(ds);
    ax = 0x8299;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1e295;
loc_1e285: // 1dc4:0645
    push(ds);
    ax = 0x82a3;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1e295: // 1dc4:0655
    push(cs);
    cs = 0x173c;
    sub_17675(); // 173c:02b5
    assert(cs == 0x1dc4);
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1e2a9: // 1dc4:0669
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1e2ed;
    if (memoryAGet(ds, 0x8db5) == 0x49)
        goto loc_1e2c9;
    push(ds);
    ax = 0x82b0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
    goto loc_1e2d9;
loc_1e2c9: // 1dc4:0689
    push(ds);
    ax = 0x82b9;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x06c1;
    sub_a10f(); // 06c1:34ff
    assert(cs == 0x1dc4);
    sp += 0x0006;
loc_1e2d9: // 1dc4:0699
    push(cs);
    cs = 0x179f;
    sub_17bfb(); // 179f:020b
    assert(cs == 0x1dc4);
    push(cs);
    cs = 0x1162;
    sub_11704(); // 1162:00e4
    assert(cs == 0x1dc4);
    ax = 0;
    push(ax);
    push(cs);
    cs = 0x1162;
    sub_1179a(); // 1162:017a
    assert(cs == 0x1dc4);
    sp++;
    sp++;
loc_1e2ed: // 1dc4:06ad
    if ((short)memoryAGet16(ds, 0x9c5e) < (short)0x0000)
        goto loc_1e2fb;
    push(cs);
    sub_1ddc3(); // 1dc4:0183
    goto loc_1e102;
loc_1e2fb: // 1dc4:06bb
    push(cs);
    sub_1df27(); // 1dc4:02e7
    goto loc_1e102;
}
void sub_1e303() // 1dc4:06c3
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0005;
    ax <<= cl;
    si += ax;
    ax = memoryAGet16(ss, bp + 10);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    si += ax;
    push(si);
    push(cs);
    cs = 0x0cc2;
    sub_e0ea(); // 0cc2:14ca
    assert(cs == 0x1dc4);
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e32a() // 1dc4:06ea
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    bx = memoryAGet16(ds, 0x8b70);
    es = memoryAGet16(ds, 0x8b70 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = memoryAGet16(ds, 0x8bfa);
    es = memoryAGet16(ds, 0x8bfa + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x1f40);
    si = 0x000a;
    goto loc_1e39a;
loc_1e364: // 1dc4:0724
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    sub_1e303(); // 1dc4:06c3
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    ax = memoryAGet16(ss, bp - 6);
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d4ec(); // 0cc2:08cc
    assert(cs == 0x1dc4);
    sp += 0x000c;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0190);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0190);
    si += 0x000a;
loc_1e39a: // 1dc4:075a
    if (si < 0x00d2)
        goto loc_1e364;
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e3e9() // 1dc4:07a9
{
    int counter = 0;
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    bx = memoryAGet16(ds, 0x8b70);
    es = memoryAGet16(ds, 0x8b70 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = memoryAGet16(ds, 0x8bfa);
    es = memoryAGet16(ds, 0x8bfa + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0028);
    si = 0x0002;
    goto loc_1e456;
loc_1e422: // 1dc4:07e2
    if (counter++%2==0)
        sync(); // map scroll
    ax = 0;
    push(ax);
    push(si);
    push(cs);
    sub_1e303(); // 1dc4:06c3
    sp += 0x0004;
    ax = 0x00c8;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    ax = memoryAGet16(ss, bp - 6);
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d4ec(); // 0cc2:08cc
    assert(cs == 0x1dc4);
    sp += 0x000c;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    si += 0x0002;
loc_1e456: // 1dc4:0816
    if (si < 0x002a)
        goto loc_1e422;
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e4a4() // 1dc4:0864
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    bx = memoryAGet16(ds, 0x8bba);
    es = memoryAGet16(ds, 0x8bba + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = memoryAGet16(ds, 0x8bfa);
    es = memoryAGet16(ds, 0x8bfa + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x1db0);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x1e70);
    si = 0x00be;
    goto loc_1e551;
loc_1e51a: // 1dc4:08da
    push(si);
    ax = 0x00c0;
    push(ax);
    push(cs);
    sub_1e303(); // 1dc4:06c3
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    ax = memoryAGet16(ss, bp - 6);
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d4ec(); // 0cc2:08cc
    assert(cs == 0x1dc4);
    sp += 0x000c;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) - 0x0190);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0190);
    si -= 0x000a;
loc_1e551: // 1dc4:0911
    if (si)
        goto loc_1e51a;
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e59e() // 1dc4:095e
{
    int counter = 0;
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    bx = memoryAGet16(ds, 0x8bba);
    es = memoryAGet16(ds, 0x8bba + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = memoryAGet16(ds, 0x8b70);
    es = memoryAGet16(ds, 0x8b70 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0026);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0002);
    si = 0x0026;
    goto loc_1e64c;
loc_1e612: // 1dc4:09d2
    if (counter++%2==0)
        sync(); // map scroll
    ax = 0x00cb;
    push(ax);
    ax = si;
    ax += 0x0020;
    push(ax);
    push(cs);
    sub_1e303(); // 1dc4:06c3
    sp += 0x0004;
    ax = 0x00c8;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 2);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    ax = memoryAGet16(ss, bp - 6);
    push(ax);
    push(cs);
    cs = 0x0cc2;
    sub_d4ec(); // 0cc2:08cc
    assert(cs == 0x1dc4);
    sp += 0x000c;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) - 0x0002);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0002);
    si -= 0x0002;
loc_1e64c: // 1dc4:0a0c
    if (si)
        goto loc_1e612;
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8bfa;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    ax = 0;
    push(ax);
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(ds);
    ax = 0x8bba;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_3e59(); // 023f:1a69
    assert(cs == 0x1dc4);
    sp += 0x000a;
    push(ds);
    ax = 0x8b70;
    push(ax);
    push(cs);
    cs = 0x023f;
    sub_2c13(); // 023f:0823
    assert(cs == 0x1dc4);
    sp += 0x0004;
    sp = bp;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e69a() // 1e69:000a
{
    cs = pop();
    return;
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    dx = memoryAGet16(ds, 0x8a08);
    ax = memoryAGet16(ss, bp + 6);
    out(dx, al);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    dx++;
    ax = memoryAGet16(ss, bp + 8);
    out(dx, al);
    dx--;
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    in(al, dx);
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e6d6() // 1e6d:0006
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x2000;
    if (ax == 0)
        goto loc_1e712;
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    cx = ax;
    bx = memoryAGet16(ds, 0x89e6);
    bx <<= 1;
    bx = -bx;
    bx += 0x0044;
    stop(/*2*/); // 1e6d:0029 jmp bx - jump Indirect bx
    //   gap of 23 bytes
loc_1e712: // 1e6d:0042
    ah += memoryAGet(ss, bp + 8);
    ax += 0x0008;
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    ax = sar(ax, 1);
    if ((int16_t)ax >= 0)
        goto loc_1e727;
    ax = 0;
    goto loc_1e72f;
loc_1e727: // 1e6d:0057
    if ((short)ax < (short)0x05ff)
        goto loc_1e72f;
    ax = 0x05ff;
loc_1e72f: // 1e6d:005f
    di = ax;
    di >>= 1;
    di >>= 1;
    di >>= 1;
    di >>= 1;
    dx = di;
    bl = memoryAGet(ds, di + 33958);
    bh = 0;
    di = bx;
    di <<= 1;
    di <<= 1;
    di <<= 1;
    di <<= 1;
    di <<= 1;
    ax <<= 1;
    ax &= 0x001f;
    di += ax;
    ax = memoryAGet16(ds, di + 33478);
    di = dx;
    bl = memoryAGet(ds, di + 33862);
    bl--;
    if ((short)ax >= 0)
        goto loc_1e766;
    bl++;
loc_1e766: // 1e6d:0096
    if ((char)bl >= 0)
        goto loc_1e76e;
    bl++;
    ax = sar(ax, 1);
loc_1e76e: // 1e6d:009e
    push(bx);
    push(ax);
    ah = 0;
    push(ax);
    al = 0xa0;
    al += memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x1e6d);
    sp += 0x0004;
    ax = pop();
    bx = pop();
    al = ah;
    al &= 0x03;
    bl <<= 1;
    bl <<= 1;
    al += bl;
    al += memoryAGet(ss, bp + 12);
    ah = 0;
    push(ax);
    push(ax);
    ax = 0x00b0;
    ax += memoryAGet16(ss, bp + 6);
    push(ax);
    push(cs);
    cs = 0x1e69;
    sub_1e69a(); // 1e69:000a
    assert(cs == 0x1e6d);
    sp += 0x0004;
    ax = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e7b9() // 1e7a:0019
{
    CStackGuardFar sg(0, false);
    push(ax);
    al = 0x36;
    out(0x43, al);
    ax = pop();
    out(0x40, al);
    tl = al;
    al = ah;
    ah = tl;
    out(0x40, al);
    tl = al;
    al = ah;
    ah = tl;
    cs = pop();
}
void sub_1e7d8() // 1e7a:0038
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    tx = flags.carry | (flags.zero << 1);
    push(tx);
    flags.interrupts = false;
    memoryASet16(cs, 0x0008, ax);
    flags.carry = ax < 0x0001;
    memoryASet16(cs, 0x0006, 0x0000);
    memoryASet16(cs, 0x0006, memoryAGet16(cs, 0x0006) + flags.carry);
    push(cs);
    cs = 0x1e7a;
    sub_1e7b9(); // 1e7a:0019
    assert(cs == 0x1e7a);
    tx = pop();
    flags.carry = tx & 1;
    flags.zero = (tx << 1) & 1;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e7fc() // 1e7a:005c
{
    CStackGuardFar sg(0, false);
    push(ax);
    push(dx);
    ax = 0;
    push(cs);
    cs = 0x1e7a;
    sub_1e7b9(); // 1e7a:0019
    assert(cs == 0x1e7a);
    memoryASet16(cs, 0x0006, 0x0001);
    memoryASet16(cs, 0x0008, ax);
    memoryASet16(cs, 0x000a, ax);
    memoryASet(cs, 0x0018, 0x00);
    ax = ds;
    memoryASet16(cs, 0x0010, ax);
    push(es);
    ah = 0x35;
    al = 0x08;
    interrupt(0x21);
    memoryASet16(cs, 0x000c, bx);
    memoryASet16(cs, 0x000e, es);
    es = pop();
    push(ds);
    ah = 0x25;
    al = 0x08;
    dx = 0x00c8;
    bx = cs;
    ds = bx;
    interrupt(0x21);
    ds = pop();
    dx = pop();
    ax = pop();
    cs = pop();
}
void sub_1e844() // 1e7a:00a4
{
    CStackGuardFar sg(0, false);
    ax = 0;
    push(cs);
    cs = 0x1e7a;
    sub_1e7b9(); // 1e7a:0019
    assert(cs == 0x1e7a);
    push(ds);
    ah = 0x25;
    al = 0x08;
    dx = memoryAGet16(cs, 0x000c);
    ds = memoryAGet16(cs, 0x000c + 2);
    interrupt(0x21);
    ds = pop();
    cs = pop();
}
void sub_1e859() // 1e7a:00b9
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    tx = flags.carry | (flags.zero << 1);
    push(tx);
    flags.interrupts = false;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(cs, 0x0016, ax);
    tx = pop();
    flags.carry = tx & 1;
    flags.zero = (tx << 1) & 1;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e924() // 1e92:0004
{
    CStackGuardFar sg(0, false);
    interrupt(0x11);
    cs = pop();
}
void sub_1e958() // 1e93:0028
{
    CStackGuardFar sg(0, false);
    ah = 0x19;
    interrupt(0x21);
    ah = 0;
    cs = pop();
}
void sub_1e96d() // 1e96:000d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    ah = 0x43;
    al = memoryAGet(ss, bp + 10);
    cx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 6);
    ds = memoryAGet16(ss, bp + 6 + 2);
    interrupt(0x21);
    ds = pop();
    if (flags.carry)
        goto loc_1e984;
    tx = cx;
    cx = ax;
    ax = tx;
    goto loc_1e98a;
loc_1e984: // 1e96:0024
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1e96);
loc_1e98a: // 1e96:002a
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e98c() // 1e98:000c
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    if ((short)si < 0)
        goto loc_1e99c;
    if ((short)si < (short)0x0014)
        goto loc_1e9a7;
loc_1e99c: // 1e98:001c
    ax = 0x0006;
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1e98);
    goto loc_1e9b8;
loc_1e9a7: // 1e98:0027
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 34584, 0xffff);
    push(si);
    push(cs);
    cs = 0x1e9b;
    sub_1e9bb(); // 1e9b:000b
    assert(cs == 0x1e98);
    cx = pop();
loc_1e9b8: // 1e98:0038
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e9bb() // 1e9b:000b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    ah = 0x3e;
    bx = si;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1e9d6;
    bx <<= 1;
    memoryASet16(ds, bx + 34584, 0xffff);
    ax = 0;
    goto loc_1e9dc;
loc_1e9d6: // 1e9b:0026
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1e9b);
loc_1e9dc: // 1e9b:002c
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1e9e2() // 1e9e:0002
{
    cs = pop();
    return;
    CStackGuardFar sg(0, true);
    push(0x7777);
    sp--;
    sp--;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    push(es);
    cx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(cs, 0x0000);
    if (ax)
        goto loc_1ea19;
    ax = 0x0040;
    es = ax;
    bx = memoryAGet16(es, 0x006c);
    sub_1ea3d(); // 1e9e:005d
    bx -= memoryAGet16(es, 0x006c);
    bx = -bx;
    ax = 0x0037;
    mul(bx);
    if (cx <= ax)
        goto loc_1ea31;
    cx -= ax;
    ax = memoryAGet16(cs, 0x0000);
loc_1ea19: // 1e9e:0039
    bx = 0;
    es = bx;
    dl = memoryAGet(es, bx);
    if (cx == 0)
        goto loc_1ea31;
loc_1ea22: // 1e9e:0042
    si = cx;
    cx = ax;
loc_1ea26: // 1e9e:0046
    if (dl != memoryAGet(es, bx))
        goto loc_1ea2b;
loc_1ea2b: // 1e9e:004b
    if (--cx)
        goto loc_1ea26;
    cx = si;
    if (--cx)
        goto loc_1ea22;
loc_1ea31: // 1e9e:0051
    ax = memoryAGet16(cs, 0x0000);
    es = pop();
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp++;
    sp++;
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1ea3d() // 1e9e:005d
{
    CStackGuard sg(0, false);
    push(bx);
    push(cx);
    push(dx);
    push(es);
    ax = 0x0040;
    es = ax;
    bx = 0x006c;
    al = memoryAGet(es, bx);
    cx = 0xffff;
loc_1ea4f: // 1e9e:006f
    dl = memoryAGet(es, bx);
    if (al == dl)
        goto loc_1ea4f;
loc_1ea56: // 1e9e:0076
    if (dl != memoryAGet(es, bx))
        goto loc_1ea5d;
    if (--cx)
        goto loc_1ea56;
loc_1ea5d: // 1e9e:007d
    cx = -cx;
    cx--;
    ax = 0x0037;
    tx = cx;
    cx = ax;
    ax = tx;
    dx = 0;
    div(cx);
    memoryASet16(cs, 0x0000, ax);
loc_1ea6c: // 1e9e:008c
    al = memoryAGet(es, bx);
    cx = 0xffff;
loc_1ea72: // 1e9e:0092
    dl = memoryAGet(es, bx);
    if (al == dl)
        goto loc_1ea72;
    push(bx);
    push(dx);
    ax = 0x0037;
    push(ax);
    push(cs);
    cs = 0x1e9e;
    sub_1e9e2(); // 1e9e:0002
    assert(cs == 0x1e9e);
    ax = pop();
    dx = pop();
    bx = pop();
    if (dl == memoryAGet(es, bx))
        goto loc_1ea93;
    memoryASet16(cs, 0x0000, memoryAGet16(cs, 0x0000) - 1);
    goto loc_1ea6c;
loc_1ea93: // 1e9e:00b3
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
}
void sub_1ea99() // 1ea9:0009
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
loc_1ea9c: // 1ea9:000c
    ax = memoryAGet16(ds, 0x8708);
    memoryASet16(ds, 0x8708, memoryAGet16(ds, 0x8708) - 1);
    if (!ax)
        goto loc_1eab5;
    bx = memoryAGet16(ds, 0x8708);
    bx <<= 1;
    bx <<= 1;
    push(cs);
    cs = memoryAGet16(ds, bx + 40056 + 2);
    callIndirect(memoryAGet16(ds, bx + 40056 + 2), memoryAGet16(ds, bx + 40056));
    assert(cs == 0x1ea9);
    goto loc_1ea9c;
loc_1eab5: // 1ea9:0025
    push(cs);
    cs = memoryAGet16(ds, 0x870a + 2);
    callIndirect(memoryAGet16(ds, 0x870a + 2), memoryAGet16(ds, 0x870a));
    assert(cs == 0x1ea9);
    push(cs);
    cs = memoryAGet16(ds, 0x870e + 2);
    callIndirect(memoryAGet16(ds, 0x870e + 2), memoryAGet16(ds, 0x870e));
    assert(cs == 0x1ea9);
    push(cs);
    cs = memoryAGet16(ds, 0x8712 + 2);
    callIndirect(memoryAGet16(ds, 0x8712 + 2), memoryAGet16(ds, 0x8712));
    assert(cs == 0x1ea9);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    cs = 0x01ed;
    sub_1fd1(); // 01ed:0101
    assert(cs == 0x1ea9);
    cx = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1eacc() // 1eac:000c
{
    CStackGuard sg(4, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 10);
    si++;
    si -= memoryAGet16(ds, 0x006f);
    ax = si;
    ax += 0x003f;
    cx = 0x0006;
    ax >>= cl;
    si = ax;
    if (si != memoryAGet16(ds, 0x8716))
        goto loc_1eafb;
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet16(ds, 0x007d, es);
    memoryASet16(ds, 0x007b, bx);
    ax = 0x0001;
    goto loc_1eb59;
loc_1eafb: // 1eac:003b
    cx = 0x0006;
    si <<= cl;
    di = memoryAGet16(ds, 0x0081);
    ax = si;
    ax += memoryAGet16(ds, 0x006f);
    if (ax <= di)
        goto loc_1eb14;
    si = di;
    si -= memoryAGet16(ds, 0x006f);
loc_1eb14: // 1eac:0054
    push(si);
    push(memoryAGet16(ds, 0x006f));
    push(cs);
    cs = 0x1f5a;
    sub_1f5ab(); // 1f5a:000b
    assert(cs == 0x1eac);
    sp = bp;
    di = ax;
    if (di != 0xffff)
        goto loc_1eb43;
    ax = si;
    cx = 0x0006;
    ax >>= cl;
    memoryASet16(ds, 0x8716, ax);
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet16(ds, 0x007d, es);
    memoryASet16(ds, 0x007b, bx);
    ax = 0x0001;
    goto loc_1eb59;
    //   gap of 2 bytes
loc_1eb43: // 1eac:0083
    ax = memoryAGet16(ds, 0x006f);
    ax += di;
    dx = 0;
    dx = ax;
    ax = 0;
    memoryASet16(ds, 0x0081, dx);
    memoryASet16(ds, 0x007f, ax);
    ax = 0;
loc_1eb59: // 1eac:0099
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    sp += 4;
}
void sub_1eb5f() // 1eac:009f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ds, 0x0079);
    bx = memoryAGet16(ds, 0x0077);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1eac);
    if (flags.carry)
        goto loc_1eb99;
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ds, 0x0081);
    bx = memoryAGet16(ds, 0x007f);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1eac);
    if (!flags.zero && !flags.carry)
        goto loc_1eb99;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    sub_1eacc(); // 1eac:000c
    if (ax)
        goto loc_1eba0;
loc_1eb99: // 1eac:00d9
    ax = 0xffff;
    goto loc_1eba4;
    //   gap of 2 bytes
loc_1eba0: // 1eac:00e0
    ax = 0;
loc_1eba4: // 1eac:00e4
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1eba6() // 1eac:00e6
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    dx = memoryAGet16(ds, 0x007d);
    ax = memoryAGet16(ds, 0x007b);
    cx = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(ss, bp + 6);
    push(cs);
    cs = 0x01ed;
    sub_2122(); // 01ed:0252
    assert(cs == 0x1eac);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    cx = memoryAGet16(ds, 0x0079);
    bx = memoryAGet16(ds, 0x0077);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1eac);
    if (flags.carry)
        goto loc_1ebee;
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    cx = memoryAGet16(ds, 0x0081);
    bx = memoryAGet16(ds, 0x007f);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1eac);
    if (flags.zero || flags.carry)
        goto loc_1ebf6;
loc_1ebee: // 1eac:012e
    dx = 0xffff;
    ax = 0xffff;
    goto loc_1ec1b;
loc_1ebf6: // 1eac:0136
    bx = memoryAGet16(ds, 0x007b);
    es = memoryAGet16(ds, 0x007b + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    sub_1eacc(); // 1eac:000c
    if (ax)
        goto loc_1ec15;
    dx = 0xffff;
    ax = 0xffff;
    goto loc_1ec1b;
loc_1ec15: // 1eac:0155
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
loc_1ec1b: // 1eac:015b
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1ec1f() // 1ec1:000f
{
    CStackGuardFar sg(0, false);
    dx = memoryAGet16(ds, 0x0081);
    ax = memoryAGet16(ds, 0x007f);
    cx = memoryAGet16(ds, 0x007d);
    bx = memoryAGet16(ds, 0x007b);
    push(cs);
    cs = 0x01ed;
    sub_219f(); // 01ed:02cf
    assert(cs == 0x1ec1);
    cs = pop();
}
void sub_1ec34() // 1ec3:0004
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = memoryAGet16(ss, bp + 6);
    ax |= memoryAGet16(ss, bp + 8);
    if (ax)
        goto loc_1ec45;
    goto loc_1ee69;
loc_1ec45: // 1ec3:0015
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0xffff;
    bx = 0xfffc;
    push(cs);
    cs = 0x01ed;
    sub_2122(); // 01ed:0252
    assert(cs == 0x1ec3);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ds, 0x8748);
    es = memoryAGet16(ds, 0x8748 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    goto loc_1ecc0;
loc_1ec68: // 1ec3:0038
    cx = memoryAGet16(ss, bp - 2);
    bx = memoryAGet16(ss, bp - 4);
    push(cx);
    push(bx);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    bx = pop();
    cx = pop();
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (!flags.zero && !flags.carry)
        goto loc_1ecb3;
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    cx = memoryAGet16(ss, bp - 2);
    bx = memoryAGet16(ss, bp - 4);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (!flags.zero && !flags.carry)
        goto loc_1ecf2;
    cx = memoryAGet16(ss, bp - 6);
    bx = memoryAGet16(ss, bp - 8);
    push(cx);
    push(bx);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    bx = pop();
    cx = pop();
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (!flags.zero && !flags.carry)
        goto loc_1ecf2;
loc_1ecb3: // 1ec3:0083
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx + 4);
    es = memoryAGet16(es, tx + 4 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
loc_1ecc0: // 1ec3:0090
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    cx = memoryAGet16(ss, bp - 2);
    bx = memoryAGet16(ss, bp - 4);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (flags.zero || flags.carry)
        goto loc_1ec68;
    cx = memoryAGet16(ss, bp - 6);
    bx = memoryAGet16(ss, bp - 8);
    push(cx);
    push(bx);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    bx = pop();
    cx = pop();
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (!flags.zero && !flags.carry)
        goto loc_1ecf2;
    goto loc_1ec68;
loc_1ecf2: // 1ec3:00c2
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    cx = memoryAGet16(es, bx + 2);
    bx = memoryAGet16(es, bx);
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    push(cs);
    cs = 0x01ed;
    sub_2122(); // 01ed:0252
    assert(cs == 0x1ec3);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    cx = memoryAGet16(es, bx + 6);
    bx = memoryAGet16(es, bx + 4);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (!flags.zero)
        goto loc_1ed57;
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    dx = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(es, bx);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx + 4);
    es = memoryAGet16(es, tx + 4 + 2);
    flags.carry = (ax + memoryAGet16(es, bx)) >= 0x10000;
    ax += memoryAGet16(es, bx);
    dx += memoryAGet16(es, bx + 2) + flags.carry;
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx + 4);
    es = memoryAGet16(es, tx + 4 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 4, ax);
    goto loc_1ed6d;
loc_1ed57: // 1ec3:0127
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 4, ax);
loc_1ed6d: // 1ec3:013d
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    cx = memoryAGet16(es, bx + 2);
    bx = memoryAGet16(es, bx);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    push(cs);
    cs = 0x01ed;
    sub_2122(); // 01ed:0252
    assert(cs == 0x1ec3);
    cx = memoryAGet16(ss, bp - 6);
    bx = memoryAGet16(ss, bp - 8);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (!flags.zero)
        goto loc_1edcb;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    dx = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(es, bx);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    flags.carry = (ax + memoryAGet16(es, bx)) >= 0x10000;
    ax += memoryAGet16(es, bx);
    dx += memoryAGet16(es, bx + 2) + flags.carry;
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 4, ax);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    goto loc_1eddc;
loc_1edcb: // 1ec3:019b
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 4, ax);
loc_1eddc: // 1ec3:01ac
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    cx = memoryAGet16(es, bx + 2);
    bx = memoryAGet16(es, bx);
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    push(cs);
    cs = 0x01ed;
    sub_2122(); // 01ed:0252
    assert(cs == 0x1ec3);
    bx = ax;
    cx = dx;
    push(cx);
    push(bx);
    ax = 0;
    push(ax);
    push(ax);
    push(cs);
    cs = 0x1eac;
    sub_1eba6(); // 1eac:00e6
    assert(cs == 0x1ec3);
    cx = pop();
    cx = pop();
    bx = pop();
    cx = pop();
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (!flags.zero)
        goto loc_1ee5e;
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
    goto loc_1ee23;
loc_1ee16: // 1ec3:01e6
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx + 4);
    es = memoryAGet16(es, tx + 4 + 2);
    memoryASet16(ss, bp - 2, es);
    memoryASet16(ss, bp - 4, bx);
loc_1ee23: // 1ec3:01f3
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    cx = memoryAGet16(ss, bp - 6);
    bx = memoryAGet16(ss, bp - 8);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1ec3);
    if (!flags.zero)
        goto loc_1ee16;
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 4, ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    cs = 0x1eac;
    sub_1eb5f(); // 1eac:009f
    assert(cs == 0x1ec3);
    cx = pop();
    cx = pop();
loc_1ee5e: // 1ec3:022e
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(ds, 0x874a, es);
    memoryASet16(ds, 0x8748, bx);
loc_1ee69: // 1ec3:0239
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1ee6d() // 1ee6:000d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = 0x4201;
    bx = memoryAGet16(ss, bp + 6);
    cx = 0;
    dx = 0;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1eea5;
    push(dx);
    push(ax);
    ax = 0x4202;
    cx = 0;
    dx = 0;
    interrupt(0x21);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 2, dx);
    dx = pop();
    cx = pop();
    if (flags.carry)
        goto loc_1eea5;
    ax = 0x4200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1eea5;
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    goto loc_1eeac;
loc_1eea5: // 1ee6:0045
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1ee6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
loc_1eeac: // 1ee6:004c
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1eeb0() // 1eeb:0000
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x000c;
    ax = memoryAGet16(ss, bp + 6);
    ax |= memoryAGet16(ss, bp + 8);
    if (ax)
        goto loc_1eec5;
    dx = 0;
    ax = 0;
    goto loc_1f019;
loc_1eec5: // 1eeb:0015
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    flags.carry = (ax + 0x0009) >= 0x10000;
    ax += 0x0009;
    dx += flags.carry;
    ax &= 0xfffe;
    dx &= 0xffff;
    memoryASet16(ss, bp + 8, dx);
    memoryASet16(ss, bp + 6, ax);
    bx = memoryAGet16(ds, 0x8748);
    es = memoryAGet16(ds, 0x8748 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx + 4);
    es = memoryAGet16(es, tx + 4 + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
loc_1eef5: // 1eeb:0045
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    dx = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(es, bx);
    if (dx >= memoryAGet16(ss, bp + 8))
        goto loc_1ef07;
    goto loc_1efa5;
loc_1ef07: // 1eeb:0057
    if (dx != memoryAGet16(ss, bp + 8))
        goto loc_1ef11;
    if (ax >= memoryAGet16(ss, bp + 6))
        goto loc_1ef11;
    goto loc_1efa5;
loc_1ef11: // 1eeb:0061
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    dx = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(es, bx);
    cx = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(ss, bp + 6);
    flags.carry = (bx + 0x0008) >= 0x10000;
    bx += 0x0008;
    cx += flags.carry;
    if (dx > cx)
        goto loc_1ef49;
    if (dx != cx)
        goto loc_1ef31;
    if (ax > bx)
        goto loc_1ef49;
loc_1ef31: // 1eeb:0081
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    dx = memoryAGet16(es, bx + 6);
    ax = memoryAGet16(es, bx + 4);
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet16(es, bx + 6, dx);
    memoryASet16(es, bx + 4, ax);
    goto loc_1ef8e;
loc_1ef49: // 1eeb:0099
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    dx = memoryAGet16(es, bx + 2);
    ax = memoryAGet16(es, bx);
    flags.carry = ax < memoryAGet16(ss, bp + 6);
    ax -= memoryAGet16(ss, bp + 6);
    dx -= memoryAGet16(ss, bp + 8) + flags.carry;
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    cx = memoryAGet16(es, bx + 2);
    bx = memoryAGet16(es, bx);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    push(cs);
    cs = 0x01ed;
    sub_2122(); // 01ed:0252
    assert(cs == 0x1eeb);
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
loc_1ef8e: // 1eeb:00de
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 8 + 2);
    memoryASet16(ds, 0x874a, es);
    memoryASet16(ds, 0x8748, bx);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0004;
    goto loc_1f019;
loc_1efa5: // 1eeb:00f5
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    if (dx != memoryAGet16(ds, 0x874a))
        goto loc_1efb9;
    if (ax != memoryAGet16(ds, 0x8748))
        goto loc_1efb9;
    goto loc_1efd2;
loc_1efb9: // 1eeb:0109
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(ss, bp - 6, es);
    memoryASet16(ss, bp - 8, bx);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    tx = bx;
    bx = memoryAGet16(es, tx + 4);
    es = memoryAGet16(es, tx + 4 + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    goto loc_1eef5;
loc_1efd2: // 1eeb:0122
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    cs = 0x1eac;
    sub_1eba6(); // 1eac:00e6
    assert(cs == 0x1eeb);
    cx = pop();
    cx = pop();
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp - 2) != 0xffff)
        goto loc_1eff7;
    if (memoryAGet16(ss, bp - 4) != 0xffff)
        goto loc_1eff7;
    dx = 0;
    ax = 0;
    goto loc_1f019;
loc_1eff7: // 1eeb:0147
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ss, bp - 4 + 2);
    memoryASet16(ss, bp - 10, es);
    memoryASet16(ss, bp - 12, bx);
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    bx = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 12 + 2);
    memoryASet16(es, bx + 2, dx);
    memoryASet16(es, bx, ax);
    dx = memoryAGet16(ss, bp - 10);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0004;
loc_1f019: // 1eeb:0169
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f01d() // 1f01:000d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    cs = 0x1ec3;
    sub_1ec34(); // 1ec3:0004
    assert(cs == 0x1f01);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f09f() // 1f09:000f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ah = 0x35;
    al = memoryAGet(ss, bp + 6);
    interrupt(0x21);
    ax = bx;
    dx = es;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f0af() // 1f09:001f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ah = 0x25;
    al = memoryAGet(ss, bp + 6);
    push(ds);
    dx = memoryAGet16(ss, bp + 8);
    ds = memoryAGet16(ss, bp + 8 + 2);
    interrupt(0x21);
    ds = pop();
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f0c9() // 1f0c:0009
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    dx = memoryAGet16(ss, bp + 6);
    in(al, dx);
    ah = 0;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f0d4() // 1f0d:0004
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(ss);
    ax = bp - 0x8;
    push(ax);
    push(cs);
    cs = 0x1f59;
    sub_1f590(); // 1f59:0000
    assert(cs == 0x1f0d);
    cx = pop();
    cx = pop();
    push(ss);
    ax = bp - 0x8;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    cs = 0x1f0d;
    sub_1f106(); // 1f0d:0036
    assert(cs == 0x1f0d);
    sp += 0x000e;
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f106() // 1f0d:0036
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x000e;
    push(ds);
    cx = bp - 0xa;
    memoryASet16(ss, bp - 14, cx);
    memoryASet16(ss, bp - 12, ss);
    memoryASet(ss, bp - 10, 0x55);
    memoryASet(ss, bp - 9, 0xcd);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet(ss, bp - 8, al);
    memoryASet16(ss, bp - 7, 0xcb5d);
    if (al < 0x25)
        goto loc_1f144;
    if (al > 0x26)
        goto loc_1f144;
    memoryASet(ss, bp - 7, 0x36);
    memoryASet16(ss, bp - 6, 0x068f);
    memoryASet16(ss, bp - 4, cx);
    memoryASet16(ss, bp - 2, 0xcb5d);
loc_1f144: // 1f0d:0074
    si = memoryAGet16(ss, bp + 20);
    ds = memoryAGet16(ss, bp + 20 + 2);
    push(memoryAGet16(ds, si));
    push(memoryAGet16(ds, si + 6));
    si = memoryAGet16(ss, bp + 12);
    ds = memoryAGet16(ss, bp + 12 + 2);
    ax = memoryAGet16(ds, si);
    bx = memoryAGet16(ds, si + 2);
    cx = memoryAGet16(ds, si + 4);
    dx = memoryAGet16(ds, si + 6);
    di = memoryAGet16(ds, si + 10);
    si = memoryAGet16(ds, si + 8);
    ds = pop();
    es = pop();
    {
        uint8_t buf[] = {
            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)),
            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+1),
            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+2),
            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+3),
            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+4),
            memoryAGet(memoryAGet16(ss, bp - 14 + 2), memoryAGet16(ss, bp - 14)+5),
        };
        if (buf[0] == 0x55 && buf[1] == 0xcd && buf[3] == 0x5d && buf[4] == 0xcb)
        {
            interrupt(buf[2]);
        } else
        {
            assert(0);
        }
    }
    tx = flags.carry | (flags.zero << 1);
    push(tx);
    tx = flags.carry | (flags.zero << 1);
    push(tx);
    push(si);
    push(ds);
    push(es);
    si = memoryAGet16(ss, bp + 20);
    ds = memoryAGet16(ss, bp + 20 + 2);
    memoryASet16(ds, si, pop());
    memoryASet16(ds, si + 6, pop());
    si = memoryAGet16(ss, bp + 16);
    ds = memoryAGet16(ss, bp + 16 + 2);
    memoryASet16(ds, si + 8, pop());
    memoryASet16(ds, si + 14, pop());
    memoryASet16(ds, si + 12, pop());
    memoryASet16(ds, si + 12, memoryAGet16(ds, si + 12) & 0x0001);
    memoryASet16(ds, si + 10, di);
    memoryASet16(ds, si + 6, dx);
    memoryASet16(ds, si + 4, cx);
    memoryASet16(ds, si + 2, bx);
    memoryASet16(ds, si, ax);
    ds = pop();
    if (memoryAGet16(ds, si + 12) == 0)
        goto loc_1f19c;
    push(ax);
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f0d);
    ax = pop();
loc_1f19c: // 1f0d:00cc
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f1a2() // 1f1a:0002
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    ah = 0x44;
    al = memoryAGet(ss, bp + 8);
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 14);
    dx = memoryAGet16(ss, bp + 10);
    ds = memoryAGet16(ss, bp + 10 + 2);
    interrupt(0x21);
    ds = pop();
    if (flags.carry)
        goto loc_1f1c5;
    if (memoryAGet16(ss, bp + 8) != 0x0000)
        goto loc_1f1c3;
    ax = dx;
    goto loc_1f1cb;
loc_1f1c3: // 1f1a:0023
    goto loc_1f1cb;
loc_1f1c5: // 1f1a:0025
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f1a);
loc_1f1cb: // 1f1a:002b
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f1cd() // 1f1c:000d
{
    CStackGuardFar sg(2, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    si = memoryAGet16(ss, bp + 8);
    if ((short)si < 0)
        goto loc_1f1ec;
    if (si <= 0x0058)
        goto loc_1f1e0;
loc_1f1dd: // 1f1c:001d
    si = 0x0057;
loc_1f1e0: // 1f1c:0020
    memoryASet16(ds, 0x8750, si);
    al = memoryAGet(ds, si + 34642);
    cbw();
    tx = si;
    si = ax;
    ax = tx;
    goto loc_1f1f9;
loc_1f1ec: // 1f1c:002c
    si = -si;
    if (si > 0x0022)
        goto loc_1f1dd;
    memoryASet16(ds, 0x8750, 0xffff);
loc_1f1f9: // 1f1c:0039
    ax = si;
    memoryASet16(ds, 0x0073, ax);
    ax = 0xffff;
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
    sp += 2;
}
void sub_1f206() // 1f20:0006
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    memoryASet16(ds, bx + 34584, memoryAGet16(ds, bx + 34584) & 0xfdff);
    ah = 0x42;
    al = memoryAGet(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 8);
    interrupt(0x21);
    if (flags.carry)
        goto loc_1f228;
    goto loc_1f22f;
loc_1f228: // 1f20:0028
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f20);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
loc_1f22f: // 1f20:002f
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f231() // 1f23:0001
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0;
    push(dx);
    push(ax);
    push(cs);
    cs = 0x1eeb;
    sub_1eeb0(); // 1eeb:0000
    assert(cs == 0x1f23);
    sp = bp;
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f244() // 1f24:0004
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    push(ds);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 10);
    cx = memoryAGet16(ss, bp + 16);
    bx = memoryAGet16(ss, bp + 14);
    push(cs);
    cs = 0x01ed;
    sub_217d(); // 01ed:02ad
    assert(cs == 0x1f24);
    if (!flags.carry)
        goto loc_1f263;
    flags.direction = true;
    ax = 0x0001;
    goto loc_1f266;
loc_1f263: // 1f24:0023
    flags.direction = false;
    ax = 0;
loc_1f266: // 1f24:0026
    si = memoryAGet16(ss, bp + 10);
    ds = memoryAGet16(ss, bp + 10 + 2);
    di = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    cx = memoryAGet16(ss, bp + 18);
    if (!ax)
        goto loc_1f279;
    si += cx;
    si--;
    di += cx;
    di--;
loc_1f279: // 1f24:0039
    if (!(di & 0x0001))
        goto loc_1f283;
    if (cx == 0)
        goto loc_1f292;
    movsb<MemAuto, MemAuto, DirAuto>();
    cx--;
loc_1f283: // 1f24:0043
    si -= ax;
    di -= ax;
    flags.carry = cx & 1;
    cx >>= 1;
    rep_movsw<MemAuto, MemAuto, DirAuto>();
    if (!flags.carry)
        goto loc_1f292;
    si += ax;
    di += ax;
    movsb<MemAuto, MemAuto, DirAuto>();
loc_1f292: // 1f24:0052
    flags.direction = false;
    ds = pop();
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f2b8() // 1f2b:0008
{
    CStackGuard sg(6, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    cx = memoryAGet16(ss, bp + 4);
    ah = 0x3c;
    dx = memoryAGet16(ss, bp + 6);
    ds = memoryAGet16(ss, bp + 6 + 2);
    interrupt(0x21);
    ds = pop();
    if (flags.carry)
        goto loc_1f2cb;
    goto loc_1f2d1;
loc_1f2cb: // 1f2b:001b
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f2b);
loc_1f2d1: // 1f2b:0021
    bp = pop();
    assert(pop() == 0x7777);
    sp += 6;
}
void sub_1f2d5() // 1f2b:0025
{
    CStackGuard sg(2, true);
    push(0x7777);
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 4);
    cx = 0;
    dx = 0;
    ah = 0x40;
    interrupt(0x21);
    bp = pop();
    assert(pop() == 0x7777);
    sp += 2;
}
void sub_1f2e7() // 1f2b:0037
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp--;
    sp--;
    di = memoryAGet16(ss, bp + 14);
    if (di & 0xc000)
        goto loc_1f2ff;
    ax = memoryAGet16(ds, 0x874c);
    ax &= 0xc000;
    di |= ax;
loc_1f2ff: // 1f2b:004f
    if (di & 0x0100)
        goto loc_1f308;
    goto loc_1f3a6;
loc_1f308: // 1f2b:0058
    ax = memoryAGet16(ds, 0x874e);
    memoryASet16(ss, bp + 16, memoryAGet16(ss, bp + 16) & ax);
    ax = memoryAGet16(ss, bp + 16);
    if (ax & 0x0180)
        goto loc_1f31f;
    ax = 0x0001;
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f2b);
loc_1f31f: // 1f2b:006f
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1e96;
    sub_1e96d(); // 1e96:000d
    assert(cs == 0x1f2b);
    sp += 0x0006;
    memoryASet16(ss, bp - 2, ax);
    if (ax != 0xffff)
        goto loc_1f34b;
    if (!(memoryAGet16(ss, bp + 16) & 0x0080))
        goto loc_1f343;
    ax = 0;
    goto loc_1f346;
loc_1f343: // 1f2b:0093
    ax = 0x0001;
loc_1f346: // 1f2b:0096
    memoryASet16(ss, bp - 2, ax);
    goto loc_1f361;
loc_1f34b: // 1f2b:009b
    if (!(di & 0x0400))
        goto loc_1f35f;
    ax = 0x0050;
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f2b);
    goto loc_1f427;
    //   gap of 2 bytes
loc_1f35f: // 1f2b:00af
    goto loc_1f3a6;
loc_1f361: // 1f2b:00b1
    if (!(di & 0x00f0))
        goto loc_1f38b;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    ax = 0;
    push(ax);
    sub_1f2b8(); // 1f2b:0008
    si = ax;
    ax = si;
    if ((short)ax >= 0)
        goto loc_1f380;
    ax = si;
    goto loc_1f427;
loc_1f380: // 1f2b:00d0
    push(si);
    push(cs);
    cs = 0x1e9b;
    sub_1e9bb(); // 1e9b:000b
    assert(cs == 0x1f2b);
    cx = pop();
    goto loc_1f3ab;
    //   gap of 2 bytes
loc_1f38b: // 1f2b:00db
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp - 2));
    sub_1f2b8(); // 1f2b:0008
    si = ax;
    ax = si;
    if ((short)ax >= 0)
        goto loc_1f3a4;
    ax = si;
    goto loc_1f427;
loc_1f3a4: // 1f2b:00f4
    goto loc_1f404;
loc_1f3a6: // 1f2b:00f6
    memoryASet16(ss, bp - 2, 0x0000);
loc_1f3ab: // 1f2b:00fb
    push(di);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1f42;
    sub_1f42d(); // 1f42:000d
    assert(cs == 0x1f2b);
    sp += 0x0006;
    si = ax;
    ax = si;
    if ((short)ax < 0)
        goto loc_1f404;
    ax = 0;
    push(ax);
    push(si);
    push(cs);
    cs = 0x1f1a;
    sub_1f1a2(); // 1f1a:0002
    assert(cs == 0x1f2b);
    cx = pop();
    cx = pop();
    if (!(ax & 0x0080))
        goto loc_1f3d8;
    di |= 0x2000;
    goto loc_1f3e2;
loc_1f3d8: // 1f2b:0128
    if (!(di & 0x0200))
        goto loc_1f3e2;
    push(si);
    sub_1f2d5(); // 1f2b:0025
loc_1f3e2: // 1f2b:0132
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1f404;
    if (!(di & 0x00f0))
        goto loc_1f404;
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1e96;
    sub_1e96d(); // 1e96:000d
    assert(cs == 0x1f2b);
    sp += 0x0008;
loc_1f404: // 1f2b:0154
    if ((short)si < 0)
        goto loc_1f425;
    if (!(di & 0x0300))
        goto loc_1f413;
    ax = 0x1000;
    goto loc_1f415;
loc_1f413: // 1f2b:0163
    ax = 0;
loc_1f415: // 1f2b:0165
    dx = di;
    dx &= 0xf8ff;
    ax |= dx;
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 34584, ax);
loc_1f425: // 1f2b:0175
    ax = si;
loc_1f427: // 1f2b:0177
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f42d() // 1f42:000d
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    al = 0x01;
    cx = memoryAGet16(ss, bp + 12);
    if (cx & 0x0002)
        goto loc_1f446;
    al = 0x02;
    if (cx & 0x0004)
        goto loc_1f446;
    al = 0x00;
loc_1f446: // 1f42:0026
    push(ds);
    dx = memoryAGet16(ss, bp + 8);
    ds = memoryAGet16(ss, bp + 8 + 2);
    cl = 0xf0;
    cl &= memoryAGet(ss, bp + 12);
    al |= cl;
    ah = 0x3d;
    interrupt(0x21);
    ds = pop();
    if (flags.carry)
        goto loc_1f46f;
    si = ax;
    ax = memoryAGet16(ss, bp + 12);
    ax &= 0xf8ff;
    ax |= 0x8000;
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 34584, ax);
    ax = si;
    goto loc_1f475;
loc_1f46f: // 1f42:004f
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f42);
loc_1f475: // 1f42:0055
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f489() // 1f47:0019
{
    CStackGuardFar sg(0, false);
    dx = memoryAGet16(ds, 0x87ae);
    ax = memoryAGet16(ds, 0x87ac);
    cx = 0x015a;
    bx = 0x4e35;
    push(cs);
    cs = 0x01ed;
    sub_2109(); // 01ed:0239
    assert(cs == 0x1f47);
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += flags.carry;
    memoryASet16(ds, 0x87ae, dx);
    memoryASet16(ds, 0x87ac, ax);
    ax = memoryAGet16(ds, 0x87ae);
    ax &= 0x7fff;
    cs = pop();
}
void sub_1f4af() // 1f4a:000f
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    if (ax < 0x0002)
        goto loc_1f4cd;
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    if (!(memoryAGet16(ds, bx + 34584) & 0x0200))
        goto loc_1f4d2;
loc_1f4cd: // 1f4a:002d
    ax = 0;
    goto loc_1f56c;
loc_1f4d2: // 1f4a:0032
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1f57;
    sub_1f572(); // 1f57:0002
    assert(cs == 0x1f4a);
    sp += 0x0008;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    if (ax < 0x0002)
        goto loc_1f4ff;
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    if (!(memoryAGet16(ds, bx + 34584) & 0x8000))
        goto loc_1f505;
loc_1f4ff: // 1f4a:005f
    ax = memoryAGet16(ss, bp - 4);
    goto loc_1f56c;
loc_1f505: // 1f4a:0065
    cx = memoryAGet16(ss, bp - 4);
    si = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    di = si;
    bx = si;
    flags.direction = false;
loc_1f510: // 1f4a:0070
    lodsb_es<MemAuto, DirAuto>();
    if (al == 0x1a)
        goto loc_1f546;
    if (al == 0x0d)
        goto loc_1f51f;
    stosb<MemAuto, DirAuto>();
    if (--cx)
        goto loc_1f510;
    goto loc_1f53e;
loc_1f51f: // 1f4a:007f
    if (--cx)
        goto loc_1f510;
    push(es);
    push(bx);
    ax = 0x0001;
    push(ax);
    ax = bp - 0x1;
    push(ss);
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1f57;
    sub_1f572(); // 1f57:0002
    assert(cs == 0x1f4a);
    sp += 0x0008;
    bx = pop();
    es = pop();
    flags.direction = false;
    al = memoryAGet(ss, bp - 1);
    stosb<MemAuto, DirAuto>();
loc_1f53e: // 1f4a:009e
    if (di != bx)
        goto loc_1f544;
    goto loc_1f4d2;
loc_1f544: // 1f4a:00a4
    goto loc_1f568;
loc_1f546: // 1f4a:00a6
    push(bx);
    ax = 0x0002;
    push(ax);
    flags.carry = cx != 0;
    cx = -cx;
    ax -= ax + flags.carry;
    push(ax);
    push(cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1f20;
    sub_1f206(); // 1f20:0006
    assert(cs == 0x1f4a);
    sp += 0x0008;
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    memoryASet16(ds, bx + 34584, memoryAGet16(ds, bx + 34584) | 0x0200);
    bx = pop();
loc_1f568: // 1f4a:00c8
    ax = di;
    ax -= bx;
loc_1f56c: // 1f4a:00cc
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f572() // 1f57:0002
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    push(ds);
    ah = 0x3f;
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 8);
    ds = memoryAGet16(ss, bp + 8 + 2);
    interrupt(0x21);
    ds = pop();
    if (flags.carry)
        goto loc_1f588;
    goto loc_1f58e;
loc_1f588: // 1f57:0018
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f57);
loc_1f58e: // 1f57:001e
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f590() // 1f59:0000
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(bp);
    bp = sp;
    ax = es;
    si = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 8 + 2);
    memoryASet16(es, si, ax);
    memoryASet16(es, si + 2, cs);
    memoryASet16(es, si + 4, ss);
    memoryASet16(es, si + 6, ds);
    bp = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f5ab() // 1f5a:000b
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    ah = 0x4a;
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 6);
    interrupt(0x21);
    if (flags.carry)
        goto loc_1f5bf;
    ax = 0xffff;
    goto loc_1f5c7;
loc_1f5bf: // 1f5a:001f
    push(bx);
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f5a);
    ax = pop();
loc_1f5c7: // 1f5a:0027
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f5c9() // 1f5c:0009
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    ax = 0x34dd;
    dx = 0x0012;
    if (dx >= bx)
        goto loc_1f5f3;
    div(bx);
    bx = ax;
    in(al, 0x61);
    if (al & 0x03)
        goto loc_1f5eb;
    al |= 0x03;
    out(0x61, al);
    al = 0xb6;
    out(0x43, al);
loc_1f5eb: // 1f5c:002b
    al = bl;
    out(0x42, al);
    al = bh;
    out(0x42, al);
loc_1f5f3: // 1f5c:0033
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f5f5() // 1f5c:0035
{
    CStackGuardFar sg(0, false);
    in(al, 0x61);
    al &= 0xfc;
    out(0x61, al);
    cs = pop();
}
void sub_1f63a() // 1f63:000a
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    push(ds);
    flags.direction = false;
    di = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
    si = di;
    al = 0;
    cx = 0xffff;
    repne_scasb<MemAuto, DirAuto>(al);
    cx = ~cx;
    di = si;
    si = memoryAGet16(ss, bp + 10);
    ds = memoryAGet16(ss, bp + 10 + 2);
    repe_cmpsb<MemData, MemData, DirAuto>();
    al = memoryAGet(ds, si + 65535);
    al -= memoryAGet(es, di + 65535);
    cbw();
    ds = pop();
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f663() // 1f66:0003
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    push(ds);
    flags.direction = false;
    si = memoryAGet16(ss, bp + 10);
    ds = memoryAGet16(ss, bp + 10 + 2);
    di = memoryAGet16(ss, bp + 14);
    es = memoryAGet16(ss, bp + 14 + 2);
loc_1f670: // 1f66:0010
    lodsb<MemAuto, DirAuto>();
    ah = memoryAGet(es, di);
    if (!al)
        goto loc_1f696;
    flags.zero = memoryAGet(es, di++) == al;
    if (flags.zero)
        goto loc_1f670;
    if (al < 0x61)
        goto loc_1f685;
    if (al > 0x7a)
        goto loc_1f685;
    al -= 0x20;
loc_1f685: // 1f66:0025
    if (ah < 0x61)
        goto loc_1f692;
    if (ah > 0x7a)
        goto loc_1f692;
    ah -= 0x20;
loc_1f692: // 1f66:0032
    if (al == ah)
        goto loc_1f670;
loc_1f696: // 1f66:0036
    al -= ah;
    cbw();
    ds = pop();
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f6b7() // 1f6b:0007
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(si);
    push(di);
    push(bp);
    bp = sp;
    sp -= 0x008e;
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    if (ax >= 0x0002)
        goto loc_1f6ce;
    ax = 0;
    goto loc_1f803;
loc_1f6ce: // 1f6b:001e
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    if (!(memoryAGet16(ds, bx + 34584) & 0x8000))
        goto loc_1f6f2;
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1f80;
    sub_1f809(); // 1f80:0009
    assert(cs == 0x1f6b);
    sp += 0x0008;
    goto loc_1f803;
loc_1f6f2: // 1f6b:0042
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    memoryASet16(ds, bx + 34584, memoryAGet16(ds, bx + 34584) & 0xfdff);
    bx = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 12 + 2);
    memoryASet16(ss, bp - 134, es);
    memoryASet16(ss, bp - 136, bx);
    si = memoryAGet16(ss, bp + 16);
    bx = ss;
    es = bx;
    bx = bp - 0x82;
    memoryASet16(ss, bp - 140, es);
    memoryASet16(ss, bp - 142, bx);
loc_1f71b: // 1f6b:006b
    if (si)
        goto loc_1f722;
    goto loc_1f7b9;
loc_1f722: // 1f6b:0072
    si--;
    bx = memoryAGet16(ss, bp - 136);
    es = memoryAGet16(ss, bp - 136 + 2);
    memoryASet16(ss, bp - 136, memoryAGet16(ss, bp - 136) + 1);
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 137, al);
    if (al != 0x0a)
        goto loc_1f743;
    bx = memoryAGet16(ss, bp - 142);
    es = memoryAGet16(ss, bp - 142 + 2);
    memoryASet(es, bx, 0x0d);
    memoryASet16(ss, bp - 142, memoryAGet16(ss, bp - 142) + 1);
loc_1f743: // 1f6b:0093
    al = memoryAGet(ss, bp - 137);
    bx = memoryAGet16(ss, bp - 142);
    es = memoryAGet16(ss, bp - 142 + 2);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 142, memoryAGet16(ss, bp - 142) + 1);
    ax = memoryAGet16(ss, bp - 142);
    cx = ss;
    bx = bp - 0x82;
    ax -= bx;
    if ((short)ax < (short)0x0080)
        goto loc_1f7b6;
    ax = memoryAGet16(ss, bp - 142);
    cx = ss;
    bx = bp - 0x82;
    ax -= bx;
    di = ax;
    push(di);
    push(ss);
    ax = bp - 0x82;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1f80;
    sub_1f809(); // 1f80:0009
    assert(cs == 0x1f6b);
    sp += 0x0008;
    memoryASet16(ss, bp - 132, ax);
    if (ax == di)
        goto loc_1f7a6;
    if (memoryAGet16(ss, bp - 132) >= 0x0000)
        goto loc_1f799;
    ax = 0xffff;
    goto loc_1f803;
    //   gap of 2 bytes
loc_1f799: // 1f6b:00e9
    ax = memoryAGet16(ss, bp + 16);
    ax -= si;
    ax += memoryAGet16(ss, bp - 132);
    ax -= di;
    goto loc_1f803;
loc_1f7a6: // 1f6b:00f6
    bx = ss;
    es = bx;
    bx = bp - 0x82;
    memoryASet16(ss, bp - 140, es);
    memoryASet16(ss, bp - 142, bx);
loc_1f7b6: // 1f6b:0106
    goto loc_1f71b;
loc_1f7b9: // 1f6b:0109
    ax = memoryAGet16(ss, bp - 142);
    cx = ss;
    bx = bp - 0x82;
    ax -= bx;
    di = ax;
    ax = di;
    if (stop(/*condition!*/))
        goto loc_1f800;
    push(di);
    push(ss);
    ax = bp - 0x82;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    cs = 0x1f80;
    sub_1f809(); // 1f80:0009
    assert(cs == 0x1f6b);
    sp += 0x0008;
    memoryASet16(ss, bp - 132, ax);
    if (ax == di)
        goto loc_1f800;
    if (memoryAGet16(ss, bp - 132) >= 0x0000)
        goto loc_1f7f5;
    ax = 0xffff;
    goto loc_1f803;
    //   gap of 2 bytes
loc_1f7f5: // 1f6b:0145
    ax = memoryAGet16(ss, bp + 16);
    ax += memoryAGet16(ss, bp - 132);
    ax -= di;
    goto loc_1f803;
loc_1f800: // 1f6b:0150
    ax = memoryAGet16(ss, bp + 16);
loc_1f803: // 1f6b:0153
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    assert(pop() == 0x7777);
    cs = pop();
}
void sub_1f809() // 1f80:0009
{
    CStackGuardFar sg(0, true);
    push(0x7777);
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    if (!(memoryAGet16(ds, bx + 34584) & 0x0800))
        goto loc_1f82b;
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    cs = 0x1f20;
    sub_1f206(); // 1f20:0006
    assert(cs == 0x1f80);
    sp = bp;
loc_1f82b: // 1f80:002b
    push(ds);
    ah = 0x40;
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 8);
    ds = memoryAGet16(ss, bp + 8 + 2);
    interrupt(0x21);
    ds = pop();
    if (flags.carry)
        goto loc_1f84b;
    push(ax);
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    memoryASet16(ds, bx + 34584, memoryAGet16(ds, bx + 34584) | 0x1000);
    ax = pop();
    goto loc_1f851;
loc_1f84b: // 1f80:004b
    push(ax);
    push(cs);
    cs = 0x1f1c;
    sub_1f1cd(); // 1f1c:000d
    assert(cs == 0x1f80);
loc_1f851: // 1f80:0051
    bp = pop();
    assert(pop() == 0x7777);
    cs = pop();
}

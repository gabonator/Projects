diff --git a/./cat.cpp b/cicorun/cat.cpp
index c2a611b..53b0be9 100644
--- a/./cat.cpp
+++ b/cicorun/cat.cpp
@@ -1,4 +1,5 @@
 #include "cicoemu.h"
+#include <time.h>
 using namespace CicoContext;
 
 void sub_17230();
@@ -772,15 +773,19 @@ loc_17769:
     sub_178ad();
     if (memoryAGet16(ds, 0x052f) == 0x0001)
         goto loc_1779e;
+    flags.carry = memoryAGet(ds, 0x0540) & 1;
     memoryASet(ds, 0x0540, memoryAGet(ds, 0x0540) >> 1);
     sub_17863();
+    flags.carry = memoryAGet(ds, 0x0540) & 1;
     memoryASet(ds, 0x0540, memoryAGet(ds, 0x0540) >> 1);
     goto loc_177ac;
 loc_1779e:
     al = memoryAGet(ds, 0x0540);
     al >>= 1;
+    flags.carry = al & 1;
     al >>= 1;
     sub_17863();
+    flags.carry = memoryAGet(ds, 0x0540) & 1;
     memoryASet(ds, 0x0540, memoryAGet(ds, 0x0540) >> 1);
 loc_177ac:
     sub_17863();
@@ -862,7 +867,6 @@ loc_17860:
 }
 void sub_17863()
 {
-    stop("check carry and zero");
     ah = flags.carry | (flags.zero << 1);
     bx = memoryAGet16(ds, 0x052f);
     bl = memoryAGet(ds, bx + 1345);
@@ -872,7 +876,6 @@ void sub_17863()
 loc_17874:
     flags.carry = ah & 1;
     flags.zero = (ah >> 1) & 1;
-    flags.zero = stop("43");
     memoryASet(ds, bx + 4118, rcr(memoryAGet(ds, bx + 4118), 0x01));
     ah = flags.carry | (flags.zero << 1);
     bx++;
@@ -880,10 +883,8 @@ loc_17874:
         goto loc_17874;
     return;
 loc_1787e:
-    stop(/*74*/);
     flags.carry = ah & 1;
     flags.zero = (ah >> 1) & 1;
-    flags.zero = stop("43");
     memoryASet(ds, bx + 4118, rcl(memoryAGet(ds, bx + 4118), 1));
     ah = flags.carry | (flags.zero << 1);
     bx--;
@@ -1660,9 +1661,9 @@ loc_1800e:
     al = memoryAGet(ds, 0x057b);
     flags.carry = al < 0xbb;
     al -= 0xbb;
-    if (stop(/*inject_t::temp - sub al, 0xbb*/))
+    if (flags.carry)
         goto loc_1804f;
-    if (stop(/*inject_t::carry*/))
+    if (!flags.carry)
         goto loc_1802c;
 loc_1801e:
     if (memoryAGet(ds, 0x0550) != 0x02)
@@ -2084,13 +2085,14 @@ loc_18440:
     if (memoryAGet(ds, 0x069b) != 0x00)
         goto loc_1845e;
     sub_184f1();
-    sub_185e7();
-    dx = ax;
-loc_18453:
-    sub_185e7();
-    ax -= dx;
-    if (ax < 0xf8ed)
-        goto loc_18453;
+    sync();
+//    sub_185e7();
+//    dx = ax;
+//loc_18453:
+//    sub_185e7();
+//    ax -= dx;
+//    if (ax < 0xf8ed)
+//        goto loc_18453;
     return;
 loc_1845e:
     dx = 0x0201;
@@ -2208,7 +2210,6 @@ loc_1855d:
 }
 void sub_18568()
 {
-    stop(/*unk call conv*/);
     ax = memoryAGet16(ds, 0x0693);
     if (ax == memoryAGet16(ds, 0x0691))
         goto loc_18587;
@@ -2220,18 +2221,15 @@ void sub_18568()
         goto loc_18587;
     sub_1d0a0();
 loc_18587:
-    stop(/*unk call conv*/);
     return;
 loc_18588:
     if (!(memoryAGet(ds, 0x06c9) & 0x80))
         goto loc_18590;
-    stop(/*unk call conv*/);
     return;
 loc_18590:
     if (memoryAGet(ds, 0x06cc) & 0x80)
         goto loc_1859d;
     memoryASet(ds, 0x1f80, 0x09);
-    stop(/*unk call conv*/);
     return;
 loc_1859d:
     if (!(memoryAGet(ds, 0x06c1) & 0x80))
@@ -2239,13 +2237,11 @@ loc_1859d:
     if (memoryAGet(ds, 0x06cb) & 0x80)
         goto loc_185b1;
     memoryASet(ds, 0x041c, 0xff);
-    stop(/*unk call conv*/);
     return;
 loc_185b1:
     if (memoryAGet(ds, 0x06c8) & 0x80)
         goto loc_185be;
     memoryASet(ds, 0x041b, 0xff);
-    stop(/*unk call conv*/);
     return;
 loc_185be:
     if (memoryAGet(ds, 0x06c7) & 0x80)
@@ -2255,15 +2251,13 @@ loc_185be:
         goto loc_185d3;
     sub_1cd51();
 loc_185d3:
-    stop(/*unk call conv*/);
     return;
 loc_185d4:
-    stop(/*unk call conv*/);
     return;
 loc_185d5:
     sub_186af();
     ax = pop();
-    stop(/*unk call conv*/);
+    stop(/*unk call conv iret*/);
 }
 void sub_185da()
 {
@@ -2274,14 +2268,13 @@ void sub_185da()
 }
 void sub_185e7()
 {
-    al = 0x00;
-    out(0x43, al);
-    in(al, 0x40);
-    ah = al;
-    in(al, 0x40);
-    tl = ah;
-    ah = al;
-    al = tl;
+    sync();
+    struct timespec ts;
+    unsigned theTick = 0U;
+    clock_gettime( CLOCK_REALTIME, &ts );
+    theTick  = ts.tv_nsec / 1000000;
+    theTick += ts.tv_sec * 1000;
+    ax = theTick*1193;
 }
 void sub_18608()
 {
@@ -2474,6 +2467,7 @@ loc_188b1:
 loc_188f4:
     flags.carry = true;
 }
+// INJECT: Error: cannot inject carry flag in sub_188f6()!
 void sub_188f6()
 {
     memoryASet(ds, 0x39e0, 0x00);
@@ -2500,6 +2494,7 @@ loc_1892c:
     sub_1ae73();
     if (!flags.carry)
         goto loc_1893e;
+    flags.carry = true;
     memoryASet(ds, 0x055c, 0x01);
     return;
 loc_1893e:
@@ -3094,6 +3089,8 @@ loc_18efa:
     bl--;
     if (tl != 1)
         goto loc_18ed0;
+    sync();
+
     if (memoryAGet(ds, 0x1838) != 0x0f)
         goto loc_18f06;
     return;
@@ -3649,11 +3646,13 @@ void sub_19440()
 }
 void sub_19446()
 {
+    push(0x7777);
     ah = 0;
     interrupt(0x1a);
     if (dx != memoryAGet16(ds, 0x1d5a))
         goto loc_19451;
 loc_19450:
+    assert(pop() == 0x7777);
     return;
 loc_19451:
     cx = dx;
@@ -3711,6 +3710,7 @@ loc_194cf:
     if (memoryAGet(ds, 0x1d59) != 0x00)
         goto loc_194ed;
 loc_194ec:
+    assert(pop() == 0x7777);
     return;
 loc_194ed:
     ax = 0xb800;
@@ -3722,6 +3722,7 @@ loc_194ed:
     memoryASet16(ds, 0x1d66, cx);
     bp = 0x1d24;
     sub_19efc();
+    assert(pop() == 0x7777);
 }
 void sub_1950c()
 {
@@ -4475,6 +4476,7 @@ void sub_19c30()
     di = 0x2000;
     cx = 0x0fa0;
     rep_stosw<MemAuto, DirAuto>();
+    sync();
     sub_19dce();
     bx = 0x28a0;
     ax = 0;
@@ -4588,6 +4590,7 @@ void sub_19d54()
     memoryASet16(ds, 0x2acc, ax);
     bx += 0x0002;
 loc_19d60:
+    sync();
     si = memoryAGet16(ds, bx);
     if (si != 0xffff)
         goto loc_19d69;
@@ -4668,6 +4671,7 @@ loc_19e02:
     di = 0x3180;
     cx = 0x0500;
     rep_stosw<MemAuto, DirAuto>();
+    sync();
     memoryASet16(ds, 0x2ac2, 0x2944);
 loc_19e1c:
     memoryASet(ds, 0x2ac4, 0x09);
@@ -4768,6 +4772,7 @@ void sub_19efc()
     ch = 0;
     dx = 0x0ff0;
 loc_19f0a:
+//    sync();
     cl = memoryAGet(ds, 0x2ae0);
 loc_19f0e:
     dx = 0x30c0;
@@ -4797,7 +4802,7 @@ loc_19f34:
         goto loc_19f1c;
     ax &= bx;
     ax |= memoryAGet16(ds, 0x2ae3);
-    stosw<MemAuto, DirAuto>();
+    stosw<MemAuto, DirAuto>(); // sync!?
     bp += 0x0002;
     if (--cx)
         goto loc_19f0e;
@@ -6537,6 +6542,7 @@ loc_1af02:
     ax &= 0xfff8;
     dx = memoryAGet16(ds, 0x0579);
     dx &= 0xfff8;
+    flags.carry = ax < dx;
     if (ax != dx)
         goto loc_1af3d;
     memoryASet(ds, 0x3967, 0x01);
@@ -6544,7 +6550,7 @@ loc_1af02:
     goto loc_1af55;
 loc_1af3d:
     ax = memoryAGet16(ds, 0x3964);
-    if (stop(/*1 - jb loc_1af4c*/))
+    if (flags.carry)
         goto loc_1af4c;
     flags.carry = ax < memoryAGet16(ds, 0x39c6);
     ax -= memoryAGet16(ds, 0x39c6);
@@ -6693,7 +6699,6 @@ void sub_1b068()
     cx = 0x0e03;
     sub_19fcd();
 }
-// INJECT: Error: cannot inject zero flag in sub_1b082() because no traceback!
 void sub_1b082()
 {
     ax = memoryAGet16(ds, 0x3964);
@@ -6704,9 +6709,7 @@ void sub_1b082()
     di = 0x0010;
     cx = 0x1e0e;
     sub_1a059();
-    stop(/*inject ret*/);
 }
-// INJECT: Error: cannot inject zero flag in sub_1b09e() because no traceback!
 void sub_1b09e()
 {
     ax = memoryAGet16(ds, 0x3964);
@@ -6717,7 +6720,6 @@ void sub_1b09e()
     dh = memoryAGet(ds, 0x057b);
     cx = 0x0e0e;
     sub_1a059();
-    stop(/*inject ret*/);
 }
 void sub_1b0c0()
 {
@@ -6899,7 +6901,6 @@ loc_1b26c:
     if (si < 0x0010)
         goto loc_1b26c;
 }
-// INJECT: Error: cannot inject zero flag in sub_1b295() because no traceback!
 void sub_1b295()
 {
     ax = memoryAGet16(ds, 0x327d);
@@ -6910,7 +6911,6 @@ void sub_1b295()
     di = 0x0018;
     cx = 0x0e1e;
     sub_1a059();
-    stop(/*inject ret*/);
 }
 void sub_1b2c0()
 {
@@ -7659,7 +7659,6 @@ void sub_1b96e()
     di = si;
     cx = 0x0e10;
     sub_1a059();
-    stop(/*inject ret*/);
 }
 void sub_1b989()
 {
@@ -8794,6 +8793,7 @@ loc_1c41a:
     bp = 0x000e;
     cx = memoryAGet16(ds, 0x4dd4);
     sub_19efc();
+    sync(); // ?
 loc_1c435:
     bx = pop();
     cx = pop();
@@ -8967,6 +8967,7 @@ void sub_1c5e0()
 {
     if (memoryAGet(ds, 0x0000) == 0x00)
         return;
+    sync(); // gabo
     ah = 0;
     interrupt(0x1a);
     if (dx == memoryAGet16(ds, 0x5322))
@@ -9890,10 +9891,10 @@ loc_1ce81:
 }
 void sub_1ce90()
 {
-    interrupt(0x11);
-    al &= 0x30;
-    if (al != 0x30)
-        goto loc_1cec5;
+//    interrupt(0x11);
+//    al &= 0x30;
+//    if (al != 0x30)
+//        goto loc_1cec5;
     ax = 0xb800;
     ds = ax;
     ax = 0x55aa;
@@ -10155,6 +10156,7 @@ loc_1d118:
 loc_1d124:
     ax = memoryAGet16(ds, 0x0693);
 loc_1d127:
+    sync();
     if (ax == memoryAGet16(ds, 0x0693))
         goto loc_1d127;
     if (!(memoryAGet(ds, 0x06c1) & 0x80))
@@ -10179,6 +10181,7 @@ loc_1d14f:
 loc_1d156:
     ax = memoryAGet16(ds, 0x0693);
 loc_1d159:
+    sync();
     if (ax == memoryAGet16(ds, 0x0693))
         goto loc_1d159;
     ax = 0;
@@ -10234,6 +10237,7 @@ loc_1d1ce:
 loc_1d1d7:
     ax = memoryAGet16(ds, 0x0693);
 loc_1d1da:
+    sync();
     if (ax == memoryAGet16(ds, 0x0693))
         goto loc_1d1da;
 }

diff --git a/./av.clean b/cicorun/av.cpp
index 99111d0..da8c48f 100644
--- a/./av.clean
+++ b/cicorun/av.cpp
@@ -71,6 +71,7 @@ void sub_41a0();
 void sub_421e();
 void sub_42b2();
 void sub_43e0();
+void sub_43e0_jump();
 void sub_43f0();
 void sub_43f5();
 void sub_4430();
@@ -340,13 +341,17 @@ void callIndirect(int seg, int ofs)
     {
         case 0x1ed017d: sub_204d(); return;
         case 0x43e0000: sub_43e0(); return;
-        case 0x43e0072: sub_4452(); return;
         case 0x43e0482: sub_4862(); return;
         case 0x43e0538: sub_4918(); return;
         case 0x43e0548: sub_4928(); return;
         case 0x43e07f1: sub_4bd1(); return;
         case 0x1ed3e92: sub_5d62(); return;
         case 0x8e60000: sub_8e60(); return;
+        case 0x0a57ff9a:
+            ctx->_cs = pop(); // retf
+            ctx->a.r16 = 0xffff;
+            ctx->b.r16 = 3;
+            return; //0A57:0000FF9A int 33
         default:
             break;
     }
@@ -471,6 +476,7 @@ loc_1f98: // 01ed:00c8
     interrupt(0x21);
     di = pop();
     di <<= cl;
+    di &= 0xffff;
     ss = dx;
     sp = di;
     sub_68c6();
@@ -1581,6 +1587,7 @@ void sub_250f() // 01ed:063f
     push(si);
     push(di);
 loc_2511: // 01ed:0641
+    sync();
     sub_61fb();
     if (!ax)
         goto loc_251b;
@@ -4705,6 +4712,7 @@ loc_4085: // 01ed:21b5
     sub_2abe();
     si = 0;
 loc_40ab: // 01ed:21db
+    sync();
     if (memoryAGet16(ds, 0x09d4) == 0x0000)
         goto loc_40b5;
     goto loc_4168;
@@ -4793,6 +4801,7 @@ loc_4129: // 01ed:2259
     di = 0x0001;
     goto loc_4154;
 loc_4145: // 01ed:2275
+    sync();
     if (!di)
         goto loc_4154;
     sub_2ff1();
@@ -5069,9 +5078,15 @@ loc_432b: // 01ed:245b
     si = pop();
     assert(pop() == 0x7777);
 }
-void sub_43e0() // 043e:0000
+void sub_43e0()
 {
-    CStackGuardFar sg(0, false);
+    push(0x7777);
+    sub_43e0_jump();
+}
+
+void sub_43e0_jump()
+{
+    cs = 0x43e;
     push(ds);
     push(cs);
     ds = pop();
@@ -5113,6 +5128,8 @@ void sub_43e0() // 043e:0000
     }
     bp = pop();
     ds = pop();
+    int check = pop();
+    assert(check== 0x7777 || check == 0xbcde);
     cs = pop();
 }
 void sub_43f0() // 043e:0010
@@ -8826,7 +8843,7 @@ loc_6536: // 01ed:4666
 }
 void sub_653c() // 01ed:466c
 {
-    CStackGuardFar sg(0, true);
+    CStackGuardFar sg(8, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -9310,7 +9327,7 @@ void sub_68ab() // 01ed:49db
 }
 void sub_68c6() // 01ed:49f6
 {
-    CStackGuard sg(0, true);
+    CStackGuard sg(-20, true);
     push(0x7777);
     goto loc_68c6;
 loc_205d: // 01ed:018d
@@ -9561,7 +9578,7 @@ loc_6933: // 01ed:4a63
     if (!flags.zero && !flags.carry)
         goto loc_693f;
 loc_6938: // 01ed:4a68
-    if (stop(/*1 - jb loc_697a*/))
+    if (flags.carry)
         goto loc_697a;
     sub_694f();
     if (!flags.zero && !flags.carry)
@@ -9608,7 +9625,7 @@ loc_699f: // 01ed:4acf
 loc_69a7: // 01ed:4ad7
     ax = 0;
     memoryASet16(ss, bp, ax);
-    callIndirect(cs, memoryAGet16(cs, 0x49f0)); // 01ed:4adc
+//    callIndirect(cs, memoryAGet16(cs, 0x49f0)); // 01ed:4adc - GABO CICO
 }
 // INJECT: Error: cannot inject flag in sub_694f() because of being label!
 void sub_694f() // 01ed:4a7f
@@ -9633,17 +9650,28 @@ loc_695a: // 01ed:4a8a
     cx--;
     al -= 0x22;
     if (al == 0)
+    {
+        flags.zero = true;
         goto loc_6976;
+    }
     al += 0x22;
     if (al != 0x5c)
+    {
+        flags.zero = false;
         goto loc_6974;
+    }
     if (memoryAGet(ds, si) != 0x22)
+    {
+        flags.zero = false;
         goto loc_6974;
+    }
     lodsb<MemAuto, DirAuto>();
     cx--;
+    flags.zero = cx == 0;
 loc_6974: // 01ed:4aa4
+    flags.carry = false;
 loc_6976: // 01ed:4aa6
-    stop(/*inject ret*/);
+    return;
 }
 void sub_69b1() // 01ed:4ae1
 {
@@ -10435,7 +10463,7 @@ loc_736b: // 01ed:549b
     es = memoryAGet16(ss, bp - 6 + 2);
     ax = memoryAGet16(es, bx + 2);
     memoryASet16(ss, bp - 2, ax);
-    if (stop(/*condition!*/))
+    if (memoryAGet(es, bx + 6) < 0x01)
         goto loc_73ac;
     if (ax <= 0x0005)
         goto loc_739b;
@@ -10630,8 +10658,12 @@ void sub_753d() // 01ed:566d
         goto loc_75b8;
     bx = ax;
     bx <<= 1;
-    callIndirect(cs, memoryAGet16(cs, bx + 22160)); // 01ed:568b
-    return;
+    assert(bx == 0); // gabo??
+loc_7574:
+    bx = memoryAGet16(ss, bp + 14);
+    es = memoryAGet16(ss, bp + 14 + 2);
+    memoryASet16(es, bx, 0x0004);
+    goto loc_75c8;
     //   gap of 88 bytes
 loc_75b8: // 01ed:56e8
     bx = memoryAGet16(ss, bp + 10);
@@ -10644,6 +10676,13 @@ loc_75b8: // 01ed:56e8
     ds = pop();
     assert(pop() == 0x7777);
     cs = pop();
+    return;
+loc_75c8:
+    bp = pop();
+    ds = pop();
+    assert(pop() == 0x7777);
+    cs = pop();
+
 }
 void sub_75cb() // 01ed:56fb
 {
@@ -12046,9 +12085,12 @@ loc_8579: // 01ed:66a9
 }
 void sub_858c() // 01ed:66bc
 {
-    CStackGuardFar sg(0, false);
-    push(es);
-    push(bx);
+    assert(es == 0x043e && bx == 0x0072);
+//    push(es);
+//    push(bx);
+    push(cs);
+    cs = es;
+    sub_4452();
     cs = pop();
 }
 void sub_858f() // 01ed:66bf
@@ -13023,10 +13065,12 @@ loc_8e3d: // 01ed:6f6d
 }
 void sub_8e60() // 08e6:0000
 {
+    push(0xbcde);
     push(ds);
     push(cs);
     ds = pop();
     push(si);
+    int oldsp = sp;
     switch (si)
     {
         case 0: sub_9032(); break;
@@ -13038,7 +13082,8 @@ void sub_8e60() // 08e6:0000
         case 12: sub_8f86(); break;
         case 14: sub_8eda(); break;
         case 16: sub_8f7d(); break;
-        case 18: sub_8fa0(); break;
+        case 18: 
+            sub_8fa0(); break;
         case 20: sub_8fa9(); break;
         case 22: sub_8ed9(); break;
         case 24: sub_8ed9(); break;
@@ -13061,10 +13106,22 @@ void sub_8e60() // 08e6:0000
         default:
         assert(0);
     }
+    if (sp - oldsp != 0)
+    {
+        assert(sp - oldsp == 4);
+        assert(pop() == 0xbcde);
+        cs = pop();
+        return;
+    }
+
     si = pop();
     ds = pop();
-    stop(/*inject carry*/);
-    daa();
+    switch (memoryAGet16(cs, 0x49+2)*16+memoryAGet16(cs, 0x49))
+    {
+        case 0x43e0: sub_43e0_jump(); break;
+        default:
+            assert(0);
+    }
 }
 void sub_8ed9() // 08e6:0079
 {
@@ -13231,14 +13288,12 @@ void sub_8f7d() // 08e6:011d
 }
 void sub_8f86() // 08e6:0126
 {
-    CStackGuardFar sg(0, false);
+    push(0x7788);
     goto loc_8f86;
 loc_8ed5: // 08e6:0075
-    stop(/*override stack*/);
-    si = pop();
+    si = pop(); assert(si == 0x7788);
     si = pop();
     ds = pop();
-    cs = pop();
     return;
     //   gap of 173 bytes
 loc_8f86: // 08e6:0126
@@ -13256,14 +13311,13 @@ void sub_8f8f() // 08e6:012f
 }
 void sub_8fa0() // 08e6:0140
 {
-    stop(/*unk call conv*/);
+    CStackGuard sg(0, false);
     goto loc_8fa0;
 loc_8ed5: // 08e6:0075
-    stop(/*override stack*/);
-    si = pop();
+    assert(0);
+    si = pop(); assert(pop() == 0x7788);
     si = pop();
     ds = pop();
-    stop(/*unk call conv*/);
     return;
     //   gap of 152 bytes
 loc_8f71: // 08e6:0111
@@ -13274,22 +13328,19 @@ loc_8fa0: // 08e6:0140
     sub_9f62();
     if (!flags.carry)
         goto loc_8f71;
-    stop(/*unk call conv*/);
 }
 void sub_8fa9() // 08e6:0149
 {
-    stop(/*unk call conv*/);
+    push(0x7788);
     goto loc_8fa9;
 loc_8ed5: // 08e6:0075
-    stop(/*override stack*/);
-    si = pop();
+    si = pop(); assert(pop() == 0x7788);
     si = pop();
     ds = pop();
-    stop(/*unk call conv*/);
     return;
     //   gap of 198 bytes
 loc_8f9f: // 08e6:013f
-    stop(/*unk call conv*/);
+    assert(pop() == 0x7788);
     return;
     //   gap of 9 bytes
 loc_8fa9: // 08e6:0149
@@ -13302,14 +13353,12 @@ loc_8fa9: // 08e6:0149
 }
 void sub_8fb6() // 08e6:0156
 {
-    stop(/*unk call conv*/);
+    push(0xaacc);
     goto loc_8fb6;
 loc_8ed5: // 08e6:0075
-    stop(/*override stack*/);
-    si = pop();
+    si = pop(); assert(si == 0xaacc);
     si = pop();
     ds = pop();
-    stop(/*unk call conv*/);
     return;
     //   gap of 221 bytes
 loc_8fb6: // 08e6:0156
@@ -13342,7 +13391,7 @@ loc_a179: // 08e6:1319
     memoryASet16(ds, 0x12f7, bx);
     memoryASet16(ds, 0x12f9, cx);
     memoryASet16(ds, 0x12fb, dx);
-    stop(/*unk call conv*/);
+    assert(pop() == 0xaacc);
 }
 void sub_9005() // 08e6:01a5
 {
@@ -13355,14 +13404,12 @@ void sub_9005() // 08e6:01a5
 }
 void sub_9014() // 08e6:01b4
 {
-    CStackGuardFar sg(0, false);
+    push(0xddbb);
     goto loc_9014;
 loc_8ed5: // 08e6:0075
-    stop(/*override stack*/);
-    si = pop();
+    si = pop(); assert(si == 0xddbb);
     si = pop();
     ds = pop();
-    cs = pop();
     return;
     //   gap of 315 bytes
 loc_9014: // 08e6:01b4
@@ -13391,14 +13438,13 @@ loc_9027: // 08e6:01c7
 }
 void sub_9028() // 08e6:01c8
 {
-    CStackGuardFar sg(0, false);
+    push(0xaaee);
     goto loc_9028;
 loc_8ed5: // 08e6:0075
-    stop(/*override stack*/);
-    si = pop();
+    si = pop(); assert(si == 0xaaee);
     si = pop();
     ds = pop();
-    cs = pop();
+//    cs = pop();
     return;
     //   gap of 335 bytes
 loc_9028: // 08e6:01c8
@@ -13408,14 +13454,12 @@ loc_9028: // 08e6:01c8
 }
 void sub_9032() // 08e6:01d2
 {
-    stop(/*unk call conv*/);
+    push(0xaabb);
     goto loc_9032;
 loc_8ed5: // 08e6:0075
-    stop(/*override stack*/);
-    si = pop();
+    si = pop(); assert(si == 0xaabb);
     si = pop();
     ds = pop();
-    stop(/*unk call conv*/);
     return;
     //   gap of 345 bytes
 loc_9032: // 08e6:01d2
@@ -13460,14 +13504,13 @@ loc_9037: // 08e6:01d7
 }
 void sub_9082() // 08e6:0222
 {
-    CStackGuardFar sg(0, false);
+    push(0xaacc);
     goto loc_9082;
 loc_8ed5: // 08e6:0075
-    stop(/*override stack*/);
-    si = pop();
+    si = pop(); assert(si == 0xaacc);
     si = pop();
     ds = pop();
-    cs = pop();
+//    cs = pop();
     return;
     //   gap of 425 bytes
 loc_9082: // 08e6:0222
@@ -13672,9 +13715,8 @@ void sub_9dbc() // 08e6:0f5c
     tx = dx;
     dx = bx;
     bx = tx;
-    if (stop(/*1 - jae loc_9dd2*/))
+    if (!flags.carry)
         goto loc_9dd2;
-    stop(/*inject ret*/);
     return;
 loc_9dd2: // 08e6:0f72
     memoryASet16(ds, 0x0f54, ax);
@@ -13921,7 +13963,7 @@ loc_9f7c: // 08e6:111c
     ax = tx;
     flags.carry = true;
 loc_9f9f: // 08e6:113f
-    stop(/*inject ret*/);
+    return;
 }
 void sub_9fa0() // 08e6:1140
 {

diff --git a/cc1.cpp b/cicorun/cc1.cpp
index 3ba3c21..2c934c0 100644
--- a/cc1.cpp
+++ b/cicorun/cc1.cpp
@@ -1,6 +1,6 @@
 #include "cicoemu.h"
 using namespace CicoContext;
-
+#include <stdio.h>
 class CStackGuard
 {
     uint16_t minit;
@@ -35,7 +35,7 @@ void start()
     ss = 0x38fa;
     sp = 0x4000;
     load("/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/_temp/_crystalcaves/dos", "CC1.EXE", 191808);
-    fixReloc(cs);
+    //fixReloc(cs);
     sub_10e6b();
 }
 void fixReloc(uint16_t seg)
@@ -2212,7 +2212,7 @@ void sub_2ebf8();
 // INJECT: Error: cannot inject flag in sub_2eaf8() because of being label!
 void sub_1ed0() // 01ed:0000
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -2264,7 +2264,7 @@ void sub_1ed0() // 01ed:0000
 }
 void sub_1f29() // 01ed:0059
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -2762,7 +2762,7 @@ loc_2347: // 01ed:0477
 }
 void sub_234d() // 01ed:047d
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -22383,10 +22383,10 @@ void sub_10e6b() // 01ed:ef9b
     assert(cs == 0x01ed);
     sub_29fd();
     memoryASet(ds, 0x513f, 0x00);
-    sub_2b0e();
+    sub_2b0e(); // e
     push(cs);
     cs = 0x11b2;
-    sub_1a05b();
+    sub_1a05b(); // cfg
     assert(cs == 0x01ed);
     push(cs);
     cs = 0x11b2;
@@ -22394,7 +22394,7 @@ void sub_10e6b() // 01ed:ef9b
     assert(cs == 0x01ed);
     push(cs);
     cs = 0x11b2;
-    sub_1d03b();
+    sub_1d03b(); // decomp
     assert(cs == 0x01ed);
     push(cs);
     cs = 0x11b2;
@@ -22405,7 +22405,8 @@ void sub_10e6b() // 01ed:ef9b
     memoryASet(ds, 0xa10c, 0x00);
     push(cs);
     cs = 0x11b2;
-    sub_1c95b();
+    sub_1c95b();        // <<--- INTRO
+    assert(0);
     assert(cs == 0x01ed);
 loc_10ec9: // 01ed:eff9
     if (memoryAGet(ds, 0x3396) == 0x00)
@@ -45468,7 +45469,7 @@ void sub_1f5c0() // 1f5c:0000
 }
 void sub_1f5cf() // 1f5c:000f
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -45504,7 +45505,7 @@ loc_1f5fa: // 1f5c:003a
 }
 void sub_1f607() // 1f5c:0047
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -45626,7 +45627,7 @@ loc_1f6cf: // 1f5c:010f
 }
 void sub_1f76c() // 1f5c:01ac
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -46364,9 +46365,10 @@ loc_2025b: // 1f5c:0c9b
     out(dx, al);
     cs = pop();
 }
+void sub_20697();
 void sub_202ed() // 1f5c:0d2d
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -46435,7 +46437,10 @@ loc_20351: // 1f5c:0d91
     memoryASet16(ss, bp - 2, 0xfff9);
     goto loc_2037a;
 loc_20376: // 1f5c:0db6
-    stop(); // ljmp es:[di + 0x24]
+    assert(memoryAGet16(es, di + 0x24) == 0x10d7);
+    //stop(); // ljmp es:[di + 0x24] // 1f5c:10d7
+    sub_20697();
+    return;
 loc_2037a: // 1f5c:0dba
     ax = memoryAGet16(ss, bp - 2);
     di = pop();
@@ -46654,7 +46659,7 @@ void sub_20387() // 1f5c:0dc7
 }
 void sub_20697() // 1f5c:10d7
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     ax = memoryAGet16(es, di + 24);
     cl = 0x03;
@@ -46891,7 +46896,7 @@ loc_20869: // 1f5c:12a9
 }
 void sub_20ed5() // 1f5c:1915
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -46995,7 +47000,7 @@ loc_20f90: // 1f5c:19d0
 // INJECT: Error: cannot inject carry flag in sub_20fa3()!
 void sub_20fa3() // 1f5c:19e3
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -47044,7 +47049,7 @@ loc_20fe6: // 1f5c:1a26
     ax = es;
     ds = ax;
     ah = 0x3f;
-    interrupt(0x21);
+    interrupt(0x21); // sets carry flag
     ds = pop();
     memoryASet16(ss, bp - 2, di);
 loc_2100f: // 1f5c:1a4f
@@ -47058,7 +47063,6 @@ loc_2100f: // 1f5c:1a4f
     ds = pop();
     sp = bp;
     bp = pop();
-    stop(/*inject ret*/);
     assert(pop() == 0x7777);
     cs = pop();
     sp += 2;
@@ -47545,7 +47549,7 @@ loc_21a96: // 2188:0216
 }
 void sub_21a9f() // 2188:021f
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -48678,7 +48682,7 @@ loc_28e19: // 28b3:02e9
 }
 void sub_28e1f() // 28b3:02ef
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -49365,7 +49369,7 @@ loc_2922c: // 28b3:06fc
 }
 void sub_29241() // 28b3:0711
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -51120,29 +51124,37 @@ void sub_2a21f() // 28b3:16ef
     sp -= 0x0018;
     memoryASet(ss, bp - 19, 0x0f);
     al = 0x10;
-    push(ax);
-    di = bp - 0x14;
-    push(ss);
-    push(di);
-    push(cs);
-    cs = 0x2d99;
-    sub_2d99b();
-    assert(cs == 0x28b3);
+//    push(ax);
+//    di = bp - 0x14;
+//    push(ss);
+//    push(di);
+//    push(cs);
+//    cs = 0x2d99;
+//    sub_2d99b();
+//    assert(cs == 0x28b3);
+    // stk 38fa:3fde
+    assert(sp == 0x3fde);
+    memoryASet(ss, bp - 20, 3);//gabo
     al = memoryAGet(ss, bp - 20);
+    assert(al == 0x03);
     al &= 0x7f;
     ah = 0;
     memoryASet16(ss, bp - 22, ax);
-    memoryASet16(ss, bp - 20, 0x1a00);
+    memoryASet16(ss, bp - 20, 0x1a00); // 2bb3:1710
     al = 0x10;
-    push(ax);
-    di = bp - 0x14;
-    push(ss);
-    push(di);
-    push(cs);
-    cs = 0x2d99;
-    sub_2d99b();
-    assert(cs == 0x28b3);
-    if (memoryAGet(ss, bp - 20) != 0x1a)
+//    push(ax);
+//    di = bp - 0x14;
+//    push(ss);
+//    push(di);
+//    push(cs);
+//    cs = 0x2d99;
+//    sub_2d99b();
+//    assert(cs == 0x28b3);
+    //printf("\nck %04x:%04x = %02x %02x %04x\n", ss, bp-20, memoryAGet(ss, bp - 20),  memoryAGet(ss, bp - 20+1), memoryAGet16(ss, bp - 20));
+    memoryASet16(ss, bp - 20, 0x001a); // gabo
+    memoryASet16(ss, bp - 18, 0x0008); // gabo
+    
+    if (memoryAGet16(ss, bp - 20) != 0x1a)
         goto loc_2a26e;
     if (memoryAGet(ss, bp - 18) == 0xff)
         goto loc_2a26c;
@@ -51654,7 +51666,7 @@ void sub_2a683() // 2a41:0273
 }
 void sub_2a6ae() // 2a41:029e
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     bx = sp;
     dx = memoryAGet16(ss, bx + 4);
@@ -51694,6 +51706,7 @@ void sub_2a703() // 2a41:02f3
 }
 void sub_2a70a() // 2a41:02fa
 {
+    sync();
     CStackGuardFar sg(0, false);
     if (memoryAGet(ds, 0xa139) != 0x00)
         goto loc_2a719;
@@ -51728,7 +51741,7 @@ loc_2a73a: // 2a41:032a
 }
 void sub_2a73e() // 2a41:032e
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     bx = sp;
     push(ds);
@@ -51749,7 +51762,7 @@ void sub_2a73e() // 2a41:032e
 }
 void sub_2a769() // 2a41:0359
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     bx = sp;
     push(ds);
@@ -51978,7 +51991,7 @@ void sub_2aa30() // 2aa3:0000
 }
 void sub_2aaf9() // 2aa3:00c9
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -52004,7 +52017,7 @@ loc_2ab15: // 2aa3:00e5
 }
 void sub_2ab1b() // 2aa3:00eb
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -52018,7 +52031,7 @@ void sub_2ab1b() // 2aa3:00eb
 }
 void sub_2ab29() // 2aa3:00f9
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -52270,7 +52283,7 @@ void sub_2ac8d() // 2aa3:025d
 }
 void sub_2aca8() // 2aa3:0278
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -52285,7 +52298,7 @@ void sub_2aca8() // 2aa3:0278
 }
 void sub_2adcb() // 2aa3:039b
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -52322,9 +52335,10 @@ loc_2ae06: // 2aa3:03d6
     al = 0x02;
     out(dx, al);
     cx = 0x0010;
+    /*
 loc_2ae0f: // 2aa3:03df
     dx = 0x03ce;
-    lodsb<MemAuto, DirAuto>();
+    lodsb<MemAuto, DirAuto>(); // 0000:ff63 - 83 3e 2e 51 00 7e 23 a1 2e
     ah = 0x08;
     tl = al;
     al = ah;
@@ -52391,6 +52405,7 @@ loc_2ae0f: // 2aa3:03df
     bx += di;
     if (--cx)
         goto loc_2ae0f;
+     */
     al = 0x0f;
     out(dx, al);
     dx = 0x03ce;
@@ -52492,7 +52507,7 @@ loc_2aeb5: // 2aa3:0485
 }
 void sub_2af7b() // 2aa3:054b
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -52754,7 +52769,7 @@ loc_2c1e4: // 2aa3:17b4
 }
 void sub_2c34f() // 2aa3:191f
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -52800,7 +52815,7 @@ loc_2c3a3: // 2aa3:1973
     push(cx);
     push(di);
     dx = 0x03ce;
-    lodsb<MemAuto, DirAuto>();
+//    lodsb<MemAuto, DirAuto>();
     ah = al;
     di = ax;
     cl = memoryAGet(cs, 0x17e9);
@@ -52811,7 +52826,7 @@ loc_2c3a3: // 2aa3:1973
     ch = 0x01;
     al = ch;
     out(dx, al);
-    lodsb<MemAuto, DirAuto>();
+//    lodsb<MemAuto, DirAuto>();
     memoryASet(cs, 0x17ec, al);
     al >>= cl;
     tl = memoryAGet(es, bx);
@@ -52820,7 +52835,7 @@ loc_2c3a3: // 2aa3:1973
     ch <<= 1;
     al = ch;
     out(dx, al);
-    lodsb<MemAuto, DirAuto>();
+//    lodsb<MemAuto, DirAuto>();
     memoryASet(cs, 0x17ed, al);
     al >>= cl;
     tl = memoryAGet(es, bx);
@@ -52829,7 +52844,7 @@ loc_2c3a3: // 2aa3:1973
     ch <<= 1;
     al = ch;
     out(dx, al);
-    lodsb<MemAuto, DirAuto>();
+//    lodsb<MemAuto, DirAuto>();
     memoryASet(cs, 0x17ee, al);
     al >>= cl;
     tl = memoryAGet(es, bx);
@@ -52838,7 +52853,7 @@ loc_2c3a3: // 2aa3:1973
     ch <<= 1;
     al = ch;
     out(dx, al);
-    lodsb<MemAuto, DirAuto>();
+//    lodsb<MemAuto, DirAuto>();
     memoryASet(cs, 0x17ef, al);
     al >>= cl;
     tl = memoryAGet(es, bx);
@@ -53249,7 +53264,7 @@ void sub_2d138() // 2aa3:2708
 }
 void sub_2d2d7() // 2aa3:28a7
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -53634,16 +53649,29 @@ void sub_2d99b() // 2d99:000b
     push(bx);
     bx = 0;
     ds = bx;
-    bl = memoryAGet(ss, bp + 12);
+//    for (int i=0x3fbc; i<0x400c; i++)
+//    {
+//        if (i%16==0x0c)
+//            printf("\n%04x:%04x ", ss, i);
+//        printf("%02x ", memoryAGet(ss, i));
+//    }
+
+    bl = memoryAGet(ss, bp + 12); // 2d99:0019
     bx <<= 1;
     bx <<= 1;
     tx = bx;
-    bx = memoryAGet16(ds, tx);
+    // 0000:0040
+    bx = memoryAGet16(ds, tx);  // CICO PROBLEM!!!
     ds = memoryAGet16(ds, tx + 2);
+    bx = 0x1320; ds = 0xf000; // gabo hack
+    //assert(bx == 0x1320 && ds == 0xf000); // int handler addr?
     push(ds);
     push(bx);
     si = memoryAGet16(ss, bp + 8);
     ds = memoryAGet16(ss, bp + 8 + 2);
+    printf("\n");
+    for (int i=0; i<20; i++)
+        printf("stk ds:si %d. %04x:%04x = %04x\n", i, ds, si+i*2, memoryAGet16(ds, si+i*2));
     flags.direction = false;
     lodsw<MemAuto, DirAuto>();
     push(ax);
@@ -53666,13 +53694,18 @@ void sub_2d99b() // 2d99:000b
     ds = pop();
     si = pop();
     ax = pop();
+    // gabo TODO: bx = 0xcad?  0x7777  bp?
     flags.interrupts = false;
     assert(pop() == 0x7777);
     cs = pop();
+    // CALLS f000:1320 callback 019 int 10h video! ah = 0x0f read video mode
+    // RETF INGORE!! continue tracing!
+    // 2d99:0045 pushf
+    // push es
 }
 void sub_2d9fc() // 2d99:006c
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -53698,7 +53731,7 @@ void sub_2d9fc() // 2d99:006c
 }
 void sub_2da14() // 2d99:0084
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -53777,8 +53810,8 @@ loc_2da70: // 2da3:0040
     push(cs);
     sub_2e5d2();
     push(cs);
-    sub_2e642();
-    ax = 0xa23c;
+    sub_2e642(); // stk 38fa:3ff6
+    ax = 0xa23c; // 2da3:0088 ok
     push(ds);
     push(ax);
     push(ds);
@@ -54146,7 +54179,7 @@ void sub_2dca9() // 2da3:0279
 }
 void sub_2dd59() // 2da3:0329
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     goto loc_2dd59;
 loc_2db01: // 2da3:00d1
@@ -54415,7 +54448,8 @@ loc_2ddad: // 2da3:037d
 void sub_2dde5() // 2da3:03b5
 {
     CStackGuardFar sg(0, false);
-    sub_2dffe();
+    sub_2dffe(); // todo: check stack  should set SI DI
+    //assert(0); // check sidi
     ax = si;
     dx = di;
     di = memoryAGet16(ds, 0x028c);
@@ -54428,7 +54462,7 @@ void sub_2dde5() // 2da3:03b5
     ax += 0x0010;
     dx--;
     goto loc_2de21;
-loc_2de00: // 2da3:03d0
+loc_2de00: // 2da3:03d0 infinite loop
     dx += memoryAGet16(es, di + 6);
     dx -= memoryAGet16(es, di + 2);
     ax += memoryAGet16(es, di + 4);
@@ -54483,9 +54517,15 @@ loc_2dea7: // 2da3:0477
     if (bx > dx)
         goto loc_2deb1;
     if (bx < dx)
+    {
+        flags.carry = true;
         goto loc_2dece;
+    }
     if (cx < ax)
+    {
+        flags.carry = true;
         goto loc_2dece;
+    }
 loc_2deb1: // 2da3:0481
     cx = memoryAGet16(ds, 0x0288);
     bx = memoryAGet16(ds, 0x028a);
@@ -54500,7 +54540,6 @@ loc_2dec6: // 2da3:0496
     memoryASet16(ds, 0x028a, dx);
     flags.carry = false;
 loc_2dece: // 2da3:049e
-    stop(/*inject ret*/);
     return;
 loc_2decf: // 2da3:049f
     cx = memoryAGet16(es, di + 4);
@@ -54673,7 +54712,14 @@ void sub_2dfe9() // 2da3:05b9
 void sub_2dffe() // 2da3:05ce
 {
     CStackGuard sg(0, false);
-    di = memoryAGet16(ds, 0x028c);
+    for (int i=0x024c; i<0x2ac; i++)
+    {
+        if (i%16==0x0c)
+            printf("\n%04x:%04x ", ds, i);
+        printf("%02x ", memoryAGet(ds, i));
+    }
+    di = memoryAGet16(ds, 0x028c); // gabo error 2ec1:028c = 00 00 ff 8f
+    assert(di == 0);
     if (di)
         goto loc_2e017;
     di -= memoryAGet16(ds, 0x0290);
@@ -54729,7 +54775,7 @@ void sub_2e055() // 2da3:0625
 }
 void sub_2e064() // 2da3:0634
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     flags.direction = false;
     bx = sp;
@@ -54750,7 +54796,7 @@ void sub_2e064() // 2da3:0634
 }
 void sub_2e07e() // 2da3:064e
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     flags.direction = false;
     bx = sp;
@@ -54820,7 +54866,7 @@ loc_2e0e7: // 2da3:06b7
 }
 void sub_2e0f1() // 2da3:06c1
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     flags.direction = false;
     bx = sp;
@@ -55116,8 +55162,9 @@ loc_2e476: // 2da3:0a46
     al++;
     flags.carry = bx < memoryAGet16(cs, si);
     bx -= memoryAGet16(cs, si);
+    tl = dx < memoryAGet16(cs, si + 2) + flags.carry;// carry
     dx -= memoryAGet16(cs, si + 2) + flags.carry;
-    if (stop(/*70*/))
+    if (!tl)
         goto loc_2e476;
     flags.carry = (bx + memoryAGet16(cs, si)) >= 0x10000;
     bx += memoryAGet16(cs, si);
@@ -55244,7 +55291,7 @@ loc_2e545: // 2da3:0b15
 }
 void sub_2e556() // 2da3:0b26
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     push(bp);
     bp = sp;
@@ -55335,7 +55382,7 @@ loc_2e5c8: // 2da3:0b98
 }
 void sub_2e5d2() // 2da3:0ba2
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     bx = sp;
     push(ds);
@@ -55365,8 +55412,15 @@ void sub_2e5d2() // 2da3:0ba2
     ax = 0;
     cx = 0x000e;
     rep_stosw<MemAuto, DirAuto>();
+    for (int i=0; i<50; i++)
+        printf("%02x ", memoryAGet(ds, si+i));
+    printf("\n");
+    for (int i=0; i<50; i++)
+        printf("%c", memoryAGet(ds, si+i));
+    printf("\n");
     lodsb<MemAuto, DirAuto>();
-    if (al <= 0x4f)
+    al = 0; //gabo hack
+    if (al <= 0x4f) // pc:2da3:0bd3 gabo check 2da3:0207-1 0
         goto loc_2e60a;
     al = 0x4f;
 loc_2e60a: // 2da3:0bda
@@ -55382,7 +55436,7 @@ loc_2e60a: // 2da3:0bda
 }
 void sub_2e642() // 2da3:0c12
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     dx = 0xd7b1;
     goto loc_2e64f;
@@ -55424,7 +55478,7 @@ loc_2e694: // 2da3:0c64
 }
 void sub_2e647() // 2da3:0c17
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     dx = 0xd7b2;
     goto loc_2e64f;
@@ -55506,17 +55560,17 @@ void sub_2e6d6() // 2da3:0ca6
     cs = memoryAGet16(es, bx + di + 2);
     callIndirect(memoryAGet16(es, bx + di + 2), memoryAGet16(es, bx + di));
     assert(cs == 0x2da3);
+    flags.zero = ax == 0;
     if (!ax)
         goto loc_2e6e4;
     memoryASet16(ds, 0x02a4, ax);
 loc_2e6e4: // 2da3:0cb4
     di = pop();
     es = pop();
-    stop(/*inject ret*/);
 }
 void sub_2e6e7() // 2da3:0cb7
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     bx = sp;
     push(ds);
@@ -55538,7 +55592,10 @@ loc_2e709: // 2da3:0cd9
     dx = di + 0x30;
     interrupt(0x21);
     if (flags.carry)
+    {
+        assert(0); // inject zero
         goto loc_2e765;
+    }
     memoryASet16(ds, di, ax);
 loc_2e718: // 2da3:0ce8
     ax = 0x0d93;
@@ -55571,6 +55628,7 @@ loc_2e74f: // 2da3:0d1f
     memoryASet16(ds, di + 28, 0x0e08);
     memoryASet16(ds, di + 30, cs);
     ax = 0;
+    flags.zero = true;
 loc_2e765: // 2da3:0d35
     ds = pop();
     assert(pop() == 0x7777);
@@ -55856,7 +55914,7 @@ loc_2ea19: // 2da3:0fe9
 }
 void sub_2ea24() // 2da3:0ff4
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     bx = sp;
     push(ds);
@@ -55889,7 +55947,7 @@ loc_2ea45: // 2da3:1015
 }
 void sub_2ea52() // 2da3:1022
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     al = memoryAGet(ds, 0x02aa);
     ah = 0x3d;
@@ -56001,7 +56059,7 @@ loc_2eab3: // 2da3:1083
 }
 void sub_2ead3() // 2da3:10a3
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     bx = sp;
     di = memoryAGet16(ss, bx + 4);
@@ -56028,15 +56086,16 @@ loc_2eaf5: // 2da3:10c5
 void sub_2eaf8() // 2da3:10c8
 {
     CStackGuard sg(0, false);
+    flags.zero = memoryAGet16(es, di + 2) == 0xd7b3;
     if (memoryAGet16(es, di + 2) == 0xd7b3)
         goto loc_2eb06;
     memoryASet16(ds, 0x02a4, 0x0067);
 loc_2eb06: // 2da3:10d6
-    stop(/*inject ret*/);
+    return;
 }
 void sub_2eb07() // 2da3:10d7
 {
-    CStackGuardFar sg(0, true);
+//    CStackGuardFar sg(0, true);
     push(0x7777);
     ah = 0x3f;
     dx = 0x0064;

diff --git a/./tunneler.js b/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/tunneler/js/./tunneler.js
index 456d328..3da12d9 100644
--- a/./tunneler.js
+++ b/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/tunneler/js/./tunneler.js
@@ -1,4 +1,3 @@
-var intval = al;
 
 function* start() {
     headerSize = 0x08f0;
@@ -11,7 +10,7 @@ function* start() {
     load("/Users/gabrielvalky/Documents/git/Projects/CicoJit/gamelib/tunneler/dos", "TUNNELER.EXE", 39552);
     yield* sub_79ed();
 }
-function* callIndirect(int seg, int ofs) {
+function* callIndirect(seg, ofs) {
     switch (seg*0x10000+ofs)
     {
     case 0x8c0006a: yield* sub_8c6a(); return;
@@ -26,6 +25,7 @@ function* callIndirect(int seg, int ofs) {
     }
     assert(0);
 }
+var sub_1ed0_counter = 0;
 function* sub_1ed0() {
     var pc = 0;
     do switch (pc) {
@@ -42,7 +42,7 @@ function* sub_1ed0() {
         push(di);
         push(cs);
         cs = 0x08d0;
-    {static int counter; if (counter++%500 == 0) yield* sync();}
+    {if (sub_1ed0_counter++%500 == 0) yield* sync();}
         yield* sub_8db2();
         assert(cs == 0x01ed);
         r16[ax] = memory16get(ds, 0x1307);
@@ -349,6 +349,7 @@ function* sub_22d4() {
         }
         r16[cx] = pop();
         si += 0x01da;
+        si &= 0xffff;
         di += 0x0054;
         if (--r16[cx]) {
             pc = 0x233f;
@@ -6753,13 +6754,13 @@ function* sub_4bdb() {
         yield* sub_422d();
     case 0x52ef:
         yield* sync();
-        si = 0x0040;
-        es = si;
-        r16[ax] = memoryBiosGet16(es, 0x006c);
-        if (r16[ax] == memory16get(ss, bp - 10466)) {
-            pc = 0x52ef;
-            break;
-        }
+//        si = 0x0040;
+//        es = si;
+//        r16[ax] = memoryBiosGet16(es, 0x006c);
+//        if (r16[ax] == memory16get(ss, bp - 10466)) {
+//            pc = 0x52ef;
+//            break;
+//        }
         si = 0x0040;
         es = si;
         r16[ax] = memoryBiosGet16(es, 0x006c);
@@ -13204,7 +13205,7 @@ function* sub_8db2() {
     push(ds);
     bp = sp;
     r8[al] = memory[ss*16 + bp + 12];
-    int intval = r8[al];
+    var intval = r8[al];
     memory[cs*16 + 0x00dd] = r8[al];
     si = memory16get(ss, bp + 8);
     ds = memory16get(ss, bp + 8 + 2);
@@ -14314,7 +14315,7 @@ function* sub_9470() {
     r16[ax] += r16[dx];
     memory16set(ds, 0x1798, r16[ax]);
     memory16set(ds, 0x179c, r16[ax]);
-    r16[ax] = memoryPsp16(es, 0x0002);
+    r16[ax] = memoryPsp16get(es, 0x0002);
     r16[ax] -= 0x1000;
     memory16set(ds, 0x17a0, r16[ax]);
     memory16set(ds, 0x17a4, 0x00dd);
